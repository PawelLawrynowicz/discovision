
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ead8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000747b0  0801eda0  0801eda0  0002eda0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08093550  08093550  000a3550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08093558  08093558  000a3558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0809355c  0809355c  000a355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00008248  24000000  08093560  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00056164  24008260  0809b7a8  000b8260  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  000c0000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000b8248  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041571  00000000  00000000  000b8276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007400  00000000  00000000  000f97e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002060  00000000  00000000  00100be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001dc8  00000000  00000000  00102c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004196b  00000000  00000000  00104a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035136  00000000  00000000  0014637b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173d9b  00000000  00000000  0017b4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002ef24c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093a8  00000000  00000000  002ef29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000054  00000000  00000000  002f8644  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000ac  00000000  00000000  002f8698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24008260 	.word	0x24008260
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801ed70 	.word	0x0801ed70

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24008264 	.word	0x24008264
 80002ec:	0801ed70 	.word	0x0801ed70

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b9a8 	b.w	8000708 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f83a 	bl	8000438 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__aeabi_f2lz>:
 80003d0:	ee07 0a90 	vmov	s15, r0
 80003d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003dc:	d401      	bmi.n	80003e2 <__aeabi_f2lz+0x12>
 80003de:	f000 b80b 	b.w	80003f8 <__aeabi_f2ulz>
 80003e2:	eef1 7a67 	vneg.f32	s15, s15
 80003e6:	b508      	push	{r3, lr}
 80003e8:	ee17 0a90 	vmov	r0, s15
 80003ec:	f000 f804 	bl	80003f8 <__aeabi_f2ulz>
 80003f0:	4240      	negs	r0, r0
 80003f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f6:	bd08      	pop	{r3, pc}

080003f8 <__aeabi_f2ulz>:
 80003f8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000428 <__aeabi_f2ulz+0x30>
 80003fc:	ee07 0a90 	vmov	s15, r0
 8000400:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000430 <__aeabi_f2ulz+0x38>
 8000404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000408:	ee27 6b06 	vmul.f64	d6, d7, d6
 800040c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000410:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000414:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000418:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800041c:	ee16 1a10 	vmov	r1, s12
 8000420:	ee17 0a90 	vmov	r0, s15
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	00000000 	.word	0x00000000
 800042c:	3df00000 	.word	0x3df00000
 8000430:	00000000 	.word	0x00000000
 8000434:	41f00000 	.word	0x41f00000

08000438 <__udivmoddi4>:
 8000438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800043c:	9d08      	ldr	r5, [sp, #32]
 800043e:	4604      	mov	r4, r0
 8000440:	468e      	mov	lr, r1
 8000442:	2b00      	cmp	r3, #0
 8000444:	d14d      	bne.n	80004e2 <__udivmoddi4+0xaa>
 8000446:	428a      	cmp	r2, r1
 8000448:	4694      	mov	ip, r2
 800044a:	d969      	bls.n	8000520 <__udivmoddi4+0xe8>
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	b152      	cbz	r2, 8000468 <__udivmoddi4+0x30>
 8000452:	fa01 f302 	lsl.w	r3, r1, r2
 8000456:	f1c2 0120 	rsb	r1, r2, #32
 800045a:	fa20 f101 	lsr.w	r1, r0, r1
 800045e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000462:	ea41 0e03 	orr.w	lr, r1, r3
 8000466:	4094      	lsls	r4, r2
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	0c21      	lsrs	r1, r4, #16
 800046e:	fbbe f6f8 	udiv	r6, lr, r8
 8000472:	fa1f f78c 	uxth.w	r7, ip
 8000476:	fb08 e316 	mls	r3, r8, r6, lr
 800047a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800047e:	fb06 f107 	mul.w	r1, r6, r7
 8000482:	4299      	cmp	r1, r3
 8000484:	d90a      	bls.n	800049c <__udivmoddi4+0x64>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f106 30ff 	add.w	r0, r6, #4294967295
 800048e:	f080 811f 	bcs.w	80006d0 <__udivmoddi4+0x298>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 811c 	bls.w	80006d0 <__udivmoddi4+0x298>
 8000498:	3e02      	subs	r6, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a4:	fb08 3310 	mls	r3, r8, r0, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb00 f707 	mul.w	r7, r0, r7
 80004b0:	42a7      	cmp	r7, r4
 80004b2:	d90a      	bls.n	80004ca <__udivmoddi4+0x92>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004bc:	f080 810a 	bcs.w	80006d4 <__udivmoddi4+0x29c>
 80004c0:	42a7      	cmp	r7, r4
 80004c2:	f240 8107 	bls.w	80006d4 <__udivmoddi4+0x29c>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	1be4      	subs	r4, r4, r7
 80004d0:	2600      	movs	r6, #0
 80004d2:	b11d      	cbz	r5, 80004dc <__udivmoddi4+0xa4>
 80004d4:	40d4      	lsrs	r4, r2
 80004d6:	2300      	movs	r3, #0
 80004d8:	e9c5 4300 	strd	r4, r3, [r5]
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d909      	bls.n	80004fa <__udivmoddi4+0xc2>
 80004e6:	2d00      	cmp	r5, #0
 80004e8:	f000 80ef 	beq.w	80006ca <__udivmoddi4+0x292>
 80004ec:	2600      	movs	r6, #0
 80004ee:	e9c5 0100 	strd	r0, r1, [r5]
 80004f2:	4630      	mov	r0, r6
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	fab3 f683 	clz	r6, r3
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d14a      	bne.n	8000598 <__udivmoddi4+0x160>
 8000502:	428b      	cmp	r3, r1
 8000504:	d302      	bcc.n	800050c <__udivmoddi4+0xd4>
 8000506:	4282      	cmp	r2, r0
 8000508:	f200 80f9 	bhi.w	80006fe <__udivmoddi4+0x2c6>
 800050c:	1a84      	subs	r4, r0, r2
 800050e:	eb61 0303 	sbc.w	r3, r1, r3
 8000512:	2001      	movs	r0, #1
 8000514:	469e      	mov	lr, r3
 8000516:	2d00      	cmp	r5, #0
 8000518:	d0e0      	beq.n	80004dc <__udivmoddi4+0xa4>
 800051a:	e9c5 4e00 	strd	r4, lr, [r5]
 800051e:	e7dd      	b.n	80004dc <__udivmoddi4+0xa4>
 8000520:	b902      	cbnz	r2, 8000524 <__udivmoddi4+0xec>
 8000522:	deff      	udf	#255	; 0xff
 8000524:	fab2 f282 	clz	r2, r2
 8000528:	2a00      	cmp	r2, #0
 800052a:	f040 8092 	bne.w	8000652 <__udivmoddi4+0x21a>
 800052e:	eba1 010c 	sub.w	r1, r1, ip
 8000532:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000536:	fa1f fe8c 	uxth.w	lr, ip
 800053a:	2601      	movs	r6, #1
 800053c:	0c20      	lsrs	r0, r4, #16
 800053e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000542:	fb07 1113 	mls	r1, r7, r3, r1
 8000546:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800054a:	fb0e f003 	mul.w	r0, lr, r3
 800054e:	4288      	cmp	r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x12c>
 8000552:	eb1c 0101 	adds.w	r1, ip, r1
 8000556:	f103 38ff 	add.w	r8, r3, #4294967295
 800055a:	d202      	bcs.n	8000562 <__udivmoddi4+0x12a>
 800055c:	4288      	cmp	r0, r1
 800055e:	f200 80cb 	bhi.w	80006f8 <__udivmoddi4+0x2c0>
 8000562:	4643      	mov	r3, r8
 8000564:	1a09      	subs	r1, r1, r0
 8000566:	b2a4      	uxth	r4, r4
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1110 	mls	r1, r7, r0, r1
 8000570:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000574:	fb0e fe00 	mul.w	lr, lr, r0
 8000578:	45a6      	cmp	lr, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x156>
 800057c:	eb1c 0404 	adds.w	r4, ip, r4
 8000580:	f100 31ff 	add.w	r1, r0, #4294967295
 8000584:	d202      	bcs.n	800058c <__udivmoddi4+0x154>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f200 80bb 	bhi.w	8000702 <__udivmoddi4+0x2ca>
 800058c:	4608      	mov	r0, r1
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x9a>
 8000598:	f1c6 0720 	rsb	r7, r6, #32
 800059c:	40b3      	lsls	r3, r6
 800059e:	fa22 fc07 	lsr.w	ip, r2, r7
 80005a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005a6:	fa20 f407 	lsr.w	r4, r0, r7
 80005aa:	fa01 f306 	lsl.w	r3, r1, r6
 80005ae:	431c      	orrs	r4, r3
 80005b0:	40f9      	lsrs	r1, r7
 80005b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005b6:	fa00 f306 	lsl.w	r3, r0, r6
 80005ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80005be:	0c20      	lsrs	r0, r4, #16
 80005c0:	fa1f fe8c 	uxth.w	lr, ip
 80005c4:	fb09 1118 	mls	r1, r9, r8, r1
 80005c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005cc:	fb08 f00e 	mul.w	r0, r8, lr
 80005d0:	4288      	cmp	r0, r1
 80005d2:	fa02 f206 	lsl.w	r2, r2, r6
 80005d6:	d90b      	bls.n	80005f0 <__udivmoddi4+0x1b8>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80005e0:	f080 8088 	bcs.w	80006f4 <__udivmoddi4+0x2bc>
 80005e4:	4288      	cmp	r0, r1
 80005e6:	f240 8085 	bls.w	80006f4 <__udivmoddi4+0x2bc>
 80005ea:	f1a8 0802 	sub.w	r8, r8, #2
 80005ee:	4461      	add	r1, ip
 80005f0:	1a09      	subs	r1, r1, r0
 80005f2:	b2a4      	uxth	r4, r4
 80005f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80005f8:	fb09 1110 	mls	r1, r9, r0, r1
 80005fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000600:	fb00 fe0e 	mul.w	lr, r0, lr
 8000604:	458e      	cmp	lr, r1
 8000606:	d908      	bls.n	800061a <__udivmoddi4+0x1e2>
 8000608:	eb1c 0101 	adds.w	r1, ip, r1
 800060c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000610:	d26c      	bcs.n	80006ec <__udivmoddi4+0x2b4>
 8000612:	458e      	cmp	lr, r1
 8000614:	d96a      	bls.n	80006ec <__udivmoddi4+0x2b4>
 8000616:	3802      	subs	r0, #2
 8000618:	4461      	add	r1, ip
 800061a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800061e:	fba0 9402 	umull	r9, r4, r0, r2
 8000622:	eba1 010e 	sub.w	r1, r1, lr
 8000626:	42a1      	cmp	r1, r4
 8000628:	46c8      	mov	r8, r9
 800062a:	46a6      	mov	lr, r4
 800062c:	d356      	bcc.n	80006dc <__udivmoddi4+0x2a4>
 800062e:	d053      	beq.n	80006d8 <__udivmoddi4+0x2a0>
 8000630:	b15d      	cbz	r5, 800064a <__udivmoddi4+0x212>
 8000632:	ebb3 0208 	subs.w	r2, r3, r8
 8000636:	eb61 010e 	sbc.w	r1, r1, lr
 800063a:	fa01 f707 	lsl.w	r7, r1, r7
 800063e:	fa22 f306 	lsr.w	r3, r2, r6
 8000642:	40f1      	lsrs	r1, r6
 8000644:	431f      	orrs	r7, r3
 8000646:	e9c5 7100 	strd	r7, r1, [r5]
 800064a:	2600      	movs	r6, #0
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	40d8      	lsrs	r0, r3
 8000658:	fa0c fc02 	lsl.w	ip, ip, r2
 800065c:	fa21 f303 	lsr.w	r3, r1, r3
 8000660:	4091      	lsls	r1, r2
 8000662:	4301      	orrs	r1, r0
 8000664:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000668:	fa1f fe8c 	uxth.w	lr, ip
 800066c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000670:	fb07 3610 	mls	r6, r7, r0, r3
 8000674:	0c0b      	lsrs	r3, r1, #16
 8000676:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800067a:	fb00 f60e 	mul.w	r6, r0, lr
 800067e:	429e      	cmp	r6, r3
 8000680:	fa04 f402 	lsl.w	r4, r4, r2
 8000684:	d908      	bls.n	8000698 <__udivmoddi4+0x260>
 8000686:	eb1c 0303 	adds.w	r3, ip, r3
 800068a:	f100 38ff 	add.w	r8, r0, #4294967295
 800068e:	d22f      	bcs.n	80006f0 <__udivmoddi4+0x2b8>
 8000690:	429e      	cmp	r6, r3
 8000692:	d92d      	bls.n	80006f0 <__udivmoddi4+0x2b8>
 8000694:	3802      	subs	r0, #2
 8000696:	4463      	add	r3, ip
 8000698:	1b9b      	subs	r3, r3, r6
 800069a:	b289      	uxth	r1, r1
 800069c:	fbb3 f6f7 	udiv	r6, r3, r7
 80006a0:	fb07 3316 	mls	r3, r7, r6, r3
 80006a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006a8:	fb06 f30e 	mul.w	r3, r6, lr
 80006ac:	428b      	cmp	r3, r1
 80006ae:	d908      	bls.n	80006c2 <__udivmoddi4+0x28a>
 80006b0:	eb1c 0101 	adds.w	r1, ip, r1
 80006b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80006b8:	d216      	bcs.n	80006e8 <__udivmoddi4+0x2b0>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d914      	bls.n	80006e8 <__udivmoddi4+0x2b0>
 80006be:	3e02      	subs	r6, #2
 80006c0:	4461      	add	r1, ip
 80006c2:	1ac9      	subs	r1, r1, r3
 80006c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006c8:	e738      	b.n	800053c <__udivmoddi4+0x104>
 80006ca:	462e      	mov	r6, r5
 80006cc:	4628      	mov	r0, r5
 80006ce:	e705      	b.n	80004dc <__udivmoddi4+0xa4>
 80006d0:	4606      	mov	r6, r0
 80006d2:	e6e3      	b.n	800049c <__udivmoddi4+0x64>
 80006d4:	4618      	mov	r0, r3
 80006d6:	e6f8      	b.n	80004ca <__udivmoddi4+0x92>
 80006d8:	454b      	cmp	r3, r9
 80006da:	d2a9      	bcs.n	8000630 <__udivmoddi4+0x1f8>
 80006dc:	ebb9 0802 	subs.w	r8, r9, r2
 80006e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006e4:	3801      	subs	r0, #1
 80006e6:	e7a3      	b.n	8000630 <__udivmoddi4+0x1f8>
 80006e8:	4646      	mov	r6, r8
 80006ea:	e7ea      	b.n	80006c2 <__udivmoddi4+0x28a>
 80006ec:	4620      	mov	r0, r4
 80006ee:	e794      	b.n	800061a <__udivmoddi4+0x1e2>
 80006f0:	4640      	mov	r0, r8
 80006f2:	e7d1      	b.n	8000698 <__udivmoddi4+0x260>
 80006f4:	46d0      	mov	r8, sl
 80006f6:	e77b      	b.n	80005f0 <__udivmoddi4+0x1b8>
 80006f8:	3b02      	subs	r3, #2
 80006fa:	4461      	add	r1, ip
 80006fc:	e732      	b.n	8000564 <__udivmoddi4+0x12c>
 80006fe:	4630      	mov	r0, r6
 8000700:	e709      	b.n	8000516 <__udivmoddi4+0xde>
 8000702:	4464      	add	r4, ip
 8000704:	3802      	subs	r0, #2
 8000706:	e742      	b.n	800058e <__udivmoddi4+0x156>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_CRC_Init+0x3c>)
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <MX_CRC_Init+0x40>)
 8000714:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_CRC_Init+0x3c>)
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_CRC_Init+0x3c>)
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_CRC_Init+0x3c>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_CRC_Init+0x3c>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_CRC_Init+0x3c>)
 8000730:	2201      	movs	r2, #1
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_CRC_Init+0x3c>)
 8000736:	f006 fa37 	bl	8006ba8 <HAL_CRC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000740:	f001 f9d6 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2400827c 	.word	0x2400827c
 800074c:	40023000 	.word	0x40023000

08000750 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <HAL_CRC_MspInit+0x3c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d10e      	bne.n	8000780 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_CRC_MspInit+0x40>)
 8000764:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000768:	4a09      	ldr	r2, [pc, #36]	; (8000790 <HAL_CRC_MspInit+0x40>)
 800076a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_CRC_MspInit+0x40>)
 8000774:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40023000 	.word	0x40023000
 8000790:	58024400 	.word	0x58024400

08000794 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_DCMI_Init+0x60>)
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <MX_DCMI_Init+0x64>)
 800079c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007a6:	2220      	movs	r2, #32
 80007a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_DCMI_Init+0x60>)
 80007e2:	f006 fad3 	bl	8006d8c <HAL_DCMI_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f001 f980 	bl	8001af0 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	240082a0 	.word	0x240082a0
 80007f8:	48020000 	.word	0x48020000

080007fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a76      	ldr	r2, [pc, #472]	; (80009f4 <HAL_DCMI_MspInit+0x1f8>)
 800081a:	4293      	cmp	r3, r2
 800081c:	f040 80e5 	bne.w	80009ea <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000820:	4b75      	ldr	r3, [pc, #468]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000822:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000826:	4a74      	ldr	r2, [pc, #464]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000830:	4b71      	ldr	r3, [pc, #452]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000832:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	623b      	str	r3, [r7, #32]
 800083c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b6e      	ldr	r3, [pc, #440]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	4a6c      	ldr	r2, [pc, #432]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084e:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000850:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000854:	f003 0302 	and.w	r3, r3, #2
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800085c:	4b66      	ldr	r3, [pc, #408]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	4a65      	ldr	r2, [pc, #404]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800086c:	4b62      	ldr	r3, [pc, #392]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 800086e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	4b5f      	ldr	r3, [pc, #380]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	4a5d      	ldr	r2, [pc, #372]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800088a:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 800088c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	4a56      	ldr	r2, [pc, #344]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a8:	4b53      	ldr	r3, [pc, #332]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 80008aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	4a4e      	ldr	r2, [pc, #312]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c6:	4b4c      	ldr	r3, [pc, #304]	; (80009f8 <HAL_DCMI_MspInit+0x1fc>)
 80008c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80008d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008e6:	230d      	movs	r3, #13
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <HAL_DCMI_MspInit+0x200>)
 80008f2:	f00a fc85 	bl	800b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000908:	230d      	movs	r3, #13
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	483b      	ldr	r0, [pc, #236]	; (8000a00 <HAL_DCMI_MspInit+0x204>)
 8000914:	f00a fc74 	bl	800b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000918:	2308      	movs	r3, #8
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000928:	230d      	movs	r3, #13
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	4834      	ldr	r0, [pc, #208]	; (8000a04 <HAL_DCMI_MspInit+0x208>)
 8000934:	f00a fc64 	bl	800b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000938:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800094a:	230d      	movs	r3, #13
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	482c      	ldr	r0, [pc, #176]	; (8000a08 <HAL_DCMI_MspInit+0x20c>)
 8000956:	f00a fc53 	bl	800b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800095a:	2350      	movs	r3, #80	; 0x50
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800096a:	230d      	movs	r3, #13
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	4825      	ldr	r0, [pc, #148]	; (8000a0c <HAL_DCMI_MspInit+0x210>)
 8000976:	f00a fc43 	bl	800b200 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <HAL_DCMI_MspInit+0x218>)
 800097e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 8000982:	224b      	movs	r2, #75	; 0x4b
 8000984:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 8000994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000998:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 800099c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 80009a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 80009b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009b6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 80009c0:	f006 fcb2 	bl	8007328 <HAL_DMA_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80009ca:	f001 f891 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 80009d2:	649a      	str	r2, [r3, #72]	; 0x48
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_DCMI_MspInit+0x214>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	204e      	movs	r0, #78	; 0x4e
 80009e0:	f006 f8ad 	bl	8006b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80009e4:	204e      	movs	r0, #78	; 0x4e
 80009e6:	f006 f8c4 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80009ea:	bf00      	nop
 80009ec:	3738      	adds	r7, #56	; 0x38
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	48020000 	.word	0x48020000
 80009f8:	58024400 	.word	0x58024400
 80009fc:	58020400 	.word	0x58020400
 8000a00:	58021800 	.word	0x58021800
 8000a04:	58020c00 	.word	0x58020c00
 8000a08:	58020800 	.word	0x58020800
 8000a0c:	58020000 	.word	0x58020000
 8000a10:	240082f0 	.word	0x240082f0
 8000a14:	40020428 	.word	0x40020428

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a20:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a30:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2039      	movs	r0, #57	; 0x39
 8000a42:	f006 f87c 	bl	8006b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a46:	2039      	movs	r0, #57	; 0x39
 8000a48:	f006 f893 	bl	8006b72 <HAL_NVIC_EnableIRQ>

}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024400 	.word	0x58024400

08000a58 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <MX_DMA2D_Init+0x74>)
 8000a60:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a68:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000aa2:	f009 fb21 	bl	800a0e8 <HAL_DMA2D_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000aac:	f001 f820 	bl	8001af0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000ab4:	f009 fda0 	bl	800a5f8 <HAL_DMA2D_ConfigLayer>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 8000abe:	f001 f817 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24008368 	.word	0x24008368
 8000acc:	52001000 	.word	0x52001000

08000ad0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_DMA2D_MspInit+0x48>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d116      	bne.n	8000b10 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_DMA2D_MspInit+0x4c>)
 8000ae4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <HAL_DMA2D_MspInit+0x4c>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_DMA2D_MspInit+0x4c>)
 8000af4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000af8:	f003 0310 	and.w	r3, r3, #16
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	205a      	movs	r0, #90	; 0x5a
 8000b06:	f006 f81a 	bl	8006b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b0a:	205a      	movs	r0, #90	; 0x5a
 8000b0c:	f006 f831 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	52001000 	.word	0x52001000
 8000b1c:	58024400 	.word	0x58024400

08000b20 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <DMA2D_Convert+0x4c>)
 8000b3a:	f009 fb39 	bl	800a1b0 <HAL_DMA2D_Start>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, LTDC_WIDTH, LTDC_HEIGHT);
  if (status != HAL_OK) {
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000b48:	f000 ffd2 	bl	8001af0 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <DMA2D_Convert+0x4c>)
 8000b52:	f009 fb58 	bl	800a206 <HAL_DMA2D_PollForTransfer>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <DMA2D_Convert+0x44>
    Error_Handler();
 8000b60:	f000 ffc6 	bl	8001af0 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	24008368 	.word	0x24008368

08000b70 <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "draw.h"

void drawVLine(uint32_t *buffer, int32_t x, int32_t y_start, int32_t y_end){
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
	if(y_start<0){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	da01      	bge.n	8000b88 <drawVLine+0x18>
		y_start=0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
	}
	if(y_end>LTDC_HEIGHT){
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000b8e:	dd02      	ble.n	8000b96 <drawVLine+0x26>
		y_end=LTDC_HEIGHT;
 8000b90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b94:	603b      	str	r3, [r7, #0]
	}
	for(uint32_t i = y_start; i<y_end; i++){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e010      	b.n	8000bbe <drawVLine+0x4e>
			buffer[x+i*LTDC_WIDTH] = COLOR;
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	015b      	lsls	r3, r3, #5
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000bb6:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3ea      	bcc.n	8000b9c <drawVLine+0x2c>
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	371c      	adds	r7, #28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <drawHLine>:
void drawHLine(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	603b      	str	r3, [r7, #0]
	if(x_start<0){
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da01      	bge.n	8000bec <drawHLine+0x18>
		x_start=0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
	}
	if(x_end>LTDC_WIDTH){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000bf2:	dd02      	ble.n	8000bfa <drawHLine+0x26>
		x_end=LTDC_WIDTH;
 8000bf4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bf8:	607b      	str	r3, [r7, #4]
	}
	x_end=x_end+x_end%2;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	bfb8      	it	lt
 8000c04:	425b      	neglt	r3, r3
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	607b      	str	r3, [r7, #4]
	for(uint32_t i = x_start; i<x_end; i++){
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e01f      	b.n	8000c52 <drawHLine+0x7e>
		buffer[i+LTDC_WIDTH*y] = COLOR;
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	015b      	lsls	r3, r3, #5
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	4413      	add	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000c2c:	601a      	str	r2, [r3, #0]
		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)] = COLOR;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	4613      	mov	r3, r2
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	1a9b      	subs	r3, r3, r2
 8000c38:	015b      	lsls	r3, r3, #5
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000c4a:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start; i<x_end; i++){
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3db      	bcc.n	8000c12 <drawHLine+0x3e>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <drawRectangle>:
void drawRectangle(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y_start, int32_t y_end){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
	drawVLine(buffer, x_start, y_start, y_end);
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f7ff ff77 	bl	8000b70 <drawVLine>
	drawVLine(buffer, x_end, y_start, y_end);
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff ff71 	bl	8000b70 <drawVLine>
	drawHLine(buffer, x_start, x_end, y_start);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff ff9d 	bl	8000bd4 <drawHLine>
	drawHLine(buffer, x_start, x_end, y_end);
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f7ff ff97 	bl	8000bd4 <drawHLine>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000ccc:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <MX_FMC_Init+0x110>)
 8000cce:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000cd6:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000cdc:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf4:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d02:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000d20:	2306      	movs	r3, #6
 8000d22:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000d24:	2303      	movs	r3, #3
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4821      	ldr	r0, [pc, #132]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000d38:	f00e feb6 	bl	800faa8 <HAL_SDRAM_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000d42:	f000 fed5 	bl	8001af0 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000d46:	2301      	movs	r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4817      	ldr	r0, [pc, #92]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000d60:	f00e fede 	bl	800fb20 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000d64:	2001      	movs	r0, #1
 8000d66:	f005 fdeb 	bl	8006940 <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d74:	4619      	mov	r1, r3
 8000d76:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000d78:	f00e fed2 	bl	800fb20 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000d8e:	f00e fec7 	bl	800fb20 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000d92:	2304      	movs	r3, #4
 8000d94:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000d96:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000d9a:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000da6:	f00e febb 	bl	800fb20 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000daa:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_FMC_Init+0x10c>)
 8000db0:	f00e feeb 	bl	800fb8a <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	240083d0 	.word	0x240083d0
 8000dc0:	52004140 	.word	0x52004140

08000dc4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0b8      	sub	sp, #224	; 0xe0
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dda:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_FMC_MspInit+0x178>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 80a7 	bne.w	8000f32 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000de4:	4b55      	ldr	r3, [pc, #340]	; (8000f3c <HAL_FMC_MspInit+0x178>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	22c0      	movs	r2, #192	; 0xc0
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f01c ff52 	bl	801dc9c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000e04:	230c      	movs	r3, #12
 8000e06:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000e08:	23c8      	movs	r3, #200	; 0xc8
 8000e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000e18:	2340      	movs	r3, #64	; 0x40
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00c ff3f 	bl	800dcac <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000e34:	f000 fe5c 	bl	8001af0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <HAL_FMC_MspInit+0x17c>)
 8000e3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e3e:	4a40      	ldr	r2, [pc, #256]	; (8000f40 <HAL_FMC_MspInit+0x17c>)
 8000e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e44:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000e48:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_FMC_MspInit+0x17c>)
 8000e4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000e56:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e70:	230c      	movs	r3, #12
 8000e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4831      	ldr	r0, [pc, #196]	; (8000f44 <HAL_FMC_MspInit+0x180>)
 8000e7e:	f00a f9bf 	bl	800b200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000e82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4827      	ldr	r0, [pc, #156]	; (8000f48 <HAL_FMC_MspInit+0x184>)
 8000eaa:	f00a f9a9 	bl	800b200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000eae:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481d      	ldr	r0, [pc, #116]	; (8000f4c <HAL_FMC_MspInit+0x188>)
 8000ed6:	f00a f993 	bl	800b200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000eda:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ede:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000efa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000efe:	4619      	mov	r1, r3
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <HAL_FMC_MspInit+0x18c>)
 8000f02:	f00a f97d 	bl	800b200 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000f06:	23e0      	movs	r3, #224	; 0xe0
 8000f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <HAL_FMC_MspInit+0x190>)
 8000f2c:	f00a f968 	bl	800b200 <HAL_GPIO_Init>
 8000f30:	e000      	b.n	8000f34 <HAL_FMC_MspInit+0x170>
    return;
 8000f32:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f34:	37e0      	adds	r7, #224	; 0xe0
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24008404 	.word	0x24008404
 8000f40:	58024400 	.word	0x58024400
 8000f44:	58021800 	.word	0x58021800
 8000f48:	58020c00 	.word	0x58020c00
 8000f4c:	58021000 	.word	0x58021000
 8000f50:	58021400 	.word	0x58021400
 8000f54:	58021c00 	.word	0x58021c00

08000f58 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f60:	f7ff ff30 	bl	8000dc4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b090      	sub	sp, #64	; 0x40
 8000f70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f82:	4bc0      	ldr	r3, [pc, #768]	; (8001284 <MX_GPIO_Init+0x318>)
 8000f84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f88:	4abe      	ldr	r2, [pc, #760]	; (8001284 <MX_GPIO_Init+0x318>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f92:	4bbc      	ldr	r3, [pc, #752]	; (8001284 <MX_GPIO_Init+0x318>)
 8000f94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4bb8      	ldr	r3, [pc, #736]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa6:	4ab7      	ldr	r2, [pc, #732]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fb0:	4bb4      	ldr	r3, [pc, #720]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	4bb1      	ldr	r3, [pc, #708]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fc4:	4aaf      	ldr	r2, [pc, #700]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fce:	4bad      	ldr	r3, [pc, #692]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fdc:	4ba9      	ldr	r3, [pc, #676]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe2:	4aa8      	ldr	r2, [pc, #672]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fe4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fec:	4ba5      	ldr	r3, [pc, #660]	; (8001284 <MX_GPIO_Init+0x318>)
 8000fee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4ba2      	ldr	r3, [pc, #648]	; (8001284 <MX_GPIO_Init+0x318>)
 8000ffc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001000:	4aa0      	ldr	r2, [pc, #640]	; (8001284 <MX_GPIO_Init+0x318>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800100a:	4b9e      	ldr	r3, [pc, #632]	; (8001284 <MX_GPIO_Init+0x318>)
 800100c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001018:	4b9a      	ldr	r3, [pc, #616]	; (8001284 <MX_GPIO_Init+0x318>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101e:	4a99      	ldr	r2, [pc, #612]	; (8001284 <MX_GPIO_Init+0x318>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001028:	4b96      	ldr	r3, [pc, #600]	; (8001284 <MX_GPIO_Init+0x318>)
 800102a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001036:	4b93      	ldr	r3, [pc, #588]	; (8001284 <MX_GPIO_Init+0x318>)
 8001038:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103c:	4a91      	ldr	r2, [pc, #580]	; (8001284 <MX_GPIO_Init+0x318>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001046:	4b8f      	ldr	r3, [pc, #572]	; (8001284 <MX_GPIO_Init+0x318>)
 8001048:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001054:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <MX_GPIO_Init+0x318>)
 8001056:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105a:	4a8a      	ldr	r2, [pc, #552]	; (8001284 <MX_GPIO_Init+0x318>)
 800105c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001060:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001064:	4b87      	ldr	r3, [pc, #540]	; (8001284 <MX_GPIO_Init+0x318>)
 8001066:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800106a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b84      	ldr	r3, [pc, #528]	; (8001284 <MX_GPIO_Init+0x318>)
 8001074:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001078:	4a82      	ldr	r2, [pc, #520]	; (8001284 <MX_GPIO_Init+0x318>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001082:	4b80      	ldr	r3, [pc, #512]	; (8001284 <MX_GPIO_Init+0x318>)
 8001084:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001090:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <MX_GPIO_Init+0x318>)
 8001092:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001096:	4a7b      	ldr	r2, [pc, #492]	; (8001284 <MX_GPIO_Init+0x318>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010a0:	4b78      	ldr	r3, [pc, #480]	; (8001284 <MX_GPIO_Init+0x318>)
 80010a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ae:	4b75      	ldr	r3, [pc, #468]	; (8001284 <MX_GPIO_Init+0x318>)
 80010b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b4:	4a73      	ldr	r2, [pc, #460]	; (8001284 <MX_GPIO_Init+0x318>)
 80010b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010be:	4b71      	ldr	r3, [pc, #452]	; (8001284 <MX_GPIO_Init+0x318>)
 80010c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	210e      	movs	r1, #14
 80010d0:	486d      	ldr	r0, [pc, #436]	; (8001288 <MX_GPIO_Init+0x31c>)
 80010d2:	f00a fb4f 	bl	800b774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f640 0104 	movw	r1, #2052	; 0x804
 80010dc:	486b      	ldr	r0, [pc, #428]	; (800128c <MX_GPIO_Init+0x320>)
 80010de:	f00a fb49 	bl	800b774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e8:	4869      	ldr	r0, [pc, #420]	; (8001290 <MX_GPIO_Init+0x324>)
 80010ea:	f00a fb43 	bl	800b774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2108      	movs	r1, #8
 80010f2:	4866      	ldr	r0, [pc, #408]	; (800128c <MX_GPIO_Init+0x320>)
 80010f4:	f00a fb3e 	bl	800b774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2106      	movs	r1, #6
 80010fc:	4864      	ldr	r0, [pc, #400]	; (8001290 <MX_GPIO_Init+0x324>)
 80010fe:	f00a fb39 	bl	800b774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8001102:	2330      	movs	r3, #48	; 0x30
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001114:	4619      	mov	r1, r3
 8001116:	485c      	ldr	r0, [pc, #368]	; (8001288 <MX_GPIO_Init+0x31c>)
 8001118:	f00a f872 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 800111c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800112e:	2305      	movs	r3, #5
 8001130:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001136:	4619      	mov	r1, r3
 8001138:	4854      	ldr	r0, [pc, #336]	; (800128c <MX_GPIO_Init+0x320>)
 800113a:	f00a f861 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800113e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001150:	2309      	movs	r3, #9
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	484c      	ldr	r0, [pc, #304]	; (800128c <MX_GPIO_Init+0x320>)
 800115c:	f00a f850 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001170:	230a      	movs	r3, #10
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001178:	4619      	mov	r1, r3
 800117a:	4846      	ldr	r0, [pc, #280]	; (8001294 <MX_GPIO_Init+0x328>)
 800117c:	f00a f840 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8001180:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001192:	230c      	movs	r3, #12
 8001194:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119a:	4619      	mov	r1, r3
 800119c:	483e      	ldr	r0, [pc, #248]	; (8001298 <MX_GPIO_Init+0x32c>)
 800119e:	f00a f82f 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80011a2:	230e      	movs	r3, #14
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b6:	4619      	mov	r1, r3
 80011b8:	4833      	ldr	r0, [pc, #204]	; (8001288 <MX_GPIO_Init+0x31c>)
 80011ba:	f00a f821 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 80011be:	f640 030c 	movw	r3, #2060	; 0x80c
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d4:	4619      	mov	r1, r3
 80011d6:	482d      	ldr	r0, [pc, #180]	; (800128c <MX_GPIO_Init+0x320>)
 80011d8:	f00a f812 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80011dc:	2304      	movs	r3, #4
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ec:	230c      	movs	r3, #12
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f4:	4619      	mov	r1, r3
 80011f6:	4827      	ldr	r0, [pc, #156]	; (8001294 <MX_GPIO_Init+0x328>)
 80011f8:	f00a f802 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001210:	4619      	mov	r1, r3
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <MX_GPIO_Init+0x31c>)
 8001214:	f009 fff4 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122a:	2305      	movs	r3, #5
 800122c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	4816      	ldr	r0, [pc, #88]	; (8001290 <MX_GPIO_Init+0x324>)
 8001236:	f009 ffe3 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 800123a:	f640 0306 	movw	r3, #2054	; 0x806
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_GPIO_Init+0x324>)
 8001254:	f009 ffd4 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <MX_GPIO_Init+0x32c>)
 8001270:	f009 ffc6 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	e00c      	b.n	800129c <MX_GPIO_Init+0x330>
 8001282:	bf00      	nop
 8001284:	58024400 	.word	0x58024400
 8001288:	58022000 	.word	0x58022000
 800128c:	58021800 	.word	0x58021800
 8001290:	58020000 	.word	0x58020000
 8001294:	58020c00 	.word	0x58020c00
 8001298:	58020800 	.word	0x58020800
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4842      	ldr	r0, [pc, #264]	; (80013b8 <MX_GPIO_Init+0x44c>)
 80012ae:	f009 ffa7 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012c2:	230a      	movs	r3, #10
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ca:	4619      	mov	r1, r3
 80012cc:	483b      	ldr	r0, [pc, #236]	; (80013bc <MX_GPIO_Init+0x450>)
 80012ce:	f009 ff97 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80012d2:	230c      	movs	r3, #12
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e2:	2305      	movs	r3, #5
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	4619      	mov	r1, r3
 80012ec:	4834      	ldr	r0, [pc, #208]	; (80013c0 <MX_GPIO_Init+0x454>)
 80012ee:	f009 ff87 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80012f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f8:	2312      	movs	r3, #18
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001304:	2304      	movs	r3, #4
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130c:	4619      	mov	r1, r3
 800130e:	482d      	ldr	r0, [pc, #180]	; (80013c4 <MX_GPIO_Init+0x458>)
 8001310:	f009 ff76 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8001314:	2322      	movs	r3, #34	; 0x22
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001324:	230a      	movs	r3, #10
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	4824      	ldr	r0, [pc, #144]	; (80013c0 <MX_GPIO_Init+0x454>)
 8001330:	f009 ff66 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001334:	2304      	movs	r3, #4
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001338:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001346:	4619      	mov	r1, r3
 8001348:	481f      	ldr	r0, [pc, #124]	; (80013c8 <MX_GPIO_Init+0x45c>)
 800134a:	f009 ff59 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 800134e:	2308      	movs	r3, #8
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800135e:	2309      	movs	r3, #9
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001366:	4619      	mov	r1, r3
 8001368:	4817      	ldr	r0, [pc, #92]	; (80013c8 <MX_GPIO_Init+0x45c>)
 800136a:	f009 ff49 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 800136e:	2309      	movs	r3, #9
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800137e:	2305      	movs	r3, #5
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <MX_GPIO_Init+0x44c>)
 800138a:	f009 ff39 	bl	800b200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800138e:	2304      	movs	r3, #4
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800139e:	2309      	movs	r3, #9
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_GPIO_Init+0x460>)
 80013aa:	f009 ff29 	bl	800b200 <HAL_GPIO_Init>

}
 80013ae:	bf00      	nop
 80013b0:	3740      	adds	r7, #64	; 0x40
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	58020000 	.word	0x58020000
 80013bc:	58021800 	.word	0x58021800
 80013c0:	58020800 	.word	0x58020800
 80013c4:	58020c00 	.word	0x58020c00
 80013c8:	58021c00 	.word	0x58021c00
 80013cc:	58020400 	.word	0x58020400

080013d0 <_Z13rescale_ImagePmS_mmmm>:
 *      Author: pwl
 */

#include <img_utils.hpp>
void rescale_Image(uint32_t *srcImg,uint32_t *dstImg, uint32_t srcWidth, uint32_t srcHeight, uint32_t dstWidth, uint32_t dstHeight)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	; 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
    float scaleX = (float)srcWidth / dstWidth;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f6:	edc7 7a07 	vstr	s15, [r7, #28]
    float scaleY = (float)srcHeight / dstHeight;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc7 7a06 	vstr	s15, [r7, #24]

    for (uint32_t y = 0; y < dstHeight; y++)
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	429a      	cmp	r2, r3
 8001420:	d23d      	bcs.n	800149e <_Z13rescale_ImagePmS_mmmm+0xce>
    {
        for (uint32_t x = 0; x < dstWidth; x++)
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	429a      	cmp	r2, r3
 800142c:	d233      	bcs.n	8001496 <_Z13rescale_ImagePmS_mmmm+0xc6>
        {
            uint32_t srcX = (uint32_t)(x * scaleX);
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001438:	edd7 7a07 	vldr	s15, [r7, #28]
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001444:	ee17 3a90 	vmov	r3, s15
 8001448:	617b      	str	r3, [r7, #20]
            uint32_t srcY = (uint32_t)(y * scaleY);
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001454:	edd7 7a06 	vldr	s15, [r7, #24]
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001460:	ee17 3a90 	vmov	r3, s15
 8001464:	613b      	str	r3, [r7, #16]

            dstImg[y * dstWidth + x] = srcImg[srcY * srcWidth + srcX];
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	fb03 f202 	mul.w	r2, r3, r2
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	441a      	add	r2, r3
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800147c:	fb03 f101 	mul.w	r1, r3, r1
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	440b      	add	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	440b      	add	r3, r1
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	601a      	str	r2, [r3, #0]
        for (uint32_t x = 0; x < dstWidth; x++)
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	3301      	adds	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	e7c7      	b.n	8001426 <_Z13rescale_ImagePmS_mmmm+0x56>
    for (uint32_t y = 0; y < dstHeight; y++)
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	3301      	adds	r3, #1
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
 800149c:	e7bd      	b.n	800141a <_Z13rescale_ImagePmS_mmmm+0x4a>
        }
    }
}
 800149e:	bf00      	nop
 80014a0:	372c      	adds	r7, #44	; 0x2c
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2234      	movs	r2, #52	; 0x34
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f01c fbef 	bl	801dc9c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014c0:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <MX_LTDC_Init+0xf8>)
 80014c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014d6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014ec:	220e      	movs	r2, #14
 80014ee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014f2:	2205      	movs	r2, #5
 80014f4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <MX_LTDC_Init+0xf4>)
 80014f8:	f240 228e 	movw	r2, #654	; 0x28e
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <MX_LTDC_Init+0xf4>)
 8001500:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_LTDC_Init+0xf4>)
 8001508:	f44f 7225 	mov.w	r2, #660	; 0x294
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <MX_LTDC_Init+0xf4>)
 8001510:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MX_LTDC_Init+0xf4>)
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <MX_LTDC_Init+0xf4>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_LTDC_Init+0xf4>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800152e:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_LTDC_Init+0xf4>)
 8001530:	f00a ffc0 	bl	800c4b4 <HAL_LTDC_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800153a:	f000 fad9 	bl	8001af0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001560:	2305      	movs	r3, #5
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_LTDC_Init+0xf4>)
 800158a:	f00b f925 	bl	800c7d8 <HAL_LTDC_ConfigLayer>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001594:	f000 faac 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24008408 	.word	0x24008408
 80015a4:	50001000 	.word	0x50001000

080015a8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0bc      	sub	sp, #240	; 0xf0
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	22c0      	movs	r2, #192	; 0xc0
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f01c fb67 	bl	801dc9c <memset>
  if(ltdcHandle->Instance==LTDC)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5a      	ldr	r2, [pc, #360]	; (800173c <HAL_LTDC_MspInit+0x194>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	f040 80ad 	bne.w	8001734 <HAL_LTDC_MspInit+0x18c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80015e6:	2318      	movs	r3, #24
 80015e8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80015ea:	23c0      	movs	r3, #192	; 0xc0
 80015ec:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80015ee:	2311      	movs	r3, #17
 80015f0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 80015f6:	2310      	movs	r3, #16
 80015f8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80015fe:	2300      	movs	r3, #0
 8001600:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	4618      	mov	r0, r3
 800160c:	f00c fb4e 	bl	800dcac <HAL_RCCEx_PeriphCLKConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 8001616:	f000 fa6b 	bl	8001af0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 800161c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001620:	4a47      	ldr	r2, [pc, #284]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 800162c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 800163a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800163e:	4a40      	ldr	r2, [pc, #256]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 8001640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001644:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001648:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 800164a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 8001658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800165c:	4a38      	ldr	r2, [pc, #224]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 8001668:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800166c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 8001676:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800167a:	4a31      	ldr	r2, [pc, #196]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_LTDC_MspInit+0x198>)
 8001686:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001692:	23ff      	movs	r3, #255	; 0xff
 8001694:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016aa:	230e      	movs	r3, #14
 80016ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b4:	4619      	mov	r1, r3
 80016b6:	4823      	ldr	r0, [pc, #140]	; (8001744 <HAL_LTDC_MspInit+0x19c>)
 80016b8:	f009 fda2 	bl	800b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80016bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016d6:	230e      	movs	r3, #14
 80016d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016e0:	4619      	mov	r1, r3
 80016e2:	4819      	ldr	r0, [pc, #100]	; (8001748 <HAL_LTDC_MspInit+0x1a0>)
 80016e4:	f009 fd8c 	bl	800b200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80016e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001702:	230e      	movs	r3, #14
 8001704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001708:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800170c:	4619      	mov	r1, r3
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <HAL_LTDC_MspInit+0x1a4>)
 8001710:	f009 fd76 	bl	800b200 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2058      	movs	r0, #88	; 0x58
 800171a:	f005 fa10 	bl	8006b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800171e:	2058      	movs	r0, #88	; 0x58
 8001720:	f005 fa27 	bl	8006b72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2059      	movs	r0, #89	; 0x59
 800172a:	f005 fa08 	bl	8006b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 800172e:	2059      	movs	r0, #89	; 0x59
 8001730:	f005 fa1f 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	37f0      	adds	r7, #240	; 0xf0
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	50001000 	.word	0x50001000
 8001740:	58024400 	.word	0x58024400
 8001744:	58022800 	.word	0x58022800
 8001748:	58022400 	.word	0x58022400
 800174c:	58022000 	.word	0x58022000

08001750 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 8001750:	b580      	push	{r7, lr}
 8001752:	b090      	sub	sp, #64	; 0x40
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2234      	movs	r2, #52	; 0x34
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f01c fa9b 	bl	801dc9c <memset>
	pLayerCfg.WindowX0 = 28;
 8001766:	231c      	movs	r3, #28
 8001768:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 28+LTDC_WIDTH;
 800176a:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800176e:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001770:	2306      	movs	r3, #6
 8001772:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 6+LTDC_HEIGHT;
 8001774:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001778:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800177e:	23ff      	movs	r3, #255	; 0xff
 8001780:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800178c:	2305      	movs	r3, #5
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = LTDC_WIDTH;
 8001794:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LTDC_HEIGHT;
 800179a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <LTDC_Init_from_buffer+0x84>)
 80017bc:	f00b f80c 	bl	800c7d8 <HAL_LTDC_ConfigLayer>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 80017c6:	f000 f993 	bl	8001af0 <Error_Handler>
	}
}
 80017ca:	bf00      	nop
 80017cc:	3740      	adds	r7, #64	; 0x40
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	24008408 	.word	0x24008408

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80017de:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <main+0x1b8>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d11b      	bne.n	800182c <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f4:	f3bf 8f4f 	dsb	sy
}
 80017f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017fa:	f3bf 8f6f 	isb	sy
}
 80017fe:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001800:	4b63      	ldr	r3, [pc, #396]	; (8001990 <main+0x1b8>)
 8001802:	2200      	movs	r2, #0
 8001804:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001808:	f3bf 8f4f 	dsb	sy
}
 800180c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800180e:	f3bf 8f6f 	isb	sy
}
 8001812:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001814:	4b5e      	ldr	r3, [pc, #376]	; (8001990 <main+0x1b8>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	4a5d      	ldr	r2, [pc, #372]	; (8001990 <main+0x1b8>)
 800181a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001820:	f3bf 8f4f 	dsb	sy
}
 8001824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001826:	f3bf 8f6f 	isb	sy
}
 800182a:	e000      	b.n	800182e <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800182c:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800182e:	4b58      	ldr	r3, [pc, #352]	; (8001990 <main+0x1b8>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d144      	bne.n	80018ce <main+0xf6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <main+0x1b8>)
 8001846:	2200      	movs	r2, #0
 8001848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800184c:	f3bf 8f4f 	dsb	sy
}
 8001850:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <main+0x1b8>)
 8001854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001858:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	0b5b      	lsrs	r3, r3, #13
 800185e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001862:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800186c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001876:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800187c:	4944      	ldr	r1, [pc, #272]	; (8001990 <main+0x1b8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	1e5a      	subs	r2, r3, #1
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d000      	beq.n	800189a <main+0xc2>
      do {
 8001898:	e7e9      	b.n	800186e <main+0x96>
    } while(sets-- != 0U);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	60ba      	str	r2, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d000      	beq.n	80018b0 <main+0xd8>
    do {
 80018ae:	e7d9      	b.n	8001864 <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <main+0x1b8>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	4a35      	ldr	r2, [pc, #212]	; (8001990 <main+0x1b8>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018c2:	f3bf 8f4f 	dsb	sy
}
 80018c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018c8:	f3bf 8f6f 	isb	sy
}
 80018cc:	e000      	b.n	80018d0 <main+0xf8>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80018ce:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d0:	f004 ffa4 	bl	800681c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d4:	f000 f866 	bl	80019a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d8:	f7ff fb48 	bl	8000f6c <MX_GPIO_Init>
  MX_DMA_Init();
 80018dc:	f7ff f89c 	bl	8000a18 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80018e0:	f004 feb4 	bl	800664c <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80018e4:	f7ff f8b8 	bl	8000a58 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80018e8:	f7ff fde0 	bl	80014ac <MX_LTDC_Init>
  MX_DCMI_Init();
 80018ec:	f7fe ff52 	bl	8000794 <MX_DCMI_Init>
  MX_RTC_Init();
 80018f0:	f003 fef8 	bl	80056e4 <MX_RTC_Init>
  MX_FMC_Init();
 80018f4:	f7ff f9dc 	bl	8000cb0 <MX_FMC_Init>
  MX_CRC_Init();
 80018f8:	f7fe ff08 	bl	800070c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 80018fc:	f010 fa5c 	bl	8011db8 <_Z17MX_X_CUBE_AI_Initv>
  /* USER CODE BEGIN 2 */
    //RetargetInit(&huart1);
    BSP_CAMERA_PwrDown(0);
 8001900:	2000      	movs	r0, #0
 8001902:	f004 fc52 	bl	80061aa <BSP_CAMERA_PwrDown>
    if (BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) !=
 8001906:	2200      	movs	r2, #0
 8001908:	2102      	movs	r1, #2
 800190a:	2000      	movs	r0, #0
 800190c:	f004 fb9c 	bl	8006048 <BSP_CAMERA_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	bf14      	ite	ne
 8001916:	2301      	movne	r3, #1
 8001918:	2300      	moveq	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <main+0x14c>
        BSP_ERROR_NONE) {
        Error_Handler();
 8001920:	f000 f8e6 	bl	8001af0 <Error_Handler>
    }
    HAL_Delay(1000);
 8001924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001928:	f005 f80a 	bl	8006940 <HAL_Delay>
    //  buffer[5460] = 255;
    LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 800192c:	4819      	ldr	r0, [pc, #100]	; (8001994 <main+0x1bc>)
 800192e:	f7ff ff0f 	bl	8001750 <LTDC_Init_from_buffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1) {
    	// make photo
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 8001932:	2202      	movs	r2, #2
 8001934:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001938:	2000      	movs	r0, #0
 800193a:	f004 fbcb 	bl	80060d4 <BSP_CAMERA_Start>
        while (camera_frame_ready == 0) {
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <main+0x1c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d000      	beq.n	8001952 <main+0x17a>
 8001950:	e7f5      	b.n	800193e <main+0x166>
        };
        BSP_CAMERA_Stop(0);
 8001952:	2000      	movs	r0, #0
 8001954:	f004 fbf8 	bl	8006148 <BSP_CAMERA_Stop>
        // process photo
        DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <main+0x1bc>)
 800195a:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 800195e:	f7ff f8df 	bl	8000b20 <DMA2D_Convert>

        // rescale
        rescale_Image((uint32_t*)LCD_BUFFER, (uint32_t*)rescaledImg, (uint32_t)LTDC_WIDTH, (uint32_t)LTDC_HEIGHT, (uint32_t)RESCALED_IMG, (uint32_t)RESCALED_IMG);
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	23c0      	movs	r3, #192	; 0xc0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800196e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001972:	490a      	ldr	r1, [pc, #40]	; (800199c <main+0x1c4>)
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <main+0x1bc>)
 8001976:	f7ff fd2b 	bl	80013d0 <_Z13rescale_ImagePmS_mmmm>
//        printf("image print start");
//        for(uint64_t i = 0; i<LTDC_WIDTH*LTDC_HEIGHT; i++){
//        	printf("%u, %u, %u,", (uint8_t)((*(lcd_ptr+i)&0xff0000)>>16), (uint8_t)((*(lcd_ptr+i)&0xff00)>>8), (uint8_t)(*(lcd_ptr+i)&0xff));
//        }
//        printf("end image");
        MX_X_CUBE_AI_Process((uint32_t *)LCD_BUFFER, (uint32_t*)rescaledImg);
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <main+0x1c4>)
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <main+0x1bc>)
 800197e:	f010 fa29 	bl	8011dd4 <_Z20MX_X_CUBE_AI_ProcessPmS_>
  	  	//postProcess((uint32_t *)LCD_BUFFER, LTDC_WIDTH, LTDC_HEIGHT, 96, 96, GRID_SIZE, probabilites);

        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <main+0x1c8>)
 8001988:	f009 ff0d 	bl	800b7a6 <HAL_GPIO_TogglePin>
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 800198c:	e7d1      	b.n	8001932 <main+0x15a>
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	d005fa00 	.word	0xd005fa00
 8001998:	240084b0 	.word	0x240084b0
 800199c:	240084b4 	.word	0x240084b4
 80019a0:	58021800 	.word	0x58021800

080019a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b09c      	sub	sp, #112	; 0x70
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	224c      	movs	r2, #76	; 0x4c
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f01c f972 	bl	801dc9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2220      	movs	r2, #32
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f01c f96c 	bl	801dc9c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <_Z18SystemClock_Configv+0x124>)
 80019c6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80019ce:	2004      	movs	r0, #4
 80019d0:	f00b f8ea 	bl	800cba8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019d4:	2300      	movs	r3, #0
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <_Z18SystemClock_Configv+0x128>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <_Z18SystemClock_Configv+0x128>)
 80019de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <_Z18SystemClock_Configv+0x128>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <_Z18SystemClock_Configv+0x128>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fc:	bf14      	ite	ne
 80019fe:	2301      	movne	r3, #1
 8001a00:	2300      	moveq	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d000      	beq.n	8001a0a <_Z18SystemClock_Configv+0x66>
 8001a08:	e7f2      	b.n	80019f0 <_Z18SystemClock_Configv+0x4c>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a0a:	f00b f8bd 	bl	800cb88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <_Z18SystemClock_Configv+0x124>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <_Z18SystemClock_Configv+0x124>)
 8001a14:	f023 0318 	bic.w	r3, r3, #24
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001a30:	230c      	movs	r3, #12
 8001a32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001a34:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001a38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8001a42:	2304      	movs	r3, #4
 8001a44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001a46:	2304      	movs	r3, #4
 8001a48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00b f900 	bl	800cc5c <HAL_RCC_OscConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001a6c:	f000 f840 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a70:	233f      	movs	r3, #63	; 0x3f
 8001a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a74:	2303      	movs	r3, #3
 8001a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a80:	2340      	movs	r3, #64	; 0x40
 8001a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a8e:	2340      	movs	r3, #64	; 0x40
 8001a90:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2107      	movs	r1, #7
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00b fd12 	bl	800d4c0 <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 8001aac:	f000 f820 	bl	8001af0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001ab0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ab4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f00b feb7 	bl	800d82c <HAL_RCC_MCOConfig>
}
 8001abe:	bf00      	nop
 8001ac0:	3770      	adds	r7, #112	; 0x70
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58024800 	.word	0x58024800

08001ad0 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    camera_frame_ready = 1;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <BSP_CAMERA_FrameEventCallback+0x1c>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	240084b0 	.word	0x240084b0

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>

08001afa <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	f1c3 031f 	rsb	r3, r3, #31
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d201      	bcs.n	8001b4a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	e000      	b.n	8001b4c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001b4a:	687b      	ldr	r3, [r7, #4]
    }
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	d501      	bpl.n	8001b7c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	e000      	b.n	8001b7e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001b7c:	687b      	ldr	r3, [r7, #4]
    }
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_ZNSt5arrayIfLj5EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f805 	bl	8001ba8 <_ZNSt14__array_traitsIfLj5EE6_S_refERA5_Kfj>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZNSt14__array_traitsIfLj5EE6_S_refERA5_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	ed93 7a00 	vldr	s14, [r3]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	d501      	bpl.n	8001bea <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	e000      	b.n	8001bec <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001bea:	687b      	ldr	r3, [r7, #4]
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_Z13calculate_iouSt5arrayIfLj5EES0_>:
#include <nms.hpp>

float calculate_iou(std::array<float, 5> box1, std::array<float, 5> box2) {
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	b590      	push	{r4, r7, lr}
 8001bfc:	ed2d 8b02 	vpush	{d8}
 8001c00:	b08d      	sub	sp, #52	; 0x34
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float x_min = std::max(box1[1], box2[1]);
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001c12:	f7ff ffba 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c16:	4604      	mov	r4, r0
 8001c18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ffb3 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff ff95 	bl	8001b58 <_ZSt3maxIfERKT_S2_S2_>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    float y_min = std::max(box1[2], box2[2]);
 8001c34:	2102      	movs	r1, #2
 8001c36:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001c3a:	f7ff ffa6 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c44:	2102      	movs	r1, #2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff9f 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff ff81 	bl	8001b58 <_ZSt3maxIfERKT_S2_S2_>
 8001c56:	4603      	mov	r3, r0
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    float x_max = std::min(box1[3], box2[3]);
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001c62:	f7ff ff92 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c66:	4604      	mov	r4, r0
 8001c68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c6c:	2103      	movs	r1, #3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff8b 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4619      	mov	r1, r3
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff ffa4 	bl	8001bc6 <_ZSt3minIfERKT_S2_S2_>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    float y_max = std::min(box1[4], box2[4]);
 8001c84:	2104      	movs	r1, #4
 8001c86:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001c8a:	f7ff ff7e 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c8e:	4604      	mov	r4, r0
 8001c90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c94:	2104      	movs	r1, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff77 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff ff90 	bl	8001bc6 <_ZSt3minIfERKT_S2_S2_>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	623b      	str	r3, [r7, #32]

    float intersection_area =
            std::max((float)0, x_max - x_min) * std::max((float)0, y_max - y_min);
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001cb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cc2:	1d3a      	adds	r2, r7, #4
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff45 	bl	8001b58 <_ZSt3maxIfERKT_S2_S2_>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	ed93 8a00 	vldr	s16, [r3]
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	edc7 7a03 	vstr	s15, [r7, #12]
 8001cea:	f107 020c 	add.w	r2, r7, #12
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff2f 	bl	8001b58 <_ZSt3maxIfERKT_S2_S2_>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d04:	edc7 7a07 	vstr	s15, [r7, #28]

    float box1_area = (box1[3] - box1[1]) * (box1[4] - box1[2]);
 8001d08:	2103      	movs	r1, #3
 8001d0a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001d0e:	f7ff ff3c 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d12:	4603      	mov	r3, r0
 8001d14:	ed93 8a00 	vldr	s16, [r3]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001d1e:	f7ff ff34 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d22:	4603      	mov	r3, r0
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001d32:	f7ff ff2a 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d36:	4603      	mov	r3, r0
 8001d38:	edd3 8a00 	vldr	s17, [r3]
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001d42:	f7ff ff22 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d46:	4603      	mov	r3, r0
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8001d50:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d54:	edc7 7a06 	vstr	s15, [r7, #24]
    float box2_area = (box2[3] - box2[1]) * (box2[4] - box2[2]);
 8001d58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff13 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d64:	4603      	mov	r3, r0
 8001d66:	ed93 8a00 	vldr	s16, [r3]
 8001d6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff0a 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d76:	4603      	mov	r3, r0
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001d80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d84:	2104      	movs	r1, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff feff 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	edd3 8a00 	vldr	s17, [r3]
 8001d92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d96:	2102      	movs	r1, #2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fef6 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8001da8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dac:	edc7 7a05 	vstr	s15, [r7, #20]

    float iou = intersection_area / (box1_area + box2_area - intersection_area);
 8001db0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001db4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dcc:	edc7 7a04 	vstr	s15, [r7, #16]

    return iou;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	ee07 3a90 	vmov	s15, r3
}
 8001dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dda:	3734      	adds	r7, #52	; 0x34
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	ecbd 8b02 	vpop	{d8}
 8001de2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001de6:	b004      	add	sp, #16
 8001de8:	4770      	bx	lr

08001dea <_ZNKSt5arrayIfLj5EEixEj>:

      constexpr const_reference
      operator[](size_type __n) const noexcept
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fed5 	bl	8001ba8 <_ZNSt14__array_traitsIfLj5EE6_S_refERA5_Kfj>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_Z21compareByFirstElementRKSt5arrayIfLj5EES2_>:

bool compareByFirstElement(const std::array<float, 5> &a,
                           const std::array<float, 5> &b) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	ed2d 8b02 	vpush	{d8}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
    return a[0] < b[0];
 8001e16:	2100      	movs	r1, #0
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ffe6 	bl	8001dea <_ZNKSt5arrayIfLj5EEixEj>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	ed93 8a00 	vldr	s16, [r3]
 8001e24:	2100      	movs	r1, #0
 8001e26:	6838      	ldr	r0, [r7, #0]
 8001e28:	f7ff ffdf 	bl	8001dea <_ZNKSt5arrayIfLj5EEixEj>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	bf4c      	ite	mi
 8001e3c:	2301      	movmi	r3, #1
 8001e3e:	2300      	movpl	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	ecbd 8b02 	vpop	{d8}
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f964 	bl	8002124 <_ZNSaISt5arrayIfLj5EEED1Ev>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f947 	bl	8002104 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE12_Vector_implC1Ev>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ffeb 	bl	8001e66 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EEC1Ev>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	0000      	movs	r0, r0
 8001e9c:	0000      	movs	r0, r0
	...

08001ea0 <_Z3nmsPf>:

std::vector<T_PRED> nms(float *predictions) {
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b09e      	sub	sp, #120	; 0x78
 8001ea4:	af06      	add	r7, sp, #24
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    std::vector<T_PRED> accepted_boxes;
 8001eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffe6 	bl	8001e80 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEC1Ev>
    std::vector<T_PRED> final_boxes;
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffe3 	bl	8001e80 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEC1Ev>

    for (int i = 0; i < PRED_TENSOR_LENGTH; i += 10) {
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec0:	f249 529b 	movw	r2, #38299	; 0x959b
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	dc5e      	bgt.n	8001f86 <_Z3nmsPf+0xe6>
        float probability = predictions[i + 1];
 8001ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eca:	3301      	adds	r3, #1
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	653b      	str	r3, [r7, #80]	; 0x50
        if (probability > CONFIDENCE_THRESHOLD) {
 8001ed6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001eda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ede:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80020c8 <_Z3nmsPf+0x228>
 8001ee2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	dd48      	ble.n	8001f7e <_Z3nmsPf+0xde>
            T_PRED pred;
            pred.at(0) = probability;
 8001eec:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f95b 	bl	80021b0 <_ZNSt5arrayIfLj5EE2atEj>
 8001efa:	4603      	mov	r3, r0
 8001efc:	601c      	str	r4, [r3, #0]
            pred.at(1) = predictions[i + 6];
 8001efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f00:	3306      	adds	r3, #6
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	681c      	ldr	r4, [r3, #0]
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f94d 	bl	80021b0 <_ZNSt5arrayIfLj5EE2atEj>
 8001f16:	4603      	mov	r3, r0
 8001f18:	601c      	str	r4, [r3, #0]
            pred.at(2) = predictions[i + 7];
 8001f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1c:	3307      	adds	r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	681c      	ldr	r4, [r3, #0]
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f93f 	bl	80021b0 <_ZNSt5arrayIfLj5EE2atEj>
 8001f32:	4603      	mov	r3, r0
 8001f34:	601c      	str	r4, [r3, #0]
            pred.at(3) = predictions[i + 8];
 8001f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f38:	3308      	adds	r3, #8
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	681c      	ldr	r4, [r3, #0]
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	2103      	movs	r1, #3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f931 	bl	80021b0 <_ZNSt5arrayIfLj5EE2atEj>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	601c      	str	r4, [r3, #0]
            pred.at(4) = predictions[i + 9];
 8001f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f54:	3309      	adds	r3, #9
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681c      	ldr	r4, [r3, #0]
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	2104      	movs	r1, #4
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f923 	bl	80021b0 <_ZNSt5arrayIfLj5EE2atEj>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	601c      	str	r4, [r3, #0]
            accepted_boxes.push_back(pred);
 8001f6e:	f107 021c 	add.w	r2, r7, #28
 8001f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f933 	bl	80021e4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE9push_backERKS1_>
    for (int i = 0; i < PRED_TENSOR_LENGTH; i += 10) {
 8001f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f80:	330a      	adds	r3, #10
 8001f82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f84:	e79b      	b.n	8001ebe <_Z3nmsPf+0x1e>
        }
    }

    std::sort(accepted_boxes.begin(), accepted_boxes.end(),
 8001f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f950 	bl	8002230 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE5beginEv>
 8001f90:	4604      	mov	r4, r0
 8001f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f95a 	bl	8002250 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE3endEv>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <_Z3nmsPf+0x238>)
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f000 f965 	bl	8002272 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEPFbRKS3_SA_EEvT_SD_T0_>
              compareByFirstElement);

    while (accepted_boxes.size() > 0) {
 8001fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f973 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d076      	beq.n	80020b0 <_Z3nmsPf+0x210>
        T_PRED best_box = accepted_boxes.back();
 8001fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f97c 	bl	80022c4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE4backEv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f107 0408 	add.w	r4, r7, #8
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6023      	str	r3, [r4, #0]
        accepted_boxes.pop_back();
 8001fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f98a 	bl	80022fa <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE8pop_backEv>
        int kept_boxes = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	65bb      	str	r3, [r7, #88]	; 0x58

        for (int i = accepted_boxes.size() - 1; i >= 0; i--) {
 8001fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f952 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db50      	blt.n	80020a2 <_Z3nmsPf+0x202>
            float iou = calculate_iou(best_box, accepted_boxes[i]);
 8002000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f98b 	bl	8002324 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEixEj>
 800200e:	4603      	mov	r3, r0
 8002010:	ac01      	add	r4, sp, #4
 8002012:	461d      	mov	r5, r3
 8002014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	6023      	str	r3, [r4, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002026:	f7ff fde7 	bl	8001bf8 <_Z13calculate_iouSt5arrayIfLj5EES0_>
 800202a:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            if (iou >= IOU_THRESHOLD) {
 800202e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002032:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002036:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80020d0 <_Z3nmsPf+0x230>
 800203a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	db27      	blt.n	8002094 <_Z3nmsPf+0x1f4>
                int index_to_remove = accepted_boxes.size() - 1 - kept_boxes;
 8002044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f925 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 800204e:	4602      	mov	r2, r0
 8002050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	64bb      	str	r3, [r7, #72]	; 0x48
                // erase might be slow
                accepted_boxes.erase(accepted_boxes.begin() + index_to_remove);
 8002058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800205c:	4618      	mov	r0, r3
 800205e:	f000 f8e7 	bl	8002230 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE5beginEv>
 8002062:	4603      	mov	r3, r0
 8002064:	647b      	str	r3, [r7, #68]	; 0x44
 8002066:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800206a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f96c 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002072:	4603      	mov	r3, r0
 8002074:	643b      	str	r3, [r7, #64]	; 0x40
 8002076:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800207a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f97d 	bl	8002380 <_ZN9__gnu_cxx17__normal_iteratorIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 8002086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f988 	bl	80023a2 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
 8002092:	e002      	b.n	800209a <_Z3nmsPf+0x1fa>
            } else {
                kept_boxes++;
 8002094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002096:	3301      	adds	r3, #1
 8002098:	65bb      	str	r3, [r7, #88]	; 0x58
        for (int i = accepted_boxes.size() - 1; i >= 0; i--) {
 800209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209c:	3b01      	subs	r3, #1
 800209e:	657b      	str	r3, [r7, #84]	; 0x54
 80020a0:	e7ab      	b.n	8001ffa <_Z3nmsPf+0x15a>
            }
        }
        final_boxes.push_back(best_box);
 80020a2:	f107 0308 	add.w	r3, r7, #8
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f89b 	bl	80021e4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE9push_backERKS1_>
    while (accepted_boxes.size() > 0) {
 80020ae:	e77b      	b.n	8001fa8 <_Z3nmsPf+0x108>
    }
    return final_boxes;
 80020b0:	bf00      	nop
    std::vector<T_PRED> accepted_boxes;
 80020b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f85e 	bl	8002178 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EED1Ev>
    return final_boxes;
 80020bc:	bf00      	nop
}
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	3760      	adds	r7, #96	; 0x60
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	9999999a 	.word	0x9999999a
 80020cc:	3fe99999 	.word	0x3fe99999
 80020d0:	33333333 	.word	0x33333333
 80020d4:	3fd33333 	.word	0x3fd33333
 80020d8:	08001e09 	.word	0x08001e09

080020dc <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d201      	bcs.n	80020f6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	e000      	b.n	80020f8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80020f6:	687b      	ldr	r3, [r7, #4]
    }
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f96f 	bl	80023f0 <_ZNSaISt5arrayIfLj5EEEC1Ev>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f977 	bl	8002408 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZNSaISt5arrayIfLj5EEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f97f 	bl	8002430 <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEED1Ev>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	109b      	asrs	r3, r3, #2
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EED1Ev+0x38>)
 8002156:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800215a:	461a      	mov	r2, r3
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f972 	bl	8002446 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE13_M_deallocateEPS1_j>
      }
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fe72 	bl	8001e4e <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE12_Vector_implD1Ev>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	cccccccd 	.word	0xcccccccd

08002178 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681c      	ldr	r4, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f96e 	bl	800246c <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE19_M_get_Tp_allocatorEv>
 8002190:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002192:	461a      	mov	r2, r3
 8002194:	4629      	mov	r1, r5
 8002196:	4620      	mov	r0, r4
 8002198:	f000 f973 	bl	8002482 <_ZSt8_DestroyIPSt5arrayIfLj5EES1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffcc 	bl	800213c <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EED1Ev>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021b0 <_ZNSt5arrayIfLj5EE2atEj>:

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d904      	bls.n	80021ca <_ZNSt5arrayIfLj5EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 80021c0:	2205      	movs	r2, #5
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <_ZNSt5arrayIfLj5EE2atEj+0x30>)
 80021c6:	f01b fa11 	bl	801d5ec <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6839      	ldr	r1, [r7, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fcea 	bl	8001ba8 <_ZNSt14__array_traitsIfLj5EE6_S_refERA5_Kfj>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	0801eda0 	.word	0x0801eda0

080021e4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d00d      	beq.n	8002216 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE9push_backERKS1_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4619      	mov	r1, r3
 8002204:	f000 f94b 	bl	800249e <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f103 0214 	add.w	r2, r3, #20
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002214:	e008      	b.n	8002228 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f81a 	bl	8002250 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE3endEv>
 800221c:	4603      	mov	r3, r0
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f94e 	bl	80024c4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f9c9 	bl	80025d8 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	1d1a      	adds	r2, r3, #4
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f9b8 	bl	80025d8 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEPFbRKS3_SA_EEvT_SD_T0_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f9ba 	bl	80025f8 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEENS0_15_Iter_comp_iterIT_EES9_>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f9c9 	bl	8002622 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>
    }
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	109b      	asrs	r3, r3, #2
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv+0x28>)
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	cccccccd 	.word	0xcccccccd

080022c4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffbf 	bl	8002250 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE3endEv>
 80022d2:	4603      	mov	r3, r0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2101      	movs	r1, #1
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f9cd 	bl	800267c <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmiEi>
 80022e2:	4603      	mov	r3, r0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f9e2 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80022f0:	4603      	mov	r3, r0
      }
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE8pop_backEv>:
       *  Note that no data is returned, and if the last element's
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f1a3 0214 	sub.w	r2, r3, #20
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 f9d8 	bl	80026cc <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE7destroyIS1_EEvRS2_PT_>
	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      }
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
      }
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	f107 020c 	add.w	r2, r7, #12
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f931 	bl	80025d8 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_ZN9__gnu_cxx17__normal_iteratorIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800238a:	6838      	ldr	r0, [r7, #0]
 800238c:	f000 f9ab 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8002390:	4603      	mov	r3, r0
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff3f 	bl	8002230 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE5beginEv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f9a0 	bl	80026fc <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE6cbeginEv>
 80023bc:	4603      	mov	r3, r0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	f107 020c 	add.w	r2, r7, #12
 80023c4:	463b      	mov	r3, r7
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f9a7 	bl	800271c <_ZN9__gnu_cxxmiIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ffb7 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 80023dc:	4603      	mov	r3, r0
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f9b5 	bl	8002750 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_ZNSaISt5arrayIfLj5EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f9e6 	bl	80027ca <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEEC1Ev>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
	{ }
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
	if (__p)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f9be 	bl	80027e0 <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE10deallocateERS2_PS1_j>
      }
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_ZSt8_DestroyIPSt5arrayIfLj5EES1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f9b4 	bl	80027fe <_ZSt8_DestroyIPSt5arrayIfLj5EEEvT_S3_>
    }
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f9b4 	bl	8002818 <_ZSt7forwardIRKSt5arrayIfLj5EEEOT_RNSt16remove_referenceIS4_E4typeE>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f9b9 	bl	800282e <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b08c      	sub	sp, #48	; 0x30
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80024d0:	4a3f      	ldr	r2, [pc, #252]	; (80025d0 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 80024d2:	2101      	movs	r1, #1
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f9c3 	bl	8002860 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE12_M_check_lenEjPKc>
 80024da:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff fea1 	bl	8002230 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE5beginEv>
 80024ee:	4603      	mov	r3, r0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	f107 0214 	add.w	r2, r7, #20
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f9f7 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002502:	4603      	mov	r3, r0
 8002504:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fa0a 	bl	8002924 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE11_M_allocateEj>
 8002510:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8002516:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	189d      	adds	r5, r3, r2
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f975 	bl	8002818 <_ZSt7forwardIRKSt5arrayIfLj5EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4629      	mov	r1, r5
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff ffb2 	bl	800249e <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f8cf 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8002548:	4603      	mov	r3, r0
 800254a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff8c 	bl	800246c <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE19_M_get_Tp_allocatorEv>
 8002554:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	4621      	mov	r1, r4
 800255a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255c:	f000 f9f6 	bl	800294c <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8002560:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	3314      	adds	r3, #20
 8002566:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f8ba 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8002572:	4603      	mov	r3, r0
 8002574:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff77 	bl	800246c <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE19_M_get_Tp_allocatorEv>
 800257e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002584:	4620      	mov	r0, r4
 8002586:	f000 f9e1 	bl	800294c <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800258a:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800258c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	109b      	asrs	r3, r3, #2
 8002598:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800259a:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800259e:	461a      	mov	r2, r3
 80025a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a2:	f7ff ff50 	bl	8002446 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80025b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	461a      	mov	r2, r3
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	441a      	add	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	609a      	str	r2, [r3, #8]
    }
 80025c6:	bf00      	nop
 80025c8:	3730      	adds	r7, #48	; 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bdb0      	pop	{r4, r5, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	0801edd4 	.word	0x0801edd4
 80025d4:	cccccccd 	.word	0xcccccccd

080025d8 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEENS0_15_Iter_comp_iterIT_EES9_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f9b6 	bl	8002974 <_ZSt4moveIRPFbRKSt5arrayIfLj5EES3_EEONSt16remove_referenceIT_E4typeEOS8_>
 8002608:	4603      	mov	r3, r0
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f9b9 	bl	800298a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEC1ES7_>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 800262e:	f107 0208 	add.w	r2, r7, #8
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f9b8 	bl	80029ae <_ZN9__gnu_cxxneIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8002644:	f107 020c 	add.w	r2, r7, #12
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f94e 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002654:	4603      	mov	r3, r0
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fa4f 	bl	8001afa <_ZSt4__lgi>
 800265c:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800265e:	005a      	lsls	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f9ba 	bl	80029de <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f9ec 	bl	8002a4c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>
    }
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current -= __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	425b      	negs	r3, r3
 8002696:	440b      	add	r3, r1
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	f107 020c 	add.w	r2, r7, #12
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff97 	bl	80025d8 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80026d6:	6839      	ldr	r1, [r7, #0]
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f9ef 	bl	8002abc <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE7destroyIS2_EEvPT_>
	}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>:

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f9e0 	bl	8002ad2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZN9__gnu_cxxmiIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f9e3 	bl	8002af2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 800272c:	4603      	mov	r3, r0
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f000 f9de 	bl	8002af2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8002736:	4603      	mov	r3, r0
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1ae3      	subs	r3, r4, r3
 800273c:	109b      	asrs	r3, r3, #2
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <_ZN9__gnu_cxxmiIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_+0x30>)
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	cccccccd 	.word	0xcccccccd

08002750 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800275a:	463b      	mov	r3, r7
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fdf3 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002764:	4603      	mov	r3, r0
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fd71 	bl	8002250 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE3endEv>
 800276e:	4603      	mov	r3, r0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	f107 020c 	add.w	r2, r7, #12
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f916 	bl	80029ae <_ZN9__gnu_cxxneIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8002788:	463b      	mov	r3, r7
 800278a:	2101      	movs	r1, #1
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fddc 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002792:	4604      	mov	r4, r0
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fd5b 	bl	8002250 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE3endEv>
 800279a:	4603      	mov	r3, r0
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	4620      	mov	r0, r4
 80027a2:	f000 f9b1 	bl	8002b08 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f1a3 0214 	sub.w	r2, r3, #20
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7ff ff86 	bl	80026cc <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE7destroyIS1_EEvRS2_PT_>
      return __position;
 80027c0:	683b      	ldr	r3, [r7, #0]
    }
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}

080027ca <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f9a1 	bl	8002b38 <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE10deallocateEPS2_j>
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_ZSt8_DestroyIPSt5arrayIfLj5EEEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002808:	6839      	ldr	r1, [r7, #0]
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9a6 	bl	8002b5c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt5arrayIfLj5EEEEvT_S5_>
    }
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZSt7forwardIRKSt5arrayIfLj5EEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800282e:	b5b0      	push	{r4, r5, r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffec 	bl	8002818 <_ZSt7forwardIRKSt5arrayIfLj5EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002840:	4605      	mov	r5, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4619      	mov	r1, r3
 8002846:	2014      	movs	r0, #20
 8002848:	f7ff f966 	bl	8001b18 <_ZnwjPv>
 800284c:	4603      	mov	r3, r0
 800284e:	461c      	mov	r4, r3
 8002850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	6023      	str	r3, [r4, #0]
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bdb0      	pop	{r4, r5, r7, pc}

08002860 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f980 	bl	8002b72 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE8max_sizeEv>
 8002872:	4604      	mov	r4, r0
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff fd0f 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 800287a:	4603      	mov	r3, r0
 800287c:	1ae2      	subs	r2, r4, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	429a      	cmp	r2, r3
 8002882:	bf34      	ite	cc
 8002884:	2301      	movcc	r3, #1
 8002886:	2300      	movcs	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f01a fea9 	bl	801d5e6 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fcff 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 800289a:	4604      	mov	r4, r0
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff fcfb 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	f107 0208 	add.w	r2, r7, #8
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fc13 	bl	80020dc <_ZSt3maxIjERKT_S2_S2_>
 80028b6:	4603      	mov	r3, r0
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4423      	add	r3, r4
 80028bc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff fcea 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d306      	bcc.n	80028da <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE12_M_check_lenEjPKc+0x7a>
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f950 	bl	8002b72 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE8max_sizeEv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d904      	bls.n	80028e4 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE12_M_check_lenEjPKc+0x84>
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f949 	bl	8002b72 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE8max_sizeEv>
 80028e0:	4603      	mov	r3, r0
 80028e2:	e000      	b.n	80028e6 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE12_M_check_lenEjPKc+0x86>
 80028e4:	697b      	ldr	r3, [r7, #20]
      }
 80028e6:	4618      	mov	r0, r3
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
	...

080028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fef3 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8002900:	4603      	mov	r3, r0
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	6838      	ldr	r0, [r7, #0]
 8002906:	f7ff feee 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 800290a:	4603      	mov	r3, r0
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	1ae3      	subs	r3, r4, r3
 8002910:	109b      	asrs	r3, r3, #2
 8002912:	4a03      	ldr	r2, [pc, #12]	; (8002920 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	cccccccd 	.word	0xcccccccd

08002924 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE11_M_allocateEj+0x1e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6839      	ldr	r1, [r7, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f92b 	bl	8002b94 <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE8allocateERS2_j>
 800293e:	4603      	mov	r3, r0
 8002940:	e000      	b.n	8002944 <_ZNSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE11_M_allocateEj+0x20>
 8002942:	2300      	movs	r3, #0
      }
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b087      	sub	sp, #28
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800295a:	f88d 4000 	strb.w	r4, [sp]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f924 	bl	8002bb2 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800296a:	4603      	mov	r3, r0
      }
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bd90      	pop	{r4, r7, pc}

08002974 <_ZSt4moveIRPFbRKSt5arrayIfLj5EES3_EEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEC1ES7_>:
      _Iter_comp_iter(_Compare __comp)
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8002994:	463b      	mov	r3, r7
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ffec 	bl	8002974 <_ZSt4moveIRPFbRKSt5arrayIfLj5EES3_EEONSt16remove_referenceIT_E4typeEOS8_>
 800299c:	4603      	mov	r3, r0
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	601a      	str	r2, [r3, #0]
      { }
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <_ZN9__gnu_cxxneIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80029ae:	b590      	push	{r4, r7, lr}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fe94 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 80029be:	4603      	mov	r3, r0
 80029c0:	681c      	ldr	r4, [r3, #0]
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f7ff fe8f 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 80029c8:	4603      	mov	r3, r0
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	429c      	cmp	r4, r3
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}

080029de <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	603b      	str	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 80029ec:	f107 020c 	add.w	r2, r7, #12
 80029f0:	f107 0308 	add.w	r3, r7, #8
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff7a 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	bfcc      	ite	gt
 8002a02:	2301      	movgt	r3, #1
 8002a04:	2300      	movle	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01c      	beq.n	8002a46 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f8dc 	bl	8002bd6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_T0_>
 8002a1e:	e012      	b.n	8002a46 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_T1_+0x68>
	  --__depth_limit;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8ea 	bl	8002c04 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_T0_>
 8002a30:	4603      	mov	r3, r0
 8002a32:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ffcf 	bl	80029de <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_T1_>
	  __last = __cut;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8002a44:	e7d2      	b.n	80029ec <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_T1_+0xe>
    }
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8002a58:	f107 020c 	add.w	r2, r7, #12
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff44 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	bfcc      	ite	gt
 8002a6e:	2301      	movgt	r3, #1
 8002a70:	2300      	movle	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d018      	beq.n	8002aaa <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fc63 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002a84:	4603      	mov	r3, r0
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f8fc 	bl	8002c88 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2110      	movs	r1, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fc57 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f95e 	bl	8002d64 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>
    }
 8002aa8:	e004      	b.n	8002ab4 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8ea 	bl	8002c88 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>
    }
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f94a 	bl	8002dae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEET_S9_>
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	68b8      	ldr	r0, [r7, #8]
 8002b1e:	f000 f946 	bl	8002dae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEET_S9_>
 8002b22:	4603      	mov	r3, r0
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4619      	mov	r1, r3
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 f94b 	bl	8002dc4 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8002b2e:	4603      	mov	r3, r0
    }
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}

08002b38 <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f01a fd2f 	bl	801d5b4 <_ZdlPvj>
      }
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt5arrayIfLj5EEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f95f 	bl	8002e40 <_ZNKSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE19_M_get_Tp_allocatorEv>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f93f 	bl	8002e08 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE11_S_max_sizeERKS2_>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f957 	bl	8002e56 <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE8allocateEjPKv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f967 	bl	8002e9a <_ZSt12__relocate_aIPSt5arrayIfLj5EES2_SaIS1_EET0_T_S5_S4_RT1_>
 8002bcc:	4603      	mov	r3, r0
      }
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	603b      	str	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f972 	bl	8002ed4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f99e 	bl	8002f38 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_>
    }
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002c10:	f107 020c 	add.w	r2, r7, #12
 8002c14:	f107 0308 	add.w	r3, r7, #8
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fe68 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da00      	bge.n	8002c28 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_T0_+0x24>
 8002c26:	3301      	adds	r3, #1
 8002c28:	105b      	asrs	r3, r3, #1
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fb89 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fb81 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002c48:	4604      	mov	r4, r0
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fd13 	bl	800267c <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmiEi>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4621      	mov	r1, r4
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9a9 	bl	8002fba <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fb6b 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	f000 f9f3 	bl	8003064 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_>
 8002c7e:	4603      	mov	r3, r0
    }
 8002c80:	4618      	mov	r0, r3
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
      if (__first == __last) return;
 8002c94:	f107 0208 	add.w	r2, r7, #8
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fa28 	bl	80030f4 <_ZN9__gnu_cxxeqIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d158      	bne.n	8002d5c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0xd4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fb4a 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	f107 0208 	add.w	r2, r7, #8
 8002cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fe72 	bl	80029ae <_ZN9__gnu_cxxneIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d046      	beq.n	8002d5e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0xd6>
	  if (__comp(__i, __first))
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f954 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02e      	beq.n	8002d40 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0xb8>
		__val = _GLIBCXX_MOVE(*__i);
 8002ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fce4 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fa29 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f107 0410 	add.w	r4, r7, #16
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	6023      	str	r3, [r4, #0]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8002d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fb1d 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fa20 	bl	800315c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
	      *__first = _GLIBCXX_MOVE(__val);
 8002d1c:	f107 0310 	add.w	r3, r7, #16
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa10 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8002d26:	4605      	mov	r5, r0
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fcc1 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461c      	mov	r4, r3
 8002d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d3a:	682b      	ldr	r3, [r5, #0]
 8002d3c:	6023      	str	r3, [r4, #0]
 8002d3e:	e007      	b.n	8002d50 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0xc8>
	    std::__unguarded_linear_insert(__i,
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fa23 	bl	800318c <_ZN9__gnu_cxx5__ops15__val_comp_iterIPFbRKSt5arrayIfLj5EES5_EEENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS9_EE>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d4c:	f000 fa32 	bl	80031b4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_comp_iterIPFbRKS3_SC_EEEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f9e5 	bl	8003124 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEppEv>
 8002d5a:	e7ae      	b.n	8002cba <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0x32>
      if (__first == __last) return;
 8002d5c:	bf00      	nop
    }
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bdb0      	pop	{r4, r5, r7, pc}

08002d64 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	f107 0208 	add.w	r2, r7, #8
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fe15 	bl	80029ae <_ZN9__gnu_cxxneIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0x42>
	std::__unguarded_linear_insert(__i,
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9fe 	bl	800318c <_ZN9__gnu_cxx5__ops15__val_comp_iterIPFbRKSt5arrayIfLj5EES5_EEENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS9_EE>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4619      	mov	r1, r3
 8002d94:	6978      	ldr	r0, [r7, #20]
 8002d96:	f000 fa0d 	bl	80031b4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_comp_iterIPFbRKS3_SC_EEEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f9c0 	bl	8003124 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEppEv>
 8002da4:	e7e6      	b.n	8002d74 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_T0_+0x10>
    }
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002dc4:	b5b0      	push	{r4, r5, r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fa45 	bl	8003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	68b8      	ldr	r0, [r7, #8]
 8002dda:	f000 fa41 	bl	8003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8002dde:	4605      	mov	r5, r0
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fa3d 	bl	8003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4629      	mov	r1, r5
 8002dec:	4620      	mov	r0, r4
 8002dee:	f000 fa45 	bl	800327c <_ZSt14__copy_move_a1ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa50 	bl	800329c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8002dfc:	4603      	mov	r3, r0
    }
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e08 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8002e12:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa5d 	bl	80032d4 <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE8max_sizeERKS2_>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002e1e:	f107 0208 	add.w	r2, r7, #8
 8002e22:	f107 030c 	add.w	r3, r7, #12
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fe81 	bl	8001b30 <_ZSt3minIjERKT_S2_S2_>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	681b      	ldr	r3, [r3, #0]
      }
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	06666666 	.word	0x06666666

08002e40 <_ZNKSt12_Vector_baseISt5arrayIfLj5EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa42 	bl	80032ec <_ZNK9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE11_M_max_sizeEv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf8c      	ite	hi
 8002e70:	2301      	movhi	r3, #1
 8002e72:	2300      	movls	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <_ZN9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e7a:	f01a fbae 	bl	801d5da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f01a fb95 	bl	801d5b8 <_Znwj>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	bf00      	nop
      }
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_ZSt12__relocate_aIPSt5arrayIfLj5EES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002e9a:	b5b0      	push	{r4, r5, r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fa2d 	bl	8003308 <_ZSt12__niter_baseIPSt5arrayIfLj5EEET_S3_>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	68b8      	ldr	r0, [r7, #8]
 8002eb2:	f000 fa29 	bl	8003308 <_ZSt12__niter_baseIPSt5arrayIfLj5EEET_S3_>
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fa25 	bl	8003308 <_ZSt12__niter_baseIPSt5arrayIfLj5EEET_S3_>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f000 fa2b 	bl	8003320 <_ZSt14__relocate_a_1ISt5arrayIfLj5EES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002eca:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bdb0      	pop	{r4, r5, r7, pc}

08002ed4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fa43 	bl	8003374 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	1d3a      	adds	r2, r7, #4
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fa9a 	bl	8003434 <_ZN9__gnu_cxxltIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d014      	beq.n	8002f30 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_T0_+0x5c>
	if (__comp(__i, __first))
 8002f06:	463b      	mov	r3, r7
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	6979      	ldr	r1, [r7, #20]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f839 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8002f18:	463b      	mov	r3, r7
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 faa0 	bl	8003464 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f8fb 	bl	8003124 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEppEv>
 8002f2e:	e7e0      	b.n	8002ef2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_T0_+0x1e>
    }
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8002f44:	f107 020c 	add.w	r2, r7, #12
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fcce 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	bfcc      	ite	gt
 8002f5a:	2301      	movgt	r3, #1
 8002f5c:	2300      	movle	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_+0x44>
	{
	  --__last;
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fac7 	bl	80034fc <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fa75 	bl	8003464 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_RT0_>
      while (__last - __first > 1)
 8002f7a:	e7e3      	b.n	8002f44 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_+0xc>
	}
    }
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8002f84:	b5b0      	push	{r4, r5, r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fb8b 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fb86 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4619      	mov	r1, r3
 8002fac:	4628      	mov	r0, r5
 8002fae:	47a0      	blx	r4
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bdb0      	pop	{r4, r5, r7, pc}

08002fba <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	f107 0018 	add.w	r0, r7, #24
 8002fd0:	f7ff ffd8 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d020      	beq.n	800301c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0x62>
	  if (__comp(__b, __c))
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	f107 0018 	add.w	r0, r7, #24
 8002fe2:	f7ff ffcf 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fa95 	bl	800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8002ff4:	e032      	b.n	800305c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0xa2>
	  else if (__comp(__a, __c))
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	f107 0018 	add.w	r0, r7, #24
 8002ffe:	f7ff ffc1 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0x58>
	    std::iter_swap(__result, __c);
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fa87 	bl	800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8003010:	e024      	b.n	800305c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fa82 	bl	800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 800301a:	e01f      	b.n	800305c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0xa2>
      else if (__comp(__a, __c))
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	f107 0018 	add.w	r0, r7, #24
 8003024:	f7ff ffae 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0x7e>
	std::iter_swap(__result, __a);
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fa74 	bl	800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8003036:	e011      	b.n	800305c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0xa2>
      else if (__comp(__b, __c))
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	f107 0018 	add.w	r0, r7, #24
 8003040:	f7ff ffa0 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0x9a>
	std::iter_swap(__result, __c);
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fa66 	bl	800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 8003052:	e003      	b.n	800305c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_SG_T0_+0xa2>
	std::iter_swap(__result, __b);
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fa61 	bl	800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
    }
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8003072:	463b      	mov	r3, r7
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68f9      	ldr	r1, [r7, #12]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff83 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_+0x2c>
	    ++__first;
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f84b 	bl	8003124 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEppEv>
	  while (__comp(__first, __pivot))
 800308e:	e7f0      	b.n	8003072 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_+0xe>
	  --__last;
 8003090:	f107 0308 	add.w	r3, r7, #8
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fa31 	bl	80034fc <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmmEv>
	  while (__comp(__pivot, __last))
 800309a:	463b      	mov	r3, r7
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff6f 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_+0x54>
	    --__last;
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fa23 	bl	80034fc <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmmEv>
	  while (__comp(__pivot, __last))
 80030b6:	e7f0      	b.n	800309a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_+0x36>
	  if (!(__first < __last))
 80030b8:	f107 0208 	add.w	r2, r7, #8
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f9b6 	bl	8003434 <_ZN9__gnu_cxxltIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_+0x74>
	    return __first;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	e009      	b.n	80030ec <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_+0x88>
	  std::iter_swap(__first, __last);
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fa1f 	bl	800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>
	  ++__first;
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f81d 	bl	8003124 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEppEv>
	  while (__comp(__first, __pivot))
 80030ea:	e7c2      	b.n	8003072 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEET_SG_SG_SG_T0_+0xe>
    }
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_ZN9__gnu_cxxeqIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff faf1 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8003104:	4603      	mov	r3, r0
 8003106:	681c      	ldr	r4, [r3, #0]
 8003108:	6838      	ldr	r0, [r7, #0]
 800310a:	f7ff faec 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 800310e:	4603      	mov	r3, r0
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	429c      	cmp	r4, r3
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bd90      	pop	{r4, r7, pc}

08003124 <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f103 0214 	add.w	r2, r3, #20
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	601a      	str	r2, [r3, #0]
	return *this;
 8003138:	687b      	ldr	r3, [r7, #4]
      }
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fe20 	bl	8002dae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEET_S9_>
 800316e:	4604      	mov	r4, r0
 8003170:	68b8      	ldr	r0, [r7, #8]
 8003172:	f7ff fe1c 	bl	8002dae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEET_S9_>
 8003176:	4603      	mov	r3, r0
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4619      	mov	r1, r3
 800317c:	4620      	mov	r0, r4
 800317e:	f000 f9e5 	bl	800354c <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8003182:	4603      	mov	r3, r0
    }
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bd90      	pop	{r4, r7, pc}

0800318c <_ZN9__gnu_cxx5__ops15__val_comp_iterIPFbRKSt5arrayIfLj5EES5_EEENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS9_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f9f9 	bl	800358e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES6_EEEEONSt16remove_referenceIT_E4typeEOSC_>
 800319c:	4602      	mov	r2, r0
 800319e:	f107 030c 	add.w	r3, r7, #12
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f9fd 	bl	80035a4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRKSt5arrayIfLj5EES5_EEC1EONS0_15_Iter_comp_iterIS7_EE>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_comp_iterIPFbRKS3_SC_EEEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fa77 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ffbc 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f107 040c 	add.w	r4, r7, #12
 80031d4:	461d      	mov	r5, r3
 80031d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	6023      	str	r3, [r4, #0]
      _RandomAccessIterator __next = __last;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60bb      	str	r3, [r7, #8]
      --__next;
 80031e2:	f107 0308 	add.w	r3, r7, #8
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f988 	bl	80034fc <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmmEv>
      while (__comp(__val, __next))
 80031ec:	f107 010c 	add.w	r1, r7, #12
 80031f0:	463b      	mov	r3, r7
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f9e7 	bl	80035c8 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclIS3_NS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbRT_T0_>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01b      	beq.n	8003238 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_comp_iterIPFbRKS3_SC_EEEEvT_T0_+0x84>
	  *__last = _GLIBCXX_MOVE(*__next);
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fa55 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800320a:	4603      	mov	r3, r0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff9a 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8003212:	4605      	mov	r5, r0
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fa4c 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800321c:	4603      	mov	r3, r0
 800321e:	461c      	mov	r4, r3
 8003220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	6023      	str	r3, [r4, #0]
	  __last = __next;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	607b      	str	r3, [r7, #4]
	  --__next;
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f963 	bl	80034fc <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmmEv>
      while (__comp(__val, __next))
 8003236:	e7d9      	b.n	80031ec <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops14_Val_comp_iterIPFbRKS3_SC_EEEEvT_T0_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff82 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8003242:	4605      	mov	r5, r0
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fa34 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800324c:	4603      	mov	r3, r0
 800324e:	461c      	mov	r4, r3
 8003250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	6023      	str	r3, [r4, #0]
    }
 8003258:	bf00      	nop
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bdb0      	pop	{r4, r5, r7, pc}

08003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fa3b 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8003270:	4603      	mov	r3, r0
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <_ZSt14__copy_move_a1ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f9b0 	bl	80035f2 <_ZSt14__copy_move_a2ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>
 8003292:	4603      	mov	r3, r0
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffda 	bl	8003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80032ac:	4602      	mov	r2, r0
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	109b      	asrs	r3, r3, #2
 80032b4:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_+0x34>)
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f842 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	cccccccd 	.word	0xcccccccd

080032d4 <_ZNSt16allocator_traitsISaISt5arrayIfLj5EEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f998 	bl	8003612 <_ZNK9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE8max_sizeEv>
 80032e2:	4603      	mov	r3, r0
      }
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <_ZNK9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <_ZNK9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	06666666 	.word	0x06666666

08003308 <_ZSt12__niter_baseIPSt5arrayIfLj5EEET_S3_>:
    __niter_base(_Iterator __it)
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <_ZSt14__relocate_a_1ISt5arrayIfLj5EES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	109b      	asrs	r3, r3, #2
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <_ZSt14__relocate_a_1ISt5arrayIfLj5EES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x50>)
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	dd09      	ble.n	8003358 <_ZSt14__relocate_a_1ISt5arrayIfLj5EES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x38>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	461a      	mov	r2, r3
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f01a fc88 	bl	801dc68 <memmove>
      return __result + __count;
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4413      	add	r3, r2
    }
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	cccccccd 	.word	0xcccccccd

08003374 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b092      	sub	sp, #72	; 0x48
 8003378:	af06      	add	r7, sp, #24
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8003380:	f107 020c 	add.w	r2, r7, #12
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fab0 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8003390:	4603      	mov	r3, r0
 8003392:	2b01      	cmp	r3, #1
 8003394:	bfd4      	ite	le
 8003396:	2301      	movle	r3, #1
 8003398:	2300      	movgt	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d143      	bne.n	8003428 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_+0xb4>
      const _DistanceType __len = __last - __first;
 80033a0:	f107 020c 	add.w	r2, r7, #12
 80033a4:	f107 0308 	add.w	r3, r7, #8
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff faa0 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80033b0:	62b8      	str	r0, [r7, #40]	; 0x28
      _DistanceType __parent = (__len - 2) / 2;
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	3b02      	subs	r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da00      	bge.n	80033bc <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_+0x48>
 80033ba:	3301      	adds	r3, #1
 80033bc:	105b      	asrs	r3, r3, #1
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe ffbf 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 80033cc:	4603      	mov	r3, r0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f96d 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80033da:	4603      	mov	r3, r0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff feb2 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f107 0410 	add.w	r4, r7, #16
 80033e8:	461d      	mov	r5, r3
 80033ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	6023      	str	r3, [r4, #0]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80033f2:	f107 0310 	add.w	r3, r7, #16
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fea5 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 80033fc:	4604      	mov	r4, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	9304      	str	r3, [sp, #16]
 8003404:	466d      	mov	r5, sp
 8003406:	1d23      	adds	r3, r4, #4
 8003408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800340a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f908 	bl	800362a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_>
	  if (__parent == 0)
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_+0xb8>
	  __parent--;
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	3b01      	subs	r3, #1
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (true)
 8003426:	e7cb      	b.n	80033c0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_+0x4c>
	return;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_RT0_+0xba>
	    return;
 800342c:	bf00      	nop
    }
 800342e:	3730      	adds	r7, #48	; 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	bdb0      	pop	{r4, r5, r7, pc}

08003434 <_ZN9__gnu_cxxltIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff f951 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 8003444:	4603      	mov	r3, r0
 8003446:	681c      	ldr	r4, [r3, #0]
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f7ff f94c 	bl	80026e6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEE4baseEv>
 800344e:	4603      	mov	r3, r0
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	429c      	cmp	r4, r3
 8003454:	bf34      	ite	cc
 8003456:	2301      	movcc	r3, #1
 8003458:	2300      	movcs	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}

08003464 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_SG_SG_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	b091      	sub	sp, #68	; 0x44
 8003468:	af06      	add	r7, sp, #24
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f91d 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800347a:	4603      	mov	r3, r0
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fe62 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8003482:	4603      	mov	r3, r0
 8003484:	f107 0414 	add.w	r4, r7, #20
 8003488:	461d      	mov	r5, r3
 800348a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800348c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	6023      	str	r3, [r4, #0]
      *__result = _GLIBCXX_MOVE(*__first);
 8003492:	f107 030c 	add.w	r3, r7, #12
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff f90c 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800349c:	4603      	mov	r3, r0
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fe51 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 80034a4:	4605      	mov	r5, r0
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f903 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461c      	mov	r4, r3
 80034b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034b6:	682b      	ldr	r3, [r5, #0]
 80034b8:	6023      	str	r3, [r4, #0]
			 _DistanceType(__last - __first),
 80034ba:	f107 020c 	add.w	r2, r7, #12
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fa13 	bl	80028f0 <_ZN9__gnu_cxxmiIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80034ca:	4606      	mov	r6, r0
			 _GLIBCXX_MOVE(__value), __comp);
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fe38 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 80034d6:	4604      	mov	r4, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	9304      	str	r3, [sp, #16]
 80034de:	466d      	mov	r5, sp
 80034e0:	1d23      	adds	r3, r4, #4
 80034e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	4632      	mov	r2, r6
 80034ec:	2100      	movs	r1, #0
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f89b 	bl	800362a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_>
    }
 80034f4:	bf00      	nop
 80034f6:	372c      	adds	r7, #44	; 0x2c
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034fc <_ZN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	--_M_current;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1a3 0214 	sub.w	r2, r3, #20
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
	return *this;
 8003510:	687b      	ldr	r3, [r7, #4]
      }
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800351e:	b590      	push	{r4, r7, lr}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff f8c2 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 8003530:	4604      	mov	r4, r0
 8003532:	463b      	mov	r3, r7
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff f8bd 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800353a:	4603      	mov	r3, r0
 800353c:	4619      	mov	r1, r3
 800353e:	4620      	mov	r0, r4
 8003540:	f000 f935 	bl	80037ae <_ZSt4swapIfLj5EENSt9enable_ifIXsrNSt14__array_traitsIT_XT0_EE13_Is_swappableE5valueEvE4typeERSt5arrayIS2_XT0_EES9_>
    }
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}

0800354c <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800354c:	b5b0      	push	{r4, r5, r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff fe81 	bl	8003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800355e:	4604      	mov	r4, r0
 8003560:	68b8      	ldr	r0, [r7, #8]
 8003562:	f7ff fe7d 	bl	8003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8003566:	4605      	mov	r5, r0
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fe79 	bl	8003260 <_ZSt12__niter_baseIPSt5arrayIfLj5EESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800356e:	4603      	mov	r3, r0
 8003570:	461a      	mov	r2, r3
 8003572:	4629      	mov	r1, r5
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f927 	bl	80037c8 <_ZSt23__copy_move_backward_a1ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>
 800357a:	4603      	mov	r3, r0
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fe8c 	bl	800329c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8003584:	4603      	mov	r3, r0
    }
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bdb0      	pop	{r4, r5, r7, pc}

0800358e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES6_EEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRKSt5arrayIfLj5EES5_EEC1EONS0_15_Iter_comp_iterIS7_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff f9df 	bl	8002974 <_ZSt4moveIRPFbRKSt5arrayIfLj5EES3_EEONSt16remove_referenceIT_E4typeEOS8_>
 80035b6:	4603      	mov	r3, r0
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
      { }
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclIS3_NS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681c      	ldr	r4, [r3, #0]
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f86a 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4619      	mov	r1, r3
 80035e4:	68b8      	ldr	r0, [r7, #8]
 80035e6:	47a0      	blx	r4
 80035e8:	4603      	mov	r3, r0
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}

080035f2 <_ZSt14__copy_move_a2ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f8f0 	bl	80037e8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mISt5arrayIfLj5EEEEPT_PKS5_S8_S6_>
 8003608:	4603      	mov	r3, r0
    }
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <_ZNK9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe66 	bl	80032ec <_ZNK9__gnu_cxx13new_allocatorISt5arrayIfLj5EEE11_M_max_sizeEv>
 8003620:	4603      	mov	r3, r0
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800362a:	b082      	sub	sp, #8
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b092      	sub	sp, #72	; 0x48
 8003630:	af06      	add	r7, sp, #24
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
      const _Distance __topIndex = __holeIndex;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
      _Distance __secondChild = __holeIndex;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__secondChild < (__len - 1) / 2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3b01      	subs	r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	da00      	bge.n	800364c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_+0x22>
 800364a:	3301      	adds	r3, #1
 800364c:	105b      	asrs	r3, r3, #1
 800364e:	461a      	mov	r2, r3
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	4293      	cmp	r3, r2
 8003654:	da47      	bge.n	80036e6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_+0xbc>
	  __secondChild = 2 * (__secondChild + 1);
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	3301      	adds	r3, #1
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (__comp(__first + __secondChild,
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fe70 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 800366a:	4604      	mov	r4, r0
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fe67 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 800367c:	4602      	mov	r2, r0
 800367e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003682:	4621      	mov	r1, r4
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fc7d 	bl	8002f84 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEESF_EEbT_T0_>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_+0x6c>
	    __secondChild--;
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	3b01      	subs	r3, #1
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003696:	f107 030c 	add.w	r3, r7, #12
 800369a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fe54 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 80036a2:	4603      	mov	r3, r0
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	f107 0318 	add.w	r3, r7, #24
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f802 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fd47 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 80036b8:	4605      	mov	r5, r0
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fe42 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 80036c6:	4603      	mov	r3, r0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fff0 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461c      	mov	r4, r3
 80036d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	6023      	str	r3, [r4, #0]
	  __holeIndex = __secondChild;
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 80036e4:	e7ad      	b.n	8003642 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_+0x18>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d137      	bne.n	8003760 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_+0x136>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b02      	subs	r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da00      	bge.n	80036fa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_+0xd0>
 80036f8:	3301      	adds	r3, #1
 80036fa:	105b      	asrs	r3, r3, #1
 80036fc:	461a      	mov	r2, r3
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	4293      	cmp	r3, r2
 8003702:	d12d      	bne.n	8003760 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIPFbRKS3_SC_EEEEvT_T0_SH_T1_T2_+0x136>
	  __secondChild = 2 * (__secondChild + 1);
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fe17 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 800371c:	4603      	mov	r3, r0
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	f107 0320 	add.w	r3, r7, #32
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe ffc5 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800372a:	4603      	mov	r3, r0
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fd0a 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8003732:	4605      	mov	r5, r0
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fe05 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8003740:	4603      	mov	r3, r0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe ffb3 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 800374e:	4603      	mov	r3, r0
 8003750:	461c      	mov	r4, r3
 8003752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003756:	682b      	ldr	r3, [r5, #0]
 8003758:	6023      	str	r3, [r4, #0]
	  __holeIndex = __secondChild - 1;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	3b01      	subs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 8003760:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff12 	bl	800358e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRKSt5arrayIfLj5EES6_EEEEONSt16remove_referenceIT_E4typeEOSC_>
 800376a:	4602      	mov	r2, r0
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f862 	bl	800383c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRKSt5arrayIfLj5EES5_EEC1EONS0_15_Iter_comp_iterIS7_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8003778:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fce2 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8003782:	4604      	mov	r4, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	9304      	str	r3, [sp, #16]
 800378a:	466d      	mov	r5, sp
 800378c:	1d23      	adds	r3, r4, #4
 800378e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003790:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f860 	bl	8003860 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_>
    }
 80037a0:	bf00      	nop
 80037a2:	3730      	adds	r7, #48	; 0x30
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80037aa:	b002      	add	sp, #8
 80037ac:	4770      	bx	lr

080037ae <_ZSt4swapIfLj5EENSt9enable_ifIXsrNSt14__array_traitsIT_XT0_EE13_Is_swappableE5valueEvE4typeERSt5arrayIS2_XT0_EES9_>:
      _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type
#else
    void
#endif
    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8c7 	bl	800394e <_ZNSt5arrayIfLj5EE4swapERS0_>
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_ZSt23__copy_move_backward_a1ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f8d2 	bl	8003982 <_ZSt23__copy_move_backward_a2ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>
 80037de:	4603      	mov	r3, r0
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mISt5arrayIfLj5EEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	109b      	asrs	r3, r3, #2
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mISt5arrayIfLj5EEEEPT_PKS5_S8_S6_+0x50>)
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mISt5arrayIfLj5EEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	461a      	mov	r2, r3
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f01a fa25 	bl	801dc68 <memmove>
	  return __result + _Num;
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4413      	add	r3, r2
	}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	cccccccd 	.word	0xcccccccd

0800383c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRKSt5arrayIfLj5EES5_EEC1EONS0_15_Iter_comp_iterIS7_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff f893 	bl	8002974 <_ZSt4moveIRPFbRKSt5arrayIfLj5EES3_EEONSt16remove_referenceIT_E4typeEOS8_>
 800384e:	4603      	mov	r3, r0
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
      { }
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8003860:	b082      	sub	sp, #8
 8003862:	b5b0      	push	{r4, r5, r7, lr}
 8003864:	b088      	sub	sp, #32
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
      _Distance __parent = (__holeIndex - 1) / 2;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3b01      	subs	r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	da00      	bge.n	800387a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_+0x1a>
 8003878:	3301      	adds	r3, #1
 800387a:	105b      	asrs	r3, r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	dd11      	ble.n	80038aa <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_+0x4a>
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	69f9      	ldr	r1, [r7, #28]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fd5c 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8003892:	4601      	mov	r1, r0
 8003894:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003898:	461a      	mov	r2, r3
 800389a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800389c:	f000 f881 	bl	80039a2 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEES3_EEbT_RT0_>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_+0x4a>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_+0x4c>
 80038aa:	2300      	movs	r3, #0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d02e      	beq.n	800390e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_+0xae>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	69f9      	ldr	r1, [r7, #28]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fd47 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 80038bc:	4603      	mov	r3, r0
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fef5 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fc3a 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 80038d2:	4605      	mov	r5, r0
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fd35 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 80038e0:	4603      	mov	r3, r0
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fee3 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461c      	mov	r4, r3
 80038f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038f6:	682b      	ldr	r3, [r5, #0]
 80038f8:	6023      	str	r3, [r4, #0]
	  __holeIndex = __parent;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3b01      	subs	r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	da00      	bge.n	8003908 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_+0xa8>
 8003906:	3301      	adds	r3, #1
 8003908:	105b      	asrs	r3, r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800390c:	e7b7      	b.n	800387e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valIPFbRKS3_SC_EEEEvT_T0_SH_T1_RT2_+0x1e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800390e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fc17 	bl	8003146 <_ZSt4moveIRSt5arrayIfLj5EEEONSt16remove_referenceIT_E4typeEOS4_>
 8003918:	4605      	mov	r5, r0
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fd12 	bl	800234a <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEplEi>
 8003926:	4603      	mov	r3, r0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	f107 0318 	add.w	r3, r7, #24
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fec0 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 8003934:	4603      	mov	r3, r0
 8003936:	461c      	mov	r4, r3
 8003938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	6023      	str	r3, [r4, #0]
    }
 8003940:	bf00      	nop
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800394a:	b002      	add	sp, #8
 800394c:	4770      	bx	lr

0800394e <_ZNSt5arrayIfLj5EE4swapERS0_>:
      swap(array& __other)
 800394e:	b5b0      	push	{r4, r5, r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
      { std::swap_ranges(begin(), end(), __other.begin()); }
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f838 	bl	80039ce <_ZNSt5arrayIfLj5EE5beginEv>
 800395e:	4604      	mov	r4, r0
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f840 	bl	80039e6 <_ZNSt5arrayIfLj5EE3endEv>
 8003966:	4605      	mov	r5, r0
 8003968:	6838      	ldr	r0, [r7, #0]
 800396a:	f000 f830 	bl	80039ce <_ZNSt5arrayIfLj5EE5beginEv>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	4629      	mov	r1, r5
 8003974:	4620      	mov	r0, r4
 8003976:	f000 f843 	bl	8003a00 <_ZSt11swap_rangesIPfS0_ET0_T_S2_S1_>
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bdb0      	pop	{r4, r5, r7, pc}

08003982 <_ZSt23__copy_move_backward_a2ILb1EPSt5arrayIfLj5EES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f84e 	bl	8003a34 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bISt5arrayIfLj5EEEEPT_PKS5_S8_S6_>
 8003998:	4603      	mov	r3, r0
    }
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRKSt5arrayIfLj5EES5_EEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEES3_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80039a2:	b590      	push	{r4, r7, lr}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681c      	ldr	r4, [r3, #0]
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fe7c 	bl	80026b4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt5arrayIfLj5EESt6vectorIS2_SaIS2_EEEdeEv>
 80039bc:	4603      	mov	r3, r0
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	47a0      	blx	r4
 80039c4:	4603      	mov	r3, r0
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}

080039ce <_ZNSt5arrayIfLj5EE5beginEv>:
      begin() noexcept
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f85c 	bl	8003a94 <_ZNSt5arrayIfLj5EE4dataEv>
 80039dc:	4603      	mov	r3, r0
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_ZNSt5arrayIfLj5EE3endEv>:
      end() noexcept
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f850 	bl	8003a94 <_ZNSt5arrayIfLj5EE4dataEv>
 80039f4:	4603      	mov	r3, r0
 80039f6:	3314      	adds	r3, #20
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_ZSt11swap_rangesIPfS0_ET0_T_S2_S1_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d00a      	beq.n	8003a2a <_ZSt11swap_rangesIPfS0_ET0_T_S2_S1_+0x2a>
	std::iter_swap(__first1, __first2);
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f849 	bl	8003aae <_ZSt9iter_swapIPfS0_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	e7f0      	b.n	8003a0c <_ZSt11swap_rangesIPfS0_ET0_T_S2_S1_+0xc>
      return __first2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
    }
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bISt5arrayIfLj5EEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	109b      	asrs	r3, r3, #2
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bISt5arrayIfLj5EEEEPT_PKS5_S8_S6_+0x5c>)
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bISt5arrayIfLj5EEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	425b      	negs	r3, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	18d0      	adds	r0, r2, r3
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	461a      	mov	r2, r3
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	f01a f8f8 	bl	801dc68 <memmove>
	  return __result - _Num;
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	425b      	negs	r3, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
	}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	cccccccd 	.word	0xcccccccd

08003a94 <_ZNSt5arrayIfLj5EE4dataEv>:
      data() noexcept
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f812 	bl	8003ac8 <_ZNSt14__array_traitsIfLj5EE6_S_ptrERA5_Kf>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <_ZSt9iter_swapIPfS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f81a 	bl	8003af4 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_ZNSt14__array_traitsIfLj5EE6_S_ptrERA5_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ffed 	bl	8003ade <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8003b04:	4603      	mov	r3, r0
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003b0a:	6838      	ldr	r0, [r7, #0]
 8003b0c:	f7ff ffe7 	bl	8003ade <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8003b10:	4603      	mov	r3, r0
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ffde 	bl	8003ade <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8003b22:	4603      	mov	r3, r0
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	601a      	str	r2, [r3, #0]
    }
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e02c      	b.n	8003ba6 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	891a      	ldrh	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <OV5640_RegisterBusIO+0x7c>)
 8003b80:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <OV5640_RegisterBusIO+0x80>)
 8003b86:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4798      	blx	r3
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	080053b7 	.word	0x080053b7
 8003bb4:	080053e9 	.word	0x080053e9

08003bb8 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d165      	bne.n	8003c9e <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d80e      	bhi.n	8003bf6 <OV5640_Init+0x3e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00f      	beq.n	8003bfe <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d00c      	beq.n	8003bfe <OV5640_Init+0x46>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d009      	beq.n	8003bfe <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b07      	cmp	r3, #7
 8003bee:	d006      	beq.n	8003bfe <OV5640_Init+0x46>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d003      	beq.n	8003bfe <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e04f      	b.n	8003c9e <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	e01f      	b.n	8003c44 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d018      	beq.n	8003c3e <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8003c0c:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <OV5640_Init+0xf0>)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	885b      	ldrh	r3, [r3, #2]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f103 0018 	add.w	r0, r3, #24
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <OV5640_Init+0xf0>)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003c28:	f107 0217 	add.w	r2, r7, #23
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f001 fc0b 	bl	8005448 <ov5640_write_reg>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3301      	adds	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2bfd      	cmp	r3, #253	; 0xfd
 8003c48:	d9dc      	bls.n	8003c04 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d126      	bne.n	8003c9e <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f9e0 	bl	8004018 <OV5640_SetResolution>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8003c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e01b      	b.n	8003c9e <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f833 	bl	8003cd4 <OV5640_SetPixelFormat>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e010      	b.n	8003c9e <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2101      	movs	r1, #1
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fb64 	bl	8004350 <OV5640_SetPolarities>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e003      	b.n	8003c9e <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	0801ef48 	.word	0x0801ef48

08003cac <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d103      	bne.n	8003cc6 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00f      	beq.n	8003d08 <OV5640_SetPixelFormat+0x34>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d00c      	beq.n	8003d08 <OV5640_SetPixelFormat+0x34>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d009      	beq.n	8003d08 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b07      	cmp	r3, #7
 8003cf8:	d006      	beq.n	8003d08 <OV5640_SetPixelFormat+0x34>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d003      	beq.n	8003d08 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e16a      	b.n	8003fde <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	2b07      	cmp	r3, #7
 8003d0e:	f200 80c3 	bhi.w	8003e98 <OV5640_SetPixelFormat+0x1c4>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <OV5640_SetPixelFormat+0x44>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d91 	.word	0x08003d91
 8003d1c:	08003d39 	.word	0x08003d39
 8003d20:	08003e99 	.word	0x08003e99
 8003d24:	08003e99 	.word	0x08003e99
 8003d28:	08003e99 	.word	0x08003e99
 8003d2c:	08003e99 	.word	0x08003e99
 8003d30:	08003de9 	.word	0x08003de9
 8003d34:	08003e41 	.word	0x08003e41
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e024      	b.n	8003d88 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d01d      	beq.n	8003d82 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8003d46:	4aa8      	ldr	r2, [pc, #672]	; (8003fe8 <OV5640_SetPixelFormat+0x314>)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	885b      	ldrh	r3, [r3, #2]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 0018 	add.w	r0, r3, #24
 8003d5a:	4aa3      	ldr	r2, [pc, #652]	; (8003fe8 <OV5640_SetPixelFormat+0x314>)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003d62:	f107 020f 	add.w	r2, r7, #15
 8003d66:	2301      	movs	r3, #1
 8003d68:	f001 fb6e 	bl	8005448 <ov5640_write_reg>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e003      	b.n	8003d82 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 fb00 	bl	8005382 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3301      	adds	r3, #1
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d9d7      	bls.n	8003d3e <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8003d8e:	e0af      	b.n	8003ef0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	e024      	b.n	8003de0 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d01d      	beq.n	8003dda <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8003d9e:	4a93      	ldr	r2, [pc, #588]	; (8003fec <OV5640_SetPixelFormat+0x318>)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	885b      	ldrh	r3, [r3, #2]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f103 0018 	add.w	r0, r3, #24
 8003db2:	4a8e      	ldr	r2, [pc, #568]	; (8003fec <OV5640_SetPixelFormat+0x318>)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003dba:	f107 020f 	add.w	r2, r7, #15
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f001 fb42 	bl	8005448 <ov5640_write_reg>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e003      	b.n	8003dda <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f001 fad4 	bl	8005382 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d9d7      	bls.n	8003d96 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8003de6:	e083      	b.n	8003ef0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	e024      	b.n	8003e38 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d01d      	beq.n	8003e32 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8003df6:	4a7e      	ldr	r2, [pc, #504]	; (8003ff0 <OV5640_SetPixelFormat+0x31c>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	885b      	ldrh	r3, [r3, #2]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f103 0018 	add.w	r0, r3, #24
 8003e0a:	4a79      	ldr	r2, [pc, #484]	; (8003ff0 <OV5640_SetPixelFormat+0x31c>)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e12:	f107 020f 	add.w	r2, r7, #15
 8003e16:	2301      	movs	r3, #1
 8003e18:	f001 fb16 	bl	8005448 <ov5640_write_reg>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e003      	b.n	8003e32 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f001 faa8 	bl	8005382 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	3301      	adds	r3, #1
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d9d7      	bls.n	8003dee <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8003e3e:	e057      	b.n	8003ef0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	e024      	b.n	8003e90 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d01d      	beq.n	8003e8a <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8003e4e:	4a69      	ldr	r2, [pc, #420]	; (8003ff4 <OV5640_SetPixelFormat+0x320>)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	885b      	ldrh	r3, [r3, #2]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f103 0018 	add.w	r0, r3, #24
 8003e62:	4a64      	ldr	r2, [pc, #400]	; (8003ff4 <OV5640_SetPixelFormat+0x320>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e6a:	f107 020f 	add.w	r2, r7, #15
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f001 faea 	bl	8005448 <ov5640_write_reg>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e003      	b.n	8003e8a <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8003e82:	2101      	movs	r1, #1
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f001 fa7c 	bl	8005382 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d9d7      	bls.n	8003e46 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8003e96:	e02b      	b.n	8003ef0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	e024      	b.n	8003ee8 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d01d      	beq.n	8003ee2 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8003ea6:	4a54      	ldr	r2, [pc, #336]	; (8003ff8 <OV5640_SetPixelFormat+0x324>)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	885b      	ldrh	r3, [r3, #2]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f103 0018 	add.w	r0, r3, #24
 8003eba:	4a4f      	ldr	r2, [pc, #316]	; (8003ff8 <OV5640_SetPixelFormat+0x324>)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ec2:	f107 020f 	add.w	r2, r7, #15
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f001 fabe 	bl	8005448 <ov5640_write_reg>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	e003      	b.n	8003ee2 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8003eda:	2101      	movs	r1, #1
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f001 fa50 	bl	8005382 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d9d7      	bls.n	8003e9e <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8003eee:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d173      	bne.n	8003fde <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f103 0018 	add.w	r0, r3, #24
 8003efc:	f107 020f 	add.w	r2, r7, #15
 8003f00:	2301      	movs	r3, #1
 8003f02:	f643 0121 	movw	r1, #14369	; 0x3821
 8003f06:	f001 fa88 	bl	800541a <ov5640_read_reg>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e062      	b.n	8003fde <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	f043 0320 	orr.w	r3, r3, #32
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0018 	add.w	r0, r3, #24
 8003f28:	f107 020f 	add.w	r2, r7, #15
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f643 0121 	movw	r1, #14369	; 0x3821
 8003f32:	f001 fa89 	bl	8005448 <ov5640_write_reg>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e04c      	b.n	8003fde <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0018 	add.w	r0, r3, #24
 8003f4a:	f107 020f 	add.w	r2, r7, #15
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f243 0102 	movw	r1, #12290	; 0x3002
 8003f54:	f001 fa61 	bl	800541a <ov5640_read_reg>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e03b      	b.n	8003fde <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	f023 031c 	bic.w	r3, r3, #28
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f103 0018 	add.w	r0, r3, #24
 8003f76:	f107 020f 	add.w	r2, r7, #15
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f243 0102 	movw	r1, #12290	; 0x3002
 8003f80:	f001 fa62 	bl	8005448 <ov5640_write_reg>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e025      	b.n	8003fde <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f103 0018 	add.w	r0, r3, #24
 8003f98:	f107 020f 	add.w	r2, r7, #15
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f243 0106 	movw	r1, #12294	; 0x3006
 8003fa2:	f001 fa3a 	bl	800541a <ov5640_read_reg>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8003fac:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e014      	b.n	8003fde <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 0018 	add.w	r0, r3, #24
 8003fc4:	f107 020f 	add.w	r2, r7, #15
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f243 0106 	movw	r1, #12294	; 0x3006
 8003fce:	f001 fa3b 	bl	8005448 <ov5640_write_reg>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8003fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fdc:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	0801f340 	.word	0x0801f340
 8003fec:	0801f348 	.word	0x0801f348
 8003ff0:	0801f350 	.word	0x0801f350
 8003ff4:	0801f358 	.word	0x0801f358
 8003ff8:	0801f360 	.word	0x0801f360

08003ffc <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d903      	bls.n	8004034 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e0d8      	b.n	80041e6 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b04      	cmp	r3, #4
 8004038:	f200 80d1 	bhi.w	80041de <OV5640_SetResolution+0x1c6>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <OV5640_SetResolution+0x2c>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004059 	.word	0x08004059
 8004048:	080040a7 	.word	0x080040a7
 800404c:	080040f5 	.word	0x080040f5
 8004050:	08004143 	.word	0x08004143
 8004054:	08004191 	.word	0x08004191
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	e01f      	b.n	800409e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d018      	beq.n	8004098 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8004066:	4a62      	ldr	r2, [pc, #392]	; (80041f0 <OV5640_SetResolution+0x1d8>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	885b      	ldrh	r3, [r3, #2]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f103 0018 	add.w	r0, r3, #24
 800407a:	4a5d      	ldr	r2, [pc, #372]	; (80041f0 <OV5640_SetResolution+0x1d8>)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004082:	f107 020f 	add.w	r2, r7, #15
 8004086:	2301      	movs	r3, #1
 8004088:	f001 f9de 	bl	8005448 <ov5640_write_reg>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	3301      	adds	r3, #1
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d9dc      	bls.n	800405e <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 80040a4:	e09f      	b.n	80041e6 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e01f      	b.n	80040ec <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d018      	beq.n	80040e6 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80040b4:	4a4f      	ldr	r2, [pc, #316]	; (80041f4 <OV5640_SetResolution+0x1dc>)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	885b      	ldrh	r3, [r3, #2]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f103 0018 	add.w	r0, r3, #24
 80040c8:	4a4a      	ldr	r2, [pc, #296]	; (80041f4 <OV5640_SetResolution+0x1dc>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80040d0:	f107 020f 	add.w	r2, r7, #15
 80040d4:	2301      	movs	r3, #1
 80040d6:	f001 f9b7 	bl	8005448 <ov5640_write_reg>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d9dc      	bls.n	80040ac <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80040f2:	e078      	b.n	80041e6 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	e01f      	b.n	800413a <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d018      	beq.n	8004134 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8004102:	4a3d      	ldr	r2, [pc, #244]	; (80041f8 <OV5640_SetResolution+0x1e0>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	885b      	ldrh	r3, [r3, #2]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0018 	add.w	r0, r3, #24
 8004116:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <OV5640_SetResolution+0x1e0>)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800411e:	f107 020f 	add.w	r2, r7, #15
 8004122:	2301      	movs	r3, #1
 8004124:	f001 f990 	bl	8005448 <ov5640_write_reg>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3301      	adds	r3, #1
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d9dc      	bls.n	80040fa <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8004140:	e051      	b.n	80041e6 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	e01f      	b.n	8004188 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d018      	beq.n	8004182 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <OV5640_SetResolution+0x1e4>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	885b      	ldrh	r3, [r3, #2]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f103 0018 	add.w	r0, r3, #24
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <OV5640_SetResolution+0x1e4>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800416c:	f107 020f 	add.w	r2, r7, #15
 8004170:	2301      	movs	r3, #1
 8004172:	f001 f969 	bl	8005448 <ov5640_write_reg>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 800417c:	f04f 33ff 	mov.w	r3, #4294967295
 8004180:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	3301      	adds	r3, #1
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d9dc      	bls.n	8004148 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800418e:	e02a      	b.n	80041e6 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e01f      	b.n	80041d6 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d018      	beq.n	80041d0 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <OV5640_SetResolution+0x1e8>)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	885b      	ldrh	r3, [r3, #2]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f103 0018 	add.w	r0, r3, #24
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <OV5640_SetResolution+0x1e8>)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80041ba:	f107 020f 	add.w	r2, r7, #15
 80041be:	2301      	movs	r3, #1
 80041c0:	f001 f942 	bl	8005448 <ov5640_write_reg>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3301      	adds	r3, #1
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d9dc      	bls.n	8004196 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 80041dc:	e003      	b.n	80041e6 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	617b      	str	r3, [r7, #20]
        break;
 80041e4:	bf00      	nop
    }
  }

  return ret;
 80041e6:	697b      	ldr	r3, [r7, #20]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	0801f368 	.word	0x0801f368
 80041f4:	0801f378 	.word	0x0801f378
 80041f8:	0801f388 	.word	0x0801f388
 80041fc:	0801f398 	.word	0x0801f398
 8004200:	0801f3a8 	.word	0x0801f3a8

08004204 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f103 0018 	add.w	r0, r3, #24
 8004214:	f107 020f 	add.w	r2, r7, #15
 8004218:	2301      	movs	r3, #1
 800421a:	f643 0108 	movw	r1, #14344	; 0x3808
 800421e:	f001 f8fc 	bl	800541a <ov5640_read_reg>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e08a      	b.n	8004346 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	b29b      	uxth	r3, r3
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f103 0018 	add.w	r0, r3, #24
 800423e:	f107 020f 	add.w	r2, r7, #15
 8004242:	2301      	movs	r3, #1
 8004244:	f643 0109 	movw	r1, #14345	; 0x3809
 8004248:	f001 f8e7 	bl	800541a <ov5640_read_reg>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e075      	b.n	8004346 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	b29a      	uxth	r2, r3
 800425e:	8a7b      	ldrh	r3, [r7, #18]
 8004260:	4313      	orrs	r3, r2
 8004262:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f103 0018 	add.w	r0, r3, #24
 800426a:	f107 020f 	add.w	r2, r7, #15
 800426e:	2301      	movs	r3, #1
 8004270:	f643 010a 	movw	r1, #14346	; 0x380a
 8004274:	f001 f8d1 	bl	800541a <ov5640_read_reg>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e05f      	b.n	8004346 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	b29b      	uxth	r3, r3
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f103 0018 	add.w	r0, r3, #24
 8004294:	f107 020f 	add.w	r2, r7, #15
 8004298:	2301      	movs	r3, #1
 800429a:	f643 010b 	movw	r1, #14347	; 0x380b
 800429e:	f001 f8bc 	bl	800541a <ov5640_read_reg>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e04a      	b.n	8004346 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	8a3b      	ldrh	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 80042ba:	8a7b      	ldrh	r3, [r7, #18]
 80042bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80042c0:	d109      	bne.n	80042d6 <OV5640_GetResolution+0xd2>
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80042c8:	d105      	bne.n	80042d6 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2204      	movs	r2, #4
 80042ce:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e037      	b.n	8004346 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 80042d6:	8a7b      	ldrh	r3, [r7, #18]
 80042d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80042dc:	d109      	bne.n	80042f2 <OV5640_GetResolution+0xee>
 80042de:	8a3b      	ldrh	r3, [r7, #16]
 80042e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80042e4:	d105      	bne.n	80042f2 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2203      	movs	r2, #3
 80042ea:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e029      	b.n	8004346 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 80042f2:	8a7b      	ldrh	r3, [r7, #18]
 80042f4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80042f8:	d109      	bne.n	800430e <OV5640_GetResolution+0x10a>
 80042fa:	8a3b      	ldrh	r3, [r7, #16]
 80042fc:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004300:	d105      	bne.n	800430e <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2202      	movs	r2, #2
 8004306:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e01b      	b.n	8004346 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 800430e:	8a7b      	ldrh	r3, [r7, #18]
 8004310:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004314:	d108      	bne.n	8004328 <OV5640_GetResolution+0x124>
 8004316:	8a3b      	ldrh	r3, [r7, #16]
 8004318:	2bf0      	cmp	r3, #240	; 0xf0
 800431a:	d105      	bne.n	8004328 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e00e      	b.n	8004346 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8004328:	8a7b      	ldrh	r3, [r7, #18]
 800432a:	2ba0      	cmp	r3, #160	; 0xa0
 800432c:	d108      	bne.n	8004340 <OV5640_GetResolution+0x13c>
 800432e:	8a3b      	ldrh	r3, [r7, #16]
 8004330:	2b78      	cmp	r3, #120	; 0x78
 8004332:	d105      	bne.n	8004340 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e002      	b.n	8004346 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8004346:	697b      	ldr	r3, [r7, #20]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d011      	beq.n	800438c <OV5640_SetPolarities+0x3c>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <OV5640_SetPolarities+0x24>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10b      	bne.n	800438c <OV5640_SetPolarities+0x3c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <OV5640_SetPolarities+0x3c>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d006      	beq.n	8004394 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 800438c:	f04f 33ff 	mov.w	r3, #4294967295
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e01e      	b.n	80043d2 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	015b      	lsls	r3, r3, #5
 800439a:	b2da      	uxtb	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4313      	orrs	r3, r2
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f103 0018 	add.w	r0, r3, #24
 80043b8:	f107 0213 	add.w	r2, r7, #19
 80043bc:	2301      	movs	r3, #1
 80043be:	f244 7140 	movw	r1, #18240	; 0x4740
 80043c2:	f001 f841 	bl	8005448 <ov5640_write_reg>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80043d2:	697b      	ldr	r3, [r7, #20]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f103 0018 	add.w	r0, r3, #24
 80043f6:	f107 020b 	add.w	r2, r7, #11
 80043fa:	2301      	movs	r3, #1
 80043fc:	f243 0108 	movw	r1, #12296	; 0x3008
 8004400:	f001 f822 	bl	8005448 <ov5640_write_reg>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e032      	b.n	8004478 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8004412:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 ffb3 	bl	8005382 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f103 0018 	add.w	r0, r3, #24
 8004422:	f107 020b 	add.w	r2, r7, #11
 8004426:	2301      	movs	r3, #1
 8004428:	f243 010a 	movw	r1, #12298	; 0x300a
 800442c:	f000 fff5 	bl	800541a <ov5640_read_reg>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e01c      	b.n	8004478 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f103 0018 	add.w	r0, r3, #24
 800444c:	f107 020b 	add.w	r2, r7, #11
 8004450:	2301      	movs	r3, #1
 8004452:	f243 010b 	movw	r1, #12299	; 0x300b
 8004456:	f000 ffe0 	bl	800541a <ov5640_read_reg>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	e007      	b.n	8004478 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	7afa      	ldrb	r2, [r7, #11]
 800446e:	431a      	orrs	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e01f      	b.n	80044da <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2201      	movs	r2, #1
 80044b6:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80044da:	68fb      	ldr	r3, [r7, #12]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f103 0018 	add.w	r0, r3, #24
 80044fc:	f107 020f 	add.w	r2, r7, #15
 8004500:	2301      	movs	r3, #1
 8004502:	f243 4106 	movw	r1, #13318	; 0x3406
 8004506:	f000 ff9f 	bl	8005448 <ov5640_write_reg>
 800450a:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8004512:	2346      	movs	r3, #70	; 0x46
 8004514:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f103 0018 	add.w	r0, r3, #24
 800451c:	f107 020f 	add.w	r2, r7, #15
 8004520:	2301      	movs	r3, #1
 8004522:	f245 1190 	movw	r1, #20880	; 0x5190
 8004526:	f000 ff8f 	bl	8005448 <ov5640_write_reg>
 800452a:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8004532:	23f8      	movs	r3, #248	; 0xf8
 8004534:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f103 0018 	add.w	r0, r3, #24
 800453c:	f107 020f 	add.w	r2, r7, #15
 8004540:	2301      	movs	r3, #1
 8004542:	f245 1191 	movw	r1, #20881	; 0x5191
 8004546:	f000 ff7f 	bl	8005448 <ov5640_write_reg>
 800454a:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10c      	bne.n	800456c <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8004552:	2304      	movs	r3, #4
 8004554:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f103 0018 	add.w	r0, r3, #24
 800455c:	f107 020f 	add.w	r2, r7, #15
 8004560:	2301      	movs	r3, #1
 8004562:	f245 1192 	movw	r1, #20882	; 0x5192
 8004566:	f000 ff6f 	bl	8005448 <ov5640_write_reg>
 800456a:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 80db 	bne.w	800472a <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	3b01      	subs	r3, #1
 8004578:	2b07      	cmp	r3, #7
 800457a:	f200 80af 	bhi.w	80046dc <OV5640_SetLightMode+0x1f4>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <OV5640_SetLightMode+0x9c>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	080045a5 	.word	0x080045a5
 8004588:	080045f3 	.word	0x080045f3
 800458c:	080046dd 	.word	0x080046dd
 8004590:	0800468f 	.word	0x0800468f
 8004594:	080046dd 	.word	0x080046dd
 8004598:	080046dd 	.word	0x080046dd
 800459c:	080046dd 	.word	0x080046dd
 80045a0:	08004641 	.word	0x08004641
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e01f      	b.n	80045ea <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d018      	beq.n	80045e4 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80045b2:	4a61      	ldr	r2, [pc, #388]	; (8004738 <OV5640_SetLightMode+0x250>)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	885b      	ldrh	r3, [r3, #2]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f103 0018 	add.w	r0, r3, #24
 80045c6:	4a5c      	ldr	r2, [pc, #368]	; (8004738 <OV5640_SetLightMode+0x250>)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80045ce:	f107 020f 	add.w	r2, r7, #15
 80045d2:	2301      	movs	r3, #1
 80045d4:	f000 ff38 	bl	8005448 <ov5640_write_reg>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3301      	adds	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d9dc      	bls.n	80045aa <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 80045f0:	e09c      	b.n	800472c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e01f      	b.n	8004638 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d018      	beq.n	8004632 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8004600:	4a4e      	ldr	r2, [pc, #312]	; (800473c <OV5640_SetLightMode+0x254>)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	885b      	ldrh	r3, [r3, #2]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f103 0018 	add.w	r0, r3, #24
 8004614:	4a49      	ldr	r2, [pc, #292]	; (800473c <OV5640_SetLightMode+0x254>)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800461c:	f107 020f 	add.w	r2, r7, #15
 8004620:	2301      	movs	r3, #1
 8004622:	f000 ff11 	bl	8005448 <ov5640_write_reg>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 800462c:	f04f 33ff 	mov.w	r3, #4294967295
 8004630:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	3301      	adds	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d9dc      	bls.n	80045f8 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 800463e:	e075      	b.n	800472c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	e01f      	b.n	8004686 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d018      	beq.n	8004680 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800464e:	4a3c      	ldr	r2, [pc, #240]	; (8004740 <OV5640_SetLightMode+0x258>)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	885b      	ldrh	r3, [r3, #2]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f103 0018 	add.w	r0, r3, #24
 8004662:	4a37      	ldr	r2, [pc, #220]	; (8004740 <OV5640_SetLightMode+0x258>)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800466a:	f107 020f 	add.w	r2, r7, #15
 800466e:	2301      	movs	r3, #1
 8004670:	f000 feea 	bl	8005448 <ov5640_write_reg>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3301      	adds	r3, #1
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b06      	cmp	r3, #6
 800468a:	d9dc      	bls.n	8004646 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 800468c:	e04e      	b.n	800472c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e01f      	b.n	80046d4 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d018      	beq.n	80046ce <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800469c:	4a29      	ldr	r2, [pc, #164]	; (8004744 <OV5640_SetLightMode+0x25c>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	885b      	ldrh	r3, [r3, #2]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f103 0018 	add.w	r0, r3, #24
 80046b0:	4a24      	ldr	r2, [pc, #144]	; (8004744 <OV5640_SetLightMode+0x25c>)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80046b8:	f107 020f 	add.w	r2, r7, #15
 80046bc:	2301      	movs	r3, #1
 80046be:	f000 fec3 	bl	8005448 <ov5640_write_reg>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3301      	adds	r3, #1
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d9dc      	bls.n	8004694 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 80046da:	e027      	b.n	800472c <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e01f      	b.n	8004722 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d018      	beq.n	800471c <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80046ea:	4a17      	ldr	r2, [pc, #92]	; (8004748 <OV5640_SetLightMode+0x260>)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	885b      	ldrh	r3, [r3, #2]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f103 0018 	add.w	r0, r3, #24
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <OV5640_SetLightMode+0x260>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004706:	f107 020f 	add.w	r2, r7, #15
 800470a:	2301      	movs	r3, #1
 800470c:	f000 fe9c 	bl	8005448 <ov5640_write_reg>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3301      	adds	r3, #1
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d9dc      	bls.n	80046e2 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8004728:	e000      	b.n	800472c <OV5640_SetLightMode+0x244>
    }
  }
 800472a:	bf00      	nop
  return ret;
 800472c:	697b      	ldr	r3, [r7, #20]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	0801f3b8 	.word	0x0801f3b8
 800473c:	0801f3d4 	.word	0x0801f3d4
 8004740:	0801f3f0 	.word	0x0801f3f0
 8004744:	0801f40c 	.word	0x0801f40c
 8004748:	0801f428 	.word	0x0801f428

0800474c <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	3b01      	subs	r3, #1
 800475a:	2b1f      	cmp	r3, #31
 800475c:	f200 81c0 	bhi.w	8004ae0 <OV5640_SetColorEffect+0x394>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <OV5640_SetColorEffect+0x1c>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	080047e9 	.word	0x080047e9
 800476c:	08004873 	.word	0x08004873
 8004770:	08004ae1 	.word	0x08004ae1
 8004774:	080048fd 	.word	0x080048fd
 8004778:	08004ae1 	.word	0x08004ae1
 800477c:	08004ae1 	.word	0x08004ae1
 8004780:	08004ae1 	.word	0x08004ae1
 8004784:	08004987 	.word	0x08004987
 8004788:	08004ae1 	.word	0x08004ae1
 800478c:	08004ae1 	.word	0x08004ae1
 8004790:	08004ae1 	.word	0x08004ae1
 8004794:	08004ae1 	.word	0x08004ae1
 8004798:	08004ae1 	.word	0x08004ae1
 800479c:	08004ae1 	.word	0x08004ae1
 80047a0:	08004ae1 	.word	0x08004ae1
 80047a4:	08004a11 	.word	0x08004a11
 80047a8:	08004ae1 	.word	0x08004ae1
 80047ac:	08004ae1 	.word	0x08004ae1
 80047b0:	08004ae1 	.word	0x08004ae1
 80047b4:	08004ae1 	.word	0x08004ae1
 80047b8:	08004ae1 	.word	0x08004ae1
 80047bc:	08004ae1 	.word	0x08004ae1
 80047c0:	08004ae1 	.word	0x08004ae1
 80047c4:	08004ae1 	.word	0x08004ae1
 80047c8:	08004ae1 	.word	0x08004ae1
 80047cc:	08004ae1 	.word	0x08004ae1
 80047d0:	08004ae1 	.word	0x08004ae1
 80047d4:	08004ae1 	.word	0x08004ae1
 80047d8:	08004ae1 	.word	0x08004ae1
 80047dc:	08004ae1 	.word	0x08004ae1
 80047e0:	08004ae1 	.word	0x08004ae1
 80047e4:	08004a99 	.word	0x08004a99
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 80047e8:	23ff      	movs	r3, #255	; 0xff
 80047ea:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0018 	add.w	r0, r3, #24
 80047f2:	f107 020b 	add.w	r2, r7, #11
 80047f6:	2301      	movs	r3, #1
 80047f8:	f245 0101 	movw	r1, #20481	; 0x5001
 80047fc:	f000 fe24 	bl	8005448 <ov5640_write_reg>
 8004800:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10c      	bne.n	8004822 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8004808:	2318      	movs	r3, #24
 800480a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f103 0018 	add.w	r0, r3, #24
 8004812:	f107 020b 	add.w	r2, r7, #11
 8004816:	2301      	movs	r3, #1
 8004818:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800481c:	f000 fe14 	bl	8005448 <ov5640_write_reg>
 8004820:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10c      	bne.n	8004842 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8004828:	23a0      	movs	r3, #160	; 0xa0
 800482a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f103 0018 	add.w	r0, r3, #24
 8004832:	f107 020b 	add.w	r2, r7, #11
 8004836:	2301      	movs	r3, #1
 8004838:	f245 5183 	movw	r1, #21891	; 0x5583
 800483c:	f000 fe04 	bl	8005448 <ov5640_write_reg>
 8004840:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10c      	bne.n	8004862 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8004848:	2340      	movs	r3, #64	; 0x40
 800484a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f103 0018 	add.w	r0, r3, #24
 8004852:	f107 020b 	add.w	r2, r7, #11
 8004856:	2301      	movs	r3, #1
 8004858:	f245 5184 	movw	r1, #21892	; 0x5584
 800485c:	f000 fdf4 	bl	8005448 <ov5640_write_reg>
 8004860:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 815f 	beq.w	8004b28 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 800486a:	f04f 33ff 	mov.w	r3, #4294967295
 800486e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004870:	e15a      	b.n	8004b28 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8004872:	23ff      	movs	r3, #255	; 0xff
 8004874:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f103 0018 	add.w	r0, r3, #24
 800487c:	f107 020b 	add.w	r2, r7, #11
 8004880:	2301      	movs	r3, #1
 8004882:	f245 0101 	movw	r1, #20481	; 0x5001
 8004886:	f000 fddf 	bl	8005448 <ov5640_write_reg>
 800488a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8004892:	2318      	movs	r3, #24
 8004894:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f103 0018 	add.w	r0, r3, #24
 800489c:	f107 020b 	add.w	r2, r7, #11
 80048a0:	2301      	movs	r3, #1
 80048a2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80048a6:	f000 fdcf 	bl	8005448 <ov5640_write_reg>
 80048aa:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 0018 	add.w	r0, r3, #24
 80048bc:	f107 020b 	add.w	r2, r7, #11
 80048c0:	2301      	movs	r3, #1
 80048c2:	f245 5183 	movw	r1, #21891	; 0x5583
 80048c6:	f000 fdbf 	bl	8005448 <ov5640_write_reg>
 80048ca:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80048d2:	23c0      	movs	r3, #192	; 0xc0
 80048d4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f103 0018 	add.w	r0, r3, #24
 80048dc:	f107 020b 	add.w	r2, r7, #11
 80048e0:	2301      	movs	r3, #1
 80048e2:	f245 5184 	movw	r1, #21892	; 0x5584
 80048e6:	f000 fdaf 	bl	8005448 <ov5640_write_reg>
 80048ea:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 811c 	beq.w	8004b2c <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80048fa:	e117      	b.n	8004b2c <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 80048fc:	23ff      	movs	r3, #255	; 0xff
 80048fe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0018 	add.w	r0, r3, #24
 8004906:	f107 020b 	add.w	r2, r7, #11
 800490a:	2301      	movs	r3, #1
 800490c:	f245 0101 	movw	r1, #20481	; 0x5001
 8004910:	f000 fd9a 	bl	8005448 <ov5640_write_reg>
 8004914:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10c      	bne.n	8004936 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 800491c:	2318      	movs	r3, #24
 800491e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f103 0018 	add.w	r0, r3, #24
 8004926:	f107 020b 	add.w	r2, r7, #11
 800492a:	2301      	movs	r3, #1
 800492c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004930:	f000 fd8a 	bl	8005448 <ov5640_write_reg>
 8004934:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10c      	bne.n	8004956 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 800493c:	2360      	movs	r3, #96	; 0x60
 800493e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f103 0018 	add.w	r0, r3, #24
 8004946:	f107 020b 	add.w	r2, r7, #11
 800494a:	2301      	movs	r3, #1
 800494c:	f245 5183 	movw	r1, #21891	; 0x5583
 8004950:	f000 fd7a 	bl	8005448 <ov5640_write_reg>
 8004954:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10c      	bne.n	8004976 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 800495c:	2360      	movs	r3, #96	; 0x60
 800495e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f103 0018 	add.w	r0, r3, #24
 8004966:	f107 020b 	add.w	r2, r7, #11
 800496a:	2301      	movs	r3, #1
 800496c:	f245 5184 	movw	r1, #21892	; 0x5584
 8004970:	f000 fd6a 	bl	8005448 <ov5640_write_reg>
 8004974:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80d9 	beq.w	8004b30 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004984:	e0d4      	b.n	8004b30 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8004986:	23ff      	movs	r3, #255	; 0xff
 8004988:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f103 0018 	add.w	r0, r3, #24
 8004990:	f107 020b 	add.w	r2, r7, #11
 8004994:	2301      	movs	r3, #1
 8004996:	f245 0101 	movw	r1, #20481	; 0x5001
 800499a:	f000 fd55 	bl	8005448 <ov5640_write_reg>
 800499e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10c      	bne.n	80049c0 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80049a6:	2318      	movs	r3, #24
 80049a8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f103 0018 	add.w	r0, r3, #24
 80049b0:	f107 020b 	add.w	r2, r7, #11
 80049b4:	2301      	movs	r3, #1
 80049b6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80049ba:	f000 fd45 	bl	8005448 <ov5640_write_reg>
 80049be:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f103 0018 	add.w	r0, r3, #24
 80049d0:	f107 020b 	add.w	r2, r7, #11
 80049d4:	2301      	movs	r3, #1
 80049d6:	f245 5183 	movw	r1, #21891	; 0x5583
 80049da:	f000 fd35 	bl	8005448 <ov5640_write_reg>
 80049de:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f103 0018 	add.w	r0, r3, #24
 80049f0:	f107 020b 	add.w	r2, r7, #11
 80049f4:	2301      	movs	r3, #1
 80049f6:	f245 5184 	movw	r1, #21892	; 0x5584
 80049fa:	f000 fd25 	bl	8005448 <ov5640_write_reg>
 80049fe:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8096 	beq.w	8004b34 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004a0e:	e091      	b.n	8004b34 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8004a10:	23ff      	movs	r3, #255	; 0xff
 8004a12:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f103 0018 	add.w	r0, r3, #24
 8004a1a:	f107 020b 	add.w	r2, r7, #11
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f245 0101 	movw	r1, #20481	; 0x5001
 8004a24:	f000 fd10 	bl	8005448 <ov5640_write_reg>
 8004a28:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10c      	bne.n	8004a4a <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8004a30:	2318      	movs	r3, #24
 8004a32:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f103 0018 	add.w	r0, r3, #24
 8004a3a:	f107 020b 	add.w	r2, r7, #11
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004a44:	f000 fd00 	bl	8005448 <ov5640_write_reg>
 8004a48:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10c      	bne.n	8004a6a <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f103 0018 	add.w	r0, r3, #24
 8004a5a:	f107 020b 	add.w	r2, r7, #11
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f245 5183 	movw	r1, #21891	; 0x5583
 8004a64:	f000 fcf0 	bl	8005448 <ov5640_write_reg>
 8004a68:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10c      	bne.n	8004a8a <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8004a70:	23a0      	movs	r3, #160	; 0xa0
 8004a72:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f103 0018 	add.w	r0, r3, #24
 8004a7a:	f107 020b 	add.w	r2, r7, #11
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f245 5184 	movw	r1, #21892	; 0x5584
 8004a84:	f000 fce0 	bl	8005448 <ov5640_write_reg>
 8004a88:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d053      	beq.n	8004b38 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004a96:	e04f      	b.n	8004b38 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8004a98:	23ff      	movs	r3, #255	; 0xff
 8004a9a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f103 0018 	add.w	r0, r3, #24
 8004aa2:	f107 020b 	add.w	r2, r7, #11
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f245 0101 	movw	r1, #20481	; 0x5001
 8004aac:	f000 fccc 	bl	8005448 <ov5640_write_reg>
 8004ab0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10c      	bne.n	8004ad2 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f103 0018 	add.w	r0, r3, #24
 8004ac2:	f107 020b 	add.w	r2, r7, #11
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004acc:	f000 fcbc 	bl	8005448 <ov5640_write_reg>
 8004ad0:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d031      	beq.n	8004b3c <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004ade:	e02d      	b.n	8004b3c <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8004ae0:	237f      	movs	r3, #127	; 0x7f
 8004ae2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f103 0018 	add.w	r0, r3, #24
 8004aea:	f107 020b 	add.w	r2, r7, #11
 8004aee:	2301      	movs	r3, #1
 8004af0:	f245 0101 	movw	r1, #20481	; 0x5001
 8004af4:	f000 fca8 	bl	8005448 <ov5640_write_reg>
 8004af8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10c      	bne.n	8004b1a <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8004b00:	2300      	movs	r3, #0
 8004b02:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f103 0018 	add.w	r0, r3, #24
 8004b0a:	f107 020b 	add.w	r2, r7, #11
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004b14:	f000 fc98 	bl	8005448 <ov5640_write_reg>
 8004b18:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00f      	beq.n	8004b40 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	60fb      	str	r3, [r7, #12]
      }

      break;
 8004b26:	e00b      	b.n	8004b40 <OV5640_SetColorEffect+0x3f4>
      break;
 8004b28:	bf00      	nop
 8004b2a:	e00a      	b.n	8004b42 <OV5640_SetColorEffect+0x3f6>
      break;
 8004b2c:	bf00      	nop
 8004b2e:	e008      	b.n	8004b42 <OV5640_SetColorEffect+0x3f6>
      break;
 8004b30:	bf00      	nop
 8004b32:	e006      	b.n	8004b42 <OV5640_SetColorEffect+0x3f6>
      break;
 8004b34:	bf00      	nop
 8004b36:	e004      	b.n	8004b42 <OV5640_SetColorEffect+0x3f6>
      break;
 8004b38:	bf00      	nop
 8004b3a:	e002      	b.n	8004b42 <OV5640_SetColorEffect+0x3f6>
      break;
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <OV5640_SetColorEffect+0x3f6>
      break;
 8004b40:	bf00      	nop
  }

  return ret;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8004b56:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <OV5640_SetBrightness+0xdc>)
 8004b58:	f107 0310 	add.w	r3, r7, #16
 8004b5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b5e:	c303      	stmia	r3!, {r0, r1}
 8004b60:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8004b62:	23ff      	movs	r3, #255	; 0xff
 8004b64:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f103 0018 	add.w	r0, r3, #24
 8004b6c:	f107 020f 	add.w	r2, r7, #15
 8004b70:	2301      	movs	r3, #1
 8004b72:	f245 0101 	movw	r1, #20481	; 0x5001
 8004b76:	f000 fc67 	bl	8005448 <ov5640_write_reg>
 8004b7a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d111      	bne.n	8004ba6 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	3304      	adds	r3, #4
 8004b86:	3320      	adds	r3, #32
 8004b88:	443b      	add	r3, r7
 8004b8a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004b8e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f103 0018 	add.w	r0, r3, #24
 8004b96:	f107 020f 	add.w	r2, r7, #15
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f245 5187 	movw	r1, #21895	; 0x5587
 8004ba0:	f000 fc52 	bl	8005448 <ov5640_write_reg>
 8004ba4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10c      	bne.n	8004bc6 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8004bac:	2304      	movs	r3, #4
 8004bae:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 0018 	add.w	r0, r3, #24
 8004bb6:	f107 020f 	add.w	r2, r7, #15
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004bc0:	f000 fc42 	bl	8005448 <ov5640_write_reg>
 8004bc4:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d127      	bne.n	8004c1c <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da12      	bge.n	8004bf8 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f103 0018 	add.w	r0, r3, #24
 8004bdc:	f107 020f 	add.w	r2, r7, #15
 8004be0:	2301      	movs	r3, #1
 8004be2:	f245 5188 	movw	r1, #21896	; 0x5588
 8004be6:	f000 fc2f 	bl	8005448 <ov5640_write_reg>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e011      	b.n	8004c1c <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8004bf8:	2309      	movs	r3, #9
 8004bfa:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f103 0018 	add.w	r0, r3, #24
 8004c02:	f107 020f 	add.w	r2, r7, #15
 8004c06:	2301      	movs	r3, #1
 8004c08:	f245 5188 	movw	r1, #21896	; 0x5588
 8004c0c:	f000 fc1c 	bl	8005448 <ov5640_write_reg>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	0801edf0 	.word	0x0801edf0

08004c2c <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8004c36:	4a30      	ldr	r2, [pc, #192]	; (8004cf8 <OV5640_SetSaturation+0xcc>)
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c3e:	c303      	stmia	r3!, {r0, r1}
 8004c40:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8004c42:	23ff      	movs	r3, #255	; 0xff
 8004c44:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f103 0018 	add.w	r0, r3, #24
 8004c4c:	f107 020f 	add.w	r2, r7, #15
 8004c50:	2301      	movs	r3, #1
 8004c52:	f245 0101 	movw	r1, #20481	; 0x5001
 8004c56:	f000 fbf7 	bl	8005448 <ov5640_write_reg>
 8004c5a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d111      	bne.n	8004c86 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	3304      	adds	r3, #4
 8004c66:	3320      	adds	r3, #32
 8004c68:	443b      	add	r3, r7
 8004c6a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004c6e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 0018 	add.w	r0, r3, #24
 8004c76:	f107 020f 	add.w	r2, r7, #15
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f245 5183 	movw	r1, #21891	; 0x5583
 8004c80:	f000 fbe2 	bl	8005448 <ov5640_write_reg>
 8004c84:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f103 0018 	add.w	r0, r3, #24
 8004c92:	f107 020f 	add.w	r2, r7, #15
 8004c96:	2301      	movs	r3, #1
 8004c98:	f245 5184 	movw	r1, #21892	; 0x5584
 8004c9c:	f000 fbd4 	bl	8005448 <ov5640_write_reg>
 8004ca0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10c      	bne.n	8004cc2 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f103 0018 	add.w	r0, r3, #24
 8004cb2:	f107 020f 	add.w	r2, r7, #15
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004cbc:	f000 fbc4 	bl	8005448 <ov5640_write_reg>
 8004cc0:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10c      	bne.n	8004ce2 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8004cc8:	2341      	movs	r3, #65	; 0x41
 8004cca:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0018 	add.w	r0, r3, #24
 8004cd2:	f107 020f 	add.w	r2, r7, #15
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f245 5188 	movw	r1, #21896	; 0x5588
 8004cdc:	f000 fbb4 	bl	8005448 <ov5640_write_reg>
 8004ce0:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8004cee:	69fb      	ldr	r3, [r7, #28]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	0801edfc 	.word	0x0801edfc

08004cfc <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8004d06:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <OV5640_SetContrast+0xcc>)
 8004d08:	f107 0310 	add.w	r3, r7, #16
 8004d0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d0e:	c303      	stmia	r3!, {r0, r1}
 8004d10:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8004d12:	23ff      	movs	r3, #255	; 0xff
 8004d14:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f103 0018 	add.w	r0, r3, #24
 8004d1c:	f107 020f 	add.w	r2, r7, #15
 8004d20:	2301      	movs	r3, #1
 8004d22:	f245 0101 	movw	r1, #20481	; 0x5001
 8004d26:	f000 fb8f 	bl	8005448 <ov5640_write_reg>
 8004d2a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10c      	bne.n	8004d4c <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8004d32:	2304      	movs	r3, #4
 8004d34:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f103 0018 	add.w	r0, r3, #24
 8004d3c:	f107 020f 	add.w	r2, r7, #15
 8004d40:	2301      	movs	r3, #1
 8004d42:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004d46:	f000 fb7f 	bl	8005448 <ov5640_write_reg>
 8004d4a:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d111      	bne.n	8004d76 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	3304      	adds	r3, #4
 8004d56:	3320      	adds	r3, #32
 8004d58:	443b      	add	r3, r7
 8004d5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004d5e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f103 0018 	add.w	r0, r3, #24
 8004d66:	f107 020f 	add.w	r2, r7, #15
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f245 5186 	movw	r1, #21894	; 0x5586
 8004d70:	f000 fb6a 	bl	8005448 <ov5640_write_reg>
 8004d74:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f103 0018 	add.w	r0, r3, #24
 8004d82:	f107 020f 	add.w	r2, r7, #15
 8004d86:	2301      	movs	r3, #1
 8004d88:	f245 5185 	movw	r1, #21893	; 0x5585
 8004d8c:	f000 fb5c 	bl	8005448 <ov5640_write_reg>
 8004d90:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10c      	bne.n	8004db2 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8004d98:	2341      	movs	r3, #65	; 0x41
 8004d9a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f103 0018 	add.w	r0, r3, #24
 8004da2:	f107 020f 	add.w	r2, r7, #15
 8004da6:	2301      	movs	r3, #1
 8004da8:	f245 5188 	movw	r1, #21896	; 0x5588
 8004dac:	f000 fb4c 	bl	8005448 <ov5640_write_reg>
 8004db0:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8004db8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbc:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	0801ee08 	.word	0x0801ee08

08004dcc <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08e      	sub	sp, #56	; 0x38
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <OV5640_SetHueDegree+0xfc>)
 8004dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8004de2:	4a3a      	ldr	r2, [pc, #232]	; (8004ecc <OV5640_SetHueDegree+0x100>)
 8004de4:	f107 031c 	add.w	r3, r7, #28
 8004de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8004dee:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <OV5640_SetHueDegree+0x104>)
 8004df0:	f107 0310 	add.w	r3, r7, #16
 8004df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8004dfa:	23ff      	movs	r3, #255	; 0xff
 8004dfc:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f103 0018 	add.w	r0, r3, #24
 8004e04:	f107 020f 	add.w	r2, r7, #15
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f245 0101 	movw	r1, #20481	; 0x5001
 8004e0e:	f000 fb1b 	bl	8005448 <ov5640_write_reg>
 8004e12:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10c      	bne.n	8004e34 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f103 0018 	add.w	r0, r3, #24
 8004e24:	f107 020f 	add.w	r2, r7, #15
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004e2e:	f000 fb0b 	bl	8005448 <ov5640_write_reg>
 8004e32:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d111      	bne.n	8004e5e <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	3306      	adds	r3, #6
 8004e3e:	3338      	adds	r3, #56	; 0x38
 8004e40:	443b      	add	r3, r7
 8004e42:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004e46:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f103 0018 	add.w	r0, r3, #24
 8004e4e:	f107 020f 	add.w	r2, r7, #15
 8004e52:	2301      	movs	r3, #1
 8004e54:	f245 5181 	movw	r1, #21889	; 0x5581
 8004e58:	f000 faf6 	bl	8005448 <ov5640_write_reg>
 8004e5c:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d111      	bne.n	8004e88 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	3306      	adds	r3, #6
 8004e68:	3338      	adds	r3, #56	; 0x38
 8004e6a:	443b      	add	r3, r7
 8004e6c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004e70:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f103 0018 	add.w	r0, r3, #24
 8004e78:	f107 020f 	add.w	r2, r7, #15
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f245 5182 	movw	r1, #21890	; 0x5582
 8004e82:	f000 fae1 	bl	8005448 <ov5640_write_reg>
 8004e86:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d111      	bne.n	8004eb2 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	3306      	adds	r3, #6
 8004e92:	3338      	adds	r3, #56	; 0x38
 8004e94:	443b      	add	r3, r7
 8004e96:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e9a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f103 0018 	add.w	r0, r3, #24
 8004ea2:	f107 020f 	add.w	r2, r7, #15
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f245 5188 	movw	r1, #21896	; 0x5588
 8004eac:	f000 facc 	bl	8005448 <ov5640_write_reg>
 8004eb0:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3738      	adds	r7, #56	; 0x38
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	0801ee14 	.word	0x0801ee14
 8004ecc:	0801ee20 	.word	0x0801ee20
 8004ed0:	0801ee2c 	.word	0x0801ee2c

08004ed4 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f103 0018 	add.w	r0, r3, #24
 8004ee8:	f107 020b 	add.w	r2, r7, #11
 8004eec:	2301      	movs	r3, #1
 8004eee:	f643 0120 	movw	r1, #14368	; 0x3820
 8004ef2:	f000 fa92 	bl	800541a <ov5640_read_reg>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e0cb      	b.n	800509c <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8004f04:	7afb      	ldrb	r3, [r7, #11]
 8004f06:	f023 0306 	bic.w	r3, r3, #6
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f103 0018 	add.w	r0, r3, #24
 8004f14:	f107 020a 	add.w	r2, r7, #10
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f643 0121 	movw	r1, #14369	; 0x3821
 8004f1e:	f000 fa7c 	bl	800541a <ov5640_read_reg>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e0b5      	b.n	800509c <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8004f34:	7abb      	ldrb	r3, [r7, #10]
 8004f36:	f023 0306 	bic.w	r3, r3, #6
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d056      	beq.n	8004ff2 <OV5640_MirrorFlipConfig+0x11e>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d87f      	bhi.n	800504a <OV5640_MirrorFlipConfig+0x176>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d029      	beq.n	8004fa4 <OV5640_MirrorFlipConfig+0xd0>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d179      	bne.n	800504a <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f103 0018 	add.w	r0, r3, #24
 8004f5c:	f107 020b 	add.w	r2, r7, #11
 8004f60:	2301      	movs	r3, #1
 8004f62:	f643 0120 	movw	r1, #14368	; 0x3820
 8004f66:	f000 fa6f 	bl	8005448 <ov5640_write_reg>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295
 8004f74:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8004f76:	e08a      	b.n	800508e <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8004f78:	7abb      	ldrb	r3, [r7, #10]
 8004f7a:	f043 0306 	orr.w	r3, r3, #6
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f103 0018 	add.w	r0, r3, #24
 8004f88:	f107 020a 	add.w	r2, r7, #10
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f643 0121 	movw	r1, #14369	; 0x3821
 8004f92:	f000 fa59 	bl	8005448 <ov5640_write_reg>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d078      	beq.n	800508e <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	60fb      	str	r3, [r7, #12]
          break;
 8004fa2:	e074      	b.n	800508e <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8004fa4:	7afb      	ldrb	r3, [r7, #11]
 8004fa6:	f043 0306 	orr.w	r3, r3, #6
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f103 0018 	add.w	r0, r3, #24
 8004fb4:	f107 020b 	add.w	r2, r7, #11
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f643 0120 	movw	r1, #14368	; 0x3820
 8004fbe:	f000 fa43 	bl	8005448 <ov5640_write_reg>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8004fce:	e060      	b.n	8005092 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f103 0018 	add.w	r0, r3, #24
 8004fd6:	f107 020a 	add.w	r2, r7, #10
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f643 0121 	movw	r1, #14369	; 0x3821
 8004fe0:	f000 fa32 	bl	8005448 <ov5640_write_reg>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d053      	beq.n	8005092 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	60fb      	str	r3, [r7, #12]
          break;
 8004ff0:	e04f      	b.n	8005092 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	f043 0306 	orr.w	r3, r3, #6
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f103 0018 	add.w	r0, r3, #24
 8005002:	f107 020b 	add.w	r2, r7, #11
 8005006:	2301      	movs	r3, #1
 8005008:	f643 0120 	movw	r1, #14368	; 0x3820
 800500c:	f000 fa1c 	bl	8005448 <ov5640_write_reg>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800501c:	e03b      	b.n	8005096 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 800501e:	7abb      	ldrb	r3, [r7, #10]
 8005020:	f043 0306 	orr.w	r3, r3, #6
 8005024:	b2db      	uxtb	r3, r3
 8005026:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f103 0018 	add.w	r0, r3, #24
 800502e:	f107 020a 	add.w	r2, r7, #10
 8005032:	2301      	movs	r3, #1
 8005034:	f643 0121 	movw	r1, #14369	; 0x3821
 8005038:	f000 fa06 	bl	8005448 <ov5640_write_reg>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d029      	beq.n	8005096 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295
 8005046:	60fb      	str	r3, [r7, #12]
          break;
 8005048:	e025      	b.n	8005096 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f103 0018 	add.w	r0, r3, #24
 8005050:	f107 020b 	add.w	r2, r7, #11
 8005054:	2301      	movs	r3, #1
 8005056:	f643 0120 	movw	r1, #14368	; 0x3820
 800505a:	f000 f9f5 	bl	8005448 <ov5640_write_reg>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800506a:	e016      	b.n	800509a <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0018 	add.w	r0, r3, #24
 8005072:	f107 020a 	add.w	r2, r7, #10
 8005076:	2301      	movs	r3, #1
 8005078:	f643 0121 	movw	r1, #14369	; 0x3821
 800507c:	f000 f9e4 	bl	8005448 <ov5640_write_reg>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	60fb      	str	r3, [r7, #12]
          break;
 800508c:	e005      	b.n	800509a <OV5640_MirrorFlipConfig+0x1c6>
          break;
 800508e:	bf00      	nop
 8005090:	e004      	b.n	800509c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800509a:	bf00      	nop
      }
    }
  }

  return ret;
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80050b4:	f107 030c 	add.w	r3, r7, #12
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff f8a2 	bl	8004204 <OV5640_GetResolution>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e04e      	b.n	800516c <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b44      	cmp	r3, #68	; 0x44
 80050d6:	d112      	bne.n	80050fe <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 80050d8:	2310      	movs	r3, #16
 80050da:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f103 0018 	add.w	r0, r3, #24
 80050e2:	f107 020b 	add.w	r2, r7, #11
 80050e6:	2301      	movs	r3, #1
 80050e8:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80050ec:	f000 f9ac 	bl	8005448 <ov5640_write_reg>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d03a      	beq.n	800516c <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e036      	b.n	800516c <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d802      	bhi.n	800510a <OV5640_ZoomConfig+0x64>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8005108:	e00a      	b.n	8005120 <OV5640_ZoomConfig+0x7a>
      switch (res)
 800510a:	2b03      	cmp	r3, #3
 800510c:	d004      	beq.n	8005118 <OV5640_ZoomConfig+0x72>
          break;
 800510e:	e007      	b.n	8005120 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	613b      	str	r3, [r7, #16]
          break;
 8005116:	e003      	b.n	8005120 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	613b      	str	r3, [r7, #16]
          break;
 800511e:	bf00      	nop
      }

      tmp = 0x00;
 8005120:	2300      	movs	r3, #0
 8005122:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f103 0018 	add.w	r0, r3, #24
 800512a:	f107 020b 	add.w	r2, r7, #11
 800512e:	2301      	movs	r3, #1
 8005130:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8005134:	f000 f988 	bl	8005448 <ov5640_write_reg>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e012      	b.n	800516c <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f103 0018 	add.w	r0, r3, #24
 8005152:	f107 020b 	add.w	r2, r7, #11
 8005156:	2301      	movs	r3, #1
 8005158:	f245 6101 	movw	r1, #22017	; 0x5601
 800515c:	f000 f974 	bl	8005448 <ov5640_write_reg>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8005166:	f04f 33ff 	mov.w	r3, #4294967295
 800516a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 800516c:	697b      	ldr	r3, [r7, #20]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	f040 80ce 	bne.w	8005328 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f103 0018 	add.w	r0, r3, #24
 8005192:	f107 020b 	add.w	r2, r7, #11
 8005196:	2301      	movs	r3, #1
 8005198:	f243 0138 	movw	r1, #12344	; 0x3038
 800519c:	f000 f954 	bl	8005448 <ov5640_write_reg>
 80051a0:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f103 0018 	add.w	r0, r3, #24
 80051ae:	f107 020b 	add.w	r2, r7, #11
 80051b2:	2301      	movs	r3, #1
 80051b4:	f243 0139 	movw	r1, #12345	; 0x3039
 80051b8:	f000 f946 	bl	8005448 <ov5640_write_reg>
 80051bc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10c      	bne.n	80051de <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 80051c4:	237c      	movs	r3, #124	; 0x7c
 80051c6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f103 0018 	add.w	r0, r3, #24
 80051ce:	f107 020b 	add.w	r2, r7, #11
 80051d2:	2301      	movs	r3, #1
 80051d4:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80051d8:	f000 f936 	bl	8005448 <ov5640_write_reg>
 80051dc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10c      	bne.n	80051fe <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 80051e4:	2301      	movs	r3, #1
 80051e6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f103 0018 	add.w	r0, r3, #24
 80051ee:	f107 020b 	add.w	r2, r7, #11
 80051f2:	2301      	movs	r3, #1
 80051f4:	f643 2108 	movw	r1, #14856	; 0x3a08
 80051f8:	f000 f926 	bl	8005448 <ov5640_write_reg>
 80051fc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10c      	bne.n	800521e <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8005204:	2327      	movs	r3, #39	; 0x27
 8005206:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f103 0018 	add.w	r0, r3, #24
 800520e:	f107 020b 	add.w	r2, r7, #11
 8005212:	2301      	movs	r3, #1
 8005214:	f643 2109 	movw	r1, #14857	; 0x3a09
 8005218:	f000 f916 	bl	8005448 <ov5640_write_reg>
 800521c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10c      	bne.n	800523e <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8005224:	2300      	movs	r3, #0
 8005226:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 0018 	add.w	r0, r3, #24
 800522e:	f107 020b 	add.w	r2, r7, #11
 8005232:	2301      	movs	r3, #1
 8005234:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8005238:	f000 f906 	bl	8005448 <ov5640_write_reg>
 800523c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10c      	bne.n	800525e <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8005244:	23f6      	movs	r3, #246	; 0xf6
 8005246:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f103 0018 	add.w	r0, r3, #24
 800524e:	f107 020b 	add.w	r2, r7, #11
 8005252:	2301      	movs	r3, #1
 8005254:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8005258:	f000 f8f6 	bl	8005448 <ov5640_write_reg>
 800525c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10c      	bne.n	800527e <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8005264:	2304      	movs	r3, #4
 8005266:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f103 0018 	add.w	r0, r3, #24
 800526e:	f107 020b 	add.w	r2, r7, #11
 8005272:	2301      	movs	r3, #1
 8005274:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8005278:	f000 f8e6 	bl	8005448 <ov5640_write_reg>
 800527c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f103 0018 	add.w	r0, r3, #24
 800528a:	f107 020b 	add.w	r2, r7, #11
 800528e:	2301      	movs	r3, #1
 8005290:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8005294:	f000 f8d8 	bl	8005448 <ov5640_write_reg>
 8005298:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10c      	bne.n	80052ba <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 80052a0:	230b      	movs	r3, #11
 80052a2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f103 0018 	add.w	r0, r3, #24
 80052aa:	f107 020b 	add.w	r2, r7, #11
 80052ae:	2301      	movs	r3, #1
 80052b0:	f643 2102 	movw	r1, #14850	; 0x3a02
 80052b4:	f000 f8c8 	bl	8005448 <ov5640_write_reg>
 80052b8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10c      	bne.n	80052da <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 80052c0:	2388      	movs	r3, #136	; 0x88
 80052c2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f103 0018 	add.w	r0, r3, #24
 80052ca:	f107 020b 	add.w	r2, r7, #11
 80052ce:	2301      	movs	r3, #1
 80052d0:	f643 2103 	movw	r1, #14851	; 0x3a03
 80052d4:	f000 f8b8 	bl	8005448 <ov5640_write_reg>
 80052d8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10c      	bne.n	80052fa <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 80052e0:	230b      	movs	r3, #11
 80052e2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f103 0018 	add.w	r0, r3, #24
 80052ea:	f107 020b 	add.w	r2, r7, #11
 80052ee:	2301      	movs	r3, #1
 80052f0:	f643 2114 	movw	r1, #14868	; 0x3a14
 80052f4:	f000 f8a8 	bl	8005448 <ov5640_write_reg>
 80052f8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10c      	bne.n	800531a <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8005300:	2388      	movs	r3, #136	; 0x88
 8005302:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f103 0018 	add.w	r0, r3, #24
 800530a:	f107 020b 	add.w	r2, r7, #11
 800530e:	2301      	movs	r3, #1
 8005310:	f643 2115 	movw	r1, #14869	; 0x3a15
 8005314:	f000 f898 	bl	8005448 <ov5640_write_reg>
 8005318:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02b      	beq.n	8005378 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e027      	b.n	8005378 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f103 0018 	add.w	r0, r3, #24
 800532e:	f107 020b 	add.w	r2, r7, #11
 8005332:	2301      	movs	r3, #1
 8005334:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8005338:	f000 f86f 	bl	800541a <ov5640_read_reg>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8005342:	f04f 33ff 	mov.w	r3, #4294967295
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e016      	b.n	8005378 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	f023 0304 	bic.w	r3, r3, #4
 8005354:	b2db      	uxtb	r3, r3
 8005356:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f103 0018 	add.w	r0, r3, #24
 800535e:	f107 020b 	add.w	r2, r7, #11
 8005362:	2301      	movs	r3, #1
 8005364:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8005368:	f000 f86e 	bl	8005448 <ov5640_write_reg>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	4798      	blx	r3
 8005392:	4603      	mov	r3, r0
 8005394:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005396:	bf00      	nop
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	4798      	blx	r3
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d8f5      	bhi.n	8005398 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80053b6:	b590      	push	{r4, r7, lr}
 80053b8:	b087      	sub	sp, #28
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	461a      	mov	r2, r3
 80053c2:	460b      	mov	r3, r1
 80053c4:	817b      	strh	r3, [r7, #10]
 80053c6:	4613      	mov	r3, r2
 80053c8:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	691c      	ldr	r4, [r3, #16]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	8918      	ldrh	r0, [r3, #8]
 80053d6:	893b      	ldrh	r3, [r7, #8]
 80053d8:	8979      	ldrh	r1, [r7, #10]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	47a0      	blx	r4
 80053de:	4603      	mov	r3, r0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd90      	pop	{r4, r7, pc}

080053e8 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	461a      	mov	r2, r3
 80053f4:	460b      	mov	r3, r1
 80053f6:	817b      	strh	r3, [r7, #10]
 80053f8:	4613      	mov	r3, r2
 80053fa:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	68dc      	ldr	r4, [r3, #12]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	8918      	ldrh	r0, [r3, #8]
 8005408:	893b      	ldrh	r3, [r7, #8]
 800540a:	8979      	ldrh	r1, [r7, #10]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	47a0      	blx	r4
 8005410:	4603      	mov	r3, r0
}
 8005412:	4618      	mov	r0, r3
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	bd90      	pop	{r4, r7, pc}

0800541a <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800541a:	b590      	push	{r4, r7, lr}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	461a      	mov	r2, r3
 8005426:	460b      	mov	r3, r1
 8005428:	817b      	strh	r3, [r7, #10]
 800542a:	4613      	mov	r3, r2
 800542c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685c      	ldr	r4, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6898      	ldr	r0, [r3, #8]
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	8979      	ldrh	r1, [r7, #10]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	47a0      	blx	r4
 800543e:	4603      	mov	r3, r0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	bd90      	pop	{r4, r7, pc}

08005448 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	461a      	mov	r2, r3
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
 8005458:	4613      	mov	r3, r2
 800545a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681c      	ldr	r4, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6898      	ldr	r0, [r3, #8]
 8005464:	893b      	ldrh	r3, [r7, #8]
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	47a0      	blx	r4
 800546c:	4603      	mov	r3, r0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bd90      	pop	{r4, r7, pc}
	...

08005478 <_Z11postProcessPmPf>:
#include "process.hpp"

void postProcess(uint32_t* buffer, float *predictions){
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]

	std::vector<T_PRED> boxes = nms(predictions);
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f7fc fd09 	bl	8001ea0 <_Z3nmsPf>

	for(uint32_t i = 0; i<boxes.size(); i++){
 800548e:	2300      	movs	r3, #0
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fefe 	bl	8002298 <_ZNKSt6vectorISt5arrayIfLj5EESaIS1_EE4sizeEv>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	4293      	cmp	r3, r2
 80054a2:	bf34      	ite	cc
 80054a4:	2301      	movcc	r3, #1
 80054a6:	2300      	movcs	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d06f      	beq.n	800558e <_Z11postProcessPmPf+0x116>
		float x_start = boxes[i][1]*LTDC_WIDTH_FLOAT;
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fc ff35 	bl	8002324 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEixEj>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2101      	movs	r1, #1
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc fb63 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 80054c4:	4603      	mov	r3, r0
 80054c6:	edd3 7a00 	vldr	s15, [r3]
 80054ca:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80055a0 <_Z11postProcessPmPf+0x128>
 80054ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054d2:	edc7 7a08 	vstr	s15, [r7, #32]
		float x_end = boxes[i][3]*LTDC_WIDTH_FLOAT;
 80054d6:	f107 0308 	add.w	r3, r7, #8
 80054da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fc ff21 	bl	8002324 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEixEj>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2103      	movs	r1, #3
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fc fb4f 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 80054ec:	4603      	mov	r3, r0
 80054ee:	edd3 7a00 	vldr	s15, [r3]
 80054f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80055a0 <_Z11postProcessPmPf+0x128>
 80054f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
		float y_start = boxes[i][2]*LTDC_HEIGHT_FLOAT;
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005504:	4618      	mov	r0, r3
 8005506:	f7fc ff0d 	bl	8002324 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEixEj>
 800550a:	4603      	mov	r3, r0
 800550c:	2102      	movs	r1, #2
 800550e:	4618      	mov	r0, r3
 8005510:	f7fc fb3b 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 8005514:	4603      	mov	r3, r0
 8005516:	edd3 7a00 	vldr	s15, [r3]
 800551a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80055a4 <_Z11postProcessPmPf+0x12c>
 800551e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005522:	edc7 7a06 	vstr	s15, [r7, #24]
		float y_end = boxes[i][4]*LTDC_HEIGHT_FLOAT;
 8005526:	f107 0308 	add.w	r3, r7, #8
 800552a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800552c:	4618      	mov	r0, r3
 800552e:	f7fc fef9 	bl	8002324 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EEixEj>
 8005532:	4603      	mov	r3, r0
 8005534:	2104      	movs	r1, #4
 8005536:	4618      	mov	r0, r3
 8005538:	f7fc fb27 	bl	8001b8a <_ZNSt5arrayIfLj5EEixEj>
 800553c:	4603      	mov	r3, r0
 800553e:	edd3 7a00 	vldr	s15, [r3]
 8005542:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80055a4 <_Z11postProcessPmPf+0x12c>
 8005546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800554a:	edc7 7a05 	vstr	s15, [r7, #20]
		drawRectangle(buffer, (int32_t)x_start, (int32_t)x_end, (int32_t)y_start, (int32_t)y_end);
 800554e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005552:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005556:	edd7 7a07 	vldr	s15, [r7, #28]
 800555a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800555e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005562:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8005566:	edd7 7a05 	vldr	s15, [r7, #20]
 800556a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800556e:	ee17 3a90 	vmov	r3, s15
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	ee16 3a10 	vmov	r3, s12
 8005578:	ee16 2a90 	vmov	r2, s13
 800557c:	ee17 1a10 	vmov	r1, s14
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fb fb71 	bl	8000c68 <drawRectangle>
	for(uint32_t i = 0; i<boxes.size(); i++){
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	3301      	adds	r3, #1
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
 800558c:	e781      	b.n	8005492 <_Z11postProcessPmPf+0x1a>
	std::vector<T_PRED> boxes = nms(predictions);
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f7fc fdf0 	bl	8002178 <_ZNSt6vectorISt5arrayIfLj5EESaIS1_EED1Ev>
	}
}
 8005598:	bf00      	nop
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	43f00000 	.word	0x43f00000
 80055a4:	43880000 	.word	0x43880000

080055a8 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db04      	blt.n	80055c0 <_isatty+0x18>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	dc01      	bgt.n	80055c0 <_isatty+0x18>
    return 1;
 80055bc:	2301      	movs	r3, #1
 80055be:	e005      	b.n	80055cc <_isatty+0x24>

  errno = EBADF;
 80055c0:	f018 fb0a 	bl	801dbd8 <__errno>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2209      	movs	r2, #9
 80055c8:	601a      	str	r2, [r3, #0]
  return 0;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_write>:

int _write(int fd, char* ptr, int len) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d002      	beq.n	80055ec <_write+0x18>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d111      	bne.n	8005610 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80055ec:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <_write+0x54>)
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	f00a fb3e 	bl	800fc7a <HAL_UART_Transmit>
 80055fe:	4603      	mov	r3, r0
 8005600:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8005602:	7dfb      	ldrb	r3, [r7, #23]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <_write+0x38>
      return len;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	e008      	b.n	800561e <_write+0x4a>
    else
      return EIO;
 800560c:	2305      	movs	r3, #5
 800560e:	e006      	b.n	800561e <_write+0x4a>
  }
  errno = EBADF;
 8005610:	f018 fae2 	bl	801dbd8 <__errno>
 8005614:	4603      	mov	r3, r0
 8005616:	2209      	movs	r2, #9
 8005618:	601a      	str	r2, [r3, #0]
  return -1;
 800561a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2402c4b4 	.word	0x2402c4b4

0800562c <_close>:

int _close(int fd) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	db04      	blt.n	8005644 <_close+0x18>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b02      	cmp	r3, #2
 800563e:	dc01      	bgt.n	8005644 <_close+0x18>
    return 0;
 8005640:	2300      	movs	r3, #0
 8005642:	e006      	b.n	8005652 <_close+0x26>

  errno = EBADF;
 8005644:	f018 fac8 	bl	801dbd8 <__errno>
 8005648:	4603      	mov	r3, r0
 800564a:	2209      	movs	r2, #9
 800564c:	601a      	str	r2, [r3, #0]
  return -1;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <_read>:

int _read(int fd, char* ptr, int len) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d110      	bne.n	8005690 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <_read+0x4c>)
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	2201      	movs	r2, #1
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	f00a fb8c 	bl	800fd96 <HAL_UART_Receive>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <_read+0x30>
      return 1;
 8005688:	2301      	movs	r3, #1
 800568a:	e008      	b.n	800569e <_read+0x42>
    else
      return EIO;
 800568c:	2305      	movs	r3, #5
 800568e:	e006      	b.n	800569e <_read+0x42>
  }
  errno = EBADF;
 8005690:	f018 faa2 	bl	801dbd8 <__errno>
 8005694:	4603      	mov	r3, r0
 8005696:	2209      	movs	r2, #9
 8005698:	601a      	str	r2, [r3, #0]
  return -1;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	2402c4b4 	.word	0x2402c4b4

080056ac <_fstat>:

int _fstat(int fd, struct stat* st) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	db08      	blt.n	80056ce <_fstat+0x22>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	dc05      	bgt.n	80056ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056c8:	605a      	str	r2, [r3, #4]
    return 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e005      	b.n	80056da <_fstat+0x2e>
  }

  errno = EBADF;
 80056ce:	f018 fa83 	bl	801dbd8 <__errno>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2209      	movs	r2, #9
 80056d6:	601a      	str	r2, [r3, #0]
  return 0;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80056e8:	4b11      	ldr	r3, [pc, #68]	; (8005730 <MX_RTC_Init+0x4c>)
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <MX_RTC_Init+0x50>)
 80056ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <MX_RTC_Init+0x4c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80056f4:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <MX_RTC_Init+0x4c>)
 80056f6:	227f      	movs	r2, #127	; 0x7f
 80056f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80056fa:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <MX_RTC_Init+0x4c>)
 80056fc:	22ff      	movs	r2, #255	; 0xff
 80056fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <MX_RTC_Init+0x4c>)
 8005702:	2200      	movs	r2, #0
 8005704:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005706:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <MX_RTC_Init+0x4c>)
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <MX_RTC_Init+0x4c>)
 800570e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005712:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <MX_RTC_Init+0x4c>)
 8005716:	2200      	movs	r2, #0
 8005718:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <MX_RTC_Init+0x4c>)
 800571c:	f00a f8a6 	bl	800f86c <HAL_RTC_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8005726:	f7fc f9e3 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	2402c4b8 	.word	0x2402c4b8
 8005734:	58004000 	.word	0x58004000

08005738 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b0b2      	sub	sp, #200	; 0xc8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005740:	f107 0308 	add.w	r3, r7, #8
 8005744:	22c0      	movs	r2, #192	; 0xc0
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f018 faa7 	bl	801dc9c <memset>
  if(rtcHandle->Instance==RTC)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a10      	ldr	r2, [pc, #64]	; (8005794 <HAL_RTC_MspInit+0x5c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d119      	bne.n	800578c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005758:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005768:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800576c:	f107 0308 	add.w	r3, r7, #8
 8005770:	4618      	mov	r0, r3
 8005772:	f008 fa9b 	bl	800dcac <HAL_RCCEx_PeriphCLKConfig>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800577c:	f7fc f9b8 	bl	8001af0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <HAL_RTC_MspInit+0x60>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	4a04      	ldr	r2, [pc, #16]	; (8005798 <HAL_RTC_MspInit+0x60>)
 8005786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800578c:	bf00      	nop
 800578e:	37c8      	adds	r7, #200	; 0xc8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	58004000 	.word	0x58004000
 8005798:	58024400 	.word	0x58024400

0800579c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80057a6:	4b16      	ldr	r3, [pc, #88]	; (8005800 <BSP_I2C4_Init+0x64>)
 80057a8:	4a16      	ldr	r2, [pc, #88]	; (8005804 <BSP_I2C4_Init+0x68>)
 80057aa:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80057ac:	4b16      	ldr	r3, [pc, #88]	; (8005808 <BSP_I2C4_Init+0x6c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11f      	bne.n	80057f4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80057b4:	4b14      	ldr	r3, [pc, #80]	; (8005808 <BSP_I2C4_Init+0x6c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <BSP_I2C4_Init+0x6c>)
 80057bc:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80057be:	4810      	ldr	r0, [pc, #64]	; (8005800 <BSP_I2C4_Init+0x64>)
 80057c0:	f006 fb0e 	bl	800bde0 <HAL_I2C_GetState>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d114      	bne.n	80057f4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80057ca:	480d      	ldr	r0, [pc, #52]	; (8005800 <BSP_I2C4_Init+0x64>)
 80057cc:	f000 fb60 	bl	8005e90 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80057d0:	f008 fa56 	bl	800dc80 <HAL_RCC_GetPCLK2Freq>
 80057d4:	4603      	mov	r3, r0
 80057d6:	490d      	ldr	r1, [pc, #52]	; (800580c <BSP_I2C4_Init+0x70>)
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 f8e3 	bl	80059a4 <I2C_GetTiming>
 80057de:	4603      	mov	r3, r0
 80057e0:	4619      	mov	r1, r3
 80057e2:	4807      	ldr	r0, [pc, #28]	; (8005800 <BSP_I2C4_Init+0x64>)
 80057e4:	f000 f838 	bl	8005858 <MX_I2C4_Init>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80057ee:	f06f 0307 	mvn.w	r3, #7
 80057f2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80057f4:	687b      	ldr	r3, [r7, #4]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2402cee8 	.word	0x2402cee8
 8005804:	58001c00 	.word	0x58001c00
 8005808:	2402c4e0 	.word	0x2402c4e0
 800580c:	000186a0 	.word	0x000186a0

08005810 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8005816:	2300      	movs	r3, #0
 8005818:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <BSP_I2C4_DeInit+0x40>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3b01      	subs	r3, #1
 8005820:	4a0b      	ldr	r2, [pc, #44]	; (8005850 <BSP_I2C4_DeInit+0x40>)
 8005822:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <BSP_I2C4_DeInit+0x40>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800582c:	4809      	ldr	r0, [pc, #36]	; (8005854 <BSP_I2C4_DeInit+0x44>)
 800582e:	f000 fb9b 	bl	8005f68 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005832:	4808      	ldr	r0, [pc, #32]	; (8005854 <BSP_I2C4_DeInit+0x44>)
 8005834:	f006 f862 	bl	800b8fc <HAL_I2C_DeInit>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800583e:	f06f 0307 	mvn.w	r3, #7
 8005842:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8005844:	687b      	ldr	r3, [r7, #4]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	2402c4e0 	.word	0x2402c4e0
 8005854:	2402cee8 	.word	0x2402cee8

08005858 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f005 ffa0 	bl	800b7dc <HAL_I2C_Init>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
 80058a6:	e014      	b.n	80058d2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f006 fd68 	bl	800c384 <HAL_I2CEx_ConfigAnalogFilter>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
 80058be:	e008      	b.n	80058d2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80058c0:	2100      	movs	r1, #0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f006 fda9 	bl	800c41a <HAL_I2CEx_ConfigDigitalFilter>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60ba      	str	r2, [r7, #8]
 80058e4:	461a      	mov	r2, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	81fb      	strh	r3, [r7, #14]
 80058ea:	460b      	mov	r3, r1
 80058ec:	81bb      	strh	r3, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80058f2:	89b9      	ldrh	r1, [r7, #12]
 80058f4:	89f8      	ldrh	r0, [r7, #14]
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f000 fb57 	bl	8005fb0 <I2C4_WriteReg>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e00c      	b.n	8005928 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800590e:	4809      	ldr	r0, [pc, #36]	; (8005934 <BSP_I2C4_WriteReg16+0x58>)
 8005910:	f006 fa74 	bl	800bdfc <HAL_I2C_GetError>
 8005914:	4603      	mov	r3, r0
 8005916:	2b04      	cmp	r3, #4
 8005918:	d103      	bne.n	8005922 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800591a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e002      	b.n	8005928 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005922:	f06f 0303 	mvn.w	r3, #3
 8005926:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8005928:	697b      	ldr	r3, [r7, #20]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2402cee8 	.word	0x2402cee8

08005938 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8
 800593e:	60ba      	str	r2, [r7, #8]
 8005940:	461a      	mov	r2, r3
 8005942:	4603      	mov	r3, r0
 8005944:	81fb      	strh	r3, [r7, #14]
 8005946:	460b      	mov	r3, r1
 8005948:	81bb      	strh	r3, [r7, #12]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800594e:	89b9      	ldrh	r1, [r7, #12]
 8005950:	89f8      	ldrh	r0, [r7, #14]
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2202      	movs	r2, #2
 800595a:	f000 fb4f 	bl	8005ffc <I2C4_ReadReg>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e00c      	b.n	8005984 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800596a:	4809      	ldr	r0, [pc, #36]	; (8005990 <BSP_I2C4_ReadReg16+0x58>)
 800596c:	f006 fa46 	bl	800bdfc <HAL_I2C_GetError>
 8005970:	4603      	mov	r3, r0
 8005972:	2b04      	cmp	r3, #4
 8005974:	d103      	bne.n	800597e <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005976:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e002      	b.n	8005984 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800597e:	f06f 0303 	mvn.w	r3, #3
 8005982:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8005984:	697b      	ldr	r3, [r7, #20]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	2402cee8 	.word	0x2402cee8

08005994 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8005998:	f000 ffc6 	bl	8006928 <HAL_GetTick>
 800599c:	4603      	mov	r3, r0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d06b      	beq.n	8005a90 <I2C_GetTiming+0xec>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d068      	beq.n	8005a90 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e060      	b.n	8005a86 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80059c4:	4a35      	ldr	r2, [pc, #212]	; (8005a9c <I2C_GetTiming+0xf8>)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	212c      	movs	r1, #44	; 0x2c
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	3304      	adds	r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d352      	bcc.n	8005a80 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80059da:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <I2C_GetTiming+0xf8>)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	212c      	movs	r1, #44	; 0x2c
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	3308      	adds	r3, #8
 80059e8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d847      	bhi.n	8005a80 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80059f0:	6939      	ldr	r1, [r7, #16]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f856 	bl	8005aa4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80059f8:	6939      	ldr	r1, [r7, #16]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f940 	bl	8005c80 <I2C_Compute_SCLL_SCLH>
 8005a00:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b7f      	cmp	r3, #127	; 0x7f
 8005a06:	d842      	bhi.n	8005a8e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005a08:	4925      	ldr	r1, [pc, #148]	; (8005aa0 <I2C_GetTiming+0xfc>)
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005a1a:	4821      	ldr	r0, [pc, #132]	; (8005aa0 <I2C_GetTiming+0xfc>)
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4403      	add	r3, r0
 8005a28:	3304      	adds	r3, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	051b      	lsls	r3, r3, #20
 8005a2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005a32:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005a34:	481a      	ldr	r0, [pc, #104]	; (8005aa0 <I2C_GetTiming+0xfc>)
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4403      	add	r3, r0
 8005a42:	3308      	adds	r3, #8
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005a4c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005a4e:	4814      	ldr	r0, [pc, #80]	; (8005aa0 <I2C_GetTiming+0xfc>)
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4403      	add	r3, r0
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005a64:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005a66:	480e      	ldr	r0, [pc, #56]	; (8005aa0 <I2C_GetTiming+0xfc>)
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4403      	add	r3, r0
 8005a74:	3310      	adds	r3, #16
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	617b      	str	r3, [r7, #20]
        }
        break;
 8005a7e:	e006      	b.n	8005a8e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	3301      	adds	r3, #1
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d99b      	bls.n	80059c4 <I2C_GetTiming+0x20>
 8005a8c:	e000      	b.n	8005a90 <I2C_GetTiming+0xec>
        break;
 8005a8e:	bf00      	nop
      }
    }
  }

  return ret;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	0801f444 	.word	0x0801f444
 8005aa0:	2402c4e4 	.word	0x2402c4e4

08005aa4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b08f      	sub	sp, #60	; 0x3c
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005aae:	2310      	movs	r3, #16
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	085a      	lsrs	r2, r3, #1
 8005ab6:	4b6e      	ldr	r3, [pc, #440]	; (8005c70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8005ac2:	2332      	movs	r3, #50	; 0x32
 8005ac4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8005ac6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005aca:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005acc:	4a69      	ldr	r2, [pc, #420]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	212c      	movs	r1, #44	; 0x2c
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3324      	adds	r3, #36	; 0x24
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	4a65      	ldr	r2, [pc, #404]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	212c      	movs	r1, #44	; 0x2c
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	4413      	add	r3, r2
 8005aea:	330c      	adds	r3, #12
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005af0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005af2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005af4:	495f      	ldr	r1, [pc, #380]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	202c      	movs	r0, #44	; 0x2c
 8005afa:	fb00 f303 	mul.w	r3, r0, r3
 8005afe:	440b      	add	r3, r1
 8005b00:	3328      	adds	r3, #40	; 0x28
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3303      	adds	r3, #3
 8005b06:	69f9      	ldr	r1, [r7, #28]
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005b10:	4a58      	ldr	r2, [pc, #352]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	212c      	movs	r1, #44	; 0x2c
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3310      	adds	r3, #16
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	4a54      	ldr	r2, [pc, #336]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	212c      	movs	r1, #44	; 0x2c
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3320      	adds	r3, #32
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005b34:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005b36:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005b38:	494e      	ldr	r1, [pc, #312]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	202c      	movs	r0, #44	; 0x2c
 8005b3e:	fb00 f303 	mul.w	r3, r0, r3
 8005b42:	440b      	add	r3, r1
 8005b44:	3328      	adds	r3, #40	; 0x28
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	69f9      	ldr	r1, [r7, #28]
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8005b54:	4a47      	ldr	r2, [pc, #284]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	212c      	movs	r1, #44	; 0x2c
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	3320      	adds	r3, #32
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	4a43      	ldr	r2, [pc, #268]	; (8005c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	212c      	movs	r1, #44	; 0x2c
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	3314      	adds	r3, #20
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4403      	add	r3, r0
 8005b78:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	dc01      	bgt.n	8005b84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	dc01      	bgt.n	8005b8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b92:	e062      	b.n	8005c5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	e059      	b.n	8005c4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba0:	3201      	adds	r2, #1
 8005ba2:	fb03 f202 	mul.w	r2, r3, r2
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d348      	bcc.n	8005c48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	e042      	b.n	8005c42 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	fb03 f202 	mul.w	r2, r3, r2
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d332      	bcc.n	8005c3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d82e      	bhi.n	8005c3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8005bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d02a      	beq.n	8005c3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005be6:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4924      	ldr	r1, [pc, #144]	; (8005c7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005bfa:	4b1f      	ldr	r3, [pc, #124]	; (8005c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	491f      	ldr	r1, [pc, #124]	; (8005c7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005c10:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4919      	ldr	r1, [pc, #100]	; (8005c7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3308      	adds	r3, #8
 8005c22:	6a3a      	ldr	r2, [r7, #32]
 8005c24:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	4a11      	ldr	r2, [pc, #68]	; (8005c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005c32:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005c34:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b7f      	cmp	r3, #127	; 0x7f
 8005c3a:	d812      	bhi.n	8005c62 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	623b      	str	r3, [r7, #32]
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d9b9      	bls.n	8005bbc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	2b0f      	cmp	r3, #15
 8005c52:	d9a2      	bls.n	8005b9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	3301      	adds	r3, #1
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	2b0f      	cmp	r3, #15
 8005c5e:	d999      	bls.n	8005b94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8005c60:	e000      	b.n	8005c64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8005c62:	bf00      	nop
          }
        }
      }
    }
  }
}
 8005c64:	373c      	adds	r7, #60	; 0x3c
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	3b9aca00 	.word	0x3b9aca00
 8005c74:	0801f444 	.word	0x0801f444
 8005c78:	2402cee4 	.word	0x2402cee4
 8005c7c:	2402c4e4 	.word	0x2402c4e4

08005c80 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b093      	sub	sp, #76	; 0x4c
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8005c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	085a      	lsrs	r2, r3, #1
 8005c94:	4b7a      	ldr	r3, [pc, #488]	; (8005e80 <I2C_Compute_SCLL_SCLH+0x200>)
 8005c96:	4413      	add	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8005ca0:	4a78      	ldr	r2, [pc, #480]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	212c      	movs	r1, #44	; 0x2c
 8005ca6:	fb01 f303 	mul.w	r3, r1, r3
 8005caa:	4413      	add	r3, r2
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	085a      	lsrs	r2, r3, #1
 8005cb0:	4b73      	ldr	r3, [pc, #460]	; (8005e80 <I2C_Compute_SCLL_SCLH+0x200>)
 8005cb2:	4413      	add	r3, r2
 8005cb4:	4973      	ldr	r1, [pc, #460]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	202c      	movs	r0, #44	; 0x2c
 8005cba:	fb00 f202 	mul.w	r2, r0, r2
 8005cbe:	440a      	add	r2, r1
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8005cc8:	2332      	movs	r3, #50	; 0x32
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8005ccc:	4a6d      	ldr	r2, [pc, #436]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	212c      	movs	r1, #44	; 0x2c
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3328      	adds	r3, #40	; 0x28
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005ce4:	4a67      	ldr	r2, [pc, #412]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	212c      	movs	r1, #44	; 0x2c
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a62      	ldr	r2, [pc, #392]	; (8005e80 <I2C_Compute_SCLL_SCLH+0x200>)
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005cfc:	4a61      	ldr	r2, [pc, #388]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	212c      	movs	r1, #44	; 0x2c
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	3308      	adds	r3, #8
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a5c      	ldr	r2, [pc, #368]	; (8005e80 <I2C_Compute_SCLL_SCLH+0x200>)
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1c:	e0a3      	b.n	8005e66 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005d1e:	495a      	ldr	r1, [pc, #360]	; (8005e88 <I2C_Compute_SCLL_SCLH+0x208>)
 8005d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	e08c      	b.n	8005e58 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	441a      	add	r2, r3
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	3301      	adds	r3, #1
 8005d48:	6979      	ldr	r1, [r7, #20]
 8005d4a:	fb03 f101 	mul.w	r1, r3, r1
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	4413      	add	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005d58:	4a4a      	ldr	r2, [pc, #296]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	212c      	movs	r1, #44	; 0x2c
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	3318      	adds	r3, #24
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d971      	bls.n	8005e52 <I2C_Compute_SCLL_SCLH+0x1d2>
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	089b      	lsrs	r3, r3, #2
 8005d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d268      	bcs.n	8005e52 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d84:	e062      	b.n	8005e4c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	441a      	add	r2, r3
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	3301      	adds	r3, #1
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	fb03 f101 	mul.w	r1, r3, r1
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	440b      	add	r3, r1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	441a      	add	r2, r3
 8005da6:	4937      	ldr	r1, [pc, #220]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	202c      	movs	r0, #44	; 0x2c
 8005dac:	fb00 f303 	mul.w	r3, r0, r3
 8005db0:	440b      	add	r3, r1
 8005db2:	3320      	adds	r3, #32
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	441a      	add	r2, r3
 8005db8:	4932      	ldr	r1, [pc, #200]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	202c      	movs	r0, #44	; 0x2c
 8005dbe:	fb00 f303 	mul.w	r3, r0, r3
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3324      	adds	r3, #36	; 0x24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4413      	add	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d338      	bcc.n	8005e46 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d834      	bhi.n	8005e46 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005ddc:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <I2C_Compute_SCLL_SCLH+0x204>)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	212c      	movs	r1, #44	; 0x2c
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	331c      	adds	r3, #28
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d329      	bcc.n	8005e46 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d225      	bcs.n	8005e46 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da02      	bge.n	8005e0e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	425b      	negs	r3, r3
 8005e0c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d917      	bls.n	8005e46 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8005e1a:	491b      	ldr	r1, [pc, #108]	; (8005e88 <I2C_Compute_SCLL_SCLH+0x208>)
 8005e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3310      	adds	r3, #16
 8005e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e2c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005e2e:	4916      	ldr	r1, [pc, #88]	; (8005e88 <I2C_Compute_SCLL_SCLH+0x208>)
 8005e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e40:	601a      	str	r2, [r3, #0]
              ret = count;
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	3301      	adds	r3, #1
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	2bff      	cmp	r3, #255	; 0xff
 8005e50:	d999      	bls.n	8005d86 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e54:	3301      	adds	r3, #1
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5a:	2bff      	cmp	r3, #255	; 0xff
 8005e5c:	f67f af6f 	bls.w	8005d3e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	3301      	adds	r3, #1
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
 8005e66:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <I2C_Compute_SCLL_SCLH+0x20c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	f4ff af56 	bcc.w	8005d1e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	374c      	adds	r7, #76	; 0x4c
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	3b9aca00 	.word	0x3b9aca00
 8005e84:	0801f444 	.word	0x0801f444
 8005e88:	2402c4e4 	.word	0x2402c4e4
 8005e8c:	2402cee4 	.word	0x2402cee4

08005e90 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005e98:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005e9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005e9e:	4a30      	ldr	r2, [pc, #192]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005ea0:	f043 0308 	orr.w	r3, r3, #8
 8005ea4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005ea8:	4b2d      	ldr	r3, [pc, #180]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005eaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005eb6:	4b2a      	ldr	r3, [pc, #168]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005eb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ebc:	4a28      	ldr	r2, [pc, #160]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005ebe:	f043 0308 	orr.w	r3, r3, #8
 8005ec2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005ec8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8005ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005eda:	2312      	movs	r3, #18
 8005edc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005eea:	f107 0314 	add.w	r3, r7, #20
 8005eee:	4619      	mov	r1, r3
 8005ef0:	481c      	ldr	r0, [pc, #112]	; (8005f64 <I2C4_MspInit+0xd4>)
 8005ef2:	f005 f985 	bl	800b200 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005efa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005efc:	2312      	movs	r3, #18
 8005efe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005f04:	2302      	movs	r3, #2
 8005f06:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005f08:	2304      	movs	r3, #4
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	4619      	mov	r1, r3
 8005f12:	4814      	ldr	r0, [pc, #80]	; (8005f64 <I2C4_MspInit+0xd4>)
 8005f14:	f005 f974 	bl	800b200 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8005f18:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005f1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005f1e:	4a10      	ldr	r2, [pc, #64]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f24:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005f2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	60bb      	str	r3, [r7, #8]
 8005f34:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f3c:	4a08      	ldr	r2, [pc, #32]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f4c:	4a04      	ldr	r2, [pc, #16]	; (8005f60 <I2C4_MspInit+0xd0>)
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8005f56:	bf00      	nop
 8005f58:	3728      	adds	r7, #40	; 0x28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	58024400 	.word	0x58024400
 8005f64:	58020c00 	.word	0x58020c00

08005f68 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8005f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	480b      	ldr	r0, [pc, #44]	; (8005fa8 <I2C4_MspDeInit+0x40>)
 8005f7c:	f005 faf0 	bl	800b560 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8005f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4807      	ldr	r0, [pc, #28]	; (8005fa8 <I2C4_MspDeInit+0x40>)
 8005f8c:	f005 fae8 	bl	800b560 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <I2C4_MspDeInit+0x44>)
 8005f92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005f96:	4a05      	ldr	r2, [pc, #20]	; (8005fac <I2C4_MspDeInit+0x44>)
 8005f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f9c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8005fa0:	bf00      	nop
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	58020c00 	.word	0x58020c00
 8005fac:	58024400 	.word	0x58024400

08005fb0 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af04      	add	r7, sp, #16
 8005fb6:	607b      	str	r3, [r7, #4]
 8005fb8:	4603      	mov	r3, r0
 8005fba:	81fb      	strh	r3, [r7, #14]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	81bb      	strh	r3, [r7, #12]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005fc4:	8978      	ldrh	r0, [r7, #10]
 8005fc6:	89ba      	ldrh	r2, [r7, #12]
 8005fc8:	89f9      	ldrh	r1, [r7, #14]
 8005fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fce:	9302      	str	r3, [sp, #8]
 8005fd0:	8b3b      	ldrh	r3, [r7, #24]
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4807      	ldr	r0, [pc, #28]	; (8005ff8 <I2C4_WriteReg+0x48>)
 8005fdc:	f005 fcd2 	bl	800b984 <HAL_I2C_Mem_Write>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e001      	b.n	8005fee <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005fea:	f06f 0307 	mvn.w	r3, #7
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2402cee8 	.word	0x2402cee8

08005ffc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af04      	add	r7, sp, #16
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	4603      	mov	r3, r0
 8006006:	81fb      	strh	r3, [r7, #14]
 8006008:	460b      	mov	r3, r1
 800600a:	81bb      	strh	r3, [r7, #12]
 800600c:	4613      	mov	r3, r2
 800600e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006010:	8978      	ldrh	r0, [r7, #10]
 8006012:	89ba      	ldrh	r2, [r7, #12]
 8006014:	89f9      	ldrh	r1, [r7, #14]
 8006016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800601a:	9302      	str	r3, [sp, #8]
 800601c:	8b3b      	ldrh	r3, [r7, #24]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4603      	mov	r3, r0
 8006026:	4807      	ldr	r0, [pc, #28]	; (8006044 <I2C4_ReadReg+0x48>)
 8006028:	f005 fdc0 	bl	800bbac <HAL_I2C_Mem_Read>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8006032:	2300      	movs	r3, #0
 8006034:	e001      	b.n	800603a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8006036:	f06f 0307 	mvn.w	r3, #7
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	2402cee8 	.word	0x2402cee8

08006048 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800605e:	f06f 0301 	mvn.w	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	e02d      	b.n	80060c2 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8006066:	4819      	ldr	r0, [pc, #100]	; (80060cc <BSP_CAMERA_Init+0x84>)
 8006068:	f7fa fbc8 	bl	80007fc <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 800606c:	f7fa fb92 	bl	8000794 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8006070:	2000      	movs	r0, #0
 8006072:	f000 f887 	bl	8006184 <BSP_CAMERA_HwReset>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800607c:	f06f 0307 	mvn.w	r3, #7
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e01e      	b.n	80060c2 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68b8      	ldr	r0, [r7, #8]
 8006088:	f000 f93e 	bl	8006308 <OV5640_Probe>
 800608c:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006094:	f06f 0306 	mvn.w	r3, #6
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e012      	b.n	80060c2 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 800609c:	490c      	ldr	r1, [pc, #48]	; (80060d0 <BSP_CAMERA_Init+0x88>)
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	440b      	add	r3, r1
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80060ae:	4908      	ldr	r1, [pc, #32]	; (80060d0 <BSP_CAMERA_Init+0x88>)
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	440b      	add	r3, r1
 80060bc:	3304      	adds	r3, #4
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 80060c2:	697b      	ldr	r3, [r7, #20]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	240082a0 	.word	0x240082a0
 80060d0:	2402cf40 	.word	0x2402cf40

080060d4 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80060e6:	f06f 0301 	mvn.w	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e022      	b.n	8006134 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 80060ee:	68bc      	ldr	r4, [r7, #8]
 80060f0:	4913      	ldr	r1, [pc, #76]	; (8006140 <BSP_CAMERA_Start+0x6c>)
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4613      	mov	r3, r2
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	4413      	add	r3, r2
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	440b      	add	r3, r1
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	490f      	ldr	r1, [pc, #60]	; (8006140 <BSP_CAMERA_Start+0x6c>)
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4613      	mov	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	4413      	add	r3, r2
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	440b      	add	r3, r1
 800610e:	3304      	adds	r3, #4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4619      	mov	r1, r3
 8006114:	f000 f8a6 	bl	8006264 <GetSize>
 8006118:	4603      	mov	r3, r0
 800611a:	4622      	mov	r2, r4
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4809      	ldr	r0, [pc, #36]	; (8006144 <BSP_CAMERA_Start+0x70>)
 8006120:	f000 feae 	bl	8006e80 <HAL_DCMI_Start_DMA>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800612a:	f06f 0303 	mvn.w	r3, #3
 800612e:	e002      	b.n	8006136 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8006134:	697b      	ldr	r3, [r7, #20]
}
 8006136:	4618      	mov	r0, r3
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd90      	pop	{r4, r7, pc}
 800613e:	bf00      	nop
 8006140:	2402cf40 	.word	0x2402cf40
 8006144:	240082a0 	.word	0x240082a0

08006148 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006156:	f06f 0301 	mvn.w	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e00b      	b.n	8006176 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 800615e:	4808      	ldr	r0, [pc, #32]	; (8006180 <BSP_CAMERA_Stop+0x38>)
 8006160:	f000 ff50 	bl	8007004 <HAL_DCMI_Stop>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800616a:	f06f 0303 	mvn.w	r3, #3
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e001      	b.n	8006176 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8006176:	68fb      	ldr	r3, [r7, #12]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	240082a0 	.word	0x240082a0

08006184 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006196:	f06f 0301 	mvn.w	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 800619c:	68fb      	ldr	r3, [r7, #12]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80061bc:	f06f 0301 	mvn.w	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 80061c2:	68fb      	ldr	r3, [r7, #12]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8006214:	2000      	movs	r0, #0
 8006216:	f7ff ffdb 	bl	80061d0 <BSP_CAMERA_LineEventCallback>
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800622a:	2000      	movs	r0, #0
 800622c:	f7fb fc50 	bl	8001ad0 <BSP_CAMERA_FrameEventCallback>
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8006240:	2000      	movs	r0, #0
 8006242:	f7ff ffcf 	bl	80061e4 <BSP_CAMERA_VsyncEventCallback>
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8006256:	2000      	movs	r0, #0
 8006258:	f7ff ffce 	bl	80061f8 <BSP_CAMERA_ErrorCallback>
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d102      	bne.n	800627e <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8006278:	2303      	movs	r3, #3
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	e001      	b.n	8006282 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 800627e:	2302      	movs	r3, #2
 8006280:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d834      	bhi.n	80062f2 <GetSize+0x8e>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <GetSize+0x2c>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062a5 	.word	0x080062a5
 8006294:	080062b5 	.word	0x080062b5
 8006298:	080062c5 	.word	0x080062c5
 800629c:	080062d5 	.word	0x080062d5
 80062a0:	080062e5 	.word	0x080062e5
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	089b      	lsrs	r3, r3, #2
 80062b0:	60fb      	str	r3, [r7, #12]
    break;
 80062b2:	e01f      	b.n	80062f4 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	089b      	lsrs	r3, r3, #2
 80062c0:	60fb      	str	r3, [r7, #12]
    break;
 80062c2:	e017      	b.n	80062f4 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	025b      	lsls	r3, r3, #9
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	60fb      	str	r3, [r7, #12]
    break;
 80062d2:	e00f      	b.n	80062f4 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	60fb      	str	r3, [r7, #12]
    break;
 80062e2:	e007      	b.n	80062f4 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a07      	ldr	r2, [pc, #28]	; (8006304 <GetSize+0xa0>)
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	60fb      	str	r3, [r7, #12]
    break;
 80062f0:	e000      	b.n	80062f4 <GetSize+0x90>
  default:
    break;
 80062f2:	bf00      	nop
  }

  return (int32_t)size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	0005dc00 	.word	0x0005dc00

08006308 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8006312:	2378      	movs	r3, #120	; 0x78
 8006314:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8006316:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <OV5640_Probe+0xc0>)
 8006318:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800631a:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <OV5640_Probe+0xc4>)
 800631c:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800631e:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <OV5640_Probe+0xc8>)
 8006320:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8006322:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <OV5640_Probe+0xcc>)
 8006324:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8006326:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <OV5640_Probe+0xd0>)
 8006328:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800632a:	f107 030c 	add.w	r3, r7, #12
 800632e:	4619      	mov	r1, r3
 8006330:	482a      	ldr	r0, [pc, #168]	; (80063dc <OV5640_Probe+0xd4>)
 8006332:	f7fd fbff 	bl	8003b34 <OV5640_RegisterBusIO>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800633c:	f06f 0304 	mvn.w	r3, #4
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	e03c      	b.n	80063be <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8006344:	f107 0308 	add.w	r3, r7, #8
 8006348:	4619      	mov	r1, r3
 800634a:	4824      	ldr	r0, [pc, #144]	; (80063dc <OV5640_Probe+0xd4>)
 800634c:	f7fe f846 	bl	80043dc <OV5640_ReadID>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006356:	f06f 0304 	mvn.w	r3, #4
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
 800635c:	e02f      	b.n	80063be <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f245 6240 	movw	r2, #22080	; 0x5640
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006368:	f06f 0306 	mvn.w	r3, #6
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
 800636e:	e026      	b.n	80063be <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8006370:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <OV5640_Probe+0xd8>)
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <OV5640_Probe+0xdc>)
 8006374:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8006376:	4b1c      	ldr	r3, [pc, #112]	; (80063e8 <OV5640_Probe+0xe0>)
 8006378:	4a18      	ldr	r2, [pc, #96]	; (80063dc <OV5640_Probe+0xd4>)
 800637a:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <OV5640_Probe+0xd8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <OV5640_Probe+0xe0>)
 8006384:	6810      	ldr	r0, [r2, #0]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4798      	blx	r3
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006392:	f06f 0304 	mvn.w	r3, #4
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	e011      	b.n	80063be <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <OV5640_Probe+0xd8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	4a11      	ldr	r2, [pc, #68]	; (80063e8 <OV5640_Probe+0xe0>)
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	4911      	ldr	r1, [pc, #68]	; (80063ec <OV5640_Probe+0xe4>)
 80063a6:	6809      	ldr	r1, [r1, #0]
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80063b2:	f06f 0304 	mvn.w	r3, #4
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	e001      	b.n	80063be <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3728      	adds	r7, #40	; 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	0800579d 	.word	0x0800579d
 80063cc:	08005811 	.word	0x08005811
 80063d0:	08005939 	.word	0x08005939
 80063d4:	080058dd 	.word	0x080058dd
 80063d8:	08005995 	.word	0x08005995
 80063dc:	2402cf78 	.word	0x2402cf78
 80063e0:	2402cf70 	.word	0x2402cf70
 80063e4:	24000000 	.word	0x24000000
 80063e8:	2402cf3c 	.word	0x2402cf3c
 80063ec:	2402cf74 	.word	0x2402cf74

080063f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <HAL_MspInit+0x30>)
 80063f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80063fc:	4a08      	ldr	r2, [pc, #32]	; (8006420 <HAL_MspInit+0x30>)
 80063fe:	f043 0302 	orr.w	r3, r3, #2
 8006402:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <HAL_MspInit+0x30>)
 8006408:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	58024400 	.word	0x58024400

08006424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006428:	e7fe      	b.n	8006428 <NMI_Handler+0x4>

0800642a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800642a:	b480      	push	{r7}
 800642c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800642e:	e7fe      	b.n	800642e <HardFault_Handler+0x4>

08006430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006434:	e7fe      	b.n	8006434 <MemManage_Handler+0x4>

08006436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006436:	b480      	push	{r7}
 8006438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800643a:	e7fe      	b.n	800643a <BusFault_Handler+0x4>

0800643c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006440:	e7fe      	b.n	8006440 <UsageFault_Handler+0x4>

08006442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006442:	b480      	push	{r7}
 8006444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800645e:	b480      	push	{r7}
 8006460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006462:	bf00      	nop
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006470:	f000 fa46 	bl	8006900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006474:	bf00      	nop
 8006476:	bd80      	pop	{r7, pc}

08006478 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800647c:	4802      	ldr	r0, [pc, #8]	; (8006488 <USART1_IRQHandler+0x10>)
 800647e:	f009 fd53 	bl	800ff28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	2402cfa4 	.word	0x2402cfa4

0800648c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8006490:	4802      	ldr	r0, [pc, #8]	; (800649c <DMA2_Stream1_IRQHandler+0x10>)
 8006492:	f002 faa7 	bl	80089e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006496:	bf00      	nop
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	240082f0 	.word	0x240082f0

080064a0 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80064a4:	4802      	ldr	r0, [pc, #8]	; (80064b0 <DCMI_PSSI_IRQHandler+0x10>)
 80064a6:	f000 fe0d 	bl	80070c4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 80064aa:	bf00      	nop
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	240082a0 	.word	0x240082a0

080064b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80064b8:	4802      	ldr	r0, [pc, #8]	; (80064c4 <LTDC_IRQHandler+0x10>)
 80064ba:	f006 f8cb 	bl	800c654 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80064be:	bf00      	nop
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	24008408 	.word	0x24008408

080064c8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80064cc:	4802      	ldr	r0, [pc, #8]	; (80064d8 <LTDC_ER_IRQHandler+0x10>)
 80064ce:	f006 f8c1 	bl	800c654 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80064d2:	bf00      	nop
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	24008408 	.word	0x24008408

080064dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80064e0:	4802      	ldr	r0, [pc, #8]	; (80064ec <DMA2D_IRQHandler+0x10>)
 80064e2:	f003 ff79 	bl	800a3d8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	24008368 	.word	0x24008368

080064f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064f8:	4a14      	ldr	r2, [pc, #80]	; (800654c <_sbrk+0x5c>)
 80064fa:	4b15      	ldr	r3, [pc, #84]	; (8006550 <_sbrk+0x60>)
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006504:	4b13      	ldr	r3, [pc, #76]	; (8006554 <_sbrk+0x64>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <_sbrk+0x64>)
 800650e:	4a12      	ldr	r2, [pc, #72]	; (8006558 <_sbrk+0x68>)
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <_sbrk+0x64>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d207      	bcs.n	8006530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006520:	f017 fb5a 	bl	801dbd8 <__errno>
 8006524:	4603      	mov	r3, r0
 8006526:	220c      	movs	r2, #12
 8006528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	e009      	b.n	8006544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006530:	4b08      	ldr	r3, [pc, #32]	; (8006554 <_sbrk+0x64>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006536:	4b07      	ldr	r3, [pc, #28]	; (8006554 <_sbrk+0x64>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	4a05      	ldr	r2, [pc, #20]	; (8006554 <_sbrk+0x64>)
 8006540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006542:	68fb      	ldr	r3, [r7, #12]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	24100000 	.word	0x24100000
 8006550:	00000800 	.word	0x00000800
 8006554:	2402cfa0 	.word	0x2402cfa0
 8006558:	20000000 	.word	0x20000000

0800655c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006560:	4b32      	ldr	r3, [pc, #200]	; (800662c <SystemInit+0xd0>)
 8006562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006566:	4a31      	ldr	r2, [pc, #196]	; (800662c <SystemInit+0xd0>)
 8006568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800656c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006570:	4b2f      	ldr	r3, [pc, #188]	; (8006630 <SystemInit+0xd4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	2b02      	cmp	r3, #2
 800657a:	d807      	bhi.n	800658c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800657c:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <SystemInit+0xd4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f023 030f 	bic.w	r3, r3, #15
 8006584:	4a2a      	ldr	r2, [pc, #168]	; (8006630 <SystemInit+0xd4>)
 8006586:	f043 0303 	orr.w	r3, r3, #3
 800658a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800658c:	4b29      	ldr	r3, [pc, #164]	; (8006634 <SystemInit+0xd8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a28      	ldr	r2, [pc, #160]	; (8006634 <SystemInit+0xd8>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006598:	4b26      	ldr	r3, [pc, #152]	; (8006634 <SystemInit+0xd8>)
 800659a:	2200      	movs	r2, #0
 800659c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800659e:	4b25      	ldr	r3, [pc, #148]	; (8006634 <SystemInit+0xd8>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4924      	ldr	r1, [pc, #144]	; (8006634 <SystemInit+0xd8>)
 80065a4:	4b24      	ldr	r3, [pc, #144]	; (8006638 <SystemInit+0xdc>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065aa:	4b21      	ldr	r3, [pc, #132]	; (8006630 <SystemInit+0xd4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80065b6:	4b1e      	ldr	r3, [pc, #120]	; (8006630 <SystemInit+0xd4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f023 030f 	bic.w	r3, r3, #15
 80065be:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <SystemInit+0xd4>)
 80065c0:	f043 0303 	orr.w	r3, r3, #3
 80065c4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80065c6:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <SystemInit+0xd8>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <SystemInit+0xd8>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80065d2:	4b18      	ldr	r3, [pc, #96]	; (8006634 <SystemInit+0xd8>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80065d8:	4b16      	ldr	r3, [pc, #88]	; (8006634 <SystemInit+0xd8>)
 80065da:	4a18      	ldr	r2, [pc, #96]	; (800663c <SystemInit+0xe0>)
 80065dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80065de:	4b15      	ldr	r3, [pc, #84]	; (8006634 <SystemInit+0xd8>)
 80065e0:	4a17      	ldr	r2, [pc, #92]	; (8006640 <SystemInit+0xe4>)
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <SystemInit+0xd8>)
 80065e6:	4a17      	ldr	r2, [pc, #92]	; (8006644 <SystemInit+0xe8>)
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80065ea:	4b12      	ldr	r3, [pc, #72]	; (8006634 <SystemInit+0xd8>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <SystemInit+0xd8>)
 80065f2:	4a14      	ldr	r2, [pc, #80]	; (8006644 <SystemInit+0xe8>)
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <SystemInit+0xd8>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <SystemInit+0xd8>)
 80065fe:	4a11      	ldr	r2, [pc, #68]	; (8006644 <SystemInit+0xe8>)
 8006600:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <SystemInit+0xd8>)
 8006604:	2200      	movs	r2, #0
 8006606:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <SystemInit+0xd8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a09      	ldr	r2, [pc, #36]	; (8006634 <SystemInit+0xd8>)
 800660e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006612:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <SystemInit+0xd8>)
 8006616:	2200      	movs	r2, #0
 8006618:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <SystemInit+0xec>)
 800661c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006620:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006622:	bf00      	nop
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	e000ed00 	.word	0xe000ed00
 8006630:	52002000 	.word	0x52002000
 8006634:	58024400 	.word	0x58024400
 8006638:	eaf6ed7f 	.word	0xeaf6ed7f
 800663c:	02020200 	.word	0x02020200
 8006640:	01ff0000 	.word	0x01ff0000
 8006644:	01010280 	.word	0x01010280
 8006648:	52004000 	.word	0x52004000

0800664c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006650:	4b22      	ldr	r3, [pc, #136]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006652:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <MX_USART1_UART_Init+0x94>)
 8006654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006656:	4b21      	ldr	r3, [pc, #132]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800665c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800665e:	4b1f      	ldr	r3, [pc, #124]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006660:	2200      	movs	r2, #0
 8006662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006666:	2200      	movs	r2, #0
 8006668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800666a:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <MX_USART1_UART_Init+0x90>)
 800666c:	2200      	movs	r2, #0
 800666e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006670:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006672:	220c      	movs	r2, #12
 8006674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006676:	4b19      	ldr	r3, [pc, #100]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006678:	2200      	movs	r2, #0
 800667a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <MX_USART1_UART_Init+0x90>)
 800667e:	2200      	movs	r2, #0
 8006680:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006682:	4b16      	ldr	r3, [pc, #88]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006684:	2200      	movs	r2, #0
 8006686:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006688:	4b14      	ldr	r3, [pc, #80]	; (80066dc <MX_USART1_UART_Init+0x90>)
 800668a:	2200      	movs	r2, #0
 800668c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006690:	2200      	movs	r2, #0
 8006692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006694:	4811      	ldr	r0, [pc, #68]	; (80066dc <MX_USART1_UART_Init+0x90>)
 8006696:	f009 faa0 	bl	800fbda <HAL_UART_Init>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80066a0:	f7fb fa26 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80066a4:	2100      	movs	r1, #0
 80066a6:	480d      	ldr	r0, [pc, #52]	; (80066dc <MX_USART1_UART_Init+0x90>)
 80066a8:	f00b f936 	bl	8011918 <HAL_UARTEx_SetTxFifoThreshold>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80066b2:	f7fb fa1d 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80066b6:	2100      	movs	r1, #0
 80066b8:	4808      	ldr	r0, [pc, #32]	; (80066dc <MX_USART1_UART_Init+0x90>)
 80066ba:	f00b f96b 	bl	8011994 <HAL_UARTEx_SetRxFifoThreshold>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80066c4:	f7fb fa14 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80066c8:	4804      	ldr	r0, [pc, #16]	; (80066dc <MX_USART1_UART_Init+0x90>)
 80066ca:	f00b f8ec 	bl	80118a6 <HAL_UARTEx_DisableFifoMode>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80066d4:	f7fb fa0c 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80066d8:	bf00      	nop
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	2402cfa4 	.word	0x2402cfa4
 80066e0:	40011000 	.word	0x40011000

080066e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b0ba      	sub	sp, #232	; 0xe8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	609a      	str	r2, [r3, #8]
 80066f8:	60da      	str	r2, [r3, #12]
 80066fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066fc:	f107 0310 	add.w	r3, r7, #16
 8006700:	22c0      	movs	r2, #192	; 0xc0
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f017 fac9 	bl	801dc9c <memset>
  if(uartHandle->Instance==USART1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2b      	ldr	r2, [pc, #172]	; (80067bc <HAL_UART_MspInit+0xd8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d14e      	bne.n	80067b2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006714:	f04f 0201 	mov.w	r2, #1
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8006720:	2300      	movs	r3, #0
 8006722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006726:	f107 0310 	add.w	r3, r7, #16
 800672a:	4618      	mov	r0, r3
 800672c:	f007 fabe 	bl	800dcac <HAL_RCCEx_PeriphCLKConfig>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8006736:	f7fb f9db 	bl	8001af0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800673a:	4b21      	ldr	r3, [pc, #132]	; (80067c0 <HAL_UART_MspInit+0xdc>)
 800673c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006740:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <HAL_UART_MspInit+0xdc>)
 8006742:	f043 0310 	orr.w	r3, r3, #16
 8006746:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800674a:	4b1d      	ldr	r3, [pc, #116]	; (80067c0 <HAL_UART_MspInit+0xdc>)
 800674c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006758:	4b19      	ldr	r3, [pc, #100]	; (80067c0 <HAL_UART_MspInit+0xdc>)
 800675a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800675e:	4a18      	ldr	r2, [pc, #96]	; (80067c0 <HAL_UART_MspInit+0xdc>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <HAL_UART_MspInit+0xdc>)
 800676a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8006776:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800677a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677e:	2302      	movs	r3, #2
 8006780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006784:	2300      	movs	r3, #0
 8006786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800678a:	2300      	movs	r3, #0
 800678c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006790:	2307      	movs	r3, #7
 8006792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006796:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800679a:	4619      	mov	r1, r3
 800679c:	4809      	ldr	r0, [pc, #36]	; (80067c4 <HAL_UART_MspInit+0xe0>)
 800679e:	f004 fd2f 	bl	800b200 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80067a2:	2200      	movs	r2, #0
 80067a4:	2100      	movs	r1, #0
 80067a6:	2025      	movs	r0, #37	; 0x25
 80067a8:	f000 f9c9 	bl	8006b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80067ac:	2025      	movs	r0, #37	; 0x25
 80067ae:	f000 f9e0 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80067b2:	bf00      	nop
 80067b4:	37e8      	adds	r7, #232	; 0xe8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40011000 	.word	0x40011000
 80067c0:	58024400 	.word	0x58024400
 80067c4:	58020000 	.word	0x58020000

080067c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80067c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006800 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80067cc:	f7ff fec6 	bl	800655c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80067d0:	480c      	ldr	r0, [pc, #48]	; (8006804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80067d2:	490d      	ldr	r1, [pc, #52]	; (8006808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80067d4:	4a0d      	ldr	r2, [pc, #52]	; (800680c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80067d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067d8:	e002      	b.n	80067e0 <LoopCopyDataInit>

080067da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067de:	3304      	adds	r3, #4

080067e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80067e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067e4:	d3f9      	bcc.n	80067da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067e6:	4a0a      	ldr	r2, [pc, #40]	; (8006810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80067e8:	4c0a      	ldr	r4, [pc, #40]	; (8006814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80067ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80067ec:	e001      	b.n	80067f2 <LoopFillZerobss>

080067ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80067ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80067f0:	3204      	adds	r2, #4

080067f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80067f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067f4:	d3fb      	bcc.n	80067ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80067f6:	f017 f9f5 	bl	801dbe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067fa:	f7fa ffed 	bl	80017d8 <main>
  bx  lr
 80067fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006800:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8006804:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006808:	24008248 	.word	0x24008248
  ldr r2, =_sidata
 800680c:	08093560 	.word	0x08093560
  ldr r2, =_sbss
 8006810:	24008260 	.word	0x24008260
  ldr r4, =_ebss
 8006814:	2405e3c4 	.word	0x2405e3c4

08006818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006818:	e7fe      	b.n	8006818 <ADC_IRQHandler>
	...

0800681c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006822:	2003      	movs	r0, #3
 8006824:	f000 f980 	bl	8006b28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006828:	f007 f86a 	bl	800d900 <HAL_RCC_GetSysClockFreq>
 800682c:	4602      	mov	r2, r0
 800682e:	4b15      	ldr	r3, [pc, #84]	; (8006884 <HAL_Init+0x68>)
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	4913      	ldr	r1, [pc, #76]	; (8006888 <HAL_Init+0x6c>)
 800683a:	5ccb      	ldrb	r3, [r1, r3]
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	fa22 f303 	lsr.w	r3, r2, r3
 8006844:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006846:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <HAL_Init+0x68>)
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	4a0e      	ldr	r2, [pc, #56]	; (8006888 <HAL_Init+0x6c>)
 8006850:	5cd3      	ldrb	r3, [r2, r3]
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	fa22 f303 	lsr.w	r3, r2, r3
 800685c:	4a0b      	ldr	r2, [pc, #44]	; (800688c <HAL_Init+0x70>)
 800685e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006860:	4a0b      	ldr	r2, [pc, #44]	; (8006890 <HAL_Init+0x74>)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006866:	2000      	movs	r0, #0
 8006868:	f000 f814 	bl	8006894 <HAL_InitTick>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e002      	b.n	800687c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006876:	f7ff fdbb 	bl	80063f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	58024400 	.word	0x58024400
 8006888:	0801f4c8 	.word	0x0801f4c8
 800688c:	24000048 	.word	0x24000048
 8006890:	24000044 	.word	0x24000044

08006894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800689c:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <HAL_InitTick+0x60>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e021      	b.n	80068ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <HAL_InitTick+0x64>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <HAL_InitTick+0x60>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	4619      	mov	r1, r3
 80068b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f965 	bl	8006b8e <HAL_SYSTICK_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e00e      	b.n	80068ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b0f      	cmp	r3, #15
 80068d2:	d80a      	bhi.n	80068ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068d4:	2200      	movs	r2, #0
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	f000 f92f 	bl	8006b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068e0:	4a06      	ldr	r2, [pc, #24]	; (80068fc <HAL_InitTick+0x68>)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	24000050 	.word	0x24000050
 80068f8:	24000044 	.word	0x24000044
 80068fc:	2400004c 	.word	0x2400004c

08006900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_IncTick+0x20>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_IncTick+0x24>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4413      	add	r3, r2
 8006910:	4a04      	ldr	r2, [pc, #16]	; (8006924 <HAL_IncTick+0x24>)
 8006912:	6013      	str	r3, [r2, #0]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	24000050 	.word	0x24000050
 8006924:	2402d038 	.word	0x2402d038

08006928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return uwTick;
 800692c:	4b03      	ldr	r3, [pc, #12]	; (800693c <HAL_GetTick+0x14>)
 800692e:	681b      	ldr	r3, [r3, #0]
}
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	2402d038 	.word	0x2402d038

08006940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006948:	f7ff ffee 	bl	8006928 <HAL_GetTick>
 800694c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d005      	beq.n	8006966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800695a:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <HAL_Delay+0x44>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006966:	bf00      	nop
 8006968:	f7ff ffde 	bl	8006928 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	429a      	cmp	r2, r3
 8006976:	d8f7      	bhi.n	8006968 <HAL_Delay+0x28>
  {
  }
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	24000050 	.word	0x24000050

08006988 <__NVIC_SetPriorityGrouping>:
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006998:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <__NVIC_SetPriorityGrouping+0x40>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069a4:	4013      	ands	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <__NVIC_SetPriorityGrouping+0x44>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069b6:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <__NVIC_SetPriorityGrouping+0x40>)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	60d3      	str	r3, [r2, #12]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	e000ed00 	.word	0xe000ed00
 80069cc:	05fa0000 	.word	0x05fa0000

080069d0 <__NVIC_GetPriorityGrouping>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069d4:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <__NVIC_GetPriorityGrouping+0x18>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 0307 	and.w	r3, r3, #7
}
 80069de:	4618      	mov	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	e000ed00 	.word	0xe000ed00

080069ec <__NVIC_EnableIRQ>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	db0b      	blt.n	8006a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	f003 021f 	and.w	r2, r3, #31
 8006a04:	4907      	ldr	r1, [pc, #28]	; (8006a24 <__NVIC_EnableIRQ+0x38>)
 8006a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	e000e100 	.word	0xe000e100

08006a28 <__NVIC_SetPriority>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	4603      	mov	r3, r0
 8006a30:	6039      	str	r1, [r7, #0]
 8006a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	db0a      	blt.n	8006a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	490c      	ldr	r1, [pc, #48]	; (8006a74 <__NVIC_SetPriority+0x4c>)
 8006a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a46:	0112      	lsls	r2, r2, #4
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a50:	e00a      	b.n	8006a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	4908      	ldr	r1, [pc, #32]	; (8006a78 <__NVIC_SetPriority+0x50>)
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	3b04      	subs	r3, #4
 8006a60:	0112      	lsls	r2, r2, #4
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	440b      	add	r3, r1
 8006a66:	761a      	strb	r2, [r3, #24]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	e000e100 	.word	0xe000e100
 8006a78:	e000ed00 	.word	0xe000ed00

08006a7c <NVIC_EncodePriority>:
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b089      	sub	sp, #36	; 0x24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f1c3 0307 	rsb	r3, r3, #7
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	bf28      	it	cs
 8006a9a:	2304      	movcs	r3, #4
 8006a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	2b06      	cmp	r3, #6
 8006aa4:	d902      	bls.n	8006aac <NVIC_EncodePriority+0x30>
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	3b03      	subs	r3, #3
 8006aaa:	e000      	b.n	8006aae <NVIC_EncodePriority+0x32>
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	43da      	mvns	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	401a      	ands	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ace:	43d9      	mvns	r1, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad4:	4313      	orrs	r3, r2
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3724      	adds	r7, #36	; 0x24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006af4:	d301      	bcc.n	8006afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006af6:	2301      	movs	r3, #1
 8006af8:	e00f      	b.n	8006b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006afa:	4a0a      	ldr	r2, [pc, #40]	; (8006b24 <SysTick_Config+0x40>)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b02:	210f      	movs	r1, #15
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	f7ff ff8e 	bl	8006a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <SysTick_Config+0x40>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b12:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <SysTick_Config+0x40>)
 8006b14:	2207      	movs	r2, #7
 8006b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	e000e010 	.word	0xe000e010

08006b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff ff29 	bl	8006988 <__NVIC_SetPriorityGrouping>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	4603      	mov	r3, r0
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
 8006b4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b4c:	f7ff ff40 	bl	80069d0 <__NVIC_GetPriorityGrouping>
 8006b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	6978      	ldr	r0, [r7, #20]
 8006b58:	f7ff ff90 	bl	8006a7c <NVIC_EncodePriority>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff ff5f 	bl	8006a28 <__NVIC_SetPriority>
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	4603      	mov	r3, r0
 8006b7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff ff33 	bl	80069ec <__NVIC_EnableIRQ>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ffa4 	bl	8006ae4 <SysTick_Config>
 8006b9c:	4603      	mov	r3, r0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e054      	b.n	8006c64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7f5b      	ldrb	r3, [r3, #29]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d105      	bne.n	8006bd0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7f9 fdc0 	bl	8000750 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	791b      	ldrb	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <HAL_CRC_Init+0xc4>)
 8006be4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0218 	bic.w	r2, r2, #24
 8006bf4:	609a      	str	r2, [r3, #8]
 8006bf6:	e00c      	b.n	8006c12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6899      	ldr	r1, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f834 	bl	8006c70 <HAL_CRCEx_Polynomial_Set>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e028      	b.n	8006c64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	795b      	ldrb	r3, [r3, #5]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c22:	611a      	str	r2, [r3, #16]
 8006c24:	e004      	b.n	8006c30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6912      	ldr	r2, [r2, #16]
 8006c2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	04c11db7 	.word	0x04c11db7

08006c70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006c80:	231f      	movs	r3, #31
 8006c82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
 8006c92:	e063      	b.n	8006d5c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006c94:	bf00      	nop
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1e5a      	subs	r2, r3, #1
 8006c9a:	613a      	str	r2, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <HAL_CRCEx_Polynomial_Set+0x44>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b18      	cmp	r3, #24
 8006cb8:	d846      	bhi.n	8006d48 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006d4f 	.word	0x08006d4f
 8006cc4:	08006d49 	.word	0x08006d49
 8006cc8:	08006d49 	.word	0x08006d49
 8006ccc:	08006d49 	.word	0x08006d49
 8006cd0:	08006d49 	.word	0x08006d49
 8006cd4:	08006d49 	.word	0x08006d49
 8006cd8:	08006d49 	.word	0x08006d49
 8006cdc:	08006d49 	.word	0x08006d49
 8006ce0:	08006d3d 	.word	0x08006d3d
 8006ce4:	08006d49 	.word	0x08006d49
 8006ce8:	08006d49 	.word	0x08006d49
 8006cec:	08006d49 	.word	0x08006d49
 8006cf0:	08006d49 	.word	0x08006d49
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006d49 	.word	0x08006d49
 8006cfc:	08006d49 	.word	0x08006d49
 8006d00:	08006d31 	.word	0x08006d31
 8006d04:	08006d49 	.word	0x08006d49
 8006d08:	08006d49 	.word	0x08006d49
 8006d0c:	08006d49 	.word	0x08006d49
 8006d10:	08006d49 	.word	0x08006d49
 8006d14:	08006d49 	.word	0x08006d49
 8006d18:	08006d49 	.word	0x08006d49
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	08006d25 	.word	0x08006d25
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d913      	bls.n	8006d52 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006d2e:	e010      	b.n	8006d52 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b07      	cmp	r3, #7
 8006d34:	d90f      	bls.n	8006d56 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006d3a:	e00c      	b.n	8006d56 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b0f      	cmp	r3, #15
 8006d40:	d90b      	bls.n	8006d5a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006d46:	e008      	b.n	8006d5a <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	75fb      	strb	r3, [r7, #23]
        break;
 8006d4c:	e006      	b.n	8006d5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d4e:	bf00      	nop
 8006d50:	e004      	b.n	8006d5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d52:	bf00      	nop
 8006d54:	e002      	b.n	8006d5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d56:	bf00      	nop
 8006d58:	e000      	b.n	8006d5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006d5a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10d      	bne.n	8006d7e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f023 0118 	bic.w	r1, r3, #24
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e069      	b.n	8006e72 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d102      	bne.n	8006db0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7f9 fd26 	bl	80007fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6819      	ldr	r1, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b2a      	ldr	r3, [pc, #168]	; (8006e7c <HAL_DCMI_Init+0xf0>)
 8006dd2:	400b      	ands	r3, r1
 8006dd4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006dea:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006df6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e02:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e1a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d112      	bne.n	8006e52 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7f1b      	ldrb	r3, [r3, #28]
 8006e30:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7f5b      	ldrb	r3, [r3, #29]
 8006e36:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e38:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7f9b      	ldrb	r3, [r3, #30]
 8006e3e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006e40:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7fdb      	ldrb	r3, [r3, #31]
 8006e48:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006e4e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006e50:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 021e 	orr.w	r2, r2, #30
 8006e60:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	ffe0f007 	.word	0xffe0f007

08006e80 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_DCMI_Start_DMA+0x1c>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e0ab      	b.n	8006ff4 <HAL_DCMI_Start_DMA+0x174>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eba:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0202 	bic.w	r2, r2, #2
 8006eca:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee0:	4a46      	ldr	r2, [pc, #280]	; (8006ffc <HAL_DCMI_Start_DMA+0x17c>)
 8006ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee8:	4a45      	ldr	r2, [pc, #276]	; (8007000 <HAL_DCMI_Start_DMA+0x180>)
 8006eea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f12:	d219      	bcs.n	8006f48 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3328      	adds	r3, #40	; 0x28
 8006f1e:	4619      	mov	r1, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	f000 fd90 	bl	8007a48 <HAL_DMA_Start_IT>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d055      	beq.n	8006fda <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2240      	movs	r2, #64	; 0x40
 8006f32:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e055      	b.n	8006ff4 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4c:	4a2b      	ldr	r2, [pc, #172]	; (8006ffc <HAL_DCMI_Start_DMA+0x17c>)
 8006f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8006f62:	e009      	b.n	8006f78 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	085a      	lsrs	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	005a      	lsls	r2, r3, #1
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d2f0      	bcs.n	8006f64 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	1e9a      	subs	r2, r3, #2
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3328      	adds	r3, #40	; 0x28
 8006faa:	4619      	mov	r1, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	f003 fc73 	bl	800a8a0 <HAL_DMAEx_MultiBufferStart_IT>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00c      	beq.n	8006fda <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2240      	movs	r2, #64	; 0x40
 8006fc4:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e00c      	b.n	8006ff4 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0201 	orr.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	080071c9 	.word	0x080071c9
 8007000:	080072ef 	.word	0x080072ef

08007004 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800700c:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <HAL_DCMI_Stop+0xb8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <HAL_DCMI_Stop+0xbc>)
 8007012:	fba2 2303 	umull	r2, r3, r2, r3
 8007016:	0a5b      	lsrs	r3, r3, #9
 8007018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_DCMI_Stop+0x30>
 8007030:	2302      	movs	r3, #2
 8007032:	e03f      	b.n	80070b4 <HAL_DCMI_Stop+0xb0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3b01      	subs	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d108      	bne.n	8007072 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007064:	f043 0220 	orr.w	r2, r3, #32
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	72fb      	strb	r3, [r7, #11]
      break;
 8007070:	e006      	b.n	8007080 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e9      	bne.n	8007054 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800708e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007094:	4618      	mov	r0, r3
 8007096:	f000 ff41 	bl	8007f1c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80070b2:	7afb      	ldrb	r3, [r7, #11]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	24000044 	.word	0x24000044
 80070c0:	10624dd3 	.word	0x10624dd3

080070c4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d016      	beq.n	800710c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2204      	movs	r2, #4
 80070e4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ea:	f043 0202 	orr.w	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2204      	movs	r2, #4
 80070f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fe:	4a31      	ldr	r2, [pc, #196]	; (80071c4 <HAL_DCMI_IRQHandler+0x100>)
 8007100:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007106:	4618      	mov	r0, r3
 8007108:	f001 fa26 	bl	8008558 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d016      	beq.n	8007144 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2202      	movs	r2, #2
 800711c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007122:	f043 0201 	orr.w	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2204      	movs	r2, #4
 800712e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007136:	4a23      	ldr	r2, [pc, #140]	; (80071c4 <HAL_DCMI_IRQHandler+0x100>)
 8007138:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fa0a 	bl	8008558 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b00      	cmp	r3, #0
 800714c:	d006      	beq.n	800715c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2210      	movs	r2, #16
 8007154:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff f858 	bl	800620c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d006      	beq.n	8007174 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff f862 	bl	8006238 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01d      	beq.n	80071ba <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	d107      	bne.n	800719c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 021e 	bic.w	r2, r2, #30
 800719a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2201      	movs	r2, #1
 80071b2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f834 	bl	8006222 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	080072ef 	.word	0x080072ef

080071c8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d043      	beq.n	8007266 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ea:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d118      	bne.n	800722a <DCMI_DMAXferCplt+0x62>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d015      	beq.n	800722a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	00da      	lsls	r2, r3, #3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4413      	add	r3, r2
 8007216:	2200      	movs	r2, #0
 8007218:	4619      	mov	r1, r3
 800721a:	f003 fe9f 	bl	800af5c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	1e5a      	subs	r2, r3, #1
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	639a      	str	r2, [r3, #56]	; 0x38
 8007228:	e044      	b.n	80072b4 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d13c      	bne.n	80072b4 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	00da      	lsls	r2, r3, #3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	2201      	movs	r2, #1
 8007254:	4619      	mov	r1, r3
 8007256:	f003 fe81 	bl	800af5c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	1e5a      	subs	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
 8007264:	e026      	b.n	80072b4 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d006      	beq.n	8007284 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007280:	60da      	str	r2, [r3, #12]
 8007282:	e017      	b.n	80072b4 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10f      	bne.n	80072b4 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007298:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	0099      	lsls	r1, r3, #2
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	440a      	add	r2, r1
 80072aa:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	429a      	cmp	r2, r3
 80072be:	d112      	bne.n	80072e6 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d103      	bne.n	80072e6 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	2b02      	cmp	r3, #2
 8007304:	d009      	beq.n	800731a <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7fe ff97 	bl	800624e <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007330:	f7ff fafa 	bl	8006928 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e37f      	b.n	8007a40 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a66      	ldr	r2, [pc, #408]	; (80074e0 <HAL_DMA_Init+0x1b8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d04a      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a65      	ldr	r2, [pc, #404]	; (80074e4 <HAL_DMA_Init+0x1bc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d045      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a63      	ldr	r2, [pc, #396]	; (80074e8 <HAL_DMA_Init+0x1c0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d040      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a62      	ldr	r2, [pc, #392]	; (80074ec <HAL_DMA_Init+0x1c4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d03b      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a60      	ldr	r2, [pc, #384]	; (80074f0 <HAL_DMA_Init+0x1c8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d036      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a5f      	ldr	r2, [pc, #380]	; (80074f4 <HAL_DMA_Init+0x1cc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d031      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a5d      	ldr	r2, [pc, #372]	; (80074f8 <HAL_DMA_Init+0x1d0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d02c      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a5c      	ldr	r2, [pc, #368]	; (80074fc <HAL_DMA_Init+0x1d4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d027      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a5a      	ldr	r2, [pc, #360]	; (8007500 <HAL_DMA_Init+0x1d8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d022      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a59      	ldr	r2, [pc, #356]	; (8007504 <HAL_DMA_Init+0x1dc>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d01d      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a57      	ldr	r2, [pc, #348]	; (8007508 <HAL_DMA_Init+0x1e0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d018      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a56      	ldr	r2, [pc, #344]	; (800750c <HAL_DMA_Init+0x1e4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d013      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a54      	ldr	r2, [pc, #336]	; (8007510 <HAL_DMA_Init+0x1e8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00e      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a53      	ldr	r2, [pc, #332]	; (8007514 <HAL_DMA_Init+0x1ec>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a51      	ldr	r2, [pc, #324]	; (8007518 <HAL_DMA_Init+0x1f0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_DMA_Init+0xb8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a50      	ldr	r2, [pc, #320]	; (800751c <HAL_DMA_Init+0x1f4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d101      	bne.n	80073e4 <HAL_DMA_Init+0xbc>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e000      	b.n	80073e6 <HAL_DMA_Init+0xbe>
 80073e4:	2300      	movs	r3, #0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 813c 	beq.w	8007664 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a37      	ldr	r2, [pc, #220]	; (80074e0 <HAL_DMA_Init+0x1b8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d04a      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a36      	ldr	r2, [pc, #216]	; (80074e4 <HAL_DMA_Init+0x1bc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d045      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a34      	ldr	r2, [pc, #208]	; (80074e8 <HAL_DMA_Init+0x1c0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d040      	beq.n	800749c <HAL_DMA_Init+0x174>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a33      	ldr	r2, [pc, #204]	; (80074ec <HAL_DMA_Init+0x1c4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d03b      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a31      	ldr	r2, [pc, #196]	; (80074f0 <HAL_DMA_Init+0x1c8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d036      	beq.n	800749c <HAL_DMA_Init+0x174>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a30      	ldr	r2, [pc, #192]	; (80074f4 <HAL_DMA_Init+0x1cc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d031      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2e      	ldr	r2, [pc, #184]	; (80074f8 <HAL_DMA_Init+0x1d0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d02c      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2d      	ldr	r2, [pc, #180]	; (80074fc <HAL_DMA_Init+0x1d4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d027      	beq.n	800749c <HAL_DMA_Init+0x174>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a2b      	ldr	r2, [pc, #172]	; (8007500 <HAL_DMA_Init+0x1d8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d022      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2a      	ldr	r2, [pc, #168]	; (8007504 <HAL_DMA_Init+0x1dc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d01d      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a28      	ldr	r2, [pc, #160]	; (8007508 <HAL_DMA_Init+0x1e0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d018      	beq.n	800749c <HAL_DMA_Init+0x174>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a27      	ldr	r2, [pc, #156]	; (800750c <HAL_DMA_Init+0x1e4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a25      	ldr	r2, [pc, #148]	; (8007510 <HAL_DMA_Init+0x1e8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00e      	beq.n	800749c <HAL_DMA_Init+0x174>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a24      	ldr	r2, [pc, #144]	; (8007514 <HAL_DMA_Init+0x1ec>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d009      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a22      	ldr	r2, [pc, #136]	; (8007518 <HAL_DMA_Init+0x1f0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <HAL_DMA_Init+0x174>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a21      	ldr	r2, [pc, #132]	; (800751c <HAL_DMA_Init+0x1f4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d108      	bne.n	80074ae <HAL_DMA_Init+0x186>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	e007      	b.n	80074be <HAL_DMA_Init+0x196>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0201 	bic.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074be:	e02f      	b.n	8007520 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074c0:	f7ff fa32 	bl	8006928 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b05      	cmp	r3, #5
 80074cc:	d928      	bls.n	8007520 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2203      	movs	r2, #3
 80074d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e2af      	b.n	8007a40 <HAL_DMA_Init+0x718>
 80074e0:	40020010 	.word	0x40020010
 80074e4:	40020028 	.word	0x40020028
 80074e8:	40020040 	.word	0x40020040
 80074ec:	40020058 	.word	0x40020058
 80074f0:	40020070 	.word	0x40020070
 80074f4:	40020088 	.word	0x40020088
 80074f8:	400200a0 	.word	0x400200a0
 80074fc:	400200b8 	.word	0x400200b8
 8007500:	40020410 	.word	0x40020410
 8007504:	40020428 	.word	0x40020428
 8007508:	40020440 	.word	0x40020440
 800750c:	40020458 	.word	0x40020458
 8007510:	40020470 	.word	0x40020470
 8007514:	40020488 	.word	0x40020488
 8007518:	400204a0 	.word	0x400204a0
 800751c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1c8      	bne.n	80074c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4b73      	ldr	r3, [pc, #460]	; (8007708 <HAL_DMA_Init+0x3e0>)
 800753a:	4013      	ands	r3, r2
 800753c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007546:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007552:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800755e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2b04      	cmp	r3, #4
 8007572:	d107      	bne.n	8007584 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	4313      	orrs	r3, r2
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b28      	cmp	r3, #40	; 0x28
 800758a:	d903      	bls.n	8007594 <HAL_DMA_Init+0x26c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b2e      	cmp	r3, #46	; 0x2e
 8007592:	d91f      	bls.n	80075d4 <HAL_DMA_Init+0x2ac>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b3e      	cmp	r3, #62	; 0x3e
 800759a:	d903      	bls.n	80075a4 <HAL_DMA_Init+0x27c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b42      	cmp	r3, #66	; 0x42
 80075a2:	d917      	bls.n	80075d4 <HAL_DMA_Init+0x2ac>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b46      	cmp	r3, #70	; 0x46
 80075aa:	d903      	bls.n	80075b4 <HAL_DMA_Init+0x28c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2b48      	cmp	r3, #72	; 0x48
 80075b2:	d90f      	bls.n	80075d4 <HAL_DMA_Init+0x2ac>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b4e      	cmp	r3, #78	; 0x4e
 80075ba:	d903      	bls.n	80075c4 <HAL_DMA_Init+0x29c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b52      	cmp	r3, #82	; 0x52
 80075c2:	d907      	bls.n	80075d4 <HAL_DMA_Init+0x2ac>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b73      	cmp	r3, #115	; 0x73
 80075ca:	d905      	bls.n	80075d8 <HAL_DMA_Init+0x2b0>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b77      	cmp	r3, #119	; 0x77
 80075d2:	d801      	bhi.n	80075d8 <HAL_DMA_Init+0x2b0>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <HAL_DMA_Init+0x2b2>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f023 0307 	bic.w	r3, r3, #7
 80075fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b04      	cmp	r3, #4
 800760e:	d117      	bne.n	8007640 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00e      	beq.n	8007640 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f002 fbd6 	bl	8009dd4 <DMA_CheckFifoParam>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d008      	beq.n	8007640 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2240      	movs	r2, #64	; 0x40
 8007632:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e1ff      	b.n	8007a40 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f002 fb11 	bl	8009c70 <DMA_CalcBaseAndBitshift>
 800764e:	4603      	mov	r3, r0
 8007650:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	223f      	movs	r2, #63	; 0x3f
 800765c:	409a      	lsls	r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	609a      	str	r2, [r3, #8]
 8007662:	e0fe      	b.n	8007862 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a28      	ldr	r2, [pc, #160]	; (800770c <HAL_DMA_Init+0x3e4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d04a      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a27      	ldr	r2, [pc, #156]	; (8007710 <HAL_DMA_Init+0x3e8>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d045      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a25      	ldr	r2, [pc, #148]	; (8007714 <HAL_DMA_Init+0x3ec>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d040      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a24      	ldr	r2, [pc, #144]	; (8007718 <HAL_DMA_Init+0x3f0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d03b      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a22      	ldr	r2, [pc, #136]	; (800771c <HAL_DMA_Init+0x3f4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d036      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a21      	ldr	r2, [pc, #132]	; (8007720 <HAL_DMA_Init+0x3f8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d031      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1f      	ldr	r2, [pc, #124]	; (8007724 <HAL_DMA_Init+0x3fc>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d02c      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <HAL_DMA_Init+0x400>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d027      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1c      	ldr	r2, [pc, #112]	; (800772c <HAL_DMA_Init+0x404>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d022      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <HAL_DMA_Init+0x408>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d01d      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a19      	ldr	r2, [pc, #100]	; (8007734 <HAL_DMA_Init+0x40c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d018      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <HAL_DMA_Init+0x410>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a16      	ldr	r2, [pc, #88]	; (800773c <HAL_DMA_Init+0x414>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00e      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a15      	ldr	r2, [pc, #84]	; (8007740 <HAL_DMA_Init+0x418>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d009      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <HAL_DMA_Init+0x41c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d004      	beq.n	8007704 <HAL_DMA_Init+0x3dc>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a12      	ldr	r2, [pc, #72]	; (8007748 <HAL_DMA_Init+0x420>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d123      	bne.n	800774c <HAL_DMA_Init+0x424>
 8007704:	2301      	movs	r3, #1
 8007706:	e022      	b.n	800774e <HAL_DMA_Init+0x426>
 8007708:	fe10803f 	.word	0xfe10803f
 800770c:	48022c08 	.word	0x48022c08
 8007710:	48022c1c 	.word	0x48022c1c
 8007714:	48022c30 	.word	0x48022c30
 8007718:	48022c44 	.word	0x48022c44
 800771c:	48022c58 	.word	0x48022c58
 8007720:	48022c6c 	.word	0x48022c6c
 8007724:	48022c80 	.word	0x48022c80
 8007728:	48022c94 	.word	0x48022c94
 800772c:	58025408 	.word	0x58025408
 8007730:	5802541c 	.word	0x5802541c
 8007734:	58025430 	.word	0x58025430
 8007738:	58025444 	.word	0x58025444
 800773c:	58025458 	.word	0x58025458
 8007740:	5802546c 	.word	0x5802546c
 8007744:	58025480 	.word	0x58025480
 8007748:	58025494 	.word	0x58025494
 800774c:	2300      	movs	r3, #0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d07e      	beq.n	8007850 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a80      	ldr	r2, [pc, #512]	; (8007958 <HAL_DMA_Init+0x630>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d021      	beq.n	80077a0 <HAL_DMA_Init+0x478>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a7e      	ldr	r2, [pc, #504]	; (800795c <HAL_DMA_Init+0x634>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d01c      	beq.n	80077a0 <HAL_DMA_Init+0x478>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a7d      	ldr	r2, [pc, #500]	; (8007960 <HAL_DMA_Init+0x638>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d017      	beq.n	80077a0 <HAL_DMA_Init+0x478>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a7b      	ldr	r2, [pc, #492]	; (8007964 <HAL_DMA_Init+0x63c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d012      	beq.n	80077a0 <HAL_DMA_Init+0x478>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a7a      	ldr	r2, [pc, #488]	; (8007968 <HAL_DMA_Init+0x640>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00d      	beq.n	80077a0 <HAL_DMA_Init+0x478>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a78      	ldr	r2, [pc, #480]	; (800796c <HAL_DMA_Init+0x644>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d008      	beq.n	80077a0 <HAL_DMA_Init+0x478>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a77      	ldr	r2, [pc, #476]	; (8007970 <HAL_DMA_Init+0x648>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <HAL_DMA_Init+0x478>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a75      	ldr	r2, [pc, #468]	; (8007974 <HAL_DMA_Init+0x64c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4b6e      	ldr	r3, [pc, #440]	; (8007978 <HAL_DMA_Init+0x650>)
 80077be:	4013      	ands	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d008      	beq.n	80077dc <HAL_DMA_Init+0x4b4>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	d102      	bne.n	80077d8 <HAL_DMA_Init+0x4b0>
 80077d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077d6:	e002      	b.n	80077de <HAL_DMA_Init+0x4b6>
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <HAL_DMA_Init+0x4b6>
 80077dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	68d2      	ldr	r2, [r2, #12]
 80077e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800780c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	4b56      	ldr	r3, [pc, #344]	; (800797c <HAL_DMA_Init+0x654>)
 8007824:	4413      	add	r3, r2
 8007826:	4a56      	ldr	r2, [pc, #344]	; (8007980 <HAL_DMA_Init+0x658>)
 8007828:	fba2 2303 	umull	r2, r3, r2, r3
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	009a      	lsls	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f002 fa1b 	bl	8009c70 <DMA_CalcBaseAndBitshift>
 800783a:	4603      	mov	r3, r0
 800783c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007842:	f003 031f 	and.w	r3, r3, #31
 8007846:	2201      	movs	r2, #1
 8007848:	409a      	lsls	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	e008      	b.n	8007862 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2240      	movs	r2, #64	; 0x40
 8007854:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2203      	movs	r2, #3
 800785a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e0ee      	b.n	8007a40 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a47      	ldr	r2, [pc, #284]	; (8007984 <HAL_DMA_Init+0x65c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d072      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a45      	ldr	r2, [pc, #276]	; (8007988 <HAL_DMA_Init+0x660>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d06d      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a44      	ldr	r2, [pc, #272]	; (800798c <HAL_DMA_Init+0x664>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d068      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a42      	ldr	r2, [pc, #264]	; (8007990 <HAL_DMA_Init+0x668>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d063      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a41      	ldr	r2, [pc, #260]	; (8007994 <HAL_DMA_Init+0x66c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d05e      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <HAL_DMA_Init+0x670>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d059      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a3e      	ldr	r2, [pc, #248]	; (800799c <HAL_DMA_Init+0x674>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d054      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a3c      	ldr	r2, [pc, #240]	; (80079a0 <HAL_DMA_Init+0x678>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d04f      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a3b      	ldr	r2, [pc, #236]	; (80079a4 <HAL_DMA_Init+0x67c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d04a      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a39      	ldr	r2, [pc, #228]	; (80079a8 <HAL_DMA_Init+0x680>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d045      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a38      	ldr	r2, [pc, #224]	; (80079ac <HAL_DMA_Init+0x684>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d040      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a36      	ldr	r2, [pc, #216]	; (80079b0 <HAL_DMA_Init+0x688>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d03b      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <HAL_DMA_Init+0x68c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d036      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a33      	ldr	r2, [pc, #204]	; (80079b8 <HAL_DMA_Init+0x690>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d031      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a32      	ldr	r2, [pc, #200]	; (80079bc <HAL_DMA_Init+0x694>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d02c      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a30      	ldr	r2, [pc, #192]	; (80079c0 <HAL_DMA_Init+0x698>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d027      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a14      	ldr	r2, [pc, #80]	; (8007958 <HAL_DMA_Init+0x630>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d022      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a12      	ldr	r2, [pc, #72]	; (800795c <HAL_DMA_Init+0x634>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d01d      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a11      	ldr	r2, [pc, #68]	; (8007960 <HAL_DMA_Init+0x638>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d018      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a0f      	ldr	r2, [pc, #60]	; (8007964 <HAL_DMA_Init+0x63c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d013      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a0e      	ldr	r2, [pc, #56]	; (8007968 <HAL_DMA_Init+0x640>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00e      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a0c      	ldr	r2, [pc, #48]	; (800796c <HAL_DMA_Init+0x644>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d009      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a0b      	ldr	r2, [pc, #44]	; (8007970 <HAL_DMA_Init+0x648>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d004      	beq.n	8007952 <HAL_DMA_Init+0x62a>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a09      	ldr	r2, [pc, #36]	; (8007974 <HAL_DMA_Init+0x64c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d138      	bne.n	80079c4 <HAL_DMA_Init+0x69c>
 8007952:	2301      	movs	r3, #1
 8007954:	e037      	b.n	80079c6 <HAL_DMA_Init+0x69e>
 8007956:	bf00      	nop
 8007958:	58025408 	.word	0x58025408
 800795c:	5802541c 	.word	0x5802541c
 8007960:	58025430 	.word	0x58025430
 8007964:	58025444 	.word	0x58025444
 8007968:	58025458 	.word	0x58025458
 800796c:	5802546c 	.word	0x5802546c
 8007970:	58025480 	.word	0x58025480
 8007974:	58025494 	.word	0x58025494
 8007978:	fffe000f 	.word	0xfffe000f
 800797c:	a7fdabf8 	.word	0xa7fdabf8
 8007980:	cccccccd 	.word	0xcccccccd
 8007984:	40020010 	.word	0x40020010
 8007988:	40020028 	.word	0x40020028
 800798c:	40020040 	.word	0x40020040
 8007990:	40020058 	.word	0x40020058
 8007994:	40020070 	.word	0x40020070
 8007998:	40020088 	.word	0x40020088
 800799c:	400200a0 	.word	0x400200a0
 80079a0:	400200b8 	.word	0x400200b8
 80079a4:	40020410 	.word	0x40020410
 80079a8:	40020428 	.word	0x40020428
 80079ac:	40020440 	.word	0x40020440
 80079b0:	40020458 	.word	0x40020458
 80079b4:	40020470 	.word	0x40020470
 80079b8:	40020488 	.word	0x40020488
 80079bc:	400204a0 	.word	0x400204a0
 80079c0:	400204b8 	.word	0x400204b8
 80079c4:	2300      	movs	r3, #0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d032      	beq.n	8007a30 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f002 fa7e 	bl	8009ecc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d102      	bne.n	80079de <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079f2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d010      	beq.n	8007a1e <HAL_DMA_Init+0x6f6>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d80c      	bhi.n	8007a1e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f002 fafb 	bl	800a000 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a1a:	605a      	str	r2, [r3, #4]
 8007a1c:	e008      	b.n	8007a30 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e226      	b.n	8007eb2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_DMA_Start_IT+0x2a>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e21f      	b.n	8007eb2 <HAL_DMA_Start_IT+0x46a>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	f040 820a 	bne.w	8007e9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a68      	ldr	r2, [pc, #416]	; (8007c3c <HAL_DMA_Start_IT+0x1f4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d04a      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a66      	ldr	r2, [pc, #408]	; (8007c40 <HAL_DMA_Start_IT+0x1f8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d045      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a65      	ldr	r2, [pc, #404]	; (8007c44 <HAL_DMA_Start_IT+0x1fc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d040      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a63      	ldr	r2, [pc, #396]	; (8007c48 <HAL_DMA_Start_IT+0x200>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d03b      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a62      	ldr	r2, [pc, #392]	; (8007c4c <HAL_DMA_Start_IT+0x204>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d036      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a60      	ldr	r2, [pc, #384]	; (8007c50 <HAL_DMA_Start_IT+0x208>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d031      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a5f      	ldr	r2, [pc, #380]	; (8007c54 <HAL_DMA_Start_IT+0x20c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d02c      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a5d      	ldr	r2, [pc, #372]	; (8007c58 <HAL_DMA_Start_IT+0x210>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d027      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a5c      	ldr	r2, [pc, #368]	; (8007c5c <HAL_DMA_Start_IT+0x214>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d022      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a5a      	ldr	r2, [pc, #360]	; (8007c60 <HAL_DMA_Start_IT+0x218>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01d      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a59      	ldr	r2, [pc, #356]	; (8007c64 <HAL_DMA_Start_IT+0x21c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d018      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a57      	ldr	r2, [pc, #348]	; (8007c68 <HAL_DMA_Start_IT+0x220>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a56      	ldr	r2, [pc, #344]	; (8007c6c <HAL_DMA_Start_IT+0x224>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00e      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a54      	ldr	r2, [pc, #336]	; (8007c70 <HAL_DMA_Start_IT+0x228>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d009      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a53      	ldr	r2, [pc, #332]	; (8007c74 <HAL_DMA_Start_IT+0x22c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d004      	beq.n	8007b36 <HAL_DMA_Start_IT+0xee>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a51      	ldr	r2, [pc, #324]	; (8007c78 <HAL_DMA_Start_IT+0x230>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <HAL_DMA_Start_IT+0x100>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	e007      	b.n	8007b58 <HAL_DMA_Start_IT+0x110>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f001 fea2 	bl	80098a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a34      	ldr	r2, [pc, #208]	; (8007c3c <HAL_DMA_Start_IT+0x1f4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d04a      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a33      	ldr	r2, [pc, #204]	; (8007c40 <HAL_DMA_Start_IT+0x1f8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d045      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a31      	ldr	r2, [pc, #196]	; (8007c44 <HAL_DMA_Start_IT+0x1fc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d040      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a30      	ldr	r2, [pc, #192]	; (8007c48 <HAL_DMA_Start_IT+0x200>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d03b      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2e      	ldr	r2, [pc, #184]	; (8007c4c <HAL_DMA_Start_IT+0x204>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d036      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	; (8007c50 <HAL_DMA_Start_IT+0x208>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d031      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2b      	ldr	r2, [pc, #172]	; (8007c54 <HAL_DMA_Start_IT+0x20c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d02c      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <HAL_DMA_Start_IT+0x210>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d027      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a28      	ldr	r2, [pc, #160]	; (8007c5c <HAL_DMA_Start_IT+0x214>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d022      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a27      	ldr	r2, [pc, #156]	; (8007c60 <HAL_DMA_Start_IT+0x218>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d01d      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a25      	ldr	r2, [pc, #148]	; (8007c64 <HAL_DMA_Start_IT+0x21c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d018      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a24      	ldr	r2, [pc, #144]	; (8007c68 <HAL_DMA_Start_IT+0x220>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a22      	ldr	r2, [pc, #136]	; (8007c6c <HAL_DMA_Start_IT+0x224>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00e      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a21      	ldr	r2, [pc, #132]	; (8007c70 <HAL_DMA_Start_IT+0x228>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d009      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <HAL_DMA_Start_IT+0x22c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d004      	beq.n	8007c04 <HAL_DMA_Start_IT+0x1bc>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1e      	ldr	r2, [pc, #120]	; (8007c78 <HAL_DMA_Start_IT+0x230>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d101      	bne.n	8007c08 <HAL_DMA_Start_IT+0x1c0>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <HAL_DMA_Start_IT+0x1c2>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d036      	beq.n	8007c7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f023 021e 	bic.w	r2, r3, #30
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0216 	orr.w	r2, r2, #22
 8007c20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d03e      	beq.n	8007ca8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0208 	orr.w	r2, r2, #8
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e035      	b.n	8007ca8 <HAL_DMA_Start_IT+0x260>
 8007c3c:	40020010 	.word	0x40020010
 8007c40:	40020028 	.word	0x40020028
 8007c44:	40020040 	.word	0x40020040
 8007c48:	40020058 	.word	0x40020058
 8007c4c:	40020070 	.word	0x40020070
 8007c50:	40020088 	.word	0x40020088
 8007c54:	400200a0 	.word	0x400200a0
 8007c58:	400200b8 	.word	0x400200b8
 8007c5c:	40020410 	.word	0x40020410
 8007c60:	40020428 	.word	0x40020428
 8007c64:	40020440 	.word	0x40020440
 8007c68:	40020458 	.word	0x40020458
 8007c6c:	40020470 	.word	0x40020470
 8007c70:	40020488 	.word	0x40020488
 8007c74:	400204a0 	.word	0x400204a0
 8007c78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f023 020e 	bic.w	r2, r3, #14
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 020a 	orr.w	r2, r2, #10
 8007c8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0204 	orr.w	r2, r2, #4
 8007ca6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a83      	ldr	r2, [pc, #524]	; (8007ebc <HAL_DMA_Start_IT+0x474>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d072      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a82      	ldr	r2, [pc, #520]	; (8007ec0 <HAL_DMA_Start_IT+0x478>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d06d      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a80      	ldr	r2, [pc, #512]	; (8007ec4 <HAL_DMA_Start_IT+0x47c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d068      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a7f      	ldr	r2, [pc, #508]	; (8007ec8 <HAL_DMA_Start_IT+0x480>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d063      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a7d      	ldr	r2, [pc, #500]	; (8007ecc <HAL_DMA_Start_IT+0x484>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d05e      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a7c      	ldr	r2, [pc, #496]	; (8007ed0 <HAL_DMA_Start_IT+0x488>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d059      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a7a      	ldr	r2, [pc, #488]	; (8007ed4 <HAL_DMA_Start_IT+0x48c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d054      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a79      	ldr	r2, [pc, #484]	; (8007ed8 <HAL_DMA_Start_IT+0x490>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d04f      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a77      	ldr	r2, [pc, #476]	; (8007edc <HAL_DMA_Start_IT+0x494>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d04a      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a76      	ldr	r2, [pc, #472]	; (8007ee0 <HAL_DMA_Start_IT+0x498>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d045      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a74      	ldr	r2, [pc, #464]	; (8007ee4 <HAL_DMA_Start_IT+0x49c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d040      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a73      	ldr	r2, [pc, #460]	; (8007ee8 <HAL_DMA_Start_IT+0x4a0>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d03b      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a71      	ldr	r2, [pc, #452]	; (8007eec <HAL_DMA_Start_IT+0x4a4>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d036      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a70      	ldr	r2, [pc, #448]	; (8007ef0 <HAL_DMA_Start_IT+0x4a8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d031      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a6e      	ldr	r2, [pc, #440]	; (8007ef4 <HAL_DMA_Start_IT+0x4ac>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d02c      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a6d      	ldr	r2, [pc, #436]	; (8007ef8 <HAL_DMA_Start_IT+0x4b0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d027      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a6b      	ldr	r2, [pc, #428]	; (8007efc <HAL_DMA_Start_IT+0x4b4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d022      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a6a      	ldr	r2, [pc, #424]	; (8007f00 <HAL_DMA_Start_IT+0x4b8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d01d      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a68      	ldr	r2, [pc, #416]	; (8007f04 <HAL_DMA_Start_IT+0x4bc>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d018      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a67      	ldr	r2, [pc, #412]	; (8007f08 <HAL_DMA_Start_IT+0x4c0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d013      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a65      	ldr	r2, [pc, #404]	; (8007f0c <HAL_DMA_Start_IT+0x4c4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00e      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a64      	ldr	r2, [pc, #400]	; (8007f10 <HAL_DMA_Start_IT+0x4c8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d009      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a62      	ldr	r2, [pc, #392]	; (8007f14 <HAL_DMA_Start_IT+0x4cc>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <HAL_DMA_Start_IT+0x350>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a61      	ldr	r2, [pc, #388]	; (8007f18 <HAL_DMA_Start_IT+0x4d0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d101      	bne.n	8007d9c <HAL_DMA_Start_IT+0x354>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e000      	b.n	8007d9e <HAL_DMA_Start_IT+0x356>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01a      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dbe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a37      	ldr	r2, [pc, #220]	; (8007ebc <HAL_DMA_Start_IT+0x474>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d04a      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a36      	ldr	r2, [pc, #216]	; (8007ec0 <HAL_DMA_Start_IT+0x478>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d045      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a34      	ldr	r2, [pc, #208]	; (8007ec4 <HAL_DMA_Start_IT+0x47c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d040      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a33      	ldr	r2, [pc, #204]	; (8007ec8 <HAL_DMA_Start_IT+0x480>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d03b      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a31      	ldr	r2, [pc, #196]	; (8007ecc <HAL_DMA_Start_IT+0x484>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d036      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a30      	ldr	r2, [pc, #192]	; (8007ed0 <HAL_DMA_Start_IT+0x488>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d031      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a2e      	ldr	r2, [pc, #184]	; (8007ed4 <HAL_DMA_Start_IT+0x48c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d02c      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a2d      	ldr	r2, [pc, #180]	; (8007ed8 <HAL_DMA_Start_IT+0x490>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d027      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a2b      	ldr	r2, [pc, #172]	; (8007edc <HAL_DMA_Start_IT+0x494>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d022      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a2a      	ldr	r2, [pc, #168]	; (8007ee0 <HAL_DMA_Start_IT+0x498>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01d      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a28      	ldr	r2, [pc, #160]	; (8007ee4 <HAL_DMA_Start_IT+0x49c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d018      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a27      	ldr	r2, [pc, #156]	; (8007ee8 <HAL_DMA_Start_IT+0x4a0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d013      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a25      	ldr	r2, [pc, #148]	; (8007eec <HAL_DMA_Start_IT+0x4a4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00e      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a24      	ldr	r2, [pc, #144]	; (8007ef0 <HAL_DMA_Start_IT+0x4a8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d009      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a22      	ldr	r2, [pc, #136]	; (8007ef4 <HAL_DMA_Start_IT+0x4ac>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <HAL_DMA_Start_IT+0x430>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a21      	ldr	r2, [pc, #132]	; (8007ef8 <HAL_DMA_Start_IT+0x4b0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d108      	bne.n	8007e8a <HAL_DMA_Start_IT+0x442>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0201 	orr.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	e012      	b.n	8007eb0 <HAL_DMA_Start_IT+0x468>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0201 	orr.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	e009      	b.n	8007eb0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ea2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40020010 	.word	0x40020010
 8007ec0:	40020028 	.word	0x40020028
 8007ec4:	40020040 	.word	0x40020040
 8007ec8:	40020058 	.word	0x40020058
 8007ecc:	40020070 	.word	0x40020070
 8007ed0:	40020088 	.word	0x40020088
 8007ed4:	400200a0 	.word	0x400200a0
 8007ed8:	400200b8 	.word	0x400200b8
 8007edc:	40020410 	.word	0x40020410
 8007ee0:	40020428 	.word	0x40020428
 8007ee4:	40020440 	.word	0x40020440
 8007ee8:	40020458 	.word	0x40020458
 8007eec:	40020470 	.word	0x40020470
 8007ef0:	40020488 	.word	0x40020488
 8007ef4:	400204a0 	.word	0x400204a0
 8007ef8:	400204b8 	.word	0x400204b8
 8007efc:	58025408 	.word	0x58025408
 8007f00:	5802541c 	.word	0x5802541c
 8007f04:	58025430 	.word	0x58025430
 8007f08:	58025444 	.word	0x58025444
 8007f0c:	58025458 	.word	0x58025458
 8007f10:	5802546c 	.word	0x5802546c
 8007f14:	58025480 	.word	0x58025480
 8007f18:	58025494 	.word	0x58025494

08007f1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007f24:	f7fe fd00 	bl	8006928 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e2dc      	b.n	80084ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d008      	beq.n	8007f52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2280      	movs	r2, #128	; 0x80
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e2cd      	b.n	80084ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a76      	ldr	r2, [pc, #472]	; (8008130 <HAL_DMA_Abort+0x214>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d04a      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a74      	ldr	r2, [pc, #464]	; (8008134 <HAL_DMA_Abort+0x218>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d045      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a73      	ldr	r2, [pc, #460]	; (8008138 <HAL_DMA_Abort+0x21c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d040      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a71      	ldr	r2, [pc, #452]	; (800813c <HAL_DMA_Abort+0x220>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d03b      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a70      	ldr	r2, [pc, #448]	; (8008140 <HAL_DMA_Abort+0x224>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d036      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a6e      	ldr	r2, [pc, #440]	; (8008144 <HAL_DMA_Abort+0x228>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d031      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a6d      	ldr	r2, [pc, #436]	; (8008148 <HAL_DMA_Abort+0x22c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d02c      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a6b      	ldr	r2, [pc, #428]	; (800814c <HAL_DMA_Abort+0x230>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d027      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a6a      	ldr	r2, [pc, #424]	; (8008150 <HAL_DMA_Abort+0x234>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a68      	ldr	r2, [pc, #416]	; (8008154 <HAL_DMA_Abort+0x238>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a67      	ldr	r2, [pc, #412]	; (8008158 <HAL_DMA_Abort+0x23c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a65      	ldr	r2, [pc, #404]	; (800815c <HAL_DMA_Abort+0x240>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a64      	ldr	r2, [pc, #400]	; (8008160 <HAL_DMA_Abort+0x244>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a62      	ldr	r2, [pc, #392]	; (8008164 <HAL_DMA_Abort+0x248>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a61      	ldr	r2, [pc, #388]	; (8008168 <HAL_DMA_Abort+0x24c>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_DMA_Abort+0xd6>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a5f      	ldr	r2, [pc, #380]	; (800816c <HAL_DMA_Abort+0x250>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d101      	bne.n	8007ff6 <HAL_DMA_Abort+0xda>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <HAL_DMA_Abort+0xdc>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d013      	beq.n	8008024 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 021e 	bic.w	r2, r2, #30
 800800a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695a      	ldr	r2, [r3, #20]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800801a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	e00a      	b.n	800803a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 020e 	bic.w	r2, r2, #14
 8008032:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a3c      	ldr	r2, [pc, #240]	; (8008130 <HAL_DMA_Abort+0x214>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d072      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a3a      	ldr	r2, [pc, #232]	; (8008134 <HAL_DMA_Abort+0x218>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d06d      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a39      	ldr	r2, [pc, #228]	; (8008138 <HAL_DMA_Abort+0x21c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d068      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a37      	ldr	r2, [pc, #220]	; (800813c <HAL_DMA_Abort+0x220>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d063      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a36      	ldr	r2, [pc, #216]	; (8008140 <HAL_DMA_Abort+0x224>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d05e      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a34      	ldr	r2, [pc, #208]	; (8008144 <HAL_DMA_Abort+0x228>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d059      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a33      	ldr	r2, [pc, #204]	; (8008148 <HAL_DMA_Abort+0x22c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d054      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a31      	ldr	r2, [pc, #196]	; (800814c <HAL_DMA_Abort+0x230>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d04f      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a30      	ldr	r2, [pc, #192]	; (8008150 <HAL_DMA_Abort+0x234>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d04a      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a2e      	ldr	r2, [pc, #184]	; (8008154 <HAL_DMA_Abort+0x238>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d045      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a2d      	ldr	r2, [pc, #180]	; (8008158 <HAL_DMA_Abort+0x23c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d040      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a2b      	ldr	r2, [pc, #172]	; (800815c <HAL_DMA_Abort+0x240>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d03b      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a2a      	ldr	r2, [pc, #168]	; (8008160 <HAL_DMA_Abort+0x244>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d036      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a28      	ldr	r2, [pc, #160]	; (8008164 <HAL_DMA_Abort+0x248>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d031      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a27      	ldr	r2, [pc, #156]	; (8008168 <HAL_DMA_Abort+0x24c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d02c      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a25      	ldr	r2, [pc, #148]	; (800816c <HAL_DMA_Abort+0x250>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d027      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a24      	ldr	r2, [pc, #144]	; (8008170 <HAL_DMA_Abort+0x254>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d022      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a22      	ldr	r2, [pc, #136]	; (8008174 <HAL_DMA_Abort+0x258>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d01d      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a21      	ldr	r2, [pc, #132]	; (8008178 <HAL_DMA_Abort+0x25c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d018      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1f      	ldr	r2, [pc, #124]	; (800817c <HAL_DMA_Abort+0x260>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d013      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <HAL_DMA_Abort+0x264>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00e      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a1c      	ldr	r2, [pc, #112]	; (8008184 <HAL_DMA_Abort+0x268>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d009      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1b      	ldr	r2, [pc, #108]	; (8008188 <HAL_DMA_Abort+0x26c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d004      	beq.n	800812a <HAL_DMA_Abort+0x20e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a19      	ldr	r2, [pc, #100]	; (800818c <HAL_DMA_Abort+0x270>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d132      	bne.n	8008190 <HAL_DMA_Abort+0x274>
 800812a:	2301      	movs	r3, #1
 800812c:	e031      	b.n	8008192 <HAL_DMA_Abort+0x276>
 800812e:	bf00      	nop
 8008130:	40020010 	.word	0x40020010
 8008134:	40020028 	.word	0x40020028
 8008138:	40020040 	.word	0x40020040
 800813c:	40020058 	.word	0x40020058
 8008140:	40020070 	.word	0x40020070
 8008144:	40020088 	.word	0x40020088
 8008148:	400200a0 	.word	0x400200a0
 800814c:	400200b8 	.word	0x400200b8
 8008150:	40020410 	.word	0x40020410
 8008154:	40020428 	.word	0x40020428
 8008158:	40020440 	.word	0x40020440
 800815c:	40020458 	.word	0x40020458
 8008160:	40020470 	.word	0x40020470
 8008164:	40020488 	.word	0x40020488
 8008168:	400204a0 	.word	0x400204a0
 800816c:	400204b8 	.word	0x400204b8
 8008170:	58025408 	.word	0x58025408
 8008174:	5802541c 	.word	0x5802541c
 8008178:	58025430 	.word	0x58025430
 800817c:	58025444 	.word	0x58025444
 8008180:	58025458 	.word	0x58025458
 8008184:	5802546c 	.word	0x5802546c
 8008188:	58025480 	.word	0x58025480
 800818c:	58025494 	.word	0x58025494
 8008190:	2300      	movs	r3, #0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a6d      	ldr	r2, [pc, #436]	; (8008360 <HAL_DMA_Abort+0x444>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d04a      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a6b      	ldr	r2, [pc, #428]	; (8008364 <HAL_DMA_Abort+0x448>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d045      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a6a      	ldr	r2, [pc, #424]	; (8008368 <HAL_DMA_Abort+0x44c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d040      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a68      	ldr	r2, [pc, #416]	; (800836c <HAL_DMA_Abort+0x450>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d03b      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a67      	ldr	r2, [pc, #412]	; (8008370 <HAL_DMA_Abort+0x454>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d036      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a65      	ldr	r2, [pc, #404]	; (8008374 <HAL_DMA_Abort+0x458>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d031      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a64      	ldr	r2, [pc, #400]	; (8008378 <HAL_DMA_Abort+0x45c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d02c      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a62      	ldr	r2, [pc, #392]	; (800837c <HAL_DMA_Abort+0x460>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d027      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a61      	ldr	r2, [pc, #388]	; (8008380 <HAL_DMA_Abort+0x464>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d022      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a5f      	ldr	r2, [pc, #380]	; (8008384 <HAL_DMA_Abort+0x468>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d01d      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a5e      	ldr	r2, [pc, #376]	; (8008388 <HAL_DMA_Abort+0x46c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d018      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a5c      	ldr	r2, [pc, #368]	; (800838c <HAL_DMA_Abort+0x470>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d013      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a5b      	ldr	r2, [pc, #364]	; (8008390 <HAL_DMA_Abort+0x474>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00e      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a59      	ldr	r2, [pc, #356]	; (8008394 <HAL_DMA_Abort+0x478>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a58      	ldr	r2, [pc, #352]	; (8008398 <HAL_DMA_Abort+0x47c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d004      	beq.n	8008246 <HAL_DMA_Abort+0x32a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a56      	ldr	r2, [pc, #344]	; (800839c <HAL_DMA_Abort+0x480>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d108      	bne.n	8008258 <HAL_DMA_Abort+0x33c>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0201 	bic.w	r2, r2, #1
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	e007      	b.n	8008268 <HAL_DMA_Abort+0x34c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0201 	bic.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008268:	e013      	b.n	8008292 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800826a:	f7fe fb5d 	bl	8006928 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b05      	cmp	r3, #5
 8008276:	d90c      	bls.n	8008292 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2203      	movs	r2, #3
 8008282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e12d      	b.n	80084ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2f      	ldr	r2, [pc, #188]	; (8008360 <HAL_DMA_Abort+0x444>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d04a      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a2d      	ldr	r2, [pc, #180]	; (8008364 <HAL_DMA_Abort+0x448>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d045      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a2c      	ldr	r2, [pc, #176]	; (8008368 <HAL_DMA_Abort+0x44c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d040      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2a      	ldr	r2, [pc, #168]	; (800836c <HAL_DMA_Abort+0x450>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d03b      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a29      	ldr	r2, [pc, #164]	; (8008370 <HAL_DMA_Abort+0x454>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d036      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a27      	ldr	r2, [pc, #156]	; (8008374 <HAL_DMA_Abort+0x458>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d031      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a26      	ldr	r2, [pc, #152]	; (8008378 <HAL_DMA_Abort+0x45c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d02c      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a24      	ldr	r2, [pc, #144]	; (800837c <HAL_DMA_Abort+0x460>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d027      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a23      	ldr	r2, [pc, #140]	; (8008380 <HAL_DMA_Abort+0x464>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d022      	beq.n	800833e <HAL_DMA_Abort+0x422>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a21      	ldr	r2, [pc, #132]	; (8008384 <HAL_DMA_Abort+0x468>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01d      	beq.n	800833e <HAL_DMA_Abort+0x422>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a20      	ldr	r2, [pc, #128]	; (8008388 <HAL_DMA_Abort+0x46c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d018      	beq.n	800833e <HAL_DMA_Abort+0x422>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a1e      	ldr	r2, [pc, #120]	; (800838c <HAL_DMA_Abort+0x470>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <HAL_DMA_Abort+0x422>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a1d      	ldr	r2, [pc, #116]	; (8008390 <HAL_DMA_Abort+0x474>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <HAL_DMA_Abort+0x422>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a1b      	ldr	r2, [pc, #108]	; (8008394 <HAL_DMA_Abort+0x478>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d009      	beq.n	800833e <HAL_DMA_Abort+0x422>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1a      	ldr	r2, [pc, #104]	; (8008398 <HAL_DMA_Abort+0x47c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_DMA_Abort+0x422>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a18      	ldr	r2, [pc, #96]	; (800839c <HAL_DMA_Abort+0x480>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d101      	bne.n	8008342 <HAL_DMA_Abort+0x426>
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <HAL_DMA_Abort+0x428>
 8008342:	2300      	movs	r3, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d02b      	beq.n	80083a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008352:	f003 031f 	and.w	r3, r3, #31
 8008356:	223f      	movs	r2, #63	; 0x3f
 8008358:	409a      	lsls	r2, r3
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	609a      	str	r2, [r3, #8]
 800835e:	e02a      	b.n	80083b6 <HAL_DMA_Abort+0x49a>
 8008360:	40020010 	.word	0x40020010
 8008364:	40020028 	.word	0x40020028
 8008368:	40020040 	.word	0x40020040
 800836c:	40020058 	.word	0x40020058
 8008370:	40020070 	.word	0x40020070
 8008374:	40020088 	.word	0x40020088
 8008378:	400200a0 	.word	0x400200a0
 800837c:	400200b8 	.word	0x400200b8
 8008380:	40020410 	.word	0x40020410
 8008384:	40020428 	.word	0x40020428
 8008388:	40020440 	.word	0x40020440
 800838c:	40020458 	.word	0x40020458
 8008390:	40020470 	.word	0x40020470
 8008394:	40020488 	.word	0x40020488
 8008398:	400204a0 	.word	0x400204a0
 800839c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083aa:	f003 031f 	and.w	r3, r3, #31
 80083ae:	2201      	movs	r2, #1
 80083b0:	409a      	lsls	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a4f      	ldr	r2, [pc, #316]	; (80084f8 <HAL_DMA_Abort+0x5dc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d072      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a4d      	ldr	r2, [pc, #308]	; (80084fc <HAL_DMA_Abort+0x5e0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d06d      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a4c      	ldr	r2, [pc, #304]	; (8008500 <HAL_DMA_Abort+0x5e4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d068      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a4a      	ldr	r2, [pc, #296]	; (8008504 <HAL_DMA_Abort+0x5e8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d063      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a49      	ldr	r2, [pc, #292]	; (8008508 <HAL_DMA_Abort+0x5ec>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d05e      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a47      	ldr	r2, [pc, #284]	; (800850c <HAL_DMA_Abort+0x5f0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d059      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a46      	ldr	r2, [pc, #280]	; (8008510 <HAL_DMA_Abort+0x5f4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d054      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a44      	ldr	r2, [pc, #272]	; (8008514 <HAL_DMA_Abort+0x5f8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d04f      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a43      	ldr	r2, [pc, #268]	; (8008518 <HAL_DMA_Abort+0x5fc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d04a      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a41      	ldr	r2, [pc, #260]	; (800851c <HAL_DMA_Abort+0x600>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d045      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a40      	ldr	r2, [pc, #256]	; (8008520 <HAL_DMA_Abort+0x604>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d040      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a3e      	ldr	r2, [pc, #248]	; (8008524 <HAL_DMA_Abort+0x608>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d03b      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a3d      	ldr	r2, [pc, #244]	; (8008528 <HAL_DMA_Abort+0x60c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d036      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a3b      	ldr	r2, [pc, #236]	; (800852c <HAL_DMA_Abort+0x610>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d031      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a3a      	ldr	r2, [pc, #232]	; (8008530 <HAL_DMA_Abort+0x614>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d02c      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a38      	ldr	r2, [pc, #224]	; (8008534 <HAL_DMA_Abort+0x618>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d027      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a37      	ldr	r2, [pc, #220]	; (8008538 <HAL_DMA_Abort+0x61c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d022      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a35      	ldr	r2, [pc, #212]	; (800853c <HAL_DMA_Abort+0x620>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d01d      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a34      	ldr	r2, [pc, #208]	; (8008540 <HAL_DMA_Abort+0x624>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d018      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a32      	ldr	r2, [pc, #200]	; (8008544 <HAL_DMA_Abort+0x628>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d013      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a31      	ldr	r2, [pc, #196]	; (8008548 <HAL_DMA_Abort+0x62c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00e      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a2f      	ldr	r2, [pc, #188]	; (800854c <HAL_DMA_Abort+0x630>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d009      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a2e      	ldr	r2, [pc, #184]	; (8008550 <HAL_DMA_Abort+0x634>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d004      	beq.n	80084a6 <HAL_DMA_Abort+0x58a>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a2c      	ldr	r2, [pc, #176]	; (8008554 <HAL_DMA_Abort+0x638>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d101      	bne.n	80084aa <HAL_DMA_Abort+0x58e>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <HAL_DMA_Abort+0x590>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d015      	beq.n	80084dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00c      	beq.n	80084dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40020010 	.word	0x40020010
 80084fc:	40020028 	.word	0x40020028
 8008500:	40020040 	.word	0x40020040
 8008504:	40020058 	.word	0x40020058
 8008508:	40020070 	.word	0x40020070
 800850c:	40020088 	.word	0x40020088
 8008510:	400200a0 	.word	0x400200a0
 8008514:	400200b8 	.word	0x400200b8
 8008518:	40020410 	.word	0x40020410
 800851c:	40020428 	.word	0x40020428
 8008520:	40020440 	.word	0x40020440
 8008524:	40020458 	.word	0x40020458
 8008528:	40020470 	.word	0x40020470
 800852c:	40020488 	.word	0x40020488
 8008530:	400204a0 	.word	0x400204a0
 8008534:	400204b8 	.word	0x400204b8
 8008538:	58025408 	.word	0x58025408
 800853c:	5802541c 	.word	0x5802541c
 8008540:	58025430 	.word	0x58025430
 8008544:	58025444 	.word	0x58025444
 8008548:	58025458 	.word	0x58025458
 800854c:	5802546c 	.word	0x5802546c
 8008550:	58025480 	.word	0x58025480
 8008554:	58025494 	.word	0x58025494

08008558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e237      	b.n	80089da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d004      	beq.n	8008580 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2280      	movs	r2, #128	; 0x80
 800857a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e22c      	b.n	80089da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a5c      	ldr	r2, [pc, #368]	; (80086f8 <HAL_DMA_Abort_IT+0x1a0>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d04a      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a5b      	ldr	r2, [pc, #364]	; (80086fc <HAL_DMA_Abort_IT+0x1a4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d045      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a59      	ldr	r2, [pc, #356]	; (8008700 <HAL_DMA_Abort_IT+0x1a8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d040      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a58      	ldr	r2, [pc, #352]	; (8008704 <HAL_DMA_Abort_IT+0x1ac>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d03b      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a56      	ldr	r2, [pc, #344]	; (8008708 <HAL_DMA_Abort_IT+0x1b0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d036      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a55      	ldr	r2, [pc, #340]	; (800870c <HAL_DMA_Abort_IT+0x1b4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d031      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a53      	ldr	r2, [pc, #332]	; (8008710 <HAL_DMA_Abort_IT+0x1b8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d02c      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a52      	ldr	r2, [pc, #328]	; (8008714 <HAL_DMA_Abort_IT+0x1bc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d027      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a50      	ldr	r2, [pc, #320]	; (8008718 <HAL_DMA_Abort_IT+0x1c0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d022      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a4f      	ldr	r2, [pc, #316]	; (800871c <HAL_DMA_Abort_IT+0x1c4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d01d      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a4d      	ldr	r2, [pc, #308]	; (8008720 <HAL_DMA_Abort_IT+0x1c8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d018      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a4c      	ldr	r2, [pc, #304]	; (8008724 <HAL_DMA_Abort_IT+0x1cc>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d013      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a4a      	ldr	r2, [pc, #296]	; (8008728 <HAL_DMA_Abort_IT+0x1d0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00e      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a49      	ldr	r2, [pc, #292]	; (800872c <HAL_DMA_Abort_IT+0x1d4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d009      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a47      	ldr	r2, [pc, #284]	; (8008730 <HAL_DMA_Abort_IT+0x1d8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d004      	beq.n	8008620 <HAL_DMA_Abort_IT+0xc8>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a46      	ldr	r2, [pc, #280]	; (8008734 <HAL_DMA_Abort_IT+0x1dc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d101      	bne.n	8008624 <HAL_DMA_Abort_IT+0xcc>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <HAL_DMA_Abort_IT+0xce>
 8008624:	2300      	movs	r3, #0
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 8086 	beq.w	8008738 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2204      	movs	r2, #4
 8008630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a2f      	ldr	r2, [pc, #188]	; (80086f8 <HAL_DMA_Abort_IT+0x1a0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d04a      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a2e      	ldr	r2, [pc, #184]	; (80086fc <HAL_DMA_Abort_IT+0x1a4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d045      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a2c      	ldr	r2, [pc, #176]	; (8008700 <HAL_DMA_Abort_IT+0x1a8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d040      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a2b      	ldr	r2, [pc, #172]	; (8008704 <HAL_DMA_Abort_IT+0x1ac>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d03b      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a29      	ldr	r2, [pc, #164]	; (8008708 <HAL_DMA_Abort_IT+0x1b0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d036      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a28      	ldr	r2, [pc, #160]	; (800870c <HAL_DMA_Abort_IT+0x1b4>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d031      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a26      	ldr	r2, [pc, #152]	; (8008710 <HAL_DMA_Abort_IT+0x1b8>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d02c      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a25      	ldr	r2, [pc, #148]	; (8008714 <HAL_DMA_Abort_IT+0x1bc>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d027      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a23      	ldr	r2, [pc, #140]	; (8008718 <HAL_DMA_Abort_IT+0x1c0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d022      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a22      	ldr	r2, [pc, #136]	; (800871c <HAL_DMA_Abort_IT+0x1c4>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d01d      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a20      	ldr	r2, [pc, #128]	; (8008720 <HAL_DMA_Abort_IT+0x1c8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d018      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a1f      	ldr	r2, [pc, #124]	; (8008724 <HAL_DMA_Abort_IT+0x1cc>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d013      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <HAL_DMA_Abort_IT+0x1d0>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00e      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a1c      	ldr	r2, [pc, #112]	; (800872c <HAL_DMA_Abort_IT+0x1d4>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d009      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1a      	ldr	r2, [pc, #104]	; (8008730 <HAL_DMA_Abort_IT+0x1d8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d004      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x17c>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a19      	ldr	r2, [pc, #100]	; (8008734 <HAL_DMA_Abort_IT+0x1dc>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d108      	bne.n	80086e6 <HAL_DMA_Abort_IT+0x18e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e178      	b.n	80089d8 <HAL_DMA_Abort_IT+0x480>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0201 	bic.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e16f      	b.n	80089d8 <HAL_DMA_Abort_IT+0x480>
 80086f8:	40020010 	.word	0x40020010
 80086fc:	40020028 	.word	0x40020028
 8008700:	40020040 	.word	0x40020040
 8008704:	40020058 	.word	0x40020058
 8008708:	40020070 	.word	0x40020070
 800870c:	40020088 	.word	0x40020088
 8008710:	400200a0 	.word	0x400200a0
 8008714:	400200b8 	.word	0x400200b8
 8008718:	40020410 	.word	0x40020410
 800871c:	40020428 	.word	0x40020428
 8008720:	40020440 	.word	0x40020440
 8008724:	40020458 	.word	0x40020458
 8008728:	40020470 	.word	0x40020470
 800872c:	40020488 	.word	0x40020488
 8008730:	400204a0 	.word	0x400204a0
 8008734:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 020e 	bic.w	r2, r2, #14
 8008746:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a6c      	ldr	r2, [pc, #432]	; (8008900 <HAL_DMA_Abort_IT+0x3a8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d04a      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a6b      	ldr	r2, [pc, #428]	; (8008904 <HAL_DMA_Abort_IT+0x3ac>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d045      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a69      	ldr	r2, [pc, #420]	; (8008908 <HAL_DMA_Abort_IT+0x3b0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d040      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a68      	ldr	r2, [pc, #416]	; (800890c <HAL_DMA_Abort_IT+0x3b4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d03b      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a66      	ldr	r2, [pc, #408]	; (8008910 <HAL_DMA_Abort_IT+0x3b8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d036      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a65      	ldr	r2, [pc, #404]	; (8008914 <HAL_DMA_Abort_IT+0x3bc>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d031      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a63      	ldr	r2, [pc, #396]	; (8008918 <HAL_DMA_Abort_IT+0x3c0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d02c      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a62      	ldr	r2, [pc, #392]	; (800891c <HAL_DMA_Abort_IT+0x3c4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d027      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a60      	ldr	r2, [pc, #384]	; (8008920 <HAL_DMA_Abort_IT+0x3c8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d022      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a5f      	ldr	r2, [pc, #380]	; (8008924 <HAL_DMA_Abort_IT+0x3cc>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d01d      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a5d      	ldr	r2, [pc, #372]	; (8008928 <HAL_DMA_Abort_IT+0x3d0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d018      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a5c      	ldr	r2, [pc, #368]	; (800892c <HAL_DMA_Abort_IT+0x3d4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d013      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a5a      	ldr	r2, [pc, #360]	; (8008930 <HAL_DMA_Abort_IT+0x3d8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00e      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a59      	ldr	r2, [pc, #356]	; (8008934 <HAL_DMA_Abort_IT+0x3dc>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d009      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a57      	ldr	r2, [pc, #348]	; (8008938 <HAL_DMA_Abort_IT+0x3e0>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d004      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x290>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a56      	ldr	r2, [pc, #344]	; (800893c <HAL_DMA_Abort_IT+0x3e4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d108      	bne.n	80087fa <HAL_DMA_Abort_IT+0x2a2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	e007      	b.n	800880a <HAL_DMA_Abort_IT+0x2b2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0201 	bic.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a3c      	ldr	r2, [pc, #240]	; (8008900 <HAL_DMA_Abort_IT+0x3a8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d072      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a3a      	ldr	r2, [pc, #232]	; (8008904 <HAL_DMA_Abort_IT+0x3ac>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d06d      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a39      	ldr	r2, [pc, #228]	; (8008908 <HAL_DMA_Abort_IT+0x3b0>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d068      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a37      	ldr	r2, [pc, #220]	; (800890c <HAL_DMA_Abort_IT+0x3b4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d063      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a36      	ldr	r2, [pc, #216]	; (8008910 <HAL_DMA_Abort_IT+0x3b8>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d05e      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a34      	ldr	r2, [pc, #208]	; (8008914 <HAL_DMA_Abort_IT+0x3bc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d059      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a33      	ldr	r2, [pc, #204]	; (8008918 <HAL_DMA_Abort_IT+0x3c0>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d054      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a31      	ldr	r2, [pc, #196]	; (800891c <HAL_DMA_Abort_IT+0x3c4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d04f      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a30      	ldr	r2, [pc, #192]	; (8008920 <HAL_DMA_Abort_IT+0x3c8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d04a      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a2e      	ldr	r2, [pc, #184]	; (8008924 <HAL_DMA_Abort_IT+0x3cc>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d045      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2d      	ldr	r2, [pc, #180]	; (8008928 <HAL_DMA_Abort_IT+0x3d0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d040      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a2b      	ldr	r2, [pc, #172]	; (800892c <HAL_DMA_Abort_IT+0x3d4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d03b      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a2a      	ldr	r2, [pc, #168]	; (8008930 <HAL_DMA_Abort_IT+0x3d8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d036      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a28      	ldr	r2, [pc, #160]	; (8008934 <HAL_DMA_Abort_IT+0x3dc>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d031      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a27      	ldr	r2, [pc, #156]	; (8008938 <HAL_DMA_Abort_IT+0x3e0>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d02c      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a25      	ldr	r2, [pc, #148]	; (800893c <HAL_DMA_Abort_IT+0x3e4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d027      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a24      	ldr	r2, [pc, #144]	; (8008940 <HAL_DMA_Abort_IT+0x3e8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d022      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a22      	ldr	r2, [pc, #136]	; (8008944 <HAL_DMA_Abort_IT+0x3ec>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d01d      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a21      	ldr	r2, [pc, #132]	; (8008948 <HAL_DMA_Abort_IT+0x3f0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d018      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1f      	ldr	r2, [pc, #124]	; (800894c <HAL_DMA_Abort_IT+0x3f4>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d013      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1e      	ldr	r2, [pc, #120]	; (8008950 <HAL_DMA_Abort_IT+0x3f8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d00e      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1c      	ldr	r2, [pc, #112]	; (8008954 <HAL_DMA_Abort_IT+0x3fc>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d009      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1b      	ldr	r2, [pc, #108]	; (8008958 <HAL_DMA_Abort_IT+0x400>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d004      	beq.n	80088fa <HAL_DMA_Abort_IT+0x3a2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a19      	ldr	r2, [pc, #100]	; (800895c <HAL_DMA_Abort_IT+0x404>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d132      	bne.n	8008960 <HAL_DMA_Abort_IT+0x408>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e031      	b.n	8008962 <HAL_DMA_Abort_IT+0x40a>
 80088fe:	bf00      	nop
 8008900:	40020010 	.word	0x40020010
 8008904:	40020028 	.word	0x40020028
 8008908:	40020040 	.word	0x40020040
 800890c:	40020058 	.word	0x40020058
 8008910:	40020070 	.word	0x40020070
 8008914:	40020088 	.word	0x40020088
 8008918:	400200a0 	.word	0x400200a0
 800891c:	400200b8 	.word	0x400200b8
 8008920:	40020410 	.word	0x40020410
 8008924:	40020428 	.word	0x40020428
 8008928:	40020440 	.word	0x40020440
 800892c:	40020458 	.word	0x40020458
 8008930:	40020470 	.word	0x40020470
 8008934:	40020488 	.word	0x40020488
 8008938:	400204a0 	.word	0x400204a0
 800893c:	400204b8 	.word	0x400204b8
 8008940:	58025408 	.word	0x58025408
 8008944:	5802541c 	.word	0x5802541c
 8008948:	58025430 	.word	0x58025430
 800894c:	58025444 	.word	0x58025444
 8008950:	58025458 	.word	0x58025458
 8008954:	5802546c 	.word	0x5802546c
 8008958:	58025480 	.word	0x58025480
 800895c:	58025494 	.word	0x58025494
 8008960:	2300      	movs	r3, #0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d028      	beq.n	80089b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008974:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	2201      	movs	r2, #1
 8008986:	409a      	lsls	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008994:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00c      	beq.n	80089b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop

080089e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	; 0x28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80089f0:	4b67      	ldr	r3, [pc, #412]	; (8008b90 <HAL_DMA_IRQHandler+0x1ac>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a67      	ldr	r2, [pc, #412]	; (8008b94 <HAL_DMA_IRQHandler+0x1b0>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	0a9b      	lsrs	r3, r3, #10
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a5f      	ldr	r2, [pc, #380]	; (8008b98 <HAL_DMA_IRQHandler+0x1b4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d04a      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a5d      	ldr	r2, [pc, #372]	; (8008b9c <HAL_DMA_IRQHandler+0x1b8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d045      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a5c      	ldr	r2, [pc, #368]	; (8008ba0 <HAL_DMA_IRQHandler+0x1bc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d040      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a5a      	ldr	r2, [pc, #360]	; (8008ba4 <HAL_DMA_IRQHandler+0x1c0>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d03b      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a59      	ldr	r2, [pc, #356]	; (8008ba8 <HAL_DMA_IRQHandler+0x1c4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d036      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a57      	ldr	r2, [pc, #348]	; (8008bac <HAL_DMA_IRQHandler+0x1c8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d031      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a56      	ldr	r2, [pc, #344]	; (8008bb0 <HAL_DMA_IRQHandler+0x1cc>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d02c      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a54      	ldr	r2, [pc, #336]	; (8008bb4 <HAL_DMA_IRQHandler+0x1d0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d027      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a53      	ldr	r2, [pc, #332]	; (8008bb8 <HAL_DMA_IRQHandler+0x1d4>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d022      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a51      	ldr	r2, [pc, #324]	; (8008bbc <HAL_DMA_IRQHandler+0x1d8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01d      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a50      	ldr	r2, [pc, #320]	; (8008bc0 <HAL_DMA_IRQHandler+0x1dc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d018      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a4e      	ldr	r2, [pc, #312]	; (8008bc4 <HAL_DMA_IRQHandler+0x1e0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d013      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a4d      	ldr	r2, [pc, #308]	; (8008bc8 <HAL_DMA_IRQHandler+0x1e4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00e      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a4b      	ldr	r2, [pc, #300]	; (8008bcc <HAL_DMA_IRQHandler+0x1e8>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a4a      	ldr	r2, [pc, #296]	; (8008bd0 <HAL_DMA_IRQHandler+0x1ec>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xd2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a48      	ldr	r2, [pc, #288]	; (8008bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d101      	bne.n	8008aba <HAL_DMA_IRQHandler+0xd6>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e000      	b.n	8008abc <HAL_DMA_IRQHandler+0xd8>
 8008aba:	2300      	movs	r3, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 842b 	beq.w	8009318 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2208      	movs	r2, #8
 8008acc:	409a      	lsls	r2, r3
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80a2 	beq.w	8008c1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a2e      	ldr	r2, [pc, #184]	; (8008b98 <HAL_DMA_IRQHandler+0x1b4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d04a      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a2d      	ldr	r2, [pc, #180]	; (8008b9c <HAL_DMA_IRQHandler+0x1b8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d045      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a2b      	ldr	r2, [pc, #172]	; (8008ba0 <HAL_DMA_IRQHandler+0x1bc>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d040      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a2a      	ldr	r2, [pc, #168]	; (8008ba4 <HAL_DMA_IRQHandler+0x1c0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d03b      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <HAL_DMA_IRQHandler+0x1c4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d036      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a27      	ldr	r2, [pc, #156]	; (8008bac <HAL_DMA_IRQHandler+0x1c8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d031      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a25      	ldr	r2, [pc, #148]	; (8008bb0 <HAL_DMA_IRQHandler+0x1cc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d02c      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a24      	ldr	r2, [pc, #144]	; (8008bb4 <HAL_DMA_IRQHandler+0x1d0>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d027      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a22      	ldr	r2, [pc, #136]	; (8008bb8 <HAL_DMA_IRQHandler+0x1d4>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d022      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a21      	ldr	r2, [pc, #132]	; (8008bbc <HAL_DMA_IRQHandler+0x1d8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d01d      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <HAL_DMA_IRQHandler+0x1dc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d018      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <HAL_DMA_IRQHandler+0x1e0>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d013      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a1c      	ldr	r2, [pc, #112]	; (8008bc8 <HAL_DMA_IRQHandler+0x1e4>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d00e      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a1b      	ldr	r2, [pc, #108]	; (8008bcc <HAL_DMA_IRQHandler+0x1e8>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d009      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a19      	ldr	r2, [pc, #100]	; (8008bd0 <HAL_DMA_IRQHandler+0x1ec>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d004      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x194>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d12f      	bne.n	8008bd8 <HAL_DMA_IRQHandler+0x1f4>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	bf14      	ite	ne
 8008b86:	2301      	movne	r3, #1
 8008b88:	2300      	moveq	r3, #0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	e02e      	b.n	8008bec <HAL_DMA_IRQHandler+0x208>
 8008b8e:	bf00      	nop
 8008b90:	24000044 	.word	0x24000044
 8008b94:	1b4e81b5 	.word	0x1b4e81b5
 8008b98:	40020010 	.word	0x40020010
 8008b9c:	40020028 	.word	0x40020028
 8008ba0:	40020040 	.word	0x40020040
 8008ba4:	40020058 	.word	0x40020058
 8008ba8:	40020070 	.word	0x40020070
 8008bac:	40020088 	.word	0x40020088
 8008bb0:	400200a0 	.word	0x400200a0
 8008bb4:	400200b8 	.word	0x400200b8
 8008bb8:	40020410 	.word	0x40020410
 8008bbc:	40020428 	.word	0x40020428
 8008bc0:	40020440 	.word	0x40020440
 8008bc4:	40020458 	.word	0x40020458
 8008bc8:	40020470 	.word	0x40020470
 8008bcc:	40020488 	.word	0x40020488
 8008bd0:	400204a0 	.word	0x400204a0
 8008bd4:	400204b8 	.word	0x400204b8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bf14      	ite	ne
 8008be6:	2301      	movne	r3, #1
 8008be8:	2300      	moveq	r3, #0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d015      	beq.n	8008c1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0204 	bic.w	r2, r2, #4
 8008bfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c04:	f003 031f 	and.w	r3, r3, #31
 8008c08:	2208      	movs	r2, #8
 8008c0a:	409a      	lsls	r2, r3
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c14:	f043 0201 	orr.w	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d06e      	beq.n	8008d10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a69      	ldr	r2, [pc, #420]	; (8008ddc <HAL_DMA_IRQHandler+0x3f8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d04a      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a67      	ldr	r2, [pc, #412]	; (8008de0 <HAL_DMA_IRQHandler+0x3fc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d045      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a66      	ldr	r2, [pc, #408]	; (8008de4 <HAL_DMA_IRQHandler+0x400>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d040      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a64      	ldr	r2, [pc, #400]	; (8008de8 <HAL_DMA_IRQHandler+0x404>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d03b      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a63      	ldr	r2, [pc, #396]	; (8008dec <HAL_DMA_IRQHandler+0x408>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d036      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a61      	ldr	r2, [pc, #388]	; (8008df0 <HAL_DMA_IRQHandler+0x40c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d031      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a60      	ldr	r2, [pc, #384]	; (8008df4 <HAL_DMA_IRQHandler+0x410>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d02c      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a5e      	ldr	r2, [pc, #376]	; (8008df8 <HAL_DMA_IRQHandler+0x414>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d027      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a5d      	ldr	r2, [pc, #372]	; (8008dfc <HAL_DMA_IRQHandler+0x418>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d022      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a5b      	ldr	r2, [pc, #364]	; (8008e00 <HAL_DMA_IRQHandler+0x41c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01d      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a5a      	ldr	r2, [pc, #360]	; (8008e04 <HAL_DMA_IRQHandler+0x420>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d018      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a58      	ldr	r2, [pc, #352]	; (8008e08 <HAL_DMA_IRQHandler+0x424>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a57      	ldr	r2, [pc, #348]	; (8008e0c <HAL_DMA_IRQHandler+0x428>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a55      	ldr	r2, [pc, #340]	; (8008e10 <HAL_DMA_IRQHandler+0x42c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d009      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a54      	ldr	r2, [pc, #336]	; (8008e14 <HAL_DMA_IRQHandler+0x430>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x2ee>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a52      	ldr	r2, [pc, #328]	; (8008e18 <HAL_DMA_IRQHandler+0x434>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d10a      	bne.n	8008ce8 <HAL_DMA_IRQHandler+0x304>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bf14      	ite	ne
 8008ce0:	2301      	movne	r3, #1
 8008ce2:	2300      	moveq	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	e003      	b.n	8008cf0 <HAL_DMA_IRQHandler+0x30c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00d      	beq.n	8008d10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf8:	f003 031f 	and.w	r3, r3, #31
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	409a      	lsls	r2, r3
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d08:	f043 0202 	orr.w	r2, r3, #2
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	2204      	movs	r2, #4
 8008d1a:	409a      	lsls	r2, r3
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	4013      	ands	r3, r2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 808f 	beq.w	8008e44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a2c      	ldr	r2, [pc, #176]	; (8008ddc <HAL_DMA_IRQHandler+0x3f8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d04a      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2a      	ldr	r2, [pc, #168]	; (8008de0 <HAL_DMA_IRQHandler+0x3fc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d045      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <HAL_DMA_IRQHandler+0x400>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d040      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a27      	ldr	r2, [pc, #156]	; (8008de8 <HAL_DMA_IRQHandler+0x404>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d03b      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a26      	ldr	r2, [pc, #152]	; (8008dec <HAL_DMA_IRQHandler+0x408>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d036      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a24      	ldr	r2, [pc, #144]	; (8008df0 <HAL_DMA_IRQHandler+0x40c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d031      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <HAL_DMA_IRQHandler+0x410>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d02c      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <HAL_DMA_IRQHandler+0x414>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d027      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <HAL_DMA_IRQHandler+0x418>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d022      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a1e      	ldr	r2, [pc, #120]	; (8008e00 <HAL_DMA_IRQHandler+0x41c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01d      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a1d      	ldr	r2, [pc, #116]	; (8008e04 <HAL_DMA_IRQHandler+0x420>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d018      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a1b      	ldr	r2, [pc, #108]	; (8008e08 <HAL_DMA_IRQHandler+0x424>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d013      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a1a      	ldr	r2, [pc, #104]	; (8008e0c <HAL_DMA_IRQHandler+0x428>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d00e      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a18      	ldr	r2, [pc, #96]	; (8008e10 <HAL_DMA_IRQHandler+0x42c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d009      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a17      	ldr	r2, [pc, #92]	; (8008e14 <HAL_DMA_IRQHandler+0x430>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d004      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x3e2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <HAL_DMA_IRQHandler+0x434>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d12a      	bne.n	8008e1c <HAL_DMA_IRQHandler+0x438>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bf14      	ite	ne
 8008dd4:	2301      	movne	r3, #1
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	e023      	b.n	8008e24 <HAL_DMA_IRQHandler+0x440>
 8008ddc:	40020010 	.word	0x40020010
 8008de0:	40020028 	.word	0x40020028
 8008de4:	40020040 	.word	0x40020040
 8008de8:	40020058 	.word	0x40020058
 8008dec:	40020070 	.word	0x40020070
 8008df0:	40020088 	.word	0x40020088
 8008df4:	400200a0 	.word	0x400200a0
 8008df8:	400200b8 	.word	0x400200b8
 8008dfc:	40020410 	.word	0x40020410
 8008e00:	40020428 	.word	0x40020428
 8008e04:	40020440 	.word	0x40020440
 8008e08:	40020458 	.word	0x40020458
 8008e0c:	40020470 	.word	0x40020470
 8008e10:	40020488 	.word	0x40020488
 8008e14:	400204a0 	.word	0x400204a0
 8008e18:	400204b8 	.word	0x400204b8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2300      	movs	r3, #0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00d      	beq.n	8008e44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2c:	f003 031f 	and.w	r3, r3, #31
 8008e30:	2204      	movs	r2, #4
 8008e32:	409a      	lsls	r2, r3
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3c:	f043 0204 	orr.w	r2, r3, #4
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e48:	f003 031f 	and.w	r3, r3, #31
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	409a      	lsls	r2, r3
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	4013      	ands	r3, r2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 80a6 	beq.w	8008fa6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a85      	ldr	r2, [pc, #532]	; (8009074 <HAL_DMA_IRQHandler+0x690>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d04a      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a83      	ldr	r2, [pc, #524]	; (8009078 <HAL_DMA_IRQHandler+0x694>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d045      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a82      	ldr	r2, [pc, #520]	; (800907c <HAL_DMA_IRQHandler+0x698>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d040      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a80      	ldr	r2, [pc, #512]	; (8009080 <HAL_DMA_IRQHandler+0x69c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d03b      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a7f      	ldr	r2, [pc, #508]	; (8009084 <HAL_DMA_IRQHandler+0x6a0>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d036      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a7d      	ldr	r2, [pc, #500]	; (8009088 <HAL_DMA_IRQHandler+0x6a4>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d031      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a7c      	ldr	r2, [pc, #496]	; (800908c <HAL_DMA_IRQHandler+0x6a8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d02c      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a7a      	ldr	r2, [pc, #488]	; (8009090 <HAL_DMA_IRQHandler+0x6ac>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d027      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a79      	ldr	r2, [pc, #484]	; (8009094 <HAL_DMA_IRQHandler+0x6b0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d022      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a77      	ldr	r2, [pc, #476]	; (8009098 <HAL_DMA_IRQHandler+0x6b4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d01d      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a76      	ldr	r2, [pc, #472]	; (800909c <HAL_DMA_IRQHandler+0x6b8>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d018      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a74      	ldr	r2, [pc, #464]	; (80090a0 <HAL_DMA_IRQHandler+0x6bc>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d013      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a73      	ldr	r2, [pc, #460]	; (80090a4 <HAL_DMA_IRQHandler+0x6c0>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d00e      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a71      	ldr	r2, [pc, #452]	; (80090a8 <HAL_DMA_IRQHandler+0x6c4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d009      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a70      	ldr	r2, [pc, #448]	; (80090ac <HAL_DMA_IRQHandler+0x6c8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d004      	beq.n	8008efa <HAL_DMA_IRQHandler+0x516>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a6e      	ldr	r2, [pc, #440]	; (80090b0 <HAL_DMA_IRQHandler+0x6cc>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d10a      	bne.n	8008f10 <HAL_DMA_IRQHandler+0x52c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	e009      	b.n	8008f24 <HAL_DMA_IRQHandler+0x540>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0304 	and.w	r3, r3, #4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	bf14      	ite	ne
 8008f1e:	2301      	movne	r3, #1
 8008f20:	2300      	moveq	r3, #0
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d03e      	beq.n	8008fa6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f2c:	f003 031f 	and.w	r3, r3, #31
 8008f30:	2210      	movs	r2, #16
 8008f32:	409a      	lsls	r2, r3
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d018      	beq.n	8008f78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d108      	bne.n	8008f66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d024      	beq.n	8008fa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	4798      	blx	r3
 8008f64:	e01f      	b.n	8008fa6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01b      	beq.n	8008fa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
 8008f76:	e016      	b.n	8008fa6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d107      	bne.n	8008f96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f022 0208 	bic.w	r2, r2, #8
 8008f94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	2220      	movs	r2, #32
 8008fb0:	409a      	lsls	r2, r3
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 8110 	beq.w	80091dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a2c      	ldr	r2, [pc, #176]	; (8009074 <HAL_DMA_IRQHandler+0x690>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d04a      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a2b      	ldr	r2, [pc, #172]	; (8009078 <HAL_DMA_IRQHandler+0x694>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d045      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a29      	ldr	r2, [pc, #164]	; (800907c <HAL_DMA_IRQHandler+0x698>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d040      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a28      	ldr	r2, [pc, #160]	; (8009080 <HAL_DMA_IRQHandler+0x69c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d03b      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a26      	ldr	r2, [pc, #152]	; (8009084 <HAL_DMA_IRQHandler+0x6a0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d036      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a25      	ldr	r2, [pc, #148]	; (8009088 <HAL_DMA_IRQHandler+0x6a4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d031      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a23      	ldr	r2, [pc, #140]	; (800908c <HAL_DMA_IRQHandler+0x6a8>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d02c      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a22      	ldr	r2, [pc, #136]	; (8009090 <HAL_DMA_IRQHandler+0x6ac>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d027      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a20      	ldr	r2, [pc, #128]	; (8009094 <HAL_DMA_IRQHandler+0x6b0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d022      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a1f      	ldr	r2, [pc, #124]	; (8009098 <HAL_DMA_IRQHandler+0x6b4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d01d      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a1d      	ldr	r2, [pc, #116]	; (800909c <HAL_DMA_IRQHandler+0x6b8>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d018      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a1c      	ldr	r2, [pc, #112]	; (80090a0 <HAL_DMA_IRQHandler+0x6bc>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d013      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a1a      	ldr	r2, [pc, #104]	; (80090a4 <HAL_DMA_IRQHandler+0x6c0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d00e      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a19      	ldr	r2, [pc, #100]	; (80090a8 <HAL_DMA_IRQHandler+0x6c4>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d009      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a17      	ldr	r2, [pc, #92]	; (80090ac <HAL_DMA_IRQHandler+0x6c8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d004      	beq.n	800905c <HAL_DMA_IRQHandler+0x678>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a16      	ldr	r2, [pc, #88]	; (80090b0 <HAL_DMA_IRQHandler+0x6cc>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d12b      	bne.n	80090b4 <HAL_DMA_IRQHandler+0x6d0>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	2b00      	cmp	r3, #0
 8009068:	bf14      	ite	ne
 800906a:	2301      	movne	r3, #1
 800906c:	2300      	moveq	r3, #0
 800906e:	b2db      	uxtb	r3, r3
 8009070:	e02a      	b.n	80090c8 <HAL_DMA_IRQHandler+0x6e4>
 8009072:	bf00      	nop
 8009074:	40020010 	.word	0x40020010
 8009078:	40020028 	.word	0x40020028
 800907c:	40020040 	.word	0x40020040
 8009080:	40020058 	.word	0x40020058
 8009084:	40020070 	.word	0x40020070
 8009088:	40020088 	.word	0x40020088
 800908c:	400200a0 	.word	0x400200a0
 8009090:	400200b8 	.word	0x400200b8
 8009094:	40020410 	.word	0x40020410
 8009098:	40020428 	.word	0x40020428
 800909c:	40020440 	.word	0x40020440
 80090a0:	40020458 	.word	0x40020458
 80090a4:	40020470 	.word	0x40020470
 80090a8:	40020488 	.word	0x40020488
 80090ac:	400204a0 	.word	0x400204a0
 80090b0:	400204b8 	.word	0x400204b8
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bf14      	ite	ne
 80090c2:	2301      	movne	r3, #1
 80090c4:	2300      	moveq	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8087 	beq.w	80091dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d2:	f003 031f 	and.w	r3, r3, #31
 80090d6:	2220      	movs	r2, #32
 80090d8:	409a      	lsls	r2, r3
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d139      	bne.n	800915e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0216 	bic.w	r2, r2, #22
 80090f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	695a      	ldr	r2, [r3, #20]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009108:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	d103      	bne.n	800911a <HAL_DMA_IRQHandler+0x736>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0208 	bic.w	r2, r2, #8
 8009128:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800912e:	f003 031f 	and.w	r3, r3, #31
 8009132:	223f      	movs	r2, #63	; 0x3f
 8009134:	409a      	lsls	r2, r3
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 8382 	beq.w	8009858 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	4798      	blx	r3
          }
          return;
 800915c:	e37c      	b.n	8009858 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d018      	beq.n	800919e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d108      	bne.n	800918c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917e:	2b00      	cmp	r3, #0
 8009180:	d02c      	beq.n	80091dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
 800918a:	e027      	b.n	80091dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d023      	beq.n	80091dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
 800919c:	e01e      	b.n	80091dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10f      	bne.n	80091cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0210 	bic.w	r2, r2, #16
 80091ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 833e 	beq.w	8009862 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8088 	beq.w	8009304 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2204      	movs	r2, #4
 80091f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a89      	ldr	r2, [pc, #548]	; (8009428 <HAL_DMA_IRQHandler+0xa44>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d04a      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a88      	ldr	r2, [pc, #544]	; (800942c <HAL_DMA_IRQHandler+0xa48>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d045      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a86      	ldr	r2, [pc, #536]	; (8009430 <HAL_DMA_IRQHandler+0xa4c>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d040      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a85      	ldr	r2, [pc, #532]	; (8009434 <HAL_DMA_IRQHandler+0xa50>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d03b      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a83      	ldr	r2, [pc, #524]	; (8009438 <HAL_DMA_IRQHandler+0xa54>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d036      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a82      	ldr	r2, [pc, #520]	; (800943c <HAL_DMA_IRQHandler+0xa58>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d031      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a80      	ldr	r2, [pc, #512]	; (8009440 <HAL_DMA_IRQHandler+0xa5c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d02c      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a7f      	ldr	r2, [pc, #508]	; (8009444 <HAL_DMA_IRQHandler+0xa60>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d027      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a7d      	ldr	r2, [pc, #500]	; (8009448 <HAL_DMA_IRQHandler+0xa64>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d022      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a7c      	ldr	r2, [pc, #496]	; (800944c <HAL_DMA_IRQHandler+0xa68>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d01d      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a7a      	ldr	r2, [pc, #488]	; (8009450 <HAL_DMA_IRQHandler+0xa6c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d018      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a79      	ldr	r2, [pc, #484]	; (8009454 <HAL_DMA_IRQHandler+0xa70>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d013      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a77      	ldr	r2, [pc, #476]	; (8009458 <HAL_DMA_IRQHandler+0xa74>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00e      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a76      	ldr	r2, [pc, #472]	; (800945c <HAL_DMA_IRQHandler+0xa78>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d009      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a74      	ldr	r2, [pc, #464]	; (8009460 <HAL_DMA_IRQHandler+0xa7c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d004      	beq.n	800929c <HAL_DMA_IRQHandler+0x8b8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a73      	ldr	r2, [pc, #460]	; (8009464 <HAL_DMA_IRQHandler+0xa80>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d108      	bne.n	80092ae <HAL_DMA_IRQHandler+0x8ca>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0201 	bic.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e007      	b.n	80092be <HAL_DMA_IRQHandler+0x8da>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0201 	bic.w	r2, r2, #1
 80092bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d307      	bcc.n	80092da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1f2      	bne.n	80092be <HAL_DMA_IRQHandler+0x8da>
 80092d8:	e000      	b.n	80092dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80092da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d004      	beq.n	80092f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2203      	movs	r2, #3
 80092ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80092f2:	e003      	b.n	80092fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 82aa 	beq.w	8009862 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	4798      	blx	r3
 8009316:	e2a4      	b.n	8009862 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a52      	ldr	r2, [pc, #328]	; (8009468 <HAL_DMA_IRQHandler+0xa84>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d04a      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a51      	ldr	r2, [pc, #324]	; (800946c <HAL_DMA_IRQHandler+0xa88>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d045      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a4f      	ldr	r2, [pc, #316]	; (8009470 <HAL_DMA_IRQHandler+0xa8c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d040      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a4e      	ldr	r2, [pc, #312]	; (8009474 <HAL_DMA_IRQHandler+0xa90>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d03b      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a4c      	ldr	r2, [pc, #304]	; (8009478 <HAL_DMA_IRQHandler+0xa94>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d036      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a4b      	ldr	r2, [pc, #300]	; (800947c <HAL_DMA_IRQHandler+0xa98>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d031      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a49      	ldr	r2, [pc, #292]	; (8009480 <HAL_DMA_IRQHandler+0xa9c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d02c      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a48      	ldr	r2, [pc, #288]	; (8009484 <HAL_DMA_IRQHandler+0xaa0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d027      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a46      	ldr	r2, [pc, #280]	; (8009488 <HAL_DMA_IRQHandler+0xaa4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d022      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a45      	ldr	r2, [pc, #276]	; (800948c <HAL_DMA_IRQHandler+0xaa8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d01d      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a43      	ldr	r2, [pc, #268]	; (8009490 <HAL_DMA_IRQHandler+0xaac>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d018      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a42      	ldr	r2, [pc, #264]	; (8009494 <HAL_DMA_IRQHandler+0xab0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d013      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a40      	ldr	r2, [pc, #256]	; (8009498 <HAL_DMA_IRQHandler+0xab4>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00e      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a3f      	ldr	r2, [pc, #252]	; (800949c <HAL_DMA_IRQHandler+0xab8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d009      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a3d      	ldr	r2, [pc, #244]	; (80094a0 <HAL_DMA_IRQHandler+0xabc>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d004      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x9d4>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a3c      	ldr	r2, [pc, #240]	; (80094a4 <HAL_DMA_IRQHandler+0xac0>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d101      	bne.n	80093bc <HAL_DMA_IRQHandler+0x9d8>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e000      	b.n	80093be <HAL_DMA_IRQHandler+0x9da>
 80093bc:	2300      	movs	r3, #0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 824f 	beq.w	8009862 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d0:	f003 031f 	and.w	r3, r3, #31
 80093d4:	2204      	movs	r2, #4
 80093d6:	409a      	lsls	r2, r3
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	4013      	ands	r3, r2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80dd 	beq.w	800959c <HAL_DMA_IRQHandler+0xbb8>
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 80d7 	beq.w	800959c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f2:	f003 031f 	and.w	r3, r3, #31
 80093f6:	2204      	movs	r2, #4
 80093f8:	409a      	lsls	r2, r3
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d059      	beq.n	80094bc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d14a      	bne.n	80094a8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 8220 	beq.w	800985c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009424:	e21a      	b.n	800985c <HAL_DMA_IRQHandler+0xe78>
 8009426:	bf00      	nop
 8009428:	40020010 	.word	0x40020010
 800942c:	40020028 	.word	0x40020028
 8009430:	40020040 	.word	0x40020040
 8009434:	40020058 	.word	0x40020058
 8009438:	40020070 	.word	0x40020070
 800943c:	40020088 	.word	0x40020088
 8009440:	400200a0 	.word	0x400200a0
 8009444:	400200b8 	.word	0x400200b8
 8009448:	40020410 	.word	0x40020410
 800944c:	40020428 	.word	0x40020428
 8009450:	40020440 	.word	0x40020440
 8009454:	40020458 	.word	0x40020458
 8009458:	40020470 	.word	0x40020470
 800945c:	40020488 	.word	0x40020488
 8009460:	400204a0 	.word	0x400204a0
 8009464:	400204b8 	.word	0x400204b8
 8009468:	48022c08 	.word	0x48022c08
 800946c:	48022c1c 	.word	0x48022c1c
 8009470:	48022c30 	.word	0x48022c30
 8009474:	48022c44 	.word	0x48022c44
 8009478:	48022c58 	.word	0x48022c58
 800947c:	48022c6c 	.word	0x48022c6c
 8009480:	48022c80 	.word	0x48022c80
 8009484:	48022c94 	.word	0x48022c94
 8009488:	58025408 	.word	0x58025408
 800948c:	5802541c 	.word	0x5802541c
 8009490:	58025430 	.word	0x58025430
 8009494:	58025444 	.word	0x58025444
 8009498:	58025458 	.word	0x58025458
 800949c:	5802546c 	.word	0x5802546c
 80094a0:	58025480 	.word	0x58025480
 80094a4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 81d5 	beq.w	800985c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094ba:	e1cf      	b.n	800985c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d160      	bne.n	8009588 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a7f      	ldr	r2, [pc, #508]	; (80096c8 <HAL_DMA_IRQHandler+0xce4>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d04a      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a7d      	ldr	r2, [pc, #500]	; (80096cc <HAL_DMA_IRQHandler+0xce8>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d045      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a7c      	ldr	r2, [pc, #496]	; (80096d0 <HAL_DMA_IRQHandler+0xcec>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d040      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a7a      	ldr	r2, [pc, #488]	; (80096d4 <HAL_DMA_IRQHandler+0xcf0>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d03b      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a79      	ldr	r2, [pc, #484]	; (80096d8 <HAL_DMA_IRQHandler+0xcf4>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d036      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a77      	ldr	r2, [pc, #476]	; (80096dc <HAL_DMA_IRQHandler+0xcf8>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d031      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a76      	ldr	r2, [pc, #472]	; (80096e0 <HAL_DMA_IRQHandler+0xcfc>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d02c      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a74      	ldr	r2, [pc, #464]	; (80096e4 <HAL_DMA_IRQHandler+0xd00>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d027      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a73      	ldr	r2, [pc, #460]	; (80096e8 <HAL_DMA_IRQHandler+0xd04>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d022      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a71      	ldr	r2, [pc, #452]	; (80096ec <HAL_DMA_IRQHandler+0xd08>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d01d      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a70      	ldr	r2, [pc, #448]	; (80096f0 <HAL_DMA_IRQHandler+0xd0c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d018      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a6e      	ldr	r2, [pc, #440]	; (80096f4 <HAL_DMA_IRQHandler+0xd10>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d013      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a6d      	ldr	r2, [pc, #436]	; (80096f8 <HAL_DMA_IRQHandler+0xd14>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d00e      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a6b      	ldr	r2, [pc, #428]	; (80096fc <HAL_DMA_IRQHandler+0xd18>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d009      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a6a      	ldr	r2, [pc, #424]	; (8009700 <HAL_DMA_IRQHandler+0xd1c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d004      	beq.n	8009566 <HAL_DMA_IRQHandler+0xb82>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a68      	ldr	r2, [pc, #416]	; (8009704 <HAL_DMA_IRQHandler+0xd20>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d108      	bne.n	8009578 <HAL_DMA_IRQHandler+0xb94>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0208 	bic.w	r2, r2, #8
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	e007      	b.n	8009588 <HAL_DMA_IRQHandler+0xba4>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0204 	bic.w	r2, r2, #4
 8009586:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 8165 	beq.w	800985c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800959a:	e15f      	b.n	800985c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a0:	f003 031f 	and.w	r3, r3, #31
 80095a4:	2202      	movs	r2, #2
 80095a6:	409a      	lsls	r2, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	4013      	ands	r3, r2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80c5 	beq.w	800973c <HAL_DMA_IRQHandler+0xd58>
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80bf 	beq.w	800973c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c2:	f003 031f 	and.w	r3, r3, #31
 80095c6:	2202      	movs	r2, #2
 80095c8:	409a      	lsls	r2, r3
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d018      	beq.n	800960a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d109      	bne.n	80095f6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 813a 	beq.w	8009860 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095f4:	e134      	b.n	8009860 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 8130 	beq.w	8009860 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009608:	e12a      	b.n	8009860 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	f040 8089 	bne.w	8009728 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a2b      	ldr	r2, [pc, #172]	; (80096c8 <HAL_DMA_IRQHandler+0xce4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d04a      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a29      	ldr	r2, [pc, #164]	; (80096cc <HAL_DMA_IRQHandler+0xce8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d045      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a28      	ldr	r2, [pc, #160]	; (80096d0 <HAL_DMA_IRQHandler+0xcec>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d040      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <HAL_DMA_IRQHandler+0xcf0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d03b      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a25      	ldr	r2, [pc, #148]	; (80096d8 <HAL_DMA_IRQHandler+0xcf4>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d036      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a23      	ldr	r2, [pc, #140]	; (80096dc <HAL_DMA_IRQHandler+0xcf8>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d031      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a22      	ldr	r2, [pc, #136]	; (80096e0 <HAL_DMA_IRQHandler+0xcfc>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d02c      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a20      	ldr	r2, [pc, #128]	; (80096e4 <HAL_DMA_IRQHandler+0xd00>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d027      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a1f      	ldr	r2, [pc, #124]	; (80096e8 <HAL_DMA_IRQHandler+0xd04>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d022      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a1d      	ldr	r2, [pc, #116]	; (80096ec <HAL_DMA_IRQHandler+0xd08>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d01d      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a1c      	ldr	r2, [pc, #112]	; (80096f0 <HAL_DMA_IRQHandler+0xd0c>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d018      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a1a      	ldr	r2, [pc, #104]	; (80096f4 <HAL_DMA_IRQHandler+0xd10>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d013      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a19      	ldr	r2, [pc, #100]	; (80096f8 <HAL_DMA_IRQHandler+0xd14>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00e      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a17      	ldr	r2, [pc, #92]	; (80096fc <HAL_DMA_IRQHandler+0xd18>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d009      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a16      	ldr	r2, [pc, #88]	; (8009700 <HAL_DMA_IRQHandler+0xd1c>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d004      	beq.n	80096b6 <HAL_DMA_IRQHandler+0xcd2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a14      	ldr	r2, [pc, #80]	; (8009704 <HAL_DMA_IRQHandler+0xd20>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d128      	bne.n	8009708 <HAL_DMA_IRQHandler+0xd24>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0214 	bic.w	r2, r2, #20
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	e027      	b.n	8009718 <HAL_DMA_IRQHandler+0xd34>
 80096c8:	40020010 	.word	0x40020010
 80096cc:	40020028 	.word	0x40020028
 80096d0:	40020040 	.word	0x40020040
 80096d4:	40020058 	.word	0x40020058
 80096d8:	40020070 	.word	0x40020070
 80096dc:	40020088 	.word	0x40020088
 80096e0:	400200a0 	.word	0x400200a0
 80096e4:	400200b8 	.word	0x400200b8
 80096e8:	40020410 	.word	0x40020410
 80096ec:	40020428 	.word	0x40020428
 80096f0:	40020440 	.word	0x40020440
 80096f4:	40020458 	.word	0x40020458
 80096f8:	40020470 	.word	0x40020470
 80096fc:	40020488 	.word	0x40020488
 8009700:	400204a0 	.word	0x400204a0
 8009704:	400204b8 	.word	0x400204b8
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 020a 	bic.w	r2, r2, #10
 8009716:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8097 	beq.w	8009860 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800973a:	e091      	b.n	8009860 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009740:	f003 031f 	and.w	r3, r3, #31
 8009744:	2208      	movs	r2, #8
 8009746:	409a      	lsls	r2, r3
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 8088 	beq.w	8009862 <HAL_DMA_IRQHandler+0xe7e>
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 8082 	beq.w	8009862 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a41      	ldr	r2, [pc, #260]	; (8009868 <HAL_DMA_IRQHandler+0xe84>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d04a      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a3f      	ldr	r2, [pc, #252]	; (800986c <HAL_DMA_IRQHandler+0xe88>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d045      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a3e      	ldr	r2, [pc, #248]	; (8009870 <HAL_DMA_IRQHandler+0xe8c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d040      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a3c      	ldr	r2, [pc, #240]	; (8009874 <HAL_DMA_IRQHandler+0xe90>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d03b      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a3b      	ldr	r2, [pc, #236]	; (8009878 <HAL_DMA_IRQHandler+0xe94>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d036      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a39      	ldr	r2, [pc, #228]	; (800987c <HAL_DMA_IRQHandler+0xe98>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d031      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a38      	ldr	r2, [pc, #224]	; (8009880 <HAL_DMA_IRQHandler+0xe9c>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d02c      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a36      	ldr	r2, [pc, #216]	; (8009884 <HAL_DMA_IRQHandler+0xea0>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d027      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a35      	ldr	r2, [pc, #212]	; (8009888 <HAL_DMA_IRQHandler+0xea4>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d022      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a33      	ldr	r2, [pc, #204]	; (800988c <HAL_DMA_IRQHandler+0xea8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d01d      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a32      	ldr	r2, [pc, #200]	; (8009890 <HAL_DMA_IRQHandler+0xeac>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d018      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a30      	ldr	r2, [pc, #192]	; (8009894 <HAL_DMA_IRQHandler+0xeb0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a2f      	ldr	r2, [pc, #188]	; (8009898 <HAL_DMA_IRQHandler+0xeb4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00e      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a2d      	ldr	r2, [pc, #180]	; (800989c <HAL_DMA_IRQHandler+0xeb8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a2c      	ldr	r2, [pc, #176]	; (80098a0 <HAL_DMA_IRQHandler+0xebc>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe1a>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a2a      	ldr	r2, [pc, #168]	; (80098a4 <HAL_DMA_IRQHandler+0xec0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d108      	bne.n	8009810 <HAL_DMA_IRQHandler+0xe2c>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 021c 	bic.w	r2, r2, #28
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	e007      	b.n	8009820 <HAL_DMA_IRQHandler+0xe3c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f022 020e 	bic.w	r2, r2, #14
 800981e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	2201      	movs	r2, #1
 800982a:	409a      	lsls	r2, r3
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d009      	beq.n	8009862 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
 8009856:	e004      	b.n	8009862 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8009858:	bf00      	nop
 800985a:	e002      	b.n	8009862 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800985c:	bf00      	nop
 800985e:	e000      	b.n	8009862 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009860:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009862:	3728      	adds	r7, #40	; 0x28
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	40020010 	.word	0x40020010
 800986c:	40020028 	.word	0x40020028
 8009870:	40020040 	.word	0x40020040
 8009874:	40020058 	.word	0x40020058
 8009878:	40020070 	.word	0x40020070
 800987c:	40020088 	.word	0x40020088
 8009880:	400200a0 	.word	0x400200a0
 8009884:	400200b8 	.word	0x400200b8
 8009888:	40020410 	.word	0x40020410
 800988c:	40020428 	.word	0x40020428
 8009890:	40020440 	.word	0x40020440
 8009894:	40020458 	.word	0x40020458
 8009898:	40020470 	.word	0x40020470
 800989c:	40020488 	.word	0x40020488
 80098a0:	400204a0 	.word	0x400204a0
 80098a4:	400204b8 	.word	0x400204b8

080098a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a7f      	ldr	r2, [pc, #508]	; (8009ac4 <DMA_SetConfig+0x21c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d072      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a7d      	ldr	r2, [pc, #500]	; (8009ac8 <DMA_SetConfig+0x220>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d06d      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a7c      	ldr	r2, [pc, #496]	; (8009acc <DMA_SetConfig+0x224>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d068      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a7a      	ldr	r2, [pc, #488]	; (8009ad0 <DMA_SetConfig+0x228>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d063      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a79      	ldr	r2, [pc, #484]	; (8009ad4 <DMA_SetConfig+0x22c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d05e      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a77      	ldr	r2, [pc, #476]	; (8009ad8 <DMA_SetConfig+0x230>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d059      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a76      	ldr	r2, [pc, #472]	; (8009adc <DMA_SetConfig+0x234>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d054      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a74      	ldr	r2, [pc, #464]	; (8009ae0 <DMA_SetConfig+0x238>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d04f      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a73      	ldr	r2, [pc, #460]	; (8009ae4 <DMA_SetConfig+0x23c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d04a      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a71      	ldr	r2, [pc, #452]	; (8009ae8 <DMA_SetConfig+0x240>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d045      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a70      	ldr	r2, [pc, #448]	; (8009aec <DMA_SetConfig+0x244>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d040      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a6e      	ldr	r2, [pc, #440]	; (8009af0 <DMA_SetConfig+0x248>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d03b      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a6d      	ldr	r2, [pc, #436]	; (8009af4 <DMA_SetConfig+0x24c>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d036      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a6b      	ldr	r2, [pc, #428]	; (8009af8 <DMA_SetConfig+0x250>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d031      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a6a      	ldr	r2, [pc, #424]	; (8009afc <DMA_SetConfig+0x254>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d02c      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a68      	ldr	r2, [pc, #416]	; (8009b00 <DMA_SetConfig+0x258>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d027      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a67      	ldr	r2, [pc, #412]	; (8009b04 <DMA_SetConfig+0x25c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d022      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a65      	ldr	r2, [pc, #404]	; (8009b08 <DMA_SetConfig+0x260>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d01d      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a64      	ldr	r2, [pc, #400]	; (8009b0c <DMA_SetConfig+0x264>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d018      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a62      	ldr	r2, [pc, #392]	; (8009b10 <DMA_SetConfig+0x268>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d013      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a61      	ldr	r2, [pc, #388]	; (8009b14 <DMA_SetConfig+0x26c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d00e      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a5f      	ldr	r2, [pc, #380]	; (8009b18 <DMA_SetConfig+0x270>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d009      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a5e      	ldr	r2, [pc, #376]	; (8009b1c <DMA_SetConfig+0x274>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d004      	beq.n	80099b2 <DMA_SetConfig+0x10a>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a5c      	ldr	r2, [pc, #368]	; (8009b20 <DMA_SetConfig+0x278>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d101      	bne.n	80099b6 <DMA_SetConfig+0x10e>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e000      	b.n	80099b8 <DMA_SetConfig+0x110>
 80099b6:	2300      	movs	r3, #0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00d      	beq.n	80099d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80099c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d004      	beq.n	80099d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80099d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a39      	ldr	r2, [pc, #228]	; (8009ac4 <DMA_SetConfig+0x21c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d04a      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a38      	ldr	r2, [pc, #224]	; (8009ac8 <DMA_SetConfig+0x220>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d045      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a36      	ldr	r2, [pc, #216]	; (8009acc <DMA_SetConfig+0x224>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d040      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a35      	ldr	r2, [pc, #212]	; (8009ad0 <DMA_SetConfig+0x228>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d03b      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a33      	ldr	r2, [pc, #204]	; (8009ad4 <DMA_SetConfig+0x22c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d036      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a32      	ldr	r2, [pc, #200]	; (8009ad8 <DMA_SetConfig+0x230>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d031      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a30      	ldr	r2, [pc, #192]	; (8009adc <DMA_SetConfig+0x234>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d02c      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a2f      	ldr	r2, [pc, #188]	; (8009ae0 <DMA_SetConfig+0x238>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d027      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <DMA_SetConfig+0x23c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d022      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a2c      	ldr	r2, [pc, #176]	; (8009ae8 <DMA_SetConfig+0x240>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d01d      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a2a      	ldr	r2, [pc, #168]	; (8009aec <DMA_SetConfig+0x244>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d018      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a29      	ldr	r2, [pc, #164]	; (8009af0 <DMA_SetConfig+0x248>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d013      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a27      	ldr	r2, [pc, #156]	; (8009af4 <DMA_SetConfig+0x24c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d00e      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a26      	ldr	r2, [pc, #152]	; (8009af8 <DMA_SetConfig+0x250>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d009      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a24      	ldr	r2, [pc, #144]	; (8009afc <DMA_SetConfig+0x254>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d004      	beq.n	8009a78 <DMA_SetConfig+0x1d0>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a23      	ldr	r2, [pc, #140]	; (8009b00 <DMA_SetConfig+0x258>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d101      	bne.n	8009a7c <DMA_SetConfig+0x1d4>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <DMA_SetConfig+0x1d6>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d059      	beq.n	8009b36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a86:	f003 031f 	and.w	r3, r3, #31
 8009a8a:	223f      	movs	r2, #63	; 0x3f
 8009a8c:	409a      	lsls	r2, r3
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009aa0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b40      	cmp	r3, #64	; 0x40
 8009ab0:	d138      	bne.n	8009b24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009ac2:	e0ae      	b.n	8009c22 <DMA_SetConfig+0x37a>
 8009ac4:	40020010 	.word	0x40020010
 8009ac8:	40020028 	.word	0x40020028
 8009acc:	40020040 	.word	0x40020040
 8009ad0:	40020058 	.word	0x40020058
 8009ad4:	40020070 	.word	0x40020070
 8009ad8:	40020088 	.word	0x40020088
 8009adc:	400200a0 	.word	0x400200a0
 8009ae0:	400200b8 	.word	0x400200b8
 8009ae4:	40020410 	.word	0x40020410
 8009ae8:	40020428 	.word	0x40020428
 8009aec:	40020440 	.word	0x40020440
 8009af0:	40020458 	.word	0x40020458
 8009af4:	40020470 	.word	0x40020470
 8009af8:	40020488 	.word	0x40020488
 8009afc:	400204a0 	.word	0x400204a0
 8009b00:	400204b8 	.word	0x400204b8
 8009b04:	58025408 	.word	0x58025408
 8009b08:	5802541c 	.word	0x5802541c
 8009b0c:	58025430 	.word	0x58025430
 8009b10:	58025444 	.word	0x58025444
 8009b14:	58025458 	.word	0x58025458
 8009b18:	5802546c 	.word	0x5802546c
 8009b1c:	58025480 	.word	0x58025480
 8009b20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	60da      	str	r2, [r3, #12]
}
 8009b34:	e075      	b.n	8009c22 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a3d      	ldr	r2, [pc, #244]	; (8009c30 <DMA_SetConfig+0x388>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d04a      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a3b      	ldr	r2, [pc, #236]	; (8009c34 <DMA_SetConfig+0x38c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d045      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a3a      	ldr	r2, [pc, #232]	; (8009c38 <DMA_SetConfig+0x390>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d040      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a38      	ldr	r2, [pc, #224]	; (8009c3c <DMA_SetConfig+0x394>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d03b      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a37      	ldr	r2, [pc, #220]	; (8009c40 <DMA_SetConfig+0x398>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d036      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a35      	ldr	r2, [pc, #212]	; (8009c44 <DMA_SetConfig+0x39c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d031      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a34      	ldr	r2, [pc, #208]	; (8009c48 <DMA_SetConfig+0x3a0>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d02c      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a32      	ldr	r2, [pc, #200]	; (8009c4c <DMA_SetConfig+0x3a4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d027      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a31      	ldr	r2, [pc, #196]	; (8009c50 <DMA_SetConfig+0x3a8>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d022      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a2f      	ldr	r2, [pc, #188]	; (8009c54 <DMA_SetConfig+0x3ac>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d01d      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a2e      	ldr	r2, [pc, #184]	; (8009c58 <DMA_SetConfig+0x3b0>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d018      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a2c      	ldr	r2, [pc, #176]	; (8009c5c <DMA_SetConfig+0x3b4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d013      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a2b      	ldr	r2, [pc, #172]	; (8009c60 <DMA_SetConfig+0x3b8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00e      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a29      	ldr	r2, [pc, #164]	; (8009c64 <DMA_SetConfig+0x3bc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a28      	ldr	r2, [pc, #160]	; (8009c68 <DMA_SetConfig+0x3c0>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d004      	beq.n	8009bd6 <DMA_SetConfig+0x32e>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a26      	ldr	r2, [pc, #152]	; (8009c6c <DMA_SetConfig+0x3c4>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d101      	bne.n	8009bda <DMA_SetConfig+0x332>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <DMA_SetConfig+0x334>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d020      	beq.n	8009c22 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be4:	f003 031f 	and.w	r3, r3, #31
 8009be8:	2201      	movs	r2, #1
 8009bea:	409a      	lsls	r2, r3
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	2b40      	cmp	r3, #64	; 0x40
 8009bfe:	d108      	bne.n	8009c12 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	60da      	str	r2, [r3, #12]
}
 8009c10:	e007      	b.n	8009c22 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	60da      	str	r2, [r3, #12]
}
 8009c22:	bf00      	nop
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	48022c08 	.word	0x48022c08
 8009c34:	48022c1c 	.word	0x48022c1c
 8009c38:	48022c30 	.word	0x48022c30
 8009c3c:	48022c44 	.word	0x48022c44
 8009c40:	48022c58 	.word	0x48022c58
 8009c44:	48022c6c 	.word	0x48022c6c
 8009c48:	48022c80 	.word	0x48022c80
 8009c4c:	48022c94 	.word	0x48022c94
 8009c50:	58025408 	.word	0x58025408
 8009c54:	5802541c 	.word	0x5802541c
 8009c58:	58025430 	.word	0x58025430
 8009c5c:	58025444 	.word	0x58025444
 8009c60:	58025458 	.word	0x58025458
 8009c64:	5802546c 	.word	0x5802546c
 8009c68:	58025480 	.word	0x58025480
 8009c6c:	58025494 	.word	0x58025494

08009c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a42      	ldr	r2, [pc, #264]	; (8009d88 <DMA_CalcBaseAndBitshift+0x118>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d04a      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a41      	ldr	r2, [pc, #260]	; (8009d8c <DMA_CalcBaseAndBitshift+0x11c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d045      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a3f      	ldr	r2, [pc, #252]	; (8009d90 <DMA_CalcBaseAndBitshift+0x120>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d040      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a3e      	ldr	r2, [pc, #248]	; (8009d94 <DMA_CalcBaseAndBitshift+0x124>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d03b      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a3c      	ldr	r2, [pc, #240]	; (8009d98 <DMA_CalcBaseAndBitshift+0x128>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d036      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a3b      	ldr	r2, [pc, #236]	; (8009d9c <DMA_CalcBaseAndBitshift+0x12c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d031      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a39      	ldr	r2, [pc, #228]	; (8009da0 <DMA_CalcBaseAndBitshift+0x130>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d02c      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a38      	ldr	r2, [pc, #224]	; (8009da4 <DMA_CalcBaseAndBitshift+0x134>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d027      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a36      	ldr	r2, [pc, #216]	; (8009da8 <DMA_CalcBaseAndBitshift+0x138>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d022      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a35      	ldr	r2, [pc, #212]	; (8009dac <DMA_CalcBaseAndBitshift+0x13c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d01d      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a33      	ldr	r2, [pc, #204]	; (8009db0 <DMA_CalcBaseAndBitshift+0x140>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d018      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a32      	ldr	r2, [pc, #200]	; (8009db4 <DMA_CalcBaseAndBitshift+0x144>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a30      	ldr	r2, [pc, #192]	; (8009db8 <DMA_CalcBaseAndBitshift+0x148>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00e      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a2f      	ldr	r2, [pc, #188]	; (8009dbc <DMA_CalcBaseAndBitshift+0x14c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d009      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a2d      	ldr	r2, [pc, #180]	; (8009dc0 <DMA_CalcBaseAndBitshift+0x150>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <DMA_CalcBaseAndBitshift+0xa8>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a2c      	ldr	r2, [pc, #176]	; (8009dc4 <DMA_CalcBaseAndBitshift+0x154>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d101      	bne.n	8009d1c <DMA_CalcBaseAndBitshift+0xac>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <DMA_CalcBaseAndBitshift+0xae>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d024      	beq.n	8009d6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	3b10      	subs	r3, #16
 8009d2a:	4a27      	ldr	r2, [pc, #156]	; (8009dc8 <DMA_CalcBaseAndBitshift+0x158>)
 8009d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d30:	091b      	lsrs	r3, r3, #4
 8009d32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	4a24      	ldr	r2, [pc, #144]	; (8009dcc <DMA_CalcBaseAndBitshift+0x15c>)
 8009d3c:	5cd3      	ldrb	r3, [r2, r3]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d908      	bls.n	8009d5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4b1f      	ldr	r3, [pc, #124]	; (8009dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8009d52:	4013      	ands	r3, r2
 8009d54:	1d1a      	adds	r2, r3, #4
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	659a      	str	r2, [r3, #88]	; 0x58
 8009d5a:	e00d      	b.n	8009d78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	4b1b      	ldr	r3, [pc, #108]	; (8009dd0 <DMA_CalcBaseAndBitshift+0x160>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	6593      	str	r3, [r2, #88]	; 0x58
 8009d6a:	e005      	b.n	8009d78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40020010 	.word	0x40020010
 8009d8c:	40020028 	.word	0x40020028
 8009d90:	40020040 	.word	0x40020040
 8009d94:	40020058 	.word	0x40020058
 8009d98:	40020070 	.word	0x40020070
 8009d9c:	40020088 	.word	0x40020088
 8009da0:	400200a0 	.word	0x400200a0
 8009da4:	400200b8 	.word	0x400200b8
 8009da8:	40020410 	.word	0x40020410
 8009dac:	40020428 	.word	0x40020428
 8009db0:	40020440 	.word	0x40020440
 8009db4:	40020458 	.word	0x40020458
 8009db8:	40020470 	.word	0x40020470
 8009dbc:	40020488 	.word	0x40020488
 8009dc0:	400204a0 	.word	0x400204a0
 8009dc4:	400204b8 	.word	0x400204b8
 8009dc8:	aaaaaaab 	.word	0xaaaaaaab
 8009dcc:	0801f4d8 	.word	0x0801f4d8
 8009dd0:	fffffc00 	.word	0xfffffc00

08009dd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d120      	bne.n	8009e2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d858      	bhi.n	8009ea2 <DMA_CheckFifoParam+0xce>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <DMA_CheckFifoParam+0x24>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e1b 	.word	0x08009e1b
 8009e00:	08009e09 	.word	0x08009e09
 8009e04:	08009ea3 	.word	0x08009ea3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d048      	beq.n	8009ea6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e18:	e045      	b.n	8009ea6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e22:	d142      	bne.n	8009eaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e28:	e03f      	b.n	8009eaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e32:	d123      	bne.n	8009e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d838      	bhi.n	8009eae <DMA_CheckFifoParam+0xda>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <DMA_CheckFifoParam+0x70>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e5b 	.word	0x08009e5b
 8009e4c:	08009e55 	.word	0x08009e55
 8009e50:	08009e6d 	.word	0x08009e6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]
        break;
 8009e58:	e030      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d025      	beq.n	8009eb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e6a:	e022      	b.n	8009eb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e74:	d11f      	bne.n	8009eb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e7a:	e01c      	b.n	8009eb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d902      	bls.n	8009e8a <DMA_CheckFifoParam+0xb6>
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d003      	beq.n	8009e90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009e88:	e018      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8009e8e:	e015      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00e      	beq.n	8009eba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea0:	e00b      	b.n	8009eba <DMA_CheckFifoParam+0xe6>
        break;
 8009ea2:	bf00      	nop
 8009ea4:	e00a      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009ea6:	bf00      	nop
 8009ea8:	e008      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eaa:	bf00      	nop
 8009eac:	e006      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eae:	bf00      	nop
 8009eb0:	e004      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eb2:	bf00      	nop
 8009eb4:	e002      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
        break;
 8009eb6:	bf00      	nop
 8009eb8:	e000      	b.n	8009ebc <DMA_CheckFifoParam+0xe8>
    break;
 8009eba:	bf00      	nop
    }
  }

  return status;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop

08009ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a38      	ldr	r2, [pc, #224]	; (8009fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d022      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a36      	ldr	r2, [pc, #216]	; (8009fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01d      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a35      	ldr	r2, [pc, #212]	; (8009fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d018      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a33      	ldr	r2, [pc, #204]	; (8009fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a32      	ldr	r2, [pc, #200]	; (8009fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00e      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a30      	ldr	r2, [pc, #192]	; (8009fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d009      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a2f      	ldr	r2, [pc, #188]	; (8009fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d004      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a2d      	ldr	r2, [pc, #180]	; (8009fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d101      	bne.n	8009f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01a      	beq.n	8009f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	3b08      	subs	r3, #8
 8009f3c:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f42:	091b      	lsrs	r3, r3, #4
 8009f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4b26      	ldr	r3, [pc, #152]	; (8009fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a24      	ldr	r2, [pc, #144]	; (8009fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009f58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f003 031f 	and.w	r3, r3, #31
 8009f60:	2201      	movs	r2, #1
 8009f62:	409a      	lsls	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009f68:	e024      	b.n	8009fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	3b10      	subs	r3, #16
 8009f72:	4a1e      	ldr	r2, [pc, #120]	; (8009fec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009f74:	fba2 2303 	umull	r2, r3, r2, r3
 8009f78:	091b      	lsrs	r3, r3, #4
 8009f7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4a1c      	ldr	r2, [pc, #112]	; (8009ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d806      	bhi.n	8009f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d902      	bls.n	8009f92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	4b18      	ldr	r3, [pc, #96]	; (8009ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a16      	ldr	r2, [pc, #88]	; (8009ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f003 031f 	and.w	r3, r3, #31
 8009fac:	2201      	movs	r2, #1
 8009fae:	409a      	lsls	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009fb4:	bf00      	nop
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	58025408 	.word	0x58025408
 8009fc4:	5802541c 	.word	0x5802541c
 8009fc8:	58025430 	.word	0x58025430
 8009fcc:	58025444 	.word	0x58025444
 8009fd0:	58025458 	.word	0x58025458
 8009fd4:	5802546c 	.word	0x5802546c
 8009fd8:	58025480 	.word	0x58025480
 8009fdc:	58025494 	.word	0x58025494
 8009fe0:	cccccccd 	.word	0xcccccccd
 8009fe4:	16009600 	.word	0x16009600
 8009fe8:	58025880 	.word	0x58025880
 8009fec:	aaaaaaab 	.word	0xaaaaaaab
 8009ff0:	400204b8 	.word	0x400204b8
 8009ff4:	4002040f 	.word	0x4002040f
 8009ff8:	10008200 	.word	0x10008200
 8009ffc:	40020880 	.word	0x40020880

0800a000 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d04a      	beq.n	800a0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d847      	bhi.n	800a0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a25      	ldr	r2, [pc, #148]	; (800a0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d022      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a24      	ldr	r2, [pc, #144]	; (800a0bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d01d      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a22      	ldr	r2, [pc, #136]	; (800a0c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d018      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a21      	ldr	r2, [pc, #132]	; (800a0c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d013      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a1f      	ldr	r2, [pc, #124]	; (800a0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d00e      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d009      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a1c      	ldr	r2, [pc, #112]	; (800a0d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d004      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a1b      	ldr	r2, [pc, #108]	; (800a0d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d101      	bne.n	800a070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a070:	2300      	movs	r3, #0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	4b17      	ldr	r3, [pc, #92]	; (800a0d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a088:	671a      	str	r2, [r3, #112]	; 0x70
 800a08a:	e009      	b.n	800a0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	461a      	mov	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a11      	ldr	r2, [pc, #68]	; (800a0e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a09e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	409a      	lsls	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	58025408 	.word	0x58025408
 800a0bc:	5802541c 	.word	0x5802541c
 800a0c0:	58025430 	.word	0x58025430
 800a0c4:	58025444 	.word	0x58025444
 800a0c8:	58025458 	.word	0x58025458
 800a0cc:	5802546c 	.word	0x5802546c
 800a0d0:	58025480 	.word	0x58025480
 800a0d4:	58025494 	.word	0x58025494
 800a0d8:	1600963f 	.word	0x1600963f
 800a0dc:	58025940 	.word	0x58025940
 800a0e0:	1000823f 	.word	0x1000823f
 800a0e4:	40020940 	.word	0x40020940

0800a0e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e04f      	b.n	800a19a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7f6 fcde 	bl	8000ad0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4b20      	ldr	r3, [pc, #128]	; (800a1a4 <HAL_DMA2D_Init+0xbc>)
 800a124:	4013      	ands	r3, r2
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6851      	ldr	r1, [r2, #4]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	69d2      	ldr	r2, [r2, #28]
 800a12e:	4311      	orrs	r1, r2
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	6812      	ldr	r2, [r2, #0]
 800a134:	430b      	orrs	r3, r1
 800a136:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a13e:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <HAL_DMA2D_Init+0xc0>)
 800a140:	4013      	ands	r3, r2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6891      	ldr	r1, [r2, #8]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6992      	ldr	r2, [r2, #24]
 800a14a:	4311      	orrs	r1, r2
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6812      	ldr	r2, [r2, #0]
 800a150:	430b      	orrs	r3, r1
 800a152:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a15a:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <HAL_DMA2D_Init+0xc4>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	68d1      	ldr	r1, [r2, #12]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	430b      	orrs	r3, r1
 800a168:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a170:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	051a      	lsls	r2, r3, #20
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	055b      	lsls	r3, r3, #21
 800a180:	431a      	orrs	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	fff8ffbf 	.word	0xfff8ffbf
 800a1a8:	fffffef8 	.word	0xfffffef8
 800a1ac:	ffff0000 	.word	0xffff0000

0800a1b0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d101      	bne.n	800a1cc <HAL_DMA2D_Start+0x1c>
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	e018      	b.n	800a1fe <HAL_DMA2D_Start+0x4e>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fab4 	bl	800a754 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0201 	orr.w	r2, r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b086      	sub	sp, #24
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800a210:	2300      	movs	r3, #0
 800a212:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d056      	beq.n	800a2d0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a222:	f7fc fb81 	bl	8006928 <HAL_GetTick>
 800a226:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a228:	e04b      	b.n	800a2c2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d023      	beq.n	800a284 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d005      	beq.n	800a252 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a24a:	f043 0202 	orr.w	r2, r3, #2
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f003 0301 	and.w	r3, r3, #1
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a260:	f043 0201 	orr.w	r2, r3, #1
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2221      	movs	r2, #33	; 0x21
 800a26e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2204      	movs	r2, #4
 800a274:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e0a5      	b.n	800a3d0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28a:	d01a      	beq.n	800a2c2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a28c:	f7fc fb4c 	bl	8006928 <HAL_GetTick>
 800a290:	4602      	mov	r2, r0
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d302      	bcc.n	800a2a2 <HAL_DMA2D_PollForTransfer+0x9c>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10f      	bne.n	800a2c2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a6:	f043 0220 	orr.w	r2, r3, #32
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2203      	movs	r2, #3
 800a2b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e086      	b.n	800a3d0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0ac      	beq.n	800a22a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	f003 0320 	and.w	r3, r3, #32
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d061      	beq.n	800a3b6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2f2:	f7fc fb19 	bl	8006928 <HAL_GetTick>
 800a2f6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a2f8:	e056      	b.n	800a3a8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d02e      	beq.n	800a36a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f003 0308 	and.w	r3, r3, #8
 800a312:	2b00      	cmp	r3, #0
 800a314:	d005      	beq.n	800a322 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a31a:	f043 0204 	orr.w	r2, r3, #4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f003 0320 	and.w	r3, r3, #32
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d005      	beq.n	800a338 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a330:	f043 0202 	orr.w	r2, r3, #2
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a346:	f043 0201 	orr.w	r2, r3, #1
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2229      	movs	r2, #41	; 0x29
 800a354:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2204      	movs	r2, #4
 800a35a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e032      	b.n	800a3d0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a370:	d01a      	beq.n	800a3a8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a372:	f7fc fad9 	bl	8006928 <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d302      	bcc.n	800a388 <HAL_DMA2D_PollForTransfer+0x182>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10f      	bne.n	800a3a8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a38c:	f043 0220 	orr.w	r2, r3, #32
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2203      	movs	r2, #3
 800a398:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e013      	b.n	800a3d0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f003 0310 	and.w	r3, r3, #16
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0a1      	beq.n	800a2fa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2212      	movs	r2, #18
 800a3bc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d026      	beq.n	800a448 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a400:	2b00      	cmp	r3, #0
 800a402:	d021      	beq.n	800a448 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a412:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a418:	f043 0201 	orr.w	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2201      	movs	r2, #1
 800a426:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2204      	movs	r2, #4
 800a42c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d026      	beq.n	800a4a0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d021      	beq.n	800a4a0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a46a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2220      	movs	r2, #32
 800a472:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a478:	f043 0202 	orr.w	r2, r3, #2
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2204      	movs	r2, #4
 800a484:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f003 0308 	and.w	r3, r3, #8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d026      	beq.n	800a4f8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d021      	beq.n	800a4f8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2208      	movs	r2, #8
 800a4ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d0:	f043 0204 	orr.w	r2, r3, #4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2204      	movs	r2, #4
 800a4dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d003      	beq.n	800a4f8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f003 0304 	and.w	r3, r3, #4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d013      	beq.n	800a52a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00e      	beq.n	800a52a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a51a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2204      	movs	r2, #4
 800a522:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f853 	bl	800a5d0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d024      	beq.n	800a57e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01f      	beq.n	800a57e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a54c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2202      	movs	r2, #2
 800a554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b00      	cmp	r3, #0
 800a586:	d01f      	beq.n	800a5c8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d01a      	beq.n	800a5c8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a5a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2210      	movs	r2, #16
 800a5a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f80e 	bl	800a5e4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800a5c8:	bf00      	nop
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a614:	2b01      	cmp	r3, #1
 800a616:	d101      	bne.n	800a61c <HAL_DMA2D_ConfigLayer+0x24>
 800a618:	2302      	movs	r3, #2
 800a61a:	e092      	b.n	800a742 <HAL_DMA2D_ConfigLayer+0x14a>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	4613      	mov	r3, r2
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	1a9b      	subs	r3, r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	3328      	adds	r3, #40	; 0x28
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	041b      	lsls	r3, r3, #16
 800a648:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a650:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a658:	4313      	orrs	r3, r2
 800a65a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800a65c:	4b3c      	ldr	r3, [pc, #240]	; (800a750 <HAL_DMA2D_ConfigLayer+0x158>)
 800a65e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	2b0a      	cmp	r3, #10
 800a666:	d003      	beq.n	800a670 <HAL_DMA2D_ConfigLayer+0x78>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	d107      	bne.n	800a680 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
 800a67e:	e005      	b.n	800a68c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	061b      	lsls	r3, r3, #24
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	4313      	orrs	r3, r2
 800a68a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d120      	bne.n	800a6d4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	43db      	mvns	r3, r3
 800a69c:	ea02 0103 	and.w	r1, r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	2b0a      	cmp	r3, #10
 800a6ba:	d003      	beq.n	800a6c4 <HAL_DMA2D_ConfigLayer+0xcc>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2b09      	cmp	r3, #9
 800a6c2:	d135      	bne.n	800a730 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	68da      	ldr	r2, [r3, #12]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a6d0:	629a      	str	r2, [r3, #40]	; 0x28
 800a6d2:	e02d      	b.n	800a730 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	2b0b      	cmp	r3, #11
 800a6da:	d109      	bne.n	800a6f0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	049b      	lsls	r3, r3, #18
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800a6ee:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	69da      	ldr	r2, [r3, #28]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	43db      	mvns	r3, r3
 800a6fa:	ea02 0103 	and.w	r1, r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	430a      	orrs	r2, r1
 800a706:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	6812      	ldr	r2, [r2, #0]
 800a710:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2b0a      	cmp	r3, #10
 800a718:	d003      	beq.n	800a722 <HAL_DMA2D_ConfigLayer+0x12a>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	2b09      	cmp	r3, #9
 800a720:	d106      	bne.n	800a730 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68da      	ldr	r2, [r3, #12]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a72e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	ff33000f 	.word	0xff33000f

0800a754 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800a754:	b480      	push	{r7}
 800a756:	b08b      	sub	sp, #44	; 0x2c
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a768:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	041a      	lsls	r2, r3, #16
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	431a      	orrs	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a78c:	d174      	bne.n	800a878 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a794:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a79c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a7a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d108      	bne.n	800a7c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7c4:	e053      	b.n	800a86e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d106      	bne.n	800a7dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7da:	e048      	b.n	800a86e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d111      	bne.n	800a808 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	0cdb      	lsrs	r3, r3, #19
 800a7e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	0a9b      	lsrs	r3, r3, #10
 800a7ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	08db      	lsrs	r3, r3, #3
 800a7f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	02db      	lsls	r3, r3, #11
 800a7fe:	4313      	orrs	r3, r2
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	4313      	orrs	r3, r2
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
 800a806:	e032      	b.n	800a86e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	2b03      	cmp	r3, #3
 800a80e:	d117      	bne.n	800a840 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	0fdb      	lsrs	r3, r3, #31
 800a814:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	0cdb      	lsrs	r3, r3, #19
 800a81a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	0adb      	lsrs	r3, r3, #11
 800a820:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	08db      	lsrs	r3, r3, #3
 800a826:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	029b      	lsls	r3, r3, #10
 800a830:	431a      	orrs	r2, r3
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	03db      	lsls	r3, r3, #15
 800a836:	4313      	orrs	r3, r2
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
 800a83e:	e016      	b.n	800a86e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	0f1b      	lsrs	r3, r3, #28
 800a844:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	0d1b      	lsrs	r3, r3, #20
 800a84a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	0b1b      	lsrs	r3, r3, #12
 800a850:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	091b      	lsrs	r3, r3, #4
 800a856:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	011a      	lsls	r2, r3, #4
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	021b      	lsls	r3, r3, #8
 800a860:	431a      	orrs	r2, r3
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	031b      	lsls	r3, r3, #12
 800a866:	4313      	orrs	r3, r2
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a874:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800a876:	e00d      	b.n	800a894 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a880:	d104      	bne.n	800a88c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	615a      	str	r2, [r3, #20]
}
 800a88a:	e003      	b.n	800a894 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	60da      	str	r2, [r3, #12]
}
 800a894:	bf00      	nop
 800a896:	372c      	adds	r7, #44	; 0x2c
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2b80      	cmp	r3, #128	; 0x80
 800a8b8:	d105      	bne.n	800a8c6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e315      	b.n	800aef2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e30e      	b.n	800aef2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	f040 82fd 	bne.w	800aee4 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a82      	ldr	r2, [pc, #520]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d04a      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a81      	ldr	r2, [pc, #516]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d045      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a7f      	ldr	r2, [pc, #508]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d040      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a7e      	ldr	r2, [pc, #504]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d03b      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a7c      	ldr	r2, [pc, #496]	; (800ab18 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d036      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a7b      	ldr	r2, [pc, #492]	; (800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d031      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a79      	ldr	r2, [pc, #484]	; (800ab20 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d02c      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a78      	ldr	r2, [pc, #480]	; (800ab24 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d027      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a76      	ldr	r2, [pc, #472]	; (800ab28 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d022      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a75      	ldr	r2, [pc, #468]	; (800ab2c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d01d      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a73      	ldr	r2, [pc, #460]	; (800ab30 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d018      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a72      	ldr	r2, [pc, #456]	; (800ab34 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d013      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a70      	ldr	r2, [pc, #448]	; (800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00e      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a6f      	ldr	r2, [pc, #444]	; (800ab3c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d009      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a6d      	ldr	r2, [pc, #436]	; (800ab40 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d004      	beq.n	800a998 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a6c      	ldr	r2, [pc, #432]	; (800ab44 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d101      	bne.n	800a99c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800a99c:	2300      	movs	r3, #0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d018      	beq.n	800a9d4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a9b0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9be:	3308      	adds	r3, #8
 800a9c0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	223f      	movs	r2, #63	; 0x3f
 800a9cc:	409a      	lsls	r2, r3
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	e018      	b.n	800aa06 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6819      	ldr	r1, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	f248 0320 	movw	r3, #32800	; 0x8020
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9fa:	f003 031f 	and.w	r3, r3, #31
 800a9fe:	2201      	movs	r2, #1
 800aa00:	409a      	lsls	r2, r3
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	68b9      	ldr	r1, [r7, #8]
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 fb41 	bl	800b094 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a3c      	ldr	r2, [pc, #240]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d072      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a3a      	ldr	r2, [pc, #232]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d06d      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a39      	ldr	r2, [pc, #228]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d068      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a37      	ldr	r2, [pc, #220]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d063      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a36      	ldr	r2, [pc, #216]	; (800ab18 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d05e      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a34      	ldr	r2, [pc, #208]	; (800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d059      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a33      	ldr	r2, [pc, #204]	; (800ab20 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d054      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a31      	ldr	r2, [pc, #196]	; (800ab24 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d04f      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a30      	ldr	r2, [pc, #192]	; (800ab28 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d04a      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a2e      	ldr	r2, [pc, #184]	; (800ab2c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d045      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a2d      	ldr	r2, [pc, #180]	; (800ab30 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d040      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a2b      	ldr	r2, [pc, #172]	; (800ab34 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d03b      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a2a      	ldr	r2, [pc, #168]	; (800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d036      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a28      	ldr	r2, [pc, #160]	; (800ab3c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d031      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a27      	ldr	r2, [pc, #156]	; (800ab40 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d02c      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a25      	ldr	r2, [pc, #148]	; (800ab44 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d027      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a24      	ldr	r2, [pc, #144]	; (800ab48 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d022      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a22      	ldr	r2, [pc, #136]	; (800ab4c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d01d      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a21      	ldr	r2, [pc, #132]	; (800ab50 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d018      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a1f      	ldr	r2, [pc, #124]	; (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d013      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a1e      	ldr	r2, [pc, #120]	; (800ab58 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d00e      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a1c      	ldr	r2, [pc, #112]	; (800ab5c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d009      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a1b      	ldr	r2, [pc, #108]	; (800ab60 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d004      	beq.n	800ab02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a19      	ldr	r2, [pc, #100]	; (800ab64 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d132      	bne.n	800ab68 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e031      	b.n	800ab6a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800ab06:	bf00      	nop
 800ab08:	40020010 	.word	0x40020010
 800ab0c:	40020028 	.word	0x40020028
 800ab10:	40020040 	.word	0x40020040
 800ab14:	40020058 	.word	0x40020058
 800ab18:	40020070 	.word	0x40020070
 800ab1c:	40020088 	.word	0x40020088
 800ab20:	400200a0 	.word	0x400200a0
 800ab24:	400200b8 	.word	0x400200b8
 800ab28:	40020410 	.word	0x40020410
 800ab2c:	40020428 	.word	0x40020428
 800ab30:	40020440 	.word	0x40020440
 800ab34:	40020458 	.word	0x40020458
 800ab38:	40020470 	.word	0x40020470
 800ab3c:	40020488 	.word	0x40020488
 800ab40:	400204a0 	.word	0x400204a0
 800ab44:	400204b8 	.word	0x400204b8
 800ab48:	58025408 	.word	0x58025408
 800ab4c:	5802541c 	.word	0x5802541c
 800ab50:	58025430 	.word	0x58025430
 800ab54:	58025444 	.word	0x58025444
 800ab58:	58025458 	.word	0x58025458
 800ab5c:	5802546c 	.word	0x5802546c
 800ab60:	58025480 	.word	0x58025480
 800ab64:	58025494 	.word	0x58025494
 800ab68:	2300      	movs	r3, #0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00d      	beq.n	800ab8a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ab76:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d004      	beq.n	800ab8a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ab88:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a3b      	ldr	r2, [pc, #236]	; (800ac7c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d04a      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a39      	ldr	r2, [pc, #228]	; (800ac80 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d045      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a38      	ldr	r2, [pc, #224]	; (800ac84 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d040      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a36      	ldr	r2, [pc, #216]	; (800ac88 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d03b      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a35      	ldr	r2, [pc, #212]	; (800ac8c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d036      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a33      	ldr	r2, [pc, #204]	; (800ac90 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d031      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a32      	ldr	r2, [pc, #200]	; (800ac94 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d02c      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a30      	ldr	r2, [pc, #192]	; (800ac98 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d027      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a2f      	ldr	r2, [pc, #188]	; (800ac9c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d022      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a2d      	ldr	r2, [pc, #180]	; (800aca0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01d      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a2c      	ldr	r2, [pc, #176]	; (800aca4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d018      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a2a      	ldr	r2, [pc, #168]	; (800aca8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a29      	ldr	r2, [pc, #164]	; (800acac <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00e      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a27      	ldr	r2, [pc, #156]	; (800acb0 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d009      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a26      	ldr	r2, [pc, #152]	; (800acb4 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a24      	ldr	r2, [pc, #144]	; (800acb8 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d101      	bne.n	800ac2e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e000      	b.n	800ac30 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d043      	beq.n	800acbc <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f023 021e 	bic.w	r2, r3, #30
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0216 	orr.w	r2, r2, #22
 800ac46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	695a      	ldr	r2, [r3, #20]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac56:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d103      	bne.n	800ac68 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d043      	beq.n	800acf0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0208 	orr.w	r2, r2, #8
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	e03a      	b.n	800acf0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800ac7a:	bf00      	nop
 800ac7c:	40020010 	.word	0x40020010
 800ac80:	40020028 	.word	0x40020028
 800ac84:	40020040 	.word	0x40020040
 800ac88:	40020058 	.word	0x40020058
 800ac8c:	40020070 	.word	0x40020070
 800ac90:	40020088 	.word	0x40020088
 800ac94:	400200a0 	.word	0x400200a0
 800ac98:	400200b8 	.word	0x400200b8
 800ac9c:	40020410 	.word	0x40020410
 800aca0:	40020428 	.word	0x40020428
 800aca4:	40020440 	.word	0x40020440
 800aca8:	40020458 	.word	0x40020458
 800acac:	40020470 	.word	0x40020470
 800acb0:	40020488 	.word	0x40020488
 800acb4:	400204a0 	.word	0x400204a0
 800acb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f023 020e 	bic.w	r2, r3, #14
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f042 020a 	orr.w	r2, r2, #10
 800acce:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d007      	beq.n	800acf0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f042 0204 	orr.w	r2, r2, #4
 800acee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a81      	ldr	r2, [pc, #516]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d072      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a80      	ldr	r2, [pc, #512]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d06d      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a7e      	ldr	r2, [pc, #504]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d068      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a7d      	ldr	r2, [pc, #500]	; (800af08 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d063      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a7b      	ldr	r2, [pc, #492]	; (800af0c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d05e      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a7a      	ldr	r2, [pc, #488]	; (800af10 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d059      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a78      	ldr	r2, [pc, #480]	; (800af14 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d054      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a77      	ldr	r2, [pc, #476]	; (800af18 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d04f      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a75      	ldr	r2, [pc, #468]	; (800af1c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d04a      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a74      	ldr	r2, [pc, #464]	; (800af20 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d045      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a72      	ldr	r2, [pc, #456]	; (800af24 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d040      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a71      	ldr	r2, [pc, #452]	; (800af28 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d03b      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a6f      	ldr	r2, [pc, #444]	; (800af2c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d036      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a6e      	ldr	r2, [pc, #440]	; (800af30 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d031      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a6c      	ldr	r2, [pc, #432]	; (800af34 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d02c      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a6b      	ldr	r2, [pc, #428]	; (800af38 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d027      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a69      	ldr	r2, [pc, #420]	; (800af3c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d022      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a68      	ldr	r2, [pc, #416]	; (800af40 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d01d      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a66      	ldr	r2, [pc, #408]	; (800af44 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d018      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a65      	ldr	r2, [pc, #404]	; (800af48 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d013      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a63      	ldr	r2, [pc, #396]	; (800af4c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00e      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a62      	ldr	r2, [pc, #392]	; (800af50 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d009      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a60      	ldr	r2, [pc, #384]	; (800af54 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d004      	beq.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a5f      	ldr	r2, [pc, #380]	; (800af58 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d101      	bne.n	800ade4 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 800ade0:	2301      	movs	r3, #1
 800ade2:	e000      	b.n	800ade6 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 800ade4:	2300      	movs	r3, #0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d01a      	beq.n	800ae20 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d007      	beq.n	800ae08 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d007      	beq.n	800ae20 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a35      	ldr	r2, [pc, #212]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d04a      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a34      	ldr	r2, [pc, #208]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d045      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a32      	ldr	r2, [pc, #200]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d040      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a31      	ldr	r2, [pc, #196]	; (800af08 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d03b      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a2f      	ldr	r2, [pc, #188]	; (800af0c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d036      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a2e      	ldr	r2, [pc, #184]	; (800af10 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d031      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a2c      	ldr	r2, [pc, #176]	; (800af14 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d02c      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d027      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a29      	ldr	r2, [pc, #164]	; (800af1c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d022      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a28      	ldr	r2, [pc, #160]	; (800af20 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d01d      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a26      	ldr	r2, [pc, #152]	; (800af24 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d018      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a25      	ldr	r2, [pc, #148]	; (800af28 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d013      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a23      	ldr	r2, [pc, #140]	; (800af2c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00e      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a22      	ldr	r2, [pc, #136]	; (800af30 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d009      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a20      	ldr	r2, [pc, #128]	; (800af34 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d004      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a1f      	ldr	r2, [pc, #124]	; (800af38 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d108      	bne.n	800aed2 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f042 0201 	orr.w	r2, r2, #1
 800aece:	601a      	str	r2, [r3, #0]
 800aed0:	e00e      	b.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f042 0201 	orr.w	r2, r2, #1
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	e005      	b.n	800aef0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	40020010 	.word	0x40020010
 800af00:	40020028 	.word	0x40020028
 800af04:	40020040 	.word	0x40020040
 800af08:	40020058 	.word	0x40020058
 800af0c:	40020070 	.word	0x40020070
 800af10:	40020088 	.word	0x40020088
 800af14:	400200a0 	.word	0x400200a0
 800af18:	400200b8 	.word	0x400200b8
 800af1c:	40020410 	.word	0x40020410
 800af20:	40020428 	.word	0x40020428
 800af24:	40020440 	.word	0x40020440
 800af28:	40020458 	.word	0x40020458
 800af2c:	40020470 	.word	0x40020470
 800af30:	40020488 	.word	0x40020488
 800af34:	400204a0 	.word	0x400204a0
 800af38:	400204b8 	.word	0x400204b8
 800af3c:	58025408 	.word	0x58025408
 800af40:	5802541c 	.word	0x5802541c
 800af44:	58025430 	.word	0x58025430
 800af48:	58025444 	.word	0x58025444
 800af4c:	58025458 	.word	0x58025458
 800af50:	5802546c 	.word	0x5802546c
 800af54:	58025480 	.word	0x58025480
 800af58:	58025494 	.word	0x58025494

0800af5c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a39      	ldr	r2, [pc, #228]	; (800b054 <HAL_DMAEx_ChangeMemory+0xf8>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d04a      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a37      	ldr	r2, [pc, #220]	; (800b058 <HAL_DMAEx_ChangeMemory+0xfc>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d045      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a36      	ldr	r2, [pc, #216]	; (800b05c <HAL_DMAEx_ChangeMemory+0x100>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d040      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a34      	ldr	r2, [pc, #208]	; (800b060 <HAL_DMAEx_ChangeMemory+0x104>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d03b      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a33      	ldr	r2, [pc, #204]	; (800b064 <HAL_DMAEx_ChangeMemory+0x108>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d036      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a31      	ldr	r2, [pc, #196]	; (800b068 <HAL_DMAEx_ChangeMemory+0x10c>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d031      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a30      	ldr	r2, [pc, #192]	; (800b06c <HAL_DMAEx_ChangeMemory+0x110>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d02c      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a2e      	ldr	r2, [pc, #184]	; (800b070 <HAL_DMAEx_ChangeMemory+0x114>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d027      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a2d      	ldr	r2, [pc, #180]	; (800b074 <HAL_DMAEx_ChangeMemory+0x118>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d022      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a2b      	ldr	r2, [pc, #172]	; (800b078 <HAL_DMAEx_ChangeMemory+0x11c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d01d      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a2a      	ldr	r2, [pc, #168]	; (800b07c <HAL_DMAEx_ChangeMemory+0x120>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d018      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a28      	ldr	r2, [pc, #160]	; (800b080 <HAL_DMAEx_ChangeMemory+0x124>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d013      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a27      	ldr	r2, [pc, #156]	; (800b084 <HAL_DMAEx_ChangeMemory+0x128>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d00e      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a25      	ldr	r2, [pc, #148]	; (800b088 <HAL_DMAEx_ChangeMemory+0x12c>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d009      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a24      	ldr	r2, [pc, #144]	; (800b08c <HAL_DMAEx_ChangeMemory+0x130>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d004      	beq.n	800b00a <HAL_DMAEx_ChangeMemory+0xae>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a22      	ldr	r2, [pc, #136]	; (800b090 <HAL_DMAEx_ChangeMemory+0x134>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d101      	bne.n	800b00e <HAL_DMAEx_ChangeMemory+0xb2>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e000      	b.n	800b010 <HAL_DMAEx_ChangeMemory+0xb4>
 800b00e:	2300      	movs	r3, #0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00c      	beq.n	800b02e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800b014:	79fb      	ldrb	r3, [r7, #7]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d104      	bne.n	800b024 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	60da      	str	r2, [r3, #12]
 800b022:	e010      	b.n	800b046 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	611a      	str	r2, [r3, #16]
 800b02c:	e00b      	b.n	800b046 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	60da      	str	r2, [r3, #12]
 800b03c:	e003      	b.n	800b046 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	40020010 	.word	0x40020010
 800b058:	40020028 	.word	0x40020028
 800b05c:	40020040 	.word	0x40020040
 800b060:	40020058 	.word	0x40020058
 800b064:	40020070 	.word	0x40020070
 800b068:	40020088 	.word	0x40020088
 800b06c:	400200a0 	.word	0x400200a0
 800b070:	400200b8 	.word	0x400200b8
 800b074:	40020410 	.word	0x40020410
 800b078:	40020428 	.word	0x40020428
 800b07c:	40020440 	.word	0x40020440
 800b080:	40020458 	.word	0x40020458
 800b084:	40020470 	.word	0x40020470
 800b088:	40020488 	.word	0x40020488
 800b08c:	400204a0 	.word	0x400204a0
 800b090:	400204b8 	.word	0x400204b8

0800b094 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a46      	ldr	r2, [pc, #280]	; (800b1c0 <DMA_MultiBufferSetConfig+0x12c>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d04a      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a44      	ldr	r2, [pc, #272]	; (800b1c4 <DMA_MultiBufferSetConfig+0x130>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d045      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a43      	ldr	r2, [pc, #268]	; (800b1c8 <DMA_MultiBufferSetConfig+0x134>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d040      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a41      	ldr	r2, [pc, #260]	; (800b1cc <DMA_MultiBufferSetConfig+0x138>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d03b      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a40      	ldr	r2, [pc, #256]	; (800b1d0 <DMA_MultiBufferSetConfig+0x13c>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d036      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a3e      	ldr	r2, [pc, #248]	; (800b1d4 <DMA_MultiBufferSetConfig+0x140>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d031      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a3d      	ldr	r2, [pc, #244]	; (800b1d8 <DMA_MultiBufferSetConfig+0x144>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d02c      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a3b      	ldr	r2, [pc, #236]	; (800b1dc <DMA_MultiBufferSetConfig+0x148>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d027      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a3a      	ldr	r2, [pc, #232]	; (800b1e0 <DMA_MultiBufferSetConfig+0x14c>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d022      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a38      	ldr	r2, [pc, #224]	; (800b1e4 <DMA_MultiBufferSetConfig+0x150>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d01d      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a37      	ldr	r2, [pc, #220]	; (800b1e8 <DMA_MultiBufferSetConfig+0x154>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d018      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a35      	ldr	r2, [pc, #212]	; (800b1ec <DMA_MultiBufferSetConfig+0x158>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d013      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a34      	ldr	r2, [pc, #208]	; (800b1f0 <DMA_MultiBufferSetConfig+0x15c>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d00e      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a32      	ldr	r2, [pc, #200]	; (800b1f4 <DMA_MultiBufferSetConfig+0x160>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d009      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a31      	ldr	r2, [pc, #196]	; (800b1f8 <DMA_MultiBufferSetConfig+0x164>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d004      	beq.n	800b142 <DMA_MultiBufferSetConfig+0xae>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a2f      	ldr	r2, [pc, #188]	; (800b1fc <DMA_MultiBufferSetConfig+0x168>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d101      	bne.n	800b146 <DMA_MultiBufferSetConfig+0xb2>
 800b142:	2301      	movs	r3, #1
 800b144:	e000      	b.n	800b148 <DMA_MultiBufferSetConfig+0xb4>
 800b146:	2300      	movs	r3, #0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d019      	beq.n	800b180 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	2b40      	cmp	r3, #64	; 0x40
 800b15a:	d108      	bne.n	800b16e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800b16c:	e021      	b.n	800b1b2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	60da      	str	r2, [r3, #12]
}
 800b17e:	e018      	b.n	800b1b2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	2b40      	cmp	r3, #64	; 0x40
 800b18e:	d108      	bne.n	800b1a2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	60da      	str	r2, [r3, #12]
}
 800b1a0:	e007      	b.n	800b1b2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	60da      	str	r2, [r3, #12]
}
 800b1b2:	bf00      	nop
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	40020010 	.word	0x40020010
 800b1c4:	40020028 	.word	0x40020028
 800b1c8:	40020040 	.word	0x40020040
 800b1cc:	40020058 	.word	0x40020058
 800b1d0:	40020070 	.word	0x40020070
 800b1d4:	40020088 	.word	0x40020088
 800b1d8:	400200a0 	.word	0x400200a0
 800b1dc:	400200b8 	.word	0x400200b8
 800b1e0:	40020410 	.word	0x40020410
 800b1e4:	40020428 	.word	0x40020428
 800b1e8:	40020440 	.word	0x40020440
 800b1ec:	40020458 	.word	0x40020458
 800b1f0:	40020470 	.word	0x40020470
 800b1f4:	40020488 	.word	0x40020488
 800b1f8:	400204a0 	.word	0x400204a0
 800b1fc:	400204b8 	.word	0x400204b8

0800b200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b200:	b480      	push	{r7}
 800b202:	b089      	sub	sp, #36	; 0x24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b20e:	4b89      	ldr	r3, [pc, #548]	; (800b434 <HAL_GPIO_Init+0x234>)
 800b210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b212:	e194      	b.n	800b53e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	2101      	movs	r1, #1
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	fa01 f303 	lsl.w	r3, r1, r3
 800b220:	4013      	ands	r3, r2
 800b222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 8186 	beq.w	800b538 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f003 0303 	and.w	r3, r3, #3
 800b234:	2b01      	cmp	r3, #1
 800b236:	d005      	beq.n	800b244 <HAL_GPIO_Init+0x44>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	f003 0303 	and.w	r3, r3, #3
 800b240:	2b02      	cmp	r3, #2
 800b242:	d130      	bne.n	800b2a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	2203      	movs	r2, #3
 800b250:	fa02 f303 	lsl.w	r3, r2, r3
 800b254:	43db      	mvns	r3, r3
 800b256:	69ba      	ldr	r2, [r7, #24]
 800b258:	4013      	ands	r3, r2
 800b25a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	fa02 f303 	lsl.w	r3, r2, r3
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b27a:	2201      	movs	r2, #1
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	fa02 f303 	lsl.w	r3, r2, r3
 800b282:	43db      	mvns	r3, r3
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	4013      	ands	r3, r2
 800b288:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	091b      	lsrs	r3, r3, #4
 800b290:	f003 0201 	and.w	r2, r3, #1
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	fa02 f303 	lsl.w	r3, r2, r3
 800b29a:	69ba      	ldr	r2, [r7, #24]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	69ba      	ldr	r2, [r7, #24]
 800b2a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d017      	beq.n	800b2e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	005b      	lsls	r3, r3, #1
 800b2bc:	2203      	movs	r2, #3
 800b2be:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c2:	43db      	mvns	r3, r3
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	69ba      	ldr	r2, [r7, #24]
 800b2e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f003 0303 	and.w	r3, r3, #3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d123      	bne.n	800b336 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	08da      	lsrs	r2, r3, #3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3208      	adds	r2, #8
 800b2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	f003 0307 	and.w	r3, r3, #7
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	220f      	movs	r2, #15
 800b306:	fa02 f303 	lsl.w	r3, r2, r3
 800b30a:	43db      	mvns	r3, r3
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	4013      	ands	r3, r2
 800b310:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	691a      	ldr	r2, [r3, #16]
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	f003 0307 	and.w	r3, r3, #7
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	4313      	orrs	r3, r2
 800b326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	08da      	lsrs	r2, r3, #3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3208      	adds	r2, #8
 800b330:	69b9      	ldr	r1, [r7, #24]
 800b332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	2203      	movs	r2, #3
 800b342:	fa02 f303 	lsl.w	r3, r2, r3
 800b346:	43db      	mvns	r3, r3
 800b348:	69ba      	ldr	r2, [r7, #24]
 800b34a:	4013      	ands	r3, r2
 800b34c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f003 0203 	and.w	r2, r3, #3
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	fa02 f303 	lsl.w	r3, r2, r3
 800b35e:	69ba      	ldr	r2, [r7, #24]
 800b360:	4313      	orrs	r3, r2
 800b362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 80e0 	beq.w	800b538 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b378:	4b2f      	ldr	r3, [pc, #188]	; (800b438 <HAL_GPIO_Init+0x238>)
 800b37a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b37e:	4a2e      	ldr	r2, [pc, #184]	; (800b438 <HAL_GPIO_Init+0x238>)
 800b380:	f043 0302 	orr.w	r3, r3, #2
 800b384:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800b388:	4b2b      	ldr	r3, [pc, #172]	; (800b438 <HAL_GPIO_Init+0x238>)
 800b38a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b38e:	f003 0302 	and.w	r3, r3, #2
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b396:	4a29      	ldr	r2, [pc, #164]	; (800b43c <HAL_GPIO_Init+0x23c>)
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	089b      	lsrs	r3, r3, #2
 800b39c:	3302      	adds	r3, #2
 800b39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	220f      	movs	r2, #15
 800b3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b2:	43db      	mvns	r3, r3
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a20      	ldr	r2, [pc, #128]	; (800b440 <HAL_GPIO_Init+0x240>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d052      	beq.n	800b468 <HAL_GPIO_Init+0x268>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a1f      	ldr	r2, [pc, #124]	; (800b444 <HAL_GPIO_Init+0x244>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d031      	beq.n	800b42e <HAL_GPIO_Init+0x22e>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a1e      	ldr	r2, [pc, #120]	; (800b448 <HAL_GPIO_Init+0x248>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d02b      	beq.n	800b42a <HAL_GPIO_Init+0x22a>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a1d      	ldr	r2, [pc, #116]	; (800b44c <HAL_GPIO_Init+0x24c>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d025      	beq.n	800b426 <HAL_GPIO_Init+0x226>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a1c      	ldr	r2, [pc, #112]	; (800b450 <HAL_GPIO_Init+0x250>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d01f      	beq.n	800b422 <HAL_GPIO_Init+0x222>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a1b      	ldr	r2, [pc, #108]	; (800b454 <HAL_GPIO_Init+0x254>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d019      	beq.n	800b41e <HAL_GPIO_Init+0x21e>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a1a      	ldr	r2, [pc, #104]	; (800b458 <HAL_GPIO_Init+0x258>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d013      	beq.n	800b41a <HAL_GPIO_Init+0x21a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a19      	ldr	r2, [pc, #100]	; (800b45c <HAL_GPIO_Init+0x25c>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d00d      	beq.n	800b416 <HAL_GPIO_Init+0x216>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a18      	ldr	r2, [pc, #96]	; (800b460 <HAL_GPIO_Init+0x260>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d007      	beq.n	800b412 <HAL_GPIO_Init+0x212>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a17      	ldr	r2, [pc, #92]	; (800b464 <HAL_GPIO_Init+0x264>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d101      	bne.n	800b40e <HAL_GPIO_Init+0x20e>
 800b40a:	2309      	movs	r3, #9
 800b40c:	e02d      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b40e:	230a      	movs	r3, #10
 800b410:	e02b      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b412:	2308      	movs	r3, #8
 800b414:	e029      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b416:	2307      	movs	r3, #7
 800b418:	e027      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b41a:	2306      	movs	r3, #6
 800b41c:	e025      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b41e:	2305      	movs	r3, #5
 800b420:	e023      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b422:	2304      	movs	r3, #4
 800b424:	e021      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b426:	2303      	movs	r3, #3
 800b428:	e01f      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b42a:	2302      	movs	r3, #2
 800b42c:	e01d      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b42e:	2301      	movs	r3, #1
 800b430:	e01b      	b.n	800b46a <HAL_GPIO_Init+0x26a>
 800b432:	bf00      	nop
 800b434:	58000080 	.word	0x58000080
 800b438:	58024400 	.word	0x58024400
 800b43c:	58000400 	.word	0x58000400
 800b440:	58020000 	.word	0x58020000
 800b444:	58020400 	.word	0x58020400
 800b448:	58020800 	.word	0x58020800
 800b44c:	58020c00 	.word	0x58020c00
 800b450:	58021000 	.word	0x58021000
 800b454:	58021400 	.word	0x58021400
 800b458:	58021800 	.word	0x58021800
 800b45c:	58021c00 	.word	0x58021c00
 800b460:	58022000 	.word	0x58022000
 800b464:	58022400 	.word	0x58022400
 800b468:	2300      	movs	r3, #0
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	f002 0203 	and.w	r2, r2, #3
 800b470:	0092      	lsls	r2, r2, #2
 800b472:	4093      	lsls	r3, r2
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	4313      	orrs	r3, r2
 800b478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b47a:	4938      	ldr	r1, [pc, #224]	; (800b55c <HAL_GPIO_Init+0x35c>)
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	089b      	lsrs	r3, r3, #2
 800b480:	3302      	adds	r3, #2
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	43db      	mvns	r3, r3
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	4013      	ands	r3, r2
 800b498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b4a6:	69ba      	ldr	r2, [r7, #24]
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b4ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b4b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	43db      	mvns	r3, r3
 800b4c2:	69ba      	ldr	r2, [r7, #24]
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b4d4:	69ba      	ldr	r2, [r7, #24]
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b4dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	43db      	mvns	r3, r3
 800b4ee:	69ba      	ldr	r2, [r7, #24]
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	4313      	orrs	r3, r2
 800b506:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	43db      	mvns	r3, r3
 800b518:	69ba      	ldr	r2, [r7, #24]
 800b51a:	4013      	ands	r3, r2
 800b51c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	4313      	orrs	r3, r2
 800b530:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	3301      	adds	r3, #1
 800b53c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	fa22 f303 	lsr.w	r3, r2, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f47f ae63 	bne.w	800b214 <HAL_GPIO_Init+0x14>
  }
}
 800b54e:	bf00      	nop
 800b550:	bf00      	nop
 800b552:	3724      	adds	r7, #36	; 0x24
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	58000400 	.word	0x58000400

0800b560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b56e:	4b75      	ldr	r3, [pc, #468]	; (800b744 <HAL_GPIO_DeInit+0x1e4>)
 800b570:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800b572:	e0d9      	b.n	800b728 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b574:	2201      	movs	r2, #1
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	fa02 f303 	lsl.w	r3, r2, r3
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	4013      	ands	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 80cc 	beq.w	800b722 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b58a:	4a6f      	ldr	r2, [pc, #444]	; (800b748 <HAL_GPIO_DeInit+0x1e8>)
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	089b      	lsrs	r3, r3, #2
 800b590:	3302      	adds	r3, #2
 800b592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b596:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	220f      	movs	r2, #15
 800b5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a67      	ldr	r2, [pc, #412]	; (800b74c <HAL_GPIO_DeInit+0x1ec>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d037      	beq.n	800b624 <HAL_GPIO_DeInit+0xc4>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a66      	ldr	r2, [pc, #408]	; (800b750 <HAL_GPIO_DeInit+0x1f0>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d031      	beq.n	800b620 <HAL_GPIO_DeInit+0xc0>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a65      	ldr	r2, [pc, #404]	; (800b754 <HAL_GPIO_DeInit+0x1f4>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d02b      	beq.n	800b61c <HAL_GPIO_DeInit+0xbc>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a64      	ldr	r2, [pc, #400]	; (800b758 <HAL_GPIO_DeInit+0x1f8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d025      	beq.n	800b618 <HAL_GPIO_DeInit+0xb8>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a63      	ldr	r2, [pc, #396]	; (800b75c <HAL_GPIO_DeInit+0x1fc>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d01f      	beq.n	800b614 <HAL_GPIO_DeInit+0xb4>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a62      	ldr	r2, [pc, #392]	; (800b760 <HAL_GPIO_DeInit+0x200>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d019      	beq.n	800b610 <HAL_GPIO_DeInit+0xb0>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a61      	ldr	r2, [pc, #388]	; (800b764 <HAL_GPIO_DeInit+0x204>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d013      	beq.n	800b60c <HAL_GPIO_DeInit+0xac>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a60      	ldr	r2, [pc, #384]	; (800b768 <HAL_GPIO_DeInit+0x208>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d00d      	beq.n	800b608 <HAL_GPIO_DeInit+0xa8>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a5f      	ldr	r2, [pc, #380]	; (800b76c <HAL_GPIO_DeInit+0x20c>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d007      	beq.n	800b604 <HAL_GPIO_DeInit+0xa4>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a5e      	ldr	r2, [pc, #376]	; (800b770 <HAL_GPIO_DeInit+0x210>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d101      	bne.n	800b600 <HAL_GPIO_DeInit+0xa0>
 800b5fc:	2309      	movs	r3, #9
 800b5fe:	e012      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b600:	230a      	movs	r3, #10
 800b602:	e010      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b604:	2308      	movs	r3, #8
 800b606:	e00e      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b608:	2307      	movs	r3, #7
 800b60a:	e00c      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b60c:	2306      	movs	r3, #6
 800b60e:	e00a      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b610:	2305      	movs	r3, #5
 800b612:	e008      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b614:	2304      	movs	r3, #4
 800b616:	e006      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b618:	2303      	movs	r3, #3
 800b61a:	e004      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e002      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b620:	2301      	movs	r3, #1
 800b622:	e000      	b.n	800b626 <HAL_GPIO_DeInit+0xc6>
 800b624:	2300      	movs	r3, #0
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	f002 0203 	and.w	r2, r2, #3
 800b62c:	0092      	lsls	r2, r2, #2
 800b62e:	4093      	lsls	r3, r2
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	429a      	cmp	r2, r3
 800b634:	d136      	bne.n	800b6a4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	43db      	mvns	r3, r3
 800b63e:	401a      	ands	r2, r3
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	43db      	mvns	r3, r3
 800b64c:	401a      	ands	r2, r3
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800b652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	43db      	mvns	r3, r3
 800b65c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b660:	4013      	ands	r3, r2
 800b662:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	43db      	mvns	r3, r3
 800b66e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b672:	4013      	ands	r3, r2
 800b674:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f003 0303 	and.w	r3, r3, #3
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	220f      	movs	r2, #15
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b686:	4a30      	ldr	r2, [pc, #192]	; (800b748 <HAL_GPIO_DeInit+0x1e8>)
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	089b      	lsrs	r3, r3, #2
 800b68c:	3302      	adds	r3, #2
 800b68e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	43da      	mvns	r2, r3
 800b696:	482c      	ldr	r0, [pc, #176]	; (800b748 <HAL_GPIO_DeInit+0x1e8>)
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	089b      	lsrs	r3, r3, #2
 800b69c:	400a      	ands	r2, r1
 800b69e:	3302      	adds	r3, #2
 800b6a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	005b      	lsls	r3, r3, #1
 800b6ac:	2103      	movs	r1, #3
 800b6ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	08da      	lsrs	r2, r3, #3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3208      	adds	r2, #8
 800b6c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	220f      	movs	r2, #15
 800b6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d2:	43db      	mvns	r3, r3
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	08d2      	lsrs	r2, r2, #3
 800b6d8:	4019      	ands	r1, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3208      	adds	r2, #8
 800b6de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	2103      	movs	r1, #3
 800b6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b6f0:	43db      	mvns	r3, r3
 800b6f2:	401a      	ands	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	fa01 f303 	lsl.w	r3, r1, r3
 800b704:	43db      	mvns	r3, r3
 800b706:	401a      	ands	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	689a      	ldr	r2, [r3, #8]
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	005b      	lsls	r3, r3, #1
 800b714:	2103      	movs	r1, #3
 800b716:	fa01 f303 	lsl.w	r3, r1, r3
 800b71a:	43db      	mvns	r3, r3
 800b71c:	401a      	ands	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	3301      	adds	r3, #1
 800b726:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	fa22 f303 	lsr.w	r3, r2, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	f47f af1f 	bne.w	800b574 <HAL_GPIO_DeInit+0x14>
  }
}
 800b736:	bf00      	nop
 800b738:	bf00      	nop
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	58000080 	.word	0x58000080
 800b748:	58000400 	.word	0x58000400
 800b74c:	58020000 	.word	0x58020000
 800b750:	58020400 	.word	0x58020400
 800b754:	58020800 	.word	0x58020800
 800b758:	58020c00 	.word	0x58020c00
 800b75c:	58021000 	.word	0x58021000
 800b760:	58021400 	.word	0x58021400
 800b764:	58021800 	.word	0x58021800
 800b768:	58021c00 	.word	0x58021c00
 800b76c:	58022000 	.word	0x58022000
 800b770:	58022400 	.word	0x58022400

0800b774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	807b      	strh	r3, [r7, #2]
 800b780:	4613      	mov	r3, r2
 800b782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b784:	787b      	ldrb	r3, [r7, #1]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b78a:	887a      	ldrh	r2, [r7, #2]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b790:	e003      	b.n	800b79a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b792:	887b      	ldrh	r3, [r7, #2]
 800b794:	041a      	lsls	r2, r3, #16
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	619a      	str	r2, [r3, #24]
}
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b085      	sub	sp, #20
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b7b8:	887a      	ldrh	r2, [r7, #2]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	4013      	ands	r3, r2
 800b7be:	041a      	lsls	r2, r3, #16
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	43d9      	mvns	r1, r3
 800b7c4:	887b      	ldrh	r3, [r7, #2]
 800b7c6:	400b      	ands	r3, r1
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	619a      	str	r2, [r3, #24]
}
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
	...

0800b7dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e07f      	b.n	800b8ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f8a9 	bl	800b95a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2224      	movs	r2, #36	; 0x24
 800b80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b82c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689a      	ldr	r2, [r3, #8]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b83c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d107      	bne.n	800b856 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b852:	609a      	str	r2, [r3, #8]
 800b854:	e006      	b.n	800b864 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689a      	ldr	r2, [r3, #8]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b862:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d104      	bne.n	800b876 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b874:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6859      	ldr	r1, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	4b1d      	ldr	r3, [pc, #116]	; (800b8f8 <HAL_I2C_Init+0x11c>)
 800b882:	430b      	orrs	r3, r1
 800b884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68da      	ldr	r2, [r3, #12]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	691a      	ldr	r2, [r3, #16]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	69d9      	ldr	r1, [r3, #28]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a1a      	ldr	r2, [r3, #32]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f042 0201 	orr.w	r2, r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2220      	movs	r2, #32
 800b8da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	02008000 	.word	0x02008000

0800b8fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e021      	b.n	800b952 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2224      	movs	r2, #36	; 0x24
 800b912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f022 0201 	bic.w	r2, r2, #1
 800b924:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f821 	bl	800b96e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800b95a:	b480      	push	{r7}
 800b95c:	b083      	sub	sp, #12
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b962:	bf00      	nop
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
	...

0800b984 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af02      	add	r7, sp, #8
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	4608      	mov	r0, r1
 800b98e:	4611      	mov	r1, r2
 800b990:	461a      	mov	r2, r3
 800b992:	4603      	mov	r3, r0
 800b994:	817b      	strh	r3, [r7, #10]
 800b996:	460b      	mov	r3, r1
 800b998:	813b      	strh	r3, [r7, #8]
 800b99a:	4613      	mov	r3, r2
 800b99c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b20      	cmp	r3, #32
 800b9a8:	f040 80f9 	bne.w	800bb9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ac:	6a3b      	ldr	r3, [r7, #32]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <HAL_I2C_Mem_Write+0x34>
 800b9b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d105      	bne.n	800b9c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e0ed      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d101      	bne.n	800b9d2 <HAL_I2C_Mem_Write+0x4e>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	e0e6      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b9da:	f7fa ffa5 	bl	8006928 <HAL_GetTick>
 800b9de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	2319      	movs	r3, #25
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 fadd 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e0d1      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2221      	movs	r2, #33	; 0x21
 800ba00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2240      	movs	r2, #64	; 0x40
 800ba08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6a3a      	ldr	r2, [r7, #32]
 800ba16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ba24:	88f8      	ldrh	r0, [r7, #6]
 800ba26:	893a      	ldrh	r2, [r7, #8]
 800ba28:	8979      	ldrh	r1, [r7, #10]
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	4603      	mov	r3, r0
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 f9ed 	bl	800be14 <I2C_RequestMemoryWrite>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e0a9      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	2bff      	cmp	r3, #255	; 0xff
 800ba54:	d90e      	bls.n	800ba74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	22ff      	movs	r2, #255	; 0xff
 800ba5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	8979      	ldrh	r1, [r7, #10]
 800ba64:	2300      	movs	r3, #0
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 fc57 	bl	800c320 <I2C_TransferConfig>
 800ba72:	e00f      	b.n	800ba94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	8979      	ldrh	r1, [r7, #10]
 800ba86:	2300      	movs	r3, #0
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 fc46 	bl	800c320 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 fad6 	bl	800c04a <I2C_WaitOnTXISFlagUntilTimeout>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e07b      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	781a      	ldrb	r2, [r3, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800badc:	b29b      	uxth	r3, r3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d034      	beq.n	800bb4c <HAL_I2C_Mem_Write+0x1c8>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d130      	bne.n	800bb4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf0:	2200      	movs	r2, #0
 800baf2:	2180      	movs	r1, #128	; 0x80
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 fa59 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e04d      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	2bff      	cmp	r3, #255	; 0xff
 800bb0c:	d90e      	bls.n	800bb2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	22ff      	movs	r2, #255	; 0xff
 800bb12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	8979      	ldrh	r1, [r7, #10]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 fbfb 	bl	800c320 <I2C_TransferConfig>
 800bb2a:	e00f      	b.n	800bb4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	8979      	ldrh	r1, [r7, #10]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fbea 	bl	800c320 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d19e      	bne.n	800ba94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 fabc 	bl	800c0d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e01a      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6859      	ldr	r1, [r3, #4]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <HAL_I2C_Mem_Write+0x224>)
 800bb7e:	400b      	ands	r3, r1
 800bb80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2220      	movs	r2, #32
 800bb86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e000      	b.n	800bba0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bb9e:	2302      	movs	r3, #2
  }
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3718      	adds	r7, #24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	fe00e800 	.word	0xfe00e800

0800bbac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	461a      	mov	r2, r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	817b      	strh	r3, [r7, #10]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	813b      	strh	r3, [r7, #8]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	f040 80fd 	bne.w	800bdce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <HAL_I2C_Mem_Read+0x34>
 800bbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d105      	bne.n	800bbec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbe6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e0f1      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d101      	bne.n	800bbfa <HAL_I2C_Mem_Read+0x4e>
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	e0ea      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bc02:	f7fa fe91 	bl	8006928 <HAL_GetTick>
 800bc06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	2319      	movs	r3, #25
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 f9c9 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e0d5      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2222      	movs	r2, #34	; 0x22
 800bc28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2240      	movs	r2, #64	; 0x40
 800bc30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6a3a      	ldr	r2, [r7, #32]
 800bc3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bc4c:	88f8      	ldrh	r0, [r7, #6]
 800bc4e:	893a      	ldrh	r2, [r7, #8]
 800bc50:	8979      	ldrh	r1, [r7, #10]
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 f92d 	bl	800bebc <I2C_RequestMemoryRead>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d005      	beq.n	800bc74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e0ad      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	2bff      	cmp	r3, #255	; 0xff
 800bc7c:	d90e      	bls.n	800bc9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	22ff      	movs	r2, #255	; 0xff
 800bc82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	8979      	ldrh	r1, [r7, #10]
 800bc8c:	4b52      	ldr	r3, [pc, #328]	; (800bdd8 <HAL_I2C_Mem_Read+0x22c>)
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 fb43 	bl	800c320 <I2C_TransferConfig>
 800bc9a:	e00f      	b.n	800bcbc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	8979      	ldrh	r1, [r7, #10]
 800bcae:	4b4a      	ldr	r3, [pc, #296]	; (800bdd8 <HAL_I2C_Mem_Read+0x22c>)
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f000 fb32 	bl	800c320 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2104      	movs	r1, #4
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 f970 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e07c      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	3b01      	subs	r3, #1
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d034      	beq.n	800bd7c <HAL_I2C_Mem_Read+0x1d0>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d130      	bne.n	800bd7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	2200      	movs	r2, #0
 800bd22:	2180      	movs	r1, #128	; 0x80
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 f941 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e04d      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	2bff      	cmp	r3, #255	; 0xff
 800bd3c:	d90e      	bls.n	800bd5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	22ff      	movs	r2, #255	; 0xff
 800bd42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	8979      	ldrh	r1, [r7, #10]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 fae3 	bl	800c320 <I2C_TransferConfig>
 800bd5a:	e00f      	b.n	800bd7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	8979      	ldrh	r1, [r7, #10]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 fad2 	bl	800c320 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d19a      	bne.n	800bcbc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f000 f9a4 	bl	800c0d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e01a      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2220      	movs	r2, #32
 800bda0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6859      	ldr	r1, [r3, #4]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <HAL_I2C_Mem_Read+0x230>)
 800bdae:	400b      	ands	r3, r1
 800bdb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2220      	movs	r2, #32
 800bdb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e000      	b.n	800bdd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bdce:	2302      	movs	r3, #2
  }
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	80002400 	.word	0x80002400
 800bddc:	fe00e800 	.word	0xfe00e800

0800bde0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdee:	b2db      	uxtb	r3, r3
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800be08:	4618      	mov	r0, r3
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af02      	add	r7, sp, #8
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	4608      	mov	r0, r1
 800be1e:	4611      	mov	r1, r2
 800be20:	461a      	mov	r2, r3
 800be22:	4603      	mov	r3, r0
 800be24:	817b      	strh	r3, [r7, #10]
 800be26:	460b      	mov	r3, r1
 800be28:	813b      	strh	r3, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800be2e:	88fb      	ldrh	r3, [r7, #6]
 800be30:	b2da      	uxtb	r2, r3
 800be32:	8979      	ldrh	r1, [r7, #10]
 800be34:	4b20      	ldr	r3, [pc, #128]	; (800beb8 <I2C_RequestMemoryWrite+0xa4>)
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f000 fa6f 	bl	800c320 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be42:	69fa      	ldr	r2, [r7, #28]
 800be44:	69b9      	ldr	r1, [r7, #24]
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f000 f8ff 	bl	800c04a <I2C_WaitOnTXISFlagUntilTimeout>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e02c      	b.n	800beb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be56:	88fb      	ldrh	r3, [r7, #6]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d105      	bne.n	800be68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be5c:	893b      	ldrh	r3, [r7, #8]
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	629a      	str	r2, [r3, #40]	; 0x28
 800be66:	e015      	b.n	800be94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be68:	893b      	ldrh	r3, [r7, #8]
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be76:	69fa      	ldr	r2, [r7, #28]
 800be78:	69b9      	ldr	r1, [r7, #24]
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 f8e5 	bl	800c04a <I2C_WaitOnTXISFlagUntilTimeout>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e012      	b.n	800beb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be8a:	893b      	ldrh	r3, [r7, #8]
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	2200      	movs	r2, #0
 800be9c:	2180      	movs	r1, #128	; 0x80
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f000 f884 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	e000      	b.n	800beb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	80002000 	.word	0x80002000

0800bebc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	4608      	mov	r0, r1
 800bec6:	4611      	mov	r1, r2
 800bec8:	461a      	mov	r2, r3
 800beca:	4603      	mov	r3, r0
 800becc:	817b      	strh	r3, [r7, #10]
 800bece:	460b      	mov	r3, r1
 800bed0:	813b      	strh	r3, [r7, #8]
 800bed2:	4613      	mov	r3, r2
 800bed4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	8979      	ldrh	r1, [r7, #10]
 800bedc:	4b20      	ldr	r3, [pc, #128]	; (800bf60 <I2C_RequestMemoryRead+0xa4>)
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	2300      	movs	r3, #0
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f000 fa1c 	bl	800c320 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bee8:	69fa      	ldr	r2, [r7, #28]
 800beea:	69b9      	ldr	r1, [r7, #24]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 f8ac 	bl	800c04a <I2C_WaitOnTXISFlagUntilTimeout>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e02c      	b.n	800bf56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800befc:	88fb      	ldrh	r3, [r7, #6]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d105      	bne.n	800bf0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf02:	893b      	ldrh	r3, [r7, #8]
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	629a      	str	r2, [r3, #40]	; 0x28
 800bf0c:	e015      	b.n	800bf3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bf0e:	893b      	ldrh	r3, [r7, #8]
 800bf10:	0a1b      	lsrs	r3, r3, #8
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf1c:	69fa      	ldr	r2, [r7, #28]
 800bf1e:	69b9      	ldr	r1, [r7, #24]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 f892 	bl	800c04a <I2C_WaitOnTXISFlagUntilTimeout>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e012      	b.n	800bf56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf30:	893b      	ldrh	r3, [r7, #8]
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	2200      	movs	r2, #0
 800bf42:	2140      	movs	r1, #64	; 0x40
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 f831 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e000      	b.n	800bf56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	80002000 	.word	0x80002000

0800bf64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	f003 0302 	and.w	r3, r3, #2
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d103      	bne.n	800bf82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d007      	beq.n	800bfa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	699a      	ldr	r2, [r3, #24]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f042 0201 	orr.w	r2, r2, #1
 800bf9e:	619a      	str	r2, [r3, #24]
  }
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfbc:	e031      	b.n	800c022 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d02d      	beq.n	800c022 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfc6:	f7fa fcaf 	bl	8006928 <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d302      	bcc.n	800bfdc <I2C_WaitOnFlagUntilTimeout+0x30>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d122      	bne.n	800c022 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	699a      	ldr	r2, [r3, #24]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	bf0c      	ite	eq
 800bfec:	2301      	moveq	r3, #1
 800bfee:	2300      	movne	r3, #0
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	461a      	mov	r2, r3
 800bff4:	79fb      	ldrb	r3, [r7, #7]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d113      	bne.n	800c022 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffe:	f043 0220 	orr.w	r2, r3, #32
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2220      	movs	r2, #32
 800c00a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e00f      	b.n	800c042 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	699a      	ldr	r2, [r3, #24]
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	4013      	ands	r3, r2
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	429a      	cmp	r2, r3
 800c030:	bf0c      	ite	eq
 800c032:	2301      	moveq	r3, #1
 800c034:	2300      	movne	r3, #0
 800c036:	b2db      	uxtb	r3, r3
 800c038:	461a      	mov	r2, r3
 800c03a:	79fb      	ldrb	r3, [r7, #7]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d0be      	beq.n	800bfbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	60f8      	str	r0, [r7, #12]
 800c052:	60b9      	str	r1, [r7, #8]
 800c054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c056:	e033      	b.n	800c0c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 f87f 	bl	800c160 <I2C_IsErrorOccurred>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	e031      	b.n	800c0d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c072:	d025      	beq.n	800c0c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c074:	f7fa fc58 	bl	8006928 <HAL_GetTick>
 800c078:	4602      	mov	r2, r0
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	429a      	cmp	r2, r3
 800c082:	d302      	bcc.n	800c08a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d11a      	bne.n	800c0c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	2b02      	cmp	r3, #2
 800c096:	d013      	beq.n	800c0c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09c:	f043 0220 	orr.w	r2, r3, #32
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e007      	b.n	800c0d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	699b      	ldr	r3, [r3, #24]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d1c4      	bne.n	800c058 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0e4:	e02f      	b.n	800c146 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	68b9      	ldr	r1, [r7, #8]
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f000 f838 	bl	800c160 <I2C_IsErrorOccurred>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e02d      	b.n	800c156 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0fa:	f7fa fc15 	bl	8006928 <HAL_GetTick>
 800c0fe:	4602      	mov	r2, r0
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	429a      	cmp	r2, r3
 800c108:	d302      	bcc.n	800c110 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d11a      	bne.n	800c146 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	f003 0320 	and.w	r3, r3, #32
 800c11a:	2b20      	cmp	r3, #32
 800c11c:	d013      	beq.n	800c146 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c122:	f043 0220 	orr.w	r2, r3, #32
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2220      	movs	r2, #32
 800c12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e007      	b.n	800c156 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	f003 0320 	and.w	r3, r3, #32
 800c150:	2b20      	cmp	r3, #32
 800c152:	d1c8      	bne.n	800c0e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08a      	sub	sp, #40	; 0x28
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	f003 0310 	and.w	r3, r3, #16
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d068      	beq.n	800c25e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2210      	movs	r2, #16
 800c192:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c194:	e049      	b.n	800c22a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19c:	d045      	beq.n	800c22a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c19e:	f7fa fbc3 	bl	8006928 <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d302      	bcc.n	800c1b4 <I2C_IsErrorOccurred+0x54>
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d13a      	bne.n	800c22a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1d6:	d121      	bne.n	800c21c <I2C_IsErrorOccurred+0xbc>
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1de:	d01d      	beq.n	800c21c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c1e0:	7cfb      	ldrb	r3, [r7, #19]
 800c1e2:	2b20      	cmp	r3, #32
 800c1e4:	d01a      	beq.n	800c21c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c1f6:	f7fa fb97 	bl	8006928 <HAL_GetTick>
 800c1fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c1fc:	e00e      	b.n	800c21c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c1fe:	f7fa fb93 	bl	8006928 <HAL_GetTick>
 800c202:	4602      	mov	r2, r0
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	2b19      	cmp	r3, #25
 800c20a:	d907      	bls.n	800c21c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	f043 0320 	orr.w	r3, r3, #32
 800c212:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c21a:	e006      	b.n	800c22a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b20      	cmp	r3, #32
 800c228:	d1e9      	bne.n	800c1fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b20      	cmp	r3, #32
 800c236:	d003      	beq.n	800c240 <I2C_IsErrorOccurred+0xe0>
 800c238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0aa      	beq.n	800c196 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c244:	2b00      	cmp	r3, #0
 800c246:	d103      	bne.n	800c250 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2220      	movs	r2, #32
 800c24e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	f043 0304 	orr.w	r3, r3, #4
 800c256:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00b      	beq.n	800c288 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	f043 0301 	orr.w	r3, r3, #1
 800c276:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c280:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00b      	beq.n	800c2aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	f043 0308 	orr.w	r3, r3, #8
 800c298:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c2a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00b      	beq.n	800c2cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	f043 0302 	orr.w	r3, r3, #2
 800c2ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d01c      	beq.n	800c30e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7ff fe45 	bl	800bf64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	6859      	ldr	r1, [r3, #4]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <I2C_IsErrorOccurred+0x1bc>)
 800c2e6:	400b      	ands	r3, r1
 800c2e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2ee:	6a3b      	ldr	r3, [r7, #32]
 800c2f0:	431a      	orrs	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2220      	movs	r2, #32
 800c2fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c30e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c312:	4618      	mov	r0, r3
 800c314:	3728      	adds	r7, #40	; 0x28
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	fe00e800 	.word	0xfe00e800

0800c320 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	607b      	str	r3, [r7, #4]
 800c32a:	460b      	mov	r3, r1
 800c32c:	817b      	strh	r3, [r7, #10]
 800c32e:	4613      	mov	r3, r2
 800c330:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c332:	897b      	ldrh	r3, [r7, #10]
 800c334:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c338:	7a7b      	ldrb	r3, [r7, #9]
 800c33a:	041b      	lsls	r3, r3, #16
 800c33c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c340:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c346:	6a3b      	ldr	r3, [r7, #32]
 800c348:	4313      	orrs	r3, r2
 800c34a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c34e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	0d5b      	lsrs	r3, r3, #21
 800c35a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c35e:	4b08      	ldr	r3, [pc, #32]	; (800c380 <I2C_TransferConfig+0x60>)
 800c360:	430b      	orrs	r3, r1
 800c362:	43db      	mvns	r3, r3
 800c364:	ea02 0103 	and.w	r1, r2, r3
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	430a      	orrs	r2, r1
 800c370:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c372:	bf00      	nop
 800c374:	371c      	adds	r7, #28
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	03ff63ff 	.word	0x03ff63ff

0800c384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b20      	cmp	r3, #32
 800c398:	d138      	bne.n	800c40c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e032      	b.n	800c40e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2224      	movs	r2, #36	; 0x24
 800c3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f022 0201 	bic.w	r2, r2, #1
 800c3c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c3d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6819      	ldr	r1, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0201 	orr.w	r2, r2, #1
 800c3f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	e000      	b.n	800c40e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c40c:	2302      	movs	r3, #2
  }
}
 800c40e:	4618      	mov	r0, r3
 800c410:	370c      	adds	r7, #12
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr

0800c41a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b085      	sub	sp, #20
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	2b20      	cmp	r3, #32
 800c42e:	d139      	bne.n	800c4a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c436:	2b01      	cmp	r3, #1
 800c438:	d101      	bne.n	800c43e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e033      	b.n	800c4a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2224      	movs	r2, #36	; 0x24
 800c44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f022 0201 	bic.w	r2, r2, #1
 800c45c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c46c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	021b      	lsls	r3, r3, #8
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	4313      	orrs	r3, r2
 800c476:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f042 0201 	orr.w	r2, r2, #1
 800c48e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2220      	movs	r2, #32
 800c494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	e000      	b.n	800c4a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c4a4:	2302      	movs	r3, #2
  }
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e0bf      	b.n	800c646 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d106      	bne.n	800c4e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7f5 f864 	bl	80015a8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	699a      	ldr	r2, [r3, #24]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c4f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6999      	ldr	r1, [r3, #24]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c50c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	430a      	orrs	r2, r1
 800c51a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6899      	ldr	r1, [r3, #8]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	4b4a      	ldr	r3, [pc, #296]	; (800c650 <HAL_LTDC_Init+0x19c>)
 800c528:	400b      	ands	r3, r1
 800c52a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	695b      	ldr	r3, [r3, #20]
 800c530:	041b      	lsls	r3, r3, #16
 800c532:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6899      	ldr	r1, [r3, #8]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	699a      	ldr	r2, [r3, #24]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	431a      	orrs	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68d9      	ldr	r1, [r3, #12]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	4b3e      	ldr	r3, [pc, #248]	; (800c650 <HAL_LTDC_Init+0x19c>)
 800c556:	400b      	ands	r3, r1
 800c558:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	69db      	ldr	r3, [r3, #28]
 800c55e:	041b      	lsls	r3, r3, #16
 800c560:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68d9      	ldr	r1, [r3, #12]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a1a      	ldr	r2, [r3, #32]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	431a      	orrs	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	430a      	orrs	r2, r1
 800c576:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	6919      	ldr	r1, [r3, #16]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	4b33      	ldr	r3, [pc, #204]	; (800c650 <HAL_LTDC_Init+0x19c>)
 800c584:	400b      	ands	r3, r1
 800c586:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	041b      	lsls	r3, r3, #16
 800c58e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6919      	ldr	r1, [r3, #16]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	431a      	orrs	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6959      	ldr	r1, [r3, #20]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	4b27      	ldr	r3, [pc, #156]	; (800c650 <HAL_LTDC_Init+0x19c>)
 800c5b2:	400b      	ands	r3, r1
 800c5b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ba:	041b      	lsls	r3, r3, #16
 800c5bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	6959      	ldr	r1, [r3, #20]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	431a      	orrs	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c5e4:	041b      	lsls	r3, r3, #16
 800c5e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c5f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	4313      	orrs	r3, r2
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c60a:	431a      	orrs	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	430a      	orrs	r2, r1
 800c612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f042 0206 	orr.w	r2, r2, #6
 800c622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	699a      	ldr	r2, [r3, #24]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f042 0201 	orr.w	r2, r2, #1
 800c632:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	f000f800 	.word	0xf000f800

0800c654 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c662:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c66a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f003 0304 	and.w	r3, r3, #4
 800c672:	2b00      	cmp	r3, #0
 800c674:	d023      	beq.n	800c6be <HAL_LTDC_IRQHandler+0x6a>
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	f003 0304 	and.w	r3, r3, #4
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d01e      	beq.n	800c6be <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f022 0204 	bic.w	r2, r2, #4
 800c68e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2204      	movs	r2, #4
 800c696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c69e:	f043 0201 	orr.w	r2, r3, #1
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2204      	movs	r2, #4
 800c6ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f86f 	bl	800c79c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d023      	beq.n	800c710 <HAL_LTDC_IRQHandler+0xbc>
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d01e      	beq.n	800c710 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f022 0202 	bic.w	r2, r2, #2
 800c6e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c6f0:	f043 0202 	orr.w	r2, r3, #2
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2204      	movs	r2, #4
 800c6fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f846 	bl	800c79c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d01b      	beq.n	800c752 <HAL_LTDC_IRQHandler+0xfe>
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d016      	beq.n	800c752 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0201 	bic.w	r2, r2, #1
 800c732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2201      	movs	r2, #1
 800c73a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f82f 	bl	800c7b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01b      	beq.n	800c794 <HAL_LTDC_IRQHandler+0x140>
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	f003 0308 	and.w	r3, r3, #8
 800c762:	2b00      	cmp	r3, #0
 800c764:	d016      	beq.n	800c794 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f022 0208 	bic.w	r2, r2, #8
 800c774:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2208      	movs	r2, #8
 800c77c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f818 	bl	800c7c4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c794:	bf00      	nop
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c7d8:	b5b0      	push	{r4, r5, r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d101      	bne.n	800c7f2 <HAL_LTDC_ConfigLayer+0x1a>
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	e02c      	b.n	800c84c <HAL_LTDC_ConfigLayer+0x74>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2134      	movs	r1, #52	; 0x34
 800c808:	fb01 f303 	mul.w	r3, r1, r3
 800c80c:	4413      	add	r3, r2
 800c80e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	4614      	mov	r4, r2
 800c816:	461d      	mov	r5, r3
 800c818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c81a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c81c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f811 	bl	800c854 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2201      	movs	r2, #1
 800c838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bdb0      	pop	{r4, r5, r7, pc}

0800c854 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c854:	b480      	push	{r7}
 800c856:	b089      	sub	sp, #36	; 0x24
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	0c1b      	lsrs	r3, r3, #16
 800c86c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c870:	4413      	add	r3, r2
 800c872:	041b      	lsls	r3, r3, #16
 800c874:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	01db      	lsls	r3, r3, #7
 800c880:	4413      	add	r3, r2
 800c882:	3384      	adds	r3, #132	; 0x84
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	6812      	ldr	r2, [r2, #0]
 800c88a:	4611      	mov	r1, r2
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	01d2      	lsls	r2, r2, #7
 800c890:	440a      	add	r2, r1
 800c892:	3284      	adds	r2, #132	; 0x84
 800c894:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c898:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	0c1b      	lsrs	r3, r3, #16
 800c8a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c8aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c8ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	01db      	lsls	r3, r3, #7
 800c8b8:	440b      	add	r3, r1
 800c8ba:	3384      	adds	r3, #132	; 0x84
 800c8bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c8c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	68da      	ldr	r2, [r3, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8d2:	4413      	add	r3, r2
 800c8d4:	041b      	lsls	r3, r3, #16
 800c8d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	01db      	lsls	r3, r3, #7
 800c8e2:	4413      	add	r3, r2
 800c8e4:	3384      	adds	r3, #132	; 0x84
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	6812      	ldr	r2, [r2, #0]
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	01d2      	lsls	r2, r2, #7
 800c8f2:	440a      	add	r2, r1
 800c8f4:	3284      	adds	r2, #132	; 0x84
 800c8f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c8fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	689a      	ldr	r2, [r3, #8]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c90a:	4413      	add	r3, r2
 800c90c:	1c5a      	adds	r2, r3, #1
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4619      	mov	r1, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	01db      	lsls	r3, r3, #7
 800c918:	440b      	add	r3, r1
 800c91a:	3384      	adds	r3, #132	; 0x84
 800c91c:	4619      	mov	r1, r3
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4313      	orrs	r3, r2
 800c922:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	461a      	mov	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	01db      	lsls	r3, r3, #7
 800c92e:	4413      	add	r3, r2
 800c930:	3384      	adds	r3, #132	; 0x84
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	4611      	mov	r1, r2
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	01d2      	lsls	r2, r2, #7
 800c93e:	440a      	add	r2, r1
 800c940:	3284      	adds	r2, #132	; 0x84
 800c942:	f023 0307 	bic.w	r3, r3, #7
 800c946:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	01db      	lsls	r3, r3, #7
 800c952:	4413      	add	r3, r2
 800c954:	3384      	adds	r3, #132	; 0x84
 800c956:	461a      	mov	r2, r3
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c964:	021b      	lsls	r3, r3, #8
 800c966:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c96e:	041b      	lsls	r3, r3, #16
 800c970:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	061b      	lsls	r3, r3, #24
 800c978:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	461a      	mov	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	01db      	lsls	r3, r3, #7
 800c984:	4413      	add	r3, r2
 800c986:	3384      	adds	r3, #132	; 0x84
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	01db      	lsls	r3, r3, #7
 800c994:	4413      	add	r3, r2
 800c996:	3384      	adds	r3, #132	; 0x84
 800c998:	461a      	mov	r2, r3
 800c99a:	2300      	movs	r3, #0
 800c99c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	431a      	orrs	r2, r3
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	01db      	lsls	r3, r3, #7
 800c9b8:	440b      	add	r3, r1
 800c9ba:	3384      	adds	r3, #132	; 0x84
 800c9bc:	4619      	mov	r1, r3
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	01db      	lsls	r3, r3, #7
 800c9ce:	4413      	add	r3, r2
 800c9d0:	3384      	adds	r3, #132	; 0x84
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	4611      	mov	r1, r2
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	01d2      	lsls	r2, r2, #7
 800c9de:	440a      	add	r2, r1
 800c9e0:	3284      	adds	r2, #132	; 0x84
 800c9e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	01db      	lsls	r3, r3, #7
 800c9f2:	4413      	add	r3, r2
 800c9f4:	3384      	adds	r3, #132	; 0x84
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	695b      	ldr	r3, [r3, #20]
 800c9fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	01db      	lsls	r3, r3, #7
 800ca08:	4413      	add	r3, r2
 800ca0a:	3384      	adds	r3, #132	; 0x84
 800ca0c:	69da      	ldr	r2, [r3, #28]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4619      	mov	r1, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	01db      	lsls	r3, r3, #7
 800ca18:	440b      	add	r3, r1
 800ca1a:	3384      	adds	r3, #132	; 0x84
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4b58      	ldr	r3, [pc, #352]	; (800cb80 <LTDC_SetConfig+0x32c>)
 800ca20:	4013      	ands	r3, r2
 800ca22:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	69da      	ldr	r2, [r3, #28]
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	6a1b      	ldr	r3, [r3, #32]
 800ca2c:	68f9      	ldr	r1, [r7, #12]
 800ca2e:	6809      	ldr	r1, [r1, #0]
 800ca30:	4608      	mov	r0, r1
 800ca32:	6879      	ldr	r1, [r7, #4]
 800ca34:	01c9      	lsls	r1, r1, #7
 800ca36:	4401      	add	r1, r0
 800ca38:	3184      	adds	r1, #132	; 0x84
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	01db      	lsls	r3, r3, #7
 800ca48:	4413      	add	r3, r2
 800ca4a:	3384      	adds	r3, #132	; 0x84
 800ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	01db      	lsls	r3, r3, #7
 800ca58:	4413      	add	r3, r2
 800ca5a:	3384      	adds	r3, #132	; 0x84
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	2300      	movs	r3, #0
 800ca60:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	01db      	lsls	r3, r3, #7
 800ca6c:	4413      	add	r3, r2
 800ca6e:	3384      	adds	r3, #132	; 0x84
 800ca70:	461a      	mov	r2, r3
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca76:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d102      	bne.n	800ca86 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ca80:	2304      	movs	r3, #4
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	e01b      	b.n	800cabe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d102      	bne.n	800ca94 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	61fb      	str	r3, [r7, #28]
 800ca92:	e014      	b.n	800cabe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	d00b      	beq.n	800cab4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	d007      	beq.n	800cab4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	d003      	beq.n	800cab4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800cab0:	2b07      	cmp	r3, #7
 800cab2:	d102      	bne.n	800caba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800cab4:	2302      	movs	r3, #2
 800cab6:	61fb      	str	r3, [r7, #28]
 800cab8:	e001      	b.n	800cabe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800caba:	2301      	movs	r3, #1
 800cabc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	461a      	mov	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	01db      	lsls	r3, r3, #7
 800cac8:	4413      	add	r3, r2
 800caca:	3384      	adds	r3, #132	; 0x84
 800cacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	6812      	ldr	r2, [r2, #0]
 800cad2:	4611      	mov	r1, r2
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	01d2      	lsls	r2, r2, #7
 800cad8:	440a      	add	r2, r1
 800cada:	3284      	adds	r2, #132	; 0x84
 800cadc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800cae0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae6:	69fa      	ldr	r2, [r7, #28]
 800cae8:	fb02 f303 	mul.w	r3, r2, r3
 800caec:	041a      	lsls	r2, r3, #16
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	6859      	ldr	r1, [r3, #4]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	1acb      	subs	r3, r1, r3
 800caf8:	69f9      	ldr	r1, [r7, #28]
 800cafa:	fb01 f303 	mul.w	r3, r1, r3
 800cafe:	3307      	adds	r3, #7
 800cb00:	68f9      	ldr	r1, [r7, #12]
 800cb02:	6809      	ldr	r1, [r1, #0]
 800cb04:	4608      	mov	r0, r1
 800cb06:	6879      	ldr	r1, [r7, #4]
 800cb08:	01c9      	lsls	r1, r1, #7
 800cb0a:	4401      	add	r1, r0
 800cb0c:	3184      	adds	r1, #132	; 0x84
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	01db      	lsls	r3, r3, #7
 800cb1c:	4413      	add	r3, r2
 800cb1e:	3384      	adds	r3, #132	; 0x84
 800cb20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4619      	mov	r1, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	01db      	lsls	r3, r3, #7
 800cb2c:	440b      	add	r3, r1
 800cb2e:	3384      	adds	r3, #132	; 0x84
 800cb30:	4619      	mov	r1, r3
 800cb32:	4b14      	ldr	r3, [pc, #80]	; (800cb84 <LTDC_SetConfig+0x330>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	01db      	lsls	r3, r3, #7
 800cb42:	4413      	add	r3, r2
 800cb44:	3384      	adds	r3, #132	; 0x84
 800cb46:	461a      	mov	r2, r3
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	461a      	mov	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	01db      	lsls	r3, r3, #7
 800cb58:	4413      	add	r3, r2
 800cb5a:	3384      	adds	r3, #132	; 0x84
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	6812      	ldr	r2, [r2, #0]
 800cb62:	4611      	mov	r1, r2
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	01d2      	lsls	r2, r2, #7
 800cb68:	440a      	add	r2, r1
 800cb6a:	3284      	adds	r2, #132	; 0x84
 800cb6c:	f043 0301 	orr.w	r3, r3, #1
 800cb70:	6013      	str	r3, [r2, #0]
}
 800cb72:	bf00      	nop
 800cb74:	3724      	adds	r7, #36	; 0x24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	fffff8f8 	.word	0xfffff8f8
 800cb84:	fffff800 	.word	0xfffff800

0800cb88 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800cb8c:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a04      	ldr	r2, [pc, #16]	; (800cba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cb92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb96:	6013      	str	r3, [r2, #0]
}
 800cb98:	bf00      	nop
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	58024800 	.word	0x58024800

0800cba8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800cbb0:	4b29      	ldr	r3, [pc, #164]	; (800cc58 <HAL_PWREx_ConfigSupply+0xb0>)
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	f003 0307 	and.w	r3, r3, #7
 800cbb8:	2b06      	cmp	r3, #6
 800cbba:	d00a      	beq.n	800cbd2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cbbc:	4b26      	ldr	r3, [pc, #152]	; (800cc58 <HAL_PWREx_ConfigSupply+0xb0>)
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d001      	beq.n	800cbce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e040      	b.n	800cc50 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e03e      	b.n	800cc50 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cbd2:	4b21      	ldr	r3, [pc, #132]	; (800cc58 <HAL_PWREx_ConfigSupply+0xb0>)
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800cbda:	491f      	ldr	r1, [pc, #124]	; (800cc58 <HAL_PWREx_ConfigSupply+0xb0>)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800cbe2:	f7f9 fea1 	bl	8006928 <HAL_GetTick>
 800cbe6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cbe8:	e009      	b.n	800cbfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cbea:	f7f9 fe9d 	bl	8006928 <HAL_GetTick>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbf8:	d901      	bls.n	800cbfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e028      	b.n	800cc50 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cbfe:	4b16      	ldr	r3, [pc, #88]	; (800cc58 <HAL_PWREx_ConfigSupply+0xb0>)
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc0a:	d1ee      	bne.n	800cbea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b1e      	cmp	r3, #30
 800cc10:	d008      	beq.n	800cc24 <HAL_PWREx_ConfigSupply+0x7c>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b2e      	cmp	r3, #46	; 0x2e
 800cc16:	d005      	beq.n	800cc24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b1d      	cmp	r3, #29
 800cc1c:	d002      	beq.n	800cc24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b2d      	cmp	r3, #45	; 0x2d
 800cc22:	d114      	bne.n	800cc4e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800cc24:	f7f9 fe80 	bl	8006928 <HAL_GetTick>
 800cc28:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cc2a:	e009      	b.n	800cc40 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cc2c:	f7f9 fe7c 	bl	8006928 <HAL_GetTick>
 800cc30:	4602      	mov	r2, r0
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc3a:	d901      	bls.n	800cc40 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e007      	b.n	800cc50 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cc40:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <HAL_PWREx_ConfigSupply+0xb0>)
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc4c:	d1ee      	bne.n	800cc2c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	58024800 	.word	0x58024800

0800cc5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b08c      	sub	sp, #48	; 0x30
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d102      	bne.n	800cc70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	f000 bc1f 	b.w	800d4ae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f000 80b3 	beq.w	800cde4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc7e:	4b95      	ldr	r3, [pc, #596]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc86:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cc88:	4b92      	ldr	r3, [pc, #584]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	2b10      	cmp	r3, #16
 800cc92:	d007      	beq.n	800cca4 <HAL_RCC_OscConfig+0x48>
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	2b18      	cmp	r3, #24
 800cc98:	d112      	bne.n	800ccc0 <HAL_RCC_OscConfig+0x64>
 800cc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9c:	f003 0303 	and.w	r3, r3, #3
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d10d      	bne.n	800ccc0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cca4:	4b8b      	ldr	r3, [pc, #556]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 8098 	beq.w	800cde2 <HAL_RCC_OscConfig+0x186>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f040 8093 	bne.w	800cde2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e3f6      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccc8:	d106      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x7c>
 800ccca:	4b82      	ldr	r3, [pc, #520]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a81      	ldr	r2, [pc, #516]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ccd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccd4:	6013      	str	r3, [r2, #0]
 800ccd6:	e058      	b.n	800cd8a <HAL_RCC_OscConfig+0x12e>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d112      	bne.n	800cd06 <HAL_RCC_OscConfig+0xaa>
 800cce0:	4b7c      	ldr	r3, [pc, #496]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a7b      	ldr	r2, [pc, #492]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	4b79      	ldr	r3, [pc, #484]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a78      	ldr	r2, [pc, #480]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ccf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	4b76      	ldr	r3, [pc, #472]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a75      	ldr	r2, [pc, #468]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ccfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	e041      	b.n	800cd8a <HAL_RCC_OscConfig+0x12e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd0e:	d112      	bne.n	800cd36 <HAL_RCC_OscConfig+0xda>
 800cd10:	4b70      	ldr	r3, [pc, #448]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a6f      	ldr	r2, [pc, #444]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd1a:	6013      	str	r3, [r2, #0]
 800cd1c:	4b6d      	ldr	r3, [pc, #436]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a6c      	ldr	r2, [pc, #432]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	4b6a      	ldr	r3, [pc, #424]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a69      	ldr	r2, [pc, #420]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd32:	6013      	str	r3, [r2, #0]
 800cd34:	e029      	b.n	800cd8a <HAL_RCC_OscConfig+0x12e>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800cd3e:	d112      	bne.n	800cd66 <HAL_RCC_OscConfig+0x10a>
 800cd40:	4b64      	ldr	r3, [pc, #400]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a63      	ldr	r2, [pc, #396]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd4a:	6013      	str	r3, [r2, #0]
 800cd4c:	4b61      	ldr	r3, [pc, #388]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a60      	ldr	r2, [pc, #384]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	4b5e      	ldr	r3, [pc, #376]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a5d      	ldr	r2, [pc, #372]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	e011      	b.n	800cd8a <HAL_RCC_OscConfig+0x12e>
 800cd66:	4b5b      	ldr	r3, [pc, #364]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a5a      	ldr	r2, [pc, #360]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	4b58      	ldr	r3, [pc, #352]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a57      	ldr	r2, [pc, #348]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd7c:	6013      	str	r3, [r2, #0]
 800cd7e:	4b55      	ldr	r3, [pc, #340]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a54      	ldr	r2, [pc, #336]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cd84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d013      	beq.n	800cdba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd92:	f7f9 fdc9 	bl	8006928 <HAL_GetTick>
 800cd96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cd98:	e008      	b.n	800cdac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd9a:	f7f9 fdc5 	bl	8006928 <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	2b64      	cmp	r3, #100	; 0x64
 800cda6:	d901      	bls.n	800cdac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e380      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cdac:	4b49      	ldr	r3, [pc, #292]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0f0      	beq.n	800cd9a <HAL_RCC_OscConfig+0x13e>
 800cdb8:	e014      	b.n	800cde4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdba:	f7f9 fdb5 	bl	8006928 <HAL_GetTick>
 800cdbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cdc0:	e008      	b.n	800cdd4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cdc2:	f7f9 fdb1 	bl	8006928 <HAL_GetTick>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	2b64      	cmp	r3, #100	; 0x64
 800cdce:	d901      	bls.n	800cdd4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e36c      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cdd4:	4b3f      	ldr	r3, [pc, #252]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1f0      	bne.n	800cdc2 <HAL_RCC_OscConfig+0x166>
 800cde0:	e000      	b.n	800cde4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cde2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 808c 	beq.w	800cf0a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdf2:	4b38      	ldr	r3, [pc, #224]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdfa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cdfc:	4b35      	ldr	r3, [pc, #212]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce00:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <HAL_RCC_OscConfig+0x1bc>
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	2b18      	cmp	r3, #24
 800ce0c:	d137      	bne.n	800ce7e <HAL_RCC_OscConfig+0x222>
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	f003 0303 	and.w	r3, r3, #3
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d132      	bne.n	800ce7e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ce18:	4b2e      	ldr	r3, [pc, #184]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <HAL_RCC_OscConfig+0x1d4>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e33e      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ce30:	4b28      	ldr	r3, [pc, #160]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f023 0219 	bic.w	r2, r3, #25
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	4925      	ldr	r1, [pc, #148]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce42:	f7f9 fd71 	bl	8006928 <HAL_GetTick>
 800ce46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce48:	e008      	b.n	800ce5c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce4a:	f7f9 fd6d 	bl	8006928 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e328      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce5c:	4b1d      	ldr	r3, [pc, #116]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0f0      	beq.n	800ce4a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce68:	4b1a      	ldr	r3, [pc, #104]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	061b      	lsls	r3, r3, #24
 800ce76:	4917      	ldr	r1, [pc, #92]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ce7c:	e045      	b.n	800cf0a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d028      	beq.n	800ced8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ce86:	4b13      	ldr	r3, [pc, #76]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f023 0219 	bic.w	r2, r3, #25
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	4910      	ldr	r1, [pc, #64]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce98:	f7f9 fd46 	bl	8006928 <HAL_GetTick>
 800ce9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce9e:	e008      	b.n	800ceb2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cea0:	f7f9 fd42 	bl	8006928 <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d901      	bls.n	800ceb2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e2fd      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ceb2:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0304 	and.w	r3, r3, #4
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0f0      	beq.n	800cea0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cebe:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	061b      	lsls	r3, r3, #24
 800cecc:	4901      	ldr	r1, [pc, #4]	; (800ced4 <HAL_RCC_OscConfig+0x278>)
 800cece:	4313      	orrs	r3, r2
 800ced0:	604b      	str	r3, [r1, #4]
 800ced2:	e01a      	b.n	800cf0a <HAL_RCC_OscConfig+0x2ae>
 800ced4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ced8:	4b97      	ldr	r3, [pc, #604]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a96      	ldr	r2, [pc, #600]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cede:	f023 0301 	bic.w	r3, r3, #1
 800cee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cee4:	f7f9 fd20 	bl	8006928 <HAL_GetTick>
 800cee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ceea:	e008      	b.n	800cefe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ceec:	f7f9 fd1c 	bl	8006928 <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d901      	bls.n	800cefe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e2d7      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cefe:	4b8e      	ldr	r3, [pc, #568]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0304 	and.w	r3, r3, #4
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1f0      	bne.n	800ceec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f003 0310 	and.w	r3, r3, #16
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d06a      	beq.n	800cfec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cf16:	4b88      	ldr	r3, [pc, #544]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cf20:	4b85      	ldr	r3, [pc, #532]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	2b08      	cmp	r3, #8
 800cf2a:	d007      	beq.n	800cf3c <HAL_RCC_OscConfig+0x2e0>
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	2b18      	cmp	r3, #24
 800cf30:	d11b      	bne.n	800cf6a <HAL_RCC_OscConfig+0x30e>
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	f003 0303 	and.w	r3, r3, #3
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d116      	bne.n	800cf6a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cf3c:	4b7e      	ldr	r3, [pc, #504]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d005      	beq.n	800cf54 <HAL_RCC_OscConfig+0x2f8>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	2b80      	cmp	r3, #128	; 0x80
 800cf4e:	d001      	beq.n	800cf54 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e2ac      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cf54:	4b78      	ldr	r3, [pc, #480]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	061b      	lsls	r3, r3, #24
 800cf62:	4975      	ldr	r1, [pc, #468]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cf68:	e040      	b.n	800cfec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d023      	beq.n	800cfba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cf72:	4b71      	ldr	r3, [pc, #452]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a70      	ldr	r2, [pc, #448]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf7e:	f7f9 fcd3 	bl	8006928 <HAL_GetTick>
 800cf82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf84:	e008      	b.n	800cf98 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cf86:	f7f9 fccf 	bl	8006928 <HAL_GetTick>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	d901      	bls.n	800cf98 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800cf94:	2303      	movs	r3, #3
 800cf96:	e28a      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf98:	4b67      	ldr	r3, [pc, #412]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0f0      	beq.n	800cf86 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cfa4:	4b64      	ldr	r3, [pc, #400]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	061b      	lsls	r3, r3, #24
 800cfb2:	4961      	ldr	r1, [pc, #388]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	60cb      	str	r3, [r1, #12]
 800cfb8:	e018      	b.n	800cfec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cfba:	4b5f      	ldr	r3, [pc, #380]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a5e      	ldr	r2, [pc, #376]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cfc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfc6:	f7f9 fcaf 	bl	8006928 <HAL_GetTick>
 800cfca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cfcc:	e008      	b.n	800cfe0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cfce:	f7f9 fcab 	bl	8006928 <HAL_GetTick>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d901      	bls.n	800cfe0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	e266      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cfe0:	4b55      	ldr	r3, [pc, #340]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1f0      	bne.n	800cfce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 0308 	and.w	r3, r3, #8
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d036      	beq.n	800d066 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d019      	beq.n	800d034 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d000:	4b4d      	ldr	r3, [pc, #308]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d004:	4a4c      	ldr	r2, [pc, #304]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d006:	f043 0301 	orr.w	r3, r3, #1
 800d00a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d00c:	f7f9 fc8c 	bl	8006928 <HAL_GetTick>
 800d010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d012:	e008      	b.n	800d026 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d014:	f7f9 fc88 	bl	8006928 <HAL_GetTick>
 800d018:	4602      	mov	r2, r0
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	2b02      	cmp	r3, #2
 800d020:	d901      	bls.n	800d026 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800d022:	2303      	movs	r3, #3
 800d024:	e243      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d026:	4b44      	ldr	r3, [pc, #272]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0f0      	beq.n	800d014 <HAL_RCC_OscConfig+0x3b8>
 800d032:	e018      	b.n	800d066 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d034:	4b40      	ldr	r3, [pc, #256]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d038:	4a3f      	ldr	r2, [pc, #252]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d03a:	f023 0301 	bic.w	r3, r3, #1
 800d03e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d040:	f7f9 fc72 	bl	8006928 <HAL_GetTick>
 800d044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d046:	e008      	b.n	800d05a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d048:	f7f9 fc6e 	bl	8006928 <HAL_GetTick>
 800d04c:	4602      	mov	r2, r0
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	2b02      	cmp	r3, #2
 800d054:	d901      	bls.n	800d05a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d056:	2303      	movs	r3, #3
 800d058:	e229      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d05a:	4b37      	ldr	r3, [pc, #220]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1f0      	bne.n	800d048 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f003 0320 	and.w	r3, r3, #32
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d036      	beq.n	800d0e0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d019      	beq.n	800d0ae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d07a:	4b2f      	ldr	r3, [pc, #188]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a2e      	ldr	r2, [pc, #184]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d084:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d086:	f7f9 fc4f 	bl	8006928 <HAL_GetTick>
 800d08a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d08c:	e008      	b.n	800d0a0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d08e:	f7f9 fc4b 	bl	8006928 <HAL_GetTick>
 800d092:	4602      	mov	r2, r0
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	2b02      	cmp	r3, #2
 800d09a:	d901      	bls.n	800d0a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e206      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d0a0:	4b25      	ldr	r3, [pc, #148]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0f0      	beq.n	800d08e <HAL_RCC_OscConfig+0x432>
 800d0ac:	e018      	b.n	800d0e0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d0ae:	4b22      	ldr	r3, [pc, #136]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a21      	ldr	r2, [pc, #132]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d0b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d0ba:	f7f9 fc35 	bl	8006928 <HAL_GetTick>
 800d0be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0c0:	e008      	b.n	800d0d4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d0c2:	f7f9 fc31 	bl	8006928 <HAL_GetTick>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	1ad3      	subs	r3, r2, r3
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d901      	bls.n	800d0d4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800d0d0:	2303      	movs	r3, #3
 800d0d2:	e1ec      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0d4:	4b18      	ldr	r3, [pc, #96]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1f0      	bne.n	800d0c2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f003 0304 	and.w	r3, r3, #4
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 80af 	beq.w	800d24c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d0ee:	4b13      	ldr	r3, [pc, #76]	; (800d13c <HAL_RCC_OscConfig+0x4e0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a12      	ldr	r2, [pc, #72]	; (800d13c <HAL_RCC_OscConfig+0x4e0>)
 800d0f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d0fa:	f7f9 fc15 	bl	8006928 <HAL_GetTick>
 800d0fe:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d100:	e008      	b.n	800d114 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d102:	f7f9 fc11 	bl	8006928 <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	2b64      	cmp	r3, #100	; 0x64
 800d10e:	d901      	bls.n	800d114 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e1cc      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d114:	4b09      	ldr	r3, [pc, #36]	; (800d13c <HAL_RCC_OscConfig+0x4e0>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0f0      	beq.n	800d102 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d10b      	bne.n	800d140 <HAL_RCC_OscConfig+0x4e4>
 800d128:	4b03      	ldr	r3, [pc, #12]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12c:	4a02      	ldr	r2, [pc, #8]	; (800d138 <HAL_RCC_OscConfig+0x4dc>)
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	6713      	str	r3, [r2, #112]	; 0x70
 800d134:	e05b      	b.n	800d1ee <HAL_RCC_OscConfig+0x592>
 800d136:	bf00      	nop
 800d138:	58024400 	.word	0x58024400
 800d13c:	58024800 	.word	0x58024800
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d112      	bne.n	800d16e <HAL_RCC_OscConfig+0x512>
 800d148:	4b9d      	ldr	r3, [pc, #628]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14c:	4a9c      	ldr	r2, [pc, #624]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d14e:	f023 0301 	bic.w	r3, r3, #1
 800d152:	6713      	str	r3, [r2, #112]	; 0x70
 800d154:	4b9a      	ldr	r3, [pc, #616]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d158:	4a99      	ldr	r2, [pc, #612]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d15e:	6713      	str	r3, [r2, #112]	; 0x70
 800d160:	4b97      	ldr	r3, [pc, #604]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d164:	4a96      	ldr	r2, [pc, #600]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d166:	f023 0304 	bic.w	r3, r3, #4
 800d16a:	6713      	str	r3, [r2, #112]	; 0x70
 800d16c:	e03f      	b.n	800d1ee <HAL_RCC_OscConfig+0x592>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	2b05      	cmp	r3, #5
 800d174:	d112      	bne.n	800d19c <HAL_RCC_OscConfig+0x540>
 800d176:	4b92      	ldr	r3, [pc, #584]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17a:	4a91      	ldr	r2, [pc, #580]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d17c:	f043 0304 	orr.w	r3, r3, #4
 800d180:	6713      	str	r3, [r2, #112]	; 0x70
 800d182:	4b8f      	ldr	r3, [pc, #572]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d186:	4a8e      	ldr	r2, [pc, #568]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d18c:	6713      	str	r3, [r2, #112]	; 0x70
 800d18e:	4b8c      	ldr	r3, [pc, #560]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d192:	4a8b      	ldr	r2, [pc, #556]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d194:	f043 0301 	orr.w	r3, r3, #1
 800d198:	6713      	str	r3, [r2, #112]	; 0x70
 800d19a:	e028      	b.n	800d1ee <HAL_RCC_OscConfig+0x592>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	2b85      	cmp	r3, #133	; 0x85
 800d1a2:	d112      	bne.n	800d1ca <HAL_RCC_OscConfig+0x56e>
 800d1a4:	4b86      	ldr	r3, [pc, #536]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a8:	4a85      	ldr	r2, [pc, #532]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1aa:	f043 0304 	orr.w	r3, r3, #4
 800d1ae:	6713      	str	r3, [r2, #112]	; 0x70
 800d1b0:	4b83      	ldr	r3, [pc, #524]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b4:	4a82      	ldr	r2, [pc, #520]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1ba:	6713      	str	r3, [r2, #112]	; 0x70
 800d1bc:	4b80      	ldr	r3, [pc, #512]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c0:	4a7f      	ldr	r2, [pc, #508]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1c2:	f043 0301 	orr.w	r3, r3, #1
 800d1c6:	6713      	str	r3, [r2, #112]	; 0x70
 800d1c8:	e011      	b.n	800d1ee <HAL_RCC_OscConfig+0x592>
 800d1ca:	4b7d      	ldr	r3, [pc, #500]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ce:	4a7c      	ldr	r2, [pc, #496]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1d0:	f023 0301 	bic.w	r3, r3, #1
 800d1d4:	6713      	str	r3, [r2, #112]	; 0x70
 800d1d6:	4b7a      	ldr	r3, [pc, #488]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1da:	4a79      	ldr	r2, [pc, #484]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1dc:	f023 0304 	bic.w	r3, r3, #4
 800d1e0:	6713      	str	r3, [r2, #112]	; 0x70
 800d1e2:	4b77      	ldr	r3, [pc, #476]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e6:	4a76      	ldr	r2, [pc, #472]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d1e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d015      	beq.n	800d222 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1f6:	f7f9 fb97 	bl	8006928 <HAL_GetTick>
 800d1fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d1fc:	e00a      	b.n	800d214 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1fe:	f7f9 fb93 	bl	8006928 <HAL_GetTick>
 800d202:	4602      	mov	r2, r0
 800d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	f241 3288 	movw	r2, #5000	; 0x1388
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d901      	bls.n	800d214 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	e14c      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d214:	4b6a      	ldr	r3, [pc, #424]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d218:	f003 0302 	and.w	r3, r3, #2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d0ee      	beq.n	800d1fe <HAL_RCC_OscConfig+0x5a2>
 800d220:	e014      	b.n	800d24c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d222:	f7f9 fb81 	bl	8006928 <HAL_GetTick>
 800d226:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d228:	e00a      	b.n	800d240 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d22a:	f7f9 fb7d 	bl	8006928 <HAL_GetTick>
 800d22e:	4602      	mov	r2, r0
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	f241 3288 	movw	r2, #5000	; 0x1388
 800d238:	4293      	cmp	r3, r2
 800d23a:	d901      	bls.n	800d240 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e136      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d240:	4b5f      	ldr	r3, [pc, #380]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d244:	f003 0302 	and.w	r3, r3, #2
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1ee      	bne.n	800d22a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 812b 	beq.w	800d4ac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d256:	4b5a      	ldr	r3, [pc, #360]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d25e:	2b18      	cmp	r3, #24
 800d260:	f000 80bb 	beq.w	800d3da <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d268:	2b02      	cmp	r3, #2
 800d26a:	f040 8095 	bne.w	800d398 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d26e:	4b54      	ldr	r3, [pc, #336]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a53      	ldr	r2, [pc, #332]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d27a:	f7f9 fb55 	bl	8006928 <HAL_GetTick>
 800d27e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d280:	e008      	b.n	800d294 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d282:	f7f9 fb51 	bl	8006928 <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d901      	bls.n	800d294 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800d290:	2303      	movs	r3, #3
 800d292:	e10c      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d294:	4b4a      	ldr	r3, [pc, #296]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1f0      	bne.n	800d282 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d2a0:	4b47      	ldr	r3, [pc, #284]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d2a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2a4:	4b47      	ldr	r3, [pc, #284]	; (800d3c4 <HAL_RCC_OscConfig+0x768>)
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d2b0:	0112      	lsls	r2, r2, #4
 800d2b2:	430a      	orrs	r2, r1
 800d2b4:	4942      	ldr	r1, [pc, #264]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	628b      	str	r3, [r1, #40]	; 0x28
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	025b      	lsls	r3, r3, #9
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	431a      	orrs	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d4:	3b01      	subs	r3, #1
 800d2d6:	041b      	lsls	r3, r3, #16
 800d2d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2dc:	431a      	orrs	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	061b      	lsls	r3, r3, #24
 800d2e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2ea:	4935      	ldr	r1, [pc, #212]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d2f0:	4b33      	ldr	r3, [pc, #204]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f4:	4a32      	ldr	r2, [pc, #200]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d2f6:	f023 0301 	bic.w	r3, r3, #1
 800d2fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d2fc:	4b30      	ldr	r3, [pc, #192]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d300:	4b31      	ldr	r3, [pc, #196]	; (800d3c8 <HAL_RCC_OscConfig+0x76c>)
 800d302:	4013      	ands	r3, r2
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d308:	00d2      	lsls	r2, r2, #3
 800d30a:	492d      	ldr	r1, [pc, #180]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d30c:	4313      	orrs	r3, r2
 800d30e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d310:	4b2b      	ldr	r3, [pc, #172]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d314:	f023 020c 	bic.w	r2, r3, #12
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31c:	4928      	ldr	r1, [pc, #160]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d31e:	4313      	orrs	r3, r2
 800d320:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d322:	4b27      	ldr	r3, [pc, #156]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d326:	f023 0202 	bic.w	r2, r3, #2
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32e:	4924      	ldr	r1, [pc, #144]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d330:	4313      	orrs	r3, r2
 800d332:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d334:	4b22      	ldr	r3, [pc, #136]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d338:	4a21      	ldr	r2, [pc, #132]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d33a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d33e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d340:	4b1f      	ldr	r3, [pc, #124]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	4a1e      	ldr	r2, [pc, #120]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d34a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d34c:	4b1c      	ldr	r3, [pc, #112]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	4a1b      	ldr	r2, [pc, #108]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d358:	4b19      	ldr	r3, [pc, #100]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	4a18      	ldr	r2, [pc, #96]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d35e:	f043 0301 	orr.w	r3, r3, #1
 800d362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d364:	4b16      	ldr	r3, [pc, #88]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a15      	ldr	r2, [pc, #84]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d36a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d36e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d370:	f7f9 fada 	bl	8006928 <HAL_GetTick>
 800d374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d376:	e008      	b.n	800d38a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d378:	f7f9 fad6 	bl	8006928 <HAL_GetTick>
 800d37c:	4602      	mov	r2, r0
 800d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	2b02      	cmp	r3, #2
 800d384:	d901      	bls.n	800d38a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e091      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d38a:	4b0d      	ldr	r3, [pc, #52]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0f0      	beq.n	800d378 <HAL_RCC_OscConfig+0x71c>
 800d396:	e089      	b.n	800d4ac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <HAL_RCC_OscConfig+0x764>)
 800d39e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3a4:	f7f9 fac0 	bl	8006928 <HAL_GetTick>
 800d3a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d3aa:	e00f      	b.n	800d3cc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d3ac:	f7f9 fabc 	bl	8006928 <HAL_GetTick>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d908      	bls.n	800d3cc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	e077      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
 800d3be:	bf00      	nop
 800d3c0:	58024400 	.word	0x58024400
 800d3c4:	fffffc0c 	.word	0xfffffc0c
 800d3c8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d3cc:	4b3a      	ldr	r3, [pc, #232]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1e9      	bne.n	800d3ac <HAL_RCC_OscConfig+0x750>
 800d3d8:	e068      	b.n	800d4ac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d3da:	4b37      	ldr	r3, [pc, #220]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d3e0:	4b35      	ldr	r3, [pc, #212]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d031      	beq.n	800d452 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	f003 0203 	and.w	r2, r3, #3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d12a      	bne.n	800d452 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	091b      	lsrs	r3, r3, #4
 800d400:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d408:	429a      	cmp	r2, r3
 800d40a:	d122      	bne.n	800d452 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d416:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d418:	429a      	cmp	r2, r3
 800d41a:	d11a      	bne.n	800d452 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	0a5b      	lsrs	r3, r3, #9
 800d420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d428:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d111      	bne.n	800d452 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	0c1b      	lsrs	r3, r3, #16
 800d432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d108      	bne.n	800d452 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	0e1b      	lsrs	r3, r3, #24
 800d444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d44e:	429a      	cmp	r2, r3
 800d450:	d001      	beq.n	800d456 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e02b      	b.n	800d4ae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d456:	4b18      	ldr	r3, [pc, #96]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45a:	08db      	lsrs	r3, r3, #3
 800d45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d460:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d01f      	beq.n	800d4ac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d46c:	4b12      	ldr	r3, [pc, #72]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d470:	4a11      	ldr	r2, [pc, #68]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d472:	f023 0301 	bic.w	r3, r3, #1
 800d476:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d478:	f7f9 fa56 	bl	8006928 <HAL_GetTick>
 800d47c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d47e:	bf00      	nop
 800d480:	f7f9 fa52 	bl	8006928 <HAL_GetTick>
 800d484:	4602      	mov	r2, r0
 800d486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d488:	4293      	cmp	r3, r2
 800d48a:	d0f9      	beq.n	800d480 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d48c:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d48e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d490:	4b0a      	ldr	r3, [pc, #40]	; (800d4bc <HAL_RCC_OscConfig+0x860>)
 800d492:	4013      	ands	r3, r2
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d498:	00d2      	lsls	r2, r2, #3
 800d49a:	4907      	ldr	r1, [pc, #28]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d49c:	4313      	orrs	r3, r2
 800d49e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d4a0:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	4a04      	ldr	r2, [pc, #16]	; (800d4b8 <HAL_RCC_OscConfig+0x85c>)
 800d4a6:	f043 0301 	orr.w	r3, r3, #1
 800d4aa:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3730      	adds	r7, #48	; 0x30
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	58024400 	.word	0x58024400
 800d4bc:	ffff0007 	.word	0xffff0007

0800d4c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e19c      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d4d4:	4b8a      	ldr	r3, [pc, #552]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 030f 	and.w	r3, r3, #15
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d910      	bls.n	800d504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4e2:	4b87      	ldr	r3, [pc, #540]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f023 020f 	bic.w	r2, r3, #15
 800d4ea:	4985      	ldr	r1, [pc, #532]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4f2:	4b83      	ldr	r3, [pc, #524]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f003 030f 	and.w	r3, r3, #15
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d001      	beq.n	800d504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	e184      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f003 0304 	and.w	r3, r3, #4
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d010      	beq.n	800d532 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	691a      	ldr	r2, [r3, #16]
 800d514:	4b7b      	ldr	r3, [pc, #492]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d908      	bls.n	800d532 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d520:	4b78      	ldr	r3, [pc, #480]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d522:	699b      	ldr	r3, [r3, #24]
 800d524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	4975      	ldr	r1, [pc, #468]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d52e:	4313      	orrs	r3, r2
 800d530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 0308 	and.w	r3, r3, #8
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d010      	beq.n	800d560 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	695a      	ldr	r2, [r3, #20]
 800d542:	4b70      	ldr	r3, [pc, #448]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d544:	69db      	ldr	r3, [r3, #28]
 800d546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d908      	bls.n	800d560 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d54e:	4b6d      	ldr	r3, [pc, #436]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	496a      	ldr	r1, [pc, #424]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d55c:	4313      	orrs	r3, r2
 800d55e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 0310 	and.w	r3, r3, #16
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d010      	beq.n	800d58e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	699a      	ldr	r2, [r3, #24]
 800d570:	4b64      	ldr	r3, [pc, #400]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d572:	69db      	ldr	r3, [r3, #28]
 800d574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d578:	429a      	cmp	r2, r3
 800d57a:	d908      	bls.n	800d58e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d57c:	4b61      	ldr	r3, [pc, #388]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d57e:	69db      	ldr	r3, [r3, #28]
 800d580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	699b      	ldr	r3, [r3, #24]
 800d588:	495e      	ldr	r1, [pc, #376]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d58a:	4313      	orrs	r3, r2
 800d58c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d010      	beq.n	800d5bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	69da      	ldr	r2, [r3, #28]
 800d59e:	4b59      	ldr	r3, [pc, #356]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d908      	bls.n	800d5bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d5aa:	4b56      	ldr	r3, [pc, #344]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	69db      	ldr	r3, [r3, #28]
 800d5b6:	4953      	ldr	r1, [pc, #332]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 0302 	and.w	r3, r3, #2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d010      	beq.n	800d5ea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	68da      	ldr	r2, [r3, #12]
 800d5cc:	4b4d      	ldr	r3, [pc, #308]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	f003 030f 	and.w	r3, r3, #15
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d908      	bls.n	800d5ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d5d8:	4b4a      	ldr	r3, [pc, #296]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	f023 020f 	bic.w	r2, r3, #15
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	4947      	ldr	r1, [pc, #284]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 0301 	and.w	r3, r3, #1
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d055      	beq.n	800d6a2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d5f6:	4b43      	ldr	r3, [pc, #268]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	4940      	ldr	r1, [pc, #256]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d604:	4313      	orrs	r3, r2
 800d606:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d107      	bne.n	800d620 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d610:	4b3c      	ldr	r3, [pc, #240]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d121      	bne.n	800d660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	e0f6      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	2b03      	cmp	r3, #3
 800d626:	d107      	bne.n	800d638 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d628:	4b36      	ldr	r3, [pc, #216]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d630:	2b00      	cmp	r3, #0
 800d632:	d115      	bne.n	800d660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e0ea      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d107      	bne.n	800d650 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d640:	4b30      	ldr	r3, [pc, #192]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d109      	bne.n	800d660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e0de      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d650:	4b2c      	ldr	r3, [pc, #176]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f003 0304 	and.w	r3, r3, #4
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d101      	bne.n	800d660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	e0d6      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d660:	4b28      	ldr	r3, [pc, #160]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	f023 0207 	bic.w	r2, r3, #7
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	4925      	ldr	r1, [pc, #148]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d66e:	4313      	orrs	r3, r2
 800d670:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d672:	f7f9 f959 	bl	8006928 <HAL_GetTick>
 800d676:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d678:	e00a      	b.n	800d690 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d67a:	f7f9 f955 	bl	8006928 <HAL_GetTick>
 800d67e:	4602      	mov	r2, r0
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	f241 3288 	movw	r2, #5000	; 0x1388
 800d688:	4293      	cmp	r3, r2
 800d68a:	d901      	bls.n	800d690 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d68c:	2303      	movs	r3, #3
 800d68e:	e0be      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d690:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d1eb      	bne.n	800d67a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f003 0302 	and.w	r3, r3, #2
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d010      	beq.n	800d6d0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68da      	ldr	r2, [r3, #12]
 800d6b2:	4b14      	ldr	r3, [pc, #80]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	f003 030f 	and.w	r3, r3, #15
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d208      	bcs.n	800d6d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d6be:	4b11      	ldr	r3, [pc, #68]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d6c0:	699b      	ldr	r3, [r3, #24]
 800d6c2:	f023 020f 	bic.w	r2, r3, #15
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	490e      	ldr	r1, [pc, #56]	; (800d704 <HAL_RCC_ClockConfig+0x244>)
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d6d0:	4b0b      	ldr	r3, [pc, #44]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f003 030f 	and.w	r3, r3, #15
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d214      	bcs.n	800d708 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6de:	4b08      	ldr	r3, [pc, #32]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f023 020f 	bic.w	r2, r3, #15
 800d6e6:	4906      	ldr	r1, [pc, #24]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6ee:	4b04      	ldr	r3, [pc, #16]	; (800d700 <HAL_RCC_ClockConfig+0x240>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 030f 	and.w	r3, r3, #15
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d005      	beq.n	800d708 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e086      	b.n	800d80e <HAL_RCC_ClockConfig+0x34e>
 800d700:	52002000 	.word	0x52002000
 800d704:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 0304 	and.w	r3, r3, #4
 800d710:	2b00      	cmp	r3, #0
 800d712:	d010      	beq.n	800d736 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	691a      	ldr	r2, [r3, #16]
 800d718:	4b3f      	ldr	r3, [pc, #252]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d720:	429a      	cmp	r2, r3
 800d722:	d208      	bcs.n	800d736 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d724:	4b3c      	ldr	r3, [pc, #240]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	4939      	ldr	r1, [pc, #228]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d732:	4313      	orrs	r3, r2
 800d734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 0308 	and.w	r3, r3, #8
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d010      	beq.n	800d764 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	695a      	ldr	r2, [r3, #20]
 800d746:	4b34      	ldr	r3, [pc, #208]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d74e:	429a      	cmp	r2, r3
 800d750:	d208      	bcs.n	800d764 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d752:	4b31      	ldr	r3, [pc, #196]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d754:	69db      	ldr	r3, [r3, #28]
 800d756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	492e      	ldr	r1, [pc, #184]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d760:	4313      	orrs	r3, r2
 800d762:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 0310 	and.w	r3, r3, #16
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d010      	beq.n	800d792 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	699a      	ldr	r2, [r3, #24]
 800d774:	4b28      	ldr	r3, [pc, #160]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d776:	69db      	ldr	r3, [r3, #28]
 800d778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d208      	bcs.n	800d792 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d780:	4b25      	ldr	r3, [pc, #148]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	699b      	ldr	r3, [r3, #24]
 800d78c:	4922      	ldr	r1, [pc, #136]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d78e:	4313      	orrs	r3, r2
 800d790:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 0320 	and.w	r3, r3, #32
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d010      	beq.n	800d7c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	69da      	ldr	r2, [r3, #28]
 800d7a2:	4b1d      	ldr	r3, [pc, #116]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d208      	bcs.n	800d7c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d7ae:	4b1a      	ldr	r3, [pc, #104]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	69db      	ldr	r3, [r3, #28]
 800d7ba:	4917      	ldr	r1, [pc, #92]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800d7c0:	f000 f89e 	bl	800d900 <HAL_RCC_GetSysClockFreq>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	4b14      	ldr	r3, [pc, #80]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d7c8:	699b      	ldr	r3, [r3, #24]
 800d7ca:	0a1b      	lsrs	r3, r3, #8
 800d7cc:	f003 030f 	and.w	r3, r3, #15
 800d7d0:	4912      	ldr	r1, [pc, #72]	; (800d81c <HAL_RCC_ClockConfig+0x35c>)
 800d7d2:	5ccb      	ldrb	r3, [r1, r3]
 800d7d4:	f003 031f 	and.w	r3, r3, #31
 800d7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7dc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d7de:	4b0e      	ldr	r3, [pc, #56]	; (800d818 <HAL_RCC_ClockConfig+0x358>)
 800d7e0:	699b      	ldr	r3, [r3, #24]
 800d7e2:	f003 030f 	and.w	r3, r3, #15
 800d7e6:	4a0d      	ldr	r2, [pc, #52]	; (800d81c <HAL_RCC_ClockConfig+0x35c>)
 800d7e8:	5cd3      	ldrb	r3, [r2, r3]
 800d7ea:	f003 031f 	and.w	r3, r3, #31
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d7f4:	4a0a      	ldr	r2, [pc, #40]	; (800d820 <HAL_RCC_ClockConfig+0x360>)
 800d7f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d7f8:	4a0a      	ldr	r2, [pc, #40]	; (800d824 <HAL_RCC_ClockConfig+0x364>)
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d7fe:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <HAL_RCC_ClockConfig+0x368>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4618      	mov	r0, r3
 800d804:	f7f9 f846 	bl	8006894 <HAL_InitTick>
 800d808:	4603      	mov	r3, r0
 800d80a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	58024400 	.word	0x58024400
 800d81c:	0801f4c8 	.word	0x0801f4c8
 800d820:	24000048 	.word	0x24000048
 800d824:	24000044 	.word	0x24000044
 800d828:	2400004c 	.word	0x2400004c

0800d82c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08c      	sub	sp, #48	; 0x30
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d12a      	bne.n	800d894 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800d83e:	4b2d      	ldr	r3, [pc, #180]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d844:	4a2b      	ldr	r2, [pc, #172]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d846:	f043 0301 	orr.w	r3, r3, #1
 800d84a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800d84e:	4b29      	ldr	r3, [pc, #164]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d850:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	61bb      	str	r3, [r7, #24]
 800d85a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800d85c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d862:	2302      	movs	r3, #2
 800d864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d866:	2303      	movs	r3, #3
 800d868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d86a:	2300      	movs	r3, #0
 800d86c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d86e:	2300      	movs	r3, #0
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800d872:	f107 031c 	add.w	r3, r7, #28
 800d876:	4619      	mov	r1, r3
 800d878:	481f      	ldr	r0, [pc, #124]	; (800d8f8 <HAL_RCC_MCOConfig+0xcc>)
 800d87a:	f7fd fcc1 	bl	800b200 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800d87e:	4b1d      	ldr	r3, [pc, #116]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800d886:	68b9      	ldr	r1, [r7, #8]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	430b      	orrs	r3, r1
 800d88c:	4919      	ldr	r1, [pc, #100]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d88e:	4313      	orrs	r3, r2
 800d890:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800d892:	e02a      	b.n	800d8ea <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800d894:	4b17      	ldr	r3, [pc, #92]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d89a:	4a16      	ldr	r2, [pc, #88]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d89c:	f043 0304 	orr.w	r3, r3, #4
 800d8a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800d8a4:	4b13      	ldr	r3, [pc, #76]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d8a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d8aa:	f003 0304 	and.w	r3, r3, #4
 800d8ae:	617b      	str	r3, [r7, #20]
 800d8b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800d8b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8b8:	2302      	movs	r3, #2
 800d8ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d8c8:	f107 031c 	add.w	r3, r7, #28
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	480b      	ldr	r0, [pc, #44]	; (800d8fc <HAL_RCC_MCOConfig+0xd0>)
 800d8d0:	f7fd fc96 	bl	800b200 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800d8d4:	4b07      	ldr	r3, [pc, #28]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	01d9      	lsls	r1, r3, #7
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	430b      	orrs	r3, r1
 800d8e4:	4903      	ldr	r1, [pc, #12]	; (800d8f4 <HAL_RCC_MCOConfig+0xc8>)
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	610b      	str	r3, [r1, #16]
}
 800d8ea:	bf00      	nop
 800d8ec:	3730      	adds	r7, #48	; 0x30
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	58024400 	.word	0x58024400
 800d8f8:	58020000 	.word	0x58020000
 800d8fc:	58020800 	.word	0x58020800

0800d900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d900:	b480      	push	{r7}
 800d902:	b089      	sub	sp, #36	; 0x24
 800d904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d906:	4bb3      	ldr	r3, [pc, #716]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d90e:	2b18      	cmp	r3, #24
 800d910:	f200 8155 	bhi.w	800dbbe <HAL_RCC_GetSysClockFreq+0x2be>
 800d914:	a201      	add	r2, pc, #4	; (adr r2, 800d91c <HAL_RCC_GetSysClockFreq+0x1c>)
 800d916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d91a:	bf00      	nop
 800d91c:	0800d981 	.word	0x0800d981
 800d920:	0800dbbf 	.word	0x0800dbbf
 800d924:	0800dbbf 	.word	0x0800dbbf
 800d928:	0800dbbf 	.word	0x0800dbbf
 800d92c:	0800dbbf 	.word	0x0800dbbf
 800d930:	0800dbbf 	.word	0x0800dbbf
 800d934:	0800dbbf 	.word	0x0800dbbf
 800d938:	0800dbbf 	.word	0x0800dbbf
 800d93c:	0800d9a7 	.word	0x0800d9a7
 800d940:	0800dbbf 	.word	0x0800dbbf
 800d944:	0800dbbf 	.word	0x0800dbbf
 800d948:	0800dbbf 	.word	0x0800dbbf
 800d94c:	0800dbbf 	.word	0x0800dbbf
 800d950:	0800dbbf 	.word	0x0800dbbf
 800d954:	0800dbbf 	.word	0x0800dbbf
 800d958:	0800dbbf 	.word	0x0800dbbf
 800d95c:	0800d9ad 	.word	0x0800d9ad
 800d960:	0800dbbf 	.word	0x0800dbbf
 800d964:	0800dbbf 	.word	0x0800dbbf
 800d968:	0800dbbf 	.word	0x0800dbbf
 800d96c:	0800dbbf 	.word	0x0800dbbf
 800d970:	0800dbbf 	.word	0x0800dbbf
 800d974:	0800dbbf 	.word	0x0800dbbf
 800d978:	0800dbbf 	.word	0x0800dbbf
 800d97c:	0800d9b3 	.word	0x0800d9b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d980:	4b94      	ldr	r3, [pc, #592]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 0320 	and.w	r3, r3, #32
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d009      	beq.n	800d9a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d98c:	4b91      	ldr	r3, [pc, #580]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	08db      	lsrs	r3, r3, #3
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	4a90      	ldr	r2, [pc, #576]	; (800dbd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d998:	fa22 f303 	lsr.w	r3, r2, r3
 800d99c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d99e:	e111      	b.n	800dbc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d9a0:	4b8d      	ldr	r3, [pc, #564]	; (800dbd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d9a2:	61bb      	str	r3, [r7, #24]
      break;
 800d9a4:	e10e      	b.n	800dbc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d9a6:	4b8d      	ldr	r3, [pc, #564]	; (800dbdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d9a8:	61bb      	str	r3, [r7, #24]
      break;
 800d9aa:	e10b      	b.n	800dbc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d9ac:	4b8c      	ldr	r3, [pc, #560]	; (800dbe0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d9ae:	61bb      	str	r3, [r7, #24]
      break;
 800d9b0:	e108      	b.n	800dbc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d9b2:	4b88      	ldr	r3, [pc, #544]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b6:	f003 0303 	and.w	r3, r3, #3
 800d9ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d9bc:	4b85      	ldr	r3, [pc, #532]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c0:	091b      	lsrs	r3, r3, #4
 800d9c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d9c8:	4b82      	ldr	r3, [pc, #520]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d9d2:	4b80      	ldr	r3, [pc, #512]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d6:	08db      	lsrs	r3, r3, #3
 800d9d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	fb02 f303 	mul.w	r3, r2, r3
 800d9e2:	ee07 3a90 	vmov	s15, r3
 800d9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 80e1 	beq.w	800dbb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	f000 8083 	beq.w	800db04 <HAL_RCC_GetSysClockFreq+0x204>
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b02      	cmp	r3, #2
 800da02:	f200 80a1 	bhi.w	800db48 <HAL_RCC_GetSysClockFreq+0x248>
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <HAL_RCC_GetSysClockFreq+0x114>
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d056      	beq.n	800dac0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800da12:	e099      	b.n	800db48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da14:	4b6f      	ldr	r3, [pc, #444]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f003 0320 	and.w	r3, r3, #32
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d02d      	beq.n	800da7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da20:	4b6c      	ldr	r3, [pc, #432]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	08db      	lsrs	r3, r3, #3
 800da26:	f003 0303 	and.w	r3, r3, #3
 800da2a:	4a6b      	ldr	r2, [pc, #428]	; (800dbd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800da2c:	fa22 f303 	lsr.w	r3, r2, r3
 800da30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	ee07 3a90 	vmov	s15, r3
 800da38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	ee07 3a90 	vmov	s15, r3
 800da42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da4a:	4b62      	ldr	r3, [pc, #392]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da52:	ee07 3a90 	vmov	s15, r3
 800da56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800da5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800dbe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800da7a:	e087      	b.n	800db8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	ee07 3a90 	vmov	s15, r3
 800da82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da86:	eddf 6a58 	vldr	s13, [pc, #352]	; 800dbe8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800da8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da8e:	4b51      	ldr	r3, [pc, #324]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da96:	ee07 3a90 	vmov	s15, r3
 800da9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800daa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800dbe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800daa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dabe:	e065      	b.n	800db8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	ee07 3a90 	vmov	s15, r3
 800dac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daca:	eddf 6a48 	vldr	s13, [pc, #288]	; 800dbec <HAL_RCC_GetSysClockFreq+0x2ec>
 800dace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dad2:	4b40      	ldr	r3, [pc, #256]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dada:	ee07 3a90 	vmov	s15, r3
 800dade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dae2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dae6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800dbe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800daea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dafe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800db02:	e043      	b.n	800db8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	ee07 3a90 	vmov	s15, r3
 800db0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800dbf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800db12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db16:	4b2f      	ldr	r3, [pc, #188]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db1e:	ee07 3a90 	vmov	s15, r3
 800db22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db26:	ed97 6a02 	vldr	s12, [r7, #8]
 800db2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800dbe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800db2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800db46:	e021      	b.n	800db8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	ee07 3a90 	vmov	s15, r3
 800db4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db52:	eddf 6a26 	vldr	s13, [pc, #152]	; 800dbec <HAL_RCC_GetSysClockFreq+0x2ec>
 800db56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db5a:	4b1e      	ldr	r3, [pc, #120]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db62:	ee07 3a90 	vmov	s15, r3
 800db66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800db6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800dbe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800db72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800db8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800db8c:	4b11      	ldr	r3, [pc, #68]	; (800dbd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db90:	0a5b      	lsrs	r3, r3, #9
 800db92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db96:	3301      	adds	r3, #1
 800db98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	ee07 3a90 	vmov	s15, r3
 800dba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dba4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbb0:	ee17 3a90 	vmov	r3, s15
 800dbb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800dbb6:	e005      	b.n	800dbc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	61bb      	str	r3, [r7, #24]
      break;
 800dbbc:	e002      	b.n	800dbc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800dbbe:	4b07      	ldr	r3, [pc, #28]	; (800dbdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dbc0:	61bb      	str	r3, [r7, #24]
      break;
 800dbc2:	bf00      	nop
  }

  return sysclockfreq;
 800dbc4:	69bb      	ldr	r3, [r7, #24]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3724      	adds	r7, #36	; 0x24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	58024400 	.word	0x58024400
 800dbd8:	03d09000 	.word	0x03d09000
 800dbdc:	003d0900 	.word	0x003d0900
 800dbe0:	016e3600 	.word	0x016e3600
 800dbe4:	46000000 	.word	0x46000000
 800dbe8:	4c742400 	.word	0x4c742400
 800dbec:	4a742400 	.word	0x4a742400
 800dbf0:	4bb71b00 	.word	0x4bb71b00

0800dbf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800dbfa:	f7ff fe81 	bl	800d900 <HAL_RCC_GetSysClockFreq>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	4b10      	ldr	r3, [pc, #64]	; (800dc44 <HAL_RCC_GetHCLKFreq+0x50>)
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	0a1b      	lsrs	r3, r3, #8
 800dc06:	f003 030f 	and.w	r3, r3, #15
 800dc0a:	490f      	ldr	r1, [pc, #60]	; (800dc48 <HAL_RCC_GetHCLKFreq+0x54>)
 800dc0c:	5ccb      	ldrb	r3, [r1, r3]
 800dc0e:	f003 031f 	and.w	r3, r3, #31
 800dc12:	fa22 f303 	lsr.w	r3, r2, r3
 800dc16:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800dc18:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <HAL_RCC_GetHCLKFreq+0x50>)
 800dc1a:	699b      	ldr	r3, [r3, #24]
 800dc1c:	f003 030f 	and.w	r3, r3, #15
 800dc20:	4a09      	ldr	r2, [pc, #36]	; (800dc48 <HAL_RCC_GetHCLKFreq+0x54>)
 800dc22:	5cd3      	ldrb	r3, [r2, r3]
 800dc24:	f003 031f 	and.w	r3, r3, #31
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc2e:	4a07      	ldr	r2, [pc, #28]	; (800dc4c <HAL_RCC_GetHCLKFreq+0x58>)
 800dc30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dc32:	4a07      	ldr	r2, [pc, #28]	; (800dc50 <HAL_RCC_GetHCLKFreq+0x5c>)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800dc38:	4b04      	ldr	r3, [pc, #16]	; (800dc4c <HAL_RCC_GetHCLKFreq+0x58>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	58024400 	.word	0x58024400
 800dc48:	0801f4c8 	.word	0x0801f4c8
 800dc4c:	24000048 	.word	0x24000048
 800dc50:	24000044 	.word	0x24000044

0800dc54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800dc58:	f7ff ffcc 	bl	800dbf4 <HAL_RCC_GetHCLKFreq>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc60:	69db      	ldr	r3, [r3, #28]
 800dc62:	091b      	lsrs	r3, r3, #4
 800dc64:	f003 0307 	and.w	r3, r3, #7
 800dc68:	4904      	ldr	r1, [pc, #16]	; (800dc7c <HAL_RCC_GetPCLK1Freq+0x28>)
 800dc6a:	5ccb      	ldrb	r3, [r1, r3]
 800dc6c:	f003 031f 	and.w	r3, r3, #31
 800dc70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	58024400 	.word	0x58024400
 800dc7c:	0801f4c8 	.word	0x0801f4c8

0800dc80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800dc84:	f7ff ffb6 	bl	800dbf4 <HAL_RCC_GetHCLKFreq>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	0a1b      	lsrs	r3, r3, #8
 800dc90:	f003 0307 	and.w	r3, r3, #7
 800dc94:	4904      	ldr	r1, [pc, #16]	; (800dca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dc96:	5ccb      	ldrb	r3, [r1, r3]
 800dc98:	f003 031f 	and.w	r3, r3, #31
 800dc9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	58024400 	.word	0x58024400
 800dca8:	0801f4c8 	.word	0x0801f4c8

0800dcac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dcac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcb0:	b0c8      	sub	sp, #288	; 0x120
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dcc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dccc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800dcd0:	2500      	movs	r5, #0
 800dcd2:	ea54 0305 	orrs.w	r3, r4, r5
 800dcd6:	d049      	beq.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800dcd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dce2:	d02f      	beq.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800dce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dce8:	d828      	bhi.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dcea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcee:	d01a      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dcf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcf4:	d822      	bhi.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800dcfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcfe:	d007      	beq.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dd00:	e01c      	b.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd02:	4ba7      	ldr	r3, [pc, #668]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd06:	4aa6      	ldr	r2, [pc, #664]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dd0e:	e01a      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dd10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd14:	3308      	adds	r3, #8
 800dd16:	2102      	movs	r1, #2
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f001 fc43 	bl	800f5a4 <RCCEx_PLL2_Config>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dd24:	e00f      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd2a:	3328      	adds	r3, #40	; 0x28
 800dd2c:	2102      	movs	r1, #2
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f001 fcea 	bl	800f708 <RCCEx_PLL3_Config>
 800dd34:	4603      	mov	r3, r0
 800dd36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dd3a:	e004      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dd42:	e000      	b.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dd44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10a      	bne.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dd4e:	4b94      	ldr	r3, [pc, #592]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dd56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd5c:	4a90      	ldr	r2, [pc, #576]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd5e:	430b      	orrs	r3, r1
 800dd60:	6513      	str	r3, [r2, #80]	; 0x50
 800dd62:	e003      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dd6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800dd78:	f04f 0900 	mov.w	r9, #0
 800dd7c:	ea58 0309 	orrs.w	r3, r8, r9
 800dd80:	d047      	beq.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dd82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d82a      	bhi.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dd8c:	a201      	add	r2, pc, #4	; (adr r2, 800dd94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd92:	bf00      	nop
 800dd94:	0800dda9 	.word	0x0800dda9
 800dd98:	0800ddb7 	.word	0x0800ddb7
 800dd9c:	0800ddcd 	.word	0x0800ddcd
 800dda0:	0800ddeb 	.word	0x0800ddeb
 800dda4:	0800ddeb 	.word	0x0800ddeb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dda8:	4b7d      	ldr	r3, [pc, #500]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ddaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddac:	4a7c      	ldr	r2, [pc, #496]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ddae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ddb4:	e01a      	b.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ddb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddba:	3308      	adds	r3, #8
 800ddbc:	2100      	movs	r1, #0
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f001 fbf0 	bl	800f5a4 <RCCEx_PLL2_Config>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ddca:	e00f      	b.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ddcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddd0:	3328      	adds	r3, #40	; 0x28
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f001 fc97 	bl	800f708 <RCCEx_PLL3_Config>
 800ddda:	4603      	mov	r3, r0
 800dddc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dde0:	e004      	b.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dde8:	e000      	b.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ddea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10a      	bne.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ddf4:	4b6a      	ldr	r3, [pc, #424]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ddf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddf8:	f023 0107 	bic.w	r1, r3, #7
 800ddfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de02:	4a67      	ldr	r2, [pc, #412]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de04:	430b      	orrs	r3, r1
 800de06:	6513      	str	r3, [r2, #80]	; 0x50
 800de08:	e003      	b.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800de0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800de12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800de1e:	f04f 0b00 	mov.w	fp, #0
 800de22:	ea5a 030b 	orrs.w	r3, sl, fp
 800de26:	d054      	beq.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800de28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800de32:	d036      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800de34:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800de38:	d82f      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800de3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de3e:	d032      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800de40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de44:	d829      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800de46:	2bc0      	cmp	r3, #192	; 0xc0
 800de48:	d02f      	beq.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800de4a:	2bc0      	cmp	r3, #192	; 0xc0
 800de4c:	d825      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800de4e:	2b80      	cmp	r3, #128	; 0x80
 800de50:	d018      	beq.n	800de84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800de52:	2b80      	cmp	r3, #128	; 0x80
 800de54:	d821      	bhi.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800de5a:	2b40      	cmp	r3, #64	; 0x40
 800de5c:	d007      	beq.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800de5e:	e01c      	b.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de60:	4b4f      	ldr	r3, [pc, #316]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de64:	4a4e      	ldr	r2, [pc, #312]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800de6c:	e01e      	b.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de72:	3308      	adds	r3, #8
 800de74:	2100      	movs	r1, #0
 800de76:	4618      	mov	r0, r3
 800de78:	f001 fb94 	bl	800f5a4 <RCCEx_PLL2_Config>
 800de7c:	4603      	mov	r3, r0
 800de7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800de82:	e013      	b.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800de84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de88:	3328      	adds	r3, #40	; 0x28
 800de8a:	2100      	movs	r1, #0
 800de8c:	4618      	mov	r0, r3
 800de8e:	f001 fc3b 	bl	800f708 <RCCEx_PLL3_Config>
 800de92:	4603      	mov	r3, r0
 800de94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800de98:	e008      	b.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dea0:	e004      	b.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800dea2:	bf00      	nop
 800dea4:	e002      	b.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800dea6:	bf00      	nop
 800dea8:	e000      	b.n	800deac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800deaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800deac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10a      	bne.n	800deca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800deb4:	4b3a      	ldr	r3, [pc, #232]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800deb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deb8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800debc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec2:	4a37      	ldr	r2, [pc, #220]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dec4:	430b      	orrs	r3, r1
 800dec6:	6513      	str	r3, [r2, #80]	; 0x50
 800dec8:	e003      	b.n	800ded2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dece:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800ded2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800dede:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dee2:	2300      	movs	r3, #0
 800dee4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800dee8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800deec:	460b      	mov	r3, r1
 800deee:	4313      	orrs	r3, r2
 800def0:	d05c      	beq.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800def2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800def6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800def8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800defc:	d03b      	beq.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800defe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800df02:	d834      	bhi.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800df04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df08:	d037      	beq.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800df0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df0e:	d82e      	bhi.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800df10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800df14:	d033      	beq.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800df16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800df1a:	d828      	bhi.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800df1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df20:	d01a      	beq.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800df22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df26:	d822      	bhi.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800df2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df30:	d007      	beq.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800df32:	e01c      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df34:	4b1a      	ldr	r3, [pc, #104]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df38:	4a19      	ldr	r2, [pc, #100]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800df40:	e01e      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df46:	3308      	adds	r3, #8
 800df48:	2100      	movs	r1, #0
 800df4a:	4618      	mov	r0, r3
 800df4c:	f001 fb2a 	bl	800f5a4 <RCCEx_PLL2_Config>
 800df50:	4603      	mov	r3, r0
 800df52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800df56:	e013      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df5c:	3328      	adds	r3, #40	; 0x28
 800df5e:	2100      	movs	r1, #0
 800df60:	4618      	mov	r0, r3
 800df62:	f001 fbd1 	bl	800f708 <RCCEx_PLL3_Config>
 800df66:	4603      	mov	r3, r0
 800df68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800df6c:	e008      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800df74:	e004      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800df76:	bf00      	nop
 800df78:	e002      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800df7a:	bf00      	nop
 800df7c:	e000      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800df7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800df84:	2b00      	cmp	r3, #0
 800df86:	d10d      	bne.n	800dfa4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800df88:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df8c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800df90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df96:	4a02      	ldr	r2, [pc, #8]	; (800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df98:	430b      	orrs	r3, r1
 800df9a:	6513      	str	r3, [r2, #80]	; 0x50
 800df9c:	e006      	b.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x300>
 800df9e:	bf00      	nop
 800dfa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dfa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800dfac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800dfb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dfc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	d03a      	beq.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800dfcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfd2:	2b30      	cmp	r3, #48	; 0x30
 800dfd4:	d01f      	beq.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800dfd6:	2b30      	cmp	r3, #48	; 0x30
 800dfd8:	d819      	bhi.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800dfda:	2b20      	cmp	r3, #32
 800dfdc:	d00c      	beq.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800dfde:	2b20      	cmp	r3, #32
 800dfe0:	d815      	bhi.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d019      	beq.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800dfe6:	2b10      	cmp	r3, #16
 800dfe8:	d111      	bne.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfea:	4bae      	ldr	r3, [pc, #696]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfee:	4aad      	ldr	r2, [pc, #692]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800dff6:	e011      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dffc:	3308      	adds	r3, #8
 800dffe:	2102      	movs	r1, #2
 800e000:	4618      	mov	r0, r3
 800e002:	f001 facf 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e006:	4603      	mov	r3, r0
 800e008:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e00c:	e006      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e014:	e002      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800e016:	bf00      	nop
 800e018:	e000      	b.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800e01a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e01c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10a      	bne.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e024:	4b9f      	ldr	r3, [pc, #636]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e028:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800e02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e032:	4a9c      	ldr	r2, [pc, #624]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e034:	430b      	orrs	r3, r1
 800e036:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e038:	e003      	b.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e03a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e03e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e04e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e052:	2300      	movs	r3, #0
 800e054:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e058:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e05c:	460b      	mov	r3, r1
 800e05e:	4313      	orrs	r3, r2
 800e060:	d051      	beq.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e06c:	d035      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800e06e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e072:	d82e      	bhi.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800e074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e078:	d031      	beq.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0x432>
 800e07a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e07e:	d828      	bhi.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800e080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e084:	d01a      	beq.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e08a:	d822      	bhi.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d003      	beq.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800e090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e094:	d007      	beq.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800e096:	e01c      	b.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e098:	4b82      	ldr	r3, [pc, #520]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09c:	4a81      	ldr	r2, [pc, #516]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e09e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e0a4:	e01c      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f001 fa78 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e0ba:	e011      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e0bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0c0:	3328      	adds	r3, #40	; 0x28
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f001 fb1f 	bl	800f708 <RCCEx_PLL3_Config>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e0d0:	e006      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e0d8:	e002      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800e0da:	bf00      	nop
 800e0dc:	e000      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800e0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10a      	bne.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e0e8:	4b6e      	ldr	r3, [pc, #440]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e0f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0f6:	4a6b      	ldr	r2, [pc, #428]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e0f8:	430b      	orrs	r3, r1
 800e0fa:	6513      	str	r3, [r2, #80]	; 0x50
 800e0fc:	e003      	b.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e102:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e116:	2300      	movs	r3, #0
 800e118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e11c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e120:	460b      	mov	r3, r1
 800e122:	4313      	orrs	r3, r2
 800e124:	d053      	beq.n	800e1ce <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e12a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e12c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e130:	d033      	beq.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800e132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e136:	d82c      	bhi.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800e138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e13c:	d02f      	beq.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800e13e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e142:	d826      	bhi.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800e144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e148:	d02b      	beq.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e14a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e14e:	d820      	bhi.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800e150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e154:	d012      	beq.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800e156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e15a:	d81a      	bhi.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d022      	beq.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800e160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e164:	d115      	bne.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e16a:	3308      	adds	r3, #8
 800e16c:	2101      	movs	r1, #1
 800e16e:	4618      	mov	r0, r3
 800e170:	f001 fa18 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e174:	4603      	mov	r3, r0
 800e176:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e17a:	e015      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e17c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e180:	3328      	adds	r3, #40	; 0x28
 800e182:	2101      	movs	r1, #1
 800e184:	4618      	mov	r0, r3
 800e186:	f001 fabf 	bl	800f708 <RCCEx_PLL3_Config>
 800e18a:	4603      	mov	r3, r0
 800e18c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e190:	e00a      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e198:	e006      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800e19a:	bf00      	nop
 800e19c:	e004      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800e19e:	bf00      	nop
 800e1a0:	e002      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800e1a2:	bf00      	nop
 800e1a4:	e000      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800e1a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e1b0:	4b3c      	ldr	r3, [pc, #240]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e1b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1be:	4a39      	ldr	r2, [pc, #228]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e1c0:	430b      	orrs	r3, r1
 800e1c2:	6513      	str	r3, [r2, #80]	; 0x50
 800e1c4:	e003      	b.n	800e1ce <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e1ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e1ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e1da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e1e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	d060      	beq.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e1f6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800e1fa:	d039      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800e1fc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800e200:	d832      	bhi.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800e202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e206:	d035      	beq.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e20c:	d82c      	bhi.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800e20e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e212:	d031      	beq.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e218:	d826      	bhi.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800e21a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e21e:	d02d      	beq.n	800e27c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e220:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e224:	d820      	bhi.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800e226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e22a:	d012      	beq.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e22c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e230:	d81a      	bhi.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800e232:	2b00      	cmp	r3, #0
 800e234:	d024      	beq.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e23a:	d115      	bne.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e240:	3308      	adds	r3, #8
 800e242:	2101      	movs	r1, #1
 800e244:	4618      	mov	r0, r3
 800e246:	f001 f9ad 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e24a:	4603      	mov	r3, r0
 800e24c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e250:	e017      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e256:	3328      	adds	r3, #40	; 0x28
 800e258:	2101      	movs	r1, #1
 800e25a:	4618      	mov	r0, r3
 800e25c:	f001 fa54 	bl	800f708 <RCCEx_PLL3_Config>
 800e260:	4603      	mov	r3, r0
 800e262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e266:	e00c      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e26e:	e008      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e270:	bf00      	nop
 800e272:	e006      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e274:	bf00      	nop
 800e276:	e004      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e278:	bf00      	nop
 800e27a:	e002      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e27c:	bf00      	nop
 800e27e:	e000      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e280:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e282:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10e      	bne.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e28a:	4b06      	ldr	r3, [pc, #24]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e28e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e29a:	4a02      	ldr	r2, [pc, #8]	; (800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e29c:	430b      	orrs	r3, r1
 800e29e:	6593      	str	r3, [r2, #88]	; 0x58
 800e2a0:	e006      	b.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e2a2:	bf00      	nop
 800e2a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e2ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e2bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e2c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	d037      	beq.n	800e340 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2da:	d00e      	beq.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e2dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2e0:	d816      	bhi.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d018      	beq.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e2e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2ea:	d111      	bne.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2ec:	4bc4      	ldr	r3, [pc, #784]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f0:	4ac3      	ldr	r2, [pc, #780]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e2f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e2f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e2f8:	e00f      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2fe:	3308      	adds	r3, #8
 800e300:	2101      	movs	r1, #1
 800e302:	4618      	mov	r0, r3
 800e304:	f001 f94e 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e308:	4603      	mov	r3, r0
 800e30a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e30e:	e004      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e316:	e000      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e31a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10a      	bne.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e322:	4bb7      	ldr	r3, [pc, #732]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e326:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e32a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e32e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e330:	4ab3      	ldr	r2, [pc, #716]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e332:	430b      	orrs	r3, r1
 800e334:	6513      	str	r3, [r2, #80]	; 0x50
 800e336:	e003      	b.n	800e340 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e338:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e33c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e34c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e350:	2300      	movs	r3, #0
 800e352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e356:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e35a:	460b      	mov	r3, r1
 800e35c:	4313      	orrs	r3, r2
 800e35e:	d039      	beq.n	800e3d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e366:	2b03      	cmp	r3, #3
 800e368:	d81c      	bhi.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e36a:	a201      	add	r2, pc, #4	; (adr r2, 800e370 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e370:	0800e3ad 	.word	0x0800e3ad
 800e374:	0800e381 	.word	0x0800e381
 800e378:	0800e38f 	.word	0x0800e38f
 800e37c:	0800e3ad 	.word	0x0800e3ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e380:	4b9f      	ldr	r3, [pc, #636]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e384:	4a9e      	ldr	r2, [pc, #632]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e38a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e38c:	e00f      	b.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e38e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e392:	3308      	adds	r3, #8
 800e394:	2102      	movs	r1, #2
 800e396:	4618      	mov	r0, r3
 800e398:	f001 f904 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e39c:	4603      	mov	r3, r0
 800e39e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e3a2:	e004      	b.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e3aa:	e000      	b.n	800e3ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e3b6:	4b92      	ldr	r3, [pc, #584]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ba:	f023 0103 	bic.w	r1, r3, #3
 800e3be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3c4:	4a8e      	ldr	r2, [pc, #568]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e3c6:	430b      	orrs	r3, r1
 800e3c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e3ca:	e003      	b.n	800e3d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e3e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e3ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	f000 8099 	beq.w	800e528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e3f6:	4b83      	ldr	r3, [pc, #524]	; (800e604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a82      	ldr	r2, [pc, #520]	; (800e604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e3fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e402:	f7f8 fa91 	bl	8006928 <HAL_GetTick>
 800e406:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e40a:	e00b      	b.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e40c:	f7f8 fa8c 	bl	8006928 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	2b64      	cmp	r3, #100	; 0x64
 800e41a:	d903      	bls.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e41c:	2303      	movs	r3, #3
 800e41e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e422:	e005      	b.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e424:	4b77      	ldr	r3, [pc, #476]	; (800e604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d0ed      	beq.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e430:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e434:	2b00      	cmp	r3, #0
 800e436:	d173      	bne.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e438:	4b71      	ldr	r3, [pc, #452]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e43a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e440:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e444:	4053      	eors	r3, r2
 800e446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d015      	beq.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e44e:	4b6c      	ldr	r3, [pc, #432]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e456:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e45a:	4b69      	ldr	r3, [pc, #420]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e45e:	4a68      	ldr	r2, [pc, #416]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e464:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e466:	4b66      	ldr	r3, [pc, #408]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e46a:	4a65      	ldr	r2, [pc, #404]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e46c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e470:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e472:	4a63      	ldr	r2, [pc, #396]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e478:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e47e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e486:	d118      	bne.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e488:	f7f8 fa4e 	bl	8006928 <HAL_GetTick>
 800e48c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e490:	e00d      	b.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e492:	f7f8 fa49 	bl	8006928 <HAL_GetTick>
 800e496:	4602      	mov	r2, r0
 800e498:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e49c:	1ad2      	subs	r2, r2, r3
 800e49e:	f241 3388 	movw	r3, #5000	; 0x1388
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d903      	bls.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e4a6:	2303      	movs	r3, #3
 800e4a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800e4ac:	e005      	b.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e4ae:	4b54      	ldr	r3, [pc, #336]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b2:	f003 0302 	and.w	r3, r3, #2
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d0eb      	beq.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e4ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d129      	bne.n	800e516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e4ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e4d2:	d10e      	bne.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e4d4:	4b4a      	ldr	r3, [pc, #296]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e4e4:	091a      	lsrs	r2, r3, #4
 800e4e6:	4b48      	ldr	r3, [pc, #288]	; (800e608 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	4a45      	ldr	r2, [pc, #276]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4ec:	430b      	orrs	r3, r1
 800e4ee:	6113      	str	r3, [r2, #16]
 800e4f0:	e005      	b.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e4f2:	4b43      	ldr	r3, [pc, #268]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	4a42      	ldr	r2, [pc, #264]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e4fc:	6113      	str	r3, [r2, #16]
 800e4fe:	4b40      	ldr	r3, [pc, #256]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e500:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e50a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e50e:	4a3c      	ldr	r2, [pc, #240]	; (800e600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e510:	430b      	orrs	r3, r1
 800e512:	6713      	str	r3, [r2, #112]	; 0x70
 800e514:	e008      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e51a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800e51e:	e003      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e520:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e524:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f002 0301 	and.w	r3, r2, #1
 800e534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e538:	2300      	movs	r3, #0
 800e53a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e53e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e542:	460b      	mov	r3, r1
 800e544:	4313      	orrs	r3, r2
 800e546:	f000 8090 	beq.w	800e66a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e552:	2b28      	cmp	r3, #40	; 0x28
 800e554:	d870      	bhi.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e556:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55c:	0800e641 	.word	0x0800e641
 800e560:	0800e639 	.word	0x0800e639
 800e564:	0800e639 	.word	0x0800e639
 800e568:	0800e639 	.word	0x0800e639
 800e56c:	0800e639 	.word	0x0800e639
 800e570:	0800e639 	.word	0x0800e639
 800e574:	0800e639 	.word	0x0800e639
 800e578:	0800e639 	.word	0x0800e639
 800e57c:	0800e60d 	.word	0x0800e60d
 800e580:	0800e639 	.word	0x0800e639
 800e584:	0800e639 	.word	0x0800e639
 800e588:	0800e639 	.word	0x0800e639
 800e58c:	0800e639 	.word	0x0800e639
 800e590:	0800e639 	.word	0x0800e639
 800e594:	0800e639 	.word	0x0800e639
 800e598:	0800e639 	.word	0x0800e639
 800e59c:	0800e623 	.word	0x0800e623
 800e5a0:	0800e639 	.word	0x0800e639
 800e5a4:	0800e639 	.word	0x0800e639
 800e5a8:	0800e639 	.word	0x0800e639
 800e5ac:	0800e639 	.word	0x0800e639
 800e5b0:	0800e639 	.word	0x0800e639
 800e5b4:	0800e639 	.word	0x0800e639
 800e5b8:	0800e639 	.word	0x0800e639
 800e5bc:	0800e641 	.word	0x0800e641
 800e5c0:	0800e639 	.word	0x0800e639
 800e5c4:	0800e639 	.word	0x0800e639
 800e5c8:	0800e639 	.word	0x0800e639
 800e5cc:	0800e639 	.word	0x0800e639
 800e5d0:	0800e639 	.word	0x0800e639
 800e5d4:	0800e639 	.word	0x0800e639
 800e5d8:	0800e639 	.word	0x0800e639
 800e5dc:	0800e641 	.word	0x0800e641
 800e5e0:	0800e639 	.word	0x0800e639
 800e5e4:	0800e639 	.word	0x0800e639
 800e5e8:	0800e639 	.word	0x0800e639
 800e5ec:	0800e639 	.word	0x0800e639
 800e5f0:	0800e639 	.word	0x0800e639
 800e5f4:	0800e639 	.word	0x0800e639
 800e5f8:	0800e639 	.word	0x0800e639
 800e5fc:	0800e641 	.word	0x0800e641
 800e600:	58024400 	.word	0x58024400
 800e604:	58024800 	.word	0x58024800
 800e608:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e610:	3308      	adds	r3, #8
 800e612:	2101      	movs	r1, #1
 800e614:	4618      	mov	r0, r3
 800e616:	f000 ffc5 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e61a:	4603      	mov	r3, r0
 800e61c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e620:	e00f      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e626:	3328      	adds	r3, #40	; 0x28
 800e628:	2101      	movs	r1, #1
 800e62a:	4618      	mov	r0, r3
 800e62c:	f001 f86c 	bl	800f708 <RCCEx_PLL3_Config>
 800e630:	4603      	mov	r3, r0
 800e632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e636:	e004      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e638:	2301      	movs	r3, #1
 800e63a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e63e:	e000      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800e640:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e642:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e646:	2b00      	cmp	r3, #0
 800e648:	d10b      	bne.n	800e662 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e64a:	4bc0      	ldr	r3, [pc, #768]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e65a:	4abc      	ldr	r2, [pc, #752]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e65c:	430b      	orrs	r3, r1
 800e65e:	6553      	str	r3, [r2, #84]	; 0x54
 800e660:	e003      	b.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e662:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e666:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e672:	f002 0302 	and.w	r3, r2, #2
 800e676:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e67a:	2300      	movs	r3, #0
 800e67c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e680:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e684:	460b      	mov	r3, r1
 800e686:	4313      	orrs	r3, r2
 800e688:	d043      	beq.n	800e712 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e68a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e692:	2b05      	cmp	r3, #5
 800e694:	d824      	bhi.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800e696:	a201      	add	r2, pc, #4	; (adr r2, 800e69c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800e698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e69c:	0800e6e9 	.word	0x0800e6e9
 800e6a0:	0800e6b5 	.word	0x0800e6b5
 800e6a4:	0800e6cb 	.word	0x0800e6cb
 800e6a8:	0800e6e9 	.word	0x0800e6e9
 800e6ac:	0800e6e9 	.word	0x0800e6e9
 800e6b0:	0800e6e9 	.word	0x0800e6e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	2101      	movs	r1, #1
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 ff71 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e6c8:	e00f      	b.n	800e6ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6ce:	3328      	adds	r3, #40	; 0x28
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 f818 	bl	800f708 <RCCEx_PLL3_Config>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e6de:	e004      	b.n	800e6ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e6e6:	e000      	b.n	800e6ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800e6e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10b      	bne.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e6f2:	4b96      	ldr	r3, [pc, #600]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6f6:	f023 0107 	bic.w	r1, r3, #7
 800e6fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e702:	4a92      	ldr	r2, [pc, #584]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e704:	430b      	orrs	r3, r1
 800e706:	6553      	str	r3, [r2, #84]	; 0x54
 800e708:	e003      	b.n	800e712 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e70a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e70e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	f002 0304 	and.w	r3, r2, #4
 800e71e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e722:	2300      	movs	r3, #0
 800e724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e728:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e72c:	460b      	mov	r3, r1
 800e72e:	4313      	orrs	r3, r2
 800e730:	d043      	beq.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e73a:	2b05      	cmp	r3, #5
 800e73c:	d824      	bhi.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800e73e:	a201      	add	r2, pc, #4	; (adr r2, 800e744 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800e740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e744:	0800e791 	.word	0x0800e791
 800e748:	0800e75d 	.word	0x0800e75d
 800e74c:	0800e773 	.word	0x0800e773
 800e750:	0800e791 	.word	0x0800e791
 800e754:	0800e791 	.word	0x0800e791
 800e758:	0800e791 	.word	0x0800e791
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e760:	3308      	adds	r3, #8
 800e762:	2101      	movs	r1, #1
 800e764:	4618      	mov	r0, r3
 800e766:	f000 ff1d 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e76a:	4603      	mov	r3, r0
 800e76c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e770:	e00f      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e776:	3328      	adds	r3, #40	; 0x28
 800e778:	2101      	movs	r1, #1
 800e77a:	4618      	mov	r0, r3
 800e77c:	f000 ffc4 	bl	800f708 <RCCEx_PLL3_Config>
 800e780:	4603      	mov	r3, r0
 800e782:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e786:	e004      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e788:	2301      	movs	r3, #1
 800e78a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e78e:	e000      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800e790:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10b      	bne.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e79a:	4b6c      	ldr	r3, [pc, #432]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e79e:	f023 0107 	bic.w	r1, r3, #7
 800e7a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7aa:	4a68      	ldr	r2, [pc, #416]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e7ac:	430b      	orrs	r3, r1
 800e7ae:	6593      	str	r3, [r2, #88]	; 0x58
 800e7b0:	e003      	b.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e7b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e7ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c2:	f002 0320 	and.w	r3, r2, #32
 800e7c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e7d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	d055      	beq.n	800e886 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e7e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7e6:	d033      	beq.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e7e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7ec:	d82c      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7f2:	d02f      	beq.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7f8:	d826      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e7fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e7fe:	d02b      	beq.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e800:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e804:	d820      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e80a:	d012      	beq.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800e80c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e810:	d81a      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800e812:	2b00      	cmp	r3, #0
 800e814:	d022      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800e816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e81a:	d115      	bne.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e820:	3308      	adds	r3, #8
 800e822:	2100      	movs	r1, #0
 800e824:	4618      	mov	r0, r3
 800e826:	f000 febd 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e82a:	4603      	mov	r3, r0
 800e82c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e830:	e015      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e836:	3328      	adds	r3, #40	; 0x28
 800e838:	2102      	movs	r1, #2
 800e83a:	4618      	mov	r0, r3
 800e83c:	f000 ff64 	bl	800f708 <RCCEx_PLL3_Config>
 800e840:	4603      	mov	r3, r0
 800e842:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e846:	e00a      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e84e:	e006      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e850:	bf00      	nop
 800e852:	e004      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e854:	bf00      	nop
 800e856:	e002      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e858:	bf00      	nop
 800e85a:	e000      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800e85c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e85e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10b      	bne.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e866:	4b39      	ldr	r3, [pc, #228]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e86a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e86e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e876:	4a35      	ldr	r2, [pc, #212]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e878:	430b      	orrs	r3, r1
 800e87a:	6553      	str	r3, [r2, #84]	; 0x54
 800e87c:	e003      	b.n	800e886 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e87e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e882:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e896:	2300      	movs	r3, #0
 800e898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e89c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	d058      	beq.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e8ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e8b2:	d033      	beq.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e8b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e8b8:	d82c      	bhi.n	800e914 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8be:	d02f      	beq.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e8c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8c4:	d826      	bhi.n	800e914 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e8c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8ca:	d02b      	beq.n	800e924 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e8cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8d0:	d820      	bhi.n	800e914 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e8d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8d6:	d012      	beq.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800e8d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8dc:	d81a      	bhi.n	800e914 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d022      	beq.n	800e928 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800e8e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e6:	d115      	bne.n	800e914 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f000 fe57 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e8fc:	e015      	b.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e902:	3328      	adds	r3, #40	; 0x28
 800e904:	2102      	movs	r1, #2
 800e906:	4618      	mov	r0, r3
 800e908:	f000 fefe 	bl	800f708 <RCCEx_PLL3_Config>
 800e90c:	4603      	mov	r3, r0
 800e90e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e912:	e00a      	b.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e914:	2301      	movs	r3, #1
 800e916:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e91a:	e006      	b.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e91c:	bf00      	nop
 800e91e:	e004      	b.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e920:	bf00      	nop
 800e922:	e002      	b.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e924:	bf00      	nop
 800e926:	e000      	b.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800e928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e92a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10e      	bne.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e932:	4b06      	ldr	r3, [pc, #24]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e936:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e93a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e93e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e942:	4a02      	ldr	r2, [pc, #8]	; (800e94c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e944:	430b      	orrs	r3, r1
 800e946:	6593      	str	r3, [r2, #88]	; 0x58
 800e948:	e006      	b.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800e94a:	bf00      	nop
 800e94c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e950:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e954:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e968:	2300      	movs	r3, #0
 800e96a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e96e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e972:	460b      	mov	r3, r1
 800e974:	4313      	orrs	r3, r2
 800e976:	d055      	beq.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e97c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e980:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e984:	d033      	beq.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e986:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e98a:	d82c      	bhi.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e98c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e990:	d02f      	beq.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e996:	d826      	bhi.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e998:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e99c:	d02b      	beq.n	800e9f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e99e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e9a2:	d820      	bhi.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e9a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e9a8:	d012      	beq.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800e9aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e9ae:	d81a      	bhi.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d022      	beq.n	800e9fa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800e9b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9b8:	d115      	bne.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9be:	3308      	adds	r3, #8
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 fdee 	bl	800f5a4 <RCCEx_PLL2_Config>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e9ce:	e015      	b.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9d4:	3328      	adds	r3, #40	; 0x28
 800e9d6:	2102      	movs	r1, #2
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f000 fe95 	bl	800f708 <RCCEx_PLL3_Config>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e9e4:	e00a      	b.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e9ec:	e006      	b.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e9ee:	bf00      	nop
 800e9f0:	e004      	b.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e9f2:	bf00      	nop
 800e9f4:	e002      	b.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e9f6:	bf00      	nop
 800e9f8:	e000      	b.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800e9fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10b      	bne.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ea04:	4ba1      	ldr	r3, [pc, #644]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ea06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea08:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ea0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ea14:	4a9d      	ldr	r2, [pc, #628]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ea16:	430b      	orrs	r3, r1
 800ea18:	6593      	str	r3, [r2, #88]	; 0x58
 800ea1a:	e003      	b.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ea20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ea24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	f002 0308 	and.w	r3, r2, #8
 800ea30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ea34:	2300      	movs	r3, #0
 800ea36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4313      	orrs	r3, r2
 800ea42:	d01e      	beq.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ea44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea50:	d10c      	bne.n	800ea6c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ea52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea56:	3328      	adds	r3, #40	; 0x28
 800ea58:	2102      	movs	r1, #2
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f000 fe54 	bl	800f708 <RCCEx_PLL3_Config>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d002      	beq.n	800ea6c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ea6c:	4b87      	ldr	r3, [pc, #540]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ea6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ea74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea7c:	4a83      	ldr	r2, [pc, #524]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ea7e:	430b      	orrs	r3, r1
 800ea80:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ea82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	f002 0310 	and.w	r3, r2, #16
 800ea8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ea92:	2300      	movs	r3, #0
 800ea94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ea98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	d01e      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800eaa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eaa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaae:	d10c      	bne.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eab4:	3328      	adds	r3, #40	; 0x28
 800eab6:	2102      	movs	r1, #2
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 fe25 	bl	800f708 <RCCEx_PLL3_Config>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d002      	beq.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800eaca:	4b70      	ldr	r3, [pc, #448]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800eacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ead2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ead6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eada:	4a6c      	ldr	r2, [pc, #432]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800eadc:	430b      	orrs	r3, r1
 800eade:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800eaec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eaf6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800eafa:	460b      	mov	r3, r1
 800eafc:	4313      	orrs	r3, r2
 800eafe:	d03e      	beq.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800eb00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb0c:	d022      	beq.n	800eb54 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800eb0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb12:	d81b      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d003      	beq.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800eb18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb1c:	d00b      	beq.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800eb1e:	e015      	b.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb24:	3308      	adds	r3, #8
 800eb26:	2100      	movs	r1, #0
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 fd3b 	bl	800f5a4 <RCCEx_PLL2_Config>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800eb34:	e00f      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb3a:	3328      	adds	r3, #40	; 0x28
 800eb3c:	2102      	movs	r1, #2
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 fde2 	bl	800f708 <RCCEx_PLL3_Config>
 800eb44:	4603      	mov	r3, r0
 800eb46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800eb4a:	e004      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800eb52:	e000      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800eb54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d10b      	bne.n	800eb76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eb5e:	4b4b      	ldr	r3, [pc, #300]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800eb60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800eb66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb6e:	4a47      	ldr	r2, [pc, #284]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800eb70:	430b      	orrs	r3, r1
 800eb72:	6593      	str	r3, [r2, #88]	; 0x58
 800eb74:	e003      	b.n	800eb7e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800eb7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800eb8a:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800eb94:	460b      	mov	r3, r1
 800eb96:	4313      	orrs	r3, r2
 800eb98:	d03b      	beq.n	800ec12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800eb9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eba2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eba6:	d01f      	beq.n	800ebe8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800eba8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ebac:	d818      	bhi.n	800ebe0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ebae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebb2:	d003      	beq.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800ebb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebb8:	d007      	beq.n	800ebca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800ebba:	e011      	b.n	800ebe0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebbc:	4b33      	ldr	r3, [pc, #204]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ebbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc0:	4a32      	ldr	r2, [pc, #200]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ebc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ebc8:	e00f      	b.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebce:	3328      	adds	r3, #40	; 0x28
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f000 fd98 	bl	800f708 <RCCEx_PLL3_Config>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800ebde:	e004      	b.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ebe6:	e000      	b.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800ebe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10b      	bne.n	800ec0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ebf2:	4b26      	ldr	r3, [pc, #152]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ebf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ebfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec02:	4a22      	ldr	r2, [pc, #136]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ec04:	430b      	orrs	r3, r1
 800ec06:	6553      	str	r3, [r2, #84]	; 0x54
 800ec08:	e003      	b.n	800ec12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ec0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ec12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ec1e:	673b      	str	r3, [r7, #112]	; 0x70
 800ec20:	2300      	movs	r3, #0
 800ec22:	677b      	str	r3, [r7, #116]	; 0x74
 800ec24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	d034      	beq.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ec2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d003      	beq.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800ec38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec3c:	d007      	beq.n	800ec4e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800ec3e:	e011      	b.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec40:	4b12      	ldr	r3, [pc, #72]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ec42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec44:	4a11      	ldr	r2, [pc, #68]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ec46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ec4c:	e00e      	b.n	800ec6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ec4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec52:	3308      	adds	r3, #8
 800ec54:	2102      	movs	r1, #2
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 fca4 	bl	800f5a4 <RCCEx_PLL2_Config>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ec62:	e003      	b.n	800ec6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800ec64:	2301      	movs	r3, #1
 800ec66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ec6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10d      	bne.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ec74:	4b05      	ldr	r3, [pc, #20]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ec76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec82:	4a02      	ldr	r2, [pc, #8]	; (800ec8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ec84:	430b      	orrs	r3, r1
 800ec86:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ec88:	e006      	b.n	800ec98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800ec8a:	bf00      	nop
 800ec8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ec94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ec98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800eca4:	66bb      	str	r3, [r7, #104]	; 0x68
 800eca6:	2300      	movs	r3, #0
 800eca8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecaa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ecae:	460b      	mov	r3, r1
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	d00c      	beq.n	800ecce <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ecb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ecb8:	3328      	adds	r3, #40	; 0x28
 800ecba:	2102      	movs	r1, #2
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f000 fd23 	bl	800f708 <RCCEx_PLL3_Config>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d002      	beq.n	800ecce <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ecce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ecda:	663b      	str	r3, [r7, #96]	; 0x60
 800ecdc:	2300      	movs	r3, #0
 800ecde:	667b      	str	r3, [r7, #100]	; 0x64
 800ece0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ece4:	460b      	mov	r3, r1
 800ece6:	4313      	orrs	r3, r2
 800ece8:	d038      	beq.n	800ed5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ecea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ecee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecf6:	d018      	beq.n	800ed2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ecf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecfc:	d811      	bhi.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800ecfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed02:	d014      	beq.n	800ed2e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800ed04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed08:	d80b      	bhi.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d011      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800ed0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed12:	d106      	bne.n	800ed22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed14:	4bc3      	ldr	r3, [pc, #780]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ed16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed18:	4ac2      	ldr	r2, [pc, #776]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ed1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ed20:	e008      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed22:	2301      	movs	r3, #1
 800ed24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ed28:	e004      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800ed2a:	bf00      	nop
 800ed2c:	e002      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800ed2e:	bf00      	nop
 800ed30:	e000      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800ed32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10b      	bne.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ed3c:	4bb9      	ldr	r3, [pc, #740]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ed3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ed44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed4c:	4ab5      	ldr	r2, [pc, #724]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ed4e:	430b      	orrs	r3, r1
 800ed50:	6553      	str	r3, [r2, #84]	; 0x54
 800ed52:	e003      	b.n	800ed5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ed58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ed5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ed68:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ed72:	460b      	mov	r3, r1
 800ed74:	4313      	orrs	r3, r2
 800ed76:	d009      	beq.n	800ed8c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ed78:	4baa      	ldr	r3, [pc, #680]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ed7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ed80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed86:	4aa7      	ldr	r2, [pc, #668]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ed88:	430b      	orrs	r3, r1
 800ed8a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ed8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ed98:	653b      	str	r3, [r7, #80]	; 0x50
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	657b      	str	r3, [r7, #84]	; 0x54
 800ed9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800eda2:	460b      	mov	r3, r1
 800eda4:	4313      	orrs	r3, r2
 800eda6:	d009      	beq.n	800edbc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800eda8:	4b9e      	ldr	r3, [pc, #632]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800edaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edac:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800edb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edb6:	4a9b      	ldr	r2, [pc, #620]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800edb8:	430b      	orrs	r3, r1
 800edba:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800edbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800edc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800edca:	2300      	movs	r3, #0
 800edcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800edd2:	460b      	mov	r3, r1
 800edd4:	4313      	orrs	r3, r2
 800edd6:	d009      	beq.n	800edec <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800edd8:	4b92      	ldr	r3, [pc, #584]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800edda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eddc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800ede0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ede4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ede6:	4a8f      	ldr	r2, [pc, #572]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ede8:	430b      	orrs	r3, r1
 800edea:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800edec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800edf8:	643b      	str	r3, [r7, #64]	; 0x40
 800edfa:	2300      	movs	r3, #0
 800edfc:	647b      	str	r3, [r7, #68]	; 0x44
 800edfe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ee02:	460b      	mov	r3, r1
 800ee04:	4313      	orrs	r3, r2
 800ee06:	d00e      	beq.n	800ee26 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ee08:	4b86      	ldr	r3, [pc, #536]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	4a85      	ldr	r2, [pc, #532]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ee12:	6113      	str	r3, [r2, #16]
 800ee14:	4b83      	ldr	r3, [pc, #524]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee16:	6919      	ldr	r1, [r3, #16]
 800ee18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ee20:	4a80      	ldr	r2, [pc, #512]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee22:	430b      	orrs	r3, r1
 800ee24:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ee26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ee32:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee34:	2300      	movs	r3, #0
 800ee36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	d009      	beq.n	800ee56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ee42:	4b78      	ldr	r3, [pc, #480]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ee4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee50:	4a74      	ldr	r2, [pc, #464]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee52:	430b      	orrs	r3, r1
 800ee54:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ee56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ee62:	633b      	str	r3, [r7, #48]	; 0x30
 800ee64:	2300      	movs	r3, #0
 800ee66:	637b      	str	r3, [r7, #52]	; 0x34
 800ee68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	d00a      	beq.n	800ee88 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ee72:	4b6c      	ldr	r3, [pc, #432]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee76:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ee7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ee82:	4a68      	ldr	r2, [pc, #416]	; (800f024 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ee84:	430b      	orrs	r3, r1
 800ee86:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ee88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee90:	2100      	movs	r1, #0
 800ee92:	62b9      	str	r1, [r7, #40]	; 0x28
 800ee94:	f003 0301 	and.w	r3, r3, #1
 800ee98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ee9e:	460b      	mov	r3, r1
 800eea0:	4313      	orrs	r3, r2
 800eea2:	d011      	beq.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eea8:	3308      	adds	r3, #8
 800eeaa:	2100      	movs	r1, #0
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 fb79 	bl	800f5a4 <RCCEx_PLL2_Config>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800eeb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d003      	beq.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800eec4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed0:	2100      	movs	r1, #0
 800eed2:	6239      	str	r1, [r7, #32]
 800eed4:	f003 0302 	and.w	r3, r3, #2
 800eed8:	627b      	str	r3, [r7, #36]	; 0x24
 800eeda:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800eede:	460b      	mov	r3, r1
 800eee0:	4313      	orrs	r3, r2
 800eee2:	d011      	beq.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eee8:	3308      	adds	r3, #8
 800eeea:	2101      	movs	r1, #1
 800eeec:	4618      	mov	r0, r3
 800eeee:	f000 fb59 	bl	800f5a4 <RCCEx_PLL2_Config>
 800eef2:	4603      	mov	r3, r0
 800eef4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800eef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d003      	beq.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ef04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ef08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	2100      	movs	r1, #0
 800ef12:	61b9      	str	r1, [r7, #24]
 800ef14:	f003 0304 	and.w	r3, r3, #4
 800ef18:	61fb      	str	r3, [r7, #28]
 800ef1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4313      	orrs	r3, r2
 800ef22:	d011      	beq.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef28:	3308      	adds	r3, #8
 800ef2a:	2102      	movs	r1, #2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 fb39 	bl	800f5a4 <RCCEx_PLL2_Config>
 800ef32:	4603      	mov	r3, r0
 800ef34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ef38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d003      	beq.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ef44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ef48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	2100      	movs	r1, #0
 800ef52:	6139      	str	r1, [r7, #16]
 800ef54:	f003 0308 	and.w	r3, r3, #8
 800ef58:	617b      	str	r3, [r7, #20]
 800ef5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4313      	orrs	r3, r2
 800ef62:	d011      	beq.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ef64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef68:	3328      	adds	r3, #40	; 0x28
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 fbcb 	bl	800f708 <RCCEx_PLL3_Config>
 800ef72:	4603      	mov	r3, r0
 800ef74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800ef78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ef84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ef88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef90:	2100      	movs	r1, #0
 800ef92:	60b9      	str	r1, [r7, #8]
 800ef94:	f003 0310 	and.w	r3, r3, #16
 800ef98:	60fb      	str	r3, [r7, #12]
 800ef9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ef9e:	460b      	mov	r3, r1
 800efa0:	4313      	orrs	r3, r2
 800efa2:	d011      	beq.n	800efc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800efa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efa8:	3328      	adds	r3, #40	; 0x28
 800efaa:	2101      	movs	r1, #1
 800efac:	4618      	mov	r0, r3
 800efae:	f000 fbab 	bl	800f708 <RCCEx_PLL3_Config>
 800efb2:	4603      	mov	r3, r0
 800efb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800efb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d003      	beq.n	800efc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800efc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800efc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd0:	2100      	movs	r1, #0
 800efd2:	6039      	str	r1, [r7, #0]
 800efd4:	f003 0320 	and.w	r3, r3, #32
 800efd8:	607b      	str	r3, [r7, #4]
 800efda:	e9d7 1200 	ldrd	r1, r2, [r7]
 800efde:	460b      	mov	r3, r1
 800efe0:	4313      	orrs	r3, r2
 800efe2:	d011      	beq.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800efe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efe8:	3328      	adds	r3, #40	; 0x28
 800efea:	2102      	movs	r1, #2
 800efec:	4618      	mov	r0, r3
 800efee:	f000 fb8b 	bl	800f708 <RCCEx_PLL3_Config>
 800eff2:	4603      	mov	r3, r0
 800eff4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800eff8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800effc:	2b00      	cmp	r3, #0
 800effe:	d003      	beq.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800f004:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800f008:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d101      	bne.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800f010:	2300      	movs	r3, #0
 800f012:	e000      	b.n	800f016 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800f014:	2301      	movs	r3, #1
}
 800f016:	4618      	mov	r0, r3
 800f018:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f01c:	46bd      	mov	sp, r7
 800f01e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f022:	bf00      	nop
 800f024:	58024400 	.word	0x58024400

0800f028 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800f02c:	f7fe fde2 	bl	800dbf4 <HAL_RCC_GetHCLKFreq>
 800f030:	4602      	mov	r2, r0
 800f032:	4b06      	ldr	r3, [pc, #24]	; (800f04c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f034:	6a1b      	ldr	r3, [r3, #32]
 800f036:	091b      	lsrs	r3, r3, #4
 800f038:	f003 0307 	and.w	r3, r3, #7
 800f03c:	4904      	ldr	r1, [pc, #16]	; (800f050 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f03e:	5ccb      	ldrb	r3, [r1, r3]
 800f040:	f003 031f 	and.w	r3, r3, #31
 800f044:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800f048:	4618      	mov	r0, r3
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	58024400 	.word	0x58024400
 800f050:	0801f4c8 	.word	0x0801f4c8

0800f054 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f054:	b480      	push	{r7}
 800f056:	b089      	sub	sp, #36	; 0x24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f05c:	4ba1      	ldr	r3, [pc, #644]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f060:	f003 0303 	and.w	r3, r3, #3
 800f064:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f066:	4b9f      	ldr	r3, [pc, #636]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f06a:	0b1b      	lsrs	r3, r3, #12
 800f06c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f070:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f072:	4b9c      	ldr	r3, [pc, #624]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f076:	091b      	lsrs	r3, r3, #4
 800f078:	f003 0301 	and.w	r3, r3, #1
 800f07c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f07e:	4b99      	ldr	r3, [pc, #612]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f082:	08db      	lsrs	r3, r3, #3
 800f084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f088:	693a      	ldr	r2, [r7, #16]
 800f08a:	fb02 f303 	mul.w	r3, r2, r3
 800f08e:	ee07 3a90 	vmov	s15, r3
 800f092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f000 8111 	beq.w	800f2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	f000 8083 	beq.w	800f1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	f200 80a1 	bhi.w	800f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d003      	beq.n	800f0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d056      	beq.n	800f16c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f0be:	e099      	b.n	800f1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0c0:	4b88      	ldr	r3, [pc, #544]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f003 0320 	and.w	r3, r3, #32
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d02d      	beq.n	800f128 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0cc:	4b85      	ldr	r3, [pc, #532]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	08db      	lsrs	r3, r3, #3
 800f0d2:	f003 0303 	and.w	r3, r3, #3
 800f0d6:	4a84      	ldr	r2, [pc, #528]	; (800f2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f0d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f0dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	ee07 3a90 	vmov	s15, r3
 800f0e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	ee07 3a90 	vmov	s15, r3
 800f0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0f6:	4b7b      	ldr	r3, [pc, #492]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0fe:	ee07 3a90 	vmov	s15, r3
 800f102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f106:	ed97 6a03 	vldr	s12, [r7, #12]
 800f10a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f126:	e087      	b.n	800f238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	ee07 3a90 	vmov	s15, r3
 800f12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f132:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f13a:	4b6a      	ldr	r3, [pc, #424]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f142:	ee07 3a90 	vmov	s15, r3
 800f146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f14a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f14e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f15a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f16a:	e065      	b.n	800f238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	ee07 3a90 	vmov	s15, r3
 800f172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f176:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f17a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f17e:	4b59      	ldr	r3, [pc, #356]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f186:	ee07 3a90 	vmov	s15, r3
 800f18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f18e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f192:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f19a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f19e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1ae:	e043      	b.n	800f238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	ee07 3a90 	vmov	s15, r3
 800f1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f1be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1c2:	4b48      	ldr	r3, [pc, #288]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ca:	ee07 3a90 	vmov	s15, r3
 800f1ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f1da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1f2:	e021      	b.n	800f238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	ee07 3a90 	vmov	s15, r3
 800f1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f206:	4b37      	ldr	r3, [pc, #220]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f20e:	ee07 3a90 	vmov	s15, r3
 800f212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f216:	ed97 6a03 	vldr	s12, [r7, #12]
 800f21a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f21e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f236:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f238:	4b2a      	ldr	r3, [pc, #168]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23c:	0a5b      	lsrs	r3, r3, #9
 800f23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f242:	ee07 3a90 	vmov	s15, r3
 800f246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f24a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f24e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f252:	edd7 6a07 	vldr	s13, [r7, #28]
 800f256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f25e:	ee17 2a90 	vmov	r2, s15
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f266:	4b1f      	ldr	r3, [pc, #124]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f26a:	0c1b      	lsrs	r3, r3, #16
 800f26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f270:	ee07 3a90 	vmov	s15, r3
 800f274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f27c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f280:	edd7 6a07 	vldr	s13, [r7, #28]
 800f284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f28c:	ee17 2a90 	vmov	r2, s15
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f294:	4b13      	ldr	r3, [pc, #76]	; (800f2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f298:	0e1b      	lsrs	r3, r3, #24
 800f29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f29e:	ee07 3a90 	vmov	s15, r3
 800f2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2ba:	ee17 2a90 	vmov	r2, s15
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f2c2:	e008      	b.n	800f2d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	609a      	str	r2, [r3, #8]
}
 800f2d6:	bf00      	nop
 800f2d8:	3724      	adds	r7, #36	; 0x24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	58024400 	.word	0x58024400
 800f2e8:	03d09000 	.word	0x03d09000
 800f2ec:	46000000 	.word	0x46000000
 800f2f0:	4c742400 	.word	0x4c742400
 800f2f4:	4a742400 	.word	0x4a742400
 800f2f8:	4bb71b00 	.word	0x4bb71b00

0800f2fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b089      	sub	sp, #36	; 0x24
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f304:	4ba1      	ldr	r3, [pc, #644]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f308:	f003 0303 	and.w	r3, r3, #3
 800f30c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f30e:	4b9f      	ldr	r3, [pc, #636]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f312:	0d1b      	lsrs	r3, r3, #20
 800f314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f318:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f31a:	4b9c      	ldr	r3, [pc, #624]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31e:	0a1b      	lsrs	r3, r3, #8
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f326:	4b99      	ldr	r3, [pc, #612]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f32a:	08db      	lsrs	r3, r3, #3
 800f32c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f330:	693a      	ldr	r2, [r7, #16]
 800f332:	fb02 f303 	mul.w	r3, r2, r3
 800f336:	ee07 3a90 	vmov	s15, r3
 800f33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f33e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	2b00      	cmp	r3, #0
 800f346:	f000 8111 	beq.w	800f56c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	f000 8083 	beq.w	800f458 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	2b02      	cmp	r3, #2
 800f356:	f200 80a1 	bhi.w	800f49c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d056      	beq.n	800f414 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f366:	e099      	b.n	800f49c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f368:	4b88      	ldr	r3, [pc, #544]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f003 0320 	and.w	r3, r3, #32
 800f370:	2b00      	cmp	r3, #0
 800f372:	d02d      	beq.n	800f3d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f374:	4b85      	ldr	r3, [pc, #532]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	08db      	lsrs	r3, r3, #3
 800f37a:	f003 0303 	and.w	r3, r3, #3
 800f37e:	4a84      	ldr	r2, [pc, #528]	; (800f590 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f380:	fa22 f303 	lsr.w	r3, r2, r3
 800f384:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	ee07 3a90 	vmov	s15, r3
 800f38c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	ee07 3a90 	vmov	s15, r3
 800f396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f39e:	4b7b      	ldr	r3, [pc, #492]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3a6:	ee07 3a90 	vmov	s15, r3
 800f3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f3ce:	e087      	b.n	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	ee07 3a90 	vmov	s15, r3
 800f3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f598 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3e2:	4b6a      	ldr	r3, [pc, #424]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ea:	ee07 3a90 	vmov	s15, r3
 800f3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f40e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f412:	e065      	b.n	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	ee07 3a90 	vmov	s15, r3
 800f41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f41e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f59c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f426:	4b59      	ldr	r3, [pc, #356]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f42e:	ee07 3a90 	vmov	s15, r3
 800f432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f436:	ed97 6a03 	vldr	s12, [r7, #12]
 800f43a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f456:	e043      	b.n	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	ee07 3a90 	vmov	s15, r3
 800f45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f462:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f46a:	4b48      	ldr	r3, [pc, #288]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f472:	ee07 3a90 	vmov	s15, r3
 800f476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f47a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f47e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f49a:	e021      	b.n	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	ee07 3a90 	vmov	s15, r3
 800f4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f59c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4ae:	4b37      	ldr	r3, [pc, #220]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4b6:	ee07 3a90 	vmov	s15, r3
 800f4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4be:	ed97 6a03 	vldr	s12, [r7, #12]
 800f4c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f4de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f4e0:	4b2a      	ldr	r3, [pc, #168]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e4:	0a5b      	lsrs	r3, r3, #9
 800f4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ea:	ee07 3a90 	vmov	s15, r3
 800f4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f4f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f506:	ee17 2a90 	vmov	r2, s15
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f50e:	4b1f      	ldr	r3, [pc, #124]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f512:	0c1b      	lsrs	r3, r3, #16
 800f514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f518:	ee07 3a90 	vmov	s15, r3
 800f51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f524:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f528:	edd7 6a07 	vldr	s13, [r7, #28]
 800f52c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f534:	ee17 2a90 	vmov	r2, s15
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f53c:	4b13      	ldr	r3, [pc, #76]	; (800f58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f540:	0e1b      	lsrs	r3, r3, #24
 800f542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f546:	ee07 3a90 	vmov	s15, r3
 800f54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f54e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f552:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f556:	edd7 6a07 	vldr	s13, [r7, #28]
 800f55a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f55e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f562:	ee17 2a90 	vmov	r2, s15
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f56a:	e008      	b.n	800f57e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	609a      	str	r2, [r3, #8]
}
 800f57e:	bf00      	nop
 800f580:	3724      	adds	r7, #36	; 0x24
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	58024400 	.word	0x58024400
 800f590:	03d09000 	.word	0x03d09000
 800f594:	46000000 	.word	0x46000000
 800f598:	4c742400 	.word	0x4c742400
 800f59c:	4a742400 	.word	0x4a742400
 800f5a0:	4bb71b00 	.word	0x4bb71b00

0800f5a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f5b2:	4b53      	ldr	r3, [pc, #332]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b6:	f003 0303 	and.w	r3, r3, #3
 800f5ba:	2b03      	cmp	r3, #3
 800f5bc:	d101      	bne.n	800f5c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e099      	b.n	800f6f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f5c2:	4b4f      	ldr	r3, [pc, #316]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a4e      	ldr	r2, [pc, #312]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f5c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f5cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f5ce:	f7f7 f9ab 	bl	8006928 <HAL_GetTick>
 800f5d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f5d4:	e008      	b.n	800f5e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f5d6:	f7f7 f9a7 	bl	8006928 <HAL_GetTick>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	1ad3      	subs	r3, r2, r3
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	d901      	bls.n	800f5e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f5e4:	2303      	movs	r3, #3
 800f5e6:	e086      	b.n	800f6f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f5e8:	4b45      	ldr	r3, [pc, #276]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1f0      	bne.n	800f5d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f5f4:	4b42      	ldr	r3, [pc, #264]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	031b      	lsls	r3, r3, #12
 800f602:	493f      	ldr	r1, [pc, #252]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f604:	4313      	orrs	r3, r2
 800f606:	628b      	str	r3, [r1, #40]	; 0x28
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	689b      	ldr	r3, [r3, #8]
 800f616:	3b01      	subs	r3, #1
 800f618:	025b      	lsls	r3, r3, #9
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	431a      	orrs	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	3b01      	subs	r3, #1
 800f624:	041b      	lsls	r3, r3, #16
 800f626:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f62a:	431a      	orrs	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	3b01      	subs	r3, #1
 800f632:	061b      	lsls	r3, r3, #24
 800f634:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f638:	4931      	ldr	r1, [pc, #196]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f63a:	4313      	orrs	r3, r2
 800f63c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f63e:	4b30      	ldr	r3, [pc, #192]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	695b      	ldr	r3, [r3, #20]
 800f64a:	492d      	ldr	r1, [pc, #180]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f64c:	4313      	orrs	r3, r2
 800f64e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f650:	4b2b      	ldr	r3, [pc, #172]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f654:	f023 0220 	bic.w	r2, r3, #32
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	699b      	ldr	r3, [r3, #24]
 800f65c:	4928      	ldr	r1, [pc, #160]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f65e:	4313      	orrs	r3, r2
 800f660:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f662:	4b27      	ldr	r3, [pc, #156]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f666:	4a26      	ldr	r2, [pc, #152]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f668:	f023 0310 	bic.w	r3, r3, #16
 800f66c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f66e:	4b24      	ldr	r3, [pc, #144]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f672:	4b24      	ldr	r3, [pc, #144]	; (800f704 <RCCEx_PLL2_Config+0x160>)
 800f674:	4013      	ands	r3, r2
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	69d2      	ldr	r2, [r2, #28]
 800f67a:	00d2      	lsls	r2, r2, #3
 800f67c:	4920      	ldr	r1, [pc, #128]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f67e:	4313      	orrs	r3, r2
 800f680:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f682:	4b1f      	ldr	r3, [pc, #124]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f686:	4a1e      	ldr	r2, [pc, #120]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f688:	f043 0310 	orr.w	r3, r3, #16
 800f68c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d106      	bne.n	800f6a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f694:	4b1a      	ldr	r3, [pc, #104]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f698:	4a19      	ldr	r2, [pc, #100]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f69a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f69e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f6a0:	e00f      	b.n	800f6c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d106      	bne.n	800f6b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f6a8:	4b15      	ldr	r3, [pc, #84]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ac:	4a14      	ldr	r2, [pc, #80]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f6ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f6b4:	e005      	b.n	800f6c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f6b6:	4b12      	ldr	r3, [pc, #72]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ba:	4a11      	ldr	r2, [pc, #68]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f6bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f6c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f6c2:	4b0f      	ldr	r3, [pc, #60]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a0e      	ldr	r2, [pc, #56]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f6c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f6cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6ce:	f7f7 f92b 	bl	8006928 <HAL_GetTick>
 800f6d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f6d4:	e008      	b.n	800f6e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f6d6:	f7f7 f927 	bl	8006928 <HAL_GetTick>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d901      	bls.n	800f6e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f6e4:	2303      	movs	r3, #3
 800f6e6:	e006      	b.n	800f6f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <RCCEx_PLL2_Config+0x15c>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d0f0      	beq.n	800f6d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	58024400 	.word	0x58024400
 800f704:	ffff0007 	.word	0xffff0007

0800f708 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f712:	2300      	movs	r3, #0
 800f714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f716:	4b53      	ldr	r3, [pc, #332]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f71a:	f003 0303 	and.w	r3, r3, #3
 800f71e:	2b03      	cmp	r3, #3
 800f720:	d101      	bne.n	800f726 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f722:	2301      	movs	r3, #1
 800f724:	e099      	b.n	800f85a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f726:	4b4f      	ldr	r3, [pc, #316]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a4e      	ldr	r2, [pc, #312]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f72c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f732:	f7f7 f8f9 	bl	8006928 <HAL_GetTick>
 800f736:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f738:	e008      	b.n	800f74c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f73a:	f7f7 f8f5 	bl	8006928 <HAL_GetTick>
 800f73e:	4602      	mov	r2, r0
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	2b02      	cmp	r3, #2
 800f746:	d901      	bls.n	800f74c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f748:	2303      	movs	r3, #3
 800f74a:	e086      	b.n	800f85a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f74c:	4b45      	ldr	r3, [pc, #276]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1f0      	bne.n	800f73a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f758:	4b42      	ldr	r3, [pc, #264]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f75c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	051b      	lsls	r3, r3, #20
 800f766:	493f      	ldr	r1, [pc, #252]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f768:	4313      	orrs	r3, r2
 800f76a:	628b      	str	r3, [r1, #40]	; 0x28
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	3b01      	subs	r3, #1
 800f772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	3b01      	subs	r3, #1
 800f77c:	025b      	lsls	r3, r3, #9
 800f77e:	b29b      	uxth	r3, r3
 800f780:	431a      	orrs	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	3b01      	subs	r3, #1
 800f788:	041b      	lsls	r3, r3, #16
 800f78a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f78e:	431a      	orrs	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	691b      	ldr	r3, [r3, #16]
 800f794:	3b01      	subs	r3, #1
 800f796:	061b      	lsls	r3, r3, #24
 800f798:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f79c:	4931      	ldr	r1, [pc, #196]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f7a2:	4b30      	ldr	r3, [pc, #192]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	695b      	ldr	r3, [r3, #20]
 800f7ae:	492d      	ldr	r1, [pc, #180]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f7b4:	4b2b      	ldr	r3, [pc, #172]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	4928      	ldr	r1, [pc, #160]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f7c6:	4b27      	ldr	r3, [pc, #156]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ca:	4a26      	ldr	r2, [pc, #152]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f7d2:	4b24      	ldr	r3, [pc, #144]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7d6:	4b24      	ldr	r3, [pc, #144]	; (800f868 <RCCEx_PLL3_Config+0x160>)
 800f7d8:	4013      	ands	r3, r2
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	69d2      	ldr	r2, [r2, #28]
 800f7de:	00d2      	lsls	r2, r2, #3
 800f7e0:	4920      	ldr	r1, [pc, #128]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f7e6:	4b1f      	ldr	r3, [pc, #124]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ea:	4a1e      	ldr	r2, [pc, #120]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d106      	bne.n	800f806 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f7f8:	4b1a      	ldr	r3, [pc, #104]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fc:	4a19      	ldr	r2, [pc, #100]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f7fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f802:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f804:	e00f      	b.n	800f826 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d106      	bne.n	800f81a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f80c:	4b15      	ldr	r3, [pc, #84]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f810:	4a14      	ldr	r2, [pc, #80]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f812:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f816:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f818:	e005      	b.n	800f826 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f81a:	4b12      	ldr	r3, [pc, #72]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81e:	4a11      	ldr	r2, [pc, #68]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f824:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f826:	4b0f      	ldr	r3, [pc, #60]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4a0e      	ldr	r2, [pc, #56]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f832:	f7f7 f879 	bl	8006928 <HAL_GetTick>
 800f836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f838:	e008      	b.n	800f84c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f83a:	f7f7 f875 	bl	8006928 <HAL_GetTick>
 800f83e:	4602      	mov	r2, r0
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	2b02      	cmp	r3, #2
 800f846:	d901      	bls.n	800f84c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f848:	2303      	movs	r3, #3
 800f84a:	e006      	b.n	800f85a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f84c:	4b05      	ldr	r3, [pc, #20]	; (800f864 <RCCEx_PLL3_Config+0x15c>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f854:	2b00      	cmp	r3, #0
 800f856:	d0f0      	beq.n	800f83a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f858:	7bfb      	ldrb	r3, [r7, #15]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	58024400 	.word	0x58024400
 800f868:	ffff0007 	.word	0xffff0007

0800f86c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f874:	2301      	movs	r3, #1
 800f876:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d074      	beq.n	800f968 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d106      	bne.n	800f898 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7f5 ff50 	bl	8005738 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2202      	movs	r2, #2
 800f89c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	f003 0310 	and.w	r3, r3, #16
 800f8aa:	2b10      	cmp	r3, #16
 800f8ac:	d053      	beq.n	800f956 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	22ca      	movs	r2, #202	; 0xca
 800f8b4:	625a      	str	r2, [r3, #36]	; 0x24
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2253      	movs	r2, #83	; 0x53
 800f8bc:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f87e 	bl	800f9c0 <RTC_EnterInitMode>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800f8c8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d124      	bne.n	800f918 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	6999      	ldr	r1, [r3, #24]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	4b26      	ldr	r3, [pc, #152]	; (800f974 <HAL_RTC_Init+0x108>)
 800f8da:	400b      	ands	r3, r1
 800f8dc:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6999      	ldr	r1, [r3, #24]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	691b      	ldr	r3, [r3, #16]
 800f8ec:	431a      	orrs	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	431a      	orrs	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	430a      	orrs	r2, r1
 800f8fa:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	0419      	lsls	r1, r3, #16
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	68da      	ldr	r2, [r3, #12]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	430a      	orrs	r2, r1
 800f90c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f88c 	bl	800fa2c <RTC_ExitInitMode>
 800f914:	4603      	mov	r3, r0
 800f916:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800f918:	7bfb      	ldrb	r3, [r7, #15]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d116      	bne.n	800f94c <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	699a      	ldr	r2, [r3, #24]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800f92c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	6999      	ldr	r1, [r3, #24]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6a1a      	ldr	r2, [r3, #32]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	69db      	ldr	r3, [r3, #28]
 800f93c:	431a      	orrs	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	695b      	ldr	r3, [r3, #20]
 800f942:	431a      	orrs	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	430a      	orrs	r2, r1
 800f94a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	22ff      	movs	r2, #255	; 0xff
 800f952:	625a      	str	r2, [r3, #36]	; 0x24
 800f954:	e001      	b.n	800f95a <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800f956:	2300      	movs	r3, #0
 800f958:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d103      	bne.n	800f968 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2201      	movs	r2, #1
 800f964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800f968:	7bfb      	ldrb	r3, [r7, #15]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	fb8fffbf 	.word	0xfb8fffbf

0800f978 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a0d      	ldr	r2, [pc, #52]	; (800f9bc <HAL_RTC_WaitForSynchro+0x44>)
 800f986:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800f988:	f7f6 ffce 	bl	8006928 <HAL_GetTick>
 800f98c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800f98e:	e009      	b.n	800f9a4 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f990:	f7f6 ffca 	bl	8006928 <HAL_GetTick>
 800f994:	4602      	mov	r2, r0
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	1ad3      	subs	r3, r2, r3
 800f99a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f99e:	d901      	bls.n	800f9a4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	e007      	b.n	800f9b4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	f003 0320 	and.w	r3, r3, #32
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d0ee      	beq.n	800f990 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	0001005f 	.word	0x0001005f

0800f9c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d123      	bne.n	800fa22 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	68da      	ldr	r2, [r3, #12]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f9e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f9ea:	f7f6 ff9d 	bl	8006928 <HAL_GetTick>
 800f9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f9f0:	e00d      	b.n	800fa0e <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f9f2:	f7f6 ff99 	bl	8006928 <HAL_GetTick>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa00:	d905      	bls.n	800fa0e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800fa02:	2303      	movs	r3, #3
 800fa04:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2203      	movs	r2, #3
 800fa0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d102      	bne.n	800fa22 <RTC_EnterInitMode+0x62>
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
 800fa1e:	2b03      	cmp	r3, #3
 800fa20:	d1e7      	bne.n	800f9f2 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800fa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3710      	adds	r7, #16
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa34:	2300      	movs	r3, #0
 800fa36:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800fa38:	4b1a      	ldr	r3, [pc, #104]	; (800faa4 <RTC_ExitInitMode+0x78>)
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	4a19      	ldr	r2, [pc, #100]	; (800faa4 <RTC_ExitInitMode+0x78>)
 800fa3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa42:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800fa44:	4b17      	ldr	r3, [pc, #92]	; (800faa4 <RTC_ExitInitMode+0x78>)
 800fa46:	699b      	ldr	r3, [r3, #24]
 800fa48:	f003 0320 	and.w	r3, r3, #32
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d10c      	bne.n	800fa6a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff ff91 	bl	800f978 <HAL_RTC_WaitForSynchro>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d01e      	beq.n	800fa9a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2203      	movs	r2, #3
 800fa60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800fa64:	2303      	movs	r3, #3
 800fa66:	73fb      	strb	r3, [r7, #15]
 800fa68:	e017      	b.n	800fa9a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fa6a:	4b0e      	ldr	r3, [pc, #56]	; (800faa4 <RTC_ExitInitMode+0x78>)
 800fa6c:	699b      	ldr	r3, [r3, #24]
 800fa6e:	4a0d      	ldr	r2, [pc, #52]	; (800faa4 <RTC_ExitInitMode+0x78>)
 800fa70:	f023 0320 	bic.w	r3, r3, #32
 800fa74:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff ff7e 	bl	800f978 <HAL_RTC_WaitForSynchro>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d005      	beq.n	800fa8e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2203      	movs	r2, #3
 800fa86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800fa8a:	2303      	movs	r3, #3
 800fa8c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fa8e:	4b05      	ldr	r3, [pc, #20]	; (800faa4 <RTC_ExitInitMode+0x78>)
 800fa90:	699b      	ldr	r3, [r3, #24]
 800fa92:	4a04      	ldr	r2, [pc, #16]	; (800faa4 <RTC_ExitInitMode+0x78>)
 800fa94:	f043 0320 	orr.w	r3, r3, #32
 800fa98:	6193      	str	r3, [r2, #24]
  }

  return status;
 800fa9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	58004000 	.word	0x58004000

0800faa8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800fab8:	2301      	movs	r3, #1
 800faba:	e02b      	b.n	800fb14 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d106      	bne.n	800fad6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7f1 fa41 	bl	8000f58 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2202      	movs	r2, #2
 800fada:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3304      	adds	r3, #4
 800fae6:	4619      	mov	r1, r3
 800fae8:	4610      	mov	r0, r2
 800faea:	f001 ffdf 	bl	8011aac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6818      	ldr	r0, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	461a      	mov	r2, r3
 800faf8:	6839      	ldr	r1, [r7, #0]
 800fafa:	f002 f833 	bl	8011b64 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800fafe:	4b07      	ldr	r3, [pc, #28]	; (800fb1c <HAL_SDRAM_Init+0x74>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a06      	ldr	r2, [pc, #24]	; (800fb1c <HAL_SDRAM_Init+0x74>)
 800fb04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb08:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	52004000 	.word	0x52004000

0800fb20 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fb32:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800fb34:	7dfb      	ldrb	r3, [r7, #23]
 800fb36:	2b02      	cmp	r3, #2
 800fb38:	d101      	bne.n	800fb3e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800fb3a:	2302      	movs	r3, #2
 800fb3c:	e021      	b.n	800fb82 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800fb3e:	7dfb      	ldrb	r3, [r7, #23]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d002      	beq.n	800fb4a <HAL_SDRAM_SendCommand+0x2a>
 800fb44:	7dfb      	ldrb	r3, [r7, #23]
 800fb46:	2b05      	cmp	r3, #5
 800fb48:	d118      	bne.n	800fb7c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2202      	movs	r2, #2
 800fb4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	68b9      	ldr	r1, [r7, #8]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f002 f86c 	bl	8011c38 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b02      	cmp	r3, #2
 800fb66:	d104      	bne.n	800fb72 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2205      	movs	r2, #5
 800fb6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800fb70:	e006      	b.n	800fb80 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2201      	movs	r2, #1
 800fb76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800fb7a:	e001      	b.n	800fb80 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e000      	b.n	800fb82 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3718      	adds	r7, #24
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d101      	bne.n	800fba4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800fba0:	2302      	movs	r3, #2
 800fba2:	e016      	b.n	800fbd2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d10f      	bne.n	800fbd0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f002 f85e 	bl	8011c80 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	e000      	b.n	800fbd2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800fbd0:	2301      	movs	r3, #1
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d101      	bne.n	800fbec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e042      	b.n	800fc72 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d106      	bne.n	800fc04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7f6 fd70 	bl	80066e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2224      	movs	r2, #36	; 0x24
 800fc08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f022 0201 	bic.w	r2, r2, #1
 800fc1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 fd5d 	bl	80106dc <UART_SetConfig>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d101      	bne.n	800fc2c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fc28:	2301      	movs	r3, #1
 800fc2a:	e022      	b.n	800fc72 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f001 fbbd 	bl	80113b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	685a      	ldr	r2, [r3, #4]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	689a      	ldr	r2, [r3, #8]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fc58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f042 0201 	orr.w	r2, r2, #1
 800fc68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f001 fc44 	bl	80114f8 <UART_CheckIdleState>
 800fc70:	4603      	mov	r3, r0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3708      	adds	r7, #8
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b08a      	sub	sp, #40	; 0x28
 800fc7e:	af02      	add	r7, sp, #8
 800fc80:	60f8      	str	r0, [r7, #12]
 800fc82:	60b9      	str	r1, [r7, #8]
 800fc84:	603b      	str	r3, [r7, #0]
 800fc86:	4613      	mov	r3, r2
 800fc88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc90:	2b20      	cmp	r3, #32
 800fc92:	d17b      	bne.n	800fd8c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d002      	beq.n	800fca0 <HAL_UART_Transmit+0x26>
 800fc9a:	88fb      	ldrh	r3, [r7, #6]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d101      	bne.n	800fca4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fca0:	2301      	movs	r3, #1
 800fca2:	e074      	b.n	800fd8e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2221      	movs	r2, #33	; 0x21
 800fcb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fcb4:	f7f6 fe38 	bl	8006928 <HAL_GetTick>
 800fcb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	88fa      	ldrh	r2, [r7, #6]
 800fcbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	88fa      	ldrh	r2, [r7, #6]
 800fcc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	689b      	ldr	r3, [r3, #8]
 800fcce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcd2:	d108      	bne.n	800fce6 <HAL_UART_Transmit+0x6c>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	691b      	ldr	r3, [r3, #16]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d104      	bne.n	800fce6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	61bb      	str	r3, [r7, #24]
 800fce4:	e003      	b.n	800fcee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fcea:	2300      	movs	r3, #0
 800fcec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fcee:	e030      	b.n	800fd52 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	9300      	str	r3, [sp, #0]
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	2180      	movs	r1, #128	; 0x80
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f001 fca6 	bl	801164c <UART_WaitOnFlagUntilTimeout>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d005      	beq.n	800fd12 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	2220      	movs	r2, #32
 800fd0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fd0e:	2303      	movs	r3, #3
 800fd10:	e03d      	b.n	800fd8e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10b      	bne.n	800fd30 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	881b      	ldrh	r3, [r3, #0]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	3302      	adds	r3, #2
 800fd2c:	61bb      	str	r3, [r7, #24]
 800fd2e:	e007      	b.n	800fd40 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	781a      	ldrb	r2, [r3, #0]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d1c8      	bne.n	800fcf0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	2200      	movs	r2, #0
 800fd66:	2140      	movs	r1, #64	; 0x40
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f001 fc6f 	bl	801164c <UART_WaitOnFlagUntilTimeout>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d005      	beq.n	800fd80 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2220      	movs	r2, #32
 800fd78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fd7c:	2303      	movs	r3, #3
 800fd7e:	e006      	b.n	800fd8e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2220      	movs	r2, #32
 800fd84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	e000      	b.n	800fd8e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fd8c:	2302      	movs	r3, #2
  }
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3720      	adds	r7, #32
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b08a      	sub	sp, #40	; 0x28
 800fd9a:	af02      	add	r7, sp, #8
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	60b9      	str	r1, [r7, #8]
 800fda0:	603b      	str	r3, [r7, #0]
 800fda2:	4613      	mov	r3, r2
 800fda4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdac:	2b20      	cmp	r3, #32
 800fdae:	f040 80b5 	bne.w	800ff1c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <HAL_UART_Receive+0x28>
 800fdb8:	88fb      	ldrh	r3, [r7, #6]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d101      	bne.n	800fdc2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e0ad      	b.n	800ff1e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2222      	movs	r2, #34	; 0x22
 800fdce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fdd8:	f7f6 fda6 	bl	8006928 <HAL_GetTick>
 800fddc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	88fa      	ldrh	r2, [r7, #6]
 800fde2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	88fa      	ldrh	r2, [r7, #6]
 800fdea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	689b      	ldr	r3, [r3, #8]
 800fdf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdf6:	d10e      	bne.n	800fe16 <HAL_UART_Receive+0x80>
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d105      	bne.n	800fe0c <HAL_UART_Receive+0x76>
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fe06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe0a:	e02d      	b.n	800fe68 <HAL_UART_Receive+0xd2>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	22ff      	movs	r2, #255	; 0xff
 800fe10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe14:	e028      	b.n	800fe68 <HAL_UART_Receive+0xd2>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d10d      	bne.n	800fe3a <HAL_UART_Receive+0xa4>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	691b      	ldr	r3, [r3, #16]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d104      	bne.n	800fe30 <HAL_UART_Receive+0x9a>
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	22ff      	movs	r2, #255	; 0xff
 800fe2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe2e:	e01b      	b.n	800fe68 <HAL_UART_Receive+0xd2>
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	227f      	movs	r2, #127	; 0x7f
 800fe34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe38:	e016      	b.n	800fe68 <HAL_UART_Receive+0xd2>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe42:	d10d      	bne.n	800fe60 <HAL_UART_Receive+0xca>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d104      	bne.n	800fe56 <HAL_UART_Receive+0xc0>
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	227f      	movs	r2, #127	; 0x7f
 800fe50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe54:	e008      	b.n	800fe68 <HAL_UART_Receive+0xd2>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	223f      	movs	r2, #63	; 0x3f
 800fe5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe5e:	e003      	b.n	800fe68 <HAL_UART_Receive+0xd2>
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe6e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe78:	d108      	bne.n	800fe8c <HAL_UART_Receive+0xf6>
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d104      	bne.n	800fe8c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fe82:	2300      	movs	r3, #0
 800fe84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	61bb      	str	r3, [r7, #24]
 800fe8a:	e003      	b.n	800fe94 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe90:	2300      	movs	r3, #0
 800fe92:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fe94:	e036      	b.n	800ff04 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	2120      	movs	r1, #32
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f001 fbd3 	bl	801164c <UART_WaitOnFlagUntilTimeout>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d005      	beq.n	800feb8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2220      	movs	r2, #32
 800feb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800feb4:	2303      	movs	r3, #3
 800feb6:	e032      	b.n	800ff1e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d10c      	bne.n	800fed8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	8a7b      	ldrh	r3, [r7, #18]
 800fec8:	4013      	ands	r3, r2
 800feca:	b29a      	uxth	r2, r3
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	3302      	adds	r3, #2
 800fed4:	61bb      	str	r3, [r7, #24]
 800fed6:	e00c      	b.n	800fef2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fede:	b2da      	uxtb	r2, r3
 800fee0:	8a7b      	ldrh	r3, [r7, #18]
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	4013      	ands	r3, r2
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	3301      	adds	r3, #1
 800fef0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	3b01      	subs	r3, #1
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1c2      	bne.n	800fe96 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2220      	movs	r2, #32
 800ff14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	e000      	b.n	800ff1e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800ff1c:	2302      	movs	r3, #2
  }
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
	...

0800ff28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b0ba      	sub	sp, #232	; 0xe8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	69db      	ldr	r3, [r3, #28]
 800ff36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ff52:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff56:	4013      	ands	r3, r2
 800ff58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ff5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d11b      	bne.n	800ff9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff68:	f003 0320 	and.w	r3, r3, #32
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d015      	beq.n	800ff9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff74:	f003 0320 	and.w	r3, r3, #32
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d105      	bne.n	800ff88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d009      	beq.n	800ff9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	f000 8377 	beq.w	8010680 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	4798      	blx	r3
      }
      return;
 800ff9a:	e371      	b.n	8010680 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ff9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 8123 	beq.w	80101ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ffa6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ffaa:	4b8d      	ldr	r3, [pc, #564]	; (80101e0 <HAL_UART_IRQHandler+0x2b8>)
 800ffac:	4013      	ands	r3, r2
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d106      	bne.n	800ffc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ffb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ffb6:	4b8b      	ldr	r3, [pc, #556]	; (80101e4 <HAL_UART_IRQHandler+0x2bc>)
 800ffb8:	4013      	ands	r3, r2
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f000 8116 	beq.w	80101ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffc4:	f003 0301 	and.w	r3, r3, #1
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d011      	beq.n	800fff0 <HAL_UART_IRQHandler+0xc8>
 800ffcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00b      	beq.n	800fff0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2201      	movs	r2, #1
 800ffde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffe6:	f043 0201 	orr.w	r2, r3, #1
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fff4:	f003 0302 	and.w	r3, r3, #2
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d011      	beq.n	8010020 <HAL_UART_IRQHandler+0xf8>
 800fffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00b      	beq.n	8010020 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2202      	movs	r2, #2
 801000e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010016:	f043 0204 	orr.w	r2, r3, #4
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010024:	f003 0304 	and.w	r3, r3, #4
 8010028:	2b00      	cmp	r3, #0
 801002a:	d011      	beq.n	8010050 <HAL_UART_IRQHandler+0x128>
 801002c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010030:	f003 0301 	and.w	r3, r3, #1
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00b      	beq.n	8010050 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2204      	movs	r2, #4
 801003e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010046:	f043 0202 	orr.w	r2, r3, #2
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010054:	f003 0308 	and.w	r3, r3, #8
 8010058:	2b00      	cmp	r3, #0
 801005a:	d017      	beq.n	801008c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801005c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010060:	f003 0320 	and.w	r3, r3, #32
 8010064:	2b00      	cmp	r3, #0
 8010066:	d105      	bne.n	8010074 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010068:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801006c:	4b5c      	ldr	r3, [pc, #368]	; (80101e0 <HAL_UART_IRQHandler+0x2b8>)
 801006e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00b      	beq.n	801008c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2208      	movs	r2, #8
 801007a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010082:	f043 0208 	orr.w	r2, r3, #8
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801008c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010094:	2b00      	cmp	r3, #0
 8010096:	d012      	beq.n	80100be <HAL_UART_IRQHandler+0x196>
 8010098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801009c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00c      	beq.n	80100be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100b4:	f043 0220 	orr.w	r2, r3, #32
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	f000 82dd 	beq.w	8010684 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100ce:	f003 0320 	and.w	r3, r3, #32
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d013      	beq.n	80100fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100da:	f003 0320 	and.w	r3, r3, #32
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d105      	bne.n	80100ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80100e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d007      	beq.n	80100fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d003      	beq.n	80100fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010112:	2b40      	cmp	r3, #64	; 0x40
 8010114:	d005      	beq.n	8010122 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801011a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801011e:	2b00      	cmp	r3, #0
 8010120:	d054      	beq.n	80101cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f001 fafa 	bl	801171c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010132:	2b40      	cmp	r3, #64	; 0x40
 8010134:	d146      	bne.n	80101c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	3308      	adds	r3, #8
 801013c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010144:	e853 3f00 	ldrex	r3, [r3]
 8010148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801014c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3308      	adds	r3, #8
 801015e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010162:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801016e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010172:	e841 2300 	strex	r3, r2, [r1]
 8010176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801017a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1d9      	bne.n	8010136 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010188:	2b00      	cmp	r3, #0
 801018a:	d017      	beq.n	80101bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010192:	4a15      	ldr	r2, [pc, #84]	; (80101e8 <HAL_UART_IRQHandler+0x2c0>)
 8010194:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801019c:	4618      	mov	r0, r3
 801019e:	f7f8 f9db 	bl	8008558 <HAL_DMA_Abort_IT>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d019      	beq.n	80101dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80101b6:	4610      	mov	r0, r2
 80101b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ba:	e00f      	b.n	80101dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 fa77 	bl	80106b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101c2:	e00b      	b.n	80101dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 fa73 	bl	80106b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ca:	e007      	b.n	80101dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 fa6f 	bl	80106b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80101da:	e253      	b.n	8010684 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101dc:	bf00      	nop
    return;
 80101de:	e251      	b.n	8010684 <HAL_UART_IRQHandler+0x75c>
 80101e0:	10000001 	.word	0x10000001
 80101e4:	04000120 	.word	0x04000120
 80101e8:	080117e9 	.word	0x080117e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	f040 81e7 	bne.w	80105c4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80101f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101fa:	f003 0310 	and.w	r3, r3, #16
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f000 81e0 	beq.w	80105c4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010208:	f003 0310 	and.w	r3, r3, #16
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 81d9 	beq.w	80105c4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2210      	movs	r2, #16
 8010218:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010224:	2b40      	cmp	r3, #64	; 0x40
 8010226:	f040 8151 	bne.w	80104cc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	4a96      	ldr	r2, [pc, #600]	; (801048c <HAL_UART_IRQHandler+0x564>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d068      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a93      	ldr	r2, [pc, #588]	; (8010490 <HAL_UART_IRQHandler+0x568>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d061      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	4a91      	ldr	r2, [pc, #580]	; (8010494 <HAL_UART_IRQHandler+0x56c>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d05a      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a8e      	ldr	r2, [pc, #568]	; (8010498 <HAL_UART_IRQHandler+0x570>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d053      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a8c      	ldr	r2, [pc, #560]	; (801049c <HAL_UART_IRQHandler+0x574>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d04c      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4a89      	ldr	r2, [pc, #548]	; (80104a0 <HAL_UART_IRQHandler+0x578>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d045      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a87      	ldr	r2, [pc, #540]	; (80104a4 <HAL_UART_IRQHandler+0x57c>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d03e      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a84      	ldr	r2, [pc, #528]	; (80104a8 <HAL_UART_IRQHandler+0x580>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d037      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4a82      	ldr	r2, [pc, #520]	; (80104ac <HAL_UART_IRQHandler+0x584>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d030      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a7f      	ldr	r2, [pc, #508]	; (80104b0 <HAL_UART_IRQHandler+0x588>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d029      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a7d      	ldr	r2, [pc, #500]	; (80104b4 <HAL_UART_IRQHandler+0x58c>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d022      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a7a      	ldr	r2, [pc, #488]	; (80104b8 <HAL_UART_IRQHandler+0x590>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d01b      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a78      	ldr	r2, [pc, #480]	; (80104bc <HAL_UART_IRQHandler+0x594>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d014      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4a75      	ldr	r2, [pc, #468]	; (80104c0 <HAL_UART_IRQHandler+0x598>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d00d      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a73      	ldr	r2, [pc, #460]	; (80104c4 <HAL_UART_IRQHandler+0x59c>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d006      	beq.n	801030a <HAL_UART_IRQHandler+0x3e2>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a70      	ldr	r2, [pc, #448]	; (80104c8 <HAL_UART_IRQHandler+0x5a0>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d106      	bne.n	8010318 <HAL_UART_IRQHandler+0x3f0>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	b29b      	uxth	r3, r3
 8010316:	e005      	b.n	8010324 <HAL_UART_IRQHandler+0x3fc>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	b29b      	uxth	r3, r3
 8010324:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010328:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801032c:	2b00      	cmp	r3, #0
 801032e:	f000 81ab 	beq.w	8010688 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801033c:	429a      	cmp	r2, r3
 801033e:	f080 81a3 	bcs.w	8010688 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010352:	69db      	ldr	r3, [r3, #28]
 8010354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010358:	f000 8087 	beq.w	801046a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010368:	e853 3f00 	ldrex	r3, [r3]
 801036c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	461a      	mov	r2, r3
 8010382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801038a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801038e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010396:	e841 2300 	strex	r3, r2, [r1]
 801039a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801039e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d1da      	bne.n	801035c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3308      	adds	r3, #8
 80103ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103b0:	e853 3f00 	ldrex	r3, [r3]
 80103b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80103b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103b8:	f023 0301 	bic.w	r3, r3, #1
 80103bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3308      	adds	r3, #8
 80103c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80103ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80103ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80103d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80103d6:	e841 2300 	strex	r3, r2, [r1]
 80103da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80103dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1e1      	bne.n	80103a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3308      	adds	r3, #8
 80103e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ec:	e853 3f00 	ldrex	r3, [r3]
 80103f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80103f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	3308      	adds	r3, #8
 8010402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801040c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801040e:	e841 2300 	strex	r3, r2, [r1]
 8010412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1e3      	bne.n	80103e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2220      	movs	r2, #32
 801041e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010430:	e853 3f00 	ldrex	r3, [r3]
 8010434:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010438:	f023 0310 	bic.w	r3, r3, #16
 801043c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	461a      	mov	r2, r3
 8010446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801044a:	65bb      	str	r3, [r7, #88]	; 0x58
 801044c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1e4      	bne.n	8010428 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010464:	4618      	mov	r0, r3
 8010466:	f7f7 fd59 	bl	8007f1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2202      	movs	r2, #2
 801046e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801047c:	b29b      	uxth	r3, r3
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	b29b      	uxth	r3, r3
 8010482:	4619      	mov	r1, r3
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 f91d 	bl	80106c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801048a:	e0fd      	b.n	8010688 <HAL_UART_IRQHandler+0x760>
 801048c:	40020010 	.word	0x40020010
 8010490:	40020028 	.word	0x40020028
 8010494:	40020040 	.word	0x40020040
 8010498:	40020058 	.word	0x40020058
 801049c:	40020070 	.word	0x40020070
 80104a0:	40020088 	.word	0x40020088
 80104a4:	400200a0 	.word	0x400200a0
 80104a8:	400200b8 	.word	0x400200b8
 80104ac:	40020410 	.word	0x40020410
 80104b0:	40020428 	.word	0x40020428
 80104b4:	40020440 	.word	0x40020440
 80104b8:	40020458 	.word	0x40020458
 80104bc:	40020470 	.word	0x40020470
 80104c0:	40020488 	.word	0x40020488
 80104c4:	400204a0 	.word	0x400204a0
 80104c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104d8:	b29b      	uxth	r3, r3
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 80cf 	beq.w	801068c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80104ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f000 80ca 	beq.w	801068c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010500:	e853 3f00 	ldrex	r3, [r3]
 8010504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801050c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	461a      	mov	r2, r3
 8010516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801051a:	647b      	str	r3, [r7, #68]	; 0x44
 801051c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801051e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010522:	e841 2300 	strex	r3, r2, [r1]
 8010526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1e4      	bne.n	80104f8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	3308      	adds	r3, #8
 8010534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010538:	e853 3f00 	ldrex	r3, [r3]
 801053c:	623b      	str	r3, [r7, #32]
   return(result);
 801053e:	6a3a      	ldr	r2, [r7, #32]
 8010540:	4b55      	ldr	r3, [pc, #340]	; (8010698 <HAL_UART_IRQHandler+0x770>)
 8010542:	4013      	ands	r3, r2
 8010544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	3308      	adds	r3, #8
 801054e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010552:	633a      	str	r2, [r7, #48]	; 0x30
 8010554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e3      	bne.n	801052e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2220      	movs	r2, #32
 801056a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	e853 3f00 	ldrex	r3, [r3]
 8010586:	60fb      	str	r3, [r7, #12]
   return(result);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f023 0310 	bic.w	r3, r3, #16
 801058e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	461a      	mov	r2, r3
 8010598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801059c:	61fb      	str	r3, [r7, #28]
 801059e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a0:	69b9      	ldr	r1, [r7, #24]
 80105a2:	69fa      	ldr	r2, [r7, #28]
 80105a4:	e841 2300 	strex	r3, r2, [r1]
 80105a8:	617b      	str	r3, [r7, #20]
   return(result);
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e4      	bne.n	801057a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2202      	movs	r2, #2
 80105b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80105b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80105ba:	4619      	mov	r1, r3
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 f881 	bl	80106c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105c2:	e063      	b.n	801068c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80105c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00e      	beq.n	80105ee <HAL_UART_IRQHandler+0x6c6>
 80105d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d008      	beq.n	80105ee <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80105e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f001 f93f 	bl	801186a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105ec:	e051      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80105ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d014      	beq.n	8010624 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80105fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010602:	2b00      	cmp	r3, #0
 8010604:	d105      	bne.n	8010612 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801060a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801060e:	2b00      	cmp	r3, #0
 8010610:	d008      	beq.n	8010624 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010616:	2b00      	cmp	r3, #0
 8010618:	d03a      	beq.n	8010690 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	4798      	blx	r3
    }
    return;
 8010622:	e035      	b.n	8010690 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801062c:	2b00      	cmp	r3, #0
 801062e:	d009      	beq.n	8010644 <HAL_UART_IRQHandler+0x71c>
 8010630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010638:	2b00      	cmp	r3, #0
 801063a:	d003      	beq.n	8010644 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f001 f8e9 	bl	8011814 <UART_EndTransmit_IT>
    return;
 8010642:	e026      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d009      	beq.n	8010664 <HAL_UART_IRQHandler+0x73c>
 8010650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010658:	2b00      	cmp	r3, #0
 801065a:	d003      	beq.n	8010664 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f001 f918 	bl	8011892 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010662:	e016      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d010      	beq.n	8010692 <HAL_UART_IRQHandler+0x76a>
 8010670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010674:	2b00      	cmp	r3, #0
 8010676:	da0c      	bge.n	8010692 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f001 f900 	bl	801187e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801067e:	e008      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
      return;
 8010680:	bf00      	nop
 8010682:	e006      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
    return;
 8010684:	bf00      	nop
 8010686:	e004      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
      return;
 8010688:	bf00      	nop
 801068a:	e002      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
      return;
 801068c:	bf00      	nop
 801068e:	e000      	b.n	8010692 <HAL_UART_IRQHandler+0x76a>
    return;
 8010690:	bf00      	nop
  }
}
 8010692:	37e8      	adds	r7, #232	; 0xe8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	effffffe 	.word	0xeffffffe

0801069c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80106a4:	bf00      	nop
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80106b8:	bf00      	nop
 80106ba:	370c      	adds	r7, #12
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	460b      	mov	r3, r1
 80106ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80106d0:	bf00      	nop
 80106d2:	370c      	adds	r7, #12
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80106dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80106e0:	b092      	sub	sp, #72	; 0x48
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80106e6:	2300      	movs	r3, #0
 80106e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	689a      	ldr	r2, [r3, #8]
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	431a      	orrs	r2, r3
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	431a      	orrs	r2, r3
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	69db      	ldr	r3, [r3, #28]
 8010700:	4313      	orrs	r3, r2
 8010702:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	4bbe      	ldr	r3, [pc, #760]	; (8010a04 <UART_SetConfig+0x328>)
 801070c:	4013      	ands	r3, r2
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	6812      	ldr	r2, [r2, #0]
 8010712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010714:	430b      	orrs	r3, r1
 8010716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	68da      	ldr	r2, [r3, #12]
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	430a      	orrs	r2, r1
 801072c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	699b      	ldr	r3, [r3, #24]
 8010732:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	4ab3      	ldr	r2, [pc, #716]	; (8010a08 <UART_SetConfig+0x32c>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d004      	beq.n	8010748 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	6a1b      	ldr	r3, [r3, #32]
 8010742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010744:	4313      	orrs	r3, r2
 8010746:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	689a      	ldr	r2, [r3, #8]
 801074e:	4baf      	ldr	r3, [pc, #700]	; (8010a0c <UART_SetConfig+0x330>)
 8010750:	4013      	ands	r3, r2
 8010752:	697a      	ldr	r2, [r7, #20]
 8010754:	6812      	ldr	r2, [r2, #0]
 8010756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010758:	430b      	orrs	r3, r1
 801075a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010762:	f023 010f 	bic.w	r1, r3, #15
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	430a      	orrs	r2, r1
 8010770:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4aa6      	ldr	r2, [pc, #664]	; (8010a10 <UART_SetConfig+0x334>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d177      	bne.n	801086c <UART_SetConfig+0x190>
 801077c:	4ba5      	ldr	r3, [pc, #660]	; (8010a14 <UART_SetConfig+0x338>)
 801077e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010780:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010784:	2b28      	cmp	r3, #40	; 0x28
 8010786:	d86d      	bhi.n	8010864 <UART_SetConfig+0x188>
 8010788:	a201      	add	r2, pc, #4	; (adr r2, 8010790 <UART_SetConfig+0xb4>)
 801078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801078e:	bf00      	nop
 8010790:	08010835 	.word	0x08010835
 8010794:	08010865 	.word	0x08010865
 8010798:	08010865 	.word	0x08010865
 801079c:	08010865 	.word	0x08010865
 80107a0:	08010865 	.word	0x08010865
 80107a4:	08010865 	.word	0x08010865
 80107a8:	08010865 	.word	0x08010865
 80107ac:	08010865 	.word	0x08010865
 80107b0:	0801083d 	.word	0x0801083d
 80107b4:	08010865 	.word	0x08010865
 80107b8:	08010865 	.word	0x08010865
 80107bc:	08010865 	.word	0x08010865
 80107c0:	08010865 	.word	0x08010865
 80107c4:	08010865 	.word	0x08010865
 80107c8:	08010865 	.word	0x08010865
 80107cc:	08010865 	.word	0x08010865
 80107d0:	08010845 	.word	0x08010845
 80107d4:	08010865 	.word	0x08010865
 80107d8:	08010865 	.word	0x08010865
 80107dc:	08010865 	.word	0x08010865
 80107e0:	08010865 	.word	0x08010865
 80107e4:	08010865 	.word	0x08010865
 80107e8:	08010865 	.word	0x08010865
 80107ec:	08010865 	.word	0x08010865
 80107f0:	0801084d 	.word	0x0801084d
 80107f4:	08010865 	.word	0x08010865
 80107f8:	08010865 	.word	0x08010865
 80107fc:	08010865 	.word	0x08010865
 8010800:	08010865 	.word	0x08010865
 8010804:	08010865 	.word	0x08010865
 8010808:	08010865 	.word	0x08010865
 801080c:	08010865 	.word	0x08010865
 8010810:	08010855 	.word	0x08010855
 8010814:	08010865 	.word	0x08010865
 8010818:	08010865 	.word	0x08010865
 801081c:	08010865 	.word	0x08010865
 8010820:	08010865 	.word	0x08010865
 8010824:	08010865 	.word	0x08010865
 8010828:	08010865 	.word	0x08010865
 801082c:	08010865 	.word	0x08010865
 8010830:	0801085d 	.word	0x0801085d
 8010834:	2301      	movs	r3, #1
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801083a:	e326      	b.n	8010e8a <UART_SetConfig+0x7ae>
 801083c:	2304      	movs	r3, #4
 801083e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010842:	e322      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010844:	2308      	movs	r3, #8
 8010846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801084a:	e31e      	b.n	8010e8a <UART_SetConfig+0x7ae>
 801084c:	2310      	movs	r3, #16
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010852:	e31a      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010854:	2320      	movs	r3, #32
 8010856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801085a:	e316      	b.n	8010e8a <UART_SetConfig+0x7ae>
 801085c:	2340      	movs	r3, #64	; 0x40
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010862:	e312      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010864:	2380      	movs	r3, #128	; 0x80
 8010866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801086a:	e30e      	b.n	8010e8a <UART_SetConfig+0x7ae>
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a69      	ldr	r2, [pc, #420]	; (8010a18 <UART_SetConfig+0x33c>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d130      	bne.n	80108d8 <UART_SetConfig+0x1fc>
 8010876:	4b67      	ldr	r3, [pc, #412]	; (8010a14 <UART_SetConfig+0x338>)
 8010878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801087a:	f003 0307 	and.w	r3, r3, #7
 801087e:	2b05      	cmp	r3, #5
 8010880:	d826      	bhi.n	80108d0 <UART_SetConfig+0x1f4>
 8010882:	a201      	add	r2, pc, #4	; (adr r2, 8010888 <UART_SetConfig+0x1ac>)
 8010884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010888:	080108a1 	.word	0x080108a1
 801088c:	080108a9 	.word	0x080108a9
 8010890:	080108b1 	.word	0x080108b1
 8010894:	080108b9 	.word	0x080108b9
 8010898:	080108c1 	.word	0x080108c1
 801089c:	080108c9 	.word	0x080108c9
 80108a0:	2300      	movs	r3, #0
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108a6:	e2f0      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80108a8:	2304      	movs	r3, #4
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ae:	e2ec      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80108b0:	2308      	movs	r3, #8
 80108b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108b6:	e2e8      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80108b8:	2310      	movs	r3, #16
 80108ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108be:	e2e4      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80108c0:	2320      	movs	r3, #32
 80108c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108c6:	e2e0      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80108c8:	2340      	movs	r3, #64	; 0x40
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ce:	e2dc      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80108d0:	2380      	movs	r3, #128	; 0x80
 80108d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108d6:	e2d8      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a4f      	ldr	r2, [pc, #316]	; (8010a1c <UART_SetConfig+0x340>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d130      	bne.n	8010944 <UART_SetConfig+0x268>
 80108e2:	4b4c      	ldr	r3, [pc, #304]	; (8010a14 <UART_SetConfig+0x338>)
 80108e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108e6:	f003 0307 	and.w	r3, r3, #7
 80108ea:	2b05      	cmp	r3, #5
 80108ec:	d826      	bhi.n	801093c <UART_SetConfig+0x260>
 80108ee:	a201      	add	r2, pc, #4	; (adr r2, 80108f4 <UART_SetConfig+0x218>)
 80108f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f4:	0801090d 	.word	0x0801090d
 80108f8:	08010915 	.word	0x08010915
 80108fc:	0801091d 	.word	0x0801091d
 8010900:	08010925 	.word	0x08010925
 8010904:	0801092d 	.word	0x0801092d
 8010908:	08010935 	.word	0x08010935
 801090c:	2300      	movs	r3, #0
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010912:	e2ba      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010914:	2304      	movs	r3, #4
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091a:	e2b6      	b.n	8010e8a <UART_SetConfig+0x7ae>
 801091c:	2308      	movs	r3, #8
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010922:	e2b2      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010924:	2310      	movs	r3, #16
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092a:	e2ae      	b.n	8010e8a <UART_SetConfig+0x7ae>
 801092c:	2320      	movs	r3, #32
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010932:	e2aa      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010934:	2340      	movs	r3, #64	; 0x40
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093a:	e2a6      	b.n	8010e8a <UART_SetConfig+0x7ae>
 801093c:	2380      	movs	r3, #128	; 0x80
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010942:	e2a2      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a35      	ldr	r2, [pc, #212]	; (8010a20 <UART_SetConfig+0x344>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d130      	bne.n	80109b0 <UART_SetConfig+0x2d4>
 801094e:	4b31      	ldr	r3, [pc, #196]	; (8010a14 <UART_SetConfig+0x338>)
 8010950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010952:	f003 0307 	and.w	r3, r3, #7
 8010956:	2b05      	cmp	r3, #5
 8010958:	d826      	bhi.n	80109a8 <UART_SetConfig+0x2cc>
 801095a:	a201      	add	r2, pc, #4	; (adr r2, 8010960 <UART_SetConfig+0x284>)
 801095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010960:	08010979 	.word	0x08010979
 8010964:	08010981 	.word	0x08010981
 8010968:	08010989 	.word	0x08010989
 801096c:	08010991 	.word	0x08010991
 8010970:	08010999 	.word	0x08010999
 8010974:	080109a1 	.word	0x080109a1
 8010978:	2300      	movs	r3, #0
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801097e:	e284      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010980:	2304      	movs	r3, #4
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010986:	e280      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010988:	2308      	movs	r3, #8
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801098e:	e27c      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010990:	2310      	movs	r3, #16
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010996:	e278      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010998:	2320      	movs	r3, #32
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099e:	e274      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80109a0:	2340      	movs	r3, #64	; 0x40
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a6:	e270      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80109a8:	2380      	movs	r3, #128	; 0x80
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ae:	e26c      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a1b      	ldr	r2, [pc, #108]	; (8010a24 <UART_SetConfig+0x348>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d142      	bne.n	8010a40 <UART_SetConfig+0x364>
 80109ba:	4b16      	ldr	r3, [pc, #88]	; (8010a14 <UART_SetConfig+0x338>)
 80109bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109be:	f003 0307 	and.w	r3, r3, #7
 80109c2:	2b05      	cmp	r3, #5
 80109c4:	d838      	bhi.n	8010a38 <UART_SetConfig+0x35c>
 80109c6:	a201      	add	r2, pc, #4	; (adr r2, 80109cc <UART_SetConfig+0x2f0>)
 80109c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109cc:	080109e5 	.word	0x080109e5
 80109d0:	080109ed 	.word	0x080109ed
 80109d4:	080109f5 	.word	0x080109f5
 80109d8:	080109fd 	.word	0x080109fd
 80109dc:	08010a29 	.word	0x08010a29
 80109e0:	08010a31 	.word	0x08010a31
 80109e4:	2300      	movs	r3, #0
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ea:	e24e      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80109ec:	2304      	movs	r3, #4
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f2:	e24a      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80109f4:	2308      	movs	r3, #8
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109fa:	e246      	b.n	8010e8a <UART_SetConfig+0x7ae>
 80109fc:	2310      	movs	r3, #16
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a02:	e242      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010a04:	cfff69f3 	.word	0xcfff69f3
 8010a08:	58000c00 	.word	0x58000c00
 8010a0c:	11fff4ff 	.word	0x11fff4ff
 8010a10:	40011000 	.word	0x40011000
 8010a14:	58024400 	.word	0x58024400
 8010a18:	40004400 	.word	0x40004400
 8010a1c:	40004800 	.word	0x40004800
 8010a20:	40004c00 	.word	0x40004c00
 8010a24:	40005000 	.word	0x40005000
 8010a28:	2320      	movs	r3, #32
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e22c      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010a30:	2340      	movs	r3, #64	; 0x40
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a36:	e228      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010a38:	2380      	movs	r3, #128	; 0x80
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3e:	e224      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4ab1      	ldr	r2, [pc, #708]	; (8010d0c <UART_SetConfig+0x630>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d176      	bne.n	8010b38 <UART_SetConfig+0x45c>
 8010a4a:	4bb1      	ldr	r3, [pc, #708]	; (8010d10 <UART_SetConfig+0x634>)
 8010a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a52:	2b28      	cmp	r3, #40	; 0x28
 8010a54:	d86c      	bhi.n	8010b30 <UART_SetConfig+0x454>
 8010a56:	a201      	add	r2, pc, #4	; (adr r2, 8010a5c <UART_SetConfig+0x380>)
 8010a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5c:	08010b01 	.word	0x08010b01
 8010a60:	08010b31 	.word	0x08010b31
 8010a64:	08010b31 	.word	0x08010b31
 8010a68:	08010b31 	.word	0x08010b31
 8010a6c:	08010b31 	.word	0x08010b31
 8010a70:	08010b31 	.word	0x08010b31
 8010a74:	08010b31 	.word	0x08010b31
 8010a78:	08010b31 	.word	0x08010b31
 8010a7c:	08010b09 	.word	0x08010b09
 8010a80:	08010b31 	.word	0x08010b31
 8010a84:	08010b31 	.word	0x08010b31
 8010a88:	08010b31 	.word	0x08010b31
 8010a8c:	08010b31 	.word	0x08010b31
 8010a90:	08010b31 	.word	0x08010b31
 8010a94:	08010b31 	.word	0x08010b31
 8010a98:	08010b31 	.word	0x08010b31
 8010a9c:	08010b11 	.word	0x08010b11
 8010aa0:	08010b31 	.word	0x08010b31
 8010aa4:	08010b31 	.word	0x08010b31
 8010aa8:	08010b31 	.word	0x08010b31
 8010aac:	08010b31 	.word	0x08010b31
 8010ab0:	08010b31 	.word	0x08010b31
 8010ab4:	08010b31 	.word	0x08010b31
 8010ab8:	08010b31 	.word	0x08010b31
 8010abc:	08010b19 	.word	0x08010b19
 8010ac0:	08010b31 	.word	0x08010b31
 8010ac4:	08010b31 	.word	0x08010b31
 8010ac8:	08010b31 	.word	0x08010b31
 8010acc:	08010b31 	.word	0x08010b31
 8010ad0:	08010b31 	.word	0x08010b31
 8010ad4:	08010b31 	.word	0x08010b31
 8010ad8:	08010b31 	.word	0x08010b31
 8010adc:	08010b21 	.word	0x08010b21
 8010ae0:	08010b31 	.word	0x08010b31
 8010ae4:	08010b31 	.word	0x08010b31
 8010ae8:	08010b31 	.word	0x08010b31
 8010aec:	08010b31 	.word	0x08010b31
 8010af0:	08010b31 	.word	0x08010b31
 8010af4:	08010b31 	.word	0x08010b31
 8010af8:	08010b31 	.word	0x08010b31
 8010afc:	08010b29 	.word	0x08010b29
 8010b00:	2301      	movs	r3, #1
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b06:	e1c0      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b08:	2304      	movs	r3, #4
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e1bc      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b10:	2308      	movs	r3, #8
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e1b8      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b18:	2310      	movs	r3, #16
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1e:	e1b4      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b20:	2320      	movs	r3, #32
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b26:	e1b0      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b28:	2340      	movs	r3, #64	; 0x40
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2e:	e1ac      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b30:	2380      	movs	r3, #128	; 0x80
 8010b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b36:	e1a8      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a75      	ldr	r2, [pc, #468]	; (8010d14 <UART_SetConfig+0x638>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d130      	bne.n	8010ba4 <UART_SetConfig+0x4c8>
 8010b42:	4b73      	ldr	r3, [pc, #460]	; (8010d10 <UART_SetConfig+0x634>)
 8010b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b46:	f003 0307 	and.w	r3, r3, #7
 8010b4a:	2b05      	cmp	r3, #5
 8010b4c:	d826      	bhi.n	8010b9c <UART_SetConfig+0x4c0>
 8010b4e:	a201      	add	r2, pc, #4	; (adr r2, 8010b54 <UART_SetConfig+0x478>)
 8010b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b54:	08010b6d 	.word	0x08010b6d
 8010b58:	08010b75 	.word	0x08010b75
 8010b5c:	08010b7d 	.word	0x08010b7d
 8010b60:	08010b85 	.word	0x08010b85
 8010b64:	08010b8d 	.word	0x08010b8d
 8010b68:	08010b95 	.word	0x08010b95
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b72:	e18a      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b74:	2304      	movs	r3, #4
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7a:	e186      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b7c:	2308      	movs	r3, #8
 8010b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b82:	e182      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b84:	2310      	movs	r3, #16
 8010b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8a:	e17e      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b8c:	2320      	movs	r3, #32
 8010b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b92:	e17a      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b94:	2340      	movs	r3, #64	; 0x40
 8010b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9a:	e176      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010b9c:	2380      	movs	r3, #128	; 0x80
 8010b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba2:	e172      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a5b      	ldr	r2, [pc, #364]	; (8010d18 <UART_SetConfig+0x63c>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d130      	bne.n	8010c10 <UART_SetConfig+0x534>
 8010bae:	4b58      	ldr	r3, [pc, #352]	; (8010d10 <UART_SetConfig+0x634>)
 8010bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bb2:	f003 0307 	and.w	r3, r3, #7
 8010bb6:	2b05      	cmp	r3, #5
 8010bb8:	d826      	bhi.n	8010c08 <UART_SetConfig+0x52c>
 8010bba:	a201      	add	r2, pc, #4	; (adr r2, 8010bc0 <UART_SetConfig+0x4e4>)
 8010bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc0:	08010bd9 	.word	0x08010bd9
 8010bc4:	08010be1 	.word	0x08010be1
 8010bc8:	08010be9 	.word	0x08010be9
 8010bcc:	08010bf1 	.word	0x08010bf1
 8010bd0:	08010bf9 	.word	0x08010bf9
 8010bd4:	08010c01 	.word	0x08010c01
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bde:	e154      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010be0:	2304      	movs	r3, #4
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e150      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010be8:	2308      	movs	r3, #8
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e14c      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010bf0:	2310      	movs	r3, #16
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e148      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010bf8:	2320      	movs	r3, #32
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e144      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010c00:	2340      	movs	r3, #64	; 0x40
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e140      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010c08:	2380      	movs	r3, #128	; 0x80
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e13c      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4a41      	ldr	r2, [pc, #260]	; (8010d1c <UART_SetConfig+0x640>)
 8010c16:	4293      	cmp	r3, r2
 8010c18:	f040 8082 	bne.w	8010d20 <UART_SetConfig+0x644>
 8010c1c:	4b3c      	ldr	r3, [pc, #240]	; (8010d10 <UART_SetConfig+0x634>)
 8010c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c24:	2b28      	cmp	r3, #40	; 0x28
 8010c26:	d86d      	bhi.n	8010d04 <UART_SetConfig+0x628>
 8010c28:	a201      	add	r2, pc, #4	; (adr r2, 8010c30 <UART_SetConfig+0x554>)
 8010c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2e:	bf00      	nop
 8010c30:	08010cd5 	.word	0x08010cd5
 8010c34:	08010d05 	.word	0x08010d05
 8010c38:	08010d05 	.word	0x08010d05
 8010c3c:	08010d05 	.word	0x08010d05
 8010c40:	08010d05 	.word	0x08010d05
 8010c44:	08010d05 	.word	0x08010d05
 8010c48:	08010d05 	.word	0x08010d05
 8010c4c:	08010d05 	.word	0x08010d05
 8010c50:	08010cdd 	.word	0x08010cdd
 8010c54:	08010d05 	.word	0x08010d05
 8010c58:	08010d05 	.word	0x08010d05
 8010c5c:	08010d05 	.word	0x08010d05
 8010c60:	08010d05 	.word	0x08010d05
 8010c64:	08010d05 	.word	0x08010d05
 8010c68:	08010d05 	.word	0x08010d05
 8010c6c:	08010d05 	.word	0x08010d05
 8010c70:	08010ce5 	.word	0x08010ce5
 8010c74:	08010d05 	.word	0x08010d05
 8010c78:	08010d05 	.word	0x08010d05
 8010c7c:	08010d05 	.word	0x08010d05
 8010c80:	08010d05 	.word	0x08010d05
 8010c84:	08010d05 	.word	0x08010d05
 8010c88:	08010d05 	.word	0x08010d05
 8010c8c:	08010d05 	.word	0x08010d05
 8010c90:	08010ced 	.word	0x08010ced
 8010c94:	08010d05 	.word	0x08010d05
 8010c98:	08010d05 	.word	0x08010d05
 8010c9c:	08010d05 	.word	0x08010d05
 8010ca0:	08010d05 	.word	0x08010d05
 8010ca4:	08010d05 	.word	0x08010d05
 8010ca8:	08010d05 	.word	0x08010d05
 8010cac:	08010d05 	.word	0x08010d05
 8010cb0:	08010cf5 	.word	0x08010cf5
 8010cb4:	08010d05 	.word	0x08010d05
 8010cb8:	08010d05 	.word	0x08010d05
 8010cbc:	08010d05 	.word	0x08010d05
 8010cc0:	08010d05 	.word	0x08010d05
 8010cc4:	08010d05 	.word	0x08010d05
 8010cc8:	08010d05 	.word	0x08010d05
 8010ccc:	08010d05 	.word	0x08010d05
 8010cd0:	08010cfd 	.word	0x08010cfd
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cda:	e0d6      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010cdc:	2304      	movs	r3, #4
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce2:	e0d2      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010ce4:	2308      	movs	r3, #8
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cea:	e0ce      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010cec:	2310      	movs	r3, #16
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf2:	e0ca      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010cf4:	2320      	movs	r3, #32
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfa:	e0c6      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010cfc:	2340      	movs	r3, #64	; 0x40
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e0c2      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010d04:	2380      	movs	r3, #128	; 0x80
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e0be      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010d0c:	40011400 	.word	0x40011400
 8010d10:	58024400 	.word	0x58024400
 8010d14:	40007800 	.word	0x40007800
 8010d18:	40007c00 	.word	0x40007c00
 8010d1c:	40011800 	.word	0x40011800
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4aad      	ldr	r2, [pc, #692]	; (8010fdc <UART_SetConfig+0x900>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d176      	bne.n	8010e18 <UART_SetConfig+0x73c>
 8010d2a:	4bad      	ldr	r3, [pc, #692]	; (8010fe0 <UART_SetConfig+0x904>)
 8010d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d32:	2b28      	cmp	r3, #40	; 0x28
 8010d34:	d86c      	bhi.n	8010e10 <UART_SetConfig+0x734>
 8010d36:	a201      	add	r2, pc, #4	; (adr r2, 8010d3c <UART_SetConfig+0x660>)
 8010d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3c:	08010de1 	.word	0x08010de1
 8010d40:	08010e11 	.word	0x08010e11
 8010d44:	08010e11 	.word	0x08010e11
 8010d48:	08010e11 	.word	0x08010e11
 8010d4c:	08010e11 	.word	0x08010e11
 8010d50:	08010e11 	.word	0x08010e11
 8010d54:	08010e11 	.word	0x08010e11
 8010d58:	08010e11 	.word	0x08010e11
 8010d5c:	08010de9 	.word	0x08010de9
 8010d60:	08010e11 	.word	0x08010e11
 8010d64:	08010e11 	.word	0x08010e11
 8010d68:	08010e11 	.word	0x08010e11
 8010d6c:	08010e11 	.word	0x08010e11
 8010d70:	08010e11 	.word	0x08010e11
 8010d74:	08010e11 	.word	0x08010e11
 8010d78:	08010e11 	.word	0x08010e11
 8010d7c:	08010df1 	.word	0x08010df1
 8010d80:	08010e11 	.word	0x08010e11
 8010d84:	08010e11 	.word	0x08010e11
 8010d88:	08010e11 	.word	0x08010e11
 8010d8c:	08010e11 	.word	0x08010e11
 8010d90:	08010e11 	.word	0x08010e11
 8010d94:	08010e11 	.word	0x08010e11
 8010d98:	08010e11 	.word	0x08010e11
 8010d9c:	08010df9 	.word	0x08010df9
 8010da0:	08010e11 	.word	0x08010e11
 8010da4:	08010e11 	.word	0x08010e11
 8010da8:	08010e11 	.word	0x08010e11
 8010dac:	08010e11 	.word	0x08010e11
 8010db0:	08010e11 	.word	0x08010e11
 8010db4:	08010e11 	.word	0x08010e11
 8010db8:	08010e11 	.word	0x08010e11
 8010dbc:	08010e01 	.word	0x08010e01
 8010dc0:	08010e11 	.word	0x08010e11
 8010dc4:	08010e11 	.word	0x08010e11
 8010dc8:	08010e11 	.word	0x08010e11
 8010dcc:	08010e11 	.word	0x08010e11
 8010dd0:	08010e11 	.word	0x08010e11
 8010dd4:	08010e11 	.word	0x08010e11
 8010dd8:	08010e11 	.word	0x08010e11
 8010ddc:	08010e09 	.word	0x08010e09
 8010de0:	2301      	movs	r3, #1
 8010de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de6:	e050      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010de8:	2304      	movs	r3, #4
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dee:	e04c      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010df0:	2308      	movs	r3, #8
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df6:	e048      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010df8:	2310      	movs	r3, #16
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfe:	e044      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e00:	2320      	movs	r3, #32
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e06:	e040      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e08:	2340      	movs	r3, #64	; 0x40
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0e:	e03c      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e10:	2380      	movs	r3, #128	; 0x80
 8010e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e16:	e038      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4a71      	ldr	r2, [pc, #452]	; (8010fe4 <UART_SetConfig+0x908>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d130      	bne.n	8010e84 <UART_SetConfig+0x7a8>
 8010e22:	4b6f      	ldr	r3, [pc, #444]	; (8010fe0 <UART_SetConfig+0x904>)
 8010e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e26:	f003 0307 	and.w	r3, r3, #7
 8010e2a:	2b05      	cmp	r3, #5
 8010e2c:	d826      	bhi.n	8010e7c <UART_SetConfig+0x7a0>
 8010e2e:	a201      	add	r2, pc, #4	; (adr r2, 8010e34 <UART_SetConfig+0x758>)
 8010e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e34:	08010e4d 	.word	0x08010e4d
 8010e38:	08010e55 	.word	0x08010e55
 8010e3c:	08010e5d 	.word	0x08010e5d
 8010e40:	08010e65 	.word	0x08010e65
 8010e44:	08010e6d 	.word	0x08010e6d
 8010e48:	08010e75 	.word	0x08010e75
 8010e4c:	2302      	movs	r3, #2
 8010e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e52:	e01a      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e54:	2304      	movs	r3, #4
 8010e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5a:	e016      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e5c:	2308      	movs	r3, #8
 8010e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e62:	e012      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e64:	2310      	movs	r3, #16
 8010e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6a:	e00e      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e6c:	2320      	movs	r3, #32
 8010e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e72:	e00a      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e74:	2340      	movs	r3, #64	; 0x40
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7a:	e006      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e7c:	2380      	movs	r3, #128	; 0x80
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e82:	e002      	b.n	8010e8a <UART_SetConfig+0x7ae>
 8010e84:	2380      	movs	r3, #128	; 0x80
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	4a55      	ldr	r2, [pc, #340]	; (8010fe4 <UART_SetConfig+0x908>)
 8010e90:	4293      	cmp	r3, r2
 8010e92:	f040 80f8 	bne.w	8011086 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e9a:	2b20      	cmp	r3, #32
 8010e9c:	dc46      	bgt.n	8010f2c <UART_SetConfig+0x850>
 8010e9e:	2b02      	cmp	r3, #2
 8010ea0:	db75      	blt.n	8010f8e <UART_SetConfig+0x8b2>
 8010ea2:	3b02      	subs	r3, #2
 8010ea4:	2b1e      	cmp	r3, #30
 8010ea6:	d872      	bhi.n	8010f8e <UART_SetConfig+0x8b2>
 8010ea8:	a201      	add	r2, pc, #4	; (adr r2, 8010eb0 <UART_SetConfig+0x7d4>)
 8010eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eae:	bf00      	nop
 8010eb0:	08010f33 	.word	0x08010f33
 8010eb4:	08010f8f 	.word	0x08010f8f
 8010eb8:	08010f3b 	.word	0x08010f3b
 8010ebc:	08010f8f 	.word	0x08010f8f
 8010ec0:	08010f8f 	.word	0x08010f8f
 8010ec4:	08010f8f 	.word	0x08010f8f
 8010ec8:	08010f4b 	.word	0x08010f4b
 8010ecc:	08010f8f 	.word	0x08010f8f
 8010ed0:	08010f8f 	.word	0x08010f8f
 8010ed4:	08010f8f 	.word	0x08010f8f
 8010ed8:	08010f8f 	.word	0x08010f8f
 8010edc:	08010f8f 	.word	0x08010f8f
 8010ee0:	08010f8f 	.word	0x08010f8f
 8010ee4:	08010f8f 	.word	0x08010f8f
 8010ee8:	08010f5b 	.word	0x08010f5b
 8010eec:	08010f8f 	.word	0x08010f8f
 8010ef0:	08010f8f 	.word	0x08010f8f
 8010ef4:	08010f8f 	.word	0x08010f8f
 8010ef8:	08010f8f 	.word	0x08010f8f
 8010efc:	08010f8f 	.word	0x08010f8f
 8010f00:	08010f8f 	.word	0x08010f8f
 8010f04:	08010f8f 	.word	0x08010f8f
 8010f08:	08010f8f 	.word	0x08010f8f
 8010f0c:	08010f8f 	.word	0x08010f8f
 8010f10:	08010f8f 	.word	0x08010f8f
 8010f14:	08010f8f 	.word	0x08010f8f
 8010f18:	08010f8f 	.word	0x08010f8f
 8010f1c:	08010f8f 	.word	0x08010f8f
 8010f20:	08010f8f 	.word	0x08010f8f
 8010f24:	08010f8f 	.word	0x08010f8f
 8010f28:	08010f81 	.word	0x08010f81
 8010f2c:	2b40      	cmp	r3, #64	; 0x40
 8010f2e:	d02a      	beq.n	8010f86 <UART_SetConfig+0x8aa>
 8010f30:	e02d      	b.n	8010f8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010f32:	f7fe f879 	bl	800f028 <HAL_RCCEx_GetD3PCLK1Freq>
 8010f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f38:	e02f      	b.n	8010f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fe f888 	bl	800f054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f48:	e027      	b.n	8010f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f4a:	f107 0318 	add.w	r3, r7, #24
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe f9d4 	bl	800f2fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f54:	69fb      	ldr	r3, [r7, #28]
 8010f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f58:	e01f      	b.n	8010f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f5a:	4b21      	ldr	r3, [pc, #132]	; (8010fe0 <UART_SetConfig+0x904>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f003 0320 	and.w	r3, r3, #32
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d009      	beq.n	8010f7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f66:	4b1e      	ldr	r3, [pc, #120]	; (8010fe0 <UART_SetConfig+0x904>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	08db      	lsrs	r3, r3, #3
 8010f6c:	f003 0303 	and.w	r3, r3, #3
 8010f70:	4a1d      	ldr	r2, [pc, #116]	; (8010fe8 <UART_SetConfig+0x90c>)
 8010f72:	fa22 f303 	lsr.w	r3, r2, r3
 8010f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f78:	e00f      	b.n	8010f9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010f7a:	4b1b      	ldr	r3, [pc, #108]	; (8010fe8 <UART_SetConfig+0x90c>)
 8010f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f7e:	e00c      	b.n	8010f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f80:	4b1a      	ldr	r3, [pc, #104]	; (8010fec <UART_SetConfig+0x910>)
 8010f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f84:	e009      	b.n	8010f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f8c:	e005      	b.n	8010f9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f92:	2301      	movs	r3, #1
 8010f94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 81ee 	beq.w	801137e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa6:	4a12      	ldr	r2, [pc, #72]	; (8010ff0 <UART_SetConfig+0x914>)
 8010fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fac:	461a      	mov	r2, r3
 8010fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fb4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	005b      	lsls	r3, r3, #1
 8010fbe:	4413      	add	r3, r2
 8010fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d305      	bcc.n	8010fd2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d910      	bls.n	8010ff4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010fd8:	e1d1      	b.n	801137e <UART_SetConfig+0xca2>
 8010fda:	bf00      	nop
 8010fdc:	40011c00 	.word	0x40011c00
 8010fe0:	58024400 	.word	0x58024400
 8010fe4:	58000c00 	.word	0x58000c00
 8010fe8:	03d09000 	.word	0x03d09000
 8010fec:	003d0900 	.word	0x003d0900
 8010ff0:	0801f4e0 	.word	0x0801f4e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	60bb      	str	r3, [r7, #8]
 8010ffa:	60fa      	str	r2, [r7, #12]
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011000:	4ac0      	ldr	r2, [pc, #768]	; (8011304 <UART_SetConfig+0xc28>)
 8011002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011006:	b29b      	uxth	r3, r3
 8011008:	2200      	movs	r2, #0
 801100a:	603b      	str	r3, [r7, #0]
 801100c:	607a      	str	r2, [r7, #4]
 801100e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011016:	f7ef f9c3 	bl	80003a0 <__aeabi_uldivmod>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	4610      	mov	r0, r2
 8011020:	4619      	mov	r1, r3
 8011022:	f04f 0200 	mov.w	r2, #0
 8011026:	f04f 0300 	mov.w	r3, #0
 801102a:	020b      	lsls	r3, r1, #8
 801102c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011030:	0202      	lsls	r2, r0, #8
 8011032:	6979      	ldr	r1, [r7, #20]
 8011034:	6849      	ldr	r1, [r1, #4]
 8011036:	0849      	lsrs	r1, r1, #1
 8011038:	2000      	movs	r0, #0
 801103a:	460c      	mov	r4, r1
 801103c:	4605      	mov	r5, r0
 801103e:	eb12 0804 	adds.w	r8, r2, r4
 8011042:	eb43 0905 	adc.w	r9, r3, r5
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	469a      	mov	sl, r3
 801104e:	4693      	mov	fp, r2
 8011050:	4652      	mov	r2, sl
 8011052:	465b      	mov	r3, fp
 8011054:	4640      	mov	r0, r8
 8011056:	4649      	mov	r1, r9
 8011058:	f7ef f9a2 	bl	80003a0 <__aeabi_uldivmod>
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	4613      	mov	r3, r2
 8011062:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801106a:	d308      	bcc.n	801107e <UART_SetConfig+0x9a2>
 801106c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011072:	d204      	bcs.n	801107e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801107a:	60da      	str	r2, [r3, #12]
 801107c:	e17f      	b.n	801137e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011084:	e17b      	b.n	801137e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	69db      	ldr	r3, [r3, #28]
 801108a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801108e:	f040 80bd 	bne.w	801120c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011092:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011096:	2b20      	cmp	r3, #32
 8011098:	dc48      	bgt.n	801112c <UART_SetConfig+0xa50>
 801109a:	2b00      	cmp	r3, #0
 801109c:	db7b      	blt.n	8011196 <UART_SetConfig+0xaba>
 801109e:	2b20      	cmp	r3, #32
 80110a0:	d879      	bhi.n	8011196 <UART_SetConfig+0xaba>
 80110a2:	a201      	add	r2, pc, #4	; (adr r2, 80110a8 <UART_SetConfig+0x9cc>)
 80110a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a8:	08011133 	.word	0x08011133
 80110ac:	0801113b 	.word	0x0801113b
 80110b0:	08011197 	.word	0x08011197
 80110b4:	08011197 	.word	0x08011197
 80110b8:	08011143 	.word	0x08011143
 80110bc:	08011197 	.word	0x08011197
 80110c0:	08011197 	.word	0x08011197
 80110c4:	08011197 	.word	0x08011197
 80110c8:	08011153 	.word	0x08011153
 80110cc:	08011197 	.word	0x08011197
 80110d0:	08011197 	.word	0x08011197
 80110d4:	08011197 	.word	0x08011197
 80110d8:	08011197 	.word	0x08011197
 80110dc:	08011197 	.word	0x08011197
 80110e0:	08011197 	.word	0x08011197
 80110e4:	08011197 	.word	0x08011197
 80110e8:	08011163 	.word	0x08011163
 80110ec:	08011197 	.word	0x08011197
 80110f0:	08011197 	.word	0x08011197
 80110f4:	08011197 	.word	0x08011197
 80110f8:	08011197 	.word	0x08011197
 80110fc:	08011197 	.word	0x08011197
 8011100:	08011197 	.word	0x08011197
 8011104:	08011197 	.word	0x08011197
 8011108:	08011197 	.word	0x08011197
 801110c:	08011197 	.word	0x08011197
 8011110:	08011197 	.word	0x08011197
 8011114:	08011197 	.word	0x08011197
 8011118:	08011197 	.word	0x08011197
 801111c:	08011197 	.word	0x08011197
 8011120:	08011197 	.word	0x08011197
 8011124:	08011197 	.word	0x08011197
 8011128:	08011189 	.word	0x08011189
 801112c:	2b40      	cmp	r3, #64	; 0x40
 801112e:	d02e      	beq.n	801118e <UART_SetConfig+0xab2>
 8011130:	e031      	b.n	8011196 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011132:	f7fc fd8f 	bl	800dc54 <HAL_RCC_GetPCLK1Freq>
 8011136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011138:	e033      	b.n	80111a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801113a:	f7fc fda1 	bl	800dc80 <HAL_RCC_GetPCLK2Freq>
 801113e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011140:	e02f      	b.n	80111a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011146:	4618      	mov	r0, r3
 8011148:	f7fd ff84 	bl	800f054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011150:	e027      	b.n	80111a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011152:	f107 0318 	add.w	r3, r7, #24
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe f8d0 	bl	800f2fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011160:	e01f      	b.n	80111a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011162:	4b69      	ldr	r3, [pc, #420]	; (8011308 <UART_SetConfig+0xc2c>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f003 0320 	and.w	r3, r3, #32
 801116a:	2b00      	cmp	r3, #0
 801116c:	d009      	beq.n	8011182 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801116e:	4b66      	ldr	r3, [pc, #408]	; (8011308 <UART_SetConfig+0xc2c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	08db      	lsrs	r3, r3, #3
 8011174:	f003 0303 	and.w	r3, r3, #3
 8011178:	4a64      	ldr	r2, [pc, #400]	; (801130c <UART_SetConfig+0xc30>)
 801117a:	fa22 f303 	lsr.w	r3, r2, r3
 801117e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011180:	e00f      	b.n	80111a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011182:	4b62      	ldr	r3, [pc, #392]	; (801130c <UART_SetConfig+0xc30>)
 8011184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011186:	e00c      	b.n	80111a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011188:	4b61      	ldr	r3, [pc, #388]	; (8011310 <UART_SetConfig+0xc34>)
 801118a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801118c:	e009      	b.n	80111a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011194:	e005      	b.n	80111a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011196:	2300      	movs	r3, #0
 8011198:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801119a:	2301      	movs	r3, #1
 801119c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80111a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80111a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 80ea 	beq.w	801137e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ae:	4a55      	ldr	r2, [pc, #340]	; (8011304 <UART_SetConfig+0xc28>)
 80111b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111b4:	461a      	mov	r2, r3
 80111b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80111bc:	005a      	lsls	r2, r3, #1
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	085b      	lsrs	r3, r3, #1
 80111c4:	441a      	add	r2, r3
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80111ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d2:	2b0f      	cmp	r3, #15
 80111d4:	d916      	bls.n	8011204 <UART_SetConfig+0xb28>
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111dc:	d212      	bcs.n	8011204 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80111de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	f023 030f 	bic.w	r3, r3, #15
 80111e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80111e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ea:	085b      	lsrs	r3, r3, #1
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	f003 0307 	and.w	r3, r3, #7
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80111f6:	4313      	orrs	r3, r2
 80111f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011200:	60da      	str	r2, [r3, #12]
 8011202:	e0bc      	b.n	801137e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011204:	2301      	movs	r3, #1
 8011206:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801120a:	e0b8      	b.n	801137e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801120c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011210:	2b20      	cmp	r3, #32
 8011212:	dc4b      	bgt.n	80112ac <UART_SetConfig+0xbd0>
 8011214:	2b00      	cmp	r3, #0
 8011216:	f2c0 8087 	blt.w	8011328 <UART_SetConfig+0xc4c>
 801121a:	2b20      	cmp	r3, #32
 801121c:	f200 8084 	bhi.w	8011328 <UART_SetConfig+0xc4c>
 8011220:	a201      	add	r2, pc, #4	; (adr r2, 8011228 <UART_SetConfig+0xb4c>)
 8011222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011226:	bf00      	nop
 8011228:	080112b3 	.word	0x080112b3
 801122c:	080112bb 	.word	0x080112bb
 8011230:	08011329 	.word	0x08011329
 8011234:	08011329 	.word	0x08011329
 8011238:	080112c3 	.word	0x080112c3
 801123c:	08011329 	.word	0x08011329
 8011240:	08011329 	.word	0x08011329
 8011244:	08011329 	.word	0x08011329
 8011248:	080112d3 	.word	0x080112d3
 801124c:	08011329 	.word	0x08011329
 8011250:	08011329 	.word	0x08011329
 8011254:	08011329 	.word	0x08011329
 8011258:	08011329 	.word	0x08011329
 801125c:	08011329 	.word	0x08011329
 8011260:	08011329 	.word	0x08011329
 8011264:	08011329 	.word	0x08011329
 8011268:	080112e3 	.word	0x080112e3
 801126c:	08011329 	.word	0x08011329
 8011270:	08011329 	.word	0x08011329
 8011274:	08011329 	.word	0x08011329
 8011278:	08011329 	.word	0x08011329
 801127c:	08011329 	.word	0x08011329
 8011280:	08011329 	.word	0x08011329
 8011284:	08011329 	.word	0x08011329
 8011288:	08011329 	.word	0x08011329
 801128c:	08011329 	.word	0x08011329
 8011290:	08011329 	.word	0x08011329
 8011294:	08011329 	.word	0x08011329
 8011298:	08011329 	.word	0x08011329
 801129c:	08011329 	.word	0x08011329
 80112a0:	08011329 	.word	0x08011329
 80112a4:	08011329 	.word	0x08011329
 80112a8:	0801131b 	.word	0x0801131b
 80112ac:	2b40      	cmp	r3, #64	; 0x40
 80112ae:	d037      	beq.n	8011320 <UART_SetConfig+0xc44>
 80112b0:	e03a      	b.n	8011328 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112b2:	f7fc fccf 	bl	800dc54 <HAL_RCC_GetPCLK1Freq>
 80112b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112b8:	e03c      	b.n	8011334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80112ba:	f7fc fce1 	bl	800dc80 <HAL_RCC_GetPCLK2Freq>
 80112be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112c0:	e038      	b.n	8011334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fd fec4 	bl	800f054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d0:	e030      	b.n	8011334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112d2:	f107 0318 	add.w	r3, r7, #24
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fe f810 	bl	800f2fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112e0:	e028      	b.n	8011334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112e2:	4b09      	ldr	r3, [pc, #36]	; (8011308 <UART_SetConfig+0xc2c>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f003 0320 	and.w	r3, r3, #32
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d012      	beq.n	8011314 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112ee:	4b06      	ldr	r3, [pc, #24]	; (8011308 <UART_SetConfig+0xc2c>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	08db      	lsrs	r3, r3, #3
 80112f4:	f003 0303 	and.w	r3, r3, #3
 80112f8:	4a04      	ldr	r2, [pc, #16]	; (801130c <UART_SetConfig+0xc30>)
 80112fa:	fa22 f303 	lsr.w	r3, r2, r3
 80112fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011300:	e018      	b.n	8011334 <UART_SetConfig+0xc58>
 8011302:	bf00      	nop
 8011304:	0801f4e0 	.word	0x0801f4e0
 8011308:	58024400 	.word	0x58024400
 801130c:	03d09000 	.word	0x03d09000
 8011310:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011314:	4b24      	ldr	r3, [pc, #144]	; (80113a8 <UART_SetConfig+0xccc>)
 8011316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011318:	e00c      	b.n	8011334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801131a:	4b24      	ldr	r3, [pc, #144]	; (80113ac <UART_SetConfig+0xcd0>)
 801131c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801131e:	e009      	b.n	8011334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011326:	e005      	b.n	8011334 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011328:	2300      	movs	r3, #0
 801132a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801132c:	2301      	movs	r3, #1
 801132e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011332:	bf00      	nop
    }

    if (pclk != 0U)
 8011334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011336:	2b00      	cmp	r3, #0
 8011338:	d021      	beq.n	801137e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801133e:	4a1c      	ldr	r2, [pc, #112]	; (80113b0 <UART_SetConfig+0xcd4>)
 8011340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011344:	461a      	mov	r2, r3
 8011346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011348:	fbb3 f2f2 	udiv	r2, r3, r2
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	085b      	lsrs	r3, r3, #1
 8011352:	441a      	add	r2, r3
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	fbb2 f3f3 	udiv	r3, r2, r3
 801135c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011360:	2b0f      	cmp	r3, #15
 8011362:	d909      	bls.n	8011378 <UART_SetConfig+0xc9c>
 8011364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801136a:	d205      	bcs.n	8011378 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136e:	b29a      	uxth	r2, r3
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	60da      	str	r2, [r3, #12]
 8011376:	e002      	b.n	801137e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011378:	2301      	movs	r3, #1
 801137a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	2201      	movs	r2, #1
 8011382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	2201      	movs	r2, #1
 801138a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	2200      	movs	r2, #0
 8011392:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	2200      	movs	r2, #0
 8011398:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801139a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3748      	adds	r7, #72	; 0x48
 80113a2:	46bd      	mov	sp, r7
 80113a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80113a8:	03d09000 	.word	0x03d09000
 80113ac:	003d0900 	.word	0x003d0900
 80113b0:	0801f4e0 	.word	0x0801f4e0

080113b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113c0:	f003 0301 	and.w	r3, r3, #1
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d00a      	beq.n	80113de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	430a      	orrs	r2, r1
 80113dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113e2:	f003 0302 	and.w	r3, r3, #2
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d00a      	beq.n	8011400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	430a      	orrs	r2, r1
 80113fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011404:	f003 0304 	and.w	r3, r3, #4
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00a      	beq.n	8011422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	430a      	orrs	r2, r1
 8011420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011426:	f003 0308 	and.w	r3, r3, #8
 801142a:	2b00      	cmp	r3, #0
 801142c:	d00a      	beq.n	8011444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	430a      	orrs	r2, r1
 8011442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011448:	f003 0310 	and.w	r3, r3, #16
 801144c:	2b00      	cmp	r3, #0
 801144e:	d00a      	beq.n	8011466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	689b      	ldr	r3, [r3, #8]
 8011456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	430a      	orrs	r2, r1
 8011464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801146a:	f003 0320 	and.w	r3, r3, #32
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00a      	beq.n	8011488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	689b      	ldr	r3, [r3, #8]
 8011478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	430a      	orrs	r2, r1
 8011486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801148c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011490:	2b00      	cmp	r3, #0
 8011492:	d01a      	beq.n	80114ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	430a      	orrs	r2, r1
 80114a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114b2:	d10a      	bne.n	80114ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	430a      	orrs	r2, r1
 80114c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00a      	beq.n	80114ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	430a      	orrs	r2, r1
 80114ea:	605a      	str	r2, [r3, #4]
  }
}
 80114ec:	bf00      	nop
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b098      	sub	sp, #96	; 0x60
 80114fc:	af02      	add	r7, sp, #8
 80114fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011508:	f7f5 fa0e 	bl	8006928 <HAL_GetTick>
 801150c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f003 0308 	and.w	r3, r3, #8
 8011518:	2b08      	cmp	r3, #8
 801151a:	d12f      	bne.n	801157c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801151c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011520:	9300      	str	r3, [sp, #0]
 8011522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011524:	2200      	movs	r2, #0
 8011526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f000 f88e 	bl	801164c <UART_WaitOnFlagUntilTimeout>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d022      	beq.n	801157c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153e:	e853 3f00 	ldrex	r3, [r3]
 8011542:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801154a:	653b      	str	r3, [r7, #80]	; 0x50
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	461a      	mov	r2, r3
 8011552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011554:	647b      	str	r3, [r7, #68]	; 0x44
 8011556:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801155a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801155c:	e841 2300 	strex	r3, r2, [r1]
 8011560:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011564:	2b00      	cmp	r3, #0
 8011566:	d1e6      	bne.n	8011536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2220      	movs	r2, #32
 801156c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2200      	movs	r2, #0
 8011574:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011578:	2303      	movs	r3, #3
 801157a:	e063      	b.n	8011644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f003 0304 	and.w	r3, r3, #4
 8011586:	2b04      	cmp	r3, #4
 8011588:	d149      	bne.n	801161e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801158a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011592:	2200      	movs	r2, #0
 8011594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f857 	bl	801164c <UART_WaitOnFlagUntilTimeout>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d03c      	beq.n	801161e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	e853 3f00 	ldrex	r3, [r3]
 80115b0:	623b      	str	r3, [r7, #32]
   return(result);
 80115b2:	6a3b      	ldr	r3, [r7, #32]
 80115b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80115b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	461a      	mov	r2, r3
 80115c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115c2:	633b      	str	r3, [r7, #48]	; 0x30
 80115c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ca:	e841 2300 	strex	r3, r2, [r1]
 80115ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80115d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1e6      	bne.n	80115a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	3308      	adds	r3, #8
 80115dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	e853 3f00 	ldrex	r3, [r3]
 80115e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	f023 0301 	bic.w	r3, r3, #1
 80115ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	3308      	adds	r3, #8
 80115f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115f6:	61fa      	str	r2, [r7, #28]
 80115f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115fa:	69b9      	ldr	r1, [r7, #24]
 80115fc:	69fa      	ldr	r2, [r7, #28]
 80115fe:	e841 2300 	strex	r3, r2, [r1]
 8011602:	617b      	str	r3, [r7, #20]
   return(result);
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1e5      	bne.n	80115d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2220      	movs	r2, #32
 801160e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801161a:	2303      	movs	r3, #3
 801161c:	e012      	b.n	8011644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2220      	movs	r2, #32
 8011622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2220      	movs	r2, #32
 801162a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3758      	adds	r7, #88	; 0x58
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	603b      	str	r3, [r7, #0]
 8011658:	4613      	mov	r3, r2
 801165a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801165c:	e049      	b.n	80116f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801165e:	69bb      	ldr	r3, [r7, #24]
 8011660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011664:	d045      	beq.n	80116f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011666:	f7f5 f95f 	bl	8006928 <HAL_GetTick>
 801166a:	4602      	mov	r2, r0
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	69ba      	ldr	r2, [r7, #24]
 8011672:	429a      	cmp	r2, r3
 8011674:	d302      	bcc.n	801167c <UART_WaitOnFlagUntilTimeout+0x30>
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d101      	bne.n	8011680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801167c:	2303      	movs	r3, #3
 801167e:	e048      	b.n	8011712 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f003 0304 	and.w	r3, r3, #4
 801168a:	2b00      	cmp	r3, #0
 801168c:	d031      	beq.n	80116f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	69db      	ldr	r3, [r3, #28]
 8011694:	f003 0308 	and.w	r3, r3, #8
 8011698:	2b08      	cmp	r3, #8
 801169a:	d110      	bne.n	80116be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2208      	movs	r2, #8
 80116a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f000 f839 	bl	801171c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2208      	movs	r2, #8
 80116ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2200      	movs	r2, #0
 80116b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80116ba:	2301      	movs	r3, #1
 80116bc:	e029      	b.n	8011712 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	69db      	ldr	r3, [r3, #28]
 80116c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80116cc:	d111      	bne.n	80116f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80116d8:	68f8      	ldr	r0, [r7, #12]
 80116da:	f000 f81f 	bl	801171c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2220      	movs	r2, #32
 80116e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80116ee:	2303      	movs	r3, #3
 80116f0:	e00f      	b.n	8011712 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	69da      	ldr	r2, [r3, #28]
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	4013      	ands	r3, r2
 80116fc:	68ba      	ldr	r2, [r7, #8]
 80116fe:	429a      	cmp	r2, r3
 8011700:	bf0c      	ite	eq
 8011702:	2301      	moveq	r3, #1
 8011704:	2300      	movne	r3, #0
 8011706:	b2db      	uxtb	r3, r3
 8011708:	461a      	mov	r2, r3
 801170a:	79fb      	ldrb	r3, [r7, #7]
 801170c:	429a      	cmp	r2, r3
 801170e:	d0a6      	beq.n	801165e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011710:	2300      	movs	r3, #0
}
 8011712:	4618      	mov	r0, r3
 8011714:	3710      	adds	r7, #16
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
	...

0801171c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801171c:	b480      	push	{r7}
 801171e:	b095      	sub	sp, #84	; 0x54
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801172c:	e853 3f00 	ldrex	r3, [r3]
 8011730:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011738:	64fb      	str	r3, [r7, #76]	; 0x4c
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	461a      	mov	r2, r3
 8011740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011742:	643b      	str	r3, [r7, #64]	; 0x40
 8011744:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801174a:	e841 2300 	strex	r3, r2, [r1]
 801174e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011752:	2b00      	cmp	r3, #0
 8011754:	d1e6      	bne.n	8011724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	3308      	adds	r3, #8
 801175c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801175e:	6a3b      	ldr	r3, [r7, #32]
 8011760:	e853 3f00 	ldrex	r3, [r3]
 8011764:	61fb      	str	r3, [r7, #28]
   return(result);
 8011766:	69fa      	ldr	r2, [r7, #28]
 8011768:	4b1e      	ldr	r3, [pc, #120]	; (80117e4 <UART_EndRxTransfer+0xc8>)
 801176a:	4013      	ands	r3, r2
 801176c:	64bb      	str	r3, [r7, #72]	; 0x48
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	3308      	adds	r3, #8
 8011774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801177a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801177c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801177e:	e841 2300 	strex	r3, r2, [r1]
 8011782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011786:	2b00      	cmp	r3, #0
 8011788:	d1e5      	bne.n	8011756 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801178e:	2b01      	cmp	r3, #1
 8011790:	d118      	bne.n	80117c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	e853 3f00 	ldrex	r3, [r3]
 801179e:	60bb      	str	r3, [r7, #8]
   return(result);
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	f023 0310 	bic.w	r3, r3, #16
 80117a6:	647b      	str	r3, [r7, #68]	; 0x44
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	461a      	mov	r2, r3
 80117ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117b0:	61bb      	str	r3, [r7, #24]
 80117b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b4:	6979      	ldr	r1, [r7, #20]
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	e841 2300 	strex	r3, r2, [r1]
 80117bc:	613b      	str	r3, [r7, #16]
   return(result);
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1e6      	bne.n	8011792 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2220      	movs	r2, #32
 80117c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2200      	movs	r2, #0
 80117d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80117d8:	bf00      	nop
 80117da:	3754      	adds	r7, #84	; 0x54
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr
 80117e4:	effffffe 	.word	0xeffffffe

080117e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2200      	movs	r2, #0
 80117fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2200      	movs	r2, #0
 8011802:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f7fe ff52 	bl	80106b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801180c:	bf00      	nop
 801180e:	3710      	adds	r7, #16
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b088      	sub	sp, #32
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	e853 3f00 	ldrex	r3, [r3]
 8011828:	60bb      	str	r3, [r7, #8]
   return(result);
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011830:	61fb      	str	r3, [r7, #28]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	461a      	mov	r2, r3
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	61bb      	str	r3, [r7, #24]
 801183c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183e:	6979      	ldr	r1, [r7, #20]
 8011840:	69ba      	ldr	r2, [r7, #24]
 8011842:	e841 2300 	strex	r3, r2, [r1]
 8011846:	613b      	str	r3, [r7, #16]
   return(result);
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1e6      	bne.n	801181c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2220      	movs	r2, #32
 8011852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7fe ff1d 	bl	801069c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011862:	bf00      	nop
 8011864:	3720      	adds	r7, #32
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801186a:	b480      	push	{r7}
 801186c:	b083      	sub	sp, #12
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011872:	bf00      	nop
 8011874:	370c      	adds	r7, #12
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801187e:	b480      	push	{r7}
 8011880:	b083      	sub	sp, #12
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011886:	bf00      	nop
 8011888:	370c      	adds	r7, #12
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr

08011892 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011892:	b480      	push	{r7}
 8011894:	b083      	sub	sp, #12
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801189a:	bf00      	nop
 801189c:	370c      	adds	r7, #12
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr

080118a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118a6:	b480      	push	{r7}
 80118a8:	b085      	sub	sp, #20
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d101      	bne.n	80118bc <HAL_UARTEx_DisableFifoMode+0x16>
 80118b8:	2302      	movs	r3, #2
 80118ba:	e027      	b.n	801190c <HAL_UARTEx_DisableFifoMode+0x66>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2201      	movs	r2, #1
 80118c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2224      	movs	r2, #36	; 0x24
 80118c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f022 0201 	bic.w	r2, r2, #1
 80118e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80118ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2200      	movs	r2, #0
 80118f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	68fa      	ldr	r2, [r7, #12]
 80118f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2220      	movs	r2, #32
 80118fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3714      	adds	r7, #20
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011928:	2b01      	cmp	r3, #1
 801192a:	d101      	bne.n	8011930 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801192c:	2302      	movs	r3, #2
 801192e:	e02d      	b.n	801198c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2201      	movs	r2, #1
 8011934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2224      	movs	r2, #36	; 0x24
 801193c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	f022 0201 	bic.w	r2, r2, #1
 8011956:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	689b      	ldr	r3, [r3, #8]
 801195e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	683a      	ldr	r2, [r7, #0]
 8011968:	430a      	orrs	r2, r1
 801196a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f000 f84f 	bl	8011a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2220      	movs	r2, #32
 801197e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2200      	movs	r2, #0
 8011986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801198a:	2300      	movs	r3, #0
}
 801198c:	4618      	mov	r0, r3
 801198e:	3710      	adds	r7, #16
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b084      	sub	sp, #16
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d101      	bne.n	80119ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119a8:	2302      	movs	r3, #2
 80119aa:	e02d      	b.n	8011a08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2201      	movs	r2, #1
 80119b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2224      	movs	r2, #36	; 0x24
 80119b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f022 0201 	bic.w	r2, r2, #1
 80119d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	689b      	ldr	r3, [r3, #8]
 80119da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	683a      	ldr	r2, [r7, #0]
 80119e4:	430a      	orrs	r2, r1
 80119e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f000 f811 	bl	8011a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2220      	movs	r2, #32
 80119fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a06:	2300      	movs	r3, #0
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3710      	adds	r7, #16
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b085      	sub	sp, #20
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d108      	bne.n	8011a32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2201      	movs	r2, #1
 8011a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a30:	e031      	b.n	8011a96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a32:	2310      	movs	r3, #16
 8011a34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a36:	2310      	movs	r3, #16
 8011a38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	0e5b      	lsrs	r3, r3, #25
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	f003 0307 	and.w	r3, r3, #7
 8011a48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	0f5b      	lsrs	r3, r3, #29
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	f003 0307 	and.w	r3, r3, #7
 8011a58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a5a:	7bbb      	ldrb	r3, [r7, #14]
 8011a5c:	7b3a      	ldrb	r2, [r7, #12]
 8011a5e:	4911      	ldr	r1, [pc, #68]	; (8011aa4 <UARTEx_SetNbDataToProcess+0x94>)
 8011a60:	5c8a      	ldrb	r2, [r1, r2]
 8011a62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a66:	7b3a      	ldrb	r2, [r7, #12]
 8011a68:	490f      	ldr	r1, [pc, #60]	; (8011aa8 <UARTEx_SetNbDataToProcess+0x98>)
 8011a6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a78:	7bfb      	ldrb	r3, [r7, #15]
 8011a7a:	7b7a      	ldrb	r2, [r7, #13]
 8011a7c:	4909      	ldr	r1, [pc, #36]	; (8011aa4 <UARTEx_SetNbDataToProcess+0x94>)
 8011a7e:	5c8a      	ldrb	r2, [r1, r2]
 8011a80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011a84:	7b7a      	ldrb	r2, [r7, #13]
 8011a86:	4908      	ldr	r1, [pc, #32]	; (8011aa8 <UARTEx_SetNbDataToProcess+0x98>)
 8011a88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a8e:	b29a      	uxth	r2, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011a96:	bf00      	nop
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	0801f4f8 	.word	0x0801f4f8
 8011aa8:	0801f500 	.word	0x0801f500

08011aac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d121      	bne.n	8011b02 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	4b27      	ldr	r3, [pc, #156]	; (8011b60 <FMC_SDRAM_Init+0xb4>)
 8011ac4:	4013      	ands	r3, r2
 8011ac6:	683a      	ldr	r2, [r7, #0]
 8011ac8:	6851      	ldr	r1, [r2, #4]
 8011aca:	683a      	ldr	r2, [r7, #0]
 8011acc:	6892      	ldr	r2, [r2, #8]
 8011ace:	4311      	orrs	r1, r2
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	68d2      	ldr	r2, [r2, #12]
 8011ad4:	4311      	orrs	r1, r2
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	6912      	ldr	r2, [r2, #16]
 8011ada:	4311      	orrs	r1, r2
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	6952      	ldr	r2, [r2, #20]
 8011ae0:	4311      	orrs	r1, r2
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	6992      	ldr	r2, [r2, #24]
 8011ae6:	4311      	orrs	r1, r2
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	69d2      	ldr	r2, [r2, #28]
 8011aec:	4311      	orrs	r1, r2
 8011aee:	683a      	ldr	r2, [r7, #0]
 8011af0:	6a12      	ldr	r2, [r2, #32]
 8011af2:	4311      	orrs	r1, r2
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011af8:	430a      	orrs	r2, r1
 8011afa:	431a      	orrs	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	601a      	str	r2, [r3, #0]
 8011b00:	e026      	b.n	8011b50 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	69d9      	ldr	r1, [r3, #28]
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	6a1b      	ldr	r3, [r3, #32]
 8011b12:	4319      	orrs	r1, r3
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b18:	430b      	orrs	r3, r1
 8011b1a:	431a      	orrs	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	685a      	ldr	r2, [r3, #4]
 8011b24:	4b0e      	ldr	r3, [pc, #56]	; (8011b60 <FMC_SDRAM_Init+0xb4>)
 8011b26:	4013      	ands	r3, r2
 8011b28:	683a      	ldr	r2, [r7, #0]
 8011b2a:	6851      	ldr	r1, [r2, #4]
 8011b2c:	683a      	ldr	r2, [r7, #0]
 8011b2e:	6892      	ldr	r2, [r2, #8]
 8011b30:	4311      	orrs	r1, r2
 8011b32:	683a      	ldr	r2, [r7, #0]
 8011b34:	68d2      	ldr	r2, [r2, #12]
 8011b36:	4311      	orrs	r1, r2
 8011b38:	683a      	ldr	r2, [r7, #0]
 8011b3a:	6912      	ldr	r2, [r2, #16]
 8011b3c:	4311      	orrs	r1, r2
 8011b3e:	683a      	ldr	r2, [r7, #0]
 8011b40:	6952      	ldr	r2, [r2, #20]
 8011b42:	4311      	orrs	r1, r2
 8011b44:	683a      	ldr	r2, [r7, #0]
 8011b46:	6992      	ldr	r2, [r2, #24]
 8011b48:	430a      	orrs	r2, r1
 8011b4a:	431a      	orrs	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	370c      	adds	r7, #12
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop
 8011b60:	ffff8000 	.word	0xffff8000

08011b64 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d128      	bne.n	8011bc8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	689b      	ldr	r3, [r3, #8]
 8011b7a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	1e59      	subs	r1, r3, #1
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	685b      	ldr	r3, [r3, #4]
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	011b      	lsls	r3, r3, #4
 8011b8c:	4319      	orrs	r1, r3
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	689b      	ldr	r3, [r3, #8]
 8011b92:	3b01      	subs	r3, #1
 8011b94:	021b      	lsls	r3, r3, #8
 8011b96:	4319      	orrs	r1, r3
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	031b      	lsls	r3, r3, #12
 8011ba0:	4319      	orrs	r1, r3
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	691b      	ldr	r3, [r3, #16]
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	041b      	lsls	r3, r3, #16
 8011baa:	4319      	orrs	r1, r3
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	695b      	ldr	r3, [r3, #20]
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	051b      	lsls	r3, r3, #20
 8011bb4:	4319      	orrs	r1, r3
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	699b      	ldr	r3, [r3, #24]
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	061b      	lsls	r3, r3, #24
 8011bbe:	430b      	orrs	r3, r1
 8011bc0:	431a      	orrs	r2, r3
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	609a      	str	r2, [r3, #8]
 8011bc6:	e02d      	b.n	8011c24 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	689a      	ldr	r2, [r3, #8]
 8011bcc:	4b19      	ldr	r3, [pc, #100]	; (8011c34 <FMC_SDRAM_Timing_Init+0xd0>)
 8011bce:	4013      	ands	r3, r2
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	68d2      	ldr	r2, [r2, #12]
 8011bd4:	3a01      	subs	r2, #1
 8011bd6:	0311      	lsls	r1, r2, #12
 8011bd8:	68ba      	ldr	r2, [r7, #8]
 8011bda:	6952      	ldr	r2, [r2, #20]
 8011bdc:	3a01      	subs	r2, #1
 8011bde:	0512      	lsls	r2, r2, #20
 8011be0:	430a      	orrs	r2, r1
 8011be2:	431a      	orrs	r2, r3
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	1e59      	subs	r1, r3, #1
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	011b      	lsls	r3, r3, #4
 8011bfe:	4319      	orrs	r1, r3
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	3b01      	subs	r3, #1
 8011c06:	021b      	lsls	r3, r3, #8
 8011c08:	4319      	orrs	r1, r3
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	3b01      	subs	r3, #1
 8011c10:	041b      	lsls	r3, r3, #16
 8011c12:	4319      	orrs	r1, r3
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	699b      	ldr	r3, [r3, #24]
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	061b      	lsls	r3, r3, #24
 8011c1c:	430b      	orrs	r3, r1
 8011c1e:	431a      	orrs	r2, r3
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8011c24:	2300      	movs	r3, #0
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3714      	adds	r7, #20
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop
 8011c34:	ff0f0fff 	.word	0xff0f0fff

08011c38 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b085      	sub	sp, #20
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	691a      	ldr	r2, [r3, #16]
 8011c48:	4b0c      	ldr	r3, [pc, #48]	; (8011c7c <FMC_SDRAM_SendCommand+0x44>)
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	6811      	ldr	r1, [r2, #0]
 8011c50:	68ba      	ldr	r2, [r7, #8]
 8011c52:	6852      	ldr	r2, [r2, #4]
 8011c54:	4311      	orrs	r1, r2
 8011c56:	68ba      	ldr	r2, [r7, #8]
 8011c58:	6892      	ldr	r2, [r2, #8]
 8011c5a:	3a01      	subs	r2, #1
 8011c5c:	0152      	lsls	r2, r2, #5
 8011c5e:	4311      	orrs	r1, r2
 8011c60:	68ba      	ldr	r2, [r7, #8]
 8011c62:	68d2      	ldr	r2, [r2, #12]
 8011c64:	0252      	lsls	r2, r2, #9
 8011c66:	430a      	orrs	r2, r1
 8011c68:	431a      	orrs	r2, r3
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8011c6e:	2300      	movs	r3, #0
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr
 8011c7c:	ffc00000 	.word	0xffc00000

08011c80 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	695a      	ldr	r2, [r3, #20]
 8011c8e:	4b07      	ldr	r3, [pc, #28]	; (8011cac <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011c90:	4013      	ands	r3, r2
 8011c92:	683a      	ldr	r2, [r7, #0]
 8011c94:	0052      	lsls	r2, r2, #1
 8011c96:	431a      	orrs	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	370c      	adds	r7, #12
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop
 8011cac:	ffffc001 	.word	0xffffc001

08011cb0 <_ZL10ai_log_err9ai_error_PKc>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d009      	beq.n	8011cd4 <_ZL10ai_log_err9ai_error_PKc+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8011cc0:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8011cc2:	461a      	mov	r2, r3
        err.type, err.code);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8011cca:	6839      	ldr	r1, [r7, #0]
 8011ccc:	4806      	ldr	r0, [pc, #24]	; (8011ce8 <_ZL10ai_log_err9ai_error_PKc+0x38>)
 8011cce:	f00c f8cd 	bl	801de6c <iprintf>
 8011cd2:	e008      	b.n	8011ce6 <_ZL10ai_log_err9ai_error_PKc+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8011cd4:	793b      	ldrb	r3, [r7, #4]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8011cde:	461a      	mov	r2, r3
 8011ce0:	4802      	ldr	r0, [pc, #8]	; (8011cec <_ZL10ai_log_err9ai_error_PKc+0x3c>)
 8011ce2:	f00c f8c3 	bl	801de6c <iprintf>

  do {} while (1);
 8011ce6:	e7fe      	b.n	8011ce6 <_ZL10ai_log_err9ai_error_PKc+0x36>
 8011ce8:	0801ee38 	.word	0x0801ee38
 8011cec:	0801ee6c 	.word	0x0801ee6c

08011cf0 <_ZL11ai_boostrapPPv>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b086      	sub	sp, #24
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_face_detection_create_and_init(&face_detection, act_addr, NULL);
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	4828      	ldr	r0, [pc, #160]	; (8011da0 <_ZL11ai_boostrapPPv+0xb0>)
 8011cfe:	f002 fb39 	bl	8014374 <ai_face_detection_create_and_init>
 8011d02:	4603      	mov	r3, r0
 8011d04:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8011d06:	7b3b      	ldrb	r3, [r7, #12]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d006      	beq.n	8011d1a <_ZL11ai_boostrapPPv+0x2a>
    ai_log_err(err, "ai_face_detection_create_and_init");
 8011d0c:	4925      	ldr	r1, [pc, #148]	; (8011da4 <_ZL11ai_boostrapPPv+0xb4>)
 8011d0e:	68f8      	ldr	r0, [r7, #12]
 8011d10:	f7ff ffce 	bl	8011cb0 <_ZL10ai_log_err9ai_error_PKc>
    return -1;
 8011d14:	f04f 33ff 	mov.w	r3, #4294967295
 8011d18:	e03e      	b.n	8011d98 <_ZL11ai_boostrapPPv+0xa8>
  }

  ai_input = ai_face_detection_inputs_get(face_detection, NULL);
 8011d1a:	4b21      	ldr	r3, [pc, #132]	; (8011da0 <_ZL11ai_boostrapPPv+0xb0>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	2100      	movs	r1, #0
 8011d20:	4618      	mov	r0, r3
 8011d22:	f002 fb9b 	bl	801445c <ai_face_detection_inputs_get>
 8011d26:	4603      	mov	r3, r0
 8011d28:	4a1f      	ldr	r2, [pc, #124]	; (8011da8 <_ZL11ai_boostrapPPv+0xb8>)
 8011d2a:	6013      	str	r3, [r2, #0]
  ai_output = ai_face_detection_outputs_get(face_detection, NULL);
 8011d2c:	4b1c      	ldr	r3, [pc, #112]	; (8011da0 <_ZL11ai_boostrapPPv+0xb0>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2100      	movs	r1, #0
 8011d32:	4618      	mov	r0, r3
 8011d34:	f002 fbac 	bl	8014490 <ai_face_detection_outputs_get>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	4a1c      	ldr	r2, [pc, #112]	; (8011dac <_ZL11ai_boostrapPPv+0xbc>)
 8011d3c:	6013      	str	r3, [r2, #0]

#if defined(AI_FACE_DETECTION_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 8011d3e:	2300      	movs	r3, #0
 8011d40:	617b      	str	r3, [r7, #20]
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	dc10      	bgt.n	8011d6a <_ZL11ai_boostrapPPv+0x7a>
	data_ins[idx] = (ai_i8*)ai_input[idx].data;
 8011d48:	4b17      	ldr	r3, [pc, #92]	; (8011da8 <_ZL11ai_boostrapPPv+0xb8>)
 8011d4a:	6819      	ldr	r1, [r3, #0]
 8011d4c:	697a      	ldr	r2, [r7, #20]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	00db      	lsls	r3, r3, #3
 8011d52:	1a9b      	subs	r3, r3, r2
 8011d54:	009b      	lsls	r3, r3, #2
 8011d56:	440b      	add	r3, r1
 8011d58:	685a      	ldr	r2, [r3, #4]
 8011d5a:	4915      	ldr	r1, [pc, #84]	; (8011db0 <_ZL11ai_boostrapPPv+0xc0>)
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_IN_NUM; idx++) {
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	3301      	adds	r3, #1
 8011d66:	617b      	str	r3, [r7, #20]
 8011d68:	e7eb      	b.n	8011d42 <_ZL11ai_boostrapPPv+0x52>

#if defined(AI_FACE_DETECTION_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	613b      	str	r3, [r7, #16]
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dc10      	bgt.n	8011d96 <_ZL11ai_boostrapPPv+0xa6>
	data_outs[idx] = (ai_i8*)ai_output[idx].data;
 8011d74:	4b0d      	ldr	r3, [pc, #52]	; (8011dac <_ZL11ai_boostrapPPv+0xbc>)
 8011d76:	6819      	ldr	r1, [r3, #0]
 8011d78:	693a      	ldr	r2, [r7, #16]
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	00db      	lsls	r3, r3, #3
 8011d7e:	1a9b      	subs	r3, r3, r2
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	440b      	add	r3, r1
 8011d84:	685a      	ldr	r2, [r3, #4]
 8011d86:	490b      	ldr	r1, [pc, #44]	; (8011db4 <_ZL11ai_boostrapPPv+0xc4>)
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	3301      	adds	r3, #1
 8011d92:	613b      	str	r3, [r7, #16]
 8011d94:	e7eb      	b.n	8011d6e <_ZL11ai_boostrapPPv+0x7e>
  for (int idx=0; idx < AI_FACE_DETECTION_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8011d96:	2300      	movs	r3, #0
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3718      	adds	r7, #24
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	2405dec4 	.word	0x2405dec4
 8011da4:	0801ee9c 	.word	0x0801ee9c
 8011da8:	2405dec8 	.word	0x2405dec8
 8011dac:	2405decc 	.word	0x2405decc
 8011db0:	2402d03c 	.word	0x2402d03c
 8011db4:	2402d040 	.word	0x2402d040

08011db8 <_Z17MX_X_CUBE_AI_Initv>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8011dbc:	4803      	ldr	r0, [pc, #12]	; (8011dcc <_Z17MX_X_CUBE_AI_Initv+0x14>)
 8011dbe:	f00c f8db 	bl	801df78 <puts>

  ai_boostrap(data_activations0);
 8011dc2:	4803      	ldr	r0, [pc, #12]	; (8011dd0 <_Z17MX_X_CUBE_AI_Initv+0x18>)
 8011dc4:	f7ff ff94 	bl	8011cf0 <_ZL11ai_boostrapPPv>
    /* USER CODE END 5 */
}
 8011dc8:	bf00      	nop
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	0801eed8 	.word	0x0801eed8
 8011dd0:	24000054 	.word	0x24000054

08011dd4 <_Z20MX_X_CUBE_AI_ProcessPmS_>:

void MX_X_CUBE_AI_Process(uint32_t *buffer, uint32_t*rescaled_Img)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	f5ad 2d80 	sub.w	sp, sp, #262144	; 0x40000
 8011dda:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8011de4:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 8011de8:	6018      	str	r0, [r3, #0]
 8011dea:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8011dee:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 8011df2:	6019      	str	r1, [r3, #0]
	//float nn_input[AI_FACE_DETECTION_IN_1_SIZE];
	float nn_output[AI_FACE_DETECTION_OUT_1_SIZE];

	uint8_t input[AI_FACE_DETECTION_IN_1_SIZE];

	for(uint32_t i = 0; i<RESCALED_IMG*RESCALED_IMG; i++){
 8011df4:	2300      	movs	r3, #0
 8011df6:	4a4e      	ldr	r2, [pc, #312]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011df8:	443a      	add	r2, r7
 8011dfa:	6013      	str	r3, [r2, #0]
 8011dfc:	4b4c      	ldr	r3, [pc, #304]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011dfe:	443b      	add	r3, r7
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8011e06:	d250      	bcs.n	8011eaa <_Z20MX_X_CUBE_AI_ProcessPmS_+0xd6>
		input[3*i] = (rescaled_Img[i]&0xff0000)>>16;
 8011e08:	4b49      	ldr	r3, [pc, #292]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011e0a:	443b      	add	r3, r7
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8011e14:	f5a2 62d0 	sub.w	r2, r2, #1664	; 0x680
 8011e18:	6812      	ldr	r2, [r2, #0]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	0c19      	lsrs	r1, r3, #16
 8011e20:	4b43      	ldr	r3, [pc, #268]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011e22:	443b      	add	r3, r7
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	4613      	mov	r3, r2
 8011e28:	005b      	lsls	r3, r3, #1
 8011e2a:	4413      	add	r3, r2
 8011e2c:	b2c9      	uxtb	r1, r1
 8011e2e:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8011e32:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8011e36:	54d1      	strb	r1, [r2, r3]
		input[3*i+1] = (rescaled_Img[i]&0xff00)>>8;
 8011e38:	4b3d      	ldr	r3, [pc, #244]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011e3a:	443b      	add	r3, r7
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	009b      	lsls	r3, r3, #2
 8011e40:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8011e44:	f5a2 62d0 	sub.w	r2, r2, #1664	; 0x680
 8011e48:	6812      	ldr	r2, [r2, #0]
 8011e4a:	4413      	add	r3, r2
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	0a19      	lsrs	r1, r3, #8
 8011e50:	4b37      	ldr	r3, [pc, #220]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011e52:	443b      	add	r3, r7
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	4613      	mov	r3, r2
 8011e58:	005b      	lsls	r3, r3, #1
 8011e5a:	4413      	add	r3, r2
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	b2c9      	uxtb	r1, r1
 8011e60:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8011e64:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8011e68:	54d1      	strb	r1, [r2, r3]
		input[3*i+2] = (rescaled_Img[i]&0xff);
 8011e6a:	4b31      	ldr	r3, [pc, #196]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011e6c:	443b      	add	r3, r7
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8011e76:	f5a2 62d0 	sub.w	r2, r2, #1664	; 0x680
 8011e7a:	6812      	ldr	r2, [r2, #0]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	6819      	ldr	r1, [r3, #0]
 8011e80:	4b2b      	ldr	r3, [pc, #172]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011e82:	443b      	add	r3, r7
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	4613      	mov	r3, r2
 8011e88:	005b      	lsls	r3, r3, #1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	3302      	adds	r3, #2
 8011e8e:	b2c9      	uxtb	r1, r1
 8011e90:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8011e94:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8011e98:	54d1      	strb	r1, [r2, r3]
	for(uint32_t i = 0; i<RESCALED_IMG*RESCALED_IMG; i++){
 8011e9a:	4b25      	ldr	r3, [pc, #148]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011e9c:	443b      	add	r3, r7
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	4a23      	ldr	r2, [pc, #140]	; (8011f30 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x15c>)
 8011ea4:	443a      	add	r2, r7
 8011ea6:	6013      	str	r3, [r2, #0]
 8011ea8:	e7a8      	b.n	8011dfc <_Z20MX_X_CUBE_AI_ProcessPmS_+0x28>
//		input[i]=input[i]/255;
//	}

//	nn_input[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) ? 127.0 : -127.0;
//	nn_input[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) ? 127.0 : -127.0;
	ai_input->data = input;
 8011eaa:	4b22      	ldr	r3, [pc, #136]	; (8011f34 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x160>)
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	4b22      	ldr	r3, [pc, #136]	; (8011f38 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x164>)
 8011eb0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8011eb4:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8011eb8:	443b      	add	r3, r7
 8011eba:	6053      	str	r3, [r2, #4]
	ai_output->data = nn_output;
 8011ebc:	4b1f      	ldr	r3, [pc, #124]	; (8011f3c <_Z20MX_X_CUBE_AI_ProcessPmS_+0x168>)
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	4b1f      	ldr	r3, [pc, #124]	; (8011f40 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x16c>)
 8011ec2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8011ec6:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8011eca:	443b      	add	r3, r7
 8011ecc:	6053      	str	r3, [r2, #4]
	batch = ai_face_detection_run(face_detection, ai_input, ai_output);
 8011ece:	4b1d      	ldr	r3, [pc, #116]	; (8011f44 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x170>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4a18      	ldr	r2, [pc, #96]	; (8011f34 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x160>)
 8011ed4:	6811      	ldr	r1, [r2, #0]
 8011ed6:	4a19      	ldr	r2, [pc, #100]	; (8011f3c <_Z20MX_X_CUBE_AI_ProcessPmS_+0x168>)
 8011ed8:	6812      	ldr	r2, [r2, #0]
 8011eda:	4618      	mov	r0, r3
 8011edc:	f002 fb2e 	bl	801453c <ai_face_detection_run>
 8011ee0:	4b19      	ldr	r3, [pc, #100]	; (8011f48 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x174>)
 8011ee2:	443b      	add	r3, r7
 8011ee4:	6018      	str	r0, [r3, #0]
//			drawRectangle(buffer, (int32_t)x_start, (int32_t)x_end, (int32_t)y_start, (int32_t)y_end);
//
//		}
//	}

	postProcess(buffer, nn_output);
 8011ee6:	4b16      	ldr	r3, [pc, #88]	; (8011f40 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x16c>)
 8011ee8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8011eec:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8011ef0:	443b      	add	r3, r7
 8011ef2:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8011ef6:	f2a2 627c 	subw	r2, r2, #1660	; 0x67c
 8011efa:	4619      	mov	r1, r3
 8011efc:	6810      	ldr	r0, [r2, #0]
 8011efe:	f7f3 fabb 	bl	8005478 <_Z11postProcessPmPf>

	if (batch != 1) {
 8011f02:	4b11      	ldr	r3, [pc, #68]	; (8011f48 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x174>)
 8011f04:	443b      	add	r3, r7
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d009      	beq.n	8011f20 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x14c>
	ai_log_err(ai_face_detection_get_error(face_detection), "aiface_detection_face_detection");
 8011f0c:	4b0d      	ldr	r3, [pc, #52]	; (8011f44 <_Z20MX_X_CUBE_AI_ProcessPmS_+0x170>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f002 fa0d 	bl	8014330 <ai_face_detection_get_error>
 8011f16:	4603      	mov	r3, r0
 8011f18:	490c      	ldr	r1, [pc, #48]	; (8011f4c <_Z20MX_X_CUBE_AI_ProcessPmS_+0x178>)
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7ff fec8 	bl	8011cb0 <_ZL10ai_log_err9ai_error_PKc>
	}
    /* USER CODE END 6 */
}
 8011f20:	bf00      	nop
 8011f22:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
 8011f26:	f507 67d0 	add.w	r7, r7, #1664	; 0x680
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	0004067c 	.word	0x0004067c
 8011f34:	2405dec8 	.word	0x2405dec8
 8011f38:	fffbf988 	.word	0xfffbf988
 8011f3c:	2405decc 	.word	0x2405decc
 8011f40:	fffda988 	.word	0xfffda988
 8011f44:	2405dec4 	.word	0x2405dec4
 8011f48:	00040678 	.word	0x00040678
 8011f4c:	0801eef8 	.word	0x0801eef8

08011f50 <face_detection_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_face_detection_activations_map, 1, params)) {
 8011f5a:	683a      	ldr	r2, [r7, #0]
 8011f5c:	2101      	movs	r1, #1
 8011f5e:	4894      	ldr	r0, [pc, #592]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011f60:	f002 fbce 	bl	8014700 <ai_platform_get_activations_map>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f001 813a 	beq.w	80131e0 <face_detection_configure_activations+0x1290>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74380);
 8011f6c:	4b90      	ldr	r3, [pc, #576]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	4b90      	ldr	r3, [pc, #576]	; (80121b4 <face_detection_configure_activations+0x264>)
 8011f72:	4413      	add	r3, r2
 8011f74:	4a90      	ldr	r2, [pc, #576]	; (80121b8 <face_detection_configure_activations+0x268>)
 8011f76:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74380);
 8011f78:	4b8d      	ldr	r3, [pc, #564]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	4b8d      	ldr	r3, [pc, #564]	; (80121b4 <face_detection_configure_activations+0x264>)
 8011f7e:	4413      	add	r3, r2
 8011f80:	4a8d      	ldr	r2, [pc, #564]	; (80121b8 <face_detection_configure_activations+0x268>)
 8011f82:	60d3      	str	r3, [r2, #12]
    
    concat_149_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 184972);
 8011f84:	4b8a      	ldr	r3, [pc, #552]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	4b8c      	ldr	r3, [pc, #560]	; (80121bc <face_detection_configure_activations+0x26c>)
 8011f8a:	4413      	add	r3, r2
 8011f8c:	4a8c      	ldr	r2, [pc, #560]	; (80121c0 <face_detection_configure_activations+0x270>)
 8011f8e:	6093      	str	r3, [r2, #8]
    concat_149_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 184972);
 8011f90:	4b87      	ldr	r3, [pc, #540]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011f92:	681a      	ldr	r2, [r3, #0]
 8011f94:	4b89      	ldr	r3, [pc, #548]	; (80121bc <face_detection_configure_activations+0x26c>)
 8011f96:	4413      	add	r3, r2
 8011f98:	4a89      	ldr	r2, [pc, #548]	; (80121c0 <face_detection_configure_activations+0x270>)
 8011f9a:	60d3      	str	r3, [r2, #12]
    
    conversion_0_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74380);
 8011f9c:	4b84      	ldr	r3, [pc, #528]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	4b84      	ldr	r3, [pc, #528]	; (80121b4 <face_detection_configure_activations+0x264>)
 8011fa2:	4413      	add	r3, r2
 8011fa4:	4a87      	ldr	r2, [pc, #540]	; (80121c4 <face_detection_configure_activations+0x274>)
 8011fa6:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74380);
 8011fa8:	4b81      	ldr	r3, [pc, #516]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	4b81      	ldr	r3, [pc, #516]	; (80121b4 <face_detection_configure_activations+0x264>)
 8011fae:	4413      	add	r3, r2
 8011fb0:	4a84      	ldr	r2, [pc, #528]	; (80121c4 <face_detection_configure_activations+0x274>)
 8011fb2:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 73728);
 8011fb4:	4b7e      	ldr	r3, [pc, #504]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8011fbc:	4a82      	ldr	r2, [pc, #520]	; (80121c8 <face_detection_configure_activations+0x278>)
 8011fbe:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 73728);
 8011fc0:	4b7b      	ldr	r3, [pc, #492]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8011fc8:	4a7f      	ldr	r2, [pc, #508]	; (80121c8 <face_detection_configure_activations+0x278>)
 8011fca:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8011fcc:	4b78      	ldr	r3, [pc, #480]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4a7e      	ldr	r2, [pc, #504]	; (80121cc <face_detection_configure_activations+0x27c>)
 8011fd2:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8011fd4:	4b76      	ldr	r3, [pc, #472]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4a7c      	ldr	r2, [pc, #496]	; (80121cc <face_detection_configure_activations+0x27c>)
 8011fda:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8011fdc:	4b74      	ldr	r3, [pc, #464]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4a7b      	ldr	r2, [pc, #492]	; (80121d0 <face_detection_configure_activations+0x280>)
 8011fe2:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8011fe4:	4b72      	ldr	r3, [pc, #456]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4a79      	ldr	r2, [pc, #484]	; (80121d0 <face_detection_configure_activations+0x280>)
 8011fea:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 108140);
 8011fec:	4b70      	ldr	r3, [pc, #448]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	4b78      	ldr	r3, [pc, #480]	; (80121d4 <face_detection_configure_activations+0x284>)
 8011ff2:	4413      	add	r3, r2
 8011ff4:	4a78      	ldr	r2, [pc, #480]	; (80121d8 <face_detection_configure_activations+0x288>)
 8011ff6:	6093      	str	r3, [r2, #8]
    conv2d_2_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 108140);
 8011ff8:	4b6d      	ldr	r3, [pc, #436]	; (80121b0 <face_detection_configure_activations+0x260>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	4b75      	ldr	r3, [pc, #468]	; (80121d4 <face_detection_configure_activations+0x284>)
 8011ffe:	4413      	add	r3, r2
 8012000:	4a75      	ldr	r2, [pc, #468]	; (80121d8 <face_detection_configure_activations+0x288>)
 8012002:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012004:	4b6a      	ldr	r3, [pc, #424]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4a74      	ldr	r2, [pc, #464]	; (80121dc <face_detection_configure_activations+0x28c>)
 801200a:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801200c:	4b68      	ldr	r3, [pc, #416]	; (80121b0 <face_detection_configure_activations+0x260>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a72      	ldr	r2, [pc, #456]	; (80121dc <face_detection_configure_activations+0x28c>)
 8012012:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 300);
 8012014:	4b66      	ldr	r3, [pc, #408]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801201c:	4a70      	ldr	r2, [pc, #448]	; (80121e0 <face_detection_configure_activations+0x290>)
 801201e:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 300);
 8012020:	4b63      	ldr	r3, [pc, #396]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012028:	4a6d      	ldr	r2, [pc, #436]	; (80121e0 <face_detection_configure_activations+0x290>)
 801202a:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 107372);
 801202c:	4b60      	ldr	r3, [pc, #384]	; (80121b0 <face_detection_configure_activations+0x260>)
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	4b6c      	ldr	r3, [pc, #432]	; (80121e4 <face_detection_configure_activations+0x294>)
 8012032:	4413      	add	r3, r2
 8012034:	4a6c      	ldr	r2, [pc, #432]	; (80121e8 <face_detection_configure_activations+0x298>)
 8012036:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 107372);
 8012038:	4b5d      	ldr	r3, [pc, #372]	; (80121b0 <face_detection_configure_activations+0x260>)
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	4b69      	ldr	r3, [pc, #420]	; (80121e4 <face_detection_configure_activations+0x294>)
 801203e:	4413      	add	r3, r2
 8012040:	4a69      	ldr	r2, [pc, #420]	; (80121e8 <face_detection_configure_activations+0x298>)
 8012042:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012044:	4b5a      	ldr	r3, [pc, #360]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4a68      	ldr	r2, [pc, #416]	; (80121ec <face_detection_configure_activations+0x29c>)
 801204a:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801204c:	4b58      	ldr	r3, [pc, #352]	; (80121b0 <face_detection_configure_activations+0x260>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	4a66      	ldr	r2, [pc, #408]	; (80121ec <face_detection_configure_activations+0x29c>)
 8012052:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 32108);
 8012054:	4b56      	ldr	r3, [pc, #344]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	f647 536c 	movw	r3, #32108	; 0x7d6c
 801205c:	4413      	add	r3, r2
 801205e:	4a64      	ldr	r2, [pc, #400]	; (80121f0 <face_detection_configure_activations+0x2a0>)
 8012060:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 32108);
 8012062:	4b53      	ldr	r3, [pc, #332]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	f647 536c 	movw	r3, #32108	; 0x7d6c
 801206a:	4413      	add	r3, r2
 801206c:	4a60      	ldr	r2, [pc, #384]	; (80121f0 <face_detection_configure_activations+0x2a0>)
 801206e:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 32108);
 8012070:	4b4f      	ldr	r3, [pc, #316]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	f647 536c 	movw	r3, #32108	; 0x7d6c
 8012078:	4413      	add	r3, r2
 801207a:	4a5e      	ldr	r2, [pc, #376]	; (80121f4 <face_detection_configure_activations+0x2a4>)
 801207c:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 32108);
 801207e:	4b4c      	ldr	r3, [pc, #304]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012080:	681a      	ldr	r2, [r3, #0]
 8012082:	f647 536c 	movw	r3, #32108	; 0x7d6c
 8012086:	4413      	add	r3, r2
 8012088:	4a5a      	ldr	r2, [pc, #360]	; (80121f4 <face_detection_configure_activations+0x2a4>)
 801208a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 29020);
 801208c:	4b48      	ldr	r3, [pc, #288]	; (80121b0 <face_detection_configure_activations+0x260>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	f247 135c 	movw	r3, #29020	; 0x715c
 8012094:	4413      	add	r3, r2
 8012096:	4a58      	ldr	r2, [pc, #352]	; (80121f8 <face_detection_configure_activations+0x2a8>)
 8012098:	6093      	str	r3, [r2, #8]
    conv2d_5_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 29020);
 801209a:	4b45      	ldr	r3, [pc, #276]	; (80121b0 <face_detection_configure_activations+0x260>)
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	f247 135c 	movw	r3, #29020	; 0x715c
 80120a2:	4413      	add	r3, r2
 80120a4:	4a54      	ldr	r2, [pc, #336]	; (80121f8 <face_detection_configure_activations+0x2a8>)
 80120a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80120a8:	4b41      	ldr	r3, [pc, #260]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4a53      	ldr	r2, [pc, #332]	; (80121fc <face_detection_configure_activations+0x2ac>)
 80120ae:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80120b0:	4b3f      	ldr	r3, [pc, #252]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4a51      	ldr	r2, [pc, #324]	; (80121fc <face_detection_configure_activations+0x2ac>)
 80120b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 28252);
 80120b8:	4b3d      	ldr	r3, [pc, #244]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	f646 635c 	movw	r3, #28252	; 0x6e5c
 80120c0:	4413      	add	r3, r2
 80120c2:	4a4f      	ldr	r2, [pc, #316]	; (8012200 <face_detection_configure_activations+0x2b0>)
 80120c4:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 28252);
 80120c6:	4b3a      	ldr	r3, [pc, #232]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	f646 635c 	movw	r3, #28252	; 0x6e5c
 80120ce:	4413      	add	r3, r2
 80120d0:	4a4b      	ldr	r2, [pc, #300]	; (8012200 <face_detection_configure_activations+0x2b0>)
 80120d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 28252);
 80120d4:	4b36      	ldr	r3, [pc, #216]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	f646 635c 	movw	r3, #28252	; 0x6e5c
 80120dc:	4413      	add	r3, r2
 80120de:	4a49      	ldr	r2, [pc, #292]	; (8012204 <face_detection_configure_activations+0x2b4>)
 80120e0:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 28252);
 80120e2:	4b33      	ldr	r3, [pc, #204]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	f646 635c 	movw	r3, #28252	; 0x6e5c
 80120ea:	4413      	add	r3, r2
 80120ec:	4a45      	ldr	r2, [pc, #276]	; (8012204 <face_detection_configure_activations+0x2b4>)
 80120ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80120f0:	4b2f      	ldr	r3, [pc, #188]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	4a44      	ldr	r2, [pc, #272]	; (8012208 <face_detection_configure_activations+0x2b8>)
 80120f6:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80120f8:	4b2d      	ldr	r3, [pc, #180]	; (80121b0 <face_detection_configure_activations+0x260>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a42      	ldr	r2, [pc, #264]	; (8012208 <face_detection_configure_activations+0x2b8>)
 80120fe:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 65116);
 8012100:	4b2b      	ldr	r3, [pc, #172]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 8012108:	4413      	add	r3, r2
 801210a:	4a40      	ldr	r2, [pc, #256]	; (801220c <face_detection_configure_activations+0x2bc>)
 801210c:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 65116);
 801210e:	4b28      	ldr	r3, [pc, #160]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 8012116:	4413      	add	r3, r2
 8012118:	4a3c      	ldr	r2, [pc, #240]	; (801220c <face_detection_configure_activations+0x2bc>)
 801211a:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 65116);
 801211c:	4b24      	ldr	r3, [pc, #144]	; (80121b0 <face_detection_configure_activations+0x260>)
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 8012124:	4413      	add	r3, r2
 8012126:	4a3a      	ldr	r2, [pc, #232]	; (8012210 <face_detection_configure_activations+0x2c0>)
 8012128:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 65116);
 801212a:	4b21      	ldr	r3, [pc, #132]	; (80121b0 <face_detection_configure_activations+0x260>)
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	f64f 635c 	movw	r3, #65116	; 0xfe5c
 8012132:	4413      	add	r3, r2
 8012134:	4a36      	ldr	r2, [pc, #216]	; (8012210 <face_detection_configure_activations+0x2c0>)
 8012136:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 58844);
 8012138:	4b1d      	ldr	r3, [pc, #116]	; (80121b0 <face_detection_configure_activations+0x260>)
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	f24e 53dc 	movw	r3, #58844	; 0xe5dc
 8012140:	4413      	add	r3, r2
 8012142:	4a34      	ldr	r2, [pc, #208]	; (8012214 <face_detection_configure_activations+0x2c4>)
 8012144:	6093      	str	r3, [r2, #8]
    conv2d_7_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 58844);
 8012146:	4b1a      	ldr	r3, [pc, #104]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	f24e 53dc 	movw	r3, #58844	; 0xe5dc
 801214e:	4413      	add	r3, r2
 8012150:	4a30      	ldr	r2, [pc, #192]	; (8012214 <face_detection_configure_activations+0x2c4>)
 8012152:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012154:	4b16      	ldr	r3, [pc, #88]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4a2f      	ldr	r2, [pc, #188]	; (8012218 <face_detection_configure_activations+0x2c8>)
 801215a:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801215c:	4b14      	ldr	r3, [pc, #80]	; (80121b0 <face_detection_configure_activations+0x260>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4a2d      	ldr	r2, [pc, #180]	; (8012218 <face_detection_configure_activations+0x2c8>)
 8012162:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 57308);
 8012164:	4b12      	ldr	r3, [pc, #72]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 801216c:	4413      	add	r3, r2
 801216e:	4a2b      	ldr	r2, [pc, #172]	; (801221c <face_detection_configure_activations+0x2cc>)
 8012170:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 57308);
 8012172:	4b0f      	ldr	r3, [pc, #60]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 801217a:	4413      	add	r3, r2
 801217c:	4a27      	ldr	r2, [pc, #156]	; (801221c <face_detection_configure_activations+0x2cc>)
 801217e:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 57308);
 8012180:	4b0b      	ldr	r3, [pc, #44]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 8012188:	4413      	add	r3, r2
 801218a:	4a25      	ldr	r2, [pc, #148]	; (8012220 <face_detection_configure_activations+0x2d0>)
 801218c:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 57308);
 801218e:	4b08      	ldr	r3, [pc, #32]	; (80121b0 <face_detection_configure_activations+0x260>)
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
 8012196:	4413      	add	r3, r2
 8012198:	4a21      	ldr	r2, [pc, #132]	; (8012220 <face_detection_configure_activations+0x2d0>)
 801219a:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 801219c:	4b04      	ldr	r3, [pc, #16]	; (80121b0 <face_detection_configure_activations+0x260>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a20      	ldr	r2, [pc, #128]	; (8012224 <face_detection_configure_activations+0x2d4>)
 80121a2:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80121a4:	4b02      	ldr	r3, [pc, #8]	; (80121b0 <face_detection_configure_activations+0x260>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4a1e      	ldr	r2, [pc, #120]	; (8012224 <face_detection_configure_activations+0x2d4>)
 80121aa:	60d3      	str	r3, [r2, #12]
 80121ac:	e03c      	b.n	8012228 <face_detection_configure_activations+0x2d8>
 80121ae:	bf00      	nop
 80121b0:	2405ded0 	.word	0x2405ded0
 80121b4:	0001228c 	.word	0x0001228c
 80121b8:	24000528 	.word	0x24000528
 80121bc:	0002d28c 	.word	0x0002d28c
 80121c0:	24000508 	.word	0x24000508
 80121c4:	24000538 	.word	0x24000538
 80121c8:	24000cc8 	.word	0x24000cc8
 80121cc:	24000cf8 	.word	0x24000cf8
 80121d0:	24000558 	.word	0x24000558
 80121d4:	0001a66c 	.word	0x0001a66c
 80121d8:	24000568 	.word	0x24000568
 80121dc:	24000d28 	.word	0x24000d28
 80121e0:	24000d58 	.word	0x24000d58
 80121e4:	0001a36c 	.word	0x0001a36c
 80121e8:	24000588 	.word	0x24000588
 80121ec:	24000d88 	.word	0x24000d88
 80121f0:	24000db8 	.word	0x24000db8
 80121f4:	24000598 	.word	0x24000598
 80121f8:	240005b8 	.word	0x240005b8
 80121fc:	24000de8 	.word	0x24000de8
 8012200:	24000e18 	.word	0x24000e18
 8012204:	240005c8 	.word	0x240005c8
 8012208:	24000e28 	.word	0x24000e28
 801220c:	24000e38 	.word	0x24000e38
 8012210:	240005e8 	.word	0x240005e8
 8012214:	240005f8 	.word	0x240005f8
 8012218:	24000e48 	.word	0x24000e48
 801221c:	24000e58 	.word	0x24000e58
 8012220:	24000618 	.word	0x24000618
 8012224:	24000e68 	.word	0x24000e68
    
    conv2d_8_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 55772);
 8012228:	4b92      	ldr	r3, [pc, #584]	; (8012474 <face_detection_configure_activations+0x524>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 8012230:	4413      	add	r3, r2
 8012232:	4a91      	ldr	r2, [pc, #580]	; (8012478 <face_detection_configure_activations+0x528>)
 8012234:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 55772);
 8012236:	4b8f      	ldr	r3, [pc, #572]	; (8012474 <face_detection_configure_activations+0x524>)
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 801223e:	4413      	add	r3, r2
 8012240:	4a8d      	ldr	r2, [pc, #564]	; (8012478 <face_detection_configure_activations+0x528>)
 8012242:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 55772);
 8012244:	4b8b      	ldr	r3, [pc, #556]	; (8012474 <face_detection_configure_activations+0x524>)
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 801224c:	4413      	add	r3, r2
 801224e:	4a8b      	ldr	r2, [pc, #556]	; (801247c <face_detection_configure_activations+0x52c>)
 8012250:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 55772);
 8012252:	4b88      	ldr	r3, [pc, #544]	; (8012474 <face_detection_configure_activations+0x524>)
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	f64d 13dc 	movw	r3, #55772	; 0xd9dc
 801225a:	4413      	add	r3, r2
 801225c:	4a87      	ldr	r2, [pc, #540]	; (801247c <face_detection_configure_activations+0x52c>)
 801225e:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 52668);
 8012260:	4b84      	ldr	r3, [pc, #528]	; (8012474 <face_detection_configure_activations+0x524>)
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	f64c 53bc 	movw	r3, #52668	; 0xcdbc
 8012268:	4413      	add	r3, r2
 801226a:	4a85      	ldr	r2, [pc, #532]	; (8012480 <face_detection_configure_activations+0x530>)
 801226c:	6093      	str	r3, [r2, #8]
    conv2d_10_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 52668);
 801226e:	4b81      	ldr	r3, [pc, #516]	; (8012474 <face_detection_configure_activations+0x524>)
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	f64c 53bc 	movw	r3, #52668	; 0xcdbc
 8012276:	4413      	add	r3, r2
 8012278:	4a81      	ldr	r2, [pc, #516]	; (8012480 <face_detection_configure_activations+0x530>)
 801227a:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 801227c:	4b7d      	ldr	r3, [pc, #500]	; (8012474 <face_detection_configure_activations+0x524>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4a80      	ldr	r2, [pc, #512]	; (8012484 <face_detection_configure_activations+0x534>)
 8012282:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012284:	4b7b      	ldr	r3, [pc, #492]	; (8012474 <face_detection_configure_activations+0x524>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4a7e      	ldr	r2, [pc, #504]	; (8012484 <face_detection_configure_activations+0x534>)
 801228a:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1188);
 801228c:	4b79      	ldr	r3, [pc, #484]	; (8012474 <face_detection_configure_activations+0x524>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8012294:	4a7c      	ldr	r2, [pc, #496]	; (8012488 <face_detection_configure_activations+0x538>)
 8012296:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1188);
 8012298:	4b76      	ldr	r3, [pc, #472]	; (8012474 <face_detection_configure_activations+0x524>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80122a0:	4a79      	ldr	r2, [pc, #484]	; (8012488 <face_detection_configure_activations+0x538>)
 80122a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 19620);
 80122a4:	4b73      	ldr	r3, [pc, #460]	; (8012474 <face_detection_configure_activations+0x524>)
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	f644 43a4 	movw	r3, #19620	; 0x4ca4
 80122ac:	4413      	add	r3, r2
 80122ae:	4a77      	ldr	r2, [pc, #476]	; (801248c <face_detection_configure_activations+0x53c>)
 80122b0:	6093      	str	r3, [r2, #8]
    conv2d_10_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 19620);
 80122b2:	4b70      	ldr	r3, [pc, #448]	; (8012474 <face_detection_configure_activations+0x524>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	f644 43a4 	movw	r3, #19620	; 0x4ca4
 80122ba:	4413      	add	r3, r2
 80122bc:	4a73      	ldr	r2, [pc, #460]	; (801248c <face_detection_configure_activations+0x53c>)
 80122be:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80122c0:	4b6c      	ldr	r3, [pc, #432]	; (8012474 <face_detection_configure_activations+0x524>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4a72      	ldr	r2, [pc, #456]	; (8012490 <face_detection_configure_activations+0x540>)
 80122c6:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80122c8:	4b6a      	ldr	r3, [pc, #424]	; (8012474 <face_detection_configure_activations+0x524>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4a70      	ldr	r2, [pc, #448]	; (8012490 <face_detection_configure_activations+0x540>)
 80122ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 38052);
 80122d0:	4b68      	ldr	r3, [pc, #416]	; (8012474 <face_detection_configure_activations+0x524>)
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	f249 43a4 	movw	r3, #38052	; 0x94a4
 80122d8:	4413      	add	r3, r2
 80122da:	4a6e      	ldr	r2, [pc, #440]	; (8012494 <face_detection_configure_activations+0x544>)
 80122dc:	6093      	str	r3, [r2, #8]
    conv2d_11_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 38052);
 80122de:	4b65      	ldr	r3, [pc, #404]	; (8012474 <face_detection_configure_activations+0x524>)
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	f249 43a4 	movw	r3, #38052	; 0x94a4
 80122e6:	4413      	add	r3, r2
 80122e8:	4a6a      	ldr	r2, [pc, #424]	; (8012494 <face_detection_configure_activations+0x544>)
 80122ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74916);
 80122ec:	4b61      	ldr	r3, [pc, #388]	; (8012474 <face_detection_configure_activations+0x524>)
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	4b69      	ldr	r3, [pc, #420]	; (8012498 <face_detection_configure_activations+0x548>)
 80122f2:	4413      	add	r3, r2
 80122f4:	4a69      	ldr	r2, [pc, #420]	; (801249c <face_detection_configure_activations+0x54c>)
 80122f6:	6093      	str	r3, [r2, #8]
    conv2d_11_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74916);
 80122f8:	4b5e      	ldr	r3, [pc, #376]	; (8012474 <face_detection_configure_activations+0x524>)
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	4b66      	ldr	r3, [pc, #408]	; (8012498 <face_detection_configure_activations+0x548>)
 80122fe:	4413      	add	r3, r2
 8012300:	4a66      	ldr	r2, [pc, #408]	; (801249c <face_detection_configure_activations+0x54c>)
 8012302:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012304:	4b5b      	ldr	r3, [pc, #364]	; (8012474 <face_detection_configure_activations+0x524>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	4a65      	ldr	r2, [pc, #404]	; (80124a0 <face_detection_configure_activations+0x550>)
 801230a:	6093      	str	r3, [r2, #8]
    conv2d_12_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801230c:	4b59      	ldr	r3, [pc, #356]	; (8012474 <face_detection_configure_activations+0x524>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a63      	ldr	r2, [pc, #396]	; (80124a0 <face_detection_configure_activations+0x550>)
 8012312:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 43264);
 8012314:	4b57      	ldr	r3, [pc, #348]	; (8012474 <face_detection_configure_activations+0x524>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
 801231c:	4a61      	ldr	r2, [pc, #388]	; (80124a4 <face_detection_configure_activations+0x554>)
 801231e:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 43264);
 8012320:	4b54      	ldr	r3, [pc, #336]	; (8012474 <face_detection_configure_activations+0x524>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f503 4329 	add.w	r3, r3, #43264	; 0xa900
 8012328:	4a5e      	ldr	r2, [pc, #376]	; (80124a4 <face_detection_configure_activations+0x554>)
 801232a:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 45636);
 801232c:	4b51      	ldr	r3, [pc, #324]	; (8012474 <face_detection_configure_activations+0x524>)
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	f24b 2344 	movw	r3, #45636	; 0xb244
 8012334:	4413      	add	r3, r2
 8012336:	4a5c      	ldr	r2, [pc, #368]	; (80124a8 <face_detection_configure_activations+0x558>)
 8012338:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 45636);
 801233a:	4b4e      	ldr	r3, [pc, #312]	; (8012474 <face_detection_configure_activations+0x524>)
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	f24b 2344 	movw	r3, #45636	; 0xb244
 8012342:	4413      	add	r3, r2
 8012344:	4a58      	ldr	r2, [pc, #352]	; (80124a8 <face_detection_configure_activations+0x558>)
 8012346:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 82500);
 8012348:	4b4a      	ldr	r3, [pc, #296]	; (8012474 <face_detection_configure_activations+0x524>)
 801234a:	681a      	ldr	r2, [r3, #0]
 801234c:	4b57      	ldr	r3, [pc, #348]	; (80124ac <face_detection_configure_activations+0x55c>)
 801234e:	4413      	add	r3, r2
 8012350:	4a57      	ldr	r2, [pc, #348]	; (80124b0 <face_detection_configure_activations+0x560>)
 8012352:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 82500);
 8012354:	4b47      	ldr	r3, [pc, #284]	; (8012474 <face_detection_configure_activations+0x524>)
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	4b54      	ldr	r3, [pc, #336]	; (80124ac <face_detection_configure_activations+0x55c>)
 801235a:	4413      	add	r3, r2
 801235c:	4a54      	ldr	r2, [pc, #336]	; (80124b0 <face_detection_configure_activations+0x560>)
 801235e:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012360:	4b44      	ldr	r3, [pc, #272]	; (8012474 <face_detection_configure_activations+0x524>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4a53      	ldr	r2, [pc, #332]	; (80124b4 <face_detection_configure_activations+0x564>)
 8012366:	6093      	str	r3, [r2, #8]
    conv2d_13_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012368:	4b42      	ldr	r3, [pc, #264]	; (8012474 <face_detection_configure_activations+0x524>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4a51      	ldr	r2, [pc, #324]	; (80124b4 <face_detection_configure_activations+0x564>)
 801236e:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 896);
 8012370:	4b40      	ldr	r3, [pc, #256]	; (8012474 <face_detection_configure_activations+0x524>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8012378:	4a4f      	ldr	r2, [pc, #316]	; (80124b8 <face_detection_configure_activations+0x568>)
 801237a:	6093      	str	r3, [r2, #8]
    conv2d_13_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 896);
 801237c:	4b3d      	ldr	r3, [pc, #244]	; (8012474 <face_detection_configure_activations+0x524>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8012384:	4a4c      	ldr	r2, [pc, #304]	; (80124b8 <face_detection_configure_activations+0x568>)
 8012386:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 37760);
 8012388:	4b3a      	ldr	r3, [pc, #232]	; (8012474 <face_detection_configure_activations+0x524>)
 801238a:	681a      	ldr	r2, [r3, #0]
 801238c:	f249 3380 	movw	r3, #37760	; 0x9380
 8012390:	4413      	add	r3, r2
 8012392:	4a4a      	ldr	r2, [pc, #296]	; (80124bc <face_detection_configure_activations+0x56c>)
 8012394:	6093      	str	r3, [r2, #8]
    conv2d_13_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 37760);
 8012396:	4b37      	ldr	r3, [pc, #220]	; (8012474 <face_detection_configure_activations+0x524>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	f249 3380 	movw	r3, #37760	; 0x9380
 801239e:	4413      	add	r3, r2
 80123a0:	4a46      	ldr	r2, [pc, #280]	; (80124bc <face_detection_configure_activations+0x56c>)
 80123a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80123a4:	4b33      	ldr	r3, [pc, #204]	; (8012474 <face_detection_configure_activations+0x524>)
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	4b45      	ldr	r3, [pc, #276]	; (80124c0 <face_detection_configure_activations+0x570>)
 80123aa:	4413      	add	r3, r2
 80123ac:	4a45      	ldr	r2, [pc, #276]	; (80124c4 <face_detection_configure_activations+0x574>)
 80123ae:	6093      	str	r3, [r2, #8]
    conv2d_16_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80123b0:	4b30      	ldr	r3, [pc, #192]	; (8012474 <face_detection_configure_activations+0x524>)
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	4b42      	ldr	r3, [pc, #264]	; (80124c0 <face_detection_configure_activations+0x570>)
 80123b6:	4413      	add	r3, r2
 80123b8:	4a42      	ldr	r2, [pc, #264]	; (80124c4 <face_detection_configure_activations+0x574>)
 80123ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80123bc:	4b2d      	ldr	r3, [pc, #180]	; (8012474 <face_detection_configure_activations+0x524>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a41      	ldr	r2, [pc, #260]	; (80124c8 <face_detection_configure_activations+0x578>)
 80123c2:	6093      	str	r3, [r2, #8]
    conv2d_16_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80123c4:	4b2b      	ldr	r3, [pc, #172]	; (8012474 <face_detection_configure_activations+0x524>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	4a3f      	ldr	r2, [pc, #252]	; (80124c8 <face_detection_configure_activations+0x578>)
 80123ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 2372);
 80123cc:	4b29      	ldr	r3, [pc, #164]	; (8012474 <face_detection_configure_activations+0x524>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80123d4:	4a3d      	ldr	r2, [pc, #244]	; (80124cc <face_detection_configure_activations+0x57c>)
 80123d6:	6093      	str	r3, [r2, #8]
    conv2d_16_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2372);
 80123d8:	4b26      	ldr	r3, [pc, #152]	; (8012474 <face_detection_configure_activations+0x524>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80123e0:	4a3a      	ldr	r2, [pc, #232]	; (80124cc <face_detection_configure_activations+0x57c>)
 80123e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 11588);
 80123e4:	4b23      	ldr	r3, [pc, #140]	; (8012474 <face_detection_configure_activations+0x524>)
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	f642 5344 	movw	r3, #11588	; 0x2d44
 80123ec:	4413      	add	r3, r2
 80123ee:	4a38      	ldr	r2, [pc, #224]	; (80124d0 <face_detection_configure_activations+0x580>)
 80123f0:	6093      	str	r3, [r2, #8]
    conv2d_16_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 11588);
 80123f2:	4b20      	ldr	r3, [pc, #128]	; (8012474 <face_detection_configure_activations+0x524>)
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	f642 5344 	movw	r3, #11588	; 0x2d44
 80123fa:	4413      	add	r3, r2
 80123fc:	4a34      	ldr	r2, [pc, #208]	; (80124d0 <face_detection_configure_activations+0x580>)
 80123fe:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012400:	4b1c      	ldr	r3, [pc, #112]	; (8012474 <face_detection_configure_activations+0x524>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4a33      	ldr	r2, [pc, #204]	; (80124d4 <face_detection_configure_activations+0x584>)
 8012406:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012408:	4b1a      	ldr	r3, [pc, #104]	; (8012474 <face_detection_configure_activations+0x524>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	4a31      	ldr	r2, [pc, #196]	; (80124d4 <face_detection_configure_activations+0x584>)
 801240e:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012410:	4b18      	ldr	r3, [pc, #96]	; (8012474 <face_detection_configure_activations+0x524>)
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	4b2a      	ldr	r3, [pc, #168]	; (80124c0 <face_detection_configure_activations+0x570>)
 8012416:	4413      	add	r3, r2
 8012418:	4a2f      	ldr	r2, [pc, #188]	; (80124d8 <face_detection_configure_activations+0x588>)
 801241a:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801241c:	4b15      	ldr	r3, [pc, #84]	; (8012474 <face_detection_configure_activations+0x524>)
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	4b27      	ldr	r3, [pc, #156]	; (80124c0 <face_detection_configure_activations+0x570>)
 8012422:	4413      	add	r3, r2
 8012424:	4a2c      	ldr	r2, [pc, #176]	; (80124d8 <face_detection_configure_activations+0x588>)
 8012426:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8012428:	4b12      	ldr	r3, [pc, #72]	; (8012474 <face_detection_configure_activations+0x524>)
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	4b2b      	ldr	r3, [pc, #172]	; (80124dc <face_detection_configure_activations+0x58c>)
 801242e:	4413      	add	r3, r2
 8012430:	4a2b      	ldr	r2, [pc, #172]	; (80124e0 <face_detection_configure_activations+0x590>)
 8012432:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8012434:	4b0f      	ldr	r3, [pc, #60]	; (8012474 <face_detection_configure_activations+0x524>)
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	4b28      	ldr	r3, [pc, #160]	; (80124dc <face_detection_configure_activations+0x58c>)
 801243a:	4413      	add	r3, r2
 801243c:	4a28      	ldr	r2, [pc, #160]	; (80124e0 <face_detection_configure_activations+0x590>)
 801243e:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012440:	4b0c      	ldr	r3, [pc, #48]	; (8012474 <face_detection_configure_activations+0x524>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	4a27      	ldr	r2, [pc, #156]	; (80124e4 <face_detection_configure_activations+0x594>)
 8012446:	6093      	str	r3, [r2, #8]
    conv2d_18_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012448:	4b0a      	ldr	r3, [pc, #40]	; (8012474 <face_detection_configure_activations+0x524>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	4a25      	ldr	r2, [pc, #148]	; (80124e4 <face_detection_configure_activations+0x594>)
 801244e:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8012450:	4b08      	ldr	r3, [pc, #32]	; (8012474 <face_detection_configure_activations+0x524>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8012458:	4a23      	ldr	r2, [pc, #140]	; (80124e8 <face_detection_configure_activations+0x598>)
 801245a:	6093      	str	r3, [r2, #8]
    conv2d_18_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 801245c:	4b05      	ldr	r3, [pc, #20]	; (8012474 <face_detection_configure_activations+0x524>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8012464:	4a20      	ldr	r2, [pc, #128]	; (80124e8 <face_detection_configure_activations+0x598>)
 8012466:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012468:	4b02      	ldr	r3, [pc, #8]	; (8012474 <face_detection_configure_activations+0x524>)
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	4b14      	ldr	r3, [pc, #80]	; (80124c0 <face_detection_configure_activations+0x570>)
 801246e:	4413      	add	r3, r2
 8012470:	e03c      	b.n	80124ec <face_detection_configure_activations+0x59c>
 8012472:	bf00      	nop
 8012474:	2405ded0 	.word	0x2405ded0
 8012478:	24000e78 	.word	0x24000e78
 801247c:	24000628 	.word	0x24000628
 8012480:	24000648 	.word	0x24000648
 8012484:	24000e88 	.word	0x24000e88
 8012488:	24000e98 	.word	0x24000e98
 801248c:	24000658 	.word	0x24000658
 8012490:	24000ea8 	.word	0x24000ea8
 8012494:	24000eb8 	.word	0x24000eb8
 8012498:	000124a4 	.word	0x000124a4
 801249c:	24000678 	.word	0x24000678
 80124a0:	24000688 	.word	0x24000688
 80124a4:	24000ec8 	.word	0x24000ec8
 80124a8:	24000ed8 	.word	0x24000ed8
 80124ac:	00014244 	.word	0x00014244
 80124b0:	240006a8 	.word	0x240006a8
 80124b4:	24000ee8 	.word	0x24000ee8
 80124b8:	24000ef8 	.word	0x24000ef8
 80124bc:	240006b8 	.word	0x240006b8
 80124c0:	00012380 	.word	0x00012380
 80124c4:	240006d8 	.word	0x240006d8
 80124c8:	24000f08 	.word	0x24000f08
 80124cc:	24000f18 	.word	0x24000f18
 80124d0:	240006e8 	.word	0x240006e8
 80124d4:	24000f28 	.word	0x24000f28
 80124d8:	24000f38 	.word	0x24000f38
 80124dc:	00016b80 	.word	0x00016b80
 80124e0:	24000708 	.word	0x24000708
 80124e4:	24000718 	.word	0x24000718
 80124e8:	24000f48 	.word	0x24000f48
 80124ec:	4a8b      	ldr	r2, [pc, #556]	; (801271c <face_detection_configure_activations+0x7cc>)
 80124ee:	6093      	str	r3, [r2, #8]
    conv2d_18_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80124f0:	4b8b      	ldr	r3, [pc, #556]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	4b8b      	ldr	r3, [pc, #556]	; (8012724 <face_detection_configure_activations+0x7d4>)
 80124f6:	4413      	add	r3, r2
 80124f8:	4a88      	ldr	r2, [pc, #544]	; (801271c <face_detection_configure_activations+0x7cc>)
 80124fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80124fc:	4b88      	ldr	r3, [pc, #544]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80124fe:	681a      	ldr	r2, [r3, #0]
 8012500:	4b89      	ldr	r3, [pc, #548]	; (8012728 <face_detection_configure_activations+0x7d8>)
 8012502:	4413      	add	r3, r2
 8012504:	4a89      	ldr	r2, [pc, #548]	; (801272c <face_detection_configure_activations+0x7dc>)
 8012506:	6093      	str	r3, [r2, #8]
    conv2d_18_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8012508:	4b85      	ldr	r3, [pc, #532]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	4b86      	ldr	r3, [pc, #536]	; (8012728 <face_detection_configure_activations+0x7d8>)
 801250e:	4413      	add	r3, r2
 8012510:	4a86      	ldr	r2, [pc, #536]	; (801272c <face_detection_configure_activations+0x7dc>)
 8012512:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012514:	4b82      	ldr	r3, [pc, #520]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	4a85      	ldr	r2, [pc, #532]	; (8012730 <face_detection_configure_activations+0x7e0>)
 801251a:	6093      	str	r3, [r2, #8]
    conv2d_19_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801251c:	4b80      	ldr	r3, [pc, #512]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4a83      	ldr	r2, [pc, #524]	; (8012730 <face_detection_configure_activations+0x7e0>)
 8012522:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8012524:	4b7e      	ldr	r3, [pc, #504]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 801252c:	4a81      	ldr	r2, [pc, #516]	; (8012734 <face_detection_configure_activations+0x7e4>)
 801252e:	6093      	str	r3, [r2, #8]
    conv2d_19_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8012530:	4b7b      	ldr	r3, [pc, #492]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8012538:	4a7e      	ldr	r2, [pc, #504]	; (8012734 <face_detection_configure_activations+0x7e4>)
 801253a:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801253c:	4b78      	ldr	r3, [pc, #480]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	4b78      	ldr	r3, [pc, #480]	; (8012724 <face_detection_configure_activations+0x7d4>)
 8012542:	4413      	add	r3, r2
 8012544:	4a7c      	ldr	r2, [pc, #496]	; (8012738 <face_detection_configure_activations+0x7e8>)
 8012546:	6093      	str	r3, [r2, #8]
    conv2d_19_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012548:	4b75      	ldr	r3, [pc, #468]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801254a:	681a      	ldr	r2, [r3, #0]
 801254c:	4b75      	ldr	r3, [pc, #468]	; (8012724 <face_detection_configure_activations+0x7d4>)
 801254e:	4413      	add	r3, r2
 8012550:	4a79      	ldr	r2, [pc, #484]	; (8012738 <face_detection_configure_activations+0x7e8>)
 8012552:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012554:	4b72      	ldr	r3, [pc, #456]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	4a78      	ldr	r2, [pc, #480]	; (801273c <face_detection_configure_activations+0x7ec>)
 801255a:	6093      	str	r3, [r2, #8]
    conv2d_20_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801255c:	4b70      	ldr	r3, [pc, #448]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4a76      	ldr	r2, [pc, #472]	; (801273c <face_detection_configure_activations+0x7ec>)
 8012562:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8012564:	4b6e      	ldr	r3, [pc, #440]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 801256c:	4a74      	ldr	r2, [pc, #464]	; (8012740 <face_detection_configure_activations+0x7f0>)
 801256e:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8012570:	4b6b      	ldr	r3, [pc, #428]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8012578:	4a71      	ldr	r2, [pc, #452]	; (8012740 <face_detection_configure_activations+0x7f0>)
 801257a:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801257c:	4b68      	ldr	r3, [pc, #416]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	4b68      	ldr	r3, [pc, #416]	; (8012724 <face_detection_configure_activations+0x7d4>)
 8012582:	4413      	add	r3, r2
 8012584:	4a6f      	ldr	r2, [pc, #444]	; (8012744 <face_detection_configure_activations+0x7f4>)
 8012586:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012588:	4b65      	ldr	r3, [pc, #404]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	4b65      	ldr	r3, [pc, #404]	; (8012724 <face_detection_configure_activations+0x7d4>)
 801258e:	4413      	add	r3, r2
 8012590:	4a6c      	ldr	r2, [pc, #432]	; (8012744 <face_detection_configure_activations+0x7f4>)
 8012592:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8012594:	4b62      	ldr	r3, [pc, #392]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	4b63      	ldr	r3, [pc, #396]	; (8012728 <face_detection_configure_activations+0x7d8>)
 801259a:	4413      	add	r3, r2
 801259c:	4a6a      	ldr	r2, [pc, #424]	; (8012748 <face_detection_configure_activations+0x7f8>)
 801259e:	6093      	str	r3, [r2, #8]
    conv2d_20_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80125a0:	4b5f      	ldr	r3, [pc, #380]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125a2:	681a      	ldr	r2, [r3, #0]
 80125a4:	4b60      	ldr	r3, [pc, #384]	; (8012728 <face_detection_configure_activations+0x7d8>)
 80125a6:	4413      	add	r3, r2
 80125a8:	4a67      	ldr	r2, [pc, #412]	; (8012748 <face_detection_configure_activations+0x7f8>)
 80125aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80125ac:	4b5c      	ldr	r3, [pc, #368]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	4a66      	ldr	r2, [pc, #408]	; (801274c <face_detection_configure_activations+0x7fc>)
 80125b2:	6093      	str	r3, [r2, #8]
    conv2d_21_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80125b4:	4b5a      	ldr	r3, [pc, #360]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a64      	ldr	r2, [pc, #400]	; (801274c <face_detection_configure_activations+0x7fc>)
 80125ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80125bc:	4b58      	ldr	r3, [pc, #352]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80125c4:	4a62      	ldr	r2, [pc, #392]	; (8012750 <face_detection_configure_activations+0x800>)
 80125c6:	6093      	str	r3, [r2, #8]
    conv2d_21_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80125c8:	4b55      	ldr	r3, [pc, #340]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80125d0:	4a5f      	ldr	r2, [pc, #380]	; (8012750 <face_detection_configure_activations+0x800>)
 80125d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80125d4:	4b52      	ldr	r3, [pc, #328]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	4b52      	ldr	r3, [pc, #328]	; (8012724 <face_detection_configure_activations+0x7d4>)
 80125da:	4413      	add	r3, r2
 80125dc:	4a5d      	ldr	r2, [pc, #372]	; (8012754 <face_detection_configure_activations+0x804>)
 80125de:	6093      	str	r3, [r2, #8]
    conv2d_21_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80125e0:	4b4f      	ldr	r3, [pc, #316]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125e2:	681a      	ldr	r2, [r3, #0]
 80125e4:	4b4f      	ldr	r3, [pc, #316]	; (8012724 <face_detection_configure_activations+0x7d4>)
 80125e6:	4413      	add	r3, r2
 80125e8:	4a5a      	ldr	r2, [pc, #360]	; (8012754 <face_detection_configure_activations+0x804>)
 80125ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80125ec:	4b4c      	ldr	r3, [pc, #304]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	4a59      	ldr	r2, [pc, #356]	; (8012758 <face_detection_configure_activations+0x808>)
 80125f2:	6093      	str	r3, [r2, #8]
    conv2d_22_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80125f4:	4b4a      	ldr	r3, [pc, #296]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4a57      	ldr	r2, [pc, #348]	; (8012758 <face_detection_configure_activations+0x808>)
 80125fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 80125fc:	4b48      	ldr	r3, [pc, #288]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8012604:	4a55      	ldr	r2, [pc, #340]	; (801275c <face_detection_configure_activations+0x80c>)
 8012606:	6093      	str	r3, [r2, #8]
    conv2d_22_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8012608:	4b45      	ldr	r3, [pc, #276]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 8012610:	4a52      	ldr	r2, [pc, #328]	; (801275c <face_detection_configure_activations+0x80c>)
 8012612:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012614:	4b42      	ldr	r3, [pc, #264]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	4b42      	ldr	r3, [pc, #264]	; (8012724 <face_detection_configure_activations+0x7d4>)
 801261a:	4413      	add	r3, r2
 801261c:	4a50      	ldr	r2, [pc, #320]	; (8012760 <face_detection_configure_activations+0x810>)
 801261e:	6093      	str	r3, [r2, #8]
    conv2d_22_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012620:	4b3f      	ldr	r3, [pc, #252]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	4b3f      	ldr	r3, [pc, #252]	; (8012724 <face_detection_configure_activations+0x7d4>)
 8012626:	4413      	add	r3, r2
 8012628:	4a4d      	ldr	r2, [pc, #308]	; (8012760 <face_detection_configure_activations+0x810>)
 801262a:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 801262c:	4b3c      	ldr	r3, [pc, #240]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801262e:	681a      	ldr	r2, [r3, #0]
 8012630:	4b3d      	ldr	r3, [pc, #244]	; (8012728 <face_detection_configure_activations+0x7d8>)
 8012632:	4413      	add	r3, r2
 8012634:	4a4b      	ldr	r2, [pc, #300]	; (8012764 <face_detection_configure_activations+0x814>)
 8012636:	6093      	str	r3, [r2, #8]
    conv2d_22_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8012638:	4b39      	ldr	r3, [pc, #228]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801263a:	681a      	ldr	r2, [r3, #0]
 801263c:	4b3a      	ldr	r3, [pc, #232]	; (8012728 <face_detection_configure_activations+0x7d8>)
 801263e:	4413      	add	r3, r2
 8012640:	4a48      	ldr	r2, [pc, #288]	; (8012764 <face_detection_configure_activations+0x814>)
 8012642:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012644:	4b36      	ldr	r3, [pc, #216]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a47      	ldr	r2, [pc, #284]	; (8012768 <face_detection_configure_activations+0x818>)
 801264a:	6093      	str	r3, [r2, #8]
    conv2d_23_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801264c:	4b34      	ldr	r3, [pc, #208]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a45      	ldr	r2, [pc, #276]	; (8012768 <face_detection_configure_activations+0x818>)
 8012652:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8012654:	4b32      	ldr	r3, [pc, #200]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 801265c:	4a43      	ldr	r2, [pc, #268]	; (801276c <face_detection_configure_activations+0x81c>)
 801265e:	6093      	str	r3, [r2, #8]
    conv2d_23_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8012660:	4b2f      	ldr	r3, [pc, #188]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8012668:	4a40      	ldr	r2, [pc, #256]	; (801276c <face_detection_configure_activations+0x81c>)
 801266a:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801266c:	4b2c      	ldr	r3, [pc, #176]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	4b2c      	ldr	r3, [pc, #176]	; (8012724 <face_detection_configure_activations+0x7d4>)
 8012672:	4413      	add	r3, r2
 8012674:	4a3e      	ldr	r2, [pc, #248]	; (8012770 <face_detection_configure_activations+0x820>)
 8012676:	6093      	str	r3, [r2, #8]
    conv2d_23_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012678:	4b29      	ldr	r3, [pc, #164]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	4b29      	ldr	r3, [pc, #164]	; (8012724 <face_detection_configure_activations+0x7d4>)
 801267e:	4413      	add	r3, r2
 8012680:	4a3b      	ldr	r2, [pc, #236]	; (8012770 <face_detection_configure_activations+0x820>)
 8012682:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012684:	4b26      	ldr	r3, [pc, #152]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	4a3a      	ldr	r2, [pc, #232]	; (8012774 <face_detection_configure_activations+0x824>)
 801268a:	6093      	str	r3, [r2, #8]
    conv2d_24_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801268c:	4b24      	ldr	r3, [pc, #144]	; (8012720 <face_detection_configure_activations+0x7d0>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4a38      	ldr	r2, [pc, #224]	; (8012774 <face_detection_configure_activations+0x824>)
 8012692:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 8012694:	4b22      	ldr	r3, [pc, #136]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 801269c:	4a36      	ldr	r2, [pc, #216]	; (8012778 <face_detection_configure_activations+0x828>)
 801269e:	6093      	str	r3, [r2, #8]
    conv2d_24_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 80126a0:	4b1f      	ldr	r3, [pc, #124]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 80126a8:	4a33      	ldr	r2, [pc, #204]	; (8012778 <face_detection_configure_activations+0x828>)
 80126aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80126ac:	4b1c      	ldr	r3, [pc, #112]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126ae:	681a      	ldr	r2, [r3, #0]
 80126b0:	4b1c      	ldr	r3, [pc, #112]	; (8012724 <face_detection_configure_activations+0x7d4>)
 80126b2:	4413      	add	r3, r2
 80126b4:	4a31      	ldr	r2, [pc, #196]	; (801277c <face_detection_configure_activations+0x82c>)
 80126b6:	6093      	str	r3, [r2, #8]
    conv2d_24_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80126b8:	4b19      	ldr	r3, [pc, #100]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	4b19      	ldr	r3, [pc, #100]	; (8012724 <face_detection_configure_activations+0x7d4>)
 80126be:	4413      	add	r3, r2
 80126c0:	4a2e      	ldr	r2, [pc, #184]	; (801277c <face_detection_configure_activations+0x82c>)
 80126c2:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80126c4:	4b16      	ldr	r3, [pc, #88]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	4b17      	ldr	r3, [pc, #92]	; (8012728 <face_detection_configure_activations+0x7d8>)
 80126ca:	4413      	add	r3, r2
 80126cc:	4a2c      	ldr	r2, [pc, #176]	; (8012780 <face_detection_configure_activations+0x830>)
 80126ce:	6093      	str	r3, [r2, #8]
    conv2d_24_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80126d0:	4b13      	ldr	r3, [pc, #76]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	4b14      	ldr	r3, [pc, #80]	; (8012728 <face_detection_configure_activations+0x7d8>)
 80126d6:	4413      	add	r3, r2
 80126d8:	4a29      	ldr	r2, [pc, #164]	; (8012780 <face_detection_configure_activations+0x830>)
 80126da:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80126dc:	4b10      	ldr	r3, [pc, #64]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a28      	ldr	r2, [pc, #160]	; (8012784 <face_detection_configure_activations+0x834>)
 80126e2:	6093      	str	r3, [r2, #8]
    conv2d_25_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80126e4:	4b0e      	ldr	r3, [pc, #56]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4a26      	ldr	r2, [pc, #152]	; (8012784 <face_detection_configure_activations+0x834>)
 80126ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80126ec:	4b0c      	ldr	r3, [pc, #48]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80126f4:	4a24      	ldr	r2, [pc, #144]	; (8012788 <face_detection_configure_activations+0x838>)
 80126f6:	6093      	str	r3, [r2, #8]
    conv2d_25_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80126f8:	4b09      	ldr	r3, [pc, #36]	; (8012720 <face_detection_configure_activations+0x7d0>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8012700:	4a21      	ldr	r2, [pc, #132]	; (8012788 <face_detection_configure_activations+0x838>)
 8012702:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012704:	4b06      	ldr	r3, [pc, #24]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	4b06      	ldr	r3, [pc, #24]	; (8012724 <face_detection_configure_activations+0x7d4>)
 801270a:	4413      	add	r3, r2
 801270c:	4a1f      	ldr	r2, [pc, #124]	; (801278c <face_detection_configure_activations+0x83c>)
 801270e:	6093      	str	r3, [r2, #8]
    conv2d_25_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012710:	4b03      	ldr	r3, [pc, #12]	; (8012720 <face_detection_configure_activations+0x7d0>)
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	4b03      	ldr	r3, [pc, #12]	; (8012724 <face_detection_configure_activations+0x7d4>)
 8012716:	4413      	add	r3, r2
 8012718:	e03a      	b.n	8012790 <face_detection_configure_activations+0x840>
 801271a:	bf00      	nop
 801271c:	24000f58 	.word	0x24000f58
 8012720:	2405ded0 	.word	0x2405ded0
 8012724:	00012380 	.word	0x00012380
 8012728:	00016b80 	.word	0x00016b80
 801272c:	24000738 	.word	0x24000738
 8012730:	24000f68 	.word	0x24000f68
 8012734:	24000f78 	.word	0x24000f78
 8012738:	24000748 	.word	0x24000748
 801273c:	24000768 	.word	0x24000768
 8012740:	24000f88 	.word	0x24000f88
 8012744:	24000f98 	.word	0x24000f98
 8012748:	24000778 	.word	0x24000778
 801274c:	24000fc8 	.word	0x24000fc8
 8012750:	24000fd8 	.word	0x24000fd8
 8012754:	24000798 	.word	0x24000798
 8012758:	240007a8 	.word	0x240007a8
 801275c:	24001008 	.word	0x24001008
 8012760:	24001018 	.word	0x24001018
 8012764:	240007c8 	.word	0x240007c8
 8012768:	24001048 	.word	0x24001048
 801276c:	24001068 	.word	0x24001068
 8012770:	240007d8 	.word	0x240007d8
 8012774:	240007f8 	.word	0x240007f8
 8012778:	24001088 	.word	0x24001088
 801277c:	240010a8 	.word	0x240010a8
 8012780:	24000808 	.word	0x24000808
 8012784:	240010c8 	.word	0x240010c8
 8012788:	240010e8 	.word	0x240010e8
 801278c:	24000828 	.word	0x24000828
 8012790:	4a90      	ldr	r2, [pc, #576]	; (80129d4 <face_detection_configure_activations+0xa84>)
 8012792:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012794:	4b90      	ldr	r3, [pc, #576]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4a90      	ldr	r2, [pc, #576]	; (80129dc <face_detection_configure_activations+0xa8c>)
 801279a:	6093      	str	r3, [r2, #8]
    conv2d_26_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 801279c:	4b8e      	ldr	r3, [pc, #568]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a8e      	ldr	r2, [pc, #568]	; (80129dc <face_detection_configure_activations+0xa8c>)
 80127a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 25088);
 80127a4:	4b8c      	ldr	r3, [pc, #560]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 80127ac:	4a8c      	ldr	r2, [pc, #560]	; (80129e0 <face_detection_configure_activations+0xa90>)
 80127ae:	6093      	str	r3, [r2, #8]
    conv2d_26_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 25088);
 80127b0:	4b89      	ldr	r3, [pc, #548]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f503 43c4 	add.w	r3, r3, #25088	; 0x6200
 80127b8:	4a89      	ldr	r2, [pc, #548]	; (80129e0 <face_detection_configure_activations+0xa90>)
 80127ba:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80127bc:	4b86      	ldr	r3, [pc, #536]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	4b88      	ldr	r3, [pc, #544]	; (80129e4 <face_detection_configure_activations+0xa94>)
 80127c2:	4413      	add	r3, r2
 80127c4:	4a88      	ldr	r2, [pc, #544]	; (80129e8 <face_detection_configure_activations+0xa98>)
 80127c6:	6093      	str	r3, [r2, #8]
    conv2d_26_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 80127c8:	4b83      	ldr	r3, [pc, #524]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	4b85      	ldr	r3, [pc, #532]	; (80129e4 <face_detection_configure_activations+0xa94>)
 80127ce:	4413      	add	r3, r2
 80127d0:	4a85      	ldr	r2, [pc, #532]	; (80129e8 <face_detection_configure_activations+0xa98>)
 80127d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80127d4:	4b80      	ldr	r3, [pc, #512]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	4b84      	ldr	r3, [pc, #528]	; (80129ec <face_detection_configure_activations+0xa9c>)
 80127da:	4413      	add	r3, r2
 80127dc:	4a84      	ldr	r2, [pc, #528]	; (80129f0 <face_detection_configure_activations+0xaa0>)
 80127de:	6093      	str	r3, [r2, #8]
    conv2d_26_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80127e0:	4b7d      	ldr	r3, [pc, #500]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	4b81      	ldr	r3, [pc, #516]	; (80129ec <face_detection_configure_activations+0xa9c>)
 80127e6:	4413      	add	r3, r2
 80127e8:	4a81      	ldr	r2, [pc, #516]	; (80129f0 <face_detection_configure_activations+0xaa0>)
 80127ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80127ec:	4b7a      	ldr	r3, [pc, #488]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a80      	ldr	r2, [pc, #512]	; (80129f4 <face_detection_configure_activations+0xaa4>)
 80127f2:	6093      	str	r3, [r2, #8]
    conv2d_27_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80127f4:	4b78      	ldr	r3, [pc, #480]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	4a7e      	ldr	r2, [pc, #504]	; (80129f4 <face_detection_configure_activations+0xaa4>)
 80127fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 1792);
 80127fc:	4b76      	ldr	r3, [pc, #472]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8012804:	4a7c      	ldr	r2, [pc, #496]	; (80129f8 <face_detection_configure_activations+0xaa8>)
 8012806:	6093      	str	r3, [r2, #8]
    conv2d_27_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1792);
 8012808:	4b73      	ldr	r3, [pc, #460]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8012810:	4a79      	ldr	r2, [pc, #484]	; (80129f8 <face_detection_configure_activations+0xaa8>)
 8012812:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012814:	4b70      	ldr	r3, [pc, #448]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	4b72      	ldr	r3, [pc, #456]	; (80129e4 <face_detection_configure_activations+0xa94>)
 801281a:	4413      	add	r3, r2
 801281c:	4a77      	ldr	r2, [pc, #476]	; (80129fc <face_detection_configure_activations+0xaac>)
 801281e:	6093      	str	r3, [r2, #8]
    conv2d_27_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012820:	4b6d      	ldr	r3, [pc, #436]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	4b6f      	ldr	r3, [pc, #444]	; (80129e4 <face_detection_configure_activations+0xa94>)
 8012826:	4413      	add	r3, r2
 8012828:	4a74      	ldr	r2, [pc, #464]	; (80129fc <face_detection_configure_activations+0xaac>)
 801282a:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 801282c:	4b6a      	ldr	r3, [pc, #424]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	4a73      	ldr	r2, [pc, #460]	; (8012a00 <face_detection_configure_activations+0xab0>)
 8012832:	6093      	str	r3, [r2, #8]
    conv2d_30_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012834:	4b68      	ldr	r3, [pc, #416]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a71      	ldr	r2, [pc, #452]	; (8012a00 <face_detection_configure_activations+0xab0>)
 801283a:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 21632);
 801283c:	4b66      	ldr	r3, [pc, #408]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 8012844:	4a6f      	ldr	r2, [pc, #444]	; (8012a04 <face_detection_configure_activations+0xab4>)
 8012846:	6093      	str	r3, [r2, #8]
    conv2d_30_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 21632);
 8012848:	4b63      	ldr	r3, [pc, #396]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f503 43a9 	add.w	r3, r3, #21632	; 0x5480
 8012850:	4a6c      	ldr	r2, [pc, #432]	; (8012a04 <face_detection_configure_activations+0xab4>)
 8012852:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 26372);
 8012854:	4b60      	ldr	r3, [pc, #384]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	f246 7304 	movw	r3, #26372	; 0x6704
 801285c:	4413      	add	r3, r2
 801285e:	4a6a      	ldr	r2, [pc, #424]	; (8012a08 <face_detection_configure_activations+0xab8>)
 8012860:	6093      	str	r3, [r2, #8]
    conv2d_30_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 26372);
 8012862:	4b5d      	ldr	r3, [pc, #372]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	f246 7304 	movw	r3, #26372	; 0x6704
 801286a:	4413      	add	r3, r2
 801286c:	4a66      	ldr	r2, [pc, #408]	; (8012a08 <face_detection_configure_activations+0xab8>)
 801286e:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 30980);
 8012870:	4b59      	ldr	r3, [pc, #356]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	f647 1304 	movw	r3, #30980	; 0x7904
 8012878:	4413      	add	r3, r2
 801287a:	4a64      	ldr	r2, [pc, #400]	; (8012a0c <face_detection_configure_activations+0xabc>)
 801287c:	6093      	str	r3, [r2, #8]
    conv2d_30_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 30980);
 801287e:	4b56      	ldr	r3, [pc, #344]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	f647 1304 	movw	r3, #30980	; 0x7904
 8012886:	4413      	add	r3, r2
 8012888:	4a60      	ldr	r2, [pc, #384]	; (8012a0c <face_detection_configure_activations+0xabc>)
 801288a:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 801288c:	4b52      	ldr	r3, [pc, #328]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4a5f      	ldr	r2, [pc, #380]	; (8012a10 <face_detection_configure_activations+0xac0>)
 8012892:	6093      	str	r3, [r2, #8]
    conv2d_31_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012894:	4b50      	ldr	r3, [pc, #320]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a5d      	ldr	r2, [pc, #372]	; (8012a10 <face_detection_configure_activations+0xac0>)
 801289a:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 3072);
 801289c:	4b4e      	ldr	r3, [pc, #312]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80128a4:	4a5b      	ldr	r2, [pc, #364]	; (8012a14 <face_detection_configure_activations+0xac4>)
 80128a6:	6093      	str	r3, [r2, #8]
    conv2d_31_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3072);
 80128a8:	4b4b      	ldr	r3, [pc, #300]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80128b0:	4a58      	ldr	r2, [pc, #352]	; (8012a14 <face_detection_configure_activations+0xac4>)
 80128b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 12288);
 80128b4:	4b48      	ldr	r3, [pc, #288]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80128bc:	4a56      	ldr	r2, [pc, #344]	; (8012a18 <face_detection_configure_activations+0xac8>)
 80128be:	6093      	str	r3, [r2, #8]
    conv2d_31_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 12288);
 80128c0:	4b45      	ldr	r3, [pc, #276]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80128c8:	4a53      	ldr	r2, [pc, #332]	; (8012a18 <face_detection_configure_activations+0xac8>)
 80128ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80128cc:	4b42      	ldr	r3, [pc, #264]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	4b46      	ldr	r3, [pc, #280]	; (80129ec <face_detection_configure_activations+0xa9c>)
 80128d2:	4413      	add	r3, r2
 80128d4:	4a51      	ldr	r2, [pc, #324]	; (8012a1c <face_detection_configure_activations+0xacc>)
 80128d6:	6093      	str	r3, [r2, #8]
    conv2d_32_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80128d8:	4b3f      	ldr	r3, [pc, #252]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	4b43      	ldr	r3, [pc, #268]	; (80129ec <face_detection_configure_activations+0xa9c>)
 80128de:	4413      	add	r3, r2
 80128e0:	4a4e      	ldr	r2, [pc, #312]	; (8012a1c <face_detection_configure_activations+0xacc>)
 80128e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80128e4:	4b3c      	ldr	r3, [pc, #240]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	4a4d      	ldr	r2, [pc, #308]	; (8012a20 <face_detection_configure_activations+0xad0>)
 80128ea:	6093      	str	r3, [r2, #8]
    conv2d_32_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80128ec:	4b3a      	ldr	r3, [pc, #232]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4a4b      	ldr	r2, [pc, #300]	; (8012a20 <face_detection_configure_activations+0xad0>)
 80128f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 9476);
 80128f4:	4b38      	ldr	r3, [pc, #224]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	f242 5304 	movw	r3, #9476	; 0x2504
 80128fc:	4413      	add	r3, r2
 80128fe:	4a49      	ldr	r2, [pc, #292]	; (8012a24 <face_detection_configure_activations+0xad4>)
 8012900:	6093      	str	r3, [r2, #8]
    conv2d_32_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9476);
 8012902:	4b35      	ldr	r3, [pc, #212]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	f242 5304 	movw	r3, #9476	; 0x2504
 801290a:	4413      	add	r3, r2
 801290c:	4a45      	ldr	r2, [pc, #276]	; (8012a24 <face_detection_configure_activations+0xad4>)
 801290e:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 18692);
 8012910:	4b31      	ldr	r3, [pc, #196]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	f644 1304 	movw	r3, #18692	; 0x4904
 8012918:	4413      	add	r3, r2
 801291a:	4a43      	ldr	r2, [pc, #268]	; (8012a28 <face_detection_configure_activations+0xad8>)
 801291c:	6093      	str	r3, [r2, #8]
    conv2d_32_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 18692);
 801291e:	4b2e      	ldr	r3, [pc, #184]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	f644 1304 	movw	r3, #18692	; 0x4904
 8012926:	4413      	add	r3, r2
 8012928:	4a3f      	ldr	r2, [pc, #252]	; (8012a28 <face_detection_configure_activations+0xad8>)
 801292a:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 801292c:	4b2a      	ldr	r3, [pc, #168]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4a3e      	ldr	r2, [pc, #248]	; (8012a2c <face_detection_configure_activations+0xadc>)
 8012932:	6093      	str	r3, [r2, #8]
    conv2d_33_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012934:	4b28      	ldr	r3, [pc, #160]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a3c      	ldr	r2, [pc, #240]	; (8012a2c <face_detection_configure_activations+0xadc>)
 801293a:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 3584);
 801293c:	4b26      	ldr	r3, [pc, #152]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012944:	4a3a      	ldr	r2, [pc, #232]	; (8012a30 <face_detection_configure_activations+0xae0>)
 8012946:	6093      	str	r3, [r2, #8]
    conv2d_33_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3584);
 8012948:	4b23      	ldr	r3, [pc, #140]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012950:	4a37      	ldr	r2, [pc, #220]	; (8012a30 <face_detection_configure_activations+0xae0>)
 8012952:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 27908);
 8012954:	4b20      	ldr	r3, [pc, #128]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	f646 5304 	movw	r3, #27908	; 0x6d04
 801295c:	4413      	add	r3, r2
 801295e:	4a35      	ldr	r2, [pc, #212]	; (8012a34 <face_detection_configure_activations+0xae4>)
 8012960:	6093      	str	r3, [r2, #8]
    conv2d_33_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 27908);
 8012962:	4b1d      	ldr	r3, [pc, #116]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	f646 5304 	movw	r3, #27908	; 0x6d04
 801296a:	4413      	add	r3, r2
 801296c:	4a31      	ldr	r2, [pc, #196]	; (8012a34 <face_detection_configure_activations+0xae4>)
 801296e:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012970:	4b19      	ldr	r3, [pc, #100]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4a30      	ldr	r2, [pc, #192]	; (8012a38 <face_detection_configure_activations+0xae8>)
 8012976:	6093      	str	r3, [r2, #8]
    conv2d_35_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012978:	4b17      	ldr	r3, [pc, #92]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a2e      	ldr	r2, [pc, #184]	; (8012a38 <face_detection_configure_activations+0xae8>)
 801297e:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 16384);
 8012980:	4b15      	ldr	r3, [pc, #84]	; (80129d8 <face_detection_configure_activations+0xa88>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012988:	4a2c      	ldr	r2, [pc, #176]	; (8012a3c <face_detection_configure_activations+0xaec>)
 801298a:	6093      	str	r3, [r2, #8]
    conv2d_35_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 16384);
 801298c:	4b12      	ldr	r3, [pc, #72]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012994:	4a29      	ldr	r2, [pc, #164]	; (8012a3c <face_detection_configure_activations+0xaec>)
 8012996:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 93056);
 8012998:	4b0f      	ldr	r3, [pc, #60]	; (80129d8 <face_detection_configure_activations+0xa88>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	4b13      	ldr	r3, [pc, #76]	; (80129ec <face_detection_configure_activations+0xa9c>)
 801299e:	4413      	add	r3, r2
 80129a0:	4a27      	ldr	r2, [pc, #156]	; (8012a40 <face_detection_configure_activations+0xaf0>)
 80129a2:	6093      	str	r3, [r2, #8]
    conv2d_35_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 93056);
 80129a4:	4b0c      	ldr	r3, [pc, #48]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	4b10      	ldr	r3, [pc, #64]	; (80129ec <face_detection_configure_activations+0xa9c>)
 80129aa:	4413      	add	r3, r2
 80129ac:	4a24      	ldr	r2, [pc, #144]	; (8012a40 <face_detection_configure_activations+0xaf0>)
 80129ae:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 95360);
 80129b0:	4b09      	ldr	r3, [pc, #36]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	4b23      	ldr	r3, [pc, #140]	; (8012a44 <face_detection_configure_activations+0xaf4>)
 80129b6:	4413      	add	r3, r2
 80129b8:	4a23      	ldr	r2, [pc, #140]	; (8012a48 <face_detection_configure_activations+0xaf8>)
 80129ba:	6093      	str	r3, [r2, #8]
    conv2d_35_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 95360);
 80129bc:	4b06      	ldr	r3, [pc, #24]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	4b20      	ldr	r3, [pc, #128]	; (8012a44 <face_detection_configure_activations+0xaf4>)
 80129c2:	4413      	add	r3, r2
 80129c4:	4a20      	ldr	r2, [pc, #128]	; (8012a48 <face_detection_configure_activations+0xaf8>)
 80129c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80129c8:	4b03      	ldr	r3, [pc, #12]	; (80129d8 <face_detection_configure_activations+0xa88>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a1f      	ldr	r2, [pc, #124]	; (8012a4c <face_detection_configure_activations+0xafc>)
 80129ce:	6093      	str	r3, [r2, #8]
 80129d0:	e03e      	b.n	8012a50 <face_detection_configure_activations+0xb00>
 80129d2:	bf00      	nop
 80129d4:	24000828 	.word	0x24000828
 80129d8:	2405ded0 	.word	0x2405ded0
 80129dc:	24000838 	.word	0x24000838
 80129e0:	24001108 	.word	0x24001108
 80129e4:	00012380 	.word	0x00012380
 80129e8:	24000148 	.word	0x24000148
 80129ec:	00016b80 	.word	0x00016b80
 80129f0:	24000858 	.word	0x24000858
 80129f4:	24001138 	.word	0x24001138
 80129f8:	24000068 	.word	0x24000068
 80129fc:	24000868 	.word	0x24000868
 8012a00:	24000888 	.word	0x24000888
 8012a04:	24000088 	.word	0x24000088
 8012a08:	240000a8 	.word	0x240000a8
 8012a0c:	24000898 	.word	0x24000898
 8012a10:	240000c8 	.word	0x240000c8
 8012a14:	240000e8 	.word	0x240000e8
 8012a18:	240008b8 	.word	0x240008b8
 8012a1c:	240008c8 	.word	0x240008c8
 8012a20:	24000108 	.word	0x24000108
 8012a24:	24000128 	.word	0x24000128
 8012a28:	240008e8 	.word	0x240008e8
 8012a2c:	24000158 	.word	0x24000158
 8012a30:	24000178 	.word	0x24000178
 8012a34:	240008f8 	.word	0x240008f8
 8012a38:	24000918 	.word	0x24000918
 8012a3c:	24000198 	.word	0x24000198
 8012a40:	240001b8 	.word	0x240001b8
 8012a44:	00017480 	.word	0x00017480
 8012a48:	24000928 	.word	0x24000928
 8012a4c:	240001d8 	.word	0x240001d8
    conv2d_36_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012a50:	4b92      	ldr	r3, [pc, #584]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	4a92      	ldr	r2, [pc, #584]	; (8012ca0 <face_detection_configure_activations+0xd50>)
 8012a56:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 3584);
 8012a58:	4b90      	ldr	r3, [pc, #576]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a60:	4a90      	ldr	r2, [pc, #576]	; (8012ca4 <face_detection_configure_activations+0xd54>)
 8012a62:	6093      	str	r3, [r2, #8]
    conv2d_36_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3584);
 8012a64:	4b8d      	ldr	r3, [pc, #564]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a6c:	4a8d      	ldr	r2, [pc, #564]	; (8012ca4 <face_detection_configure_activations+0xd54>)
 8012a6e:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 5888);
 8012a70:	4b8a      	ldr	r3, [pc, #552]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8012a78:	4a8b      	ldr	r2, [pc, #556]	; (8012ca8 <face_detection_configure_activations+0xd58>)
 8012a7a:	6093      	str	r3, [r2, #8]
    conv2d_36_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 5888);
 8012a7c:	4b87      	ldr	r3, [pc, #540]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8012a84:	4a88      	ldr	r2, [pc, #544]	; (8012ca8 <face_detection_configure_activations+0xd58>)
 8012a86:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8012a88:	4b84      	ldr	r3, [pc, #528]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012a90:	4a86      	ldr	r2, [pc, #536]	; (8012cac <face_detection_configure_activations+0xd5c>)
 8012a92:	6093      	str	r3, [r2, #8]
    conv2d_37_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8012a94:	4b81      	ldr	r3, [pc, #516]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012a9c:	4a83      	ldr	r2, [pc, #524]	; (8012cac <face_detection_configure_activations+0xd5c>)
 8012a9e:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 14592);
 8012aa0:	4b7e      	ldr	r3, [pc, #504]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8012aa8:	4a81      	ldr	r2, [pc, #516]	; (8012cb0 <face_detection_configure_activations+0xd60>)
 8012aaa:	6093      	str	r3, [r2, #8]
    conv2d_37_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 14592);
 8012aac:	4b7b      	ldr	r3, [pc, #492]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8012ab4:	4a7e      	ldr	r2, [pc, #504]	; (8012cb0 <face_detection_configure_activations+0xd60>)
 8012ab6:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012ab8:	4b78      	ldr	r3, [pc, #480]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	4a7d      	ldr	r2, [pc, #500]	; (8012cb4 <face_detection_configure_activations+0xd64>)
 8012abe:	6093      	str	r3, [r2, #8]
    conv2d_37_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012ac0:	4b76      	ldr	r3, [pc, #472]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a7b      	ldr	r2, [pc, #492]	; (8012cb4 <face_detection_configure_activations+0xd64>)
 8012ac6:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2304);
 8012ac8:	4b74      	ldr	r3, [pc, #464]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ad0:	4a79      	ldr	r2, [pc, #484]	; (8012cb8 <face_detection_configure_activations+0xd68>)
 8012ad2:	6093      	str	r3, [r2, #8]
    conv2d_37_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2304);
 8012ad4:	4b71      	ldr	r3, [pc, #452]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012adc:	4a76      	ldr	r2, [pc, #472]	; (8012cb8 <face_detection_configure_activations+0xd68>)
 8012ade:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 4608);
 8012ae0:	4b6e      	ldr	r3, [pc, #440]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8012ae8:	4a74      	ldr	r2, [pc, #464]	; (8012cbc <face_detection_configure_activations+0xd6c>)
 8012aea:	6093      	str	r3, [r2, #8]
    conv2d_38_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 4608);
 8012aec:	4b6b      	ldr	r3, [pc, #428]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8012af4:	4a71      	ldr	r2, [pc, #452]	; (8012cbc <face_detection_configure_activations+0xd6c>)
 8012af6:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_scratch1_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012af8:	4b68      	ldr	r3, [pc, #416]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4a70      	ldr	r2, [pc, #448]	; (8012cc0 <face_detection_configure_activations+0xd70>)
 8012afe:	6093      	str	r3, [r2, #8]
    conv2d_38_scratch1_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012b00:	4b66      	ldr	r3, [pc, #408]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4a6e      	ldr	r2, [pc, #440]	; (8012cc0 <face_detection_configure_activations+0xd70>)
 8012b06:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8012b08:	4b64      	ldr	r3, [pc, #400]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012b10:	4a6c      	ldr	r2, [pc, #432]	; (8012cc4 <face_detection_configure_activations+0xd74>)
 8012b12:	6093      	str	r3, [r2, #8]
    conv2d_38_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 8192);
 8012b14:	4b61      	ldr	r3, [pc, #388]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012b1c:	4a69      	ldr	r2, [pc, #420]	; (8012cc4 <face_detection_configure_activations+0xd74>)
 8012b1e:	60d3      	str	r3, [r2, #12]
    
    pool_40_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012b20:	4b5e      	ldr	r3, [pc, #376]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	4a68      	ldr	r2, [pc, #416]	; (8012cc8 <face_detection_configure_activations+0xd78>)
 8012b26:	6093      	str	r3, [r2, #8]
    pool_40_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012b28:	4b5c      	ldr	r3, [pc, #368]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	4a66      	ldr	r2, [pc, #408]	; (8012cc8 <face_detection_configure_activations+0xd78>)
 8012b2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 256);
 8012b30:	4b5a      	ldr	r3, [pc, #360]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012b38:	4a64      	ldr	r2, [pc, #400]	; (8012ccc <face_detection_configure_activations+0xd7c>)
 8012b3a:	6093      	str	r3, [r2, #8]
    conv2d_45_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 256);
 8012b3c:	4b57      	ldr	r3, [pc, #348]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012b44:	4a61      	ldr	r2, [pc, #388]	; (8012ccc <face_detection_configure_activations+0xd7c>)
 8012b46:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1600);
 8012b48:	4b54      	ldr	r3, [pc, #336]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8012b50:	4a5f      	ldr	r2, [pc, #380]	; (8012cd0 <face_detection_configure_activations+0xd80>)
 8012b52:	6093      	str	r3, [r2, #8]
    conv2d_45_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1600);
 8012b54:	4b51      	ldr	r3, [pc, #324]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8012b5c:	4a5c      	ldr	r2, [pc, #368]	; (8012cd0 <face_detection_configure_activations+0xd80>)
 8012b5e:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012b60:	4b4e      	ldr	r3, [pc, #312]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4a5b      	ldr	r2, [pc, #364]	; (8012cd4 <face_detection_configure_activations+0xd84>)
 8012b66:	6093      	str	r3, [r2, #8]
    conv2d_46_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012b68:	4b4c      	ldr	r3, [pc, #304]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a59      	ldr	r2, [pc, #356]	; (8012cd4 <face_detection_configure_activations+0xd84>)
 8012b6e:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8012b70:	4b4a      	ldr	r3, [pc, #296]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8012b78:	4a57      	ldr	r2, [pc, #348]	; (8012cd8 <face_detection_configure_activations+0xd88>)
 8012b7a:	6093      	str	r3, [r2, #8]
    conv2d_46_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8012b7c:	4b47      	ldr	r3, [pc, #284]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8012b84:	4a54      	ldr	r2, [pc, #336]	; (8012cd8 <face_detection_configure_activations+0xd88>)
 8012b86:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 288);
 8012b88:	4b44      	ldr	r3, [pc, #272]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012b90:	4a52      	ldr	r2, [pc, #328]	; (8012cdc <face_detection_configure_activations+0xd8c>)
 8012b92:	6093      	str	r3, [r2, #8]
    conv2d_46_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 288);
 8012b94:	4b41      	ldr	r3, [pc, #260]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012b9c:	4a4f      	ldr	r2, [pc, #316]	; (8012cdc <face_detection_configure_activations+0xd8c>)
 8012b9e:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012ba0:	4b3e      	ldr	r3, [pc, #248]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4a4e      	ldr	r2, [pc, #312]	; (8012ce0 <face_detection_configure_activations+0xd90>)
 8012ba6:	6093      	str	r3, [r2, #8]
    conv2d_51_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012ba8:	4b3c      	ldr	r3, [pc, #240]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	4a4c      	ldr	r2, [pc, #304]	; (8012ce0 <face_detection_configure_activations+0xd90>)
 8012bae:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8012bb0:	4b3a      	ldr	r3, [pc, #232]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8012bb8:	4a4a      	ldr	r2, [pc, #296]	; (8012ce4 <face_detection_configure_activations+0xd94>)
 8012bba:	6093      	str	r3, [r2, #8]
    conv2d_51_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1632);
 8012bbc:	4b37      	ldr	r3, [pc, #220]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8012bc4:	4a47      	ldr	r2, [pc, #284]	; (8012ce4 <face_detection_configure_activations+0xd94>)
 8012bc6:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 300);
 8012bc8:	4b34      	ldr	r3, [pc, #208]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012bd0:	4a45      	ldr	r2, [pc, #276]	; (8012ce8 <face_detection_configure_activations+0xd98>)
 8012bd2:	6093      	str	r3, [r2, #8]
    conv2d_51_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 300);
 8012bd4:	4b31      	ldr	r3, [pc, #196]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012bdc:	4a42      	ldr	r2, [pc, #264]	; (8012ce8 <face_detection_configure_activations+0xd98>)
 8012bde:	60d3      	str	r3, [r2, #12]
    
    tile_64_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012be0:	4b2e      	ldr	r3, [pc, #184]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4a41      	ldr	r2, [pc, #260]	; (8012cec <face_detection_configure_activations+0xd9c>)
 8012be6:	6093      	str	r3, [r2, #8]
    tile_64_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012be8:	4b2c      	ldr	r3, [pc, #176]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	4a3f      	ldr	r2, [pc, #252]	; (8012cec <face_detection_configure_activations+0xd9c>)
 8012bee:	60d3      	str	r3, [r2, #12]
    
    pad_65_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 320);
 8012bf0:	4b2a      	ldr	r3, [pc, #168]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012bf8:	4a3d      	ldr	r2, [pc, #244]	; (8012cf0 <face_detection_configure_activations+0xda0>)
 8012bfa:	6093      	str	r3, [r2, #8]
    pad_65_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 320);
 8012bfc:	4b27      	ldr	r3, [pc, #156]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012c04:	4a3a      	ldr	r2, [pc, #232]	; (8012cf0 <face_detection_configure_activations+0xda0>)
 8012c06:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 608);
 8012c08:	4b24      	ldr	r3, [pc, #144]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012c10:	4a38      	ldr	r2, [pc, #224]	; (8012cf4 <face_detection_configure_activations+0xda4>)
 8012c12:	6093      	str	r3, [r2, #8]
    conv2d_39_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 608);
 8012c14:	4b21      	ldr	r3, [pc, #132]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012c1c:	4a35      	ldr	r2, [pc, #212]	; (8012cf4 <face_detection_configure_activations+0xda4>)
 8012c1e:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012c20:	4b1e      	ldr	r3, [pc, #120]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4a34      	ldr	r2, [pc, #208]	; (8012cf8 <face_detection_configure_activations+0xda8>)
 8012c26:	6093      	str	r3, [r2, #8]
    conv2d_39_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012c28:	4b1c      	ldr	r3, [pc, #112]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4a32      	ldr	r2, [pc, #200]	; (8012cf8 <face_detection_configure_activations+0xda8>)
 8012c2e:	60d3      	str	r3, [r2, #12]
    
    eltwise_66_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 608);
 8012c30:	4b1a      	ldr	r3, [pc, #104]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012c38:	4a30      	ldr	r2, [pc, #192]	; (8012cfc <face_detection_configure_activations+0xdac>)
 8012c3a:	6093      	str	r3, [r2, #8]
    eltwise_66_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 608);
 8012c3c:	4b17      	ldr	r3, [pc, #92]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012c44:	4a2d      	ldr	r2, [pc, #180]	; (8012cfc <face_detection_configure_activations+0xdac>)
 8012c46:	60d3      	str	r3, [r2, #12]
    
    eltwise_66_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 896);
 8012c48:	4b14      	ldr	r3, [pc, #80]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8012c50:	4a2b      	ldr	r2, [pc, #172]	; (8012d00 <face_detection_configure_activations+0xdb0>)
 8012c52:	6093      	str	r3, [r2, #8]
    eltwise_66_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 896);
 8012c54:	4b11      	ldr	r3, [pc, #68]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8012c5c:	4a28      	ldr	r2, [pc, #160]	; (8012d00 <face_detection_configure_activations+0xdb0>)
 8012c5e:	60d3      	str	r3, [r2, #12]
    
    upsample_85_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012c60:	4b0e      	ldr	r3, [pc, #56]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c68:	4a26      	ldr	r2, [pc, #152]	; (8012d04 <face_detection_configure_activations+0xdb4>)
 8012c6a:	6093      	str	r3, [r2, #8]
    upsample_85_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012c6c:	4b0b      	ldr	r3, [pc, #44]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c74:	4a23      	ldr	r2, [pc, #140]	; (8012d04 <face_detection_configure_activations+0xdb4>)
 8012c76:	60d3      	str	r3, [r2, #12]
    
    upsample_85_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 896);
 8012c78:	4b08      	ldr	r3, [pc, #32]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8012c80:	4a21      	ldr	r2, [pc, #132]	; (8012d08 <face_detection_configure_activations+0xdb8>)
 8012c82:	6093      	str	r3, [r2, #8]
    upsample_85_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 896);
 8012c84:	4b05      	ldr	r3, [pc, #20]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8012c8c:	4a1e      	ldr	r2, [pc, #120]	; (8012d08 <face_detection_configure_activations+0xdb8>)
 8012c8e:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012c90:	4b02      	ldr	r3, [pc, #8]	; (8012c9c <face_detection_configure_activations+0xd4c>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c98:	e038      	b.n	8012d0c <face_detection_configure_activations+0xdbc>
 8012c9a:	bf00      	nop
 8012c9c:	2405ded0 	.word	0x2405ded0
 8012ca0:	240001d8 	.word	0x240001d8
 8012ca4:	240001f8 	.word	0x240001f8
 8012ca8:	24000948 	.word	0x24000948
 8012cac:	24000958 	.word	0x24000958
 8012cb0:	24000218 	.word	0x24000218
 8012cb4:	24000238 	.word	0x24000238
 8012cb8:	24000978 	.word	0x24000978
 8012cbc:	24000258 	.word	0x24000258
 8012cc0:	24000278 	.word	0x24000278
 8012cc4:	24000988 	.word	0x24000988
 8012cc8:	240009a8 	.word	0x240009a8
 8012ccc:	24000298 	.word	0x24000298
 8012cd0:	240009b8 	.word	0x240009b8
 8012cd4:	240009d8 	.word	0x240009d8
 8012cd8:	240002b8 	.word	0x240002b8
 8012cdc:	240009e8 	.word	0x240009e8
 8012ce0:	24000a08 	.word	0x24000a08
 8012ce4:	240002d8 	.word	0x240002d8
 8012ce8:	24000a18 	.word	0x24000a18
 8012cec:	24000a38 	.word	0x24000a38
 8012cf0:	24000a48 	.word	0x24000a48
 8012cf4:	24000308 	.word	0x24000308
 8012cf8:	24000a68 	.word	0x24000a68
 8012cfc:	24000a78 	.word	0x24000a78
 8012d00:	24000a98 	.word	0x24000a98
 8012d04:	24000aa8 	.word	0x24000aa8
 8012d08:	24000ac8 	.word	0x24000ac8
 8012d0c:	4a95      	ldr	r2, [pc, #596]	; (8012f64 <face_detection_configure_activations+0x1014>)
 8012d0e:	6093      	str	r3, [r2, #8]
    conv2d_67_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012d10:	4b95      	ldr	r3, [pc, #596]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d18:	4a92      	ldr	r2, [pc, #584]	; (8012f64 <face_detection_configure_activations+0x1014>)
 8012d1a:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8012d1c:	4b92      	ldr	r3, [pc, #584]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8012d24:	4a91      	ldr	r2, [pc, #580]	; (8012f6c <face_detection_configure_activations+0x101c>)
 8012d26:	6093      	str	r3, [r2, #8]
    conv2d_67_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8012d28:	4b8f      	ldr	r3, [pc, #572]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8012d30:	4a8e      	ldr	r2, [pc, #568]	; (8012f6c <face_detection_configure_activations+0x101c>)
 8012d32:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012d34:	4b8c      	ldr	r3, [pc, #560]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4a8d      	ldr	r2, [pc, #564]	; (8012f70 <face_detection_configure_activations+0x1020>)
 8012d3a:	6093      	str	r3, [r2, #8]
    conv2d_67_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 8012d3c:	4b8a      	ldr	r3, [pc, #552]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4a8b      	ldr	r2, [pc, #556]	; (8012f70 <face_detection_configure_activations+0x1020>)
 8012d42:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012d44:	4b88      	ldr	r3, [pc, #544]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d4c:	4a89      	ldr	r2, [pc, #548]	; (8012f74 <face_detection_configure_activations+0x1024>)
 8012d4e:	6093      	str	r3, [r2, #8]
    conv2d_72_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012d50:	4b85      	ldr	r3, [pc, #532]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d58:	4a86      	ldr	r2, [pc, #536]	; (8012f74 <face_detection_configure_activations+0x1024>)
 8012d5a:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8012d5c:	4b82      	ldr	r3, [pc, #520]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8012d64:	4a84      	ldr	r2, [pc, #528]	; (8012f78 <face_detection_configure_activations+0x1028>)
 8012d66:	6093      	str	r3, [r2, #8]
    conv2d_72_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2848);
 8012d68:	4b7f      	ldr	r3, [pc, #508]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8012d70:	4a81      	ldr	r2, [pc, #516]	; (8012f78 <face_detection_configure_activations+0x1028>)
 8012d72:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 180);
 8012d74:	4b7c      	ldr	r3, [pc, #496]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	33b4      	adds	r3, #180	; 0xb4
 8012d7a:	4a80      	ldr	r2, [pc, #512]	; (8012f7c <face_detection_configure_activations+0x102c>)
 8012d7c:	6093      	str	r3, [r2, #8]
    conv2d_72_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 180);
 8012d7e:	4b7a      	ldr	r3, [pc, #488]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	33b4      	adds	r3, #180	; 0xb4
 8012d84:	4a7d      	ldr	r2, [pc, #500]	; (8012f7c <face_detection_configure_activations+0x102c>)
 8012d86:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012d88:	4b77      	ldr	r3, [pc, #476]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d90:	4a7b      	ldr	r2, [pc, #492]	; (8012f80 <face_detection_configure_activations+0x1030>)
 8012d92:	6093      	str	r3, [r2, #8]
    conv2d_34_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012d94:	4b74      	ldr	r3, [pc, #464]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d9c:	4a78      	ldr	r2, [pc, #480]	; (8012f80 <face_detection_configure_activations+0x1030>)
 8012d9e:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 3392);
 8012da0:	4b71      	ldr	r3, [pc, #452]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8012da8:	4a76      	ldr	r2, [pc, #472]	; (8012f84 <face_detection_configure_activations+0x1034>)
 8012daa:	6093      	str	r3, [r2, #8]
    conv2d_34_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3392);
 8012dac:	4b6e      	ldr	r3, [pc, #440]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8012db4:	4a73      	ldr	r2, [pc, #460]	; (8012f84 <face_detection_configure_activations+0x1034>)
 8012db6:	60d3      	str	r3, [r2, #12]
    
    eltwise_86_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012db8:	4b6b      	ldr	r3, [pc, #428]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dc0:	4a71      	ldr	r2, [pc, #452]	; (8012f88 <face_detection_configure_activations+0x1038>)
 8012dc2:	6093      	str	r3, [r2, #8]
    eltwise_86_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 2048);
 8012dc4:	4b68      	ldr	r3, [pc, #416]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dcc:	4a6e      	ldr	r2, [pc, #440]	; (8012f88 <face_detection_configure_activations+0x1038>)
 8012dce:	60d3      	str	r3, [r2, #12]
    
    eltwise_86_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8012dd0:	4b65      	ldr	r3, [pc, #404]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8012dd8:	4a6c      	ldr	r2, [pc, #432]	; (8012f8c <face_detection_configure_activations+0x103c>)
 8012dda:	6093      	str	r3, [r2, #8]
    eltwise_86_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8012ddc:	4b62      	ldr	r3, [pc, #392]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8012de4:	4a69      	ldr	r2, [pc, #420]	; (8012f8c <face_detection_configure_activations+0x103c>)
 8012de6:	60d3      	str	r3, [r2, #12]
    
    upsample_105_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012de8:	4b5f      	ldr	r3, [pc, #380]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012df0:	4a67      	ldr	r2, [pc, #412]	; (8012f90 <face_detection_configure_activations+0x1040>)
 8012df2:	6093      	str	r3, [r2, #8]
    upsample_105_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012df4:	4b5c      	ldr	r3, [pc, #368]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012dfc:	4a64      	ldr	r2, [pc, #400]	; (8012f90 <face_detection_configure_activations+0x1040>)
 8012dfe:	60d3      	str	r3, [r2, #12]
    
    upsample_105_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8012e00:	4b59      	ldr	r3, [pc, #356]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8012e08:	4a62      	ldr	r2, [pc, #392]	; (8012f94 <face_detection_configure_activations+0x1044>)
 8012e0a:	6093      	str	r3, [r2, #8]
    upsample_105_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 3200);
 8012e0c:	4b56      	ldr	r3, [pc, #344]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8012e14:	4a5f      	ldr	r2, [pc, #380]	; (8012f94 <face_detection_configure_activations+0x1044>)
 8012e16:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012e18:	4b53      	ldr	r3, [pc, #332]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012e20:	4a5d      	ldr	r2, [pc, #372]	; (8012f98 <face_detection_configure_activations+0x1048>)
 8012e22:	6093      	str	r3, [r2, #8]
    conv2d_87_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012e24:	4b50      	ldr	r3, [pc, #320]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012e2c:	4a5a      	ldr	r2, [pc, #360]	; (8012f98 <face_detection_configure_activations+0x1048>)
 8012e2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8012e30:	4b4d      	ldr	r3, [pc, #308]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8012e38:	4a58      	ldr	r2, [pc, #352]	; (8012f9c <face_detection_configure_activations+0x104c>)
 8012e3a:	6093      	str	r3, [r2, #8]
    conv2d_87_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8012e3c:	4b4a      	ldr	r3, [pc, #296]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8012e44:	4a55      	ldr	r2, [pc, #340]	; (8012f9c <face_detection_configure_activations+0x104c>)
 8012e46:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 320);
 8012e48:	4b47      	ldr	r3, [pc, #284]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012e50:	4a53      	ldr	r2, [pc, #332]	; (8012fa0 <face_detection_configure_activations+0x1050>)
 8012e52:	6093      	str	r3, [r2, #8]
    conv2d_87_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 320);
 8012e54:	4b44      	ldr	r3, [pc, #272]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012e5c:	4a50      	ldr	r2, [pc, #320]	; (8012fa0 <face_detection_configure_activations+0x1050>)
 8012e5e:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012e60:	4b41      	ldr	r3, [pc, #260]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012e68:	4a4e      	ldr	r2, [pc, #312]	; (8012fa4 <face_detection_configure_activations+0x1054>)
 8012e6a:	6093      	str	r3, [r2, #8]
    conv2d_92_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012e6c:	4b3e      	ldr	r3, [pc, #248]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012e74:	4a4b      	ldr	r2, [pc, #300]	; (8012fa4 <face_detection_configure_activations+0x1054>)
 8012e76:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8012e78:	4b3b      	ldr	r3, [pc, #236]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8012e80:	4a49      	ldr	r2, [pc, #292]	; (8012fa8 <face_detection_configure_activations+0x1058>)
 8012e82:	6093      	str	r3, [r2, #8]
    conv2d_92_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9856);
 8012e84:	4b38      	ldr	r3, [pc, #224]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 8012e8c:	4a46      	ldr	r2, [pc, #280]	; (8012fa8 <face_detection_configure_activations+0x1058>)
 8012e8e:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 680);
 8012e90:	4b35      	ldr	r3, [pc, #212]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012e98:	4a44      	ldr	r2, [pc, #272]	; (8012fac <face_detection_configure_activations+0x105c>)
 8012e9a:	6093      	str	r3, [r2, #8]
    conv2d_92_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 680);
 8012e9c:	4b32      	ldr	r3, [pc, #200]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012ea4:	4a41      	ldr	r2, [pc, #260]	; (8012fac <face_detection_configure_activations+0x105c>)
 8012ea6:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8012ea8:	4b2f      	ldr	r3, [pc, #188]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8012eb0:	4a3f      	ldr	r2, [pc, #252]	; (8012fb0 <face_detection_configure_activations+0x1060>)
 8012eb2:	6093      	str	r3, [r2, #8]
    conv2d_28_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8012eb4:	4b2c      	ldr	r3, [pc, #176]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8012ebc:	4a3c      	ldr	r2, [pc, #240]	; (8012fb0 <face_detection_configure_activations+0x1060>)
 8012ebe:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012ec0:	4b29      	ldr	r3, [pc, #164]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012ec8:	4a3a      	ldr	r2, [pc, #232]	; (8012fb4 <face_detection_configure_activations+0x1064>)
 8012eca:	6093      	str	r3, [r2, #8]
    conv2d_28_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7808);
 8012ecc:	4b26      	ldr	r3, [pc, #152]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8012ed4:	4a37      	ldr	r2, [pc, #220]	; (8012fb4 <face_detection_configure_activations+0x1064>)
 8012ed6:	60d3      	str	r3, [r2, #12]
    
    eltwise_106_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 12416);
 8012ed8:	4b23      	ldr	r3, [pc, #140]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8012ee0:	4a35      	ldr	r2, [pc, #212]	; (8012fb8 <face_detection_configure_activations+0x1068>)
 8012ee2:	6093      	str	r3, [r2, #8]
    eltwise_106_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 12416);
 8012ee4:	4b20      	ldr	r3, [pc, #128]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8012eec:	4a32      	ldr	r2, [pc, #200]	; (8012fb8 <face_detection_configure_activations+0x1068>)
 8012eee:	60d3      	str	r3, [r2, #12]
    
    eltwise_106_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8012ef0:	4b1d      	ldr	r3, [pc, #116]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8012ef8:	4a30      	ldr	r2, [pc, #192]	; (8012fbc <face_detection_configure_activations+0x106c>)
 8012efa:	6093      	str	r3, [r2, #8]
    eltwise_106_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8012efc:	4b1a      	ldr	r3, [pc, #104]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8012f04:	4a2d      	ldr	r2, [pc, #180]	; (8012fbc <face_detection_configure_activations+0x106c>)
 8012f06:	60d3      	str	r3, [r2, #12]
    
    upsample_125_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012f08:	4b17      	ldr	r3, [pc, #92]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	4b2c      	ldr	r3, [pc, #176]	; (8012fc0 <face_detection_configure_activations+0x1070>)
 8012f0e:	4413      	add	r3, r2
 8012f10:	4a2c      	ldr	r2, [pc, #176]	; (8012fc4 <face_detection_configure_activations+0x1074>)
 8012f12:	6093      	str	r3, [r2, #8]
    upsample_125_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012f14:	4b14      	ldr	r3, [pc, #80]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	4b29      	ldr	r3, [pc, #164]	; (8012fc0 <face_detection_configure_activations+0x1070>)
 8012f1a:	4413      	add	r3, r2
 8012f1c:	4a29      	ldr	r2, [pc, #164]	; (8012fc4 <face_detection_configure_activations+0x1074>)
 8012f1e:	60d3      	str	r3, [r2, #12]
    
    upsample_125_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8012f20:	4b11      	ldr	r3, [pc, #68]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8012f28:	4a27      	ldr	r2, [pc, #156]	; (8012fc8 <face_detection_configure_activations+0x1078>)
 8012f2a:	6093      	str	r3, [r2, #8]
    upsample_125_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 17024);
 8012f2c:	4b0e      	ldr	r3, [pc, #56]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f503 4385 	add.w	r3, r3, #17024	; 0x4280
 8012f34:	4a24      	ldr	r2, [pc, #144]	; (8012fc8 <face_detection_configure_activations+0x1078>)
 8012f36:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8012f38:	4b0b      	ldr	r3, [pc, #44]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8012f40:	4a22      	ldr	r2, [pc, #136]	; (8012fcc <face_detection_configure_activations+0x107c>)
 8012f42:	6093      	str	r3, [r2, #8]
    conv2d_107_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8012f44:	4b08      	ldr	r3, [pc, #32]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8012f4c:	4a1f      	ldr	r2, [pc, #124]	; (8012fcc <face_detection_configure_activations+0x107c>)
 8012f4e:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012f50:	4b05      	ldr	r3, [pc, #20]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	4b1a      	ldr	r3, [pc, #104]	; (8012fc0 <face_detection_configure_activations+0x1070>)
 8012f56:	4413      	add	r3, r2
 8012f58:	4a1d      	ldr	r2, [pc, #116]	; (8012fd0 <face_detection_configure_activations+0x1080>)
 8012f5a:	6093      	str	r3, [r2, #8]
    conv2d_107_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8012f5c:	4b02      	ldr	r3, [pc, #8]	; (8012f68 <face_detection_configure_activations+0x1018>)
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	e038      	b.n	8012fd4 <face_detection_configure_activations+0x1084>
 8012f62:	bf00      	nop
 8012f64:	24000ad8 	.word	0x24000ad8
 8012f68:	2405ded0 	.word	0x2405ded0
 8012f6c:	24000328 	.word	0x24000328
 8012f70:	24000af8 	.word	0x24000af8
 8012f74:	24000b08 	.word	0x24000b08
 8012f78:	24000348 	.word	0x24000348
 8012f7c:	24000b28 	.word	0x24000b28
 8012f80:	24000368 	.word	0x24000368
 8012f84:	24000b38 	.word	0x24000b38
 8012f88:	24000b58 	.word	0x24000b58
 8012f8c:	24000b68 	.word	0x24000b68
 8012f90:	24000b88 	.word	0x24000b88
 8012f94:	24000b98 	.word	0x24000b98
 8012f98:	24000bb8 	.word	0x24000bb8
 8012f9c:	24000398 	.word	0x24000398
 8012fa0:	24000bc8 	.word	0x24000bc8
 8012fa4:	24000be8 	.word	0x24000be8
 8012fa8:	240003b8 	.word	0x240003b8
 8012fac:	24000bf8 	.word	0x24000bf8
 8012fb0:	240003d8 	.word	0x240003d8
 8012fb4:	24000c18 	.word	0x24000c18
 8012fb8:	24000c28 	.word	0x24000c28
 8012fbc:	24000c48 	.word	0x24000c48
 8012fc0:	00012380 	.word	0x00012380
 8012fc4:	24000c58 	.word	0x24000c58
 8012fc8:	24000c78 	.word	0x24000c78
 8012fcc:	24000c88 	.word	0x24000c88
 8012fd0:	240003f8 	.word	0x240003f8
 8012fd4:	4b87      	ldr	r3, [pc, #540]	; (80131f4 <face_detection_configure_activations+0x12a4>)
 8012fd6:	4413      	add	r3, r2
 8012fd8:	4a87      	ldr	r2, [pc, #540]	; (80131f8 <face_detection_configure_activations+0x12a8>)
 8012fda:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 7672);
 8012fdc:	4b87      	ldr	r3, [pc, #540]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8012fe4:	4413      	add	r3, r2
 8012fe6:	4a86      	ldr	r2, [pc, #536]	; (8013200 <face_detection_configure_activations+0x12b0>)
 8012fe8:	6093      	str	r3, [r2, #8]
    conv2d_107_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 7672);
 8012fea:	4b84      	ldr	r3, [pc, #528]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8012ff2:	4413      	add	r3, r2
 8012ff4:	4a82      	ldr	r2, [pc, #520]	; (8013200 <face_detection_configure_activations+0x12b0>)
 8012ff6:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8012ff8:	4b80      	ldr	r3, [pc, #512]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8013000:	4a80      	ldr	r2, [pc, #512]	; (8013204 <face_detection_configure_activations+0x12b4>)
 8013002:	6093      	str	r3, [r2, #8]
    conv2d_112_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8013004:	4b7d      	ldr	r3, [pc, #500]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801300c:	4a7d      	ldr	r2, [pc, #500]	; (8013204 <face_detection_configure_activations+0x12b4>)
 801300e:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8013010:	4b7a      	ldr	r3, [pc, #488]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	f242 3398 	movw	r3, #9112	; 0x2398
 8013018:	4413      	add	r3, r2
 801301a:	4a7b      	ldr	r2, [pc, #492]	; (8013208 <face_detection_configure_activations+0x12b8>)
 801301c:	6093      	str	r3, [r2, #8]
    conv2d_112_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9112);
 801301e:	4b77      	ldr	r3, [pc, #476]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	f242 3398 	movw	r3, #9112	; 0x2398
 8013026:	4413      	add	r3, r2
 8013028:	4a77      	ldr	r2, [pc, #476]	; (8013208 <face_detection_configure_activations+0x12b8>)
 801302a:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 74624);
 801302c:	4b73      	ldr	r3, [pc, #460]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	4b70      	ldr	r3, [pc, #448]	; (80131f4 <face_detection_configure_activations+0x12a4>)
 8013032:	4413      	add	r3, r2
 8013034:	4a75      	ldr	r2, [pc, #468]	; (801320c <face_detection_configure_activations+0x12bc>)
 8013036:	6093      	str	r3, [r2, #8]
    conv2d_112_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 74624);
 8013038:	4b70      	ldr	r3, [pc, #448]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	4b6d      	ldr	r3, [pc, #436]	; (80131f4 <face_detection_configure_activations+0x12a4>)
 801303e:	4413      	add	r3, r2
 8013040:	4a72      	ldr	r2, [pc, #456]	; (801320c <face_detection_configure_activations+0x12bc>)
 8013042:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8013044:	4b6d      	ldr	r3, [pc, #436]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801304c:	4a70      	ldr	r2, [pc, #448]	; (8013210 <face_detection_configure_activations+0x12c0>)
 801304e:	6093      	str	r3, [r2, #8]
    conv2d_14_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8013050:	4b6a      	ldr	r3, [pc, #424]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8013058:	4a6d      	ldr	r2, [pc, #436]	; (8013210 <face_detection_configure_activations+0x12c0>)
 801305a:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 77504);
 801305c:	4b67      	ldr	r3, [pc, #412]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801305e:	681a      	ldr	r2, [r3, #0]
 8013060:	4b6c      	ldr	r3, [pc, #432]	; (8013214 <face_detection_configure_activations+0x12c4>)
 8013062:	4413      	add	r3, r2
 8013064:	4a6c      	ldr	r2, [pc, #432]	; (8013218 <face_detection_configure_activations+0x12c8>)
 8013066:	6093      	str	r3, [r2, #8]
    conv2d_14_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 77504);
 8013068:	4b64      	ldr	r3, [pc, #400]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	4b69      	ldr	r3, [pc, #420]	; (8013214 <face_detection_configure_activations+0x12c4>)
 801306e:	4413      	add	r3, r2
 8013070:	4a69      	ldr	r2, [pc, #420]	; (8013218 <face_detection_configure_activations+0x12c8>)
 8013072:	60d3      	str	r3, [r2, #12]
    
    eltwise_126_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 35456);
 8013074:	4b61      	ldr	r3, [pc, #388]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013076:	681a      	ldr	r2, [r3, #0]
 8013078:	f648 2380 	movw	r3, #35456	; 0x8a80
 801307c:	4413      	add	r3, r2
 801307e:	4a67      	ldr	r2, [pc, #412]	; (801321c <face_detection_configure_activations+0x12cc>)
 8013080:	6093      	str	r3, [r2, #8]
    eltwise_126_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 35456);
 8013082:	4b5e      	ldr	r3, [pc, #376]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	f648 2380 	movw	r3, #35456	; 0x8a80
 801308a:	4413      	add	r3, r2
 801308c:	4a63      	ldr	r2, [pc, #396]	; (801321c <face_detection_configure_activations+0x12cc>)
 801308e:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 9112);
 8013090:	4b5a      	ldr	r3, [pc, #360]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013092:	681a      	ldr	r2, [r3, #0]
 8013094:	f242 3398 	movw	r3, #9112	; 0x2398
 8013098:	4413      	add	r3, r2
 801309a:	4a61      	ldr	r2, [pc, #388]	; (8013220 <face_detection_configure_activations+0x12d0>)
 801309c:	6093      	str	r3, [r2, #8]
    conv2d_127_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9112);
 801309e:	4b57      	ldr	r3, [pc, #348]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	f242 3398 	movw	r3, #9112	; 0x2398
 80130a6:	4413      	add	r3, r2
 80130a8:	4a5d      	ldr	r2, [pc, #372]	; (8013220 <face_detection_configure_activations+0x12d0>)
 80130aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 53888);
 80130ac:	4b53      	ldr	r3, [pc, #332]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	f24d 2380 	movw	r3, #53888	; 0xd280
 80130b4:	4413      	add	r3, r2
 80130b6:	4a5b      	ldr	r2, [pc, #364]	; (8013224 <face_detection_configure_activations+0x12d4>)
 80130b8:	6093      	str	r3, [r2, #8]
    conv2d_127_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 53888);
 80130ba:	4b50      	ldr	r3, [pc, #320]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	f24d 2380 	movw	r3, #53888	; 0xd280
 80130c2:	4413      	add	r3, r2
 80130c4:	4a57      	ldr	r2, [pc, #348]	; (8013224 <face_detection_configure_activations+0x12d4>)
 80130c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 80130c8:	4b4c      	ldr	r3, [pc, #304]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80130d0:	4a55      	ldr	r2, [pc, #340]	; (8013228 <face_detection_configure_activations+0x12d8>)
 80130d2:	6093      	str	r3, [r2, #8]
    conv2d_127_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 80130d4:	4b49      	ldr	r3, [pc, #292]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80130dc:	4a52      	ldr	r2, [pc, #328]	; (8013228 <face_detection_configure_activations+0x12d8>)
 80130de:	60d3      	str	r3, [r2, #12]
    
    concat_132_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 9112);
 80130e0:	4b46      	ldr	r3, [pc, #280]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130e2:	681a      	ldr	r2, [r3, #0]
 80130e4:	f242 3398 	movw	r3, #9112	; 0x2398
 80130e8:	4413      	add	r3, r2
 80130ea:	4a50      	ldr	r2, [pc, #320]	; (801322c <face_detection_configure_activations+0x12dc>)
 80130ec:	6093      	str	r3, [r2, #8]
    concat_132_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 9112);
 80130ee:	4b43      	ldr	r3, [pc, #268]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	f242 3398 	movw	r3, #9112	; 0x2398
 80130f6:	4413      	add	r3, r2
 80130f8:	4a4c      	ldr	r2, [pc, #304]	; (801322c <face_detection_configure_activations+0x12dc>)
 80130fa:	60d3      	str	r3, [r2, #12]
    
    concat_132_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 77504);
 80130fc:	4b3f      	ldr	r3, [pc, #252]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	4b44      	ldr	r3, [pc, #272]	; (8013214 <face_detection_configure_activations+0x12c4>)
 8013102:	4413      	add	r3, r2
 8013104:	4a4a      	ldr	r2, [pc, #296]	; (8013230 <face_detection_configure_activations+0x12e0>)
 8013106:	6093      	str	r3, [r2, #8]
    concat_132_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 77504);
 8013108:	4b3c      	ldr	r3, [pc, #240]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	4b41      	ldr	r3, [pc, #260]	; (8013214 <face_detection_configure_activations+0x12c4>)
 801310e:	4413      	add	r3, r2
 8013110:	4a47      	ldr	r2, [pc, #284]	; (8013230 <face_detection_configure_activations+0x12e0>)
 8013112:	60d3      	str	r3, [r2, #12]
    
    nl_133_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8013114:	4b39      	ldr	r3, [pc, #228]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801311c:	4a45      	ldr	r2, [pc, #276]	; (8013234 <face_detection_configure_activations+0x12e4>)
 801311e:	6093      	str	r3, [r2, #8]
    nl_133_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8013120:	4b36      	ldr	r3, [pc, #216]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8013128:	4a42      	ldr	r2, [pc, #264]	; (8013234 <face_detection_configure_activations+0x12e4>)
 801312a:	60d3      	str	r3, [r2, #12]
    
    nl_133_0_conversion_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 53888);
 801312c:	4b33      	ldr	r3, [pc, #204]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	f24d 2380 	movw	r3, #53888	; 0xd280
 8013134:	4413      	add	r3, r2
 8013136:	4a40      	ldr	r2, [pc, #256]	; (8013238 <face_detection_configure_activations+0x12e8>)
 8013138:	6093      	str	r3, [r2, #8]
    nl_133_0_conversion_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 53888);
 801313a:	4b30      	ldr	r3, [pc, #192]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801313c:	681a      	ldr	r2, [r3, #0]
 801313e:	f24d 2380 	movw	r3, #53888	; 0xd280
 8013142:	4413      	add	r3, r2
 8013144:	4a3c      	ldr	r2, [pc, #240]	; (8013238 <face_detection_configure_activations+0x12e8>)
 8013146:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_pad_before_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8013148:	4b2c      	ldr	r3, [pc, #176]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8013150:	4a3a      	ldr	r2, [pc, #232]	; (801323c <face_detection_configure_activations+0x12ec>)
 8013152:	6093      	str	r3, [r2, #8]
    conv2d_135_pad_before_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 1400);
 8013154:	4b29      	ldr	r3, [pc, #164]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801315c:	4a37      	ldr	r2, [pc, #220]	; (801323c <face_detection_configure_activations+0x12ec>)
 801315e:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_scratch0_array.data = AI_PTR(g_face_detection_activations_map[0] + 23032);
 8013160:	4b26      	ldr	r3, [pc, #152]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013162:	681a      	ldr	r2, [r3, #0]
 8013164:	f645 13f8 	movw	r3, #23032	; 0x59f8
 8013168:	4413      	add	r3, r2
 801316a:	4a35      	ldr	r2, [pc, #212]	; (8013240 <face_detection_configure_activations+0x12f0>)
 801316c:	6093      	str	r3, [r2, #8]
    conv2d_135_scratch0_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 23032);
 801316e:	4b23      	ldr	r3, [pc, #140]	; (80131fc <face_detection_configure_activations+0x12ac>)
 8013170:	681a      	ldr	r2, [r3, #0]
 8013172:	f645 13f8 	movw	r3, #23032	; 0x59f8
 8013176:	4413      	add	r3, r2
 8013178:	4a31      	ldr	r2, [pc, #196]	; (8013240 <face_detection_configure_activations+0x12f0>)
 801317a:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 29504);
 801317c:	4b1f      	ldr	r3, [pc, #124]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	f247 3340 	movw	r3, #29504	; 0x7340
 8013184:	4413      	add	r3, r2
 8013186:	4a2f      	ldr	r2, [pc, #188]	; (8013244 <face_detection_configure_activations+0x12f4>)
 8013188:	6093      	str	r3, [r2, #8]
    conv2d_135_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 29504);
 801318a:	4b1c      	ldr	r3, [pc, #112]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	f247 3340 	movw	r3, #29504	; 0x7340
 8013192:	4413      	add	r3, r2
 8013194:	4a2b      	ldr	r2, [pc, #172]	; (8013244 <face_detection_configure_activations+0x12f4>)
 8013196:	60d3      	str	r3, [r2, #12]
    
    concat_140_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 77504);
 8013198:	4b18      	ldr	r3, [pc, #96]	; (80131fc <face_detection_configure_activations+0x12ac>)
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	4b1d      	ldr	r3, [pc, #116]	; (8013214 <face_detection_configure_activations+0x12c4>)
 801319e:	4413      	add	r3, r2
 80131a0:	4a29      	ldr	r2, [pc, #164]	; (8013248 <face_detection_configure_activations+0x12f8>)
 80131a2:	6093      	str	r3, [r2, #8]
    concat_140_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 77504);
 80131a4:	4b15      	ldr	r3, [pc, #84]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80131a6:	681a      	ldr	r2, [r3, #0]
 80131a8:	4b1a      	ldr	r3, [pc, #104]	; (8013214 <face_detection_configure_activations+0x12c4>)
 80131aa:	4413      	add	r3, r2
 80131ac:	4a26      	ldr	r2, [pc, #152]	; (8013248 <face_detection_configure_activations+0x12f8>)
 80131ae:	60d3      	str	r3, [r2, #12]
    
    concat_150_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 0);
 80131b0:	4b12      	ldr	r3, [pc, #72]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a25      	ldr	r2, [pc, #148]	; (801324c <face_detection_configure_activations+0x12fc>)
 80131b6:	6093      	str	r3, [r2, #8]
    concat_150_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 0);
 80131b8:	4b10      	ldr	r3, [pc, #64]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a23      	ldr	r2, [pc, #140]	; (801324c <face_detection_configure_activations+0x12fc>)
 80131be:	60d3      	str	r3, [r2, #12]
    
    conversion_151_output_array.data = AI_PTR(g_face_detection_activations_map[0] + 38300);
 80131c0:	4b0e      	ldr	r3, [pc, #56]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	f249 539c 	movw	r3, #38300	; 0x959c
 80131c8:	4413      	add	r3, r2
 80131ca:	4a21      	ldr	r2, [pc, #132]	; (8013250 <face_detection_configure_activations+0x1300>)
 80131cc:	6093      	str	r3, [r2, #8]
    conversion_151_output_array.data_start = AI_PTR(g_face_detection_activations_map[0] + 38300);
 80131ce:	4b0b      	ldr	r3, [pc, #44]	; (80131fc <face_detection_configure_activations+0x12ac>)
 80131d0:	681a      	ldr	r2, [r3, #0]
 80131d2:	f249 539c 	movw	r3, #38300	; 0x959c
 80131d6:	4413      	add	r3, r2
 80131d8:	4a1d      	ldr	r2, [pc, #116]	; (8013250 <face_detection_configure_activations+0x1300>)
 80131da:	60d3      	str	r3, [r2, #12]
    
    return true;
 80131dc:	2301      	movs	r3, #1
 80131de:	e005      	b.n	80131ec <face_detection_configure_activations+0x129c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80131e0:	2213      	movs	r2, #19
 80131e2:	2130      	movs	r1, #48	; 0x30
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f001 fc09 	bl	80149fc <ai_platform_network_set_error>
  return false;
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}
 80131f4:	00012380 	.word	0x00012380
 80131f8:	240003f8 	.word	0x240003f8
 80131fc:	2405ded0 	.word	0x2405ded0
 8013200:	24000ca8 	.word	0x24000ca8
 8013204:	24000cb8 	.word	0x24000cb8
 8013208:	24000428 	.word	0x24000428
 801320c:	24000cd8 	.word	0x24000cd8
 8013210:	24000448 	.word	0x24000448
 8013214:	00012ec0 	.word	0x00012ec0
 8013218:	24000ce8 	.word	0x24000ce8
 801321c:	24000d08 	.word	0x24000d08
 8013220:	24000d18 	.word	0x24000d18
 8013224:	24000468 	.word	0x24000468
 8013228:	24000d38 	.word	0x24000d38
 801322c:	24000d48 	.word	0x24000d48
 8013230:	24000d68 	.word	0x24000d68
 8013234:	24000d78 	.word	0x24000d78
 8013238:	24000d98 	.word	0x24000d98
 801323c:	24000da8 	.word	0x24000da8
 8013240:	24000488 	.word	0x24000488
 8013244:	24000dc8 	.word	0x24000dc8
 8013248:	24000dd8 	.word	0x24000dd8
 801324c:	24000df8 	.word	0x24000df8
 8013250:	24000e08 	.word	0x24000e08

08013254 <face_detection_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_detection_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_face_detection_weights_map, 1, params)) {
 801325e:	683a      	ldr	r2, [r7, #0]
 8013260:	2101      	movs	r1, #1
 8013262:	4898      	ldr	r0, [pc, #608]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013264:	f001 f9f4 	bl	8014650 <ai_platform_get_weights_map>
 8013268:	4603      	mov	r3, r0
 801326a:	2b00      	cmp	r3, #0
 801326c:	f001 8050 	beq.w	8014310 <face_detection_configure_weights+0x10bc>
    /* Updating weights (byte) offsets */
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8013270:	4b95      	ldr	r3, [pc, #596]	; (80134c8 <face_detection_configure_weights+0x274>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013278:	4a93      	ldr	r2, [pc, #588]	; (80134c8 <face_detection_configure_weights+0x274>)
 801327a:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 0);
 801327c:	4b91      	ldr	r3, [pc, #580]	; (80134c4 <face_detection_configure_weights+0x270>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	4a91      	ldr	r2, [pc, #580]	; (80134c8 <face_detection_configure_weights+0x274>)
 8013282:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 0);
 8013284:	4b8f      	ldr	r3, [pc, #572]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a8f      	ldr	r2, [pc, #572]	; (80134c8 <face_detection_configure_weights+0x274>)
 801328a:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 801328c:	4b8f      	ldr	r3, [pc, #572]	; (80134cc <face_detection_configure_weights+0x278>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013294:	4a8d      	ldr	r2, [pc, #564]	; (80134cc <face_detection_configure_weights+0x278>)
 8013296:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 128);
 8013298:	4b8a      	ldr	r3, [pc, #552]	; (80134c4 <face_detection_configure_weights+0x270>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	3380      	adds	r3, #128	; 0x80
 801329e:	4a8b      	ldr	r2, [pc, #556]	; (80134cc <face_detection_configure_weights+0x278>)
 80132a0:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 128);
 80132a2:	4b88      	ldr	r3, [pc, #544]	; (80134c4 <face_detection_configure_weights+0x270>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	3380      	adds	r3, #128	; 0x80
 80132a8:	4a88      	ldr	r2, [pc, #544]	; (80134cc <face_detection_configure_weights+0x278>)
 80132aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80132ac:	4b88      	ldr	r3, [pc, #544]	; (80134d0 <face_detection_configure_weights+0x27c>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80132b4:	4a86      	ldr	r2, [pc, #536]	; (80134d0 <face_detection_configure_weights+0x27c>)
 80132b6:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 416);
 80132b8:	4b82      	ldr	r3, [pc, #520]	; (80134c4 <face_detection_configure_weights+0x270>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80132c0:	4a83      	ldr	r2, [pc, #524]	; (80134d0 <face_detection_configure_weights+0x27c>)
 80132c2:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 416);
 80132c4:	4b7f      	ldr	r3, [pc, #508]	; (80134c4 <face_detection_configure_weights+0x270>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80132cc:	4a80      	ldr	r2, [pc, #512]	; (80134d0 <face_detection_configure_weights+0x27c>)
 80132ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80132d0:	4b80      	ldr	r3, [pc, #512]	; (80134d4 <face_detection_configure_weights+0x280>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80132d8:	4a7e      	ldr	r2, [pc, #504]	; (80134d4 <face_detection_configure_weights+0x280>)
 80132da:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 544);
 80132dc:	4b79      	ldr	r3, [pc, #484]	; (80134c4 <face_detection_configure_weights+0x270>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80132e4:	4a7b      	ldr	r2, [pc, #492]	; (80134d4 <face_detection_configure_weights+0x280>)
 80132e6:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 544);
 80132e8:	4b76      	ldr	r3, [pc, #472]	; (80134c4 <face_detection_configure_weights+0x270>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80132f0:	4a78      	ldr	r2, [pc, #480]	; (80134d4 <face_detection_configure_weights+0x280>)
 80132f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80132f4:	4b78      	ldr	r3, [pc, #480]	; (80134d8 <face_detection_configure_weights+0x284>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80132fc:	4a76      	ldr	r2, [pc, #472]	; (80134d8 <face_detection_configure_weights+0x284>)
 80132fe:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 1568);
 8013300:	4b70      	ldr	r3, [pc, #448]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8013308:	4a73      	ldr	r2, [pc, #460]	; (80134d8 <face_detection_configure_weights+0x284>)
 801330a:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1568);
 801330c:	4b6d      	ldr	r3, [pc, #436]	; (80134c4 <face_detection_configure_weights+0x270>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8013314:	4a70      	ldr	r2, [pc, #448]	; (80134d8 <face_detection_configure_weights+0x284>)
 8013316:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8013318:	4b70      	ldr	r3, [pc, #448]	; (80134dc <face_detection_configure_weights+0x288>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013320:	4a6e      	ldr	r2, [pc, #440]	; (80134dc <face_detection_configure_weights+0x288>)
 8013322:	6013      	str	r3, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 1696);
 8013324:	4b67      	ldr	r3, [pc, #412]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 801332c:	4a6b      	ldr	r2, [pc, #428]	; (80134dc <face_detection_configure_weights+0x288>)
 801332e:	6093      	str	r3, [r2, #8]
    conv2d_10_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1696);
 8013330:	4b64      	ldr	r3, [pc, #400]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8013338:	4a68      	ldr	r2, [pc, #416]	; (80134dc <face_detection_configure_weights+0x288>)
 801333a:	60d3      	str	r3, [r2, #12]
    
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 801333c:	4b68      	ldr	r3, [pc, #416]	; (80134e0 <face_detection_configure_weights+0x28c>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013344:	4a66      	ldr	r2, [pc, #408]	; (80134e0 <face_detection_configure_weights+0x28c>)
 8013346:	6013      	str	r3, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 1984);
 8013348:	4b5e      	ldr	r3, [pc, #376]	; (80134c4 <face_detection_configure_weights+0x270>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8013350:	4a63      	ldr	r2, [pc, #396]	; (80134e0 <face_detection_configure_weights+0x28c>)
 8013352:	6093      	str	r3, [r2, #8]
    conv2d_10_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 1984);
 8013354:	4b5b      	ldr	r3, [pc, #364]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 801335c:	4a60      	ldr	r2, [pc, #384]	; (80134e0 <face_detection_configure_weights+0x28c>)
 801335e:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8013360:	4b60      	ldr	r3, [pc, #384]	; (80134e4 <face_detection_configure_weights+0x290>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013368:	4a5e      	ldr	r2, [pc, #376]	; (80134e4 <face_detection_configure_weights+0x290>)
 801336a:	6013      	str	r3, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 2112);
 801336c:	4b55      	ldr	r3, [pc, #340]	; (80134c4 <face_detection_configure_weights+0x270>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013374:	4a5b      	ldr	r2, [pc, #364]	; (80134e4 <face_detection_configure_weights+0x290>)
 8013376:	6093      	str	r3, [r2, #8]
    conv2d_11_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 2112);
 8013378:	4b52      	ldr	r3, [pc, #328]	; (80134c4 <face_detection_configure_weights+0x270>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013380:	4a58      	ldr	r2, [pc, #352]	; (80134e4 <face_detection_configure_weights+0x290>)
 8013382:	60d3      	str	r3, [r2, #12]
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8013384:	4b58      	ldr	r3, [pc, #352]	; (80134e8 <face_detection_configure_weights+0x294>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801338c:	4a56      	ldr	r2, [pc, #344]	; (80134e8 <face_detection_configure_weights+0x294>)
 801338e:	6013      	str	r3, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 4160);
 8013390:	4b4c      	ldr	r3, [pc, #304]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8013398:	4a53      	ldr	r2, [pc, #332]	; (80134e8 <face_detection_configure_weights+0x294>)
 801339a:	6093      	str	r3, [r2, #8]
    conv2d_11_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4160);
 801339c:	4b49      	ldr	r3, [pc, #292]	; (80134c4 <face_detection_configure_weights+0x270>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80133a4:	4a50      	ldr	r2, [pc, #320]	; (80134e8 <face_detection_configure_weights+0x294>)
 80133a6:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 80133a8:	4b50      	ldr	r3, [pc, #320]	; (80134ec <face_detection_configure_weights+0x298>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133b0:	4a4e      	ldr	r2, [pc, #312]	; (80134ec <face_detection_configure_weights+0x298>)
 80133b2:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 4416);
 80133b4:	4b43      	ldr	r3, [pc, #268]	; (80134c4 <face_detection_configure_weights+0x270>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80133bc:	4a4b      	ldr	r2, [pc, #300]	; (80134ec <face_detection_configure_weights+0x298>)
 80133be:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4416);
 80133c0:	4b40      	ldr	r3, [pc, #256]	; (80134c4 <face_detection_configure_weights+0x270>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80133c8:	4a48      	ldr	r2, [pc, #288]	; (80134ec <face_detection_configure_weights+0x298>)
 80133ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 80133cc:	4b48      	ldr	r3, [pc, #288]	; (80134f0 <face_detection_configure_weights+0x29c>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133d4:	4a46      	ldr	r2, [pc, #280]	; (80134f0 <face_detection_configure_weights+0x29c>)
 80133d6:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 4992);
 80133d8:	4b3a      	ldr	r3, [pc, #232]	; (80134c4 <face_detection_configure_weights+0x270>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80133e0:	4a43      	ldr	r2, [pc, #268]	; (80134f0 <face_detection_configure_weights+0x29c>)
 80133e2:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 4992);
 80133e4:	4b37      	ldr	r3, [pc, #220]	; (80134c4 <face_detection_configure_weights+0x270>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80133ec:	4a40      	ldr	r2, [pc, #256]	; (80134f0 <face_detection_configure_weights+0x29c>)
 80133ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80133f0:	4b40      	ldr	r3, [pc, #256]	; (80134f4 <face_detection_configure_weights+0x2a0>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133f8:	4a3e      	ldr	r2, [pc, #248]	; (80134f4 <face_detection_configure_weights+0x2a0>)
 80133fa:	6013      	str	r3, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 5248);
 80133fc:	4b31      	ldr	r3, [pc, #196]	; (80134c4 <face_detection_configure_weights+0x270>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8013404:	4a3b      	ldr	r2, [pc, #236]	; (80134f4 <face_detection_configure_weights+0x2a0>)
 8013406:	6093      	str	r3, [r2, #8]
    conv2d_13_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 5248);
 8013408:	4b2e      	ldr	r3, [pc, #184]	; (80134c4 <face_detection_configure_weights+0x270>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8013410:	4a38      	ldr	r2, [pc, #224]	; (80134f4 <face_detection_configure_weights+0x2a0>)
 8013412:	60d3      	str	r3, [r2, #12]
    
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8013414:	4b38      	ldr	r3, [pc, #224]	; (80134f8 <face_detection_configure_weights+0x2a4>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801341c:	4a36      	ldr	r2, [pc, #216]	; (80134f8 <face_detection_configure_weights+0x2a4>)
 801341e:	6013      	str	r3, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 9344);
 8013420:	4b28      	ldr	r3, [pc, #160]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 8013428:	4a33      	ldr	r2, [pc, #204]	; (80134f8 <face_detection_configure_weights+0x2a4>)
 801342a:	6093      	str	r3, [r2, #8]
    conv2d_13_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 9344);
 801342c:	4b25      	ldr	r3, [pc, #148]	; (80134c4 <face_detection_configure_weights+0x270>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 8013434:	4a30      	ldr	r2, [pc, #192]	; (80134f8 <face_detection_configure_weights+0x2a4>)
 8013436:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8013438:	4b30      	ldr	r3, [pc, #192]	; (80134fc <face_detection_configure_weights+0x2a8>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013440:	4a2e      	ldr	r2, [pc, #184]	; (80134fc <face_detection_configure_weights+0x2a8>)
 8013442:	6013      	str	r3, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 9600);
 8013444:	4b1f      	ldr	r3, [pc, #124]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 801344c:	4a2b      	ldr	r2, [pc, #172]	; (80134fc <face_detection_configure_weights+0x2a8>)
 801344e:	6093      	str	r3, [r2, #8]
    conv2d_16_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 9600);
 8013450:	4b1c      	ldr	r3, [pc, #112]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8013458:	4a28      	ldr	r2, [pc, #160]	; (80134fc <face_detection_configure_weights+0x2a8>)
 801345a:	60d3      	str	r3, [r2, #12]
    
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 801345c:	4b28      	ldr	r3, [pc, #160]	; (8013500 <face_detection_configure_weights+0x2ac>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013464:	4a26      	ldr	r2, [pc, #152]	; (8013500 <face_detection_configure_weights+0x2ac>)
 8013466:	6013      	str	r3, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 10176);
 8013468:	4b16      	ldr	r3, [pc, #88]	; (80134c4 <face_detection_configure_weights+0x270>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8013470:	4a23      	ldr	r2, [pc, #140]	; (8013500 <face_detection_configure_weights+0x2ac>)
 8013472:	6093      	str	r3, [r2, #8]
    conv2d_16_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10176);
 8013474:	4b13      	ldr	r3, [pc, #76]	; (80134c4 <face_detection_configure_weights+0x270>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 801347c:	4a20      	ldr	r2, [pc, #128]	; (8013500 <face_detection_configure_weights+0x2ac>)
 801347e:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8013480:	4b20      	ldr	r3, [pc, #128]	; (8013504 <face_detection_configure_weights+0x2b0>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013488:	4a1e      	ldr	r2, [pc, #120]	; (8013504 <face_detection_configure_weights+0x2b0>)
 801348a:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 10432);
 801348c:	4b0d      	ldr	r3, [pc, #52]	; (80134c4 <face_detection_configure_weights+0x270>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8013494:	4a1b      	ldr	r2, [pc, #108]	; (8013504 <face_detection_configure_weights+0x2b0>)
 8013496:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 10432);
 8013498:	4b0a      	ldr	r3, [pc, #40]	; (80134c4 <face_detection_configure_weights+0x270>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80134a0:	4a18      	ldr	r2, [pc, #96]	; (8013504 <face_detection_configure_weights+0x2b0>)
 80134a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80134a4:	4b18      	ldr	r3, [pc, #96]	; (8013508 <face_detection_configure_weights+0x2b4>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80134ac:	4a16      	ldr	r2, [pc, #88]	; (8013508 <face_detection_configure_weights+0x2b4>)
 80134ae:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 18624);
 80134b0:	4b04      	ldr	r3, [pc, #16]	; (80134c4 <face_detection_configure_weights+0x270>)
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	f644 03c0 	movw	r3, #18624	; 0x48c0
 80134b8:	4413      	add	r3, r2
 80134ba:	4a13      	ldr	r2, [pc, #76]	; (8013508 <face_detection_configure_weights+0x2b4>)
 80134bc:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 18624);
 80134be:	4b01      	ldr	r3, [pc, #4]	; (80134c4 <face_detection_configure_weights+0x270>)
 80134c0:	681a      	ldr	r2, [r3, #0]
 80134c2:	e023      	b.n	801350c <face_detection_configure_weights+0x2b8>
 80134c4:	2405ded4 	.word	0x2405ded4
 80134c8:	24000058 	.word	0x24000058
 80134cc:	24000078 	.word	0x24000078
 80134d0:	24000098 	.word	0x24000098
 80134d4:	240000b8 	.word	0x240000b8
 80134d8:	240000d8 	.word	0x240000d8
 80134dc:	240000f8 	.word	0x240000f8
 80134e0:	24000118 	.word	0x24000118
 80134e4:	24000138 	.word	0x24000138
 80134e8:	24000168 	.word	0x24000168
 80134ec:	24000188 	.word	0x24000188
 80134f0:	240001a8 	.word	0x240001a8
 80134f4:	240001c8 	.word	0x240001c8
 80134f8:	240001e8 	.word	0x240001e8
 80134fc:	24000208 	.word	0x24000208
 8013500:	24000228 	.word	0x24000228
 8013504:	24000248 	.word	0x24000248
 8013508:	24000268 	.word	0x24000268
 801350c:	f644 03c0 	movw	r3, #18624	; 0x48c0
 8013510:	4413      	add	r3, r2
 8013512:	4a99      	ldr	r2, [pc, #612]	; (8013778 <face_detection_configure_weights+0x524>)
 8013514:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8013516:	4b99      	ldr	r3, [pc, #612]	; (801377c <face_detection_configure_weights+0x528>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801351e:	4a97      	ldr	r2, [pc, #604]	; (801377c <face_detection_configure_weights+0x528>)
 8013520:	6013      	str	r3, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 19136);
 8013522:	4b97      	ldr	r3, [pc, #604]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	f644 23c0 	movw	r3, #19136	; 0x4ac0
 801352a:	4413      	add	r3, r2
 801352c:	4a93      	ldr	r2, [pc, #588]	; (801377c <face_detection_configure_weights+0x528>)
 801352e:	6093      	str	r3, [r2, #8]
    conv2d_18_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 19136);
 8013530:	4b93      	ldr	r3, [pc, #588]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	f644 23c0 	movw	r3, #19136	; 0x4ac0
 8013538:	4413      	add	r3, r2
 801353a:	4a90      	ldr	r2, [pc, #576]	; (801377c <face_detection_configure_weights+0x528>)
 801353c:	60d3      	str	r3, [r2, #12]
    
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 801353e:	4b91      	ldr	r3, [pc, #580]	; (8013784 <face_detection_configure_weights+0x530>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013546:	4a8f      	ldr	r2, [pc, #572]	; (8013784 <face_detection_configure_weights+0x530>)
 8013548:	6013      	str	r3, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 20288);
 801354a:	4b8d      	ldr	r3, [pc, #564]	; (8013780 <face_detection_configure_weights+0x52c>)
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	f644 7340 	movw	r3, #20288	; 0x4f40
 8013552:	4413      	add	r3, r2
 8013554:	4a8b      	ldr	r2, [pc, #556]	; (8013784 <face_detection_configure_weights+0x530>)
 8013556:	6093      	str	r3, [r2, #8]
    conv2d_18_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 20288);
 8013558:	4b89      	ldr	r3, [pc, #548]	; (8013780 <face_detection_configure_weights+0x52c>)
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	f644 7340 	movw	r3, #20288	; 0x4f40
 8013560:	4413      	add	r3, r2
 8013562:	4a88      	ldr	r2, [pc, #544]	; (8013784 <face_detection_configure_weights+0x530>)
 8013564:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8013566:	4b88      	ldr	r3, [pc, #544]	; (8013788 <face_detection_configure_weights+0x534>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801356e:	4a86      	ldr	r2, [pc, #536]	; (8013788 <face_detection_configure_weights+0x534>)
 8013570:	6013      	str	r3, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 20800);
 8013572:	4b83      	ldr	r3, [pc, #524]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013574:	681a      	ldr	r2, [r3, #0]
 8013576:	f245 1340 	movw	r3, #20800	; 0x5140
 801357a:	4413      	add	r3, r2
 801357c:	4a82      	ldr	r2, [pc, #520]	; (8013788 <face_detection_configure_weights+0x534>)
 801357e:	6093      	str	r3, [r2, #8]
    conv2d_19_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 20800);
 8013580:	4b7f      	ldr	r3, [pc, #508]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013582:	681a      	ldr	r2, [r3, #0]
 8013584:	f245 1340 	movw	r3, #20800	; 0x5140
 8013588:	4413      	add	r3, r2
 801358a:	4a7f      	ldr	r2, [pc, #508]	; (8013788 <face_detection_configure_weights+0x534>)
 801358c:	60d3      	str	r3, [r2, #12]
    
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 801358e:	4b7f      	ldr	r3, [pc, #508]	; (801378c <face_detection_configure_weights+0x538>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013596:	4a7d      	ldr	r2, [pc, #500]	; (801378c <face_detection_configure_weights+0x538>)
 8013598:	6013      	str	r3, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 37184);
 801359a:	4b79      	ldr	r3, [pc, #484]	; (8013780 <face_detection_configure_weights+0x52c>)
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	f249 1340 	movw	r3, #37184	; 0x9140
 80135a2:	4413      	add	r3, r2
 80135a4:	4a79      	ldr	r2, [pc, #484]	; (801378c <face_detection_configure_weights+0x538>)
 80135a6:	6093      	str	r3, [r2, #8]
    conv2d_19_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 37184);
 80135a8:	4b75      	ldr	r3, [pc, #468]	; (8013780 <face_detection_configure_weights+0x52c>)
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	f249 1340 	movw	r3, #37184	; 0x9140
 80135b0:	4413      	add	r3, r2
 80135b2:	4a76      	ldr	r2, [pc, #472]	; (801378c <face_detection_configure_weights+0x538>)
 80135b4:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 80135b6:	4b76      	ldr	r3, [pc, #472]	; (8013790 <face_detection_configure_weights+0x53c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80135be:	4a74      	ldr	r2, [pc, #464]	; (8013790 <face_detection_configure_weights+0x53c>)
 80135c0:	6013      	str	r3, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 37696);
 80135c2:	4b6f      	ldr	r3, [pc, #444]	; (8013780 <face_detection_configure_weights+0x52c>)
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	f249 3340 	movw	r3, #37696	; 0x9340
 80135ca:	4413      	add	r3, r2
 80135cc:	4a70      	ldr	r2, [pc, #448]	; (8013790 <face_detection_configure_weights+0x53c>)
 80135ce:	6093      	str	r3, [r2, #8]
    conv2d_20_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 37696);
 80135d0:	4b6b      	ldr	r3, [pc, #428]	; (8013780 <face_detection_configure_weights+0x52c>)
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	f249 3340 	movw	r3, #37696	; 0x9340
 80135d8:	4413      	add	r3, r2
 80135da:	4a6d      	ldr	r2, [pc, #436]	; (8013790 <face_detection_configure_weights+0x53c>)
 80135dc:	60d3      	str	r3, [r2, #12]
    
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 80135de:	4b6d      	ldr	r3, [pc, #436]	; (8013794 <face_detection_configure_weights+0x540>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80135e6:	4a6b      	ldr	r2, [pc, #428]	; (8013794 <face_detection_configure_weights+0x540>)
 80135e8:	6013      	str	r3, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 38848);
 80135ea:	4b65      	ldr	r3, [pc, #404]	; (8013780 <face_detection_configure_weights+0x52c>)
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	f249 73c0 	movw	r3, #38848	; 0x97c0
 80135f2:	4413      	add	r3, r2
 80135f4:	4a67      	ldr	r2, [pc, #412]	; (8013794 <face_detection_configure_weights+0x540>)
 80135f6:	6093      	str	r3, [r2, #8]
    conv2d_20_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 38848);
 80135f8:	4b61      	ldr	r3, [pc, #388]	; (8013780 <face_detection_configure_weights+0x52c>)
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	f249 73c0 	movw	r3, #38848	; 0x97c0
 8013600:	4413      	add	r3, r2
 8013602:	4a64      	ldr	r2, [pc, #400]	; (8013794 <face_detection_configure_weights+0x540>)
 8013604:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8013606:	4b64      	ldr	r3, [pc, #400]	; (8013798 <face_detection_configure_weights+0x544>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801360e:	4a62      	ldr	r2, [pc, #392]	; (8013798 <face_detection_configure_weights+0x544>)
 8013610:	6013      	str	r3, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 39360);
 8013612:	4b5b      	ldr	r3, [pc, #364]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013614:	681a      	ldr	r2, [r3, #0]
 8013616:	f649 13c0 	movw	r3, #39360	; 0x99c0
 801361a:	4413      	add	r3, r2
 801361c:	4a5e      	ldr	r2, [pc, #376]	; (8013798 <face_detection_configure_weights+0x544>)
 801361e:	6093      	str	r3, [r2, #8]
    conv2d_21_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 39360);
 8013620:	4b57      	ldr	r3, [pc, #348]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	f649 13c0 	movw	r3, #39360	; 0x99c0
 8013628:	4413      	add	r3, r2
 801362a:	4a5b      	ldr	r2, [pc, #364]	; (8013798 <face_detection_configure_weights+0x544>)
 801362c:	60d3      	str	r3, [r2, #12]
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 801362e:	4b5b      	ldr	r3, [pc, #364]	; (801379c <face_detection_configure_weights+0x548>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013636:	4a59      	ldr	r2, [pc, #356]	; (801379c <face_detection_configure_weights+0x548>)
 8013638:	6013      	str	r3, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 55744);
 801363a:	4b51      	ldr	r3, [pc, #324]	; (8013780 <face_detection_configure_weights+0x52c>)
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	f64d 13c0 	movw	r3, #55744	; 0xd9c0
 8013642:	4413      	add	r3, r2
 8013644:	4a55      	ldr	r2, [pc, #340]	; (801379c <face_detection_configure_weights+0x548>)
 8013646:	6093      	str	r3, [r2, #8]
    conv2d_21_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 55744);
 8013648:	4b4d      	ldr	r3, [pc, #308]	; (8013780 <face_detection_configure_weights+0x52c>)
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	f64d 13c0 	movw	r3, #55744	; 0xd9c0
 8013650:	4413      	add	r3, r2
 8013652:	4a52      	ldr	r2, [pc, #328]	; (801379c <face_detection_configure_weights+0x548>)
 8013654:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8013656:	4b52      	ldr	r3, [pc, #328]	; (80137a0 <face_detection_configure_weights+0x54c>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801365e:	4a50      	ldr	r2, [pc, #320]	; (80137a0 <face_detection_configure_weights+0x54c>)
 8013660:	6013      	str	r3, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 56256);
 8013662:	4b47      	ldr	r3, [pc, #284]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	f64d 33c0 	movw	r3, #56256	; 0xdbc0
 801366a:	4413      	add	r3, r2
 801366c:	4a4c      	ldr	r2, [pc, #304]	; (80137a0 <face_detection_configure_weights+0x54c>)
 801366e:	6093      	str	r3, [r2, #8]
    conv2d_22_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 56256);
 8013670:	4b43      	ldr	r3, [pc, #268]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	f64d 33c0 	movw	r3, #56256	; 0xdbc0
 8013678:	4413      	add	r3, r2
 801367a:	4a49      	ldr	r2, [pc, #292]	; (80137a0 <face_detection_configure_weights+0x54c>)
 801367c:	60d3      	str	r3, [r2, #12]
    
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 801367e:	4b49      	ldr	r3, [pc, #292]	; (80137a4 <face_detection_configure_weights+0x550>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013686:	4a47      	ldr	r2, [pc, #284]	; (80137a4 <face_detection_configure_weights+0x550>)
 8013688:	6013      	str	r3, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 57408);
 801368a:	4b3d      	ldr	r3, [pc, #244]	; (8013780 <face_detection_configure_weights+0x52c>)
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	f24e 0340 	movw	r3, #57408	; 0xe040
 8013692:	4413      	add	r3, r2
 8013694:	4a43      	ldr	r2, [pc, #268]	; (80137a4 <face_detection_configure_weights+0x550>)
 8013696:	6093      	str	r3, [r2, #8]
    conv2d_22_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 57408);
 8013698:	4b39      	ldr	r3, [pc, #228]	; (8013780 <face_detection_configure_weights+0x52c>)
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	f24e 0340 	movw	r3, #57408	; 0xe040
 80136a0:	4413      	add	r3, r2
 80136a2:	4a40      	ldr	r2, [pc, #256]	; (80137a4 <face_detection_configure_weights+0x550>)
 80136a4:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80136a6:	4b40      	ldr	r3, [pc, #256]	; (80137a8 <face_detection_configure_weights+0x554>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80136ae:	4a3e      	ldr	r2, [pc, #248]	; (80137a8 <face_detection_configure_weights+0x554>)
 80136b0:	6013      	str	r3, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 57920);
 80136b2:	4b33      	ldr	r3, [pc, #204]	; (8013780 <face_detection_configure_weights+0x52c>)
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	f24e 2340 	movw	r3, #57920	; 0xe240
 80136ba:	4413      	add	r3, r2
 80136bc:	4a3a      	ldr	r2, [pc, #232]	; (80137a8 <face_detection_configure_weights+0x554>)
 80136be:	6093      	str	r3, [r2, #8]
    conv2d_23_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 57920);
 80136c0:	4b2f      	ldr	r3, [pc, #188]	; (8013780 <face_detection_configure_weights+0x52c>)
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	f24e 2340 	movw	r3, #57920	; 0xe240
 80136c8:	4413      	add	r3, r2
 80136ca:	4a37      	ldr	r2, [pc, #220]	; (80137a8 <face_detection_configure_weights+0x554>)
 80136cc:	60d3      	str	r3, [r2, #12]
    
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 80136ce:	4b37      	ldr	r3, [pc, #220]	; (80137ac <face_detection_configure_weights+0x558>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80136d6:	4a35      	ldr	r2, [pc, #212]	; (80137ac <face_detection_configure_weights+0x558>)
 80136d8:	6013      	str	r3, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 74304);
 80136da:	4b29      	ldr	r3, [pc, #164]	; (8013780 <face_detection_configure_weights+0x52c>)
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	4b34      	ldr	r3, [pc, #208]	; (80137b0 <face_detection_configure_weights+0x55c>)
 80136e0:	4413      	add	r3, r2
 80136e2:	4a32      	ldr	r2, [pc, #200]	; (80137ac <face_detection_configure_weights+0x558>)
 80136e4:	6093      	str	r3, [r2, #8]
    conv2d_23_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 74304);
 80136e6:	4b26      	ldr	r3, [pc, #152]	; (8013780 <face_detection_configure_weights+0x52c>)
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	4b31      	ldr	r3, [pc, #196]	; (80137b0 <face_detection_configure_weights+0x55c>)
 80136ec:	4413      	add	r3, r2
 80136ee:	4a2f      	ldr	r2, [pc, #188]	; (80137ac <face_detection_configure_weights+0x558>)
 80136f0:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80136f2:	4b30      	ldr	r3, [pc, #192]	; (80137b4 <face_detection_configure_weights+0x560>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80136fa:	4a2e      	ldr	r2, [pc, #184]	; (80137b4 <face_detection_configure_weights+0x560>)
 80136fc:	6013      	str	r3, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 74816);
 80136fe:	4b20      	ldr	r3, [pc, #128]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	4b2d      	ldr	r3, [pc, #180]	; (80137b8 <face_detection_configure_weights+0x564>)
 8013704:	4413      	add	r3, r2
 8013706:	4a2b      	ldr	r2, [pc, #172]	; (80137b4 <face_detection_configure_weights+0x560>)
 8013708:	6093      	str	r3, [r2, #8]
    conv2d_24_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 74816);
 801370a:	4b1d      	ldr	r3, [pc, #116]	; (8013780 <face_detection_configure_weights+0x52c>)
 801370c:	681a      	ldr	r2, [r3, #0]
 801370e:	4b2a      	ldr	r3, [pc, #168]	; (80137b8 <face_detection_configure_weights+0x564>)
 8013710:	4413      	add	r3, r2
 8013712:	4a28      	ldr	r2, [pc, #160]	; (80137b4 <face_detection_configure_weights+0x560>)
 8013714:	60d3      	str	r3, [r2, #12]
    
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8013716:	4b29      	ldr	r3, [pc, #164]	; (80137bc <face_detection_configure_weights+0x568>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801371e:	4a27      	ldr	r2, [pc, #156]	; (80137bc <face_detection_configure_weights+0x568>)
 8013720:	6013      	str	r3, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 75968);
 8013722:	4b17      	ldr	r3, [pc, #92]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	4b26      	ldr	r3, [pc, #152]	; (80137c0 <face_detection_configure_weights+0x56c>)
 8013728:	4413      	add	r3, r2
 801372a:	4a24      	ldr	r2, [pc, #144]	; (80137bc <face_detection_configure_weights+0x568>)
 801372c:	6093      	str	r3, [r2, #8]
    conv2d_24_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 75968);
 801372e:	4b14      	ldr	r3, [pc, #80]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	4b23      	ldr	r3, [pc, #140]	; (80137c0 <face_detection_configure_weights+0x56c>)
 8013734:	4413      	add	r3, r2
 8013736:	4a21      	ldr	r2, [pc, #132]	; (80137bc <face_detection_configure_weights+0x568>)
 8013738:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 801373a:	4b22      	ldr	r3, [pc, #136]	; (80137c4 <face_detection_configure_weights+0x570>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013742:	4a20      	ldr	r2, [pc, #128]	; (80137c4 <face_detection_configure_weights+0x570>)
 8013744:	6013      	str	r3, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 76480);
 8013746:	4b0e      	ldr	r3, [pc, #56]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013748:	681a      	ldr	r2, [r3, #0]
 801374a:	4b1f      	ldr	r3, [pc, #124]	; (80137c8 <face_detection_configure_weights+0x574>)
 801374c:	4413      	add	r3, r2
 801374e:	4a1d      	ldr	r2, [pc, #116]	; (80137c4 <face_detection_configure_weights+0x570>)
 8013750:	6093      	str	r3, [r2, #8]
    conv2d_25_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 76480);
 8013752:	4b0b      	ldr	r3, [pc, #44]	; (8013780 <face_detection_configure_weights+0x52c>)
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	4b1c      	ldr	r3, [pc, #112]	; (80137c8 <face_detection_configure_weights+0x574>)
 8013758:	4413      	add	r3, r2
 801375a:	4a1a      	ldr	r2, [pc, #104]	; (80137c4 <face_detection_configure_weights+0x570>)
 801375c:	60d3      	str	r3, [r2, #12]
    
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 801375e:	4b1b      	ldr	r3, [pc, #108]	; (80137cc <face_detection_configure_weights+0x578>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013766:	4a19      	ldr	r2, [pc, #100]	; (80137cc <face_detection_configure_weights+0x578>)
 8013768:	6013      	str	r3, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 92864);
 801376a:	4b05      	ldr	r3, [pc, #20]	; (8013780 <face_detection_configure_weights+0x52c>)
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	4b18      	ldr	r3, [pc, #96]	; (80137d0 <face_detection_configure_weights+0x57c>)
 8013770:	4413      	add	r3, r2
 8013772:	4a16      	ldr	r2, [pc, #88]	; (80137cc <face_detection_configure_weights+0x578>)
 8013774:	6093      	str	r3, [r2, #8]
 8013776:	e02d      	b.n	80137d4 <face_detection_configure_weights+0x580>
 8013778:	24000268 	.word	0x24000268
 801377c:	24000288 	.word	0x24000288
 8013780:	2405ded4 	.word	0x2405ded4
 8013784:	240002a8 	.word	0x240002a8
 8013788:	240002c8 	.word	0x240002c8
 801378c:	240002e8 	.word	0x240002e8
 8013790:	240002f8 	.word	0x240002f8
 8013794:	24000318 	.word	0x24000318
 8013798:	24000338 	.word	0x24000338
 801379c:	24000358 	.word	0x24000358
 80137a0:	24000378 	.word	0x24000378
 80137a4:	24000388 	.word	0x24000388
 80137a8:	240003a8 	.word	0x240003a8
 80137ac:	240003c8 	.word	0x240003c8
 80137b0:	00012240 	.word	0x00012240
 80137b4:	240003e8 	.word	0x240003e8
 80137b8:	00012440 	.word	0x00012440
 80137bc:	24000408 	.word	0x24000408
 80137c0:	000128c0 	.word	0x000128c0
 80137c4:	24000418 	.word	0x24000418
 80137c8:	00012ac0 	.word	0x00012ac0
 80137cc:	24000438 	.word	0x24000438
 80137d0:	00016ac0 	.word	0x00016ac0
    conv2d_25_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 92864);
 80137d4:	4b8e      	ldr	r3, [pc, #568]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80137d6:	681a      	ldr	r2, [r3, #0]
 80137d8:	4b8e      	ldr	r3, [pc, #568]	; (8013a14 <face_detection_configure_weights+0x7c0>)
 80137da:	4413      	add	r3, r2
 80137dc:	4a8e      	ldr	r2, [pc, #568]	; (8013a18 <face_detection_configure_weights+0x7c4>)
 80137de:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80137e0:	4b8e      	ldr	r3, [pc, #568]	; (8013a1c <face_detection_configure_weights+0x7c8>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80137e8:	4a8c      	ldr	r2, [pc, #560]	; (8013a1c <face_detection_configure_weights+0x7c8>)
 80137ea:	6013      	str	r3, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 93376);
 80137ec:	4b88      	ldr	r3, [pc, #544]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80137ee:	681a      	ldr	r2, [r3, #0]
 80137f0:	4b8b      	ldr	r3, [pc, #556]	; (8013a20 <face_detection_configure_weights+0x7cc>)
 80137f2:	4413      	add	r3, r2
 80137f4:	4a89      	ldr	r2, [pc, #548]	; (8013a1c <face_detection_configure_weights+0x7c8>)
 80137f6:	6093      	str	r3, [r2, #8]
    conv2d_26_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 93376);
 80137f8:	4b85      	ldr	r3, [pc, #532]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	4b88      	ldr	r3, [pc, #544]	; (8013a20 <face_detection_configure_weights+0x7cc>)
 80137fe:	4413      	add	r3, r2
 8013800:	4a86      	ldr	r2, [pc, #536]	; (8013a1c <face_detection_configure_weights+0x7c8>)
 8013802:	60d3      	str	r3, [r2, #12]
    
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8013804:	4b87      	ldr	r3, [pc, #540]	; (8013a24 <face_detection_configure_weights+0x7d0>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801380c:	4a85      	ldr	r2, [pc, #532]	; (8013a24 <face_detection_configure_weights+0x7d0>)
 801380e:	6013      	str	r3, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 94528);
 8013810:	4b7f      	ldr	r3, [pc, #508]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013812:	681a      	ldr	r2, [r3, #0]
 8013814:	4b84      	ldr	r3, [pc, #528]	; (8013a28 <face_detection_configure_weights+0x7d4>)
 8013816:	4413      	add	r3, r2
 8013818:	4a82      	ldr	r2, [pc, #520]	; (8013a24 <face_detection_configure_weights+0x7d0>)
 801381a:	6093      	str	r3, [r2, #8]
    conv2d_26_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 94528);
 801381c:	4b7c      	ldr	r3, [pc, #496]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	4b81      	ldr	r3, [pc, #516]	; (8013a28 <face_detection_configure_weights+0x7d4>)
 8013822:	4413      	add	r3, r2
 8013824:	4a7f      	ldr	r2, [pc, #508]	; (8013a24 <face_detection_configure_weights+0x7d0>)
 8013826:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8013828:	4b80      	ldr	r3, [pc, #512]	; (8013a2c <face_detection_configure_weights+0x7d8>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013830:	4a7e      	ldr	r2, [pc, #504]	; (8013a2c <face_detection_configure_weights+0x7d8>)
 8013832:	6013      	str	r3, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 95040);
 8013834:	4b76      	ldr	r3, [pc, #472]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013836:	681a      	ldr	r2, [r3, #0]
 8013838:	4b7d      	ldr	r3, [pc, #500]	; (8013a30 <face_detection_configure_weights+0x7dc>)
 801383a:	4413      	add	r3, r2
 801383c:	4a7b      	ldr	r2, [pc, #492]	; (8013a2c <face_detection_configure_weights+0x7d8>)
 801383e:	6093      	str	r3, [r2, #8]
    conv2d_27_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 95040);
 8013840:	4b73      	ldr	r3, [pc, #460]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	4b7a      	ldr	r3, [pc, #488]	; (8013a30 <face_detection_configure_weights+0x7dc>)
 8013846:	4413      	add	r3, r2
 8013848:	4a78      	ldr	r2, [pc, #480]	; (8013a2c <face_detection_configure_weights+0x7d8>)
 801384a:	60d3      	str	r3, [r2, #12]
    
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 801384c:	4b79      	ldr	r3, [pc, #484]	; (8013a34 <face_detection_configure_weights+0x7e0>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013854:	4a77      	ldr	r2, [pc, #476]	; (8013a34 <face_detection_configure_weights+0x7e0>)
 8013856:	6013      	str	r3, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 111424);
 8013858:	4b6d      	ldr	r3, [pc, #436]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	4b76      	ldr	r3, [pc, #472]	; (8013a38 <face_detection_configure_weights+0x7e4>)
 801385e:	4413      	add	r3, r2
 8013860:	4a74      	ldr	r2, [pc, #464]	; (8013a34 <face_detection_configure_weights+0x7e0>)
 8013862:	6093      	str	r3, [r2, #8]
    conv2d_27_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 111424);
 8013864:	4b6a      	ldr	r3, [pc, #424]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	4b73      	ldr	r3, [pc, #460]	; (8013a38 <face_detection_configure_weights+0x7e4>)
 801386a:	4413      	add	r3, r2
 801386c:	4a71      	ldr	r2, [pc, #452]	; (8013a34 <face_detection_configure_weights+0x7e0>)
 801386e:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8013870:	4b72      	ldr	r3, [pc, #456]	; (8013a3c <face_detection_configure_weights+0x7e8>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013878:	4a70      	ldr	r2, [pc, #448]	; (8013a3c <face_detection_configure_weights+0x7e8>)
 801387a:	6013      	str	r3, [r2, #0]
    conv2d_30_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 111936);
 801387c:	4b64      	ldr	r3, [pc, #400]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801387e:	681a      	ldr	r2, [r3, #0]
 8013880:	4b6f      	ldr	r3, [pc, #444]	; (8013a40 <face_detection_configure_weights+0x7ec>)
 8013882:	4413      	add	r3, r2
 8013884:	4a6d      	ldr	r2, [pc, #436]	; (8013a3c <face_detection_configure_weights+0x7e8>)
 8013886:	6093      	str	r3, [r2, #8]
    conv2d_30_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 111936);
 8013888:	4b61      	ldr	r3, [pc, #388]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801388a:	681a      	ldr	r2, [r3, #0]
 801388c:	4b6c      	ldr	r3, [pc, #432]	; (8013a40 <face_detection_configure_weights+0x7ec>)
 801388e:	4413      	add	r3, r2
 8013890:	4a6a      	ldr	r2, [pc, #424]	; (8013a3c <face_detection_configure_weights+0x7e8>)
 8013892:	60d3      	str	r3, [r2, #12]
    
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8013894:	4b6b      	ldr	r3, [pc, #428]	; (8013a44 <face_detection_configure_weights+0x7f0>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801389c:	4a69      	ldr	r2, [pc, #420]	; (8013a44 <face_detection_configure_weights+0x7f0>)
 801389e:	6013      	str	r3, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 113088);
 80138a0:	4b5b      	ldr	r3, [pc, #364]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	4b68      	ldr	r3, [pc, #416]	; (8013a48 <face_detection_configure_weights+0x7f4>)
 80138a6:	4413      	add	r3, r2
 80138a8:	4a66      	ldr	r2, [pc, #408]	; (8013a44 <face_detection_configure_weights+0x7f0>)
 80138aa:	6093      	str	r3, [r2, #8]
    conv2d_30_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 113088);
 80138ac:	4b58      	ldr	r3, [pc, #352]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	4b65      	ldr	r3, [pc, #404]	; (8013a48 <face_detection_configure_weights+0x7f4>)
 80138b2:	4413      	add	r3, r2
 80138b4:	4a63      	ldr	r2, [pc, #396]	; (8013a44 <face_detection_configure_weights+0x7f0>)
 80138b6:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 80138b8:	4b64      	ldr	r3, [pc, #400]	; (8013a4c <face_detection_configure_weights+0x7f8>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138c0:	4a62      	ldr	r2, [pc, #392]	; (8013a4c <face_detection_configure_weights+0x7f8>)
 80138c2:	6013      	str	r3, [r2, #0]
    conv2d_31_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 113600);
 80138c4:	4b52      	ldr	r3, [pc, #328]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80138c6:	681a      	ldr	r2, [r3, #0]
 80138c8:	4b61      	ldr	r3, [pc, #388]	; (8013a50 <face_detection_configure_weights+0x7fc>)
 80138ca:	4413      	add	r3, r2
 80138cc:	4a5f      	ldr	r2, [pc, #380]	; (8013a4c <face_detection_configure_weights+0x7f8>)
 80138ce:	6093      	str	r3, [r2, #8]
    conv2d_31_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 113600);
 80138d0:	4b4f      	ldr	r3, [pc, #316]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	4b5e      	ldr	r3, [pc, #376]	; (8013a50 <face_detection_configure_weights+0x7fc>)
 80138d6:	4413      	add	r3, r2
 80138d8:	4a5c      	ldr	r2, [pc, #368]	; (8013a4c <face_detection_configure_weights+0x7f8>)
 80138da:	60d3      	str	r3, [r2, #12]
    
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 80138dc:	4b5d      	ldr	r3, [pc, #372]	; (8013a54 <face_detection_configure_weights+0x800>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138e4:	4a5b      	ldr	r2, [pc, #364]	; (8013a54 <face_detection_configure_weights+0x800>)
 80138e6:	6013      	str	r3, [r2, #0]
    conv2d_31_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 146368);
 80138e8:	4b49      	ldr	r3, [pc, #292]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	4b5a      	ldr	r3, [pc, #360]	; (8013a58 <face_detection_configure_weights+0x804>)
 80138ee:	4413      	add	r3, r2
 80138f0:	4a58      	ldr	r2, [pc, #352]	; (8013a54 <face_detection_configure_weights+0x800>)
 80138f2:	6093      	str	r3, [r2, #8]
    conv2d_31_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 146368);
 80138f4:	4b46      	ldr	r3, [pc, #280]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	4b57      	ldr	r3, [pc, #348]	; (8013a58 <face_detection_configure_weights+0x804>)
 80138fa:	4413      	add	r3, r2
 80138fc:	4a55      	ldr	r2, [pc, #340]	; (8013a54 <face_detection_configure_weights+0x800>)
 80138fe:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8013900:	4b56      	ldr	r3, [pc, #344]	; (8013a5c <face_detection_configure_weights+0x808>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013908:	4a54      	ldr	r2, [pc, #336]	; (8013a5c <face_detection_configure_weights+0x808>)
 801390a:	6013      	str	r3, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 147392);
 801390c:	4b40      	ldr	r3, [pc, #256]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	4b53      	ldr	r3, [pc, #332]	; (8013a60 <face_detection_configure_weights+0x80c>)
 8013912:	4413      	add	r3, r2
 8013914:	4a51      	ldr	r2, [pc, #324]	; (8013a5c <face_detection_configure_weights+0x808>)
 8013916:	6093      	str	r3, [r2, #8]
    conv2d_32_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 147392);
 8013918:	4b3d      	ldr	r3, [pc, #244]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801391a:	681a      	ldr	r2, [r3, #0]
 801391c:	4b50      	ldr	r3, [pc, #320]	; (8013a60 <face_detection_configure_weights+0x80c>)
 801391e:	4413      	add	r3, r2
 8013920:	4a4e      	ldr	r2, [pc, #312]	; (8013a5c <face_detection_configure_weights+0x808>)
 8013922:	60d3      	str	r3, [r2, #12]
    
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8013924:	4b4f      	ldr	r3, [pc, #316]	; (8013a64 <face_detection_configure_weights+0x810>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801392c:	4a4d      	ldr	r2, [pc, #308]	; (8013a64 <face_detection_configure_weights+0x810>)
 801392e:	6013      	str	r3, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 149696);
 8013930:	4b37      	ldr	r3, [pc, #220]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	4b4c      	ldr	r3, [pc, #304]	; (8013a68 <face_detection_configure_weights+0x814>)
 8013936:	4413      	add	r3, r2
 8013938:	4a4a      	ldr	r2, [pc, #296]	; (8013a64 <face_detection_configure_weights+0x810>)
 801393a:	6093      	str	r3, [r2, #8]
    conv2d_32_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 149696);
 801393c:	4b34      	ldr	r3, [pc, #208]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	4b49      	ldr	r3, [pc, #292]	; (8013a68 <face_detection_configure_weights+0x814>)
 8013942:	4413      	add	r3, r2
 8013944:	4a47      	ldr	r2, [pc, #284]	; (8013a64 <face_detection_configure_weights+0x810>)
 8013946:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8013948:	4b48      	ldr	r3, [pc, #288]	; (8013a6c <face_detection_configure_weights+0x818>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013950:	4a46      	ldr	r2, [pc, #280]	; (8013a6c <face_detection_configure_weights+0x818>)
 8013952:	6013      	str	r3, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 150720);
 8013954:	4b2e      	ldr	r3, [pc, #184]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013956:	681a      	ldr	r2, [r3, #0]
 8013958:	4b45      	ldr	r3, [pc, #276]	; (8013a70 <face_detection_configure_weights+0x81c>)
 801395a:	4413      	add	r3, r2
 801395c:	4a43      	ldr	r2, [pc, #268]	; (8013a6c <face_detection_configure_weights+0x818>)
 801395e:	6093      	str	r3, [r2, #8]
    conv2d_33_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 150720);
 8013960:	4b2b      	ldr	r3, [pc, #172]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	4b42      	ldr	r3, [pc, #264]	; (8013a70 <face_detection_configure_weights+0x81c>)
 8013966:	4413      	add	r3, r2
 8013968:	4a40      	ldr	r2, [pc, #256]	; (8013a6c <face_detection_configure_weights+0x818>)
 801396a:	60d3      	str	r3, [r2, #12]
    
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 801396c:	4b41      	ldr	r3, [pc, #260]	; (8013a74 <face_detection_configure_weights+0x820>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013974:	4a3f      	ldr	r2, [pc, #252]	; (8013a74 <face_detection_configure_weights+0x820>)
 8013976:	6013      	str	r3, [r2, #0]
    conv2d_33_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 216256);
 8013978:	4b25      	ldr	r3, [pc, #148]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	4b3e      	ldr	r3, [pc, #248]	; (8013a78 <face_detection_configure_weights+0x824>)
 801397e:	4413      	add	r3, r2
 8013980:	4a3c      	ldr	r2, [pc, #240]	; (8013a74 <face_detection_configure_weights+0x820>)
 8013982:	6093      	str	r3, [r2, #8]
    conv2d_33_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 216256);
 8013984:	4b22      	ldr	r3, [pc, #136]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	4b3b      	ldr	r3, [pc, #236]	; (8013a78 <face_detection_configure_weights+0x824>)
 801398a:	4413      	add	r3, r2
 801398c:	4a39      	ldr	r2, [pc, #228]	; (8013a74 <face_detection_configure_weights+0x820>)
 801398e:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8013990:	4b3a      	ldr	r3, [pc, #232]	; (8013a7c <face_detection_configure_weights+0x828>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013998:	4a38      	ldr	r2, [pc, #224]	; (8013a7c <face_detection_configure_weights+0x828>)
 801399a:	6013      	str	r3, [r2, #0]
    conv2d_35_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 217280);
 801399c:	4b1c      	ldr	r3, [pc, #112]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	4b37      	ldr	r3, [pc, #220]	; (8013a80 <face_detection_configure_weights+0x82c>)
 80139a2:	4413      	add	r3, r2
 80139a4:	4a35      	ldr	r2, [pc, #212]	; (8013a7c <face_detection_configure_weights+0x828>)
 80139a6:	6093      	str	r3, [r2, #8]
    conv2d_35_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 217280);
 80139a8:	4b19      	ldr	r3, [pc, #100]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	4b34      	ldr	r3, [pc, #208]	; (8013a80 <face_detection_configure_weights+0x82c>)
 80139ae:	4413      	add	r3, r2
 80139b0:	4a32      	ldr	r2, [pc, #200]	; (8013a7c <face_detection_configure_weights+0x828>)
 80139b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 80139b4:	4b33      	ldr	r3, [pc, #204]	; (8013a84 <face_detection_configure_weights+0x830>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139bc:	4a31      	ldr	r2, [pc, #196]	; (8013a84 <face_detection_configure_weights+0x830>)
 80139be:	6013      	str	r3, [r2, #0]
    conv2d_35_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 219584);
 80139c0:	4b13      	ldr	r3, [pc, #76]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80139c2:	681a      	ldr	r2, [r3, #0]
 80139c4:	4b30      	ldr	r3, [pc, #192]	; (8013a88 <face_detection_configure_weights+0x834>)
 80139c6:	4413      	add	r3, r2
 80139c8:	4a2e      	ldr	r2, [pc, #184]	; (8013a84 <face_detection_configure_weights+0x830>)
 80139ca:	6093      	str	r3, [r2, #8]
    conv2d_35_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 219584);
 80139cc:	4b10      	ldr	r3, [pc, #64]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	4b2d      	ldr	r3, [pc, #180]	; (8013a88 <face_detection_configure_weights+0x834>)
 80139d2:	4413      	add	r3, r2
 80139d4:	4a2b      	ldr	r2, [pc, #172]	; (8013a84 <face_detection_configure_weights+0x830>)
 80139d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 80139d8:	4b2c      	ldr	r3, [pc, #176]	; (8013a8c <face_detection_configure_weights+0x838>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139e0:	4a2a      	ldr	r2, [pc, #168]	; (8013a8c <face_detection_configure_weights+0x838>)
 80139e2:	6013      	str	r3, [r2, #0]
    conv2d_36_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 220608);
 80139e4:	4b0a      	ldr	r3, [pc, #40]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	4b29      	ldr	r3, [pc, #164]	; (8013a90 <face_detection_configure_weights+0x83c>)
 80139ea:	4413      	add	r3, r2
 80139ec:	4a27      	ldr	r2, [pc, #156]	; (8013a8c <face_detection_configure_weights+0x838>)
 80139ee:	6093      	str	r3, [r2, #8]
    conv2d_36_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 220608);
 80139f0:	4b07      	ldr	r3, [pc, #28]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	4b26      	ldr	r3, [pc, #152]	; (8013a90 <face_detection_configure_weights+0x83c>)
 80139f6:	4413      	add	r3, r2
 80139f8:	4a24      	ldr	r2, [pc, #144]	; (8013a8c <face_detection_configure_weights+0x838>)
 80139fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 80139fc:	4b25      	ldr	r3, [pc, #148]	; (8013a94 <face_detection_configure_weights+0x840>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a04:	4a23      	ldr	r2, [pc, #140]	; (8013a94 <face_detection_configure_weights+0x840>)
 8013a06:	6013      	str	r3, [r2, #0]
    conv2d_36_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 286144);
 8013a08:	4b01      	ldr	r3, [pc, #4]	; (8013a10 <face_detection_configure_weights+0x7bc>)
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	e044      	b.n	8013a98 <face_detection_configure_weights+0x844>
 8013a0e:	bf00      	nop
 8013a10:	2405ded4 	.word	0x2405ded4
 8013a14:	00016ac0 	.word	0x00016ac0
 8013a18:	24000438 	.word	0x24000438
 8013a1c:	24000458 	.word	0x24000458
 8013a20:	00016cc0 	.word	0x00016cc0
 8013a24:	24000478 	.word	0x24000478
 8013a28:	00017140 	.word	0x00017140
 8013a2c:	24000498 	.word	0x24000498
 8013a30:	00017340 	.word	0x00017340
 8013a34:	240004a8 	.word	0x240004a8
 8013a38:	0001b340 	.word	0x0001b340
 8013a3c:	240004b8 	.word	0x240004b8
 8013a40:	0001b540 	.word	0x0001b540
 8013a44:	240004c8 	.word	0x240004c8
 8013a48:	0001b9c0 	.word	0x0001b9c0
 8013a4c:	240004d8 	.word	0x240004d8
 8013a50:	0001bbc0 	.word	0x0001bbc0
 8013a54:	240004e8 	.word	0x240004e8
 8013a58:	00023bc0 	.word	0x00023bc0
 8013a5c:	240004f8 	.word	0x240004f8
 8013a60:	00023fc0 	.word	0x00023fc0
 8013a64:	24000518 	.word	0x24000518
 8013a68:	000248c0 	.word	0x000248c0
 8013a6c:	24000548 	.word	0x24000548
 8013a70:	00024cc0 	.word	0x00024cc0
 8013a74:	24000578 	.word	0x24000578
 8013a78:	00034cc0 	.word	0x00034cc0
 8013a7c:	240005a8 	.word	0x240005a8
 8013a80:	000350c0 	.word	0x000350c0
 8013a84:	240005d8 	.word	0x240005d8
 8013a88:	000359c0 	.word	0x000359c0
 8013a8c:	24000608 	.word	0x24000608
 8013a90:	00035dc0 	.word	0x00035dc0
 8013a94:	24000638 	.word	0x24000638
 8013a98:	4b8f      	ldr	r3, [pc, #572]	; (8013cd8 <face_detection_configure_weights+0xa84>)
 8013a9a:	4413      	add	r3, r2
 8013a9c:	4a8f      	ldr	r2, [pc, #572]	; (8013cdc <face_detection_configure_weights+0xa88>)
 8013a9e:	6093      	str	r3, [r2, #8]
    conv2d_36_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 286144);
 8013aa0:	4b8f      	ldr	r3, [pc, #572]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	4b8c      	ldr	r3, [pc, #560]	; (8013cd8 <face_detection_configure_weights+0xa84>)
 8013aa6:	4413      	add	r3, r2
 8013aa8:	4a8c      	ldr	r2, [pc, #560]	; (8013cdc <face_detection_configure_weights+0xa88>)
 8013aaa:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8013aac:	4b8d      	ldr	r3, [pc, #564]	; (8013ce4 <face_detection_configure_weights+0xa90>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ab4:	4a8b      	ldr	r2, [pc, #556]	; (8013ce4 <face_detection_configure_weights+0xa90>)
 8013ab6:	6013      	str	r3, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 287168);
 8013ab8:	4b89      	ldr	r3, [pc, #548]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	4b8a      	ldr	r3, [pc, #552]	; (8013ce8 <face_detection_configure_weights+0xa94>)
 8013abe:	4413      	add	r3, r2
 8013ac0:	4a88      	ldr	r2, [pc, #544]	; (8013ce4 <face_detection_configure_weights+0xa90>)
 8013ac2:	6093      	str	r3, [r2, #8]
    conv2d_37_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 287168);
 8013ac4:	4b86      	ldr	r3, [pc, #536]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	4b87      	ldr	r3, [pc, #540]	; (8013ce8 <face_detection_configure_weights+0xa94>)
 8013aca:	4413      	add	r3, r2
 8013acc:	4a85      	ldr	r2, [pc, #532]	; (8013ce4 <face_detection_configure_weights+0xa90>)
 8013ace:	60d3      	str	r3, [r2, #12]
    
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8013ad0:	4b86      	ldr	r3, [pc, #536]	; (8013cec <face_detection_configure_weights+0xa98>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ad8:	4a84      	ldr	r2, [pc, #528]	; (8013cec <face_detection_configure_weights+0xa98>)
 8013ada:	6013      	str	r3, [r2, #0]
    conv2d_37_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 289472);
 8013adc:	4b80      	ldr	r3, [pc, #512]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	4b83      	ldr	r3, [pc, #524]	; (8013cf0 <face_detection_configure_weights+0xa9c>)
 8013ae2:	4413      	add	r3, r2
 8013ae4:	4a81      	ldr	r2, [pc, #516]	; (8013cec <face_detection_configure_weights+0xa98>)
 8013ae6:	6093      	str	r3, [r2, #8]
    conv2d_37_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 289472);
 8013ae8:	4b7d      	ldr	r3, [pc, #500]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	4b80      	ldr	r3, [pc, #512]	; (8013cf0 <face_detection_configure_weights+0xa9c>)
 8013aee:	4413      	add	r3, r2
 8013af0:	4a7e      	ldr	r2, [pc, #504]	; (8013cec <face_detection_configure_weights+0xa98>)
 8013af2:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8013af4:	4b7f      	ldr	r3, [pc, #508]	; (8013cf4 <face_detection_configure_weights+0xaa0>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013afc:	4a7d      	ldr	r2, [pc, #500]	; (8013cf4 <face_detection_configure_weights+0xaa0>)
 8013afe:	6013      	str	r3, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 290496);
 8013b00:	4b77      	ldr	r3, [pc, #476]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	4b7c      	ldr	r3, [pc, #496]	; (8013cf8 <face_detection_configure_weights+0xaa4>)
 8013b06:	4413      	add	r3, r2
 8013b08:	4a7a      	ldr	r2, [pc, #488]	; (8013cf4 <face_detection_configure_weights+0xaa0>)
 8013b0a:	6093      	str	r3, [r2, #8]
    conv2d_38_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 290496);
 8013b0c:	4b74      	ldr	r3, [pc, #464]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	4b79      	ldr	r3, [pc, #484]	; (8013cf8 <face_detection_configure_weights+0xaa4>)
 8013b12:	4413      	add	r3, r2
 8013b14:	4a77      	ldr	r2, [pc, #476]	; (8013cf4 <face_detection_configure_weights+0xaa0>)
 8013b16:	60d3      	str	r3, [r2, #12]
    
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8013b18:	4b78      	ldr	r3, [pc, #480]	; (8013cfc <face_detection_configure_weights+0xaa8>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b20:	4a76      	ldr	r2, [pc, #472]	; (8013cfc <face_detection_configure_weights+0xaa8>)
 8013b22:	6013      	str	r3, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 356032);
 8013b24:	4b6e      	ldr	r3, [pc, #440]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	4b75      	ldr	r3, [pc, #468]	; (8013d00 <face_detection_configure_weights+0xaac>)
 8013b2a:	4413      	add	r3, r2
 8013b2c:	4a73      	ldr	r2, [pc, #460]	; (8013cfc <face_detection_configure_weights+0xaa8>)
 8013b2e:	6093      	str	r3, [r2, #8]
    conv2d_38_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 356032);
 8013b30:	4b6b      	ldr	r3, [pc, #428]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	4b72      	ldr	r3, [pc, #456]	; (8013d00 <face_detection_configure_weights+0xaac>)
 8013b36:	4413      	add	r3, r2
 8013b38:	4a70      	ldr	r2, [pc, #448]	; (8013cfc <face_detection_configure_weights+0xaa8>)
 8013b3a:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8013b3c:	4b71      	ldr	r3, [pc, #452]	; (8013d04 <face_detection_configure_weights+0xab0>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b44:	4a6f      	ldr	r2, [pc, #444]	; (8013d04 <face_detection_configure_weights+0xab0>)
 8013b46:	6013      	str	r3, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 357056);
 8013b48:	4b65      	ldr	r3, [pc, #404]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	4b6e      	ldr	r3, [pc, #440]	; (8013d08 <face_detection_configure_weights+0xab4>)
 8013b4e:	4413      	add	r3, r2
 8013b50:	4a6c      	ldr	r2, [pc, #432]	; (8013d04 <face_detection_configure_weights+0xab0>)
 8013b52:	6093      	str	r3, [r2, #8]
    conv2d_45_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 357056);
 8013b54:	4b62      	ldr	r3, [pc, #392]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	4b6b      	ldr	r3, [pc, #428]	; (8013d08 <face_detection_configure_weights+0xab4>)
 8013b5a:	4413      	add	r3, r2
 8013b5c:	4a69      	ldr	r2, [pc, #420]	; (8013d04 <face_detection_configure_weights+0xab0>)
 8013b5e:	60d3      	str	r3, [r2, #12]
    
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8013b60:	4b6a      	ldr	r3, [pc, #424]	; (8013d0c <face_detection_configure_weights+0xab8>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b68:	4a68      	ldr	r2, [pc, #416]	; (8013d0c <face_detection_configure_weights+0xab8>)
 8013b6a:	6013      	str	r3, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 365248);
 8013b6c:	4b5c      	ldr	r3, [pc, #368]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	4b67      	ldr	r3, [pc, #412]	; (8013d10 <face_detection_configure_weights+0xabc>)
 8013b72:	4413      	add	r3, r2
 8013b74:	4a65      	ldr	r2, [pc, #404]	; (8013d0c <face_detection_configure_weights+0xab8>)
 8013b76:	6093      	str	r3, [r2, #8]
    conv2d_45_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 365248);
 8013b78:	4b59      	ldr	r3, [pc, #356]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	4b64      	ldr	r3, [pc, #400]	; (8013d10 <face_detection_configure_weights+0xabc>)
 8013b7e:	4413      	add	r3, r2
 8013b80:	4a62      	ldr	r2, [pc, #392]	; (8013d0c <face_detection_configure_weights+0xab8>)
 8013b82:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8013b84:	4b63      	ldr	r3, [pc, #396]	; (8013d14 <face_detection_configure_weights+0xac0>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b8c:	4a61      	ldr	r2, [pc, #388]	; (8013d14 <face_detection_configure_weights+0xac0>)
 8013b8e:	6013      	str	r3, [r2, #0]
    conv2d_46_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 365376);
 8013b90:	4b53      	ldr	r3, [pc, #332]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b92:	681a      	ldr	r2, [r3, #0]
 8013b94:	4b60      	ldr	r3, [pc, #384]	; (8013d18 <face_detection_configure_weights+0xac4>)
 8013b96:	4413      	add	r3, r2
 8013b98:	4a5e      	ldr	r2, [pc, #376]	; (8013d14 <face_detection_configure_weights+0xac0>)
 8013b9a:	6093      	str	r3, [r2, #8]
    conv2d_46_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 365376);
 8013b9c:	4b50      	ldr	r3, [pc, #320]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	4b5d      	ldr	r3, [pc, #372]	; (8013d18 <face_detection_configure_weights+0xac4>)
 8013ba2:	4413      	add	r3, r2
 8013ba4:	4a5b      	ldr	r2, [pc, #364]	; (8013d14 <face_detection_configure_weights+0xac0>)
 8013ba6:	60d3      	str	r3, [r2, #12]
    
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8013ba8:	4b5c      	ldr	r3, [pc, #368]	; (8013d1c <face_detection_configure_weights+0xac8>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013bb0:	4a5a      	ldr	r2, [pc, #360]	; (8013d1c <face_detection_configure_weights+0xac8>)
 8013bb2:	6013      	str	r3, [r2, #0]
    conv2d_46_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 368256);
 8013bb4:	4b4a      	ldr	r3, [pc, #296]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	4b59      	ldr	r3, [pc, #356]	; (8013d20 <face_detection_configure_weights+0xacc>)
 8013bba:	4413      	add	r3, r2
 8013bbc:	4a57      	ldr	r2, [pc, #348]	; (8013d1c <face_detection_configure_weights+0xac8>)
 8013bbe:	6093      	str	r3, [r2, #8]
    conv2d_46_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 368256);
 8013bc0:	4b47      	ldr	r3, [pc, #284]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	4b56      	ldr	r3, [pc, #344]	; (8013d20 <face_detection_configure_weights+0xacc>)
 8013bc6:	4413      	add	r3, r2
 8013bc8:	4a54      	ldr	r2, [pc, #336]	; (8013d1c <face_detection_configure_weights+0xac8>)
 8013bca:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8013bcc:	4b55      	ldr	r3, [pc, #340]	; (8013d24 <face_detection_configure_weights+0xad0>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013bd4:	4a53      	ldr	r2, [pc, #332]	; (8013d24 <face_detection_configure_weights+0xad0>)
 8013bd6:	6013      	str	r3, [r2, #0]
    conv2d_51_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 368296);
 8013bd8:	4b41      	ldr	r3, [pc, #260]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	4b52      	ldr	r3, [pc, #328]	; (8013d28 <face_detection_configure_weights+0xad4>)
 8013bde:	4413      	add	r3, r2
 8013be0:	4a50      	ldr	r2, [pc, #320]	; (8013d24 <face_detection_configure_weights+0xad0>)
 8013be2:	6093      	str	r3, [r2, #8]
    conv2d_51_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 368296);
 8013be4:	4b3e      	ldr	r3, [pc, #248]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013be6:	681a      	ldr	r2, [r3, #0]
 8013be8:	4b4f      	ldr	r3, [pc, #316]	; (8013d28 <face_detection_configure_weights+0xad4>)
 8013bea:	4413      	add	r3, r2
 8013bec:	4a4d      	ldr	r2, [pc, #308]	; (8013d24 <face_detection_configure_weights+0xad0>)
 8013bee:	60d3      	str	r3, [r2, #12]
    
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8013bf0:	4b4e      	ldr	r3, [pc, #312]	; (8013d2c <face_detection_configure_weights+0xad8>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013bf8:	4a4c      	ldr	r2, [pc, #304]	; (8013d2c <face_detection_configure_weights+0xad8>)
 8013bfa:	6013      	str	r3, [r2, #0]
    conv2d_51_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 374056);
 8013bfc:	4b38      	ldr	r3, [pc, #224]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	4b4b      	ldr	r3, [pc, #300]	; (8013d30 <face_detection_configure_weights+0xadc>)
 8013c02:	4413      	add	r3, r2
 8013c04:	4a49      	ldr	r2, [pc, #292]	; (8013d2c <face_detection_configure_weights+0xad8>)
 8013c06:	6093      	str	r3, [r2, #8]
    conv2d_51_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 374056);
 8013c08:	4b35      	ldr	r3, [pc, #212]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c0a:	681a      	ldr	r2, [r3, #0]
 8013c0c:	4b48      	ldr	r3, [pc, #288]	; (8013d30 <face_detection_configure_weights+0xadc>)
 8013c0e:	4413      	add	r3, r2
 8013c10:	4a46      	ldr	r2, [pc, #280]	; (8013d2c <face_detection_configure_weights+0xad8>)
 8013c12:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8013c14:	4b47      	ldr	r3, [pc, #284]	; (8013d34 <face_detection_configure_weights+0xae0>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c1c:	4a45      	ldr	r2, [pc, #276]	; (8013d34 <face_detection_configure_weights+0xae0>)
 8013c1e:	6013      	str	r3, [r2, #0]
    conv2d_39_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 374136);
 8013c20:	4b2f      	ldr	r3, [pc, #188]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	4b44      	ldr	r3, [pc, #272]	; (8013d38 <face_detection_configure_weights+0xae4>)
 8013c26:	4413      	add	r3, r2
 8013c28:	4a42      	ldr	r2, [pc, #264]	; (8013d34 <face_detection_configure_weights+0xae0>)
 8013c2a:	6093      	str	r3, [r2, #8]
    conv2d_39_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 374136);
 8013c2c:	4b2c      	ldr	r3, [pc, #176]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	4b41      	ldr	r3, [pc, #260]	; (8013d38 <face_detection_configure_weights+0xae4>)
 8013c32:	4413      	add	r3, r2
 8013c34:	4a3f      	ldr	r2, [pc, #252]	; (8013d34 <face_detection_configure_weights+0xae0>)
 8013c36:	60d3      	str	r3, [r2, #12]
    
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8013c38:	4b40      	ldr	r3, [pc, #256]	; (8013d3c <face_detection_configure_weights+0xae8>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c40:	4a3e      	ldr	r2, [pc, #248]	; (8013d3c <face_detection_configure_weights+0xae8>)
 8013c42:	6013      	str	r3, [r2, #0]
    conv2d_39_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 382328);
 8013c44:	4b26      	ldr	r3, [pc, #152]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	4b3d      	ldr	r3, [pc, #244]	; (8013d40 <face_detection_configure_weights+0xaec>)
 8013c4a:	4413      	add	r3, r2
 8013c4c:	4a3b      	ldr	r2, [pc, #236]	; (8013d3c <face_detection_configure_weights+0xae8>)
 8013c4e:	6093      	str	r3, [r2, #8]
    conv2d_39_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 382328);
 8013c50:	4b23      	ldr	r3, [pc, #140]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	4b3a      	ldr	r3, [pc, #232]	; (8013d40 <face_detection_configure_weights+0xaec>)
 8013c56:	4413      	add	r3, r2
 8013c58:	4a38      	ldr	r2, [pc, #224]	; (8013d3c <face_detection_configure_weights+0xae8>)
 8013c5a:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8013c5c:	4b39      	ldr	r3, [pc, #228]	; (8013d44 <face_detection_configure_weights+0xaf0>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c64:	4a37      	ldr	r2, [pc, #220]	; (8013d44 <face_detection_configure_weights+0xaf0>)
 8013c66:	6013      	str	r3, [r2, #0]
    conv2d_67_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 382456);
 8013c68:	4b1d      	ldr	r3, [pc, #116]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	4b36      	ldr	r3, [pc, #216]	; (8013d48 <face_detection_configure_weights+0xaf4>)
 8013c6e:	4413      	add	r3, r2
 8013c70:	4a34      	ldr	r2, [pc, #208]	; (8013d44 <face_detection_configure_weights+0xaf0>)
 8013c72:	6093      	str	r3, [r2, #8]
    conv2d_67_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 382456);
 8013c74:	4b1a      	ldr	r3, [pc, #104]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	4b33      	ldr	r3, [pc, #204]	; (8013d48 <face_detection_configure_weights+0xaf4>)
 8013c7a:	4413      	add	r3, r2
 8013c7c:	4a31      	ldr	r2, [pc, #196]	; (8013d44 <face_detection_configure_weights+0xaf0>)
 8013c7e:	60d3      	str	r3, [r2, #12]
    
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8013c80:	4b32      	ldr	r3, [pc, #200]	; (8013d4c <face_detection_configure_weights+0xaf8>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c88:	4a30      	ldr	r2, [pc, #192]	; (8013d4c <face_detection_configure_weights+0xaf8>)
 8013c8a:	6013      	str	r3, [r2, #0]
    conv2d_67_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 388216);
 8013c8c:	4b14      	ldr	r3, [pc, #80]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	4b2f      	ldr	r3, [pc, #188]	; (8013d50 <face_detection_configure_weights+0xafc>)
 8013c92:	4413      	add	r3, r2
 8013c94:	4a2d      	ldr	r2, [pc, #180]	; (8013d4c <face_detection_configure_weights+0xaf8>)
 8013c96:	6093      	str	r3, [r2, #8]
    conv2d_67_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 388216);
 8013c98:	4b11      	ldr	r3, [pc, #68]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	4b2c      	ldr	r3, [pc, #176]	; (8013d50 <face_detection_configure_weights+0xafc>)
 8013c9e:	4413      	add	r3, r2
 8013ca0:	4a2a      	ldr	r2, [pc, #168]	; (8013d4c <face_detection_configure_weights+0xaf8>)
 8013ca2:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_weights_array.format |= AI_FMT_FLAG_CONST;
 8013ca4:	4b2b      	ldr	r3, [pc, #172]	; (8013d54 <face_detection_configure_weights+0xb00>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013cac:	4a29      	ldr	r2, [pc, #164]	; (8013d54 <face_detection_configure_weights+0xb00>)
 8013cae:	6013      	str	r3, [r2, #0]
    conv2d_72_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 388296);
 8013cb0:	4b0b      	ldr	r3, [pc, #44]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	4b28      	ldr	r3, [pc, #160]	; (8013d58 <face_detection_configure_weights+0xb04>)
 8013cb6:	4413      	add	r3, r2
 8013cb8:	4a26      	ldr	r2, [pc, #152]	; (8013d54 <face_detection_configure_weights+0xb00>)
 8013cba:	6093      	str	r3, [r2, #8]
    conv2d_72_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 388296);
 8013cbc:	4b08      	ldr	r3, [pc, #32]	; (8013ce0 <face_detection_configure_weights+0xa8c>)
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	4b25      	ldr	r3, [pc, #148]	; (8013d58 <face_detection_configure_weights+0xb04>)
 8013cc2:	4413      	add	r3, r2
 8013cc4:	4a23      	ldr	r2, [pc, #140]	; (8013d54 <face_detection_configure_weights+0xb00>)
 8013cc6:	60d3      	str	r3, [r2, #12]
    
    conv2d_72_bias_array.format |= AI_FMT_FLAG_CONST;
 8013cc8:	4b24      	ldr	r3, [pc, #144]	; (8013d5c <face_detection_configure_weights+0xb08>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013cd0:	4a22      	ldr	r2, [pc, #136]	; (8013d5c <face_detection_configure_weights+0xb08>)
 8013cd2:	6013      	str	r3, [r2, #0]
 8013cd4:	e044      	b.n	8013d60 <face_detection_configure_weights+0xb0c>
 8013cd6:	bf00      	nop
 8013cd8:	00045dc0 	.word	0x00045dc0
 8013cdc:	24000638 	.word	0x24000638
 8013ce0:	2405ded4 	.word	0x2405ded4
 8013ce4:	24000668 	.word	0x24000668
 8013ce8:	000461c0 	.word	0x000461c0
 8013cec:	24000698 	.word	0x24000698
 8013cf0:	00046ac0 	.word	0x00046ac0
 8013cf4:	240006c8 	.word	0x240006c8
 8013cf8:	00046ec0 	.word	0x00046ec0
 8013cfc:	240006f8 	.word	0x240006f8
 8013d00:	00056ec0 	.word	0x00056ec0
 8013d04:	24000728 	.word	0x24000728
 8013d08:	000572c0 	.word	0x000572c0
 8013d0c:	24000758 	.word	0x24000758
 8013d10:	000592c0 	.word	0x000592c0
 8013d14:	24000788 	.word	0x24000788
 8013d18:	00059340 	.word	0x00059340
 8013d1c:	240007b8 	.word	0x240007b8
 8013d20:	00059e80 	.word	0x00059e80
 8013d24:	240007e8 	.word	0x240007e8
 8013d28:	00059ea8 	.word	0x00059ea8
 8013d2c:	24000818 	.word	0x24000818
 8013d30:	0005b528 	.word	0x0005b528
 8013d34:	24000848 	.word	0x24000848
 8013d38:	0005b578 	.word	0x0005b578
 8013d3c:	24000878 	.word	0x24000878
 8013d40:	0005d578 	.word	0x0005d578
 8013d44:	240008a8 	.word	0x240008a8
 8013d48:	0005d5f8 	.word	0x0005d5f8
 8013d4c:	240008d8 	.word	0x240008d8
 8013d50:	0005ec78 	.word	0x0005ec78
 8013d54:	24000908 	.word	0x24000908
 8013d58:	0005ecc8 	.word	0x0005ecc8
 8013d5c:	24000938 	.word	0x24000938
    conv2d_72_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 391176);
 8013d60:	4b8f      	ldr	r3, [pc, #572]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	4b8f      	ldr	r3, [pc, #572]	; (8013fa4 <face_detection_configure_weights+0xd50>)
 8013d66:	4413      	add	r3, r2
 8013d68:	4a8f      	ldr	r2, [pc, #572]	; (8013fa8 <face_detection_configure_weights+0xd54>)
 8013d6a:	6093      	str	r3, [r2, #8]
    conv2d_72_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 391176);
 8013d6c:	4b8c      	ldr	r3, [pc, #560]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	4b8c      	ldr	r3, [pc, #560]	; (8013fa4 <face_detection_configure_weights+0xd50>)
 8013d72:	4413      	add	r3, r2
 8013d74:	4a8c      	ldr	r2, [pc, #560]	; (8013fa8 <face_detection_configure_weights+0xd54>)
 8013d76:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8013d78:	4b8c      	ldr	r3, [pc, #560]	; (8013fac <face_detection_configure_weights+0xd58>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d80:	4a8a      	ldr	r2, [pc, #552]	; (8013fac <face_detection_configure_weights+0xd58>)
 8013d82:	6013      	str	r3, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 391216);
 8013d84:	4b86      	ldr	r3, [pc, #536]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	4b89      	ldr	r3, [pc, #548]	; (8013fb0 <face_detection_configure_weights+0xd5c>)
 8013d8a:	4413      	add	r3, r2
 8013d8c:	4a87      	ldr	r2, [pc, #540]	; (8013fac <face_detection_configure_weights+0xd58>)
 8013d8e:	6093      	str	r3, [r2, #8]
    conv2d_34_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 391216);
 8013d90:	4b83      	ldr	r3, [pc, #524]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	4b86      	ldr	r3, [pc, #536]	; (8013fb0 <face_detection_configure_weights+0xd5c>)
 8013d96:	4413      	add	r3, r2
 8013d98:	4a84      	ldr	r2, [pc, #528]	; (8013fac <face_detection_configure_weights+0xd58>)
 8013d9a:	60d3      	str	r3, [r2, #12]
    
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8013d9c:	4b85      	ldr	r3, [pc, #532]	; (8013fb4 <face_detection_configure_weights+0xd60>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013da4:	4a83      	ldr	r2, [pc, #524]	; (8013fb4 <face_detection_configure_weights+0xd60>)
 8013da6:	6013      	str	r3, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 399408);
 8013da8:	4b7d      	ldr	r3, [pc, #500]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013daa:	681a      	ldr	r2, [r3, #0]
 8013dac:	4b82      	ldr	r3, [pc, #520]	; (8013fb8 <face_detection_configure_weights+0xd64>)
 8013dae:	4413      	add	r3, r2
 8013db0:	4a80      	ldr	r2, [pc, #512]	; (8013fb4 <face_detection_configure_weights+0xd60>)
 8013db2:	6093      	str	r3, [r2, #8]
    conv2d_34_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 399408);
 8013db4:	4b7a      	ldr	r3, [pc, #488]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	4b7f      	ldr	r3, [pc, #508]	; (8013fb8 <face_detection_configure_weights+0xd64>)
 8013dba:	4413      	add	r3, r2
 8013dbc:	4a7d      	ldr	r2, [pc, #500]	; (8013fb4 <face_detection_configure_weights+0xd60>)
 8013dbe:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_weights_array.format |= AI_FMT_FLAG_CONST;
 8013dc0:	4b7e      	ldr	r3, [pc, #504]	; (8013fbc <face_detection_configure_weights+0xd68>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013dc8:	4a7c      	ldr	r2, [pc, #496]	; (8013fbc <face_detection_configure_weights+0xd68>)
 8013dca:	6013      	str	r3, [r2, #0]
    conv2d_87_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 399536);
 8013dcc:	4b74      	ldr	r3, [pc, #464]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013dce:	681a      	ldr	r2, [r3, #0]
 8013dd0:	4b7b      	ldr	r3, [pc, #492]	; (8013fc0 <face_detection_configure_weights+0xd6c>)
 8013dd2:	4413      	add	r3, r2
 8013dd4:	4a79      	ldr	r2, [pc, #484]	; (8013fbc <face_detection_configure_weights+0xd68>)
 8013dd6:	6093      	str	r3, [r2, #8]
    conv2d_87_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 399536);
 8013dd8:	4b71      	ldr	r3, [pc, #452]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	4b78      	ldr	r3, [pc, #480]	; (8013fc0 <face_detection_configure_weights+0xd6c>)
 8013dde:	4413      	add	r3, r2
 8013de0:	4a76      	ldr	r2, [pc, #472]	; (8013fbc <face_detection_configure_weights+0xd68>)
 8013de2:	60d3      	str	r3, [r2, #12]
    
    conv2d_87_bias_array.format |= AI_FMT_FLAG_CONST;
 8013de4:	4b77      	ldr	r3, [pc, #476]	; (8013fc4 <face_detection_configure_weights+0xd70>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013dec:	4a75      	ldr	r2, [pc, #468]	; (8013fc4 <face_detection_configure_weights+0xd70>)
 8013dee:	6013      	str	r3, [r2, #0]
    conv2d_87_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 402416);
 8013df0:	4b6b      	ldr	r3, [pc, #428]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	4b74      	ldr	r3, [pc, #464]	; (8013fc8 <face_detection_configure_weights+0xd74>)
 8013df6:	4413      	add	r3, r2
 8013df8:	4a72      	ldr	r2, [pc, #456]	; (8013fc4 <face_detection_configure_weights+0xd70>)
 8013dfa:	6093      	str	r3, [r2, #8]
    conv2d_87_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 402416);
 8013dfc:	4b68      	ldr	r3, [pc, #416]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	4b71      	ldr	r3, [pc, #452]	; (8013fc8 <face_detection_configure_weights+0xd74>)
 8013e02:	4413      	add	r3, r2
 8013e04:	4a6f      	ldr	r2, [pc, #444]	; (8013fc4 <face_detection_configure_weights+0xd70>)
 8013e06:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_weights_array.format |= AI_FMT_FLAG_CONST;
 8013e08:	4b70      	ldr	r3, [pc, #448]	; (8013fcc <face_detection_configure_weights+0xd78>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e10:	4a6e      	ldr	r2, [pc, #440]	; (8013fcc <face_detection_configure_weights+0xd78>)
 8013e12:	6013      	str	r3, [r2, #0]
    conv2d_92_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 402456);
 8013e14:	4b62      	ldr	r3, [pc, #392]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	4b6d      	ldr	r3, [pc, #436]	; (8013fd0 <face_detection_configure_weights+0xd7c>)
 8013e1a:	4413      	add	r3, r2
 8013e1c:	4a6b      	ldr	r2, [pc, #428]	; (8013fcc <face_detection_configure_weights+0xd78>)
 8013e1e:	6093      	str	r3, [r2, #8]
    conv2d_92_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 402456);
 8013e20:	4b5f      	ldr	r3, [pc, #380]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	4b6a      	ldr	r3, [pc, #424]	; (8013fd0 <face_detection_configure_weights+0xd7c>)
 8013e26:	4413      	add	r3, r2
 8013e28:	4a68      	ldr	r2, [pc, #416]	; (8013fcc <face_detection_configure_weights+0xd78>)
 8013e2a:	60d3      	str	r3, [r2, #12]
    
    conv2d_92_bias_array.format |= AI_FMT_FLAG_CONST;
 8013e2c:	4b69      	ldr	r3, [pc, #420]	; (8013fd4 <face_detection_configure_weights+0xd80>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e34:	4a67      	ldr	r2, [pc, #412]	; (8013fd4 <face_detection_configure_weights+0xd80>)
 8013e36:	6013      	str	r3, [r2, #0]
    conv2d_92_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 408216);
 8013e38:	4b59      	ldr	r3, [pc, #356]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e3a:	681a      	ldr	r2, [r3, #0]
 8013e3c:	4b66      	ldr	r3, [pc, #408]	; (8013fd8 <face_detection_configure_weights+0xd84>)
 8013e3e:	4413      	add	r3, r2
 8013e40:	4a64      	ldr	r2, [pc, #400]	; (8013fd4 <face_detection_configure_weights+0xd80>)
 8013e42:	6093      	str	r3, [r2, #8]
    conv2d_92_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 408216);
 8013e44:	4b56      	ldr	r3, [pc, #344]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	4b63      	ldr	r3, [pc, #396]	; (8013fd8 <face_detection_configure_weights+0xd84>)
 8013e4a:	4413      	add	r3, r2
 8013e4c:	4a61      	ldr	r2, [pc, #388]	; (8013fd4 <face_detection_configure_weights+0xd80>)
 8013e4e:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8013e50:	4b62      	ldr	r3, [pc, #392]	; (8013fdc <face_detection_configure_weights+0xd88>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e58:	4a60      	ldr	r2, [pc, #384]	; (8013fdc <face_detection_configure_weights+0xd88>)
 8013e5a:	6013      	str	r3, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 408296);
 8013e5c:	4b50      	ldr	r3, [pc, #320]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	4b5f      	ldr	r3, [pc, #380]	; (8013fe0 <face_detection_configure_weights+0xd8c>)
 8013e62:	4413      	add	r3, r2
 8013e64:	4a5d      	ldr	r2, [pc, #372]	; (8013fdc <face_detection_configure_weights+0xd88>)
 8013e66:	6093      	str	r3, [r2, #8]
    conv2d_28_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 408296);
 8013e68:	4b4d      	ldr	r3, [pc, #308]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	4b5c      	ldr	r3, [pc, #368]	; (8013fe0 <face_detection_configure_weights+0xd8c>)
 8013e6e:	4413      	add	r3, r2
 8013e70:	4a5a      	ldr	r2, [pc, #360]	; (8013fdc <face_detection_configure_weights+0xd88>)
 8013e72:	60d3      	str	r3, [r2, #12]
    
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8013e74:	4b5b      	ldr	r3, [pc, #364]	; (8013fe4 <face_detection_configure_weights+0xd90>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e7c:	4a59      	ldr	r2, [pc, #356]	; (8013fe4 <face_detection_configure_weights+0xd90>)
 8013e7e:	6013      	str	r3, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 412392);
 8013e80:	4b47      	ldr	r3, [pc, #284]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	4b58      	ldr	r3, [pc, #352]	; (8013fe8 <face_detection_configure_weights+0xd94>)
 8013e86:	4413      	add	r3, r2
 8013e88:	4a56      	ldr	r2, [pc, #344]	; (8013fe4 <face_detection_configure_weights+0xd90>)
 8013e8a:	6093      	str	r3, [r2, #8]
    conv2d_28_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 412392);
 8013e8c:	4b44      	ldr	r3, [pc, #272]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	4b55      	ldr	r3, [pc, #340]	; (8013fe8 <face_detection_configure_weights+0xd94>)
 8013e92:	4413      	add	r3, r2
 8013e94:	4a53      	ldr	r2, [pc, #332]	; (8013fe4 <face_detection_configure_weights+0xd90>)
 8013e96:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_weights_array.format |= AI_FMT_FLAG_CONST;
 8013e98:	4b54      	ldr	r3, [pc, #336]	; (8013fec <face_detection_configure_weights+0xd98>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ea0:	4a52      	ldr	r2, [pc, #328]	; (8013fec <face_detection_configure_weights+0xd98>)
 8013ea2:	6013      	str	r3, [r2, #0]
    conv2d_107_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 412520);
 8013ea4:	4b3e      	ldr	r3, [pc, #248]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	4b51      	ldr	r3, [pc, #324]	; (8013ff0 <face_detection_configure_weights+0xd9c>)
 8013eaa:	4413      	add	r3, r2
 8013eac:	4a4f      	ldr	r2, [pc, #316]	; (8013fec <face_detection_configure_weights+0xd98>)
 8013eae:	6093      	str	r3, [r2, #8]
    conv2d_107_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 412520);
 8013eb0:	4b3b      	ldr	r3, [pc, #236]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	4b4e      	ldr	r3, [pc, #312]	; (8013ff0 <face_detection_configure_weights+0xd9c>)
 8013eb6:	4413      	add	r3, r2
 8013eb8:	4a4c      	ldr	r2, [pc, #304]	; (8013fec <face_detection_configure_weights+0xd98>)
 8013eba:	60d3      	str	r3, [r2, #12]
    
    conv2d_107_bias_array.format |= AI_FMT_FLAG_CONST;
 8013ebc:	4b4d      	ldr	r3, [pc, #308]	; (8013ff4 <face_detection_configure_weights+0xda0>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ec4:	4a4b      	ldr	r2, [pc, #300]	; (8013ff4 <face_detection_configure_weights+0xda0>)
 8013ec6:	6013      	str	r3, [r2, #0]
    conv2d_107_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 415400);
 8013ec8:	4b35      	ldr	r3, [pc, #212]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	4b4a      	ldr	r3, [pc, #296]	; (8013ff8 <face_detection_configure_weights+0xda4>)
 8013ece:	4413      	add	r3, r2
 8013ed0:	4a48      	ldr	r2, [pc, #288]	; (8013ff4 <face_detection_configure_weights+0xda0>)
 8013ed2:	6093      	str	r3, [r2, #8]
    conv2d_107_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 415400);
 8013ed4:	4b32      	ldr	r3, [pc, #200]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	4b47      	ldr	r3, [pc, #284]	; (8013ff8 <face_detection_configure_weights+0xda4>)
 8013eda:	4413      	add	r3, r2
 8013edc:	4a45      	ldr	r2, [pc, #276]	; (8013ff4 <face_detection_configure_weights+0xda0>)
 8013ede:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_weights_array.format |= AI_FMT_FLAG_CONST;
 8013ee0:	4b46      	ldr	r3, [pc, #280]	; (8013ffc <face_detection_configure_weights+0xda8>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ee8:	4a44      	ldr	r2, [pc, #272]	; (8013ffc <face_detection_configure_weights+0xda8>)
 8013eea:	6013      	str	r3, [r2, #0]
    conv2d_112_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 415440);
 8013eec:	4b2c      	ldr	r3, [pc, #176]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	4b43      	ldr	r3, [pc, #268]	; (8014000 <face_detection_configure_weights+0xdac>)
 8013ef2:	4413      	add	r3, r2
 8013ef4:	4a41      	ldr	r2, [pc, #260]	; (8013ffc <face_detection_configure_weights+0xda8>)
 8013ef6:	6093      	str	r3, [r2, #8]
    conv2d_112_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 415440);
 8013ef8:	4b29      	ldr	r3, [pc, #164]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	4b40      	ldr	r3, [pc, #256]	; (8014000 <face_detection_configure_weights+0xdac>)
 8013efe:	4413      	add	r3, r2
 8013f00:	4a3e      	ldr	r2, [pc, #248]	; (8013ffc <face_detection_configure_weights+0xda8>)
 8013f02:	60d3      	str	r3, [r2, #12]
    
    conv2d_112_bias_array.format |= AI_FMT_FLAG_CONST;
 8013f04:	4b3f      	ldr	r3, [pc, #252]	; (8014004 <face_detection_configure_weights+0xdb0>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f0c:	4a3d      	ldr	r2, [pc, #244]	; (8014004 <face_detection_configure_weights+0xdb0>)
 8013f0e:	6013      	str	r3, [r2, #0]
    conv2d_112_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 421200);
 8013f10:	4b23      	ldr	r3, [pc, #140]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	4b3c      	ldr	r3, [pc, #240]	; (8014008 <face_detection_configure_weights+0xdb4>)
 8013f16:	4413      	add	r3, r2
 8013f18:	4a3a      	ldr	r2, [pc, #232]	; (8014004 <face_detection_configure_weights+0xdb0>)
 8013f1a:	6093      	str	r3, [r2, #8]
    conv2d_112_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 421200);
 8013f1c:	4b20      	ldr	r3, [pc, #128]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	4b39      	ldr	r3, [pc, #228]	; (8014008 <face_detection_configure_weights+0xdb4>)
 8013f22:	4413      	add	r3, r2
 8013f24:	4a37      	ldr	r2, [pc, #220]	; (8014004 <face_detection_configure_weights+0xdb0>)
 8013f26:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8013f28:	4b38      	ldr	r3, [pc, #224]	; (801400c <face_detection_configure_weights+0xdb8>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f30:	4a36      	ldr	r2, [pc, #216]	; (801400c <face_detection_configure_weights+0xdb8>)
 8013f32:	6013      	str	r3, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 421280);
 8013f34:	4b1a      	ldr	r3, [pc, #104]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f36:	681a      	ldr	r2, [r3, #0]
 8013f38:	4b35      	ldr	r3, [pc, #212]	; (8014010 <face_detection_configure_weights+0xdbc>)
 8013f3a:	4413      	add	r3, r2
 8013f3c:	4a33      	ldr	r2, [pc, #204]	; (801400c <face_detection_configure_weights+0xdb8>)
 8013f3e:	6093      	str	r3, [r2, #8]
    conv2d_14_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 421280);
 8013f40:	4b17      	ldr	r3, [pc, #92]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	4b32      	ldr	r3, [pc, #200]	; (8014010 <face_detection_configure_weights+0xdbc>)
 8013f46:	4413      	add	r3, r2
 8013f48:	4a30      	ldr	r2, [pc, #192]	; (801400c <face_detection_configure_weights+0xdb8>)
 8013f4a:	60d3      	str	r3, [r2, #12]
    
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8013f4c:	4b31      	ldr	r3, [pc, #196]	; (8014014 <face_detection_configure_weights+0xdc0>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f54:	4a2f      	ldr	r2, [pc, #188]	; (8014014 <face_detection_configure_weights+0xdc0>)
 8013f56:	6013      	str	r3, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 423328);
 8013f58:	4b11      	ldr	r3, [pc, #68]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	4b2e      	ldr	r3, [pc, #184]	; (8014018 <face_detection_configure_weights+0xdc4>)
 8013f5e:	4413      	add	r3, r2
 8013f60:	4a2c      	ldr	r2, [pc, #176]	; (8014014 <face_detection_configure_weights+0xdc0>)
 8013f62:	6093      	str	r3, [r2, #8]
    conv2d_14_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 423328);
 8013f64:	4b0e      	ldr	r3, [pc, #56]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	4b2b      	ldr	r3, [pc, #172]	; (8014018 <face_detection_configure_weights+0xdc4>)
 8013f6a:	4413      	add	r3, r2
 8013f6c:	4a29      	ldr	r2, [pc, #164]	; (8014014 <face_detection_configure_weights+0xdc0>)
 8013f6e:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_weights_array.format |= AI_FMT_FLAG_CONST;
 8013f70:	4b2a      	ldr	r3, [pc, #168]	; (801401c <face_detection_configure_weights+0xdc8>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f78:	4a28      	ldr	r2, [pc, #160]	; (801401c <face_detection_configure_weights+0xdc8>)
 8013f7a:	6013      	str	r3, [r2, #0]
    conv2d_127_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 423456);
 8013f7c:	4b08      	ldr	r3, [pc, #32]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	4b27      	ldr	r3, [pc, #156]	; (8014020 <face_detection_configure_weights+0xdcc>)
 8013f82:	4413      	add	r3, r2
 8013f84:	4a25      	ldr	r2, [pc, #148]	; (801401c <face_detection_configure_weights+0xdc8>)
 8013f86:	6093      	str	r3, [r2, #8]
    conv2d_127_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 423456);
 8013f88:	4b05      	ldr	r3, [pc, #20]	; (8013fa0 <face_detection_configure_weights+0xd4c>)
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	4b24      	ldr	r3, [pc, #144]	; (8014020 <face_detection_configure_weights+0xdcc>)
 8013f8e:	4413      	add	r3, r2
 8013f90:	4a22      	ldr	r2, [pc, #136]	; (801401c <face_detection_configure_weights+0xdc8>)
 8013f92:	60d3      	str	r3, [r2, #12]
    
    conv2d_127_bias_array.format |= AI_FMT_FLAG_CONST;
 8013f94:	4b23      	ldr	r3, [pc, #140]	; (8014024 <face_detection_configure_weights+0xdd0>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f9c:	e044      	b.n	8014028 <face_detection_configure_weights+0xdd4>
 8013f9e:	bf00      	nop
 8013fa0:	2405ded4 	.word	0x2405ded4
 8013fa4:	0005f808 	.word	0x0005f808
 8013fa8:	24000938 	.word	0x24000938
 8013fac:	24000968 	.word	0x24000968
 8013fb0:	0005f830 	.word	0x0005f830
 8013fb4:	24000998 	.word	0x24000998
 8013fb8:	00061830 	.word	0x00061830
 8013fbc:	240009c8 	.word	0x240009c8
 8013fc0:	000618b0 	.word	0x000618b0
 8013fc4:	240009f8 	.word	0x240009f8
 8013fc8:	000623f0 	.word	0x000623f0
 8013fcc:	24000a28 	.word	0x24000a28
 8013fd0:	00062418 	.word	0x00062418
 8013fd4:	24000a58 	.word	0x24000a58
 8013fd8:	00063a98 	.word	0x00063a98
 8013fdc:	24000a88 	.word	0x24000a88
 8013fe0:	00063ae8 	.word	0x00063ae8
 8013fe4:	24000ab8 	.word	0x24000ab8
 8013fe8:	00064ae8 	.word	0x00064ae8
 8013fec:	24000ae8 	.word	0x24000ae8
 8013ff0:	00064b68 	.word	0x00064b68
 8013ff4:	24000b18 	.word	0x24000b18
 8013ff8:	000656a8 	.word	0x000656a8
 8013ffc:	24000b48 	.word	0x24000b48
 8014000:	000656d0 	.word	0x000656d0
 8014004:	24000b78 	.word	0x24000b78
 8014008:	00066d50 	.word	0x00066d50
 801400c:	24000ba8 	.word	0x24000ba8
 8014010:	00066da0 	.word	0x00066da0
 8014014:	24000bd8 	.word	0x24000bd8
 8014018:	000675a0 	.word	0x000675a0
 801401c:	24000c08 	.word	0x24000c08
 8014020:	00067620 	.word	0x00067620
 8014024:	24000c38 	.word	0x24000c38
 8014028:	4a8e      	ldr	r2, [pc, #568]	; (8014264 <face_detection_configure_weights+0x1010>)
 801402a:	6013      	str	r3, [r2, #0]
    conv2d_127_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 426336);
 801402c:	4b8e      	ldr	r3, [pc, #568]	; (8014268 <face_detection_configure_weights+0x1014>)
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	4b8e      	ldr	r3, [pc, #568]	; (801426c <face_detection_configure_weights+0x1018>)
 8014032:	4413      	add	r3, r2
 8014034:	4a8b      	ldr	r2, [pc, #556]	; (8014264 <face_detection_configure_weights+0x1010>)
 8014036:	6093      	str	r3, [r2, #8]
    conv2d_127_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 426336);
 8014038:	4b8b      	ldr	r3, [pc, #556]	; (8014268 <face_detection_configure_weights+0x1014>)
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	4b8b      	ldr	r3, [pc, #556]	; (801426c <face_detection_configure_weights+0x1018>)
 801403e:	4413      	add	r3, r2
 8014040:	4a88      	ldr	r2, [pc, #544]	; (8014264 <face_detection_configure_weights+0x1010>)
 8014042:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_weights_array.format |= AI_FMT_FLAG_CONST;
 8014044:	4b8a      	ldr	r3, [pc, #552]	; (8014270 <face_detection_configure_weights+0x101c>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801404c:	4a88      	ldr	r2, [pc, #544]	; (8014270 <face_detection_configure_weights+0x101c>)
 801404e:	6013      	str	r3, [r2, #0]
    conv2d_135_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 426376);
 8014050:	4b85      	ldr	r3, [pc, #532]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	4b87      	ldr	r3, [pc, #540]	; (8014274 <face_detection_configure_weights+0x1020>)
 8014056:	4413      	add	r3, r2
 8014058:	4a85      	ldr	r2, [pc, #532]	; (8014270 <face_detection_configure_weights+0x101c>)
 801405a:	6093      	str	r3, [r2, #8]
    conv2d_135_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 426376);
 801405c:	4b82      	ldr	r3, [pc, #520]	; (8014268 <face_detection_configure_weights+0x1014>)
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	4b84      	ldr	r3, [pc, #528]	; (8014274 <face_detection_configure_weights+0x1020>)
 8014062:	4413      	add	r3, r2
 8014064:	4a82      	ldr	r2, [pc, #520]	; (8014270 <face_detection_configure_weights+0x101c>)
 8014066:	60d3      	str	r3, [r2, #12]
    
    conv2d_135_bias_array.format |= AI_FMT_FLAG_CONST;
 8014068:	4b83      	ldr	r3, [pc, #524]	; (8014278 <face_detection_configure_weights+0x1024>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014070:	4a81      	ldr	r2, [pc, #516]	; (8014278 <face_detection_configure_weights+0x1024>)
 8014072:	6013      	str	r3, [r2, #0]
    conv2d_135_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 432136);
 8014074:	4b7c      	ldr	r3, [pc, #496]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	4b80      	ldr	r3, [pc, #512]	; (801427c <face_detection_configure_weights+0x1028>)
 801407a:	4413      	add	r3, r2
 801407c:	4a7e      	ldr	r2, [pc, #504]	; (8014278 <face_detection_configure_weights+0x1024>)
 801407e:	6093      	str	r3, [r2, #8]
    conv2d_135_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432136);
 8014080:	4b79      	ldr	r3, [pc, #484]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	4b7d      	ldr	r3, [pc, #500]	; (801427c <face_detection_configure_weights+0x1028>)
 8014086:	4413      	add	r3, r2
 8014088:	4a7b      	ldr	r2, [pc, #492]	; (8014278 <face_detection_configure_weights+0x1024>)
 801408a:	60d3      	str	r3, [r2, #12]
    
    reshape_63_const_array.format |= AI_FMT_FLAG_CONST;
 801408c:	4b7c      	ldr	r3, [pc, #496]	; (8014280 <face_detection_configure_weights+0x102c>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014094:	4a7a      	ldr	r2, [pc, #488]	; (8014280 <face_detection_configure_weights+0x102c>)
 8014096:	6013      	str	r3, [r2, #0]
    reshape_63_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 432216);
 8014098:	4b73      	ldr	r3, [pc, #460]	; (8014268 <face_detection_configure_weights+0x1014>)
 801409a:	681a      	ldr	r2, [r3, #0]
 801409c:	4b79      	ldr	r3, [pc, #484]	; (8014284 <face_detection_configure_weights+0x1030>)
 801409e:	4413      	add	r3, r2
 80140a0:	4a77      	ldr	r2, [pc, #476]	; (8014280 <face_detection_configure_weights+0x102c>)
 80140a2:	6093      	str	r3, [r2, #8]
    reshape_63_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432216);
 80140a4:	4b70      	ldr	r3, [pc, #448]	; (8014268 <face_detection_configure_weights+0x1014>)
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	4b76      	ldr	r3, [pc, #472]	; (8014284 <face_detection_configure_weights+0x1030>)
 80140aa:	4413      	add	r3, r2
 80140ac:	4a74      	ldr	r2, [pc, #464]	; (8014280 <face_detection_configure_weights+0x102c>)
 80140ae:	60d3      	str	r3, [r2, #12]
    
    reshape_84_const_array.format |= AI_FMT_FLAG_CONST;
 80140b0:	4b75      	ldr	r3, [pc, #468]	; (8014288 <face_detection_configure_weights+0x1034>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80140b8:	4a73      	ldr	r2, [pc, #460]	; (8014288 <face_detection_configure_weights+0x1034>)
 80140ba:	6013      	str	r3, [r2, #0]
    reshape_84_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 432236);
 80140bc:	4b6a      	ldr	r3, [pc, #424]	; (8014268 <face_detection_configure_weights+0x1014>)
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	4b72      	ldr	r3, [pc, #456]	; (801428c <face_detection_configure_weights+0x1038>)
 80140c2:	4413      	add	r3, r2
 80140c4:	4a70      	ldr	r2, [pc, #448]	; (8014288 <face_detection_configure_weights+0x1034>)
 80140c6:	6093      	str	r3, [r2, #8]
    reshape_84_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432236);
 80140c8:	4b67      	ldr	r3, [pc, #412]	; (8014268 <face_detection_configure_weights+0x1014>)
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	4b6f      	ldr	r3, [pc, #444]	; (801428c <face_detection_configure_weights+0x1038>)
 80140ce:	4413      	add	r3, r2
 80140d0:	4a6d      	ldr	r2, [pc, #436]	; (8014288 <face_detection_configure_weights+0x1034>)
 80140d2:	60d3      	str	r3, [r2, #12]
    
    reshape_104_const_array.format |= AI_FMT_FLAG_CONST;
 80140d4:	4b6e      	ldr	r3, [pc, #440]	; (8014290 <face_detection_configure_weights+0x103c>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80140dc:	4a6c      	ldr	r2, [pc, #432]	; (8014290 <face_detection_configure_weights+0x103c>)
 80140de:	6013      	str	r3, [r2, #0]
    reshape_104_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 432416);
 80140e0:	4b61      	ldr	r3, [pc, #388]	; (8014268 <face_detection_configure_weights+0x1014>)
 80140e2:	681a      	ldr	r2, [r3, #0]
 80140e4:	4b6b      	ldr	r3, [pc, #428]	; (8014294 <face_detection_configure_weights+0x1040>)
 80140e6:	4413      	add	r3, r2
 80140e8:	4a69      	ldr	r2, [pc, #420]	; (8014290 <face_detection_configure_weights+0x103c>)
 80140ea:	6093      	str	r3, [r2, #8]
    reshape_104_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 432416);
 80140ec:	4b5e      	ldr	r3, [pc, #376]	; (8014268 <face_detection_configure_weights+0x1014>)
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	4b68      	ldr	r3, [pc, #416]	; (8014294 <face_detection_configure_weights+0x1040>)
 80140f2:	4413      	add	r3, r2
 80140f4:	4a66      	ldr	r2, [pc, #408]	; (8014290 <face_detection_configure_weights+0x103c>)
 80140f6:	60d3      	str	r3, [r2, #12]
    
    reshape_124_const_array.format |= AI_FMT_FLAG_CONST;
 80140f8:	4b67      	ldr	r3, [pc, #412]	; (8014298 <face_detection_configure_weights+0x1044>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014100:	4a65      	ldr	r2, [pc, #404]	; (8014298 <face_detection_configure_weights+0x1044>)
 8014102:	6013      	str	r3, [r2, #0]
    reshape_124_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 433136);
 8014104:	4b58      	ldr	r3, [pc, #352]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	4b64      	ldr	r3, [pc, #400]	; (801429c <face_detection_configure_weights+0x1048>)
 801410a:	4413      	add	r3, r2
 801410c:	4a62      	ldr	r2, [pc, #392]	; (8014298 <face_detection_configure_weights+0x1044>)
 801410e:	6093      	str	r3, [r2, #8]
    reshape_124_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 433136);
 8014110:	4b55      	ldr	r3, [pc, #340]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	4b61      	ldr	r3, [pc, #388]	; (801429c <face_detection_configure_weights+0x1048>)
 8014116:	4413      	add	r3, r2
 8014118:	4a5f      	ldr	r2, [pc, #380]	; (8014298 <face_detection_configure_weights+0x1044>)
 801411a:	60d3      	str	r3, [r2, #12]
    
    reshape_148_const_array.format |= AI_FMT_FLAG_CONST;
 801411c:	4b60      	ldr	r3, [pc, #384]	; (80142a0 <face_detection_configure_weights+0x104c>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014124:	4a5e      	ldr	r2, [pc, #376]	; (80142a0 <face_detection_configure_weights+0x104c>)
 8014126:	6013      	str	r3, [r2, #0]
    reshape_148_const_array.data = AI_PTR(g_face_detection_weights_map[0] + 436016);
 8014128:	4b4f      	ldr	r3, [pc, #316]	; (8014268 <face_detection_configure_weights+0x1014>)
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	4b5d      	ldr	r3, [pc, #372]	; (80142a4 <face_detection_configure_weights+0x1050>)
 801412e:	4413      	add	r3, r2
 8014130:	4a5b      	ldr	r2, [pc, #364]	; (80142a0 <face_detection_configure_weights+0x104c>)
 8014132:	6093      	str	r3, [r2, #8]
    reshape_148_const_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 436016);
 8014134:	4b4c      	ldr	r3, [pc, #304]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	4b5a      	ldr	r3, [pc, #360]	; (80142a4 <face_detection_configure_weights+0x1050>)
 801413a:	4413      	add	r3, r2
 801413c:	4a58      	ldr	r2, [pc, #352]	; (80142a0 <face_detection_configure_weights+0x104c>)
 801413e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8014140:	4b59      	ldr	r3, [pc, #356]	; (80142a8 <face_detection_configure_weights+0x1054>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014148:	4a57      	ldr	r2, [pc, #348]	; (80142a8 <face_detection_configure_weights+0x1054>)
 801414a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 447536);
 801414c:	4b46      	ldr	r3, [pc, #280]	; (8014268 <face_detection_configure_weights+0x1014>)
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	4b56      	ldr	r3, [pc, #344]	; (80142ac <face_detection_configure_weights+0x1058>)
 8014152:	4413      	add	r3, r2
 8014154:	4a54      	ldr	r2, [pc, #336]	; (80142a8 <face_detection_configure_weights+0x1054>)
 8014156:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447536);
 8014158:	4b43      	ldr	r3, [pc, #268]	; (8014268 <face_detection_configure_weights+0x1014>)
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	4b53      	ldr	r3, [pc, #332]	; (80142ac <face_detection_configure_weights+0x1058>)
 801415e:	4413      	add	r3, r2
 8014160:	4a51      	ldr	r2, [pc, #324]	; (80142a8 <face_detection_configure_weights+0x1054>)
 8014162:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8014164:	4b52      	ldr	r3, [pc, #328]	; (80142b0 <face_detection_configure_weights+0x105c>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801416c:	4a50      	ldr	r2, [pc, #320]	; (80142b0 <face_detection_configure_weights+0x105c>)
 801416e:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 447752);
 8014170:	4b3d      	ldr	r3, [pc, #244]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	4b4f      	ldr	r3, [pc, #316]	; (80142b4 <face_detection_configure_weights+0x1060>)
 8014176:	4413      	add	r3, r2
 8014178:	4a4d      	ldr	r2, [pc, #308]	; (80142b0 <face_detection_configure_weights+0x105c>)
 801417a:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447752);
 801417c:	4b3a      	ldr	r3, [pc, #232]	; (8014268 <face_detection_configure_weights+0x1014>)
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	4b4c      	ldr	r3, [pc, #304]	; (80142b4 <face_detection_configure_weights+0x1060>)
 8014182:	4413      	add	r3, r2
 8014184:	4a4a      	ldr	r2, [pc, #296]	; (80142b0 <face_detection_configure_weights+0x105c>)
 8014186:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8014188:	4b4b      	ldr	r3, [pc, #300]	; (80142b8 <face_detection_configure_weights+0x1064>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014190:	4a49      	ldr	r2, [pc, #292]	; (80142b8 <face_detection_configure_weights+0x1064>)
 8014192:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 447784);
 8014194:	4b34      	ldr	r3, [pc, #208]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	4b48      	ldr	r3, [pc, #288]	; (80142bc <face_detection_configure_weights+0x1068>)
 801419a:	4413      	add	r3, r2
 801419c:	4a46      	ldr	r2, [pc, #280]	; (80142b8 <face_detection_configure_weights+0x1064>)
 801419e:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447784);
 80141a0:	4b31      	ldr	r3, [pc, #196]	; (8014268 <face_detection_configure_weights+0x1014>)
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	4b45      	ldr	r3, [pc, #276]	; (80142bc <face_detection_configure_weights+0x1068>)
 80141a6:	4413      	add	r3, r2
 80141a8:	4a43      	ldr	r2, [pc, #268]	; (80142b8 <face_detection_configure_weights+0x1064>)
 80141aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80141ac:	4b44      	ldr	r3, [pc, #272]	; (80142c0 <face_detection_configure_weights+0x106c>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80141b4:	4a42      	ldr	r2, [pc, #264]	; (80142c0 <face_detection_configure_weights+0x106c>)
 80141b6:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 447856);
 80141b8:	4b2b      	ldr	r3, [pc, #172]	; (8014268 <face_detection_configure_weights+0x1014>)
 80141ba:	681a      	ldr	r2, [r3, #0]
 80141bc:	4b41      	ldr	r3, [pc, #260]	; (80142c4 <face_detection_configure_weights+0x1070>)
 80141be:	4413      	add	r3, r2
 80141c0:	4a3f      	ldr	r2, [pc, #252]	; (80142c0 <face_detection_configure_weights+0x106c>)
 80141c2:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447856);
 80141c4:	4b28      	ldr	r3, [pc, #160]	; (8014268 <face_detection_configure_weights+0x1014>)
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	4b3e      	ldr	r3, [pc, #248]	; (80142c4 <face_detection_configure_weights+0x1070>)
 80141ca:	4413      	add	r3, r2
 80141cc:	4a3c      	ldr	r2, [pc, #240]	; (80142c0 <face_detection_configure_weights+0x106c>)
 80141ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80141d0:	4b3d      	ldr	r3, [pc, #244]	; (80142c8 <face_detection_configure_weights+0x1074>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80141d8:	4a3b      	ldr	r2, [pc, #236]	; (80142c8 <face_detection_configure_weights+0x1074>)
 80141da:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 447888);
 80141dc:	4b22      	ldr	r3, [pc, #136]	; (8014268 <face_detection_configure_weights+0x1014>)
 80141de:	681a      	ldr	r2, [r3, #0]
 80141e0:	4b3a      	ldr	r3, [pc, #232]	; (80142cc <face_detection_configure_weights+0x1078>)
 80141e2:	4413      	add	r3, r2
 80141e4:	4a38      	ldr	r2, [pc, #224]	; (80142c8 <face_detection_configure_weights+0x1074>)
 80141e6:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 447888);
 80141e8:	4b1f      	ldr	r3, [pc, #124]	; (8014268 <face_detection_configure_weights+0x1014>)
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	4b37      	ldr	r3, [pc, #220]	; (80142cc <face_detection_configure_weights+0x1078>)
 80141ee:	4413      	add	r3, r2
 80141f0:	4a35      	ldr	r2, [pc, #212]	; (80142c8 <face_detection_configure_weights+0x1074>)
 80141f2:	60d3      	str	r3, [r2, #12]
    
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80141f4:	4b36      	ldr	r3, [pc, #216]	; (80142d0 <face_detection_configure_weights+0x107c>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80141fc:	4a34      	ldr	r2, [pc, #208]	; (80142d0 <face_detection_configure_weights+0x107c>)
 80141fe:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 448016);
 8014200:	4b19      	ldr	r3, [pc, #100]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	4b33      	ldr	r3, [pc, #204]	; (80142d4 <face_detection_configure_weights+0x1080>)
 8014206:	4413      	add	r3, r2
 8014208:	4a31      	ldr	r2, [pc, #196]	; (80142d0 <face_detection_configure_weights+0x107c>)
 801420a:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448016);
 801420c:	4b16      	ldr	r3, [pc, #88]	; (8014268 <face_detection_configure_weights+0x1014>)
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	4b30      	ldr	r3, [pc, #192]	; (80142d4 <face_detection_configure_weights+0x1080>)
 8014212:	4413      	add	r3, r2
 8014214:	4a2e      	ldr	r2, [pc, #184]	; (80142d0 <face_detection_configure_weights+0x107c>)
 8014216:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8014218:	4b2f      	ldr	r3, [pc, #188]	; (80142d8 <face_detection_configure_weights+0x1084>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014220:	4a2d      	ldr	r2, [pc, #180]	; (80142d8 <face_detection_configure_weights+0x1084>)
 8014222:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 448080);
 8014224:	4b10      	ldr	r3, [pc, #64]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	4b2c      	ldr	r3, [pc, #176]	; (80142dc <face_detection_configure_weights+0x1088>)
 801422a:	4413      	add	r3, r2
 801422c:	4a2a      	ldr	r2, [pc, #168]	; (80142d8 <face_detection_configure_weights+0x1084>)
 801422e:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448080);
 8014230:	4b0d      	ldr	r3, [pc, #52]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014232:	681a      	ldr	r2, [r3, #0]
 8014234:	4b29      	ldr	r3, [pc, #164]	; (80142dc <face_detection_configure_weights+0x1088>)
 8014236:	4413      	add	r3, r2
 8014238:	4a27      	ldr	r2, [pc, #156]	; (80142d8 <face_detection_configure_weights+0x1084>)
 801423a:	60d3      	str	r3, [r2, #12]
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 801423c:	4b28      	ldr	r3, [pc, #160]	; (80142e0 <face_detection_configure_weights+0x108c>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014244:	4a26      	ldr	r2, [pc, #152]	; (80142e0 <face_detection_configure_weights+0x108c>)
 8014246:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_face_detection_weights_map[0] + 448224);
 8014248:	4b07      	ldr	r3, [pc, #28]	; (8014268 <face_detection_configure_weights+0x1014>)
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	4b25      	ldr	r3, [pc, #148]	; (80142e4 <face_detection_configure_weights+0x1090>)
 801424e:	4413      	add	r3, r2
 8014250:	4a23      	ldr	r2, [pc, #140]	; (80142e0 <face_detection_configure_weights+0x108c>)
 8014252:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448224);
 8014254:	4b04      	ldr	r3, [pc, #16]	; (8014268 <face_detection_configure_weights+0x1014>)
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	4b22      	ldr	r3, [pc, #136]	; (80142e4 <face_detection_configure_weights+0x1090>)
 801425a:	4413      	add	r3, r2
 801425c:	4a20      	ldr	r2, [pc, #128]	; (80142e0 <face_detection_configure_weights+0x108c>)
 801425e:	60d3      	str	r3, [r2, #12]
 8014260:	e042      	b.n	80142e8 <face_detection_configure_weights+0x1094>
 8014262:	bf00      	nop
 8014264:	24000c38 	.word	0x24000c38
 8014268:	2405ded4 	.word	0x2405ded4
 801426c:	00068160 	.word	0x00068160
 8014270:	24000c68 	.word	0x24000c68
 8014274:	00068188 	.word	0x00068188
 8014278:	24000c98 	.word	0x24000c98
 801427c:	00069808 	.word	0x00069808
 8014280:	24000fa8 	.word	0x24000fa8
 8014284:	00069858 	.word	0x00069858
 8014288:	24000fb8 	.word	0x24000fb8
 801428c:	0006986c 	.word	0x0006986c
 8014290:	24000fe8 	.word	0x24000fe8
 8014294:	00069920 	.word	0x00069920
 8014298:	24000ff8 	.word	0x24000ff8
 801429c:	00069bf0 	.word	0x00069bf0
 80142a0:	24001028 	.word	0x24001028
 80142a4:	0006a730 	.word	0x0006a730
 80142a8:	24001038 	.word	0x24001038
 80142ac:	0006d430 	.word	0x0006d430
 80142b0:	24001058 	.word	0x24001058
 80142b4:	0006d508 	.word	0x0006d508
 80142b8:	24001078 	.word	0x24001078
 80142bc:	0006d528 	.word	0x0006d528
 80142c0:	24001098 	.word	0x24001098
 80142c4:	0006d570 	.word	0x0006d570
 80142c8:	240010b8 	.word	0x240010b8
 80142cc:	0006d590 	.word	0x0006d590
 80142d0:	240010d8 	.word	0x240010d8
 80142d4:	0006d610 	.word	0x0006d610
 80142d8:	240010f8 	.word	0x240010f8
 80142dc:	0006d650 	.word	0x0006d650
 80142e0:	24001118 	.word	0x24001118
 80142e4:	0006d6e0 	.word	0x0006d6e0
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80142e8:	4b0e      	ldr	r3, [pc, #56]	; (8014324 <face_detection_configure_weights+0x10d0>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80142f0:	4a0c      	ldr	r2, [pc, #48]	; (8014324 <face_detection_configure_weights+0x10d0>)
 80142f2:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_face_detection_weights_map[0] + 448288);
 80142f4:	4b0c      	ldr	r3, [pc, #48]	; (8014328 <face_detection_configure_weights+0x10d4>)
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	4b0c      	ldr	r3, [pc, #48]	; (801432c <face_detection_configure_weights+0x10d8>)
 80142fa:	4413      	add	r3, r2
 80142fc:	4a09      	ldr	r2, [pc, #36]	; (8014324 <face_detection_configure_weights+0x10d0>)
 80142fe:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_face_detection_weights_map[0] + 448288);
 8014300:	4b09      	ldr	r3, [pc, #36]	; (8014328 <face_detection_configure_weights+0x10d4>)
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	4b09      	ldr	r3, [pc, #36]	; (801432c <face_detection_configure_weights+0x10d8>)
 8014306:	4413      	add	r3, r2
 8014308:	4a06      	ldr	r2, [pc, #24]	; (8014324 <face_detection_configure_weights+0x10d0>)
 801430a:	60d3      	str	r3, [r2, #12]
    
    return true;
 801430c:	2301      	movs	r3, #1
 801430e:	e005      	b.n	801431c <face_detection_configure_weights+0x10c8>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8014310:	2212      	movs	r2, #18
 8014312:	2130      	movs	r1, #48	; 0x30
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f000 fb71 	bl	80149fc <ai_platform_network_set_error>
  return false;
 801431a:	2300      	movs	r3, #0
}
 801431c:	4618      	mov	r0, r3
 801431e:	3708      	adds	r7, #8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	24001128 	.word	0x24001128
 8014328:	2405ded4 	.word	0x2405ded4
 801432c:	0006d720 	.word	0x0006d720

08014330 <ai_face_detection_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_face_detection_get_error(ai_handle network)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b082      	sub	sp, #8
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f000 fa53 	bl	80147e4 <ai_platform_network_get_error>
 801433e:	4603      	mov	r3, r0
}
 8014340:	4618      	mov	r0, r3
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <ai_face_detection_create>:

AI_API_ENTRY
ai_error ai_face_detection_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af02      	add	r7, sp, #8
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8014352:	2300      	movs	r3, #0
 8014354:	9301      	str	r3, [sp, #4]
 8014356:	2305      	movs	r3, #5
 8014358:	9300      	str	r3, [sp, #0]
 801435a:	2301      	movs	r3, #1
 801435c:	4a04      	ldr	r2, [pc, #16]	; (8014370 <ai_face_detection_create+0x28>)
 801435e:	6839      	ldr	r1, [r7, #0]
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f000 fe65 	bl	8015030 <ai_platform_network_create>
 8014366:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	24008140 	.word	0x24008140

08014374 <ai_face_detection_create_and_init>:

AI_API_ENTRY
ai_error ai_face_detection_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b096      	sub	sp, #88	; 0x58
 8014378:	af00      	add	r7, sp, #0
 801437a:	60f8      	str	r0, [r7, #12]
 801437c:	60b9      	str	r1, [r7, #8]
 801437e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_face_detection_create(network, AI_FACE_DETECTION_DATA_CONFIG);
 8014380:	2100      	movs	r1, #0
 8014382:	68f8      	ldr	r0, [r7, #12]
 8014384:	f7ff ffe0 	bl	8014348 <ai_face_detection_create>
 8014388:	4603      	mov	r3, r0
 801438a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 801438c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8014390:	2b00      	cmp	r3, #0
 8014392:	d001      	beq.n	8014398 <ai_face_detection_create_and_init+0x24>
        return err;
 8014394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014396:	e05d      	b.n	8014454 <ai_face_detection_create_and_init+0xe0>
    if (ai_face_detection_data_params_get(&params) != true) {
 8014398:	f107 0314 	add.w	r3, r7, #20
 801439c:	4618      	mov	r0, r3
 801439e:	f000 f8dd 	bl	801455c <ai_face_detection_data_params_get>
 80143a2:	4603      	mov	r3, r0
 80143a4:	f083 0301 	eor.w	r3, r3, #1
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d008      	beq.n	80143c0 <ai_face_detection_create_and_init+0x4c>
        err = ai_face_detection_get_error(*network);
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7ff ffbc 	bl	8014330 <ai_face_detection_get_error>
 80143b8:	4603      	mov	r3, r0
 80143ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80143bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143be:	e049      	b.n	8014454 <ai_face_detection_create_and_init+0xe0>
    }
#if defined(AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d016      	beq.n	80143f4 <ai_face_detection_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80143c6:	2300      	movs	r3, #0
 80143c8:	657b      	str	r3, [r7, #84]	; 0x54
 80143ca:	e00e      	b.n	80143ea <ai_face_detection_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80143cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80143ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143d0:	009b      	lsls	r3, r3, #2
 80143d2:	68ba      	ldr	r2, [r7, #8]
 80143d4:	4413      	add	r3, r2
 80143d6:	681a      	ldr	r2, [r3, #0]
 80143d8:	f107 0314 	add.w	r3, r7, #20
 80143dc:	330c      	adds	r3, #12
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 f922 	bl	8014628 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80143e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143e6:	3301      	adds	r3, #1
 80143e8:	657b      	str	r3, [r7, #84]	; 0x54
 80143ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143ec:	461a      	mov	r2, r3
 80143ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143f0:	4293      	cmp	r3, r2
 80143f2:	dbeb      	blt.n	80143cc <ai_face_detection_create_and_init+0x58>
    }
#endif
#if defined(AI_FACE_DETECTION_DATA_WEIGHTS_COUNT)
    if (weights) {
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d016      	beq.n	8014428 <ai_face_detection_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80143fa:	2300      	movs	r3, #0
 80143fc:	653b      	str	r3, [r7, #80]	; 0x50
 80143fe:	e00e      	b.n	801441e <ai_face_detection_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8014400:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014404:	009b      	lsls	r3, r3, #2
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	4413      	add	r3, r2
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	f107 0314 	add.w	r3, r7, #20
 8014410:	3304      	adds	r3, #4
 8014412:	4618      	mov	r0, r3
 8014414:	f000 f908 	bl	8014628 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8014418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801441a:	3301      	adds	r3, #1
 801441c:	653b      	str	r3, [r7, #80]	; 0x50
 801441e:	8b7b      	ldrh	r3, [r7, #26]
 8014420:	461a      	mov	r2, r3
 8014422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014424:	4293      	cmp	r3, r2
 8014426:	dbeb      	blt.n	8014400 <ai_face_detection_create_and_init+0x8c>
    }
#endif
    if (ai_face_detection_init(*network, &params) != true) {
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f107 0214 	add.w	r2, r7, #20
 8014430:	4611      	mov	r1, r2
 8014432:	4618      	mov	r0, r3
 8014434:	f000 f846 	bl	80144c4 <ai_face_detection_init>
 8014438:	4603      	mov	r3, r0
 801443a:	f083 0301 	eor.w	r3, r3, #1
 801443e:	b2db      	uxtb	r3, r3
 8014440:	2b00      	cmp	r3, #0
 8014442:	d006      	beq.n	8014452 <ai_face_detection_create_and_init+0xde>
        err = ai_face_detection_get_error(*network);
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	4618      	mov	r0, r3
 801444a:	f7ff ff71 	bl	8014330 <ai_face_detection_get_error>
 801444e:	4603      	mov	r3, r0
 8014450:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8014452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014454:	4618      	mov	r0, r3
 8014456:	3758      	adds	r7, #88	; 0x58
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <ai_face_detection_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d104      	bne.n	8014476 <ai_face_detection_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801446c:	4b06      	ldr	r3, [pc, #24]	; (8014488 <ai_face_detection_inputs_get+0x2c>)
 801446e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	4a06      	ldr	r2, [pc, #24]	; (801448c <ai_face_detection_inputs_get+0x30>)
 8014474:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8014476:	6839      	ldr	r1, [r7, #0]
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f000 fac5 	bl	8014a08 <ai_platform_inputs_get>
 801447e:	4603      	mov	r3, r0
}
 8014480:	4618      	mov	r0, r3
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	24008140 	.word	0x24008140
 801448c:	a1c00100 	.word	0xa1c00100

08014490 <ai_face_detection_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_face_detection_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d104      	bne.n	80144aa <ai_face_detection_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80144a0:	4b06      	ldr	r3, [pc, #24]	; (80144bc <ai_face_detection_outputs_get+0x2c>)
 80144a2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	4a06      	ldr	r2, [pc, #24]	; (80144c0 <ai_face_detection_outputs_get+0x30>)
 80144a8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80144aa:	6839      	ldr	r1, [r7, #0]
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 fc37 	bl	8014d20 <ai_platform_outputs_get>
 80144b2:	4603      	mov	r3, r0
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	3708      	adds	r7, #8
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	24008140 	.word	0x24008140
 80144c0:	a1c00100 	.word	0xa1c00100

080144c4 <ai_face_detection_init>:
}

AI_API_ENTRY
ai_bool ai_face_detection_init(
  ai_handle network, const ai_network_params* params)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 ff87 	bl	80153e4 <ai_platform_network_init>
 80144d6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d101      	bne.n	80144e2 <ai_face_detection_init+0x1e>
 80144de:	2300      	movs	r3, #0
 80144e0:	e028      	b.n	8014534 <ai_face_detection_init+0x70>

  ai_bool ok = true;
 80144e2:	2301      	movs	r3, #1
 80144e4:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_weights(net_ctx, params);
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	68f8      	ldr	r0, [r7, #12]
 80144ea:	f7fe feb3 	bl	8013254 <face_detection_configure_weights>
 80144ee:	4603      	mov	r3, r0
 80144f0:	461a      	mov	r2, r3
 80144f2:	7afb      	ldrb	r3, [r7, #11]
 80144f4:	4013      	ands	r3, r2
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	bf14      	ite	ne
 80144fa:	2301      	movne	r3, #1
 80144fc:	2300      	moveq	r3, #0
 80144fe:	72fb      	strb	r3, [r7, #11]
  ok &= face_detection_configure_activations(net_ctx, params);
 8014500:	6839      	ldr	r1, [r7, #0]
 8014502:	68f8      	ldr	r0, [r7, #12]
 8014504:	f7fd fd24 	bl	8011f50 <face_detection_configure_activations>
 8014508:	4603      	mov	r3, r0
 801450a:	461a      	mov	r2, r3
 801450c:	7afb      	ldrb	r3, [r7, #11]
 801450e:	4013      	ands	r3, r2
 8014510:	2b00      	cmp	r3, #0
 8014512:	bf14      	ite	ne
 8014514:	2301      	movne	r3, #1
 8014516:	2300      	moveq	r3, #0
 8014518:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f001 f8fe 	bl	801571c <ai_platform_network_post_init>
 8014520:	4603      	mov	r3, r0
 8014522:	461a      	mov	r2, r3
 8014524:	7afb      	ldrb	r3, [r7, #11]
 8014526:	4013      	ands	r3, r2
 8014528:	2b00      	cmp	r3, #0
 801452a:	bf14      	ite	ne
 801452c:	2301      	movne	r3, #1
 801452e:	2300      	moveq	r3, #0
 8014530:	72fb      	strb	r3, [r7, #11]

  return ok;
 8014532:	7afb      	ldrb	r3, [r7, #11]
}
 8014534:	4618      	mov	r0, r3
 8014536:	3710      	adds	r7, #16
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <ai_face_detection_run>:


AI_API_ENTRY
ai_i32 ai_face_detection_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b084      	sub	sp, #16
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	68b9      	ldr	r1, [r7, #8]
 801454c:	68f8      	ldr	r0, [r7, #12]
 801454e:	f001 fa0f 	bl	8015970 <ai_platform_network_process>
 8014552:	4603      	mov	r3, r0
}
 8014554:	4618      	mov	r0, r3
 8014556:	3710      	adds	r7, #16
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}

0801455c <ai_face_detection_data_params_get>:
 * @ingroup face_detection_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_face_detection_data_params_get(ai_network_params* params)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b086      	sub	sp, #24
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d101      	bne.n	801456e <ai_face_detection_data_params_get+0x12>
 801456a:	2300      	movs	r3, #0
 801456c:	e016      	b.n	801459c <ai_face_detection_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801456e:	4a0d      	ldr	r2, [pc, #52]	; (80145a4 <ai_face_detection_data_params_get+0x48>)
 8014570:	f107 0310 	add.w	r3, r7, #16
 8014574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014578:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_ACTIVATIONS_COUNT, g_face_detection_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801457c:	4a0a      	ldr	r2, [pc, #40]	; (80145a8 <ai_face_detection_data_params_get+0x4c>)
 801457e:	f107 0308 	add.w	r3, r7, #8
 8014582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014586:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_DETECTION_DATA_WEIGHTS_COUNT, g_face_detection_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801458a:	f107 0210 	add.w	r2, r7, #16
 801458e:	f107 0308 	add.w	r3, r7, #8
 8014592:	4619      	mov	r1, r3
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f000 f90b 	bl	80147b0 <ai_platform_bind_network_params>
 801459a:	4603      	mov	r3, r0
}
 801459c:	4618      	mov	r0, r3
 801459e:	3718      	adds	r7, #24
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	0801ef38 	.word	0x0801ef38
 80145a8:	0801ef40 	.word	0x0801ef40

080145ac <ai_buffer_get_size>:
 80145ac:	b368      	cbz	r0, 801460a <ai_buffer_get_size+0x5e>
 80145ae:	4b17      	ldr	r3, [pc, #92]	; (801460c <ai_buffer_get_size+0x60>)
 80145b0:	4a17      	ldr	r2, [pc, #92]	; (8014610 <ai_buffer_get_size+0x64>)
 80145b2:	b410      	push	{r4}
 80145b4:	6804      	ldr	r4, [r0, #0]
 80145b6:	4023      	ands	r3, r4
 80145b8:	4293      	cmp	r3, r2
 80145ba:	d123      	bne.n	8014604 <ai_buffer_get_size+0x58>
 80145bc:	b311      	cbz	r1, 8014604 <ai_buffer_get_size+0x58>
 80145be:	6984      	ldr	r4, [r0, #24]
 80145c0:	6862      	ldr	r2, [r4, #4]
 80145c2:	321f      	adds	r2, #31
 80145c4:	f022 021f 	bic.w	r2, r2, #31
 80145c8:	7d03      	ldrb	r3, [r0, #20]
 80145ca:	6941      	ldr	r1, [r0, #20]
 80145cc:	f1a3 0301 	sub.w	r3, r3, #1
 80145d0:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80145d4:	fab3 f383 	clz	r3, r3
 80145d8:	095b      	lsrs	r3, r3, #5
 80145da:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80145de:	da0c      	bge.n	80145fa <ai_buffer_get_size+0x4e>
 80145e0:	2b01      	cmp	r3, #1
 80145e2:	d103      	bne.n	80145ec <ai_buffer_get_size+0x40>
 80145e4:	2802      	cmp	r0, #2
 80145e6:	f04f 0302 	mov.w	r3, #2
 80145ea:	d006      	beq.n	80145fa <ai_buffer_get_size+0x4e>
 80145ec:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80145f0:	3301      	adds	r3, #1
 80145f2:	4298      	cmp	r0, r3
 80145f4:	fb01 f202 	mul.w	r2, r1, r2
 80145f8:	d1f2      	bne.n	80145e0 <ai_buffer_get_size+0x34>
 80145fa:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80145fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014602:	4770      	bx	lr
 8014604:	6984      	ldr	r4, [r0, #24]
 8014606:	6862      	ldr	r2, [r4, #4]
 8014608:	e7de      	b.n	80145c8 <ai_buffer_get_size+0x1c>
 801460a:	4770      	bx	lr
 801460c:	017fffff 	.word	0x017fffff
 8014610:	000400c0 	.word	0x000400c0

08014614 <ai_buffer_array_sane>:
 8014614:	b138      	cbz	r0, 8014626 <ai_buffer_array_sane+0x12>
 8014616:	6843      	ldr	r3, [r0, #4]
 8014618:	b123      	cbz	r3, 8014624 <ai_buffer_array_sane+0x10>
 801461a:	8840      	ldrh	r0, [r0, #2]
 801461c:	3800      	subs	r0, #0
 801461e:	bf18      	it	ne
 8014620:	2001      	movne	r0, #1
 8014622:	4770      	bx	lr
 8014624:	4618      	mov	r0, r3
 8014626:	4770      	bx	lr

08014628 <ai_buffer_array_item_set_address>:
 8014628:	b150      	cbz	r0, 8014640 <ai_buffer_array_item_set_address+0x18>
 801462a:	6843      	ldr	r3, [r0, #4]
 801462c:	b14b      	cbz	r3, 8014642 <ai_buffer_array_item_set_address+0x1a>
 801462e:	8840      	ldrh	r0, [r0, #2]
 8014630:	b900      	cbnz	r0, 8014634 <ai_buffer_array_item_set_address+0xc>
 8014632:	4770      	bx	lr
 8014634:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8014638:	2001      	movs	r0, #1
 801463a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801463e:	604a      	str	r2, [r1, #4]
 8014640:	4770      	bx	lr
 8014642:	4618      	mov	r0, r3
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop

08014648 <_ai_platform_acquire_crc>:
 8014648:	2001      	movs	r0, #1
 801464a:	4770      	bx	lr

0801464c <_ai_platform_release_crc>:
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop

08014650 <ai_platform_get_weights_map>:
 8014650:	2900      	cmp	r1, #0
 8014652:	bf18      	it	ne
 8014654:	2800      	cmpne	r0, #0
 8014656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014658:	bf0c      	ite	eq
 801465a:	2401      	moveq	r4, #1
 801465c:	2400      	movne	r4, #0
 801465e:	2a00      	cmp	r2, #0
 8014660:	bf08      	it	eq
 8014662:	f044 0401 	orreq.w	r4, r4, #1
 8014666:	b114      	cbz	r4, 801466e <ai_platform_get_weights_map+0x1e>
 8014668:	2400      	movs	r4, #0
 801466a:	4620      	mov	r0, r4
 801466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801466e:	4616      	mov	r6, r2
 8014670:	4b22      	ldr	r3, [pc, #136]	; (80146fc <ai_platform_get_weights_map+0xac>)
 8014672:	6812      	ldr	r2, [r2, #0]
 8014674:	4605      	mov	r5, r0
 8014676:	460f      	mov	r7, r1
 8014678:	429a      	cmp	r2, r3
 801467a:	d022      	beq.n	80146c2 <ai_platform_get_weights_map+0x72>
 801467c:	6870      	ldr	r0, [r6, #4]
 801467e:	2800      	cmp	r0, #0
 8014680:	d0f2      	beq.n	8014668 <ai_platform_get_weights_map+0x18>
 8014682:	6806      	ldr	r6, [r0, #0]
 8014684:	429e      	cmp	r6, r3
 8014686:	d006      	beq.n	8014696 <ai_platform_get_weights_map+0x46>
 8014688:	f1a1 0401 	sub.w	r4, r1, #1
 801468c:	6028      	str	r0, [r5, #0]
 801468e:	fab4 f484 	clz	r4, r4
 8014692:	0964      	lsrs	r4, r4, #5
 8014694:	e7e9      	b.n	801466a <ai_platform_get_weights_map+0x1a>
 8014696:	3d04      	subs	r5, #4
 8014698:	4602      	mov	r2, r0
 801469a:	4621      	mov	r1, r4
 801469c:	e000      	b.n	80146a0 <ai_platform_get_weights_map+0x50>
 801469e:	4619      	mov	r1, r3
 80146a0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80146a4:	42b3      	cmp	r3, r6
 80146a6:	d025      	beq.n	80146f4 <ai_platform_get_weights_map+0xa4>
 80146a8:	f845 3f04 	str.w	r3, [r5, #4]!
 80146ac:	1c4b      	adds	r3, r1, #1
 80146ae:	429f      	cmp	r7, r3
 80146b0:	d8f5      	bhi.n	801469e <ai_platform_get_weights_map+0x4e>
 80146b2:	d1da      	bne.n	801466a <ai_platform_get_weights_map+0x1a>
 80146b4:	3102      	adds	r1, #2
 80146b6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80146ba:	42b3      	cmp	r3, r6
 80146bc:	d1d5      	bne.n	801466a <ai_platform_get_weights_map+0x1a>
 80146be:	2401      	movs	r4, #1
 80146c0:	e7d3      	b.n	801466a <ai_platform_get_weights_map+0x1a>
 80146c2:	1d30      	adds	r0, r6, #4
 80146c4:	f7ff ffa6 	bl	8014614 <ai_buffer_array_sane>
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d0cd      	beq.n	8014668 <ai_platform_get_weights_map+0x18>
 80146cc:	88f3      	ldrh	r3, [r6, #6]
 80146ce:	429f      	cmp	r7, r3
 80146d0:	d1ca      	bne.n	8014668 <ai_platform_get_weights_map+0x18>
 80146d2:	3d04      	subs	r5, #4
 80146d4:	4622      	mov	r2, r4
 80146d6:	68b3      	ldr	r3, [r6, #8]
 80146d8:	4423      	add	r3, r4
 80146da:	341c      	adds	r4, #28
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	b123      	cbz	r3, 80146ea <ai_platform_get_weights_map+0x9a>
 80146e0:	3201      	adds	r2, #1
 80146e2:	f845 3f04 	str.w	r3, [r5, #4]!
 80146e6:	4297      	cmp	r7, r2
 80146e8:	d8f5      	bhi.n	80146d6 <ai_platform_get_weights_map+0x86>
 80146ea:	1abc      	subs	r4, r7, r2
 80146ec:	fab4 f484 	clz	r4, r4
 80146f0:	0964      	lsrs	r4, r4, #5
 80146f2:	e7ba      	b.n	801466a <ai_platform_get_weights_map+0x1a>
 80146f4:	428f      	cmp	r7, r1
 80146f6:	d1b8      	bne.n	801466a <ai_platform_get_weights_map+0x1a>
 80146f8:	e7e1      	b.n	80146be <ai_platform_get_weights_map+0x6e>
 80146fa:	bf00      	nop
 80146fc:	a1facade 	.word	0xa1facade

08014700 <ai_platform_get_activations_map>:
 8014700:	2900      	cmp	r1, #0
 8014702:	bf18      	it	ne
 8014704:	2800      	cmpne	r0, #0
 8014706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014708:	bf0c      	ite	eq
 801470a:	2401      	moveq	r4, #1
 801470c:	2400      	movne	r4, #0
 801470e:	2a00      	cmp	r2, #0
 8014710:	bf08      	it	eq
 8014712:	f044 0401 	orreq.w	r4, r4, #1
 8014716:	b114      	cbz	r4, 801471e <ai_platform_get_activations_map+0x1e>
 8014718:	2400      	movs	r4, #0
 801471a:	4620      	mov	r0, r4
 801471c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801471e:	4616      	mov	r6, r2
 8014720:	4b22      	ldr	r3, [pc, #136]	; (80147ac <ai_platform_get_activations_map+0xac>)
 8014722:	6812      	ldr	r2, [r2, #0]
 8014724:	4605      	mov	r5, r0
 8014726:	460f      	mov	r7, r1
 8014728:	429a      	cmp	r2, r3
 801472a:	d022      	beq.n	8014772 <ai_platform_get_activations_map+0x72>
 801472c:	6a30      	ldr	r0, [r6, #32]
 801472e:	2800      	cmp	r0, #0
 8014730:	d0f2      	beq.n	8014718 <ai_platform_get_activations_map+0x18>
 8014732:	6806      	ldr	r6, [r0, #0]
 8014734:	429e      	cmp	r6, r3
 8014736:	d006      	beq.n	8014746 <ai_platform_get_activations_map+0x46>
 8014738:	f1a1 0401 	sub.w	r4, r1, #1
 801473c:	6028      	str	r0, [r5, #0]
 801473e:	fab4 f484 	clz	r4, r4
 8014742:	0964      	lsrs	r4, r4, #5
 8014744:	e7e9      	b.n	801471a <ai_platform_get_activations_map+0x1a>
 8014746:	3d04      	subs	r5, #4
 8014748:	4602      	mov	r2, r0
 801474a:	4621      	mov	r1, r4
 801474c:	e000      	b.n	8014750 <ai_platform_get_activations_map+0x50>
 801474e:	4619      	mov	r1, r3
 8014750:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8014754:	42b3      	cmp	r3, r6
 8014756:	d026      	beq.n	80147a6 <ai_platform_get_activations_map+0xa6>
 8014758:	f845 3f04 	str.w	r3, [r5, #4]!
 801475c:	1c4b      	adds	r3, r1, #1
 801475e:	429f      	cmp	r7, r3
 8014760:	d8f5      	bhi.n	801474e <ai_platform_get_activations_map+0x4e>
 8014762:	d1da      	bne.n	801471a <ai_platform_get_activations_map+0x1a>
 8014764:	3102      	adds	r1, #2
 8014766:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801476a:	42b3      	cmp	r3, r6
 801476c:	d1d5      	bne.n	801471a <ai_platform_get_activations_map+0x1a>
 801476e:	2401      	movs	r4, #1
 8014770:	e7d3      	b.n	801471a <ai_platform_get_activations_map+0x1a>
 8014772:	f106 000c 	add.w	r0, r6, #12
 8014776:	f7ff ff4d 	bl	8014614 <ai_buffer_array_sane>
 801477a:	2800      	cmp	r0, #0
 801477c:	d0cc      	beq.n	8014718 <ai_platform_get_activations_map+0x18>
 801477e:	89f3      	ldrh	r3, [r6, #14]
 8014780:	429f      	cmp	r7, r3
 8014782:	d1c9      	bne.n	8014718 <ai_platform_get_activations_map+0x18>
 8014784:	3d04      	subs	r5, #4
 8014786:	4622      	mov	r2, r4
 8014788:	6933      	ldr	r3, [r6, #16]
 801478a:	4423      	add	r3, r4
 801478c:	341c      	adds	r4, #28
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	b123      	cbz	r3, 801479c <ai_platform_get_activations_map+0x9c>
 8014792:	3201      	adds	r2, #1
 8014794:	f845 3f04 	str.w	r3, [r5, #4]!
 8014798:	4297      	cmp	r7, r2
 801479a:	d8f5      	bhi.n	8014788 <ai_platform_get_activations_map+0x88>
 801479c:	1abc      	subs	r4, r7, r2
 801479e:	fab4 f484 	clz	r4, r4
 80147a2:	0964      	lsrs	r4, r4, #5
 80147a4:	e7b9      	b.n	801471a <ai_platform_get_activations_map+0x1a>
 80147a6:	428f      	cmp	r7, r1
 80147a8:	d1b7      	bne.n	801471a <ai_platform_get_activations_map+0x1a>
 80147aa:	e7e0      	b.n	801476e <ai_platform_get_activations_map+0x6e>
 80147ac:	a1facade 	.word	0xa1facade

080147b0 <ai_platform_bind_network_params>:
 80147b0:	2a00      	cmp	r2, #0
 80147b2:	bf18      	it	ne
 80147b4:	2900      	cmpne	r1, #0
 80147b6:	d010      	beq.n	80147da <ai_platform_bind_network_params+0x2a>
 80147b8:	b178      	cbz	r0, 80147da <ai_platform_bind_network_params+0x2a>
 80147ba:	4603      	mov	r3, r0
 80147bc:	4808      	ldr	r0, [pc, #32]	; (80147e0 <ai_platform_bind_network_params+0x30>)
 80147be:	f103 0c0c 	add.w	ip, r3, #12
 80147c2:	f843 0b04 	str.w	r0, [r3], #4
 80147c6:	c903      	ldmia	r1, {r0, r1}
 80147c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80147cc:	2301      	movs	r3, #1
 80147ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80147d6:	4618      	mov	r0, r3
 80147d8:	4770      	bx	lr
 80147da:	2300      	movs	r3, #0
 80147dc:	4618      	mov	r0, r3
 80147de:	4770      	bx	lr
 80147e0:	a1facade 	.word	0xa1facade

080147e4 <ai_platform_network_get_error>:
 80147e4:	b510      	push	{r4, lr}
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d03f      	beq.n	801486a <ai_platform_network_get_error+0x86>
 80147ea:	4b7d      	ldr	r3, [pc, #500]	; (80149e0 <ai_platform_network_get_error+0x1fc>)
 80147ec:	4604      	mov	r4, r0
 80147ee:	6802      	ldr	r2, [r0, #0]
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d13a      	bne.n	801486a <ai_platform_network_get_error+0x86>
 80147f4:	f7ff ff28 	bl	8014648 <_ai_platform_acquire_crc>
 80147f8:	4b7a      	ldr	r3, [pc, #488]	; (80149e4 <ai_platform_network_get_error+0x200>)
 80147fa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014804:	189a      	adds	r2, r3, r2
 8014806:	2a01      	cmp	r2, #1
 8014808:	f240 8086 	bls.w	8014918 <ai_platform_network_get_error+0x134>
 801480c:	f240 4249 	movw	r2, #1097	; 0x449
 8014810:	4293      	cmp	r3, r2
 8014812:	f000 8081 	beq.w	8014918 <ai_platform_network_get_error+0x134>
 8014816:	4a74      	ldr	r2, [pc, #464]	; (80149e8 <ai_platform_network_get_error+0x204>)
 8014818:	6813      	ldr	r3, [r2, #0]
 801481a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801481e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014822:	f000 8087 	beq.w	8014934 <ai_platform_network_get_error+0x150>
 8014826:	6813      	ldr	r3, [r2, #0]
 8014828:	f240 4183 	movw	r1, #1155	; 0x483
 801482c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014830:	428b      	cmp	r3, r1
 8014832:	f000 80a9 	beq.w	8014988 <ai_platform_network_get_error+0x1a4>
 8014836:	6813      	ldr	r3, [r2, #0]
 8014838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801483c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8014840:	f000 80c0 	beq.w	80149c4 <ai_platform_network_get_error+0x1e0>
 8014844:	6813      	ldr	r3, [r2, #0]
 8014846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801484a:	2b00      	cmp	r3, #0
 801484c:	f040 8082 	bne.w	8014954 <ai_platform_network_get_error+0x170>
 8014850:	4a66      	ldr	r2, [pc, #408]	; (80149ec <ai_platform_network_get_error+0x208>)
 8014852:	2301      	movs	r3, #1
 8014854:	6093      	str	r3, [r2, #8]
 8014856:	6893      	ldr	r3, [r2, #8]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d1fc      	bne.n	8014856 <ai_platform_network_get_error+0x72>
 801485c:	4964      	ldr	r1, [pc, #400]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 801485e:	4b65      	ldr	r3, [pc, #404]	; (80149f4 <ai_platform_network_get_error+0x210>)
 8014860:	6011      	str	r1, [r2, #0]
 8014862:	6812      	ldr	r2, [r2, #0]
 8014864:	429a      	cmp	r2, r3
 8014866:	d075      	beq.n	8014954 <ai_platform_network_get_error+0x170>
 8014868:	e7fe      	b.n	8014868 <ai_platform_network_get_error+0x84>
 801486a:	f7ff feed 	bl	8014648 <_ai_platform_acquire_crc>
 801486e:	4b5d      	ldr	r3, [pc, #372]	; (80149e4 <ai_platform_network_get_error+0x200>)
 8014870:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801487a:	185a      	adds	r2, r3, r1
 801487c:	2a01      	cmp	r2, #1
 801487e:	d929      	bls.n	80148d4 <ai_platform_network_get_error+0xf0>
 8014880:	f240 4249 	movw	r2, #1097	; 0x449
 8014884:	4293      	cmp	r3, r2
 8014886:	d025      	beq.n	80148d4 <ai_platform_network_get_error+0xf0>
 8014888:	4a57      	ldr	r2, [pc, #348]	; (80149e8 <ai_platform_network_get_error+0x204>)
 801488a:	6813      	ldr	r3, [r2, #0]
 801488c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014890:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014894:	d02b      	beq.n	80148ee <ai_platform_network_get_error+0x10a>
 8014896:	6813      	ldr	r3, [r2, #0]
 8014898:	f240 4183 	movw	r1, #1155	; 0x483
 801489c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80148a0:	428b      	cmp	r3, r1
 80148a2:	d060      	beq.n	8014966 <ai_platform_network_get_error+0x182>
 80148a4:	6813      	ldr	r3, [r2, #0]
 80148a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80148aa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80148ae:	d07c      	beq.n	80149aa <ai_platform_network_get_error+0x1c6>
 80148b0:	6813      	ldr	r3, [r2, #0]
 80148b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d129      	bne.n	801490e <ai_platform_network_get_error+0x12a>
 80148ba:	4a4c      	ldr	r2, [pc, #304]	; (80149ec <ai_platform_network_get_error+0x208>)
 80148bc:	2301      	movs	r3, #1
 80148be:	6093      	str	r3, [r2, #8]
 80148c0:	6893      	ldr	r3, [r2, #8]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d1fc      	bne.n	80148c0 <ai_platform_network_get_error+0xdc>
 80148c6:	494a      	ldr	r1, [pc, #296]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 80148c8:	4b4a      	ldr	r3, [pc, #296]	; (80149f4 <ai_platform_network_get_error+0x210>)
 80148ca:	6011      	str	r1, [r2, #0]
 80148cc:	6812      	ldr	r2, [r2, #0]
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d01d      	beq.n	801490e <ai_platform_network_get_error+0x12a>
 80148d2:	e7fe      	b.n	80148d2 <ai_platform_network_get_error+0xee>
 80148d4:	4a45      	ldr	r2, [pc, #276]	; (80149ec <ai_platform_network_get_error+0x208>)
 80148d6:	2301      	movs	r3, #1
 80148d8:	6093      	str	r3, [r2, #8]
 80148da:	6893      	ldr	r3, [r2, #8]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d1fc      	bne.n	80148da <ai_platform_network_get_error+0xf6>
 80148e0:	4943      	ldr	r1, [pc, #268]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 80148e2:	4b44      	ldr	r3, [pc, #272]	; (80149f4 <ai_platform_network_get_error+0x210>)
 80148e4:	6011      	str	r1, [r2, #0]
 80148e6:	6812      	ldr	r2, [r2, #0]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d010      	beq.n	801490e <ai_platform_network_get_error+0x12a>
 80148ec:	e7fe      	b.n	80148ec <ai_platform_network_get_error+0x108>
 80148ee:	4a42      	ldr	r2, [pc, #264]	; (80149f8 <ai_platform_network_get_error+0x214>)
 80148f0:	2301      	movs	r3, #1
 80148f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80148f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d1fb      	bne.n	80148f6 <ai_platform_network_get_error+0x112>
 80148fe:	493c      	ldr	r1, [pc, #240]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 8014900:	4b3c      	ldr	r3, [pc, #240]	; (80149f4 <ai_platform_network_get_error+0x210>)
 8014902:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8014906:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801490a:	429a      	cmp	r2, r3
 801490c:	d111      	bne.n	8014932 <ai_platform_network_get_error+0x14e>
 801490e:	f7ff fe9d 	bl	801464c <_ai_platform_release_crc>
 8014912:	f241 0010 	movw	r0, #4112	; 0x1010
 8014916:	bd10      	pop	{r4, pc}
 8014918:	4a34      	ldr	r2, [pc, #208]	; (80149ec <ai_platform_network_get_error+0x208>)
 801491a:	2301      	movs	r3, #1
 801491c:	6093      	str	r3, [r2, #8]
 801491e:	6893      	ldr	r3, [r2, #8]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d1fc      	bne.n	801491e <ai_platform_network_get_error+0x13a>
 8014924:	4932      	ldr	r1, [pc, #200]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 8014926:	4b33      	ldr	r3, [pc, #204]	; (80149f4 <ai_platform_network_get_error+0x210>)
 8014928:	6011      	str	r1, [r2, #0]
 801492a:	6812      	ldr	r2, [r2, #0]
 801492c:	429a      	cmp	r2, r3
 801492e:	d011      	beq.n	8014954 <ai_platform_network_get_error+0x170>
 8014930:	e7fe      	b.n	8014930 <ai_platform_network_get_error+0x14c>
 8014932:	e7fe      	b.n	8014932 <ai_platform_network_get_error+0x14e>
 8014934:	4a30      	ldr	r2, [pc, #192]	; (80149f8 <ai_platform_network_get_error+0x214>)
 8014936:	2301      	movs	r3, #1
 8014938:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801493c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014940:	2b00      	cmp	r3, #0
 8014942:	d1fb      	bne.n	801493c <ai_platform_network_get_error+0x158>
 8014944:	492a      	ldr	r1, [pc, #168]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 8014946:	4b2b      	ldr	r3, [pc, #172]	; (80149f4 <ai_platform_network_get_error+0x210>)
 8014948:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801494c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014950:	429a      	cmp	r2, r3
 8014952:	d107      	bne.n	8014964 <ai_platform_network_get_error+0x180>
 8014954:	f7ff fe7a 	bl	801464c <_ai_platform_release_crc>
 8014958:	f104 0010 	add.w	r0, r4, #16
 801495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014960:	f001 bd4a 	b.w	80163f8 <core_get_error>
 8014964:	e7fe      	b.n	8014964 <ai_platform_network_get_error+0x180>
 8014966:	4a24      	ldr	r2, [pc, #144]	; (80149f8 <ai_platform_network_get_error+0x214>)
 8014968:	2301      	movs	r3, #1
 801496a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801496e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014972:	2b00      	cmp	r3, #0
 8014974:	d1fb      	bne.n	801496e <ai_platform_network_get_error+0x18a>
 8014976:	491e      	ldr	r1, [pc, #120]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 8014978:	4b1e      	ldr	r3, [pc, #120]	; (80149f4 <ai_platform_network_get_error+0x210>)
 801497a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801497e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014982:	429a      	cmp	r2, r3
 8014984:	d0c3      	beq.n	801490e <ai_platform_network_get_error+0x12a>
 8014986:	e7fe      	b.n	8014986 <ai_platform_network_get_error+0x1a2>
 8014988:	4a1b      	ldr	r2, [pc, #108]	; (80149f8 <ai_platform_network_get_error+0x214>)
 801498a:	2301      	movs	r3, #1
 801498c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014990:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014994:	2b00      	cmp	r3, #0
 8014996:	d1fb      	bne.n	8014990 <ai_platform_network_get_error+0x1ac>
 8014998:	4915      	ldr	r1, [pc, #84]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 801499a:	4b16      	ldr	r3, [pc, #88]	; (80149f4 <ai_platform_network_get_error+0x210>)
 801499c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80149a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d0d5      	beq.n	8014954 <ai_platform_network_get_error+0x170>
 80149a8:	e7fe      	b.n	80149a8 <ai_platform_network_get_error+0x1c4>
 80149aa:	4a10      	ldr	r2, [pc, #64]	; (80149ec <ai_platform_network_get_error+0x208>)
 80149ac:	2301      	movs	r3, #1
 80149ae:	6093      	str	r3, [r2, #8]
 80149b0:	6893      	ldr	r3, [r2, #8]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d1fc      	bne.n	80149b0 <ai_platform_network_get_error+0x1cc>
 80149b6:	490e      	ldr	r1, [pc, #56]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 80149b8:	4b0e      	ldr	r3, [pc, #56]	; (80149f4 <ai_platform_network_get_error+0x210>)
 80149ba:	6011      	str	r1, [r2, #0]
 80149bc:	6812      	ldr	r2, [r2, #0]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d0a5      	beq.n	801490e <ai_platform_network_get_error+0x12a>
 80149c2:	e7fe      	b.n	80149c2 <ai_platform_network_get_error+0x1de>
 80149c4:	4a09      	ldr	r2, [pc, #36]	; (80149ec <ai_platform_network_get_error+0x208>)
 80149c6:	2301      	movs	r3, #1
 80149c8:	6093      	str	r3, [r2, #8]
 80149ca:	6893      	ldr	r3, [r2, #8]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d1fc      	bne.n	80149ca <ai_platform_network_get_error+0x1e6>
 80149d0:	4907      	ldr	r1, [pc, #28]	; (80149f0 <ai_platform_network_get_error+0x20c>)
 80149d2:	4b08      	ldr	r3, [pc, #32]	; (80149f4 <ai_platform_network_get_error+0x210>)
 80149d4:	6011      	str	r1, [r2, #0]
 80149d6:	6812      	ldr	r2, [r2, #0]
 80149d8:	429a      	cmp	r2, r3
 80149da:	d0bb      	beq.n	8014954 <ai_platform_network_get_error+0x170>
 80149dc:	e7fe      	b.n	80149dc <ai_platform_network_get_error+0x1f8>
 80149de:	bf00      	nop
 80149e0:	a1c00100 	.word	0xa1c00100
 80149e4:	e0042000 	.word	0xe0042000
 80149e8:	5c001000 	.word	0x5c001000
 80149ec:	40023000 	.word	0x40023000
 80149f0:	f407a5c2 	.word	0xf407a5c2
 80149f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80149f8:	58024000 	.word	0x58024000

080149fc <ai_platform_network_set_error>:
 80149fc:	b110      	cbz	r0, 8014a04 <ai_platform_network_set_error+0x8>
 80149fe:	3010      	adds	r0, #16
 8014a00:	f001 bd00 	b.w	8016404 <core_set_error>
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop

08014a08 <ai_platform_inputs_get>:
 8014a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a0c:	b085      	sub	sp, #20
 8014a0e:	9102      	str	r1, [sp, #8]
 8014a10:	2800      	cmp	r0, #0
 8014a12:	f000 8093 	beq.w	8014b3c <ai_platform_inputs_get+0x134>
 8014a16:	4baa      	ldr	r3, [pc, #680]	; (8014cc0 <ai_platform_inputs_get+0x2b8>)
 8014a18:	4681      	mov	r9, r0
 8014a1a:	6802      	ldr	r2, [r0, #0]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	f040 808d 	bne.w	8014b3c <ai_platform_inputs_get+0x134>
 8014a22:	f7ff fe11 	bl	8014648 <_ai_platform_acquire_crc>
 8014a26:	4ba7      	ldr	r3, [pc, #668]	; (8014cc4 <ai_platform_inputs_get+0x2bc>)
 8014a28:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014a32:	189a      	adds	r2, r3, r2
 8014a34:	2a01      	cmp	r2, #1
 8014a36:	f240 80da 	bls.w	8014bee <ai_platform_inputs_get+0x1e6>
 8014a3a:	f240 4249 	movw	r2, #1097	; 0x449
 8014a3e:	4293      	cmp	r3, r2
 8014a40:	f000 80d5 	beq.w	8014bee <ai_platform_inputs_get+0x1e6>
 8014a44:	4aa0      	ldr	r2, [pc, #640]	; (8014cc8 <ai_platform_inputs_get+0x2c0>)
 8014a46:	6813      	ldr	r3, [r2, #0]
 8014a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014a4c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014a50:	f000 80dc 	beq.w	8014c0c <ai_platform_inputs_get+0x204>
 8014a54:	6813      	ldr	r3, [r2, #0]
 8014a56:	f240 4183 	movw	r1, #1155	; 0x483
 8014a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014a5e:	428b      	cmp	r3, r1
 8014a60:	f000 810e 	beq.w	8014c80 <ai_platform_inputs_get+0x278>
 8014a64:	6813      	ldr	r3, [r2, #0]
 8014a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014a6a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8014a6e:	f000 8143 	beq.w	8014cf8 <ai_platform_inputs_get+0x2f0>
 8014a72:	6813      	ldr	r3, [r2, #0]
 8014a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	f000 8113 	beq.w	8014ca4 <ai_platform_inputs_get+0x29c>
 8014a7e:	f7ff fde5 	bl	801464c <_ai_platform_release_crc>
 8014a82:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	f000 80d2 	beq.w	8014c30 <ai_platform_inputs_get+0x228>
 8014a8c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8014a90:	f1ba 0f00 	cmp.w	sl, #0
 8014a94:	f000 80cc 	beq.w	8014c30 <ai_platform_inputs_get+0x228>
 8014a98:	2100      	movs	r1, #0
 8014a9a:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a9e:	460d      	mov	r5, r1
 8014aa0:	4689      	mov	r9, r1
 8014aa2:	e016      	b.n	8014ad2 <ai_platform_inputs_get+0xca>
 8014aa4:	9a01      	ldr	r2, [sp, #4]
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	f848 3002 	str.w	r3, [r8, r2]
 8014aac:	69b2      	ldr	r2, [r6, #24]
 8014aae:	f04f 0301 	mov.w	r3, #1
 8014ab2:	6856      	ldr	r6, [r2, #4]
 8014ab4:	3501      	adds	r5, #1
 8014ab6:	f109 091c 	add.w	r9, r9, #28
 8014aba:	7523      	strb	r3, [r4, #20]
 8014abc:	2300      	movs	r3, #0
 8014abe:	6962      	ldr	r2, [r4, #20]
 8014ac0:	60a7      	str	r7, [r4, #8]
 8014ac2:	f36b 221f 	bfi	r2, fp, #8, #24
 8014ac6:	6126      	str	r6, [r4, #16]
 8014ac8:	61a1      	str	r1, [r4, #24]
 8014aca:	60e3      	str	r3, [r4, #12]
 8014acc:	6162      	str	r2, [r4, #20]
 8014ace:	e9c4 0c00 	strd	r0, ip, [r4]
 8014ad2:	f8ba 3000 	ldrh.w	r3, [sl]
 8014ad6:	b2ac      	uxth	r4, r5
 8014ad8:	42ab      	cmp	r3, r5
 8014ada:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8014ade:	9301      	str	r3, [sp, #4]
 8014ae0:	f240 80b5 	bls.w	8014c4e <ai_platform_inputs_get+0x246>
 8014ae4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	f000 80b0 	beq.w	8014c4e <ai_platform_inputs_get+0x246>
 8014aee:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8014af2:	2e00      	cmp	r6, #0
 8014af4:	f000 80ab 	beq.w	8014c4e <ai_platform_inputs_get+0x246>
 8014af8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8014afc:	69b2      	ldr	r2, [r6, #24]
 8014afe:	68f1      	ldr	r1, [r6, #12]
 8014b00:	6810      	ldr	r0, [r2, #0]
 8014b02:	9100      	str	r1, [sp, #0]
 8014b04:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8014b08:	68b3      	ldr	r3, [r6, #8]
 8014b0a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8014b0e:	444c      	add	r4, r9
 8014b10:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8014b14:	f008 fbd0 	bl	801d2b8 <ai_array_to_buffer_fmt>
 8014b18:	69b2      	ldr	r2, [r6, #24]
 8014b1a:	9900      	ldr	r1, [sp, #0]
 8014b1c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8014b20:	2f00      	cmp	r7, #0
 8014b22:	d0c4      	beq.n	8014aae <ai_platform_inputs_get+0xa6>
 8014b24:	2200      	movs	r2, #0
 8014b26:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8014b2a:	6832      	ldr	r2, [r6, #0]
 8014b2c:	607a      	str	r2, [r7, #4]
 8014b2e:	b112      	cbz	r2, 8014b36 <ai_platform_inputs_get+0x12e>
 8014b30:	8852      	ldrh	r2, [r2, #2]
 8014b32:	2a00      	cmp	r2, #0
 8014b34:	d1b6      	bne.n	8014aa4 <ai_platform_inputs_get+0x9c>
 8014b36:	69b2      	ldr	r2, [r6, #24]
 8014b38:	2700      	movs	r7, #0
 8014b3a:	e7b8      	b.n	8014aae <ai_platform_inputs_get+0xa6>
 8014b3c:	f7ff fd84 	bl	8014648 <_ai_platform_acquire_crc>
 8014b40:	4b60      	ldr	r3, [pc, #384]	; (8014cc4 <ai_platform_inputs_get+0x2bc>)
 8014b42:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014b4c:	185a      	adds	r2, r3, r1
 8014b4e:	2a01      	cmp	r2, #1
 8014b50:	d92a      	bls.n	8014ba8 <ai_platform_inputs_get+0x1a0>
 8014b52:	f240 4249 	movw	r2, #1097	; 0x449
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d026      	beq.n	8014ba8 <ai_platform_inputs_get+0x1a0>
 8014b5a:	4a5b      	ldr	r2, [pc, #364]	; (8014cc8 <ai_platform_inputs_get+0x2c0>)
 8014b5c:	6813      	ldr	r3, [r2, #0]
 8014b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014b62:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014b66:	d02c      	beq.n	8014bc2 <ai_platform_inputs_get+0x1ba>
 8014b68:	6813      	ldr	r3, [r2, #0]
 8014b6a:	f240 4183 	movw	r1, #1155	; 0x483
 8014b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014b72:	428b      	cmp	r3, r1
 8014b74:	d073      	beq.n	8014c5e <ai_platform_inputs_get+0x256>
 8014b76:	6813      	ldr	r3, [r2, #0]
 8014b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014b7c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8014b80:	f000 80ac 	beq.w	8014cdc <ai_platform_inputs_get+0x2d4>
 8014b84:	6813      	ldr	r3, [r2, #0]
 8014b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d129      	bne.n	8014be2 <ai_platform_inputs_get+0x1da>
 8014b8e:	4a4f      	ldr	r2, [pc, #316]	; (8014ccc <ai_platform_inputs_get+0x2c4>)
 8014b90:	2301      	movs	r3, #1
 8014b92:	6093      	str	r3, [r2, #8]
 8014b94:	6893      	ldr	r3, [r2, #8]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d1fc      	bne.n	8014b94 <ai_platform_inputs_get+0x18c>
 8014b9a:	494d      	ldr	r1, [pc, #308]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014b9c:	4b4d      	ldr	r3, [pc, #308]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014b9e:	6011      	str	r1, [r2, #0]
 8014ba0:	6812      	ldr	r2, [r2, #0]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d01d      	beq.n	8014be2 <ai_platform_inputs_get+0x1da>
 8014ba6:	e7fe      	b.n	8014ba6 <ai_platform_inputs_get+0x19e>
 8014ba8:	4a48      	ldr	r2, [pc, #288]	; (8014ccc <ai_platform_inputs_get+0x2c4>)
 8014baa:	2301      	movs	r3, #1
 8014bac:	6093      	str	r3, [r2, #8]
 8014bae:	6893      	ldr	r3, [r2, #8]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d1fc      	bne.n	8014bae <ai_platform_inputs_get+0x1a6>
 8014bb4:	4946      	ldr	r1, [pc, #280]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014bb6:	4b47      	ldr	r3, [pc, #284]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014bb8:	6011      	str	r1, [r2, #0]
 8014bba:	6812      	ldr	r2, [r2, #0]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d010      	beq.n	8014be2 <ai_platform_inputs_get+0x1da>
 8014bc0:	e7fe      	b.n	8014bc0 <ai_platform_inputs_get+0x1b8>
 8014bc2:	4a45      	ldr	r2, [pc, #276]	; (8014cd8 <ai_platform_inputs_get+0x2d0>)
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014bca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d1fb      	bne.n	8014bca <ai_platform_inputs_get+0x1c2>
 8014bd2:	493f      	ldr	r1, [pc, #252]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014bd4:	4b3f      	ldr	r3, [pc, #252]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014bd6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8014bda:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d113      	bne.n	8014c0a <ai_platform_inputs_get+0x202>
 8014be2:	f7ff fd33 	bl	801464c <_ai_platform_release_crc>
 8014be6:	2000      	movs	r0, #0
 8014be8:	b005      	add	sp, #20
 8014bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bee:	4a37      	ldr	r2, [pc, #220]	; (8014ccc <ai_platform_inputs_get+0x2c4>)
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	6093      	str	r3, [r2, #8]
 8014bf4:	6893      	ldr	r3, [r2, #8]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d1fc      	bne.n	8014bf4 <ai_platform_inputs_get+0x1ec>
 8014bfa:	4b35      	ldr	r3, [pc, #212]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014bfc:	6013      	str	r3, [r2, #0]
 8014bfe:	4b35      	ldr	r3, [pc, #212]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014c00:	6812      	ldr	r2, [r2, #0]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	f43f af3b 	beq.w	8014a7e <ai_platform_inputs_get+0x76>
 8014c08:	e7fe      	b.n	8014c08 <ai_platform_inputs_get+0x200>
 8014c0a:	e7fe      	b.n	8014c0a <ai_platform_inputs_get+0x202>
 8014c0c:	4a32      	ldr	r2, [pc, #200]	; (8014cd8 <ai_platform_inputs_get+0x2d0>)
 8014c0e:	2301      	movs	r3, #1
 8014c10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014c14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d1fb      	bne.n	8014c14 <ai_platform_inputs_get+0x20c>
 8014c1c:	4b2c      	ldr	r3, [pc, #176]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014c1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014c22:	4b2c      	ldr	r3, [pc, #176]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014c24:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	f43f af28 	beq.w	8014a7e <ai_platform_inputs_get+0x76>
 8014c2e:	e7fe      	b.n	8014c2e <ai_platform_inputs_get+0x226>
 8014c30:	2400      	movs	r4, #0
 8014c32:	2218      	movs	r2, #24
 8014c34:	2111      	movs	r1, #17
 8014c36:	f109 0010 	add.w	r0, r9, #16
 8014c3a:	f001 fbe3 	bl	8016404 <core_set_error>
 8014c3e:	4620      	mov	r0, r4
 8014c40:	9b02      	ldr	r3, [sp, #8]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d0d0      	beq.n	8014be8 <ai_platform_inputs_get+0x1e0>
 8014c46:	801c      	strh	r4, [r3, #0]
 8014c48:	b005      	add	sp, #20
 8014c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014c52:	2c00      	cmp	r4, #0
 8014c54:	d0ec      	beq.n	8014c30 <ai_platform_inputs_get+0x228>
 8014c56:	f8da 3008 	ldr.w	r3, [sl, #8]
 8014c5a:	6858      	ldr	r0, [r3, #4]
 8014c5c:	e7f0      	b.n	8014c40 <ai_platform_inputs_get+0x238>
 8014c5e:	4a1e      	ldr	r2, [pc, #120]	; (8014cd8 <ai_platform_inputs_get+0x2d0>)
 8014c60:	2301      	movs	r3, #1
 8014c62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014c66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d1fb      	bne.n	8014c66 <ai_platform_inputs_get+0x25e>
 8014c6e:	4918      	ldr	r1, [pc, #96]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014c70:	4b18      	ldr	r3, [pc, #96]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014c72:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8014c76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d0b1      	beq.n	8014be2 <ai_platform_inputs_get+0x1da>
 8014c7e:	e7fe      	b.n	8014c7e <ai_platform_inputs_get+0x276>
 8014c80:	4a15      	ldr	r2, [pc, #84]	; (8014cd8 <ai_platform_inputs_get+0x2d0>)
 8014c82:	2301      	movs	r3, #1
 8014c84:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014c88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d1fb      	bne.n	8014c88 <ai_platform_inputs_get+0x280>
 8014c90:	4b0f      	ldr	r3, [pc, #60]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014c92:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014c96:	4b0f      	ldr	r3, [pc, #60]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014c98:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	f43f aeee 	beq.w	8014a7e <ai_platform_inputs_get+0x76>
 8014ca2:	e7fe      	b.n	8014ca2 <ai_platform_inputs_get+0x29a>
 8014ca4:	4a09      	ldr	r2, [pc, #36]	; (8014ccc <ai_platform_inputs_get+0x2c4>)
 8014ca6:	2301      	movs	r3, #1
 8014ca8:	6093      	str	r3, [r2, #8]
 8014caa:	6893      	ldr	r3, [r2, #8]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1fc      	bne.n	8014caa <ai_platform_inputs_get+0x2a2>
 8014cb0:	4b07      	ldr	r3, [pc, #28]	; (8014cd0 <ai_platform_inputs_get+0x2c8>)
 8014cb2:	6013      	str	r3, [r2, #0]
 8014cb4:	4b07      	ldr	r3, [pc, #28]	; (8014cd4 <ai_platform_inputs_get+0x2cc>)
 8014cb6:	6812      	ldr	r2, [r2, #0]
 8014cb8:	429a      	cmp	r2, r3
 8014cba:	f43f aee0 	beq.w	8014a7e <ai_platform_inputs_get+0x76>
 8014cbe:	e7fe      	b.n	8014cbe <ai_platform_inputs_get+0x2b6>
 8014cc0:	a1c00100 	.word	0xa1c00100
 8014cc4:	e0042000 	.word	0xe0042000
 8014cc8:	5c001000 	.word	0x5c001000
 8014ccc:	40023000 	.word	0x40023000
 8014cd0:	f407a5c2 	.word	0xf407a5c2
 8014cd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8014cd8:	58024000 	.word	0x58024000
 8014cdc:	4a0d      	ldr	r2, [pc, #52]	; (8014d14 <ai_platform_inputs_get+0x30c>)
 8014cde:	2301      	movs	r3, #1
 8014ce0:	6093      	str	r3, [r2, #8]
 8014ce2:	6893      	ldr	r3, [r2, #8]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d1fc      	bne.n	8014ce2 <ai_platform_inputs_get+0x2da>
 8014ce8:	490b      	ldr	r1, [pc, #44]	; (8014d18 <ai_platform_inputs_get+0x310>)
 8014cea:	4b0c      	ldr	r3, [pc, #48]	; (8014d1c <ai_platform_inputs_get+0x314>)
 8014cec:	6011      	str	r1, [r2, #0]
 8014cee:	6812      	ldr	r2, [r2, #0]
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	f43f af76 	beq.w	8014be2 <ai_platform_inputs_get+0x1da>
 8014cf6:	e7fe      	b.n	8014cf6 <ai_platform_inputs_get+0x2ee>
 8014cf8:	4a06      	ldr	r2, [pc, #24]	; (8014d14 <ai_platform_inputs_get+0x30c>)
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	6093      	str	r3, [r2, #8]
 8014cfe:	6893      	ldr	r3, [r2, #8]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d1fc      	bne.n	8014cfe <ai_platform_inputs_get+0x2f6>
 8014d04:	4b04      	ldr	r3, [pc, #16]	; (8014d18 <ai_platform_inputs_get+0x310>)
 8014d06:	6013      	str	r3, [r2, #0]
 8014d08:	4b04      	ldr	r3, [pc, #16]	; (8014d1c <ai_platform_inputs_get+0x314>)
 8014d0a:	6812      	ldr	r2, [r2, #0]
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	f43f aeb6 	beq.w	8014a7e <ai_platform_inputs_get+0x76>
 8014d12:	e7fe      	b.n	8014d12 <ai_platform_inputs_get+0x30a>
 8014d14:	40023000 	.word	0x40023000
 8014d18:	f407a5c2 	.word	0xf407a5c2
 8014d1c:	b5e8b5cd 	.word	0xb5e8b5cd

08014d20 <ai_platform_outputs_get>:
 8014d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d24:	b085      	sub	sp, #20
 8014d26:	9102      	str	r1, [sp, #8]
 8014d28:	2800      	cmp	r0, #0
 8014d2a:	f000 808f 	beq.w	8014e4c <ai_platform_outputs_get+0x12c>
 8014d2e:	4ba8      	ldr	r3, [pc, #672]	; (8014fd0 <ai_platform_outputs_get+0x2b0>)
 8014d30:	4681      	mov	r9, r0
 8014d32:	6802      	ldr	r2, [r0, #0]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	f040 8089 	bne.w	8014e4c <ai_platform_outputs_get+0x12c>
 8014d3a:	f7ff fc85 	bl	8014648 <_ai_platform_acquire_crc>
 8014d3e:	4ba5      	ldr	r3, [pc, #660]	; (8014fd4 <ai_platform_outputs_get+0x2b4>)
 8014d40:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014d4a:	189a      	adds	r2, r3, r2
 8014d4c:	2a01      	cmp	r2, #1
 8014d4e:	f240 80d6 	bls.w	8014efe <ai_platform_outputs_get+0x1de>
 8014d52:	f240 4249 	movw	r2, #1097	; 0x449
 8014d56:	4293      	cmp	r3, r2
 8014d58:	f000 80d1 	beq.w	8014efe <ai_platform_outputs_get+0x1de>
 8014d5c:	4a9e      	ldr	r2, [pc, #632]	; (8014fd8 <ai_platform_outputs_get+0x2b8>)
 8014d5e:	6813      	ldr	r3, [r2, #0]
 8014d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014d64:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014d68:	f000 80d8 	beq.w	8014f1c <ai_platform_outputs_get+0x1fc>
 8014d6c:	6813      	ldr	r3, [r2, #0]
 8014d6e:	f240 4183 	movw	r1, #1155	; 0x483
 8014d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014d76:	428b      	cmp	r3, r1
 8014d78:	f000 8109 	beq.w	8014f8e <ai_platform_outputs_get+0x26e>
 8014d7c:	6813      	ldr	r3, [r2, #0]
 8014d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014d82:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8014d86:	f000 813f 	beq.w	8015008 <ai_platform_outputs_get+0x2e8>
 8014d8a:	6813      	ldr	r3, [r2, #0]
 8014d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f000 810e 	beq.w	8014fb2 <ai_platform_outputs_get+0x292>
 8014d96:	f7ff fc59 	bl	801464c <_ai_platform_release_crc>
 8014d9a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	f240 80db 	bls.w	8014f5a <ai_platform_outputs_get+0x23a>
 8014da4:	2100      	movs	r1, #0
 8014da6:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8014daa:	f8cd 900c 	str.w	r9, [sp, #12]
 8014dae:	460d      	mov	r5, r1
 8014db0:	4689      	mov	r9, r1
 8014db2:	e016      	b.n	8014de2 <ai_platform_outputs_get+0xc2>
 8014db4:	9a01      	ldr	r2, [sp, #4]
 8014db6:	2301      	movs	r3, #1
 8014db8:	f848 3002 	str.w	r3, [r8, r2]
 8014dbc:	69b2      	ldr	r2, [r6, #24]
 8014dbe:	f04f 0301 	mov.w	r3, #1
 8014dc2:	6856      	ldr	r6, [r2, #4]
 8014dc4:	3501      	adds	r5, #1
 8014dc6:	f109 091c 	add.w	r9, r9, #28
 8014dca:	7523      	strb	r3, [r4, #20]
 8014dcc:	2300      	movs	r3, #0
 8014dce:	6962      	ldr	r2, [r4, #20]
 8014dd0:	60a7      	str	r7, [r4, #8]
 8014dd2:	f36b 221f 	bfi	r2, fp, #8, #24
 8014dd6:	6126      	str	r6, [r4, #16]
 8014dd8:	61a1      	str	r1, [r4, #24]
 8014dda:	60e3      	str	r3, [r4, #12]
 8014ddc:	6162      	str	r2, [r4, #20]
 8014dde:	e9c4 0c00 	strd	r0, ip, [r4]
 8014de2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8014de6:	b2ac      	uxth	r4, r5
 8014de8:	42ab      	cmp	r3, r5
 8014dea:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8014dee:	9301      	str	r3, [sp, #4]
 8014df0:	f240 80a6 	bls.w	8014f40 <ai_platform_outputs_get+0x220>
 8014df4:	f8da 3010 	ldr.w	r3, [sl, #16]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f000 80a1 	beq.w	8014f40 <ai_platform_outputs_get+0x220>
 8014dfe:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8014e02:	2e00      	cmp	r6, #0
 8014e04:	f000 809c 	beq.w	8014f40 <ai_platform_outputs_get+0x220>
 8014e08:	f8da 3014 	ldr.w	r3, [sl, #20]
 8014e0c:	69b2      	ldr	r2, [r6, #24]
 8014e0e:	68f1      	ldr	r1, [r6, #12]
 8014e10:	6810      	ldr	r0, [r2, #0]
 8014e12:	9100      	str	r1, [sp, #0]
 8014e14:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8014e18:	68b3      	ldr	r3, [r6, #8]
 8014e1a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8014e1e:	444c      	add	r4, r9
 8014e20:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8014e24:	f008 fa48 	bl	801d2b8 <ai_array_to_buffer_fmt>
 8014e28:	69b2      	ldr	r2, [r6, #24]
 8014e2a:	9900      	ldr	r1, [sp, #0]
 8014e2c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8014e30:	2f00      	cmp	r7, #0
 8014e32:	d0c4      	beq.n	8014dbe <ai_platform_outputs_get+0x9e>
 8014e34:	2200      	movs	r2, #0
 8014e36:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8014e3a:	6832      	ldr	r2, [r6, #0]
 8014e3c:	607a      	str	r2, [r7, #4]
 8014e3e:	b112      	cbz	r2, 8014e46 <ai_platform_outputs_get+0x126>
 8014e40:	8852      	ldrh	r2, [r2, #2]
 8014e42:	2a00      	cmp	r2, #0
 8014e44:	d1b6      	bne.n	8014db4 <ai_platform_outputs_get+0x94>
 8014e46:	69b2      	ldr	r2, [r6, #24]
 8014e48:	2700      	movs	r7, #0
 8014e4a:	e7b8      	b.n	8014dbe <ai_platform_outputs_get+0x9e>
 8014e4c:	f7ff fbfc 	bl	8014648 <_ai_platform_acquire_crc>
 8014e50:	4b60      	ldr	r3, [pc, #384]	; (8014fd4 <ai_platform_outputs_get+0x2b4>)
 8014e52:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e5c:	185a      	adds	r2, r3, r1
 8014e5e:	2a01      	cmp	r2, #1
 8014e60:	d92a      	bls.n	8014eb8 <ai_platform_outputs_get+0x198>
 8014e62:	f240 4249 	movw	r2, #1097	; 0x449
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d026      	beq.n	8014eb8 <ai_platform_outputs_get+0x198>
 8014e6a:	4a5b      	ldr	r2, [pc, #364]	; (8014fd8 <ai_platform_outputs_get+0x2b8>)
 8014e6c:	6813      	ldr	r3, [r2, #0]
 8014e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e72:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014e76:	d02c      	beq.n	8014ed2 <ai_platform_outputs_get+0x1b2>
 8014e78:	6813      	ldr	r3, [r2, #0]
 8014e7a:	f240 4183 	movw	r1, #1155	; 0x483
 8014e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e82:	428b      	cmp	r3, r1
 8014e84:	d072      	beq.n	8014f6c <ai_platform_outputs_get+0x24c>
 8014e86:	6813      	ldr	r3, [r2, #0]
 8014e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e8c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8014e90:	f000 80ac 	beq.w	8014fec <ai_platform_outputs_get+0x2cc>
 8014e94:	6813      	ldr	r3, [r2, #0]
 8014e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d129      	bne.n	8014ef2 <ai_platform_outputs_get+0x1d2>
 8014e9e:	4a4f      	ldr	r2, [pc, #316]	; (8014fdc <ai_platform_outputs_get+0x2bc>)
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	6093      	str	r3, [r2, #8]
 8014ea4:	6893      	ldr	r3, [r2, #8]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d1fc      	bne.n	8014ea4 <ai_platform_outputs_get+0x184>
 8014eaa:	494d      	ldr	r1, [pc, #308]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014eac:	4b4d      	ldr	r3, [pc, #308]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014eae:	6011      	str	r1, [r2, #0]
 8014eb0:	6812      	ldr	r2, [r2, #0]
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d01d      	beq.n	8014ef2 <ai_platform_outputs_get+0x1d2>
 8014eb6:	e7fe      	b.n	8014eb6 <ai_platform_outputs_get+0x196>
 8014eb8:	4a48      	ldr	r2, [pc, #288]	; (8014fdc <ai_platform_outputs_get+0x2bc>)
 8014eba:	2301      	movs	r3, #1
 8014ebc:	6093      	str	r3, [r2, #8]
 8014ebe:	6893      	ldr	r3, [r2, #8]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d1fc      	bne.n	8014ebe <ai_platform_outputs_get+0x19e>
 8014ec4:	4946      	ldr	r1, [pc, #280]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014ec6:	4b47      	ldr	r3, [pc, #284]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014ec8:	6011      	str	r1, [r2, #0]
 8014eca:	6812      	ldr	r2, [r2, #0]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d010      	beq.n	8014ef2 <ai_platform_outputs_get+0x1d2>
 8014ed0:	e7fe      	b.n	8014ed0 <ai_platform_outputs_get+0x1b0>
 8014ed2:	4a45      	ldr	r2, [pc, #276]	; (8014fe8 <ai_platform_outputs_get+0x2c8>)
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014eda:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d1fb      	bne.n	8014eda <ai_platform_outputs_get+0x1ba>
 8014ee2:	493f      	ldr	r1, [pc, #252]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014ee4:	4b3f      	ldr	r3, [pc, #252]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014ee6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8014eea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d113      	bne.n	8014f1a <ai_platform_outputs_get+0x1fa>
 8014ef2:	f7ff fbab 	bl	801464c <_ai_platform_release_crc>
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	b005      	add	sp, #20
 8014efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efe:	4a37      	ldr	r2, [pc, #220]	; (8014fdc <ai_platform_outputs_get+0x2bc>)
 8014f00:	2301      	movs	r3, #1
 8014f02:	6093      	str	r3, [r2, #8]
 8014f04:	6893      	ldr	r3, [r2, #8]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d1fc      	bne.n	8014f04 <ai_platform_outputs_get+0x1e4>
 8014f0a:	4b35      	ldr	r3, [pc, #212]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014f0c:	6013      	str	r3, [r2, #0]
 8014f0e:	4b35      	ldr	r3, [pc, #212]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014f10:	6812      	ldr	r2, [r2, #0]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	f43f af3f 	beq.w	8014d96 <ai_platform_outputs_get+0x76>
 8014f18:	e7fe      	b.n	8014f18 <ai_platform_outputs_get+0x1f8>
 8014f1a:	e7fe      	b.n	8014f1a <ai_platform_outputs_get+0x1fa>
 8014f1c:	4a32      	ldr	r2, [pc, #200]	; (8014fe8 <ai_platform_outputs_get+0x2c8>)
 8014f1e:	2301      	movs	r3, #1
 8014f20:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014f24:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d1fb      	bne.n	8014f24 <ai_platform_outputs_get+0x204>
 8014f2c:	4b2c      	ldr	r3, [pc, #176]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014f2e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014f32:	4b2c      	ldr	r3, [pc, #176]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014f34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	f43f af2c 	beq.w	8014d96 <ai_platform_outputs_get+0x76>
 8014f3e:	e7fe      	b.n	8014f3e <ai_platform_outputs_get+0x21e>
 8014f40:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014f44:	b14c      	cbz	r4, 8014f5a <ai_platform_outputs_get+0x23a>
 8014f46:	f8da 3014 	ldr.w	r3, [sl, #20]
 8014f4a:	6858      	ldr	r0, [r3, #4]
 8014f4c:	9b02      	ldr	r3, [sp, #8]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d0d2      	beq.n	8014ef8 <ai_platform_outputs_get+0x1d8>
 8014f52:	801c      	strh	r4, [r3, #0]
 8014f54:	b005      	add	sp, #20
 8014f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5a:	2400      	movs	r4, #0
 8014f5c:	2218      	movs	r2, #24
 8014f5e:	2111      	movs	r1, #17
 8014f60:	f109 0010 	add.w	r0, r9, #16
 8014f64:	f001 fa4e 	bl	8016404 <core_set_error>
 8014f68:	4620      	mov	r0, r4
 8014f6a:	e7ef      	b.n	8014f4c <ai_platform_outputs_get+0x22c>
 8014f6c:	4a1e      	ldr	r2, [pc, #120]	; (8014fe8 <ai_platform_outputs_get+0x2c8>)
 8014f6e:	2301      	movs	r3, #1
 8014f70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014f74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d1fb      	bne.n	8014f74 <ai_platform_outputs_get+0x254>
 8014f7c:	4918      	ldr	r1, [pc, #96]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014f7e:	4b19      	ldr	r3, [pc, #100]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014f80:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8014f84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d0b2      	beq.n	8014ef2 <ai_platform_outputs_get+0x1d2>
 8014f8c:	e7fe      	b.n	8014f8c <ai_platform_outputs_get+0x26c>
 8014f8e:	4a16      	ldr	r2, [pc, #88]	; (8014fe8 <ai_platform_outputs_get+0x2c8>)
 8014f90:	2301      	movs	r3, #1
 8014f92:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8014f96:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d1fb      	bne.n	8014f96 <ai_platform_outputs_get+0x276>
 8014f9e:	4b10      	ldr	r3, [pc, #64]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014fa0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014fa4:	4b0f      	ldr	r3, [pc, #60]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014fa6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8014faa:	429a      	cmp	r2, r3
 8014fac:	f43f aef3 	beq.w	8014d96 <ai_platform_outputs_get+0x76>
 8014fb0:	e7fe      	b.n	8014fb0 <ai_platform_outputs_get+0x290>
 8014fb2:	4a0a      	ldr	r2, [pc, #40]	; (8014fdc <ai_platform_outputs_get+0x2bc>)
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	6093      	str	r3, [r2, #8]
 8014fb8:	6893      	ldr	r3, [r2, #8]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d1fc      	bne.n	8014fb8 <ai_platform_outputs_get+0x298>
 8014fbe:	4b08      	ldr	r3, [pc, #32]	; (8014fe0 <ai_platform_outputs_get+0x2c0>)
 8014fc0:	6013      	str	r3, [r2, #0]
 8014fc2:	4b08      	ldr	r3, [pc, #32]	; (8014fe4 <ai_platform_outputs_get+0x2c4>)
 8014fc4:	6812      	ldr	r2, [r2, #0]
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	f43f aee5 	beq.w	8014d96 <ai_platform_outputs_get+0x76>
 8014fcc:	e7fe      	b.n	8014fcc <ai_platform_outputs_get+0x2ac>
 8014fce:	bf00      	nop
 8014fd0:	a1c00100 	.word	0xa1c00100
 8014fd4:	e0042000 	.word	0xe0042000
 8014fd8:	5c001000 	.word	0x5c001000
 8014fdc:	40023000 	.word	0x40023000
 8014fe0:	f407a5c2 	.word	0xf407a5c2
 8014fe4:	b5e8b5cd 	.word	0xb5e8b5cd
 8014fe8:	58024000 	.word	0x58024000
 8014fec:	4a0d      	ldr	r2, [pc, #52]	; (8015024 <ai_platform_outputs_get+0x304>)
 8014fee:	2301      	movs	r3, #1
 8014ff0:	6093      	str	r3, [r2, #8]
 8014ff2:	6893      	ldr	r3, [r2, #8]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d1fc      	bne.n	8014ff2 <ai_platform_outputs_get+0x2d2>
 8014ff8:	490b      	ldr	r1, [pc, #44]	; (8015028 <ai_platform_outputs_get+0x308>)
 8014ffa:	4b0c      	ldr	r3, [pc, #48]	; (801502c <ai_platform_outputs_get+0x30c>)
 8014ffc:	6011      	str	r1, [r2, #0]
 8014ffe:	6812      	ldr	r2, [r2, #0]
 8015000:	429a      	cmp	r2, r3
 8015002:	f43f af76 	beq.w	8014ef2 <ai_platform_outputs_get+0x1d2>
 8015006:	e7fe      	b.n	8015006 <ai_platform_outputs_get+0x2e6>
 8015008:	4a06      	ldr	r2, [pc, #24]	; (8015024 <ai_platform_outputs_get+0x304>)
 801500a:	2301      	movs	r3, #1
 801500c:	6093      	str	r3, [r2, #8]
 801500e:	6893      	ldr	r3, [r2, #8]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d1fc      	bne.n	801500e <ai_platform_outputs_get+0x2ee>
 8015014:	4b04      	ldr	r3, [pc, #16]	; (8015028 <ai_platform_outputs_get+0x308>)
 8015016:	6013      	str	r3, [r2, #0]
 8015018:	4b04      	ldr	r3, [pc, #16]	; (801502c <ai_platform_outputs_get+0x30c>)
 801501a:	6812      	ldr	r2, [r2, #0]
 801501c:	429a      	cmp	r2, r3
 801501e:	f43f aeba 	beq.w	8014d96 <ai_platform_outputs_get+0x76>
 8015022:	e7fe      	b.n	8015022 <ai_platform_outputs_get+0x302>
 8015024:	40023000 	.word	0x40023000
 8015028:	f407a5c2 	.word	0xf407a5c2
 801502c:	b5e8b5cd 	.word	0xb5e8b5cd

08015030 <ai_platform_network_create>:
 8015030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015034:	b083      	sub	sp, #12
 8015036:	4604      	mov	r4, r0
 8015038:	4615      	mov	r5, r2
 801503a:	461e      	mov	r6, r3
 801503c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8015040:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8015044:	f7ff fb00 	bl	8014648 <_ai_platform_acquire_crc>
 8015048:	2800      	cmp	r0, #0
 801504a:	f000 80bd 	beq.w	80151c8 <ai_platform_network_create+0x198>
 801504e:	4ba5      	ldr	r3, [pc, #660]	; (80152e4 <ai_platform_network_create+0x2b4>)
 8015050:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8015054:	4601      	mov	r1, r0
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801505c:	eb03 020c 	add.w	r2, r3, ip
 8015060:	2a01      	cmp	r2, #1
 8015062:	f240 80a8 	bls.w	80151b6 <ai_platform_network_create+0x186>
 8015066:	f240 4249 	movw	r2, #1097	; 0x449
 801506a:	4293      	cmp	r3, r2
 801506c:	f000 80a3 	beq.w	80151b6 <ai_platform_network_create+0x186>
 8015070:	4a9d      	ldr	r2, [pc, #628]	; (80152e8 <ai_platform_network_create+0x2b8>)
 8015072:	6813      	ldr	r3, [r2, #0]
 8015074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015078:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801507c:	f000 80b9 	beq.w	80151f2 <ai_platform_network_create+0x1c2>
 8015080:	6813      	ldr	r3, [r2, #0]
 8015082:	f240 4c83 	movw	ip, #1155	; 0x483
 8015086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801508a:	4563      	cmp	r3, ip
 801508c:	f000 80a1 	beq.w	80151d2 <ai_platform_network_create+0x1a2>
 8015090:	6813      	ldr	r3, [r2, #0]
 8015092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015096:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801509a:	f000 8153 	beq.w	8015344 <ai_platform_network_create+0x314>
 801509e:	6813      	ldr	r3, [r2, #0]
 80150a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	f040 808d 	bne.w	80151c4 <ai_platform_network_create+0x194>
 80150aa:	4a90      	ldr	r2, [pc, #576]	; (80152ec <ai_platform_network_create+0x2bc>)
 80150ac:	2318      	movs	r3, #24
 80150ae:	6093      	str	r3, [r2, #8]
 80150b0:	6893      	ldr	r3, [r2, #8]
 80150b2:	2b18      	cmp	r3, #24
 80150b4:	f040 8086 	bne.w	80151c4 <ai_platform_network_create+0x194>
 80150b8:	2301      	movs	r3, #1
 80150ba:	6093      	str	r3, [r2, #8]
 80150bc:	6893      	ldr	r3, [r2, #8]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d1fc      	bne.n	80150bc <ai_platform_network_create+0x8c>
 80150c2:	4608      	mov	r0, r1
 80150c4:	f7ff fac2 	bl	801464c <_ai_platform_release_crc>
 80150c8:	f7ff fabe 	bl	8014648 <_ai_platform_acquire_crc>
 80150cc:	4b85      	ldr	r3, [pc, #532]	; (80152e4 <ai_platform_network_create+0x2b4>)
 80150ce:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80150d8:	189a      	adds	r2, r3, r2
 80150da:	2a01      	cmp	r2, #1
 80150dc:	f240 809f 	bls.w	801521e <ai_platform_network_create+0x1ee>
 80150e0:	f240 4249 	movw	r2, #1097	; 0x449
 80150e4:	4293      	cmp	r3, r2
 80150e6:	f000 809a 	beq.w	801521e <ai_platform_network_create+0x1ee>
 80150ea:	4a7f      	ldr	r2, [pc, #508]	; (80152e8 <ai_platform_network_create+0x2b8>)
 80150ec:	6813      	ldr	r3, [r2, #0]
 80150ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80150f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80150f6:	f000 80a0 	beq.w	801523a <ai_platform_network_create+0x20a>
 80150fa:	6813      	ldr	r3, [r2, #0]
 80150fc:	f240 4183 	movw	r1, #1155	; 0x483
 8015100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015104:	428b      	cmp	r3, r1
 8015106:	f000 80bf 	beq.w	8015288 <ai_platform_network_create+0x258>
 801510a:	6813      	ldr	r3, [r2, #0]
 801510c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015110:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015114:	f000 8123 	beq.w	801535e <ai_platform_network_create+0x32e>
 8015118:	6813      	ldr	r3, [r2, #0]
 801511a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801511e:	2b00      	cmp	r3, #0
 8015120:	f000 80c4 	beq.w	80152ac <ai_platform_network_create+0x27c>
 8015124:	f7ff fa92 	bl	801464c <_ai_platform_release_crc>
 8015128:	2c00      	cmp	r4, #0
 801512a:	f000 80aa 	beq.w	8015282 <ai_platform_network_create+0x252>
 801512e:	4b70      	ldr	r3, [pc, #448]	; (80152f0 <ai_platform_network_create+0x2c0>)
 8015130:	602b      	str	r3, [r5, #0]
 8015132:	6025      	str	r5, [r4, #0]
 8015134:	f001 f95e 	bl	80163f4 <core_init>
 8015138:	2800      	cmp	r0, #0
 801513a:	f000 8090 	beq.w	801525e <ai_platform_network_create+0x22e>
 801513e:	f7ff fa83 	bl	8014648 <_ai_platform_acquire_crc>
 8015142:	4b68      	ldr	r3, [pc, #416]	; (80152e4 <ai_platform_network_create+0x2b4>)
 8015144:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801514e:	185a      	adds	r2, r3, r1
 8015150:	2a01      	cmp	r2, #1
 8015152:	f240 80b9 	bls.w	80152c8 <ai_platform_network_create+0x298>
 8015156:	f240 4249 	movw	r2, #1097	; 0x449
 801515a:	4293      	cmp	r3, r2
 801515c:	f000 80b4 	beq.w	80152c8 <ai_platform_network_create+0x298>
 8015160:	4a61      	ldr	r2, [pc, #388]	; (80152e8 <ai_platform_network_create+0x2b8>)
 8015162:	6813      	ldr	r3, [r2, #0]
 8015164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015168:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801516c:	f000 80c8 	beq.w	8015300 <ai_platform_network_create+0x2d0>
 8015170:	6813      	ldr	r3, [r2, #0]
 8015172:	f240 4183 	movw	r1, #1155	; 0x483
 8015176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801517a:	428b      	cmp	r3, r1
 801517c:	f000 8107 	beq.w	801538e <ai_platform_network_create+0x35e>
 8015180:	6813      	ldr	r3, [r2, #0]
 8015182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015186:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801518a:	f000 8111 	beq.w	80153b0 <ai_platform_network_create+0x380>
 801518e:	6813      	ldr	r3, [r2, #0]
 8015190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015194:	2b00      	cmp	r3, #0
 8015196:	f040 80c3 	bne.w	8015320 <ai_platform_network_create+0x2f0>
 801519a:	4b54      	ldr	r3, [pc, #336]	; (80152ec <ai_platform_network_create+0x2bc>)
 801519c:	2201      	movs	r2, #1
 801519e:	609a      	str	r2, [r3, #8]
 80151a0:	689a      	ldr	r2, [r3, #8]
 80151a2:	2a00      	cmp	r2, #0
 80151a4:	d1fc      	bne.n	80151a0 <ai_platform_network_create+0x170>
 80151a6:	4a53      	ldr	r2, [pc, #332]	; (80152f4 <ai_platform_network_create+0x2c4>)
 80151a8:	601a      	str	r2, [r3, #0]
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	4b52      	ldr	r3, [pc, #328]	; (80152f8 <ai_platform_network_create+0x2c8>)
 80151ae:	429a      	cmp	r2, r3
 80151b0:	f000 80b6 	beq.w	8015320 <ai_platform_network_create+0x2f0>
 80151b4:	e7fe      	b.n	80151b4 <ai_platform_network_create+0x184>
 80151b6:	4b4d      	ldr	r3, [pc, #308]	; (80152ec <ai_platform_network_create+0x2bc>)
 80151b8:	2218      	movs	r2, #24
 80151ba:	609a      	str	r2, [r3, #8]
 80151bc:	689a      	ldr	r2, [r3, #8]
 80151be:	2a18      	cmp	r2, #24
 80151c0:	d027      	beq.n	8015212 <ai_platform_network_create+0x1e2>
 80151c2:	4608      	mov	r0, r1
 80151c4:	f7ff fa42 	bl	801464c <_ai_platform_release_crc>
 80151c8:	f244 1033 	movw	r0, #16691	; 0x4133
 80151cc:	b003      	add	sp, #12
 80151ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151d2:	4a4a      	ldr	r2, [pc, #296]	; (80152fc <ai_platform_network_create+0x2cc>)
 80151d4:	2318      	movs	r3, #24
 80151d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80151da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80151de:	2b18      	cmp	r3, #24
 80151e0:	d1f0      	bne.n	80151c4 <ai_platform_network_create+0x194>
 80151e2:	2301      	movs	r3, #1
 80151e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80151e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d1fb      	bne.n	80151e8 <ai_platform_network_create+0x1b8>
 80151f0:	e767      	b.n	80150c2 <ai_platform_network_create+0x92>
 80151f2:	4a42      	ldr	r2, [pc, #264]	; (80152fc <ai_platform_network_create+0x2cc>)
 80151f4:	2318      	movs	r3, #24
 80151f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80151fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80151fe:	2b18      	cmp	r3, #24
 8015200:	d1e0      	bne.n	80151c4 <ai_platform_network_create+0x194>
 8015202:	2301      	movs	r3, #1
 8015204:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015208:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801520c:	2b00      	cmp	r3, #0
 801520e:	d1fb      	bne.n	8015208 <ai_platform_network_create+0x1d8>
 8015210:	e757      	b.n	80150c2 <ai_platform_network_create+0x92>
 8015212:	2201      	movs	r2, #1
 8015214:	609a      	str	r2, [r3, #8]
 8015216:	689a      	ldr	r2, [r3, #8]
 8015218:	2a00      	cmp	r2, #0
 801521a:	d1fc      	bne.n	8015216 <ai_platform_network_create+0x1e6>
 801521c:	e751      	b.n	80150c2 <ai_platform_network_create+0x92>
 801521e:	4a33      	ldr	r2, [pc, #204]	; (80152ec <ai_platform_network_create+0x2bc>)
 8015220:	2301      	movs	r3, #1
 8015222:	6093      	str	r3, [r2, #8]
 8015224:	6891      	ldr	r1, [r2, #8]
 8015226:	2900      	cmp	r1, #0
 8015228:	d1fc      	bne.n	8015224 <ai_platform_network_create+0x1f4>
 801522a:	4b32      	ldr	r3, [pc, #200]	; (80152f4 <ai_platform_network_create+0x2c4>)
 801522c:	6013      	str	r3, [r2, #0]
 801522e:	4b32      	ldr	r3, [pc, #200]	; (80152f8 <ai_platform_network_create+0x2c8>)
 8015230:	6812      	ldr	r2, [r2, #0]
 8015232:	429a      	cmp	r2, r3
 8015234:	f43f af76 	beq.w	8015124 <ai_platform_network_create+0xf4>
 8015238:	e7fe      	b.n	8015238 <ai_platform_network_create+0x208>
 801523a:	4a30      	ldr	r2, [pc, #192]	; (80152fc <ai_platform_network_create+0x2cc>)
 801523c:	2301      	movs	r3, #1
 801523e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015242:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015246:	2b00      	cmp	r3, #0
 8015248:	d1fb      	bne.n	8015242 <ai_platform_network_create+0x212>
 801524a:	4b2a      	ldr	r3, [pc, #168]	; (80152f4 <ai_platform_network_create+0x2c4>)
 801524c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015250:	4b29      	ldr	r3, [pc, #164]	; (80152f8 <ai_platform_network_create+0x2c8>)
 8015252:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015256:	429a      	cmp	r2, r3
 8015258:	f43f af64 	beq.w	8015124 <ai_platform_network_create+0xf4>
 801525c:	e7fe      	b.n	801525c <ai_platform_network_create+0x22c>
 801525e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8015262:	2300      	movs	r3, #0
 8015264:	6023      	str	r3, [r4, #0]
 8015266:	2410      	movs	r4, #16
 8015268:	4642      	mov	r2, r8
 801526a:	4639      	mov	r1, r7
 801526c:	4630      	mov	r0, r6
 801526e:	f008 f807 	bl	801d280 <ai_version_get>
 8015272:	4603      	mov	r3, r0
 8015274:	2000      	movs	r0, #0
 8015276:	64ab      	str	r3, [r5, #72]	; 0x48
 8015278:	f369 0007 	bfi	r0, r9, #0, #8
 801527c:	f364 201f 	bfi	r0, r4, #8, #24
 8015280:	e7a4      	b.n	80151cc <ai_platform_network_create+0x19c>
 8015282:	f241 0010 	movw	r0, #4112	; 0x1010
 8015286:	e7a1      	b.n	80151cc <ai_platform_network_create+0x19c>
 8015288:	4a1c      	ldr	r2, [pc, #112]	; (80152fc <ai_platform_network_create+0x2cc>)
 801528a:	2301      	movs	r3, #1
 801528c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015290:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015294:	2b00      	cmp	r3, #0
 8015296:	d1fb      	bne.n	8015290 <ai_platform_network_create+0x260>
 8015298:	4b16      	ldr	r3, [pc, #88]	; (80152f4 <ai_platform_network_create+0x2c4>)
 801529a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801529e:	4b16      	ldr	r3, [pc, #88]	; (80152f8 <ai_platform_network_create+0x2c8>)
 80152a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80152a4:	429a      	cmp	r2, r3
 80152a6:	f43f af3d 	beq.w	8015124 <ai_platform_network_create+0xf4>
 80152aa:	e7fe      	b.n	80152aa <ai_platform_network_create+0x27a>
 80152ac:	4a0f      	ldr	r2, [pc, #60]	; (80152ec <ai_platform_network_create+0x2bc>)
 80152ae:	2301      	movs	r3, #1
 80152b0:	6093      	str	r3, [r2, #8]
 80152b2:	6893      	ldr	r3, [r2, #8]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d1fc      	bne.n	80152b2 <ai_platform_network_create+0x282>
 80152b8:	4b0e      	ldr	r3, [pc, #56]	; (80152f4 <ai_platform_network_create+0x2c4>)
 80152ba:	6013      	str	r3, [r2, #0]
 80152bc:	4b0e      	ldr	r3, [pc, #56]	; (80152f8 <ai_platform_network_create+0x2c8>)
 80152be:	6812      	ldr	r2, [r2, #0]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	f43f af2f 	beq.w	8015124 <ai_platform_network_create+0xf4>
 80152c6:	e7fe      	b.n	80152c6 <ai_platform_network_create+0x296>
 80152c8:	4a08      	ldr	r2, [pc, #32]	; (80152ec <ai_platform_network_create+0x2bc>)
 80152ca:	2301      	movs	r3, #1
 80152cc:	6093      	str	r3, [r2, #8]
 80152ce:	6893      	ldr	r3, [r2, #8]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d1fc      	bne.n	80152ce <ai_platform_network_create+0x29e>
 80152d4:	4b07      	ldr	r3, [pc, #28]	; (80152f4 <ai_platform_network_create+0x2c4>)
 80152d6:	6013      	str	r3, [r2, #0]
 80152d8:	4b07      	ldr	r3, [pc, #28]	; (80152f8 <ai_platform_network_create+0x2c8>)
 80152da:	6812      	ldr	r2, [r2, #0]
 80152dc:	429a      	cmp	r2, r3
 80152de:	d01f      	beq.n	8015320 <ai_platform_network_create+0x2f0>
 80152e0:	e7fe      	b.n	80152e0 <ai_platform_network_create+0x2b0>
 80152e2:	bf00      	nop
 80152e4:	e0042000 	.word	0xe0042000
 80152e8:	5c001000 	.word	0x5c001000
 80152ec:	40023000 	.word	0x40023000
 80152f0:	a1c00100 	.word	0xa1c00100
 80152f4:	f407a5c2 	.word	0xf407a5c2
 80152f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80152fc:	58024000 	.word	0x58024000
 8015300:	4a33      	ldr	r2, [pc, #204]	; (80153d0 <ai_platform_network_create+0x3a0>)
 8015302:	2301      	movs	r3, #1
 8015304:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015308:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801530c:	2b00      	cmp	r3, #0
 801530e:	d1fb      	bne.n	8015308 <ai_platform_network_create+0x2d8>
 8015310:	4b30      	ldr	r3, [pc, #192]	; (80153d4 <ai_platform_network_create+0x3a4>)
 8015312:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015316:	4b30      	ldr	r3, [pc, #192]	; (80153d8 <ai_platform_network_create+0x3a8>)
 8015318:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801531c:	429a      	cmp	r2, r3
 801531e:	d12c      	bne.n	801537a <ai_platform_network_create+0x34a>
 8015320:	f7ff f994 	bl	801464c <_ai_platform_release_crc>
 8015324:	2200      	movs	r2, #0
 8015326:	4639      	mov	r1, r7
 8015328:	4630      	mov	r0, r6
 801532a:	f007 ffa9 	bl	801d280 <ai_version_get>
 801532e:	4681      	mov	r9, r0
 8015330:	2200      	movs	r2, #0
 8015332:	2105      	movs	r1, #5
 8015334:	2001      	movs	r0, #1
 8015336:	f007 ffa3 	bl	801d280 <ai_version_get>
 801533a:	4581      	cmp	r9, r0
 801533c:	d01e      	beq.n	801537c <ai_platform_network_create+0x34c>
 801533e:	f04f 0901 	mov.w	r9, #1
 8015342:	e78e      	b.n	8015262 <ai_platform_network_create+0x232>
 8015344:	4b25      	ldr	r3, [pc, #148]	; (80153dc <ai_platform_network_create+0x3ac>)
 8015346:	2218      	movs	r2, #24
 8015348:	609a      	str	r2, [r3, #8]
 801534a:	689a      	ldr	r2, [r3, #8]
 801534c:	2a18      	cmp	r2, #24
 801534e:	f47f af39 	bne.w	80151c4 <ai_platform_network_create+0x194>
 8015352:	2201      	movs	r2, #1
 8015354:	609a      	str	r2, [r3, #8]
 8015356:	689a      	ldr	r2, [r3, #8]
 8015358:	2a00      	cmp	r2, #0
 801535a:	d1fc      	bne.n	8015356 <ai_platform_network_create+0x326>
 801535c:	e6b1      	b.n	80150c2 <ai_platform_network_create+0x92>
 801535e:	4a1f      	ldr	r2, [pc, #124]	; (80153dc <ai_platform_network_create+0x3ac>)
 8015360:	2301      	movs	r3, #1
 8015362:	6093      	str	r3, [r2, #8]
 8015364:	6893      	ldr	r3, [r2, #8]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d1fc      	bne.n	8015364 <ai_platform_network_create+0x334>
 801536a:	4b1a      	ldr	r3, [pc, #104]	; (80153d4 <ai_platform_network_create+0x3a4>)
 801536c:	6013      	str	r3, [r2, #0]
 801536e:	4b1a      	ldr	r3, [pc, #104]	; (80153d8 <ai_platform_network_create+0x3a8>)
 8015370:	6812      	ldr	r2, [r2, #0]
 8015372:	429a      	cmp	r2, r3
 8015374:	f43f aed6 	beq.w	8015124 <ai_platform_network_create+0xf4>
 8015378:	e7fe      	b.n	8015378 <ai_platform_network_create+0x348>
 801537a:	e7fe      	b.n	801537a <ai_platform_network_create+0x34a>
 801537c:	4b18      	ldr	r3, [pc, #96]	; (80153e0 <ai_platform_network_create+0x3b0>)
 801537e:	a801      	add	r0, sp, #4
 8015380:	9301      	str	r3, [sp, #4]
 8015382:	f002 fcff 	bl	8017d84 <ai_check_custom_types>
 8015386:	b300      	cbz	r0, 80153ca <ai_platform_network_create+0x39a>
 8015388:	2400      	movs	r4, #0
 801538a:	46a1      	mov	r9, r4
 801538c:	e76c      	b.n	8015268 <ai_platform_network_create+0x238>
 801538e:	4b10      	ldr	r3, [pc, #64]	; (80153d0 <ai_platform_network_create+0x3a0>)
 8015390:	2201      	movs	r2, #1
 8015392:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8015396:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801539a:	2a00      	cmp	r2, #0
 801539c:	d1fb      	bne.n	8015396 <ai_platform_network_create+0x366>
 801539e:	4a0d      	ldr	r2, [pc, #52]	; (80153d4 <ai_platform_network_create+0x3a4>)
 80153a0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80153a4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80153a8:	4b0b      	ldr	r3, [pc, #44]	; (80153d8 <ai_platform_network_create+0x3a8>)
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d0b8      	beq.n	8015320 <ai_platform_network_create+0x2f0>
 80153ae:	e7fe      	b.n	80153ae <ai_platform_network_create+0x37e>
 80153b0:	4b0a      	ldr	r3, [pc, #40]	; (80153dc <ai_platform_network_create+0x3ac>)
 80153b2:	2201      	movs	r2, #1
 80153b4:	609a      	str	r2, [r3, #8]
 80153b6:	689a      	ldr	r2, [r3, #8]
 80153b8:	2a00      	cmp	r2, #0
 80153ba:	d1fc      	bne.n	80153b6 <ai_platform_network_create+0x386>
 80153bc:	4a05      	ldr	r2, [pc, #20]	; (80153d4 <ai_platform_network_create+0x3a4>)
 80153be:	601a      	str	r2, [r3, #0]
 80153c0:	681a      	ldr	r2, [r3, #0]
 80153c2:	4b05      	ldr	r3, [pc, #20]	; (80153d8 <ai_platform_network_create+0x3a8>)
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d0ab      	beq.n	8015320 <ai_platform_network_create+0x2f0>
 80153c8:	e7fe      	b.n	80153c8 <ai_platform_network_create+0x398>
 80153ca:	f04f 0902 	mov.w	r9, #2
 80153ce:	e748      	b.n	8015262 <ai_platform_network_create+0x232>
 80153d0:	58024000 	.word	0x58024000
 80153d4:	f407a5c2 	.word	0xf407a5c2
 80153d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80153dc:	40023000 	.word	0x40023000
 80153e0:	84048403 	.word	0x84048403

080153e4 <ai_platform_network_init>:
 80153e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153e8:	2800      	cmp	r0, #0
 80153ea:	d052      	beq.n	8015492 <ai_platform_network_init+0xae>
 80153ec:	4bab      	ldr	r3, [pc, #684]	; (801569c <ai_platform_network_init+0x2b8>)
 80153ee:	4604      	mov	r4, r0
 80153f0:	6802      	ldr	r2, [r0, #0]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d14d      	bne.n	8015492 <ai_platform_network_init+0xae>
 80153f6:	460d      	mov	r5, r1
 80153f8:	f7ff f926 	bl	8014648 <_ai_platform_acquire_crc>
 80153fc:	4ba8      	ldr	r3, [pc, #672]	; (80156a0 <ai_platform_network_init+0x2bc>)
 80153fe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015408:	189a      	adds	r2, r3, r2
 801540a:	2a01      	cmp	r2, #1
 801540c:	f240 809b 	bls.w	8015546 <ai_platform_network_init+0x162>
 8015410:	f240 4249 	movw	r2, #1097	; 0x449
 8015414:	4293      	cmp	r3, r2
 8015416:	f000 8096 	beq.w	8015546 <ai_platform_network_init+0x162>
 801541a:	4aa2      	ldr	r2, [pc, #648]	; (80156a4 <ai_platform_network_init+0x2c0>)
 801541c:	6813      	ldr	r3, [r2, #0]
 801541e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015422:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015426:	f000 809d 	beq.w	8015564 <ai_platform_network_init+0x180>
 801542a:	6813      	ldr	r3, [r2, #0]
 801542c:	f240 4183 	movw	r1, #1155	; 0x483
 8015430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015434:	428b      	cmp	r3, r1
 8015436:	f000 80e4 	beq.w	8015602 <ai_platform_network_init+0x21e>
 801543a:	6813      	ldr	r3, [r2, #0]
 801543c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015440:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015444:	f000 811b 	beq.w	801567e <ai_platform_network_init+0x29a>
 8015448:	6813      	ldr	r3, [r2, #0]
 801544a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801544e:	2b00      	cmp	r3, #0
 8015450:	f000 80f9 	beq.w	8015646 <ai_platform_network_init+0x262>
 8015454:	f7ff f8fa 	bl	801464c <_ai_platform_release_crc>
 8015458:	2d00      	cmp	r5, #0
 801545a:	f000 8147 	beq.w	80156ec <ai_platform_network_init+0x308>
 801545e:	4b92      	ldr	r3, [pc, #584]	; (80156a8 <ai_platform_network_init+0x2c4>)
 8015460:	682a      	ldr	r2, [r5, #0]
 8015462:	429a      	cmp	r2, r3
 8015464:	f040 8090 	bne.w	8015588 <ai_platform_network_init+0x1a4>
 8015468:	692b      	ldr	r3, [r5, #16]
 801546a:	89ae      	ldrh	r6, [r5, #12]
 801546c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8015470:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8015474:	62a3      	str	r3, [r4, #40]	; 0x28
 8015476:	e9c4 1207 	strd	r1, r2, [r4, #28]
 801547a:	2303      	movs	r3, #3
 801547c:	84a6      	strh	r6, [r4, #36]	; 0x24
 801547e:	4626      	mov	r6, r4
 8015480:	4620      	mov	r0, r4
 8015482:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8015486:	60e3      	str	r3, [r4, #12]
 8015488:	f002 fca4 	bl	8017dd4 <ai_layers_init_all>
 801548c:	4630      	mov	r0, r6
 801548e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015492:	f7ff f8d9 	bl	8014648 <_ai_platform_acquire_crc>
 8015496:	4b82      	ldr	r3, [pc, #520]	; (80156a0 <ai_platform_network_init+0x2bc>)
 8015498:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80154a2:	185a      	adds	r2, r3, r1
 80154a4:	2a01      	cmp	r2, #1
 80154a6:	d92b      	bls.n	8015500 <ai_platform_network_init+0x11c>
 80154a8:	f240 4249 	movw	r2, #1097	; 0x449
 80154ac:	4293      	cmp	r3, r2
 80154ae:	d027      	beq.n	8015500 <ai_platform_network_init+0x11c>
 80154b0:	4a7c      	ldr	r2, [pc, #496]	; (80156a4 <ai_platform_network_init+0x2c0>)
 80154b2:	6813      	ldr	r3, [r2, #0]
 80154b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80154b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80154bc:	d02d      	beq.n	801551a <ai_platform_network_init+0x136>
 80154be:	6813      	ldr	r3, [r2, #0]
 80154c0:	f240 4183 	movw	r1, #1155	; 0x483
 80154c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80154c8:	428b      	cmp	r3, r1
 80154ca:	f000 8089 	beq.w	80155e0 <ai_platform_network_init+0x1fc>
 80154ce:	6813      	ldr	r3, [r2, #0]
 80154d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80154d4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80154d8:	f000 80c3 	beq.w	8015662 <ai_platform_network_init+0x27e>
 80154dc:	6813      	ldr	r3, [r2, #0]
 80154de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d129      	bne.n	801553a <ai_platform_network_init+0x156>
 80154e6:	4a71      	ldr	r2, [pc, #452]	; (80156ac <ai_platform_network_init+0x2c8>)
 80154e8:	2301      	movs	r3, #1
 80154ea:	6093      	str	r3, [r2, #8]
 80154ec:	6893      	ldr	r3, [r2, #8]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d1fc      	bne.n	80154ec <ai_platform_network_init+0x108>
 80154f2:	496f      	ldr	r1, [pc, #444]	; (80156b0 <ai_platform_network_init+0x2cc>)
 80154f4:	4b6f      	ldr	r3, [pc, #444]	; (80156b4 <ai_platform_network_init+0x2d0>)
 80154f6:	6011      	str	r1, [r2, #0]
 80154f8:	6812      	ldr	r2, [r2, #0]
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d01d      	beq.n	801553a <ai_platform_network_init+0x156>
 80154fe:	e7fe      	b.n	80154fe <ai_platform_network_init+0x11a>
 8015500:	4a6a      	ldr	r2, [pc, #424]	; (80156ac <ai_platform_network_init+0x2c8>)
 8015502:	2301      	movs	r3, #1
 8015504:	6093      	str	r3, [r2, #8]
 8015506:	6893      	ldr	r3, [r2, #8]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1fc      	bne.n	8015506 <ai_platform_network_init+0x122>
 801550c:	4968      	ldr	r1, [pc, #416]	; (80156b0 <ai_platform_network_init+0x2cc>)
 801550e:	4b69      	ldr	r3, [pc, #420]	; (80156b4 <ai_platform_network_init+0x2d0>)
 8015510:	6011      	str	r1, [r2, #0]
 8015512:	6812      	ldr	r2, [r2, #0]
 8015514:	429a      	cmp	r2, r3
 8015516:	d010      	beq.n	801553a <ai_platform_network_init+0x156>
 8015518:	e7fe      	b.n	8015518 <ai_platform_network_init+0x134>
 801551a:	4a67      	ldr	r2, [pc, #412]	; (80156b8 <ai_platform_network_init+0x2d4>)
 801551c:	2301      	movs	r3, #1
 801551e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015522:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015526:	2b00      	cmp	r3, #0
 8015528:	d1fb      	bne.n	8015522 <ai_platform_network_init+0x13e>
 801552a:	4961      	ldr	r1, [pc, #388]	; (80156b0 <ai_platform_network_init+0x2cc>)
 801552c:	4b61      	ldr	r3, [pc, #388]	; (80156b4 <ai_platform_network_init+0x2d0>)
 801552e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8015532:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015536:	429a      	cmp	r2, r3
 8015538:	d113      	bne.n	8015562 <ai_platform_network_init+0x17e>
 801553a:	2600      	movs	r6, #0
 801553c:	f7ff f886 	bl	801464c <_ai_platform_release_crc>
 8015540:	4630      	mov	r0, r6
 8015542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015546:	4a59      	ldr	r2, [pc, #356]	; (80156ac <ai_platform_network_init+0x2c8>)
 8015548:	2301      	movs	r3, #1
 801554a:	6093      	str	r3, [r2, #8]
 801554c:	6893      	ldr	r3, [r2, #8]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d1fc      	bne.n	801554c <ai_platform_network_init+0x168>
 8015552:	4b57      	ldr	r3, [pc, #348]	; (80156b0 <ai_platform_network_init+0x2cc>)
 8015554:	6013      	str	r3, [r2, #0]
 8015556:	4b57      	ldr	r3, [pc, #348]	; (80156b4 <ai_platform_network_init+0x2d0>)
 8015558:	6812      	ldr	r2, [r2, #0]
 801555a:	429a      	cmp	r2, r3
 801555c:	f43f af7a 	beq.w	8015454 <ai_platform_network_init+0x70>
 8015560:	e7fe      	b.n	8015560 <ai_platform_network_init+0x17c>
 8015562:	e7fe      	b.n	8015562 <ai_platform_network_init+0x17e>
 8015564:	4a54      	ldr	r2, [pc, #336]	; (80156b8 <ai_platform_network_init+0x2d4>)
 8015566:	2301      	movs	r3, #1
 8015568:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801556c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015570:	2b00      	cmp	r3, #0
 8015572:	d1fb      	bne.n	801556c <ai_platform_network_init+0x188>
 8015574:	4b4e      	ldr	r3, [pc, #312]	; (80156b0 <ai_platform_network_init+0x2cc>)
 8015576:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801557a:	4b4e      	ldr	r3, [pc, #312]	; (80156b4 <ai_platform_network_init+0x2d0>)
 801557c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015580:	429a      	cmp	r2, r3
 8015582:	f43f af67 	beq.w	8015454 <ai_platform_network_init+0x70>
 8015586:	e7fe      	b.n	8015586 <ai_platform_network_init+0x1a2>
 8015588:	2101      	movs	r1, #1
 801558a:	4628      	mov	r0, r5
 801558c:	f105 081c 	add.w	r8, r5, #28
 8015590:	686e      	ldr	r6, [r5, #4]
 8015592:	f7ff f80b 	bl	80145ac <ai_buffer_get_size>
 8015596:	4607      	mov	r7, r0
 8015598:	2101      	movs	r1, #1
 801559a:	4640      	mov	r0, r8
 801559c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80155a0:	f7ff f804 	bl	80145ac <ai_buffer_get_size>
 80155a4:	2f00      	cmp	r7, #0
 80155a6:	d13e      	bne.n	8015626 <ai_platform_network_init+0x242>
 80155a8:	2800      	cmp	r0, #0
 80155aa:	f000 808e 	beq.w	80156ca <ai_platform_network_init+0x2e6>
 80155ae:	f1b9 0f00 	cmp.w	r9, #0
 80155b2:	f000 8094 	beq.w	80156de <ai_platform_network_init+0x2fa>
 80155b6:	f04f 0c01 	mov.w	ip, #1
 80155ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80155bc:	2600      	movs	r6, #0
 80155be:	83e7      	strh	r7, [r4, #30]
 80155c0:	4563      	cmp	r3, ip
 80155c2:	83a6      	strh	r6, [r4, #28]
 80155c4:	d37a      	bcc.n	80156bc <ai_platform_network_init+0x2d8>
 80155c6:	f1bc 0f00 	cmp.w	ip, #0
 80155ca:	f000 809c 	beq.w	8015706 <ai_platform_network_init+0x322>
 80155ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80155d0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80155d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80155d6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80155da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80155de:	e74c      	b.n	801547a <ai_platform_network_init+0x96>
 80155e0:	4a35      	ldr	r2, [pc, #212]	; (80156b8 <ai_platform_network_init+0x2d4>)
 80155e2:	2301      	movs	r3, #1
 80155e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80155e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d1fb      	bne.n	80155e8 <ai_platform_network_init+0x204>
 80155f0:	492f      	ldr	r1, [pc, #188]	; (80156b0 <ai_platform_network_init+0x2cc>)
 80155f2:	4b30      	ldr	r3, [pc, #192]	; (80156b4 <ai_platform_network_init+0x2d0>)
 80155f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80155f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d09c      	beq.n	801553a <ai_platform_network_init+0x156>
 8015600:	e7fe      	b.n	8015600 <ai_platform_network_init+0x21c>
 8015602:	4a2d      	ldr	r2, [pc, #180]	; (80156b8 <ai_platform_network_init+0x2d4>)
 8015604:	2301      	movs	r3, #1
 8015606:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801560a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801560e:	2b00      	cmp	r3, #0
 8015610:	d1fb      	bne.n	801560a <ai_platform_network_init+0x226>
 8015612:	4b27      	ldr	r3, [pc, #156]	; (80156b0 <ai_platform_network_init+0x2cc>)
 8015614:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015618:	4b26      	ldr	r3, [pc, #152]	; (80156b4 <ai_platform_network_init+0x2d0>)
 801561a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801561e:	429a      	cmp	r2, r3
 8015620:	f43f af18 	beq.w	8015454 <ai_platform_network_init+0x70>
 8015624:	e7fe      	b.n	8015624 <ai_platform_network_init+0x240>
 8015626:	2800      	cmp	r0, #0
 8015628:	d153      	bne.n	80156d2 <ai_platform_network_init+0x2ee>
 801562a:	4680      	mov	r8, r0
 801562c:	4684      	mov	ip, r0
 801562e:	2e00      	cmp	r6, #0
 8015630:	d063      	beq.n	80156fa <ai_platform_network_init+0x316>
 8015632:	8be6      	ldrh	r6, [r4, #30]
 8015634:	2e00      	cmp	r6, #0
 8015636:	d168      	bne.n	801570a <ai_platform_network_init+0x326>
 8015638:	2212      	movs	r2, #18
 801563a:	2116      	movs	r1, #22
 801563c:	f104 0010 	add.w	r0, r4, #16
 8015640:	f000 fee0 	bl	8016404 <core_set_error>
 8015644:	e77c      	b.n	8015540 <ai_platform_network_init+0x15c>
 8015646:	4a19      	ldr	r2, [pc, #100]	; (80156ac <ai_platform_network_init+0x2c8>)
 8015648:	2301      	movs	r3, #1
 801564a:	6093      	str	r3, [r2, #8]
 801564c:	6893      	ldr	r3, [r2, #8]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d1fc      	bne.n	801564c <ai_platform_network_init+0x268>
 8015652:	4b17      	ldr	r3, [pc, #92]	; (80156b0 <ai_platform_network_init+0x2cc>)
 8015654:	6013      	str	r3, [r2, #0]
 8015656:	4b17      	ldr	r3, [pc, #92]	; (80156b4 <ai_platform_network_init+0x2d0>)
 8015658:	6812      	ldr	r2, [r2, #0]
 801565a:	429a      	cmp	r2, r3
 801565c:	f43f aefa 	beq.w	8015454 <ai_platform_network_init+0x70>
 8015660:	e7fe      	b.n	8015660 <ai_platform_network_init+0x27c>
 8015662:	4a12      	ldr	r2, [pc, #72]	; (80156ac <ai_platform_network_init+0x2c8>)
 8015664:	2301      	movs	r3, #1
 8015666:	6093      	str	r3, [r2, #8]
 8015668:	6893      	ldr	r3, [r2, #8]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d1fc      	bne.n	8015668 <ai_platform_network_init+0x284>
 801566e:	4910      	ldr	r1, [pc, #64]	; (80156b0 <ai_platform_network_init+0x2cc>)
 8015670:	4b10      	ldr	r3, [pc, #64]	; (80156b4 <ai_platform_network_init+0x2d0>)
 8015672:	6011      	str	r1, [r2, #0]
 8015674:	6812      	ldr	r2, [r2, #0]
 8015676:	429a      	cmp	r2, r3
 8015678:	f43f af5f 	beq.w	801553a <ai_platform_network_init+0x156>
 801567c:	e7fe      	b.n	801567c <ai_platform_network_init+0x298>
 801567e:	4a0b      	ldr	r2, [pc, #44]	; (80156ac <ai_platform_network_init+0x2c8>)
 8015680:	2301      	movs	r3, #1
 8015682:	6093      	str	r3, [r2, #8]
 8015684:	6893      	ldr	r3, [r2, #8]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d1fc      	bne.n	8015684 <ai_platform_network_init+0x2a0>
 801568a:	4b09      	ldr	r3, [pc, #36]	; (80156b0 <ai_platform_network_init+0x2cc>)
 801568c:	6013      	str	r3, [r2, #0]
 801568e:	4b09      	ldr	r3, [pc, #36]	; (80156b4 <ai_platform_network_init+0x2d0>)
 8015690:	6812      	ldr	r2, [r2, #0]
 8015692:	429a      	cmp	r2, r3
 8015694:	f43f aede 	beq.w	8015454 <ai_platform_network_init+0x70>
 8015698:	e7fe      	b.n	8015698 <ai_platform_network_init+0x2b4>
 801569a:	bf00      	nop
 801569c:	a1c00100 	.word	0xa1c00100
 80156a0:	e0042000 	.word	0xe0042000
 80156a4:	5c001000 	.word	0x5c001000
 80156a8:	a1facade 	.word	0xa1facade
 80156ac:	40023000 	.word	0x40023000
 80156b0:	f407a5c2 	.word	0xf407a5c2
 80156b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80156b8:	58024000 	.word	0x58024000
 80156bc:	2213      	movs	r2, #19
 80156be:	2116      	movs	r1, #22
 80156c0:	f104 0010 	add.w	r0, r4, #16
 80156c4:	f000 fe9e 	bl	8016404 <core_set_error>
 80156c8:	e73a      	b.n	8015540 <ai_platform_network_init+0x15c>
 80156ca:	4607      	mov	r7, r0
 80156cc:	4680      	mov	r8, r0
 80156ce:	4684      	mov	ip, r0
 80156d0:	e773      	b.n	80155ba <ai_platform_network_init+0x1d6>
 80156d2:	f1b9 0f00 	cmp.w	r9, #0
 80156d6:	d002      	beq.n	80156de <ai_platform_network_init+0x2fa>
 80156d8:	f04f 0c01 	mov.w	ip, #1
 80156dc:	e7a7      	b.n	801562e <ai_platform_network_init+0x24a>
 80156de:	2110      	movs	r1, #16
 80156e0:	2213      	movs	r2, #19
 80156e2:	2600      	movs	r6, #0
 80156e4:	1860      	adds	r0, r4, r1
 80156e6:	f000 fe8d 	bl	8016404 <core_set_error>
 80156ea:	e729      	b.n	8015540 <ai_platform_network_init+0x15c>
 80156ec:	2110      	movs	r1, #16
 80156ee:	2211      	movs	r2, #17
 80156f0:	462e      	mov	r6, r5
 80156f2:	1860      	adds	r0, r4, r1
 80156f4:	f000 fe86 	bl	8016404 <core_set_error>
 80156f8:	e722      	b.n	8015540 <ai_platform_network_init+0x15c>
 80156fa:	2110      	movs	r1, #16
 80156fc:	2212      	movs	r2, #18
 80156fe:	1860      	adds	r0, r4, r1
 8015700:	f000 fe80 	bl	8016404 <core_set_error>
 8015704:	e71c      	b.n	8015540 <ai_platform_network_init+0x15c>
 8015706:	4666      	mov	r6, ip
 8015708:	e6b7      	b.n	801547a <ai_platform_network_init+0x96>
 801570a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801570c:	6a26      	ldr	r6, [r4, #32]
 801570e:	2701      	movs	r7, #1
 8015710:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015716:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801571a:	e74e      	b.n	80155ba <ai_platform_network_init+0x1d6>

0801571c <ai_platform_network_post_init>:
 801571c:	b538      	push	{r3, r4, r5, lr}
 801571e:	2800      	cmp	r0, #0
 8015720:	d04e      	beq.n	80157c0 <ai_platform_network_post_init+0xa4>
 8015722:	4b8c      	ldr	r3, [pc, #560]	; (8015954 <ai_platform_network_post_init+0x238>)
 8015724:	4604      	mov	r4, r0
 8015726:	6802      	ldr	r2, [r0, #0]
 8015728:	429a      	cmp	r2, r3
 801572a:	d149      	bne.n	80157c0 <ai_platform_network_post_init+0xa4>
 801572c:	f7fe ff8c 	bl	8014648 <_ai_platform_acquire_crc>
 8015730:	4b89      	ldr	r3, [pc, #548]	; (8015958 <ai_platform_network_post_init+0x23c>)
 8015732:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801573c:	189a      	adds	r2, r3, r2
 801573e:	2a01      	cmp	r2, #1
 8015740:	f240 8095 	bls.w	801586e <ai_platform_network_post_init+0x152>
 8015744:	f240 4249 	movw	r2, #1097	; 0x449
 8015748:	4293      	cmp	r3, r2
 801574a:	f000 8090 	beq.w	801586e <ai_platform_network_post_init+0x152>
 801574e:	4a83      	ldr	r2, [pc, #524]	; (801595c <ai_platform_network_post_init+0x240>)
 8015750:	6813      	ldr	r3, [r2, #0]
 8015752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015756:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801575a:	f000 8096 	beq.w	801588a <ai_platform_network_post_init+0x16e>
 801575e:	6813      	ldr	r3, [r2, #0]
 8015760:	f240 4183 	movw	r1, #1155	; 0x483
 8015764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015768:	428b      	cmp	r3, r1
 801576a:	f000 80b8 	beq.w	80158de <ai_platform_network_post_init+0x1c2>
 801576e:	6813      	ldr	r3, [r2, #0]
 8015770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015774:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015778:	f000 80de 	beq.w	8015938 <ai_platform_network_post_init+0x21c>
 801577c:	6813      	ldr	r3, [r2, #0]
 801577e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015782:	2b00      	cmp	r3, #0
 8015784:	f000 80bd 	beq.w	8015902 <ai_platform_network_post_init+0x1e6>
 8015788:	f7fe ff60 	bl	801464c <_ai_platform_release_crc>
 801578c:	68e3      	ldr	r3, [r4, #12]
 801578e:	f013 0502 	ands.w	r5, r3, #2
 8015792:	f000 808c 	beq.w	80158ae <ai_platform_network_post_init+0x192>
 8015796:	4620      	mov	r0, r4
 8015798:	f002 fb2a 	bl	8017df0 <ai_layers_post_init_all>
 801579c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801579e:	b16b      	cbz	r3, 80157bc <ai_platform_network_post_init+0xa0>
 80157a0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80157a2:	e007      	b.n	80157b4 <ai_platform_network_post_init+0x98>
 80157a4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80157a8:	4798      	blx	r3
 80157aa:	692b      	ldr	r3, [r5, #16]
 80157ac:	b133      	cbz	r3, 80157bc <ai_platform_network_post_init+0xa0>
 80157ae:	42ab      	cmp	r3, r5
 80157b0:	461d      	mov	r5, r3
 80157b2:	d003      	beq.n	80157bc <ai_platform_network_post_init+0xa0>
 80157b4:	4629      	mov	r1, r5
 80157b6:	2000      	movs	r0, #0
 80157b8:	2d00      	cmp	r5, #0
 80157ba:	d1f3      	bne.n	80157a4 <ai_platform_network_post_init+0x88>
 80157bc:	2001      	movs	r0, #1
 80157be:	bd38      	pop	{r3, r4, r5, pc}
 80157c0:	f7fe ff42 	bl	8014648 <_ai_platform_acquire_crc>
 80157c4:	4b64      	ldr	r3, [pc, #400]	; (8015958 <ai_platform_network_post_init+0x23c>)
 80157c6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157d0:	185a      	adds	r2, r3, r1
 80157d2:	2a01      	cmp	r2, #1
 80157d4:	d92a      	bls.n	801582c <ai_platform_network_post_init+0x110>
 80157d6:	f240 4249 	movw	r2, #1097	; 0x449
 80157da:	4293      	cmp	r3, r2
 80157dc:	d026      	beq.n	801582c <ai_platform_network_post_init+0x110>
 80157de:	4a5f      	ldr	r2, [pc, #380]	; (801595c <ai_platform_network_post_init+0x240>)
 80157e0:	6813      	ldr	r3, [r2, #0]
 80157e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80157ea:	d02c      	beq.n	8015846 <ai_platform_network_post_init+0x12a>
 80157ec:	6813      	ldr	r3, [r2, #0]
 80157ee:	f240 4183 	movw	r1, #1155	; 0x483
 80157f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157f6:	428b      	cmp	r3, r1
 80157f8:	d060      	beq.n	80158bc <ai_platform_network_post_init+0x1a0>
 80157fa:	6813      	ldr	r3, [r2, #0]
 80157fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015800:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015804:	f000 808b 	beq.w	801591e <ai_platform_network_post_init+0x202>
 8015808:	6813      	ldr	r3, [r2, #0]
 801580a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801580e:	2b00      	cmp	r3, #0
 8015810:	d129      	bne.n	8015866 <ai_platform_network_post_init+0x14a>
 8015812:	4a53      	ldr	r2, [pc, #332]	; (8015960 <ai_platform_network_post_init+0x244>)
 8015814:	2301      	movs	r3, #1
 8015816:	6093      	str	r3, [r2, #8]
 8015818:	6893      	ldr	r3, [r2, #8]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d1fc      	bne.n	8015818 <ai_platform_network_post_init+0xfc>
 801581e:	4951      	ldr	r1, [pc, #324]	; (8015964 <ai_platform_network_post_init+0x248>)
 8015820:	4b51      	ldr	r3, [pc, #324]	; (8015968 <ai_platform_network_post_init+0x24c>)
 8015822:	6011      	str	r1, [r2, #0]
 8015824:	6812      	ldr	r2, [r2, #0]
 8015826:	429a      	cmp	r2, r3
 8015828:	d01d      	beq.n	8015866 <ai_platform_network_post_init+0x14a>
 801582a:	e7fe      	b.n	801582a <ai_platform_network_post_init+0x10e>
 801582c:	4a4c      	ldr	r2, [pc, #304]	; (8015960 <ai_platform_network_post_init+0x244>)
 801582e:	2301      	movs	r3, #1
 8015830:	6093      	str	r3, [r2, #8]
 8015832:	6893      	ldr	r3, [r2, #8]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d1fc      	bne.n	8015832 <ai_platform_network_post_init+0x116>
 8015838:	494a      	ldr	r1, [pc, #296]	; (8015964 <ai_platform_network_post_init+0x248>)
 801583a:	4b4b      	ldr	r3, [pc, #300]	; (8015968 <ai_platform_network_post_init+0x24c>)
 801583c:	6011      	str	r1, [r2, #0]
 801583e:	6812      	ldr	r2, [r2, #0]
 8015840:	429a      	cmp	r2, r3
 8015842:	d010      	beq.n	8015866 <ai_platform_network_post_init+0x14a>
 8015844:	e7fe      	b.n	8015844 <ai_platform_network_post_init+0x128>
 8015846:	4a49      	ldr	r2, [pc, #292]	; (801596c <ai_platform_network_post_init+0x250>)
 8015848:	2301      	movs	r3, #1
 801584a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801584e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015852:	2b00      	cmp	r3, #0
 8015854:	d1fb      	bne.n	801584e <ai_platform_network_post_init+0x132>
 8015856:	4943      	ldr	r1, [pc, #268]	; (8015964 <ai_platform_network_post_init+0x248>)
 8015858:	4b43      	ldr	r3, [pc, #268]	; (8015968 <ai_platform_network_post_init+0x24c>)
 801585a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801585e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015862:	429a      	cmp	r2, r3
 8015864:	d110      	bne.n	8015888 <ai_platform_network_post_init+0x16c>
 8015866:	f7fe fef1 	bl	801464c <_ai_platform_release_crc>
 801586a:	2000      	movs	r0, #0
 801586c:	bd38      	pop	{r3, r4, r5, pc}
 801586e:	4a3c      	ldr	r2, [pc, #240]	; (8015960 <ai_platform_network_post_init+0x244>)
 8015870:	2301      	movs	r3, #1
 8015872:	6093      	str	r3, [r2, #8]
 8015874:	6893      	ldr	r3, [r2, #8]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d1fc      	bne.n	8015874 <ai_platform_network_post_init+0x158>
 801587a:	493a      	ldr	r1, [pc, #232]	; (8015964 <ai_platform_network_post_init+0x248>)
 801587c:	4b3a      	ldr	r3, [pc, #232]	; (8015968 <ai_platform_network_post_init+0x24c>)
 801587e:	6011      	str	r1, [r2, #0]
 8015880:	6812      	ldr	r2, [r2, #0]
 8015882:	429a      	cmp	r2, r3
 8015884:	d080      	beq.n	8015788 <ai_platform_network_post_init+0x6c>
 8015886:	e7fe      	b.n	8015886 <ai_platform_network_post_init+0x16a>
 8015888:	e7fe      	b.n	8015888 <ai_platform_network_post_init+0x16c>
 801588a:	4a38      	ldr	r2, [pc, #224]	; (801596c <ai_platform_network_post_init+0x250>)
 801588c:	2301      	movs	r3, #1
 801588e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015892:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015896:	2b00      	cmp	r3, #0
 8015898:	d1fb      	bne.n	8015892 <ai_platform_network_post_init+0x176>
 801589a:	4932      	ldr	r1, [pc, #200]	; (8015964 <ai_platform_network_post_init+0x248>)
 801589c:	4b32      	ldr	r3, [pc, #200]	; (8015968 <ai_platform_network_post_init+0x24c>)
 801589e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80158a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80158a6:	429a      	cmp	r2, r3
 80158a8:	f43f af6e 	beq.w	8015788 <ai_platform_network_post_init+0x6c>
 80158ac:	e7fe      	b.n	80158ac <ai_platform_network_post_init+0x190>
 80158ae:	2210      	movs	r2, #16
 80158b0:	2111      	movs	r1, #17
 80158b2:	18a0      	adds	r0, r4, r2
 80158b4:	f000 fda6 	bl	8016404 <core_set_error>
 80158b8:	4628      	mov	r0, r5
 80158ba:	bd38      	pop	{r3, r4, r5, pc}
 80158bc:	4a2b      	ldr	r2, [pc, #172]	; (801596c <ai_platform_network_post_init+0x250>)
 80158be:	2301      	movs	r3, #1
 80158c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80158c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d1fb      	bne.n	80158c4 <ai_platform_network_post_init+0x1a8>
 80158cc:	4925      	ldr	r1, [pc, #148]	; (8015964 <ai_platform_network_post_init+0x248>)
 80158ce:	4b26      	ldr	r3, [pc, #152]	; (8015968 <ai_platform_network_post_init+0x24c>)
 80158d0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80158d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80158d8:	429a      	cmp	r2, r3
 80158da:	d0c4      	beq.n	8015866 <ai_platform_network_post_init+0x14a>
 80158dc:	e7fe      	b.n	80158dc <ai_platform_network_post_init+0x1c0>
 80158de:	4a23      	ldr	r2, [pc, #140]	; (801596c <ai_platform_network_post_init+0x250>)
 80158e0:	2301      	movs	r3, #1
 80158e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80158e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d1fb      	bne.n	80158e6 <ai_platform_network_post_init+0x1ca>
 80158ee:	491d      	ldr	r1, [pc, #116]	; (8015964 <ai_platform_network_post_init+0x248>)
 80158f0:	4b1d      	ldr	r3, [pc, #116]	; (8015968 <ai_platform_network_post_init+0x24c>)
 80158f2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80158f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80158fa:	429a      	cmp	r2, r3
 80158fc:	f43f af44 	beq.w	8015788 <ai_platform_network_post_init+0x6c>
 8015900:	e7fe      	b.n	8015900 <ai_platform_network_post_init+0x1e4>
 8015902:	4a17      	ldr	r2, [pc, #92]	; (8015960 <ai_platform_network_post_init+0x244>)
 8015904:	2301      	movs	r3, #1
 8015906:	6093      	str	r3, [r2, #8]
 8015908:	6893      	ldr	r3, [r2, #8]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d1fc      	bne.n	8015908 <ai_platform_network_post_init+0x1ec>
 801590e:	4915      	ldr	r1, [pc, #84]	; (8015964 <ai_platform_network_post_init+0x248>)
 8015910:	4b15      	ldr	r3, [pc, #84]	; (8015968 <ai_platform_network_post_init+0x24c>)
 8015912:	6011      	str	r1, [r2, #0]
 8015914:	6812      	ldr	r2, [r2, #0]
 8015916:	429a      	cmp	r2, r3
 8015918:	f43f af36 	beq.w	8015788 <ai_platform_network_post_init+0x6c>
 801591c:	e7fe      	b.n	801591c <ai_platform_network_post_init+0x200>
 801591e:	4a10      	ldr	r2, [pc, #64]	; (8015960 <ai_platform_network_post_init+0x244>)
 8015920:	2301      	movs	r3, #1
 8015922:	6093      	str	r3, [r2, #8]
 8015924:	6893      	ldr	r3, [r2, #8]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d1fc      	bne.n	8015924 <ai_platform_network_post_init+0x208>
 801592a:	490e      	ldr	r1, [pc, #56]	; (8015964 <ai_platform_network_post_init+0x248>)
 801592c:	4b0e      	ldr	r3, [pc, #56]	; (8015968 <ai_platform_network_post_init+0x24c>)
 801592e:	6011      	str	r1, [r2, #0]
 8015930:	6812      	ldr	r2, [r2, #0]
 8015932:	429a      	cmp	r2, r3
 8015934:	d097      	beq.n	8015866 <ai_platform_network_post_init+0x14a>
 8015936:	e7fe      	b.n	8015936 <ai_platform_network_post_init+0x21a>
 8015938:	4a09      	ldr	r2, [pc, #36]	; (8015960 <ai_platform_network_post_init+0x244>)
 801593a:	2301      	movs	r3, #1
 801593c:	6093      	str	r3, [r2, #8]
 801593e:	6893      	ldr	r3, [r2, #8]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d1fc      	bne.n	801593e <ai_platform_network_post_init+0x222>
 8015944:	4907      	ldr	r1, [pc, #28]	; (8015964 <ai_platform_network_post_init+0x248>)
 8015946:	4b08      	ldr	r3, [pc, #32]	; (8015968 <ai_platform_network_post_init+0x24c>)
 8015948:	6011      	str	r1, [r2, #0]
 801594a:	6812      	ldr	r2, [r2, #0]
 801594c:	429a      	cmp	r2, r3
 801594e:	f43f af1b 	beq.w	8015788 <ai_platform_network_post_init+0x6c>
 8015952:	e7fe      	b.n	8015952 <ai_platform_network_post_init+0x236>
 8015954:	a1c00100 	.word	0xa1c00100
 8015958:	e0042000 	.word	0xe0042000
 801595c:	5c001000 	.word	0x5c001000
 8015960:	40023000 	.word	0x40023000
 8015964:	f407a5c2 	.word	0xf407a5c2
 8015968:	b5e8b5cd 	.word	0xb5e8b5cd
 801596c:	58024000 	.word	0x58024000

08015970 <ai_platform_network_process>:
 8015970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015974:	b085      	sub	sp, #20
 8015976:	460e      	mov	r6, r1
 8015978:	4605      	mov	r5, r0
 801597a:	9201      	str	r2, [sp, #4]
 801597c:	b120      	cbz	r0, 8015988 <ai_platform_network_process+0x18>
 801597e:	4b24      	ldr	r3, [pc, #144]	; (8015a10 <ai_platform_network_process+0xa0>)
 8015980:	6802      	ldr	r2, [r0, #0]
 8015982:	429a      	cmp	r2, r3
 8015984:	bf18      	it	ne
 8015986:	2500      	movne	r5, #0
 8015988:	f7fe fe5e 	bl	8014648 <_ai_platform_acquire_crc>
 801598c:	4b21      	ldr	r3, [pc, #132]	; (8015a14 <ai_platform_network_process+0xa4>)
 801598e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015998:	185a      	adds	r2, r3, r1
 801599a:	2a01      	cmp	r2, #1
 801599c:	d92b      	bls.n	80159f6 <ai_platform_network_process+0x86>
 801599e:	f240 4249 	movw	r2, #1097	; 0x449
 80159a2:	4293      	cmp	r3, r2
 80159a4:	d027      	beq.n	80159f6 <ai_platform_network_process+0x86>
 80159a6:	4a1c      	ldr	r2, [pc, #112]	; (8015a18 <ai_platform_network_process+0xa8>)
 80159a8:	6813      	ldr	r3, [r2, #0]
 80159aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159ae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80159b2:	d039      	beq.n	8015a28 <ai_platform_network_process+0xb8>
 80159b4:	6813      	ldr	r3, [r2, #0]
 80159b6:	f240 4183 	movw	r1, #1155	; 0x483
 80159ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159be:	428b      	cmp	r3, r1
 80159c0:	f000 819c 	beq.w	8015cfc <ai_platform_network_process+0x38c>
 80159c4:	6813      	ldr	r3, [r2, #0]
 80159c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159ca:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80159ce:	f000 8179 	beq.w	8015cc4 <ai_platform_network_process+0x354>
 80159d2:	6813      	ldr	r3, [r2, #0]
 80159d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d136      	bne.n	8015a4a <ai_platform_network_process+0xda>
 80159dc:	4a0f      	ldr	r2, [pc, #60]	; (8015a1c <ai_platform_network_process+0xac>)
 80159de:	2301      	movs	r3, #1
 80159e0:	6093      	str	r3, [r2, #8]
 80159e2:	6893      	ldr	r3, [r2, #8]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d1fc      	bne.n	80159e2 <ai_platform_network_process+0x72>
 80159e8:	4b0d      	ldr	r3, [pc, #52]	; (8015a20 <ai_platform_network_process+0xb0>)
 80159ea:	6013      	str	r3, [r2, #0]
 80159ec:	4b0d      	ldr	r3, [pc, #52]	; (8015a24 <ai_platform_network_process+0xb4>)
 80159ee:	6812      	ldr	r2, [r2, #0]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d02a      	beq.n	8015a4a <ai_platform_network_process+0xda>
 80159f4:	e7fe      	b.n	80159f4 <ai_platform_network_process+0x84>
 80159f6:	4a09      	ldr	r2, [pc, #36]	; (8015a1c <ai_platform_network_process+0xac>)
 80159f8:	2301      	movs	r3, #1
 80159fa:	6093      	str	r3, [r2, #8]
 80159fc:	6893      	ldr	r3, [r2, #8]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d1fc      	bne.n	80159fc <ai_platform_network_process+0x8c>
 8015a02:	4b07      	ldr	r3, [pc, #28]	; (8015a20 <ai_platform_network_process+0xb0>)
 8015a04:	6013      	str	r3, [r2, #0]
 8015a06:	4b07      	ldr	r3, [pc, #28]	; (8015a24 <ai_platform_network_process+0xb4>)
 8015a08:	6812      	ldr	r2, [r2, #0]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d01d      	beq.n	8015a4a <ai_platform_network_process+0xda>
 8015a0e:	e7fe      	b.n	8015a0e <ai_platform_network_process+0x9e>
 8015a10:	a1c00100 	.word	0xa1c00100
 8015a14:	e0042000 	.word	0xe0042000
 8015a18:	5c001000 	.word	0x5c001000
 8015a1c:	40023000 	.word	0x40023000
 8015a20:	f407a5c2 	.word	0xf407a5c2
 8015a24:	b5e8b5cd 	.word	0xb5e8b5cd
 8015a28:	4ab0      	ldr	r2, [pc, #704]	; (8015cec <ai_platform_network_process+0x37c>)
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015a30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d1fb      	bne.n	8015a30 <ai_platform_network_process+0xc0>
 8015a38:	4bad      	ldr	r3, [pc, #692]	; (8015cf0 <ai_platform_network_process+0x380>)
 8015a3a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015a3e:	4bad      	ldr	r3, [pc, #692]	; (8015cf4 <ai_platform_network_process+0x384>)
 8015a40:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015a44:	429a      	cmp	r2, r3
 8015a46:	f040 812b 	bne.w	8015ca0 <ai_platform_network_process+0x330>
 8015a4a:	f7fe fdff 	bl	801464c <_ai_platform_release_crc>
 8015a4e:	2d00      	cmp	r5, #0
 8015a50:	f000 8172 	beq.w	8015d38 <ai_platform_network_process+0x3c8>
 8015a54:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	f000 8123 	beq.w	8015ca2 <ai_platform_network_process+0x332>
 8015a5c:	68eb      	ldr	r3, [r5, #12]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8015a64:	f003 0303 	and.w	r3, r3, #3
 8015a68:	616a      	str	r2, [r5, #20]
 8015a6a:	2b03      	cmp	r3, #3
 8015a6c:	f040 811f 	bne.w	8015cae <ai_platform_network_process+0x33e>
 8015a70:	2e00      	cmp	r6, #0
 8015a72:	f000 8156 	beq.w	8015d22 <ai_platform_network_process+0x3b2>
 8015a76:	fab8 f788 	clz	r7, r8
 8015a7a:	097f      	lsrs	r7, r7, #5
 8015a7c:	f1b8 0f00 	cmp.w	r8, #0
 8015a80:	f000 814f 	beq.w	8015d22 <ai_platform_network_process+0x3b2>
 8015a84:	f8b8 3000 	ldrh.w	r3, [r8]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	f000 814a 	beq.w	8015d22 <ai_platform_network_process+0x3b2>
 8015a8e:	69b3      	ldr	r3, [r6, #24]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8015a96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d072      	beq.n	8015b84 <ai_platform_network_process+0x214>
 8015a9e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8015aa2:	2c00      	cmp	r4, #0
 8015aa4:	d06e      	beq.n	8015b84 <ai_platform_network_process+0x214>
 8015aa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015aaa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8015aae:	f8d3 a000 	ldr.w	sl, [r3]
 8015ab2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8015ab6:	f000 8133 	beq.w	8015d20 <ai_platform_network_process+0x3b0>
 8015aba:	69a3      	ldr	r3, [r4, #24]
 8015abc:	2101      	movs	r1, #1
 8015abe:	4630      	mov	r0, r6
 8015ac0:	685d      	ldr	r5, [r3, #4]
 8015ac2:	f7fe fd73 	bl	80145ac <ai_buffer_get_size>
 8015ac6:	4285      	cmp	r5, r0
 8015ac8:	f0c0 8138 	bcc.w	8015d3c <ai_platform_network_process+0x3cc>
 8015acc:	68e0      	ldr	r0, [r4, #12]
 8015ace:	69b1      	ldr	r1, [r6, #24]
 8015ad0:	68c2      	ldr	r2, [r0, #12]
 8015ad2:	68cb      	ldr	r3, [r1, #12]
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	f040 8131 	bne.w	8015d3c <ai_platform_network_process+0x3cc>
 8015ada:	6882      	ldr	r2, [r0, #8]
 8015adc:	688b      	ldr	r3, [r1, #8]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	f040 812c 	bne.w	8015d3c <ai_platform_network_process+0x3cc>
 8015ae4:	6842      	ldr	r2, [r0, #4]
 8015ae6:	684b      	ldr	r3, [r1, #4]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	f040 8127 	bne.w	8015d3c <ai_platform_network_process+0x3cc>
 8015aee:	69a3      	ldr	r3, [r4, #24]
 8015af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015af4:	f007 fc74 	bl	801d3e0 <ai_array_get_data_byte_size>
 8015af8:	4605      	mov	r5, r0
 8015afa:	4620      	mov	r0, r4
 8015afc:	f007 fbc6 	bl	801d28c <get_tensor_byte_size>
 8015b00:	4285      	cmp	r5, r0
 8015b02:	f0c0 811b 	bcc.w	8015d3c <ai_platform_network_process+0x3cc>
 8015b06:	69a3      	ldr	r3, [r4, #24]
 8015b08:	6818      	ldr	r0, [r3, #0]
 8015b0a:	f007 fbd5 	bl	801d2b8 <ai_array_to_buffer_fmt>
 8015b0e:	6833      	ldr	r3, [r6, #0]
 8015b10:	4058      	eors	r0, r3
 8015b12:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8015b16:	f040 81ca 	bne.w	8015eae <ai_platform_network_process+0x53e>
 8015b1a:	6873      	ldr	r3, [r6, #4]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	f000 81bd 	beq.w	8015e9c <ai_platform_network_process+0x52c>
 8015b22:	69b3      	ldr	r3, [r6, #24]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f000 81ca 	beq.w	8015ec0 <ai_platform_network_process+0x550>
 8015b2c:	9a02      	ldr	r2, [sp, #8]
 8015b2e:	4620      	mov	r0, r4
 8015b30:	3701      	adds	r7, #1
 8015b32:	361c      	adds	r6, #28
 8015b34:	429a      	cmp	r2, r3
 8015b36:	bf38      	it	cc
 8015b38:	461a      	movcc	r2, r3
 8015b3a:	9202      	str	r2, [sp, #8]
 8015b3c:	f007 fba6 	bl	801d28c <get_tensor_byte_size>
 8015b40:	f8c9 0008 	str.w	r0, [r9, #8]
 8015b44:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	fb00 f303 	mul.w	r3, r0, r3
 8015b4e:	f8c9 300c 	str.w	r3, [r9, #12]
 8015b52:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8015b56:	440b      	add	r3, r1
 8015b58:	f8c9 1004 	str.w	r1, [r9, #4]
 8015b5c:	f84a 300b 	str.w	r3, [sl, fp]
 8015b60:	69a0      	ldr	r0, [r4, #24]
 8015b62:	6803      	ldr	r3, [r0, #0]
 8015b64:	009a      	lsls	r2, r3, #2
 8015b66:	f100 80bb 	bmi.w	8015ce0 <ai_platform_network_process+0x370>
 8015b6a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8015b6e:	1a9b      	subs	r3, r3, r2
 8015b70:	4419      	add	r1, r3
 8015b72:	6081      	str	r1, [r0, #8]
 8015b74:	69a3      	ldr	r3, [r4, #24]
 8015b76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8015b7a:	60da      	str	r2, [r3, #12]
 8015b7c:	f8b8 3000 	ldrh.w	r3, [r8]
 8015b80:	42bb      	cmp	r3, r7
 8015b82:	d888      	bhi.n	8015a96 <ai_platform_network_process+0x126>
 8015b84:	9d03      	ldr	r5, [sp, #12]
 8015b86:	9b01      	ldr	r3, [sp, #4]
 8015b88:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f000 81a1 	beq.w	8015ed2 <ai_platform_network_process+0x562>
 8015b90:	2a01      	cmp	r2, #1
 8015b92:	f240 817b 	bls.w	8015e8c <ai_platform_network_process+0x51c>
 8015b96:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8015b9a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f000 8174 	beq.w	8015e8c <ai_platform_network_process+0x51c>
 8015ba4:	9e01      	ldr	r6, [sp, #4]
 8015ba6:	2700      	movs	r7, #0
 8015ba8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	f000 80d3 	beq.w	8015d58 <ai_platform_network_process+0x3e8>
 8015bb2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8015bb6:	2c00      	cmp	r4, #0
 8015bb8:	f000 80ce 	beq.w	8015d58 <ai_platform_network_process+0x3e8>
 8015bbc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015bc0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8015bc4:	f8d3 8000 	ldr.w	r8, [r3]
 8015bc8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8015bcc:	f000 819f 	beq.w	8015f0e <ai_platform_network_process+0x59e>
 8015bd0:	69a3      	ldr	r3, [r4, #24]
 8015bd2:	2101      	movs	r1, #1
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	685b      	ldr	r3, [r3, #4]
 8015bd8:	9301      	str	r3, [sp, #4]
 8015bda:	f7fe fce7 	bl	80145ac <ai_buffer_get_size>
 8015bde:	9b01      	ldr	r3, [sp, #4]
 8015be0:	4283      	cmp	r3, r0
 8015be2:	f0c0 8153 	bcc.w	8015e8c <ai_platform_network_process+0x51c>
 8015be6:	68e0      	ldr	r0, [r4, #12]
 8015be8:	69b1      	ldr	r1, [r6, #24]
 8015bea:	68c2      	ldr	r2, [r0, #12]
 8015bec:	68cb      	ldr	r3, [r1, #12]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	f040 814c 	bne.w	8015e8c <ai_platform_network_process+0x51c>
 8015bf4:	6882      	ldr	r2, [r0, #8]
 8015bf6:	688b      	ldr	r3, [r1, #8]
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	f040 8147 	bne.w	8015e8c <ai_platform_network_process+0x51c>
 8015bfe:	6842      	ldr	r2, [r0, #4]
 8015c00:	684b      	ldr	r3, [r1, #4]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	f040 8142 	bne.w	8015e8c <ai_platform_network_process+0x51c>
 8015c08:	69a3      	ldr	r3, [r4, #24]
 8015c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c0e:	f007 fbe7 	bl	801d3e0 <ai_array_get_data_byte_size>
 8015c12:	9001      	str	r0, [sp, #4]
 8015c14:	4620      	mov	r0, r4
 8015c16:	f007 fb39 	bl	801d28c <get_tensor_byte_size>
 8015c1a:	9b01      	ldr	r3, [sp, #4]
 8015c1c:	4283      	cmp	r3, r0
 8015c1e:	f0c0 8135 	bcc.w	8015e8c <ai_platform_network_process+0x51c>
 8015c22:	69a3      	ldr	r3, [r4, #24]
 8015c24:	6818      	ldr	r0, [r3, #0]
 8015c26:	f007 fb47 	bl	801d2b8 <ai_array_to_buffer_fmt>
 8015c2a:	6833      	ldr	r3, [r6, #0]
 8015c2c:	4058      	eors	r0, r3
 8015c2e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8015c32:	f040 815c 	bne.w	8015eee <ai_platform_network_process+0x57e>
 8015c36:	6873      	ldr	r3, [r6, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	f000 8150 	beq.w	8015ede <ai_platform_network_process+0x56e>
 8015c3e:	69b3      	ldr	r3, [r6, #24]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	f000 815b 	beq.w	8015efe <ai_platform_network_process+0x58e>
 8015c48:	9a02      	ldr	r2, [sp, #8]
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	3701      	adds	r7, #1
 8015c4e:	361c      	adds	r6, #28
 8015c50:	429a      	cmp	r2, r3
 8015c52:	bf38      	it	cc
 8015c54:	461a      	movcc	r2, r3
 8015c56:	9202      	str	r2, [sp, #8]
 8015c58:	f007 fb18 	bl	801d28c <get_tensor_byte_size>
 8015c5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8015c60:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	fb00 f303 	mul.w	r3, r0, r3
 8015c6a:	f8ca 300c 	str.w	r3, [sl, #12]
 8015c6e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8015c72:	440b      	add	r3, r1
 8015c74:	f8ca 1004 	str.w	r1, [sl, #4]
 8015c78:	f848 300b 	str.w	r3, [r8, fp]
 8015c7c:	69a0      	ldr	r0, [r4, #24]
 8015c7e:	6803      	ldr	r3, [r0, #0]
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	d464      	bmi.n	8015d4e <ai_platform_network_process+0x3de>
 8015c84:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8015c88:	1a9b      	subs	r3, r3, r2
 8015c8a:	4419      	add	r1, r3
 8015c8c:	6081      	str	r1, [r0, #8]
 8015c8e:	69a3      	ldr	r3, [r4, #24]
 8015c90:	f8da 2004 	ldr.w	r2, [sl, #4]
 8015c94:	60da      	str	r2, [r3, #12]
 8015c96:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015c9a:	429f      	cmp	r7, r3
 8015c9c:	d384      	bcc.n	8015ba8 <ai_platform_network_process+0x238>
 8015c9e:	e05b      	b.n	8015d58 <ai_platform_network_process+0x3e8>
 8015ca0:	e7fe      	b.n	8015ca0 <ai_platform_network_process+0x330>
 8015ca2:	68ea      	ldr	r2, [r5, #12]
 8015ca4:	616b      	str	r3, [r5, #20]
 8015ca6:	f002 0203 	and.w	r2, r2, #3
 8015caa:	2a03      	cmp	r2, #3
 8015cac:	d039      	beq.n	8015d22 <ai_platform_network_process+0x3b2>
 8015cae:	2230      	movs	r2, #48	; 0x30
 8015cb0:	2111      	movs	r1, #17
 8015cb2:	f105 0010 	add.w	r0, r5, #16
 8015cb6:	2400      	movs	r4, #0
 8015cb8:	f000 fba4 	bl	8016404 <core_set_error>
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	b005      	add	sp, #20
 8015cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cc4:	4a0c      	ldr	r2, [pc, #48]	; (8015cf8 <ai_platform_network_process+0x388>)
 8015cc6:	2301      	movs	r3, #1
 8015cc8:	6093      	str	r3, [r2, #8]
 8015cca:	6893      	ldr	r3, [r2, #8]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d1fc      	bne.n	8015cca <ai_platform_network_process+0x35a>
 8015cd0:	4b07      	ldr	r3, [pc, #28]	; (8015cf0 <ai_platform_network_process+0x380>)
 8015cd2:	6013      	str	r3, [r2, #0]
 8015cd4:	4b07      	ldr	r3, [pc, #28]	; (8015cf4 <ai_platform_network_process+0x384>)
 8015cd6:	6812      	ldr	r2, [r2, #0]
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	f43f aeb6 	beq.w	8015a4a <ai_platform_network_process+0xda>
 8015cde:	e7fe      	b.n	8015cde <ai_platform_network_process+0x36e>
 8015ce0:	f8b8 3000 	ldrh.w	r3, [r8]
 8015ce4:	429f      	cmp	r7, r3
 8015ce6:	f4ff aed6 	bcc.w	8015a96 <ai_platform_network_process+0x126>
 8015cea:	e74b      	b.n	8015b84 <ai_platform_network_process+0x214>
 8015cec:	58024000 	.word	0x58024000
 8015cf0:	f407a5c2 	.word	0xf407a5c2
 8015cf4:	b5e8b5cd 	.word	0xb5e8b5cd
 8015cf8:	40023000 	.word	0x40023000
 8015cfc:	4a88      	ldr	r2, [pc, #544]	; (8015f20 <ai_platform_network_process+0x5b0>)
 8015cfe:	2301      	movs	r3, #1
 8015d00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015d04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d1fb      	bne.n	8015d04 <ai_platform_network_process+0x394>
 8015d0c:	4b85      	ldr	r3, [pc, #532]	; (8015f24 <ai_platform_network_process+0x5b4>)
 8015d0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015d12:	4b85      	ldr	r3, [pc, #532]	; (8015f28 <ai_platform_network_process+0x5b8>)
 8015d14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	f43f ae96 	beq.w	8015a4a <ai_platform_network_process+0xda>
 8015d1e:	e7fe      	b.n	8015d1e <ai_platform_network_process+0x3ae>
 8015d20:	9d03      	ldr	r5, [sp, #12]
 8015d22:	2400      	movs	r4, #0
 8015d24:	2217      	movs	r2, #23
 8015d26:	2112      	movs	r1, #18
 8015d28:	f105 0010 	add.w	r0, r5, #16
 8015d2c:	f000 fb6a 	bl	8016404 <core_set_error>
 8015d30:	4620      	mov	r0, r4
 8015d32:	b005      	add	sp, #20
 8015d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d38:	462c      	mov	r4, r5
 8015d3a:	e7bf      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015d3c:	9d03      	ldr	r5, [sp, #12]
 8015d3e:	2218      	movs	r2, #24
 8015d40:	2112      	movs	r1, #18
 8015d42:	2400      	movs	r4, #0
 8015d44:	f105 0010 	add.w	r0, r5, #16
 8015d48:	f000 fb5c 	bl	8016404 <core_set_error>
 8015d4c:	e7b6      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015d4e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015d52:	429f      	cmp	r7, r3
 8015d54:	f4ff af28 	bcc.w	8015ba8 <ai_platform_network_process+0x238>
 8015d58:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015d5c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8015d5e:	82ab      	strh	r3, [r5, #20]
 8015d60:	2a00      	cmp	r2, #0
 8015d62:	f040 808d 	bne.w	8015e80 <ai_platform_network_process+0x510>
 8015d66:	4616      	mov	r6, r2
 8015d68:	4617      	mov	r7, r2
 8015d6a:	8aec      	ldrh	r4, [r5, #22]
 8015d6c:	429c      	cmp	r4, r3
 8015d6e:	d2a5      	bcs.n	8015cbc <ai_platform_network_process+0x34c>
 8015d70:	46ab      	mov	fp, r5
 8015d72:	2e00      	cmp	r6, #0
 8015d74:	d030      	beq.n	8015dd8 <ai_platform_network_process+0x468>
 8015d76:	f04f 0800 	mov.w	r8, #0
 8015d7a:	e014      	b.n	8015da6 <ai_platform_network_process+0x436>
 8015d7c:	6882      	ldr	r2, [r0, #8]
 8015d7e:	68c5      	ldr	r5, [r0, #12]
 8015d80:	6863      	ldr	r3, [r4, #4]
 8015d82:	1b52      	subs	r2, r2, r5
 8015d84:	4413      	add	r3, r2
 8015d86:	6083      	str	r3, [r0, #8]
 8015d88:	698b      	ldr	r3, [r1, #24]
 8015d8a:	6862      	ldr	r2, [r4, #4]
 8015d8c:	60da      	str	r2, [r3, #12]
 8015d8e:	f859 200a 	ldr.w	r2, [r9, sl]
 8015d92:	f108 0801 	add.w	r8, r8, #1
 8015d96:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8015d9a:	440b      	add	r3, r1
 8015d9c:	4293      	cmp	r3, r2
 8015d9e:	d301      	bcc.n	8015da4 <ai_platform_network_process+0x434>
 8015da0:	68e3      	ldr	r3, [r4, #12]
 8015da2:	1ad3      	subs	r3, r2, r3
 8015da4:	6063      	str	r3, [r4, #4]
 8015da6:	8833      	ldrh	r3, [r6, #0]
 8015da8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8015dac:	4543      	cmp	r3, r8
 8015dae:	d913      	bls.n	8015dd8 <ai_platform_network_process+0x468>
 8015db0:	6873      	ldr	r3, [r6, #4]
 8015db2:	b18b      	cbz	r3, 8015dd8 <ai_platform_network_process+0x468>
 8015db4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8015db8:	b171      	cbz	r1, 8015dd8 <ai_platform_network_process+0x468>
 8015dba:	6988      	ldr	r0, [r1, #24]
 8015dbc:	68b2      	ldr	r2, [r6, #8]
 8015dbe:	6803      	ldr	r3, [r0, #0]
 8015dc0:	f8d2 9000 	ldr.w	r9, [r2]
 8015dc4:	009d      	lsls	r5, r3, #2
 8015dc6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8015dca:	d5d7      	bpl.n	8015d7c <ai_platform_network_process+0x40c>
 8015dcc:	6880      	ldr	r0, [r0, #8]
 8015dce:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8015dd2:	f007 ff3b 	bl	801dc4c <memcpy>
 8015dd6:	e7da      	b.n	8015d8e <ai_platform_network_process+0x41e>
 8015dd8:	4658      	mov	r0, fp
 8015dda:	f002 f81d 	bl	8017e18 <ai_layers_forward_all>
 8015dde:	2f00      	cmp	r7, #0
 8015de0:	d03f      	beq.n	8015e62 <ai_platform_network_process+0x4f2>
 8015de2:	2400      	movs	r4, #0
 8015de4:	e016      	b.n	8015e14 <ai_platform_network_process+0x4a4>
 8015de6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8015dea:	f859 100a 	ldr.w	r1, [r9, sl]
 8015dee:	4413      	add	r3, r2
 8015df0:	428b      	cmp	r3, r1
 8015df2:	d302      	bcc.n	8015dfa <ai_platform_network_process+0x48a>
 8015df4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015df8:	1acb      	subs	r3, r1, r3
 8015dfa:	f8c8 3004 	str.w	r3, [r8, #4]
 8015dfe:	6981      	ldr	r1, [r0, #24]
 8015e00:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8015e04:	1b52      	subs	r2, r2, r5
 8015e06:	4413      	add	r3, r2
 8015e08:	608b      	str	r3, [r1, #8]
 8015e0a:	6983      	ldr	r3, [r0, #24]
 8015e0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015e10:	60da      	str	r2, [r3, #12]
 8015e12:	3401      	adds	r4, #1
 8015e14:	883b      	ldrh	r3, [r7, #0]
 8015e16:	42a3      	cmp	r3, r4
 8015e18:	d923      	bls.n	8015e62 <ai_platform_network_process+0x4f2>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	b30b      	cbz	r3, 8015e62 <ai_platform_network_process+0x4f2>
 8015e1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e22:	b1f0      	cbz	r0, 8015e62 <ai_platform_network_process+0x4f2>
 8015e24:	68ba      	ldr	r2, [r7, #8]
 8015e26:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8015e2a:	6983      	ldr	r3, [r0, #24]
 8015e2c:	f8d2 9000 	ldr.w	r9, [r2]
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8015e36:	0092      	lsls	r2, r2, #2
 8015e38:	d5d5      	bpl.n	8015de6 <ai_platform_network_process+0x476>
 8015e3a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015e3e:	6899      	ldr	r1, [r3, #8]
 8015e40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015e44:	f007 ff02 	bl	801dc4c <memcpy>
 8015e48:	f859 200a 	ldr.w	r2, [r9, sl]
 8015e4c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8015e50:	440b      	add	r3, r1
 8015e52:	4293      	cmp	r3, r2
 8015e54:	d302      	bcc.n	8015e5c <ai_platform_network_process+0x4ec>
 8015e56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e5a:	1ad3      	subs	r3, r2, r3
 8015e5c:	f8c8 3004 	str.w	r3, [r8, #4]
 8015e60:	e7d7      	b.n	8015e12 <ai_platform_network_process+0x4a2>
 8015e62:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8015e66:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8015e6a:	3401      	adds	r4, #1
 8015e6c:	b2a4      	uxth	r4, r4
 8015e6e:	42a3      	cmp	r3, r4
 8015e70:	f8ab 4016 	strh.w	r4, [fp, #22]
 8015e74:	f63f af7d 	bhi.w	8015d72 <ai_platform_network_process+0x402>
 8015e78:	4620      	mov	r0, r4
 8015e7a:	b005      	add	sp, #20
 8015e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e80:	2a01      	cmp	r2, #1
 8015e82:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8015e84:	d029      	beq.n	8015eda <ai_platform_network_process+0x56a>
 8015e86:	f106 070c 	add.w	r7, r6, #12
 8015e8a:	e76e      	b.n	8015d6a <ai_platform_network_process+0x3fa>
 8015e8c:	2218      	movs	r2, #24
 8015e8e:	2113      	movs	r1, #19
 8015e90:	f105 0010 	add.w	r0, r5, #16
 8015e94:	2400      	movs	r4, #0
 8015e96:	f000 fab5 	bl	8016404 <core_set_error>
 8015e9a:	e70f      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015e9c:	9d03      	ldr	r5, [sp, #12]
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	2217      	movs	r2, #23
 8015ea2:	2112      	movs	r1, #18
 8015ea4:	f105 0010 	add.w	r0, r5, #16
 8015ea8:	f000 faac 	bl	8016404 <core_set_error>
 8015eac:	e706      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015eae:	9d03      	ldr	r5, [sp, #12]
 8015eb0:	2219      	movs	r2, #25
 8015eb2:	2112      	movs	r1, #18
 8015eb4:	2400      	movs	r4, #0
 8015eb6:	f105 0010 	add.w	r0, r5, #16
 8015eba:	f000 faa3 	bl	8016404 <core_set_error>
 8015ebe:	e6fd      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015ec0:	9d03      	ldr	r5, [sp, #12]
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	2221      	movs	r2, #33	; 0x21
 8015ec6:	2112      	movs	r1, #18
 8015ec8:	f105 0010 	add.w	r0, r5, #16
 8015ecc:	f000 fa9a 	bl	8016404 <core_set_error>
 8015ed0:	e6f4      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015ed2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015ed6:	82ab      	strh	r3, [r5, #20]
 8015ed8:	e742      	b.n	8015d60 <ai_platform_network_process+0x3f0>
 8015eda:	2700      	movs	r7, #0
 8015edc:	e745      	b.n	8015d6a <ai_platform_network_process+0x3fa>
 8015ede:	4604      	mov	r4, r0
 8015ee0:	2217      	movs	r2, #23
 8015ee2:	2113      	movs	r1, #19
 8015ee4:	f105 0010 	add.w	r0, r5, #16
 8015ee8:	f000 fa8c 	bl	8016404 <core_set_error>
 8015eec:	e6e6      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015eee:	2219      	movs	r2, #25
 8015ef0:	2113      	movs	r1, #19
 8015ef2:	f105 0010 	add.w	r0, r5, #16
 8015ef6:	2400      	movs	r4, #0
 8015ef8:	f000 fa84 	bl	8016404 <core_set_error>
 8015efc:	e6de      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015efe:	4604      	mov	r4, r0
 8015f00:	2221      	movs	r2, #33	; 0x21
 8015f02:	2113      	movs	r1, #19
 8015f04:	f105 0010 	add.w	r0, r5, #16
 8015f08:	f000 fa7c 	bl	8016404 <core_set_error>
 8015f0c:	e6d6      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015f0e:	2217      	movs	r2, #23
 8015f10:	2113      	movs	r1, #19
 8015f12:	f105 0010 	add.w	r0, r5, #16
 8015f16:	4654      	mov	r4, sl
 8015f18:	f000 fa74 	bl	8016404 <core_set_error>
 8015f1c:	e6ce      	b.n	8015cbc <ai_platform_network_process+0x34c>
 8015f1e:	bf00      	nop
 8015f20:	58024000 	.word	0x58024000
 8015f24:	f407a5c2 	.word	0xf407a5c2
 8015f28:	b5e8b5cd 	.word	0xb5e8b5cd

08015f2c <node_convert>:
 8015f2c:	6982      	ldr	r2, [r0, #24]
 8015f2e:	8813      	ldrh	r3, [r2, #0]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d04a      	beq.n	8015fca <node_convert+0x9e>
 8015f34:	6852      	ldr	r2, [r2, #4]
 8015f36:	6850      	ldr	r0, [r2, #4]
 8015f38:	b100      	cbz	r0, 8015f3c <node_convert+0x10>
 8015f3a:	6800      	ldr	r0, [r0, #0]
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	f000 813d 	beq.w	80161bc <node_convert+0x290>
 8015f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f46:	6915      	ldr	r5, [r2, #16]
 8015f48:	b105      	cbz	r5, 8015f4c <node_convert+0x20>
 8015f4a:	682d      	ldr	r5, [r5, #0]
 8015f4c:	6883      	ldr	r3, [r0, #8]
 8015f4e:	0a1b      	lsrs	r3, r3, #8
 8015f50:	f000 80ee 	beq.w	8016130 <node_convert+0x204>
 8015f54:	68c1      	ldr	r1, [r0, #12]
 8015f56:	2401      	movs	r4, #1
 8015f58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015f5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015f60:	4299      	cmp	r1, r3
 8015f62:	fb02 f404 	mul.w	r4, r2, r4
 8015f66:	d1f9      	bne.n	8015f5c <node_convert+0x30>
 8015f68:	6982      	ldr	r2, [r0, #24]
 8015f6a:	69af      	ldr	r7, [r5, #24]
 8015f6c:	6813      	ldr	r3, [r2, #0]
 8015f6e:	f3c3 4143 	ubfx	r1, r3, #17, #4
 8015f72:	2901      	cmp	r1, #1
 8015f74:	d02b      	beq.n	8015fce <node_convert+0xa2>
 8015f76:	6801      	ldr	r1, [r0, #0]
 8015f78:	68bd      	ldr	r5, [r7, #8]
 8015f7a:	2900      	cmp	r1, #0
 8015f7c:	d069      	beq.n	8016052 <node_convert+0x126>
 8015f7e:	684e      	ldr	r6, [r1, #4]
 8015f80:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 8015f84:	6892      	ldr	r2, [r2, #8]
 8015f86:	2e00      	cmp	r6, #0
 8015f88:	f000 80b8 	beq.w	80160fc <node_convert+0x1d0>
 8015f8c:	884b      	ldrh	r3, [r1, #2]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	f000 8089 	beq.w	80160a6 <node_convert+0x17a>
 8015f94:	6833      	ldr	r3, [r6, #0]
 8015f96:	ed93 7a00 	vldr	s14, [r3]
 8015f9a:	6873      	ldr	r3, [r6, #4]
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	f000 80c5 	beq.w	801612c <node_convert+0x200>
 8015fa2:	f993 0000 	ldrsb.w	r0, [r3]
 8015fa6:	b174      	cbz	r4, 8015fc6 <node_convert+0x9a>
 8015fa8:	4629      	mov	r1, r5
 8015faa:	4414      	add	r4, r2
 8015fac:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8015fb0:	1a1b      	subs	r3, r3, r0
 8015fb2:	42a2      	cmp	r2, r4
 8015fb4:	ee07 3a90 	vmov	s15, r3
 8015fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015fc0:	ece1 7a01 	vstmia	r1!, {s15}
 8015fc4:	d1f2      	bne.n	8015fac <node_convert+0x80>
 8015fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	deff      	udf	#255	; 0xff
 8015fce:	682e      	ldr	r6, [r5, #0]
 8015fd0:	6895      	ldr	r5, [r2, #8]
 8015fd2:	2e00      	cmp	r6, #0
 8015fd4:	f000 80ae 	beq.w	8016134 <node_convert+0x208>
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	6871      	ldr	r1, [r6, #4]
 8015fdc:	68ba      	ldr	r2, [r7, #8]
 8015fde:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8015fe2:	2900      	cmp	r1, #0
 8015fe4:	d064      	beq.n	80160b0 <node_convert+0x184>
 8015fe6:	8870      	ldrh	r0, [r6, #2]
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d067      	beq.n	80160bc <node_convert+0x190>
 8015fec:	6808      	ldr	r0, [r1, #0]
 8015fee:	edd0 7a00 	vldr	s15, [r0]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	f000 80d7 	beq.w	80161a6 <node_convert+0x27a>
 8015ff8:	684b      	ldr	r3, [r1, #4]
 8015ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8015ffe:	ee06 3a90 	vmov	s13, r3
 8016002:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016006:	2c00      	cmp	r4, #0
 8016008:	d0dd      	beq.n	8015fc6 <node_convert+0x9a>
 801600a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801600e:	4414      	add	r4, r2
 8016010:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016014:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 80161c4 <node_convert+0x298>
 8016018:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801601c:	ecb5 7a01 	vldmia	r5!, {s14}
 8016020:	eef0 7a66 	vmov.f32	s15, s13
 8016024:	eee7 7a06 	vfma.f32	s15, s14, s12
 8016028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801602c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016030:	bfac      	ite	ge
 8016032:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 8016036:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 801603a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801603e:	ee17 3a90 	vmov	r3, s15
 8016042:	f303 0307 	ssat	r3, #8, r3
 8016046:	f802 3b01 	strb.w	r3, [r2], #1
 801604a:	42a2      	cmp	r2, r4
 801604c:	d1e6      	bne.n	801601c <node_convert+0xf0>
 801604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016052:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8016056:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801605a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 801605e:	6890      	ldr	r0, [r2, #8]
 8016060:	1b8e      	subs	r6, r1, r6
 8016062:	2908      	cmp	r1, #8
 8016064:	4622      	mov	r2, r4
 8016066:	4629      	mov	r1, r5
 8016068:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801606c:	eba6 0603 	sub.w	r6, r6, r3
 8016070:	f000 808b 	beq.w	801618a <node_convert+0x25e>
 8016074:	f007 f83a 	bl	801d0ec <arm_q15_to_float>
 8016078:	2e00      	cmp	r6, #0
 801607a:	d0a4      	beq.n	8015fc6 <node_convert+0x9a>
 801607c:	ee07 6a90 	vmov	s15, r6
 8016080:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8016084:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8016088:	f007 fc3e 	bl	801d908 <powf>
 801608c:	2c00      	cmp	r4, #0
 801608e:	d09a      	beq.n	8015fc6 <node_convert+0x9a>
 8016090:	2300      	movs	r3, #0
 8016092:	ecf5 7a01 	vldmia	r5!, {s15}
 8016096:	3301      	adds	r3, #1
 8016098:	ee67 7a80 	vmul.f32	s15, s15, s0
 801609c:	429c      	cmp	r4, r3
 801609e:	ed45 7a01 	vstr	s15, [r5, #-4]
 80160a2:	d1f6      	bne.n	8016092 <node_convert+0x166>
 80160a4:	e78f      	b.n	8015fc6 <node_convert+0x9a>
 80160a6:	b358      	cbz	r0, 8016100 <node_convert+0x1d4>
 80160a8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80161c8 <node_convert+0x29c>
 80160ac:	4618      	mov	r0, r3
 80160ae:	e77a      	b.n	8015fa6 <node_convert+0x7a>
 80160b0:	b133      	cbz	r3, 80160c0 <node_convert+0x194>
 80160b2:	eddf 6a45 	vldr	s13, [pc, #276]	; 80161c8 <node_convert+0x29c>
 80160b6:	eef0 7a66 	vmov.f32	s15, s13
 80160ba:	e7a4      	b.n	8016006 <node_convert+0xda>
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d1f8      	bne.n	80160b2 <node_convert+0x186>
 80160c0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80160c4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80161c8 <node_convert+0x29c>
 80160c8:	2c00      	cmp	r4, #0
 80160ca:	f43f af7c 	beq.w	8015fc6 <node_convert+0x9a>
 80160ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80160d2:	4414      	add	r4, r2
 80160d4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80160d8:	ecb5 7a01 	vldmia	r5!, {s14}
 80160dc:	eef0 7a66 	vmov.f32	s15, s13
 80160e0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80160e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80160e8:	ee17 3a90 	vmov	r3, s15
 80160ec:	f383 0308 	usat	r3, #8, r3
 80160f0:	f802 3b01 	strb.w	r3, [r2], #1
 80160f4:	42a2      	cmp	r2, r4
 80160f6:	d1ef      	bne.n	80160d8 <node_convert+0x1ac>
 80160f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d147      	bne.n	8016190 <node_convert+0x264>
 8016100:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80161c8 <node_convert+0x29c>
 8016104:	2c00      	cmp	r4, #0
 8016106:	f43f af5e 	beq.w	8015fc6 <node_convert+0x9a>
 801610a:	4629      	mov	r1, r5
 801610c:	4414      	add	r4, r2
 801610e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8016112:	1a1b      	subs	r3, r3, r0
 8016114:	42a2      	cmp	r2, r4
 8016116:	ee07 3a90 	vmov	s15, r3
 801611a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801611e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016122:	ece1 7a01 	vstmia	r1!, {s15}
 8016126:	d1f2      	bne.n	801610e <node_convert+0x1e2>
 8016128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801612c:	7818      	ldrb	r0, [r3, #0]
 801612e:	e7e9      	b.n	8016104 <node_convert+0x1d8>
 8016130:	2401      	movs	r4, #1
 8016132:	e719      	b.n	8015f68 <node_convert+0x3c>
 8016134:	683a      	ldr	r2, [r7, #0]
 8016136:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 801613a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 801613e:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8016142:	eba8 0303 	sub.w	r3, r8, r3
 8016146:	3340      	adds	r3, #64	; 0x40
 8016148:	1a9b      	subs	r3, r3, r2
 801614a:	d014      	beq.n	8016176 <node_convert+0x24a>
 801614c:	425b      	negs	r3, r3
 801614e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8016152:	ee00 3a90 	vmov	s1, r3
 8016156:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801615a:	f007 fbd5 	bl	801d908 <powf>
 801615e:	b154      	cbz	r4, 8016176 <node_convert+0x24a>
 8016160:	4633      	mov	r3, r6
 8016162:	462a      	mov	r2, r5
 8016164:	ecf2 7a01 	vldmia	r2!, {s15}
 8016168:	3301      	adds	r3, #1
 801616a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801616e:	42a3      	cmp	r3, r4
 8016170:	ed42 7a01 	vstr	s15, [r2, #-4]
 8016174:	d1f6      	bne.n	8016164 <node_convert+0x238>
 8016176:	f1b8 0f08 	cmp.w	r8, #8
 801617a:	d00d      	beq.n	8016198 <node_convert+0x26c>
 801617c:	4622      	mov	r2, r4
 801617e:	68b9      	ldr	r1, [r7, #8]
 8016180:	4628      	mov	r0, r5
 8016182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016186:	f006 be2f 	b.w	801cde8 <arm_float_to_q15>
 801618a:	f007 f815 	bl	801d1b8 <arm_q7_to_float>
 801618e:	e773      	b.n	8016078 <node_convert+0x14c>
 8016190:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80161c8 <node_convert+0x29c>
 8016194:	4630      	mov	r0, r6
 8016196:	e706      	b.n	8015fa6 <node_convert+0x7a>
 8016198:	4622      	mov	r2, r4
 801619a:	68b9      	ldr	r1, [r7, #8]
 801619c:	4628      	mov	r0, r5
 801619e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161a2:	f006 bed7 	b.w	801cf54 <arm_float_to_q7>
 80161a6:	684b      	ldr	r3, [r1, #4]
 80161a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	ee06 3a90 	vmov	s13, r3
 80161b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80161b6:	ee76 6a87 	vadd.f32	s13, s13, s14
 80161ba:	e785      	b.n	80160c8 <node_convert+0x19c>
 80161bc:	2300      	movs	r3, #0
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	deff      	udf	#255	; 0xff
 80161c2:	bf00      	nop
 80161c4:	3efffffc 	.word	0x3efffffc
 80161c8:	00000000 	.word	0x00000000

080161cc <node_convert_integer>:
 80161cc:	6982      	ldr	r2, [r0, #24]
 80161ce:	8813      	ldrh	r3, [r2, #0]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d058      	beq.n	8016286 <node_convert_integer+0xba>
 80161d4:	b570      	push	{r4, r5, r6, lr}
 80161d6:	6852      	ldr	r2, [r2, #4]
 80161d8:	b082      	sub	sp, #8
 80161da:	6856      	ldr	r6, [r2, #4]
 80161dc:	b106      	cbz	r6, 80161e0 <node_convert_integer+0x14>
 80161de:	6836      	ldr	r6, [r6, #0]
 80161e0:	2b01      	cmp	r3, #1
 80161e2:	f000 8100 	beq.w	80163e6 <node_convert_integer+0x21a>
 80161e6:	6915      	ldr	r5, [r2, #16]
 80161e8:	b105      	cbz	r5, 80161ec <node_convert_integer+0x20>
 80161ea:	682d      	ldr	r5, [r5, #0]
 80161ec:	68b3      	ldr	r3, [r6, #8]
 80161ee:	0a1b      	lsrs	r3, r3, #8
 80161f0:	f000 80d3 	beq.w	801639a <node_convert_integer+0x1ce>
 80161f4:	68f0      	ldr	r0, [r6, #12]
 80161f6:	2201      	movs	r2, #1
 80161f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80161fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016200:	4298      	cmp	r0, r3
 8016202:	fb01 f202 	mul.w	r2, r1, r2
 8016206:	d1f9      	bne.n	80161fc <node_convert_integer+0x30>
 8016208:	6833      	ldr	r3, [r6, #0]
 801620a:	682c      	ldr	r4, [r5, #0]
 801620c:	b17b      	cbz	r3, 801622e <node_convert_integer+0x62>
 801620e:	6859      	ldr	r1, [r3, #4]
 8016210:	b169      	cbz	r1, 801622e <node_convert_integer+0x62>
 8016212:	8858      	ldrh	r0, [r3, #2]
 8016214:	b158      	cbz	r0, 801622e <node_convert_integer+0x62>
 8016216:	6809      	ldr	r1, [r1, #0]
 8016218:	ed91 7a00 	vldr	s14, [r1]
 801621c:	b15c      	cbz	r4, 8016236 <node_convert_integer+0x6a>
 801621e:	6861      	ldr	r1, [r4, #4]
 8016220:	b149      	cbz	r1, 8016236 <node_convert_integer+0x6a>
 8016222:	8860      	ldrh	r0, [r4, #2]
 8016224:	b138      	cbz	r0, 8016236 <node_convert_integer+0x6a>
 8016226:	6809      	ldr	r1, [r1, #0]
 8016228:	edd1 7a00 	vldr	s15, [r1]
 801622c:	e005      	b.n	801623a <node_convert_integer+0x6e>
 801622e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80163ec <node_convert_integer+0x220>
 8016232:	2c00      	cmp	r4, #0
 8016234:	d1f3      	bne.n	801621e <node_convert_integer+0x52>
 8016236:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80163ec <node_convert_integer+0x220>
 801623a:	69b0      	ldr	r0, [r6, #24]
 801623c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016240:	69ad      	ldr	r5, [r5, #24]
 8016242:	6806      	ldr	r6, [r0, #0]
 8016244:	6829      	ldr	r1, [r5, #0]
 8016246:	0236      	lsls	r6, r6, #8
 8016248:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 801624c:	d41d      	bmi.n	801628a <node_convert_integer+0xbe>
 801624e:	2900      	cmp	r1, #0
 8016250:	f040 8081 	bne.w	8016356 <node_convert_integer+0x18a>
 8016254:	6880      	ldr	r0, [r0, #8]
 8016256:	68a9      	ldr	r1, [r5, #8]
 8016258:	b13b      	cbz	r3, 801626a <node_convert_integer+0x9e>
 801625a:	685d      	ldr	r5, [r3, #4]
 801625c:	2d00      	cmp	r5, #0
 801625e:	f000 80a7 	beq.w	80163b0 <node_convert_integer+0x1e4>
 8016262:	885b      	ldrh	r3, [r3, #2]
 8016264:	b10b      	cbz	r3, 801626a <node_convert_integer+0x9e>
 8016266:	686b      	ldr	r3, [r5, #4]
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	b13c      	cbz	r4, 801627c <node_convert_integer+0xb0>
 801626c:	6865      	ldr	r5, [r4, #4]
 801626e:	2d00      	cmp	r5, #0
 8016270:	f000 80ad 	beq.w	80163ce <node_convert_integer+0x202>
 8016274:	8864      	ldrh	r4, [r4, #2]
 8016276:	b10c      	cbz	r4, 801627c <node_convert_integer+0xb0>
 8016278:	686c      	ldr	r4, [r5, #4]
 801627a:	7824      	ldrb	r4, [r4, #0]
 801627c:	9400      	str	r4, [sp, #0]
 801627e:	f002 f8bb 	bl	80183f8 <forward_lite_node_convert_integer_iu8ou8>
 8016282:	b002      	add	sp, #8
 8016284:	bd70      	pop	{r4, r5, r6, pc}
 8016286:	685b      	ldr	r3, [r3, #4]
 8016288:	deff      	udf	#255	; 0xff
 801628a:	2900      	cmp	r1, #0
 801628c:	d042      	beq.n	8016314 <node_convert_integer+0x148>
 801628e:	6886      	ldr	r6, [r0, #8]
 8016290:	68a9      	ldr	r1, [r5, #8]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d07f      	beq.n	8016396 <node_convert_integer+0x1ca>
 8016296:	6858      	ldr	r0, [r3, #4]
 8016298:	2800      	cmp	r0, #0
 801629a:	f000 8092 	beq.w	80163c2 <node_convert_integer+0x1f6>
 801629e:	885d      	ldrh	r5, [r3, #2]
 80162a0:	b115      	cbz	r5, 80162a8 <node_convert_integer+0xdc>
 80162a2:	6843      	ldr	r3, [r0, #4]
 80162a4:	f993 5000 	ldrsb.w	r5, [r3]
 80162a8:	2c00      	cmp	r4, #0
 80162aa:	d078      	beq.n	801639e <node_convert_integer+0x1d2>
 80162ac:	6863      	ldr	r3, [r4, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d07b      	beq.n	80163aa <node_convert_integer+0x1de>
 80162b2:	8860      	ldrh	r0, [r4, #2]
 80162b4:	2800      	cmp	r0, #0
 80162b6:	d075      	beq.n	80163a4 <node_convert_integer+0x1d8>
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	f993 3000 	ldrsb.w	r3, [r3]
 80162be:	ee06 3a90 	vmov	s13, r3
 80162c2:	2a00      	cmp	r2, #0
 80162c4:	d0dd      	beq.n	8016282 <node_convert_integer+0xb6>
 80162c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80162ca:	4432      	add	r2, r6
 80162cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80162d0:	eddf 5a47 	vldr	s11, [pc, #284]	; 80163f0 <node_convert_integer+0x224>
 80162d4:	f916 3b01 	ldrsb.w	r3, [r6], #1
 80162d8:	1b5b      	subs	r3, r3, r5
 80162da:	ee07 3a90 	vmov	s15, r3
 80162de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162e2:	eef0 7a66 	vmov.f32	s15, s13
 80162e6:	eee7 7a00 	vfma.f32	s15, s14, s0
 80162ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80162ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f2:	bfcc      	ite	gt
 80162f4:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 80162f8:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 80162fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016300:	ee17 3a90 	vmov	r3, s15
 8016304:	f303 0307 	ssat	r3, #8, r3
 8016308:	4296      	cmp	r6, r2
 801630a:	f801 3b01 	strb.w	r3, [r1], #1
 801630e:	d1e1      	bne.n	80162d4 <node_convert_integer+0x108>
 8016310:	b002      	add	sp, #8
 8016312:	bd70      	pop	{r4, r5, r6, pc}
 8016314:	6880      	ldr	r0, [r0, #8]
 8016316:	68a9      	ldr	r1, [r5, #8]
 8016318:	b13b      	cbz	r3, 801632a <node_convert_integer+0x15e>
 801631a:	685d      	ldr	r5, [r3, #4]
 801631c:	2d00      	cmp	r5, #0
 801631e:	d04c      	beq.n	80163ba <node_convert_integer+0x1ee>
 8016320:	885b      	ldrh	r3, [r3, #2]
 8016322:	b113      	cbz	r3, 801632a <node_convert_integer+0x15e>
 8016324:	686b      	ldr	r3, [r5, #4]
 8016326:	f993 3000 	ldrsb.w	r3, [r3]
 801632a:	b134      	cbz	r4, 801633a <node_convert_integer+0x16e>
 801632c:	6865      	ldr	r5, [r4, #4]
 801632e:	2d00      	cmp	r5, #0
 8016330:	d04b      	beq.n	80163ca <node_convert_integer+0x1fe>
 8016332:	8864      	ldrh	r4, [r4, #2]
 8016334:	b10c      	cbz	r4, 801633a <node_convert_integer+0x16e>
 8016336:	686c      	ldr	r4, [r5, #4]
 8016338:	7824      	ldrb	r4, [r4, #0]
 801633a:	eeb4 7a67 	vcmp.f32	s14, s15
 801633e:	9400      	str	r4, [sp, #0]
 8016340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016344:	d103      	bne.n	801634e <node_convert_integer+0x182>
 8016346:	f103 0580 	add.w	r5, r3, #128	; 0x80
 801634a:	42a5      	cmp	r5, r4
 801634c:	d048      	beq.n	80163e0 <node_convert_integer+0x214>
 801634e:	f002 f8f5 	bl	801853c <forward_lite_node_convert_integer_is8ou8>
 8016352:	b002      	add	sp, #8
 8016354:	bd70      	pop	{r4, r5, r6, pc}
 8016356:	b133      	cbz	r3, 8016366 <node_convert_integer+0x19a>
 8016358:	6859      	ldr	r1, [r3, #4]
 801635a:	2900      	cmp	r1, #0
 801635c:	d039      	beq.n	80163d2 <node_convert_integer+0x206>
 801635e:	885b      	ldrh	r3, [r3, #2]
 8016360:	b10b      	cbz	r3, 8016366 <node_convert_integer+0x19a>
 8016362:	684b      	ldr	r3, [r1, #4]
 8016364:	781b      	ldrb	r3, [r3, #0]
 8016366:	b134      	cbz	r4, 8016376 <node_convert_integer+0x1aa>
 8016368:	6861      	ldr	r1, [r4, #4]
 801636a:	b361      	cbz	r1, 80163c6 <node_convert_integer+0x1fa>
 801636c:	8864      	ldrh	r4, [r4, #2]
 801636e:	b114      	cbz	r4, 8016376 <node_convert_integer+0x1aa>
 8016370:	6849      	ldr	r1, [r1, #4]
 8016372:	f991 4000 	ldrsb.w	r4, [r1]
 8016376:	eeb4 7a67 	vcmp.f32	s14, s15
 801637a:	6880      	ldr	r0, [r0, #8]
 801637c:	68a9      	ldr	r1, [r5, #8]
 801637e:	9400      	str	r4, [sp, #0]
 8016380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016384:	d103      	bne.n	801638e <node_convert_integer+0x1c2>
 8016386:	f104 0580 	add.w	r5, r4, #128	; 0x80
 801638a:	42ab      	cmp	r3, r5
 801638c:	d025      	beq.n	80163da <node_convert_integer+0x20e>
 801638e:	f002 f85d 	bl	801844c <forward_lite_node_convert_integer_iu8os8>
 8016392:	b002      	add	sp, #8
 8016394:	bd70      	pop	{r4, r5, r6, pc}
 8016396:	461d      	mov	r5, r3
 8016398:	e786      	b.n	80162a8 <node_convert_integer+0xdc>
 801639a:	2201      	movs	r2, #1
 801639c:	e734      	b.n	8016208 <node_convert_integer+0x3c>
 801639e:	ee06 4a90 	vmov	s13, r4
 80163a2:	e78e      	b.n	80162c2 <node_convert_integer+0xf6>
 80163a4:	ee06 0a90 	vmov	s13, r0
 80163a8:	e78b      	b.n	80162c2 <node_convert_integer+0xf6>
 80163aa:	ee06 3a90 	vmov	s13, r3
 80163ae:	e788      	b.n	80162c2 <node_convert_integer+0xf6>
 80163b0:	462b      	mov	r3, r5
 80163b2:	2c00      	cmp	r4, #0
 80163b4:	f47f af5a 	bne.w	801626c <node_convert_integer+0xa0>
 80163b8:	e760      	b.n	801627c <node_convert_integer+0xb0>
 80163ba:	462b      	mov	r3, r5
 80163bc:	2c00      	cmp	r4, #0
 80163be:	d1b5      	bne.n	801632c <node_convert_integer+0x160>
 80163c0:	e7bb      	b.n	801633a <node_convert_integer+0x16e>
 80163c2:	4605      	mov	r5, r0
 80163c4:	e770      	b.n	80162a8 <node_convert_integer+0xdc>
 80163c6:	460c      	mov	r4, r1
 80163c8:	e7d5      	b.n	8016376 <node_convert_integer+0x1aa>
 80163ca:	462c      	mov	r4, r5
 80163cc:	e7b5      	b.n	801633a <node_convert_integer+0x16e>
 80163ce:	462c      	mov	r4, r5
 80163d0:	e754      	b.n	801627c <node_convert_integer+0xb0>
 80163d2:	460b      	mov	r3, r1
 80163d4:	2c00      	cmp	r4, #0
 80163d6:	d1c7      	bne.n	8016368 <node_convert_integer+0x19c>
 80163d8:	e7cd      	b.n	8016376 <node_convert_integer+0x1aa>
 80163da:	f002 f877 	bl	80184cc <forward_lite_node_convert_integer_iu8os8_fast>
 80163de:	e750      	b.n	8016282 <node_convert_integer+0xb6>
 80163e0:	f002 f8d6 	bl	8018590 <forward_lite_node_convert_integer_is8ou8_fast>
 80163e4:	e74d      	b.n	8016282 <node_convert_integer+0xb6>
 80163e6:	2300      	movs	r3, #0
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	deff      	udf	#255	; 0xff
 80163ec:	00000000 	.word	0x00000000
 80163f0:	3efffffc 	.word	0x3efffffc

080163f4 <core_init>:
 80163f4:	2001      	movs	r0, #1
 80163f6:	4770      	bx	lr

080163f8 <core_get_error>:
 80163f8:	4603      	mov	r3, r0
 80163fa:	2200      	movs	r2, #0
 80163fc:	6800      	ldr	r0, [r0, #0]
 80163fe:	601a      	str	r2, [r3, #0]
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop

08016404 <core_set_error>:
 8016404:	4603      	mov	r3, r0
 8016406:	7800      	ldrb	r0, [r0, #0]
 8016408:	b108      	cbz	r0, 801640e <core_set_error+0xa>
 801640a:	2000      	movs	r0, #0
 801640c:	4770      	bx	lr
 801640e:	7019      	strb	r1, [r3, #0]
 8016410:	2001      	movs	r0, #1
 8016412:	6819      	ldr	r1, [r3, #0]
 8016414:	f362 211f 	bfi	r1, r2, #8, #24
 8016418:	6019      	str	r1, [r3, #0]
 801641a:	4770      	bx	lr

0801641c <forward_sm>:
 801641c:	6982      	ldr	r2, [r0, #24]
 801641e:	8813      	ldrh	r3, [r2, #0]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d078      	beq.n	8016516 <forward_sm+0xfa>
 8016424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016428:	ed2d 8b04 	vpush	{d8-d9}
 801642c:	6852      	ldr	r2, [r2, #4]
 801642e:	b085      	sub	sp, #20
 8016430:	6854      	ldr	r4, [r2, #4]
 8016432:	b104      	cbz	r4, 8016436 <forward_sm+0x1a>
 8016434:	6824      	ldr	r4, [r4, #0]
 8016436:	2b01      	cmp	r3, #1
 8016438:	d072      	beq.n	8016520 <forward_sm+0x104>
 801643a:	6913      	ldr	r3, [r2, #16]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d072      	beq.n	8016526 <forward_sm+0x10a>
 8016440:	681e      	ldr	r6, [r3, #0]
 8016442:	68a3      	ldr	r3, [r4, #8]
 8016444:	68e0      	ldr	r0, [r4, #12]
 8016446:	68f2      	ldr	r2, [r6, #12]
 8016448:	0a1b      	lsrs	r3, r3, #8
 801644a:	6845      	ldr	r5, [r0, #4]
 801644c:	6857      	ldr	r7, [r2, #4]
 801644e:	d064      	beq.n	801651a <forward_sm+0xfe>
 8016450:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8016454:	2201      	movs	r2, #1
 8016456:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801645a:	4298      	cmp	r0, r3
 801645c:	fb01 f202 	mul.w	r2, r1, r2
 8016460:	d1f9      	bne.n	8016456 <forward_sm+0x3a>
 8016462:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8016466:	69a2      	ldr	r2, [r4, #24]
 8016468:	69b3      	ldr	r3, [r6, #24]
 801646a:	6892      	ldr	r2, [r2, #8]
 801646c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8016470:	eb02 0309 	add.w	r3, r2, r9
 8016474:	429a      	cmp	r2, r3
 8016476:	9301      	str	r3, [sp, #4]
 8016478:	d248      	bcs.n	801650c <forward_sm+0xf0>
 801647a:	00bb      	lsls	r3, r7, #2
 801647c:	2d01      	cmp	r5, #1
 801647e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8016482:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016486:	9303      	str	r3, [sp, #12]
 8016488:	ea4f 0385 	mov.w	r3, r5, lsl #2
 801648c:	463e      	mov	r6, r7
 801648e:	ed92 8a00 	vldr	s16, [r2]
 8016492:	9302      	str	r3, [sp, #8]
 8016494:	d937      	bls.n	8016506 <forward_sm+0xea>
 8016496:	1d13      	adds	r3, r2, #4
 8016498:	ecf3 7a01 	vldmia	r3!, {s15}
 801649c:	429e      	cmp	r6, r3
 801649e:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 80164a2:	d1f9      	bne.n	8016498 <forward_sm+0x7c>
 80164a4:	4692      	mov	sl, r2
 80164a6:	46c3      	mov	fp, r8
 80164a8:	46c1      	mov	r9, r8
 80164aa:	eddf 8a20 	vldr	s17, [pc, #128]	; 801652c <forward_sm+0x110>
 80164ae:	2400      	movs	r4, #0
 80164b0:	ecba 0a01 	vldmia	sl!, {s0}
 80164b4:	3401      	adds	r4, #1
 80164b6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80164ba:	f007 f999 	bl	801d7f0 <expf>
 80164be:	42a5      	cmp	r5, r4
 80164c0:	ee78 8a80 	vadd.f32	s17, s17, s0
 80164c4:	eca9 0a01 	vstmia	r9!, {s0}
 80164c8:	d8f2      	bhi.n	80164b0 <forward_sm+0x94>
 80164ca:	eef5 8a40 	vcmp.f32	s17, #0.0
 80164ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164d2:	d00b      	beq.n	80164ec <forward_sm+0xd0>
 80164d4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80164d8:	2300      	movs	r3, #0
 80164da:	eddb 7a00 	vldr	s15, [fp]
 80164de:	3301      	adds	r3, #1
 80164e0:	429d      	cmp	r5, r3
 80164e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164e6:	eceb 7a01 	vstmia	fp!, {s15}
 80164ea:	d8f6      	bhi.n	80164da <forward_sm+0xbe>
 80164ec:	9b03      	ldr	r3, [sp, #12]
 80164ee:	463a      	mov	r2, r7
 80164f0:	9901      	ldr	r1, [sp, #4]
 80164f2:	4498      	add	r8, r3
 80164f4:	9b02      	ldr	r3, [sp, #8]
 80164f6:	42b9      	cmp	r1, r7
 80164f8:	441e      	add	r6, r3
 80164fa:	d907      	bls.n	801650c <forward_sm+0xf0>
 80164fc:	2d01      	cmp	r5, #1
 80164fe:	441f      	add	r7, r3
 8016500:	ed92 8a00 	vldr	s16, [r2]
 8016504:	d8c7      	bhi.n	8016496 <forward_sm+0x7a>
 8016506:	2d00      	cmp	r5, #0
 8016508:	d0f0      	beq.n	80164ec <forward_sm+0xd0>
 801650a:	e7cb      	b.n	80164a4 <forward_sm+0x88>
 801650c:	b005      	add	sp, #20
 801650e:	ecbd 8b04 	vpop	{d8-d9}
 8016512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016516:	685b      	ldr	r3, [r3, #4]
 8016518:	deff      	udf	#255	; 0xff
 801651a:	f04f 0904 	mov.w	r9, #4
 801651e:	e7a2      	b.n	8016466 <forward_sm+0x4a>
 8016520:	2300      	movs	r3, #0
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	deff      	udf	#255	; 0xff
 8016526:	68db      	ldr	r3, [r3, #12]
 8016528:	deff      	udf	#255	; 0xff
 801652a:	bf00      	nop
 801652c:	00000000 	.word	0x00000000

08016530 <forward_tile>:
 8016530:	6983      	ldr	r3, [r0, #24]
 8016532:	881a      	ldrh	r2, [r3, #0]
 8016534:	2a00      	cmp	r2, #0
 8016536:	d065      	beq.n	8016604 <forward_tile+0xd4>
 8016538:	6859      	ldr	r1, [r3, #4]
 801653a:	684b      	ldr	r3, [r1, #4]
 801653c:	b103      	cbz	r3, 8016540 <forward_tile+0x10>
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2a01      	cmp	r2, #1
 8016542:	d061      	beq.n	8016608 <forward_tile+0xd8>
 8016544:	690a      	ldr	r2, [r1, #16]
 8016546:	2a00      	cmp	r2, #0
 8016548:	d061      	beq.n	801660e <forward_tile+0xde>
 801654a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654e:	69c4      	ldr	r4, [r0, #28]
 8016550:	b08b      	sub	sp, #44	; 0x2c
 8016552:	68d9      	ldr	r1, [r3, #12]
 8016554:	6810      	ldr	r0, [r2, #0]
 8016556:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801655a:	68a2      	ldr	r2, [r4, #8]
 801655c:	68cc      	ldr	r4, [r1, #12]
 801655e:	6980      	ldr	r0, [r0, #24]
 8016560:	8895      	ldrh	r5, [r2, #4]
 8016562:	6887      	ldr	r7, [r0, #8]
 8016564:	8850      	ldrh	r0, [r2, #2]
 8016566:	9408      	str	r4, [sp, #32]
 8016568:	9003      	str	r0, [sp, #12]
 801656a:	e9d3 1305 	ldrd	r1, r3, [r3, #20]
 801656e:	689b      	ldr	r3, [r3, #8]
 8016570:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8016574:	9304      	str	r3, [sp, #16]
 8016576:	8813      	ldrh	r3, [r2, #0]
 8016578:	68ca      	ldr	r2, [r1, #12]
 801657a:	9307      	str	r3, [sp, #28]
 801657c:	9209      	str	r2, [sp, #36]	; 0x24
 801657e:	2b00      	cmp	r3, #0
 8016580:	d03d      	beq.n	80165fe <forward_tile+0xce>
 8016582:	2c00      	cmp	r4, #0
 8016584:	d03b      	beq.n	80165fe <forward_tile+0xce>
 8016586:	fb05 f30a 	mul.w	r3, r5, sl
 801658a:	9300      	str	r3, [sp, #0]
 801658c:	2300      	movs	r3, #0
 801658e:	9305      	str	r3, [sp, #20]
 8016590:	2300      	movs	r3, #0
 8016592:	9302      	str	r3, [sp, #8]
 8016594:	9306      	str	r3, [sp, #24]
 8016596:	9b03      	ldr	r3, [sp, #12]
 8016598:	b30b      	cbz	r3, 80165de <forward_tile+0xae>
 801659a:	2300      	movs	r3, #0
 801659c:	9301      	str	r3, [sp, #4]
 801659e:	f1b8 0f00 	cmp.w	r8, #0
 80165a2:	d016      	beq.n	80165d2 <forward_tile+0xa2>
 80165a4:	9b04      	ldr	r3, [sp, #16]
 80165a6:	2600      	movs	r6, #0
 80165a8:	9a02      	ldr	r2, [sp, #8]
 80165aa:	eb03 0b02 	add.w	fp, r3, r2
 80165ae:	b165      	cbz	r5, 80165ca <forward_tile+0x9a>
 80165b0:	46b9      	mov	r9, r7
 80165b2:	2400      	movs	r4, #0
 80165b4:	3401      	adds	r4, #1
 80165b6:	4648      	mov	r0, r9
 80165b8:	4652      	mov	r2, sl
 80165ba:	4659      	mov	r1, fp
 80165bc:	f007 fb46 	bl	801dc4c <memcpy>
 80165c0:	42ac      	cmp	r4, r5
 80165c2:	44d1      	add	r9, sl
 80165c4:	d1f6      	bne.n	80165b4 <forward_tile+0x84>
 80165c6:	9b00      	ldr	r3, [sp, #0]
 80165c8:	441f      	add	r7, r3
 80165ca:	3601      	adds	r6, #1
 80165cc:	44d3      	add	fp, sl
 80165ce:	45b0      	cmp	r8, r6
 80165d0:	d1ed      	bne.n	80165ae <forward_tile+0x7e>
 80165d2:	9b01      	ldr	r3, [sp, #4]
 80165d4:	9a03      	ldr	r2, [sp, #12]
 80165d6:	3301      	adds	r3, #1
 80165d8:	4293      	cmp	r3, r2
 80165da:	9301      	str	r3, [sp, #4]
 80165dc:	d1df      	bne.n	801659e <forward_tile+0x6e>
 80165de:	9a02      	ldr	r2, [sp, #8]
 80165e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165e2:	9b06      	ldr	r3, [sp, #24]
 80165e4:	440a      	add	r2, r1
 80165e6:	3301      	adds	r3, #1
 80165e8:	9202      	str	r2, [sp, #8]
 80165ea:	9a08      	ldr	r2, [sp, #32]
 80165ec:	9306      	str	r3, [sp, #24]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d1d1      	bne.n	8016596 <forward_tile+0x66>
 80165f2:	9b05      	ldr	r3, [sp, #20]
 80165f4:	9a07      	ldr	r2, [sp, #28]
 80165f6:	3301      	adds	r3, #1
 80165f8:	429a      	cmp	r2, r3
 80165fa:	9305      	str	r3, [sp, #20]
 80165fc:	d1c8      	bne.n	8016590 <forward_tile+0x60>
 80165fe:	b00b      	add	sp, #44	; 0x2c
 8016600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016604:	6853      	ldr	r3, [r2, #4]
 8016606:	deff      	udf	#255	; 0xff
 8016608:	2300      	movs	r3, #0
 801660a:	685b      	ldr	r3, [r3, #4]
 801660c:	deff      	udf	#255	; 0xff
 801660e:	6993      	ldr	r3, [r2, #24]
 8016610:	deff      	udf	#255	; 0xff
 8016612:	bf00      	nop

08016614 <forward_pad>:
 8016614:	6982      	ldr	r2, [r0, #24]
 8016616:	8813      	ldrh	r3, [r2, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d052      	beq.n	80166c2 <forward_pad+0xae>
 801661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016620:	ed2d 8b02 	vpush	{d8}
 8016624:	6852      	ldr	r2, [r2, #4]
 8016626:	b091      	sub	sp, #68	; 0x44
 8016628:	6857      	ldr	r7, [r2, #4]
 801662a:	b107      	cbz	r7, 801662e <forward_pad+0x1a>
 801662c:	683f      	ldr	r7, [r7, #0]
 801662e:	2b01      	cmp	r3, #1
 8016630:	f000 81e7 	beq.w	8016a02 <forward_pad+0x3ee>
 8016634:	6913      	ldr	r3, [r2, #16]
 8016636:	2b00      	cmp	r3, #0
 8016638:	f000 81e1 	beq.w	80169fe <forward_pad+0x3ea>
 801663c:	681d      	ldr	r5, [r3, #0]
 801663e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8016642:	68aa      	ldr	r2, [r5, #8]
 8016644:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016646:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801664a:	f8de 100c 	ldr.w	r1, [lr, #12]
 801664e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8016652:	bf38      	it	cc
 8016654:	2201      	movcc	r2, #1
 8016656:	9102      	str	r1, [sp, #8]
 8016658:	bf28      	it	cs
 801665a:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 801665e:	f9b6 1000 	ldrsh.w	r1, [r6]
 8016662:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 8016666:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801666a:	9103      	str	r1, [sp, #12]
 801666c:	9201      	str	r2, [sp, #4]
 801666e:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8016672:	7f03      	ldrb	r3, [r0, #28]
 8016674:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 8016678:	2b01      	cmp	r3, #1
 801667a:	6895      	ldr	r5, [r2, #8]
 801667c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8016680:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 8016684:	68f7      	ldr	r7, [r6, #12]
 8016686:	f8dc 8008 	ldr.w	r8, [ip, #8]
 801668a:	fb07 f404 	mul.w	r4, r7, r4
 801668e:	463e      	mov	r6, r7
 8016690:	9708      	str	r7, [sp, #32]
 8016692:	9f03      	ldr	r7, [sp, #12]
 8016694:	940d      	str	r4, [sp, #52]	; 0x34
 8016696:	fb06 f607 	mul.w	r6, r6, r7
 801669a:	68d4      	ldr	r4, [r2, #12]
 801669c:	fb0b f709 	mul.w	r7, fp, r9
 80166a0:	9405      	str	r4, [sp, #20]
 80166a2:	960c      	str	r6, [sp, #48]	; 0x30
 80166a4:	6894      	ldr	r4, [r2, #8]
 80166a6:	fb0b f601 	mul.w	r6, fp, r1
 80166aa:	d00c      	beq.n	80166c6 <forward_pad+0xb2>
 80166ac:	2b02      	cmp	r3, #2
 80166ae:	f000 8106 	beq.w	80168be <forward_pad+0x2aa>
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	f000 80a8 	beq.w	8016808 <forward_pad+0x1f4>
 80166b8:	b011      	add	sp, #68	; 0x44
 80166ba:	ecbd 8b02 	vpop	{d8}
 80166be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	deff      	udf	#255	; 0xff
 80166c6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80166ca:	930e      	str	r3, [sp, #56]	; 0x38
 80166cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166ce:	eb05 0903 	add.w	r9, r5, r3
 80166d2:	9b02      	ldr	r3, [sp, #8]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	dd6a      	ble.n	80167ae <forward_pad+0x19a>
 80166d8:	f8de 3008 	ldr.w	r3, [lr, #8]
 80166dc:	ee08 8a10 	vmov	s16, r8
 80166e0:	9805      	ldr	r0, [sp, #20]
 80166e2:	4419      	add	r1, r3
 80166e4:	f8da 2008 	ldr.w	r2, [sl, #8]
 80166e8:	4407      	add	r7, r0
 80166ea:	9801      	ldr	r0, [sp, #4]
 80166ec:	950f      	str	r5, [sp, #60]	; 0x3c
 80166ee:	fb01 f000 	mul.w	r0, r1, r0
 80166f2:	4601      	mov	r1, r0
 80166f4:	9007      	str	r0, [sp, #28]
 80166f6:	19b8      	adds	r0, r7, r6
 80166f8:	900a      	str	r0, [sp, #40]	; 0x28
 80166fa:	eb09 0006 	add.w	r0, r9, r6
 80166fe:	9e03      	ldr	r6, [sp, #12]
 8016700:	9001      	str	r0, [sp, #4]
 8016702:	4608      	mov	r0, r1
 8016704:	4611      	mov	r1, r2
 8016706:	fb02 0206 	mla	r2, r2, r6, r0
 801670a:	460f      	mov	r7, r1
 801670c:	fb0b 5202 	mla	r2, fp, r2, r5
 8016710:	9204      	str	r2, [sp, #16]
 8016712:	1e9a      	subs	r2, r3, #2
 8016714:	fb04 f303 	mul.w	r3, r4, r3
 8016718:	930b      	str	r3, [sp, #44]	; 0x2c
 801671a:	fb04 8302 	mla	r3, r4, r2, r8
 801671e:	9303      	str	r3, [sp, #12]
 8016720:	fb0b f301 	mul.w	r3, fp, r1
 8016724:	9309      	str	r3, [sp, #36]	; 0x24
 8016726:	2300      	movs	r3, #0
 8016728:	9306      	str	r3, [sp, #24]
 801672a:	f1cb 0300 	rsb	r3, fp, #0
 801672e:	4698      	mov	r8, r3
 8016730:	9b01      	ldr	r3, [sp, #4]
 8016732:	454b      	cmp	r3, r9
 8016734:	d00b      	beq.n	801674e <forward_pad+0x13a>
 8016736:	ee18 5a10 	vmov	r5, s16
 801673a:	4443      	add	r3, r8
 801673c:	4425      	add	r5, r4
 801673e:	4622      	mov	r2, r4
 8016740:	4618      	mov	r0, r3
 8016742:	4629      	mov	r1, r5
 8016744:	f007 fa82 	bl	801dc4c <memcpy>
 8016748:	4548      	cmp	r0, r9
 801674a:	4603      	mov	r3, r0
 801674c:	d1f5      	bne.n	801673a <forward_pad+0x126>
 801674e:	ee18 3a10 	vmov	r3, s16
 8016752:	9a05      	ldr	r2, [sp, #20]
 8016754:	ee18 1a10 	vmov	r1, s16
 8016758:	9801      	ldr	r0, [sp, #4]
 801675a:	4413      	add	r3, r2
 801675c:	ee08 3a10 	vmov	s16, r3
 8016760:	f007 fa74 	bl	801dc4c <memcpy>
 8016764:	9b07      	ldr	r3, [sp, #28]
 8016766:	429f      	cmp	r7, r3
 8016768:	dd0d      	ble.n	8016786 <forward_pad+0x172>
 801676a:	461d      	mov	r5, r3
 801676c:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 8016770:	3501      	adds	r5, #1
 8016772:	4651      	mov	r1, sl
 8016774:	4630      	mov	r0, r6
 8016776:	4622      	mov	r2, r4
 8016778:	f007 fa68 	bl	801dc4c <memcpy>
 801677c:	42af      	cmp	r7, r5
 801677e:	ebaa 0a04 	sub.w	sl, sl, r4
 8016782:	445e      	add	r6, fp
 8016784:	d1f4      	bne.n	8016770 <forward_pad+0x15c>
 8016786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016788:	9901      	ldr	r1, [sp, #4]
 801678a:	4491      	add	r9, r2
 801678c:	9b06      	ldr	r3, [sp, #24]
 801678e:	4411      	add	r1, r2
 8016790:	9a04      	ldr	r2, [sp, #16]
 8016792:	3301      	adds	r3, #1
 8016794:	9101      	str	r1, [sp, #4]
 8016796:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016798:	9306      	str	r3, [sp, #24]
 801679a:	440a      	add	r2, r1
 801679c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801679e:	9204      	str	r2, [sp, #16]
 80167a0:	9a03      	ldr	r2, [sp, #12]
 80167a2:	440a      	add	r2, r1
 80167a4:	9203      	str	r2, [sp, #12]
 80167a6:	9a02      	ldr	r2, [sp, #8]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d1c1      	bne.n	8016730 <forward_pad+0x11c>
 80167ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80167ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167b0:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 80167b4:	42a5      	cmp	r5, r4
 80167b6:	d00c      	beq.n	80167d2 <forward_pad+0x1be>
 80167b8:	9b08      	ldr	r3, [sp, #32]
 80167ba:	462e      	mov	r6, r5
 80167bc:	425f      	negs	r7, r3
 80167be:	4698      	mov	r8, r3
 80167c0:	4621      	mov	r1, r4
 80167c2:	4630      	mov	r0, r6
 80167c4:	443c      	add	r4, r7
 80167c6:	4446      	add	r6, r8
 80167c8:	4642      	mov	r2, r8
 80167ca:	f007 fa3f 	bl	801dc4c <memcpy>
 80167ce:	42a6      	cmp	r6, r4
 80167d0:	d1f6      	bne.n	80167c0 <forward_pad+0x1ac>
 80167d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167d4:	9a08      	ldr	r2, [sp, #32]
 80167d6:	3b01      	subs	r3, #1
 80167d8:	fb02 5503 	mla	r5, r2, r3, r5
 80167dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167de:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 80167e2:	42a5      	cmp	r5, r4
 80167e4:	f43f af68 	beq.w	80166b8 <forward_pad+0xa4>
 80167e8:	4617      	mov	r7, r2
 80167ea:	4256      	negs	r6, r2
 80167ec:	4621      	mov	r1, r4
 80167ee:	4628      	mov	r0, r5
 80167f0:	443c      	add	r4, r7
 80167f2:	4435      	add	r5, r6
 80167f4:	463a      	mov	r2, r7
 80167f6:	f007 fa29 	bl	801dc4c <memcpy>
 80167fa:	42a5      	cmp	r5, r4
 80167fc:	d1f6      	bne.n	80167ec <forward_pad+0x1d8>
 80167fe:	b011      	add	sp, #68	; 0x44
 8016800:	ecbd 8b02 	vpop	{d8}
 8016804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016808:	f8dc 1000 	ldr.w	r1, [ip]
 801680c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801680e:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8016812:	2908      	cmp	r1, #8
 8016814:	f000 80b5 	beq.w	8016982 <forward_pad+0x36e>
 8016818:	f8d2 9004 	ldr.w	r9, [r2, #4]
 801681c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801681e:	2a00      	cmp	r2, #0
 8016820:	dd0a      	ble.n	8016838 <forward_pad+0x224>
 8016822:	4693      	mov	fp, r2
 8016824:	469a      	mov	sl, r3
 8016826:	44ca      	add	sl, r9
 8016828:	4628      	mov	r0, r5
 801682a:	464a      	mov	r2, r9
 801682c:	68a1      	ldr	r1, [r4, #8]
 801682e:	f007 fa0d 	bl	801dc4c <memcpy>
 8016832:	45d3      	cmp	fp, sl
 8016834:	444d      	add	r5, r9
 8016836:	dcf6      	bgt.n	8016826 <forward_pad+0x212>
 8016838:	9b02      	ldr	r3, [sp, #8]
 801683a:	2b00      	cmp	r3, #0
 801683c:	dd2c      	ble.n	8016898 <forward_pad+0x284>
 801683e:	f04f 0a00 	mov.w	sl, #0
 8016842:	f8dd b014 	ldr.w	fp, [sp, #20]
 8016846:	f8cd a004 	str.w	sl, [sp, #4]
 801684a:	2e00      	cmp	r6, #0
 801684c:	dd0a      	ble.n	8016864 <forward_pad+0x250>
 801684e:	f04f 0a00 	mov.w	sl, #0
 8016852:	44ca      	add	sl, r9
 8016854:	4628      	mov	r0, r5
 8016856:	464a      	mov	r2, r9
 8016858:	68a1      	ldr	r1, [r4, #8]
 801685a:	f007 f9f7 	bl	801dc4c <memcpy>
 801685e:	4556      	cmp	r6, sl
 8016860:	444d      	add	r5, r9
 8016862:	dcf6      	bgt.n	8016852 <forward_pad+0x23e>
 8016864:	4641      	mov	r1, r8
 8016866:	4628      	mov	r0, r5
 8016868:	465a      	mov	r2, fp
 801686a:	44d8      	add	r8, fp
 801686c:	f007 f9ee 	bl	801dc4c <memcpy>
 8016870:	2f00      	cmp	r7, #0
 8016872:	445d      	add	r5, fp
 8016874:	dd0a      	ble.n	801688c <forward_pad+0x278>
 8016876:	f04f 0a00 	mov.w	sl, #0
 801687a:	44ca      	add	sl, r9
 801687c:	4628      	mov	r0, r5
 801687e:	464a      	mov	r2, r9
 8016880:	68a1      	ldr	r1, [r4, #8]
 8016882:	f007 f9e3 	bl	801dc4c <memcpy>
 8016886:	4557      	cmp	r7, sl
 8016888:	444d      	add	r5, r9
 801688a:	dcf6      	bgt.n	801687a <forward_pad+0x266>
 801688c:	9b01      	ldr	r3, [sp, #4]
 801688e:	9a02      	ldr	r2, [sp, #8]
 8016890:	3301      	adds	r3, #1
 8016892:	429a      	cmp	r2, r3
 8016894:	9301      	str	r3, [sp, #4]
 8016896:	d1d8      	bne.n	801684a <forward_pad+0x236>
 8016898:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801689a:	2f00      	cmp	r7, #0
 801689c:	f77f af0c 	ble.w	80166b8 <forward_pad+0xa4>
 80168a0:	2600      	movs	r6, #0
 80168a2:	444e      	add	r6, r9
 80168a4:	4628      	mov	r0, r5
 80168a6:	464a      	mov	r2, r9
 80168a8:	68a1      	ldr	r1, [r4, #8]
 80168aa:	f007 f9cf 	bl	801dc4c <memcpy>
 80168ae:	42b7      	cmp	r7, r6
 80168b0:	444d      	add	r5, r9
 80168b2:	dcf6      	bgt.n	80168a2 <forward_pad+0x28e>
 80168b4:	b011      	add	sp, #68	; 0x44
 80168b6:	ecbd 8b02 	vpop	{d8}
 80168ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80168c0:	9b02      	ldr	r3, [sp, #8]
 80168c2:	442f      	add	r7, r5
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	9706      	str	r7, [sp, #24]
 80168c8:	dd32      	ble.n	8016930 <forward_pad+0x31c>
 80168ca:	fb04 f309 	mul.w	r3, r4, r9
 80168ce:	9507      	str	r5, [sp, #28]
 80168d0:	9304      	str	r3, [sp, #16]
 80168d2:	2300      	movs	r3, #0
 80168d4:	9301      	str	r3, [sp, #4]
 80168d6:	2e00      	cmp	r6, #0
 80168d8:	dd09      	ble.n	80168ee <forward_pad+0x2da>
 80168da:	2500      	movs	r5, #0
 80168dc:	4425      	add	r5, r4
 80168de:	4638      	mov	r0, r7
 80168e0:	4622      	mov	r2, r4
 80168e2:	4641      	mov	r1, r8
 80168e4:	f007 f9b2 	bl	801dc4c <memcpy>
 80168e8:	42ae      	cmp	r6, r5
 80168ea:	4427      	add	r7, r4
 80168ec:	dcf6      	bgt.n	80168dc <forward_pad+0x2c8>
 80168ee:	9b05      	ldr	r3, [sp, #20]
 80168f0:	4641      	mov	r1, r8
 80168f2:	4638      	mov	r0, r7
 80168f4:	461a      	mov	r2, r3
 80168f6:	4498      	add	r8, r3
 80168f8:	441f      	add	r7, r3
 80168fa:	f007 f9a7 	bl	801dc4c <memcpy>
 80168fe:	f1b9 0f00 	cmp.w	r9, #0
 8016902:	eba8 0a04 	sub.w	sl, r8, r4
 8016906:	dd0c      	ble.n	8016922 <forward_pad+0x30e>
 8016908:	46bb      	mov	fp, r7
 801690a:	2500      	movs	r5, #0
 801690c:	3501      	adds	r5, #1
 801690e:	4658      	mov	r0, fp
 8016910:	4622      	mov	r2, r4
 8016912:	4651      	mov	r1, sl
 8016914:	f007 f99a 	bl	801dc4c <memcpy>
 8016918:	45a9      	cmp	r9, r5
 801691a:	44a3      	add	fp, r4
 801691c:	d1f6      	bne.n	801690c <forward_pad+0x2f8>
 801691e:	9b04      	ldr	r3, [sp, #16]
 8016920:	441f      	add	r7, r3
 8016922:	9b01      	ldr	r3, [sp, #4]
 8016924:	9a02      	ldr	r2, [sp, #8]
 8016926:	3301      	adds	r3, #1
 8016928:	429a      	cmp	r2, r3
 801692a:	9301      	str	r3, [sp, #4]
 801692c:	d1d3      	bne.n	80168d6 <forward_pad+0x2c2>
 801692e:	9d07      	ldr	r5, [sp, #28]
 8016930:	9b06      	ldr	r3, [sp, #24]
 8016932:	429d      	cmp	r5, r3
 8016934:	d00a      	beq.n	801694c <forward_pad+0x338>
 8016936:	461f      	mov	r7, r3
 8016938:	462c      	mov	r4, r5
 801693a:	9e08      	ldr	r6, [sp, #32]
 801693c:	4620      	mov	r0, r4
 801693e:	4434      	add	r4, r6
 8016940:	4632      	mov	r2, r6
 8016942:	4639      	mov	r1, r7
 8016944:	f007 f982 	bl	801dc4c <memcpy>
 8016948:	42a7      	cmp	r7, r4
 801694a:	d1f7      	bne.n	801693c <forward_pad+0x328>
 801694c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801694e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016952:	4413      	add	r3, r2
 8016954:	9a08      	ldr	r2, [sp, #32]
 8016956:	3b01      	subs	r3, #1
 8016958:	fb02 5503 	mla	r5, r2, r3, r5
 801695c:	442c      	add	r4, r5
 801695e:	42a5      	cmp	r5, r4
 8016960:	f43f aeaa 	beq.w	80166b8 <forward_pad+0xa4>
 8016964:	4617      	mov	r7, r2
 8016966:	4256      	negs	r6, r2
 8016968:	4620      	mov	r0, r4
 801696a:	4434      	add	r4, r6
 801696c:	463a      	mov	r2, r7
 801696e:	4629      	mov	r1, r5
 8016970:	f007 f96c 	bl	801dc4c <memcpy>
 8016974:	42a5      	cmp	r5, r4
 8016976:	d1f7      	bne.n	8016968 <forward_pad+0x354>
 8016978:	b011      	add	sp, #68	; 0x44
 801697a:	ecbd 8b02 	vpop	{d8}
 801697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016982:	68a2      	ldr	r2, [r4, #8]
 8016984:	4629      	mov	r1, r5
 8016986:	9301      	str	r3, [sp, #4]
 8016988:	f992 9000 	ldrsb.w	r9, [r2]
 801698c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801698e:	4648      	mov	r0, r9
 8016990:	18ac      	adds	r4, r5, r2
 8016992:	9403      	str	r4, [sp, #12]
 8016994:	f005 fa3e 	bl	801be14 <st_int8_fill>
 8016998:	9b02      	ldr	r3, [sp, #8]
 801699a:	2b00      	cmp	r3, #0
 801699c:	dd25      	ble.n	80169ea <forward_pad+0x3d6>
 801699e:	9b01      	ldr	r3, [sp, #4]
 80169a0:	eb06 0a07 	add.w	sl, r6, r7
 80169a4:	4625      	mov	r5, r4
 80169a6:	9601      	str	r6, [sp, #4]
 80169a8:	469b      	mov	fp, r3
 80169aa:	9b05      	ldr	r3, [sp, #20]
 80169ac:	4434      	add	r4, r6
 80169ae:	449a      	add	sl, r3
 80169b0:	461e      	mov	r6, r3
 80169b2:	4629      	mov	r1, r5
 80169b4:	9a01      	ldr	r2, [sp, #4]
 80169b6:	4648      	mov	r0, r9
 80169b8:	f10b 0b01 	add.w	fp, fp, #1
 80169bc:	f005 fa2a 	bl	801be14 <st_int8_fill>
 80169c0:	4621      	mov	r1, r4
 80169c2:	4640      	mov	r0, r8
 80169c4:	4632      	mov	r2, r6
 80169c6:	f005 fa8d 	bl	801bee4 <st_int8_copy>
 80169ca:	19a1      	adds	r1, r4, r6
 80169cc:	463a      	mov	r2, r7
 80169ce:	4648      	mov	r0, r9
 80169d0:	f005 fa20 	bl	801be14 <st_int8_fill>
 80169d4:	9b02      	ldr	r3, [sp, #8]
 80169d6:	4455      	add	r5, sl
 80169d8:	44b0      	add	r8, r6
 80169da:	455b      	cmp	r3, fp
 80169dc:	4454      	add	r4, sl
 80169de:	d1e8      	bne.n	80169b2 <forward_pad+0x39e>
 80169e0:	461a      	mov	r2, r3
 80169e2:	9b03      	ldr	r3, [sp, #12]
 80169e4:	fb0a 3302 	mla	r3, sl, r2, r3
 80169e8:	9303      	str	r3, [sp, #12]
 80169ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169ec:	4648      	mov	r0, r9
 80169ee:	9903      	ldr	r1, [sp, #12]
 80169f0:	b011      	add	sp, #68	; 0x44
 80169f2:	ecbd 8b02 	vpop	{d8}
 80169f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169fa:	f005 ba0b 	b.w	801be14 <st_int8_fill>
 80169fe:	68db      	ldr	r3, [r3, #12]
 8016a00:	deff      	udf	#255	; 0xff
 8016a02:	2300      	movs	r3, #0
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	deff      	udf	#255	; 0xff

08016a08 <forward_upsample>:
 8016a08:	6983      	ldr	r3, [r0, #24]
 8016a0a:	881a      	ldrh	r2, [r3, #0]
 8016a0c:	2a00      	cmp	r2, #0
 8016a0e:	f000 80dc 	beq.w	8016bca <forward_upsample+0x1c2>
 8016a12:	6859      	ldr	r1, [r3, #4]
 8016a14:	684b      	ldr	r3, [r1, #4]
 8016a16:	b103      	cbz	r3, 8016a1a <forward_upsample+0x12>
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	2a01      	cmp	r2, #1
 8016a1c:	f000 819b 	beq.w	8016d56 <forward_upsample+0x34e>
 8016a20:	690a      	ldr	r2, [r1, #16]
 8016a22:	2a00      	cmp	r2, #0
 8016a24:	f000 819a 	beq.w	8016d5c <forward_upsample+0x354>
 8016a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a2c:	ed2d 8b04 	vpush	{d8-d9}
 8016a30:	f8d2 b000 	ldr.w	fp, [r2]
 8016a34:	b087      	sub	sp, #28
 8016a36:	68da      	ldr	r2, [r3, #12]
 8016a38:	699b      	ldr	r3, [r3, #24]
 8016a3a:	68d1      	ldr	r1, [r2, #12]
 8016a3c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8016a40:	6a03      	ldr	r3, [r0, #32]
 8016a42:	6895      	ldr	r5, [r2, #8]
 8016a44:	689b      	ldr	r3, [r3, #8]
 8016a46:	9104      	str	r1, [sp, #16]
 8016a48:	edd3 8a00 	vldr	s17, [r3]
 8016a4c:	f8db 100c 	ldr.w	r1, [fp, #12]
 8016a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8016a54:	f8db 3018 	ldr.w	r3, [fp, #24]
 8016a58:	9503      	str	r5, [sp, #12]
 8016a5a:	689c      	ldr	r4, [r3, #8]
 8016a5c:	6855      	ldr	r5, [r2, #4]
 8016a5e:	7f03      	ldrb	r3, [r0, #28]
 8016a60:	68ca      	ldr	r2, [r1, #12]
 8016a62:	688f      	ldr	r7, [r1, #8]
 8016a64:	9202      	str	r2, [sp, #8]
 8016a66:	2b03      	cmp	r3, #3
 8016a68:	f200 80aa 	bhi.w	8016bc0 <forward_upsample+0x1b8>
 8016a6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016a70:	00b00106 	.word	0x00b00106
 8016a74:	00af0004 	.word	0x00af0004
 8016a78:	7f43      	ldrb	r3, [r0, #29]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	f040 815e 	bne.w	8016d3c <forward_upsample+0x334>
 8016a80:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8016d60 <forward_upsample+0x358>
 8016a84:	eef0 1a40 	vmov.f32	s3, s0
 8016a88:	9b02      	ldr	r3, [sp, #8]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	f000 8098 	beq.w	8016bc0 <forward_upsample+0x1b8>
 8016a90:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8016a94:	9b04      	ldr	r3, [sp, #16]
 8016a96:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8016d60 <forward_upsample+0x358>
 8016a9a:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8016a9e:	3b01      	subs	r3, #1
 8016aa0:	ee82 8aa8 	vdiv.f32	s16, s5, s17
 8016aa4:	ee00 3a90 	vmov	s1, r3
 8016aa8:	9b03      	ldr	r3, [sp, #12]
 8016aaa:	1e5a      	subs	r2, r3, #1
 8016aac:	fb05 f303 	mul.w	r3, r5, r3
 8016ab0:	ee82 1aa7 	vdiv.f32	s2, s5, s15
 8016ab4:	ee03 2a10 	vmov	s6, r2
 8016ab8:	9304      	str	r3, [sp, #16]
 8016aba:	2300      	movs	r3, #0
 8016abc:	9301      	str	r3, [sp, #4]
 8016abe:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8016ac2:	eeb8 3a43 	vcvt.f32.u32	s6, s6
 8016ac6:	eddd 7a01 	vldr	s15, [sp, #4]
 8016aca:	9b04      	ldr	r3, [sp, #16]
 8016acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ad0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016ad4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016ad8:	fec7 7a82 	vmaxnm.f32	s15, s15, s4
 8016adc:	fec7 7ae0 	vminnm.f32	s15, s15, s1
 8016ae0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8016ae4:	eef4 7a60 	vcmp.f32	s15, s1
 8016ae8:	eef8 3a47 	vcvt.f32.u32	s7, s14
 8016aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016af0:	ee77 8ae3 	vsub.f32	s17, s15, s7
 8016af4:	bf14      	ite	ne
 8016af6:	469a      	movne	sl, r3
 8016af8:	f04f 0a00 	moveq.w	sl, #0
 8016afc:	2f00      	cmp	r7, #0
 8016afe:	d059      	beq.n	8016bb4 <forward_upsample+0x1ac>
 8016b00:	ee72 7ae7 	vsub.f32	s15, s5, s15
 8016b04:	ee17 2a10 	vmov	r2, s14
 8016b08:	9b03      	ldr	r3, [sp, #12]
 8016b0a:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8016b0e:	f04f 0c00 	mov.w	ip, #0
 8016b12:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8016b16:	fb03 f902 	mul.w	r9, r3, r2
 8016b1a:	ee07 ca90 	vmov	s15, ip
 8016b1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016b22:	ee37 7a61 	vsub.f32	s14, s14, s3
 8016b26:	ee27 7a01 	vmul.f32	s14, s14, s2
 8016b2a:	fe87 7a02 	vmaxnm.f32	s14, s14, s4
 8016b2e:	fe87 7a43 	vminnm.f32	s14, s14, s6
 8016b32:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8016b36:	eeb4 7a43 	vcmp.f32	s14, s6
 8016b3a:	ee32 5ac7 	vsub.f32	s10, s5, s14
 8016b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b42:	ee17 3a90 	vmov	r3, s15
 8016b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b4a:	444b      	add	r3, r9
 8016b4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016b50:	ee35 5a26 	vadd.f32	s10, s10, s13
 8016b54:	bf14      	ite	ne
 8016b56:	462a      	movne	r2, r5
 8016b58:	2200      	moveq	r2, #0
 8016b5a:	ee27 4a23 	vmul.f32	s8, s14, s7
 8016b5e:	ee65 4a23 	vmul.f32	s9, s10, s7
 8016b62:	ee28 7a87 	vmul.f32	s14, s17, s14
 8016b66:	ee25 5a28 	vmul.f32	s10, s10, s17
 8016b6a:	b1fd      	cbz	r5, 8016bac <forward_upsample+0x1a4>
 8016b6c:	fb0e 8303 	mla	r3, lr, r3, r8
 8016b70:	eb02 010a 	add.w	r1, r2, sl
 8016b74:	eb04 060e 	add.w	r6, r4, lr
 8016b78:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8016b7c:	eb03 000b 	add.w	r0, r3, fp
 8016b80:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8016b84:	ecf2 7a01 	vldmia	r2!, {s15}
 8016b88:	ecf3 5a01 	vldmia	r3!, {s11}
 8016b8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016b90:	ecb0 6a01 	vldmia	r0!, {s12}
 8016b94:	ecf1 6a01 	vldmia	r1!, {s13}
 8016b98:	eee5 7aa4 	vfma.f32	s15, s11, s9
 8016b9c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8016ba0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016ba4:	ece4 7a01 	vstmia	r4!, {s15}
 8016ba8:	42b4      	cmp	r4, r6
 8016baa:	d1eb      	bne.n	8016b84 <forward_upsample+0x17c>
 8016bac:	f10c 0c01 	add.w	ip, ip, #1
 8016bb0:	4567      	cmp	r7, ip
 8016bb2:	d1b2      	bne.n	8016b1a <forward_upsample+0x112>
 8016bb4:	9b01      	ldr	r3, [sp, #4]
 8016bb6:	9a02      	ldr	r2, [sp, #8]
 8016bb8:	3301      	adds	r3, #1
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	9301      	str	r3, [sp, #4]
 8016bbe:	d182      	bne.n	8016ac6 <forward_upsample+0xbe>
 8016bc0:	b007      	add	sp, #28
 8016bc2:	ecbd 8b04 	vpop	{d8-d9}
 8016bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bca:	6853      	ldr	r3, [r2, #4]
 8016bcc:	deff      	udf	#255	; 0xff
 8016bce:	e7fe      	b.n	8016bce <forward_upsample+0x1c6>
 8016bd0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8016bd4:	2a03      	cmp	r2, #3
 8016bd6:	f200 80ae 	bhi.w	8016d36 <forward_upsample+0x32e>
 8016bda:	4b62      	ldr	r3, [pc, #392]	; (8016d64 <forward_upsample+0x35c>)
 8016bdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016be0:	ed93 8a00 	vldr	s16, [r3]
 8016be4:	9b02      	ldr	r3, [sp, #8]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d0ea      	beq.n	8016bc0 <forward_upsample+0x1b8>
 8016bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016bee:	00ad      	lsls	r5, r5, #2
 8016bf0:	ee87 9a28 	vdiv.f32	s18, s14, s17
 8016bf4:	eec7 8a27 	vdiv.f32	s17, s14, s15
 8016bf8:	2f00      	cmp	r7, #0
 8016bfa:	d0e1      	beq.n	8016bc0 <forward_upsample+0x1b8>
 8016bfc:	fb07 f305 	mul.w	r3, r7, r5
 8016c00:	f04f 0a00 	mov.w	sl, #0
 8016c04:	9301      	str	r3, [sp, #4]
 8016c06:	ee07 aa90 	vmov	s15, sl
 8016c0a:	9b03      	ldr	r3, [sp, #12]
 8016c0c:	2600      	movs	r6, #0
 8016c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016c12:	eef0 7a48 	vmov.f32	s15, s16
 8016c16:	eee7 7a09 	vfma.f32	s15, s14, s18
 8016c1a:	fef8 7a67 	vrinta.f32	s15, s15
 8016c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c22:	ee17 9a90 	vmov	r9, s15
 8016c26:	fb03 f909 	mul.w	r9, r3, r9
 8016c2a:	4623      	mov	r3, r4
 8016c2c:	ee07 6a90 	vmov	s15, r6
 8016c30:	f8db 2014 	ldr.w	r2, [fp, #20]
 8016c34:	3601      	adds	r6, #1
 8016c36:	4618      	mov	r0, r3
 8016c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016c3c:	6892      	ldr	r2, [r2, #8]
 8016c3e:	eef0 7a48 	vmov.f32	s15, s16
 8016c42:	eee7 7a28 	vfma.f32	s15, s14, s17
 8016c46:	fef8 7a67 	vrinta.f32	s15, s15
 8016c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c4e:	ee17 1a90 	vmov	r1, s15
 8016c52:	4449      	add	r1, r9
 8016c54:	fb05 8101 	mla	r1, r5, r1, r8
 8016c58:	f006 fff8 	bl	801dc4c <memcpy>
 8016c5c:	42b7      	cmp	r7, r6
 8016c5e:	4603      	mov	r3, r0
 8016c60:	442b      	add	r3, r5
 8016c62:	d1e3      	bne.n	8016c2c <forward_upsample+0x224>
 8016c64:	9b01      	ldr	r3, [sp, #4]
 8016c66:	f10a 0a01 	add.w	sl, sl, #1
 8016c6a:	441c      	add	r4, r3
 8016c6c:	9b02      	ldr	r3, [sp, #8]
 8016c6e:	4553      	cmp	r3, sl
 8016c70:	d1c9      	bne.n	8016c06 <forward_upsample+0x1fe>
 8016c72:	b007      	add	sp, #28
 8016c74:	ecbd 8b04 	vpop	{d8-d9}
 8016c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c80:	9a02      	ldr	r2, [sp, #8]
 8016c82:	2100      	movs	r1, #0
 8016c84:	4620      	mov	r0, r4
 8016c86:	fb07 f202 	mul.w	r2, r7, r2
 8016c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c8e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016c92:	fb05 f202 	mul.w	r2, r5, r2
 8016c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c9a:	0092      	lsls	r2, r2, #2
 8016c9c:	ee17 9a90 	vmov	r9, s15
 8016ca0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8016ca4:	ee17 6a90 	vmov	r6, s15
 8016ca8:	f006 fff8 	bl	801dc9c <memset>
 8016cac:	9b04      	ldr	r3, [sp, #16]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d086      	beq.n	8016bc0 <forward_upsample+0x1b8>
 8016cb2:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8016cb6:	fb09 5905 	mla	r9, r9, r5, r5
 8016cba:	9903      	ldr	r1, [sp, #12]
 8016cbc:	fb05 f707 	mul.w	r7, r5, r7
 8016cc0:	1c72      	adds	r2, r6, #1
 8016cc2:	00ad      	lsls	r5, r5, #2
 8016cc4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8016cc8:	ee17 3a90 	vmov	r3, s15
 8016ccc:	2900      	cmp	r1, #0
 8016cce:	f43f af77 	beq.w	8016bc0 <forward_upsample+0x1b8>
 8016cd2:	fb07 f303 	mul.w	r3, r7, r3
 8016cd6:	fb02 f707 	mul.w	r7, r2, r7
 8016cda:	fb01 f205 	mul.w	r2, r1, r5
 8016cde:	009b      	lsls	r3, r3, #2
 8016ce0:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8016ce4:	9205      	str	r2, [sp, #20]
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	9303      	str	r3, [sp, #12]
 8016cea:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016cee:	46d8      	mov	r8, fp
 8016cf0:	46bb      	mov	fp, r7
 8016cf2:	460f      	mov	r7, r1
 8016cf4:	f8dd a004 	ldr.w	sl, [sp, #4]
 8016cf8:	2600      	movs	r6, #0
 8016cfa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016cfe:	3601      	adds	r6, #1
 8016d00:	4651      	mov	r1, sl
 8016d02:	4620      	mov	r0, r4
 8016d04:	689a      	ldr	r2, [r3, #8]
 8016d06:	44aa      	add	sl, r5
 8016d08:	f006 ffa0 	bl	801dc4c <memcpy>
 8016d0c:	42b7      	cmp	r7, r6
 8016d0e:	444c      	add	r4, r9
 8016d10:	d1f3      	bne.n	8016cfa <forward_upsample+0x2f2>
 8016d12:	9a01      	ldr	r2, [sp, #4]
 8016d14:	465c      	mov	r4, fp
 8016d16:	9905      	ldr	r1, [sp, #20]
 8016d18:	9b02      	ldr	r3, [sp, #8]
 8016d1a:	440a      	add	r2, r1
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	9201      	str	r2, [sp, #4]
 8016d20:	9a03      	ldr	r2, [sp, #12]
 8016d22:	9302      	str	r3, [sp, #8]
 8016d24:	4493      	add	fp, r2
 8016d26:	9a04      	ldr	r2, [sp, #16]
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	d1e3      	bne.n	8016cf4 <forward_upsample+0x2ec>
 8016d2c:	b007      	add	sp, #28
 8016d2e:	ecbd 8b04 	vpop	{d8-d9}
 8016d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d36:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8016d68 <forward_upsample+0x360>
 8016d3a:	e753      	b.n	8016be4 <forward_upsample+0x1dc>
 8016d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d40:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8016d44:	ee38 0ac7 	vsub.f32	s0, s17, s14
 8016d48:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8016d4c:	ee20 0a21 	vmul.f32	s0, s0, s3
 8016d50:	ee67 1a21 	vmul.f32	s3, s14, s3
 8016d54:	e698      	b.n	8016a88 <forward_upsample+0x80>
 8016d56:	2300      	movs	r3, #0
 8016d58:	685b      	ldr	r3, [r3, #4]
 8016d5a:	deff      	udf	#255	; 0xff
 8016d5c:	68d3      	ldr	r3, [r2, #12]
 8016d5e:	deff      	udf	#255	; 0xff
 8016d60:	00000000 	.word	0x00000000
 8016d64:	080931c0 	.word	0x080931c0
 8016d68:	38d1b717 	.word	0x38d1b717

08016d6c <forward_concat>:
 8016d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d70:	ed2d 8b06 	vpush	{d8-d10}
 8016d74:	6982      	ldr	r2, [r0, #24]
 8016d76:	b087      	sub	sp, #28
 8016d78:	8813      	ldrh	r3, [r2, #0]
 8016d7a:	9001      	str	r0, [sp, #4]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	f000 8276 	beq.w	801726e <forward_concat+0x502>
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	6856      	ldr	r6, [r2, #4]
 8016d86:	f000 8272 	beq.w	801726e <forward_concat+0x502>
 8016d8a:	f8d6 9010 	ldr.w	r9, [r6, #16]
 8016d8e:	f1b9 0f00 	cmp.w	r9, #0
 8016d92:	d001      	beq.n	8016d98 <forward_concat+0x2c>
 8016d94:	f8d9 9000 	ldr.w	r9, [r9]
 8016d98:	8830      	ldrh	r0, [r6, #0]
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	4619      	mov	r1, r3
 8016da0:	e00c      	b.n	8016dbc <forward_concat+0x50>
 8016da2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016da6:	b172      	cbz	r2, 8016dc6 <forward_concat+0x5a>
 8016da8:	6992      	ldr	r2, [r2, #24]
 8016daa:	3301      	adds	r3, #1
 8016dac:	6812      	ldr	r2, [r2, #0]
 8016dae:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8016db2:	2a01      	cmp	r2, #1
 8016db4:	bf0c      	ite	eq
 8016db6:	2201      	moveq	r2, #1
 8016db8:	2202      	movne	r2, #2
 8016dba:	4311      	orrs	r1, r2
 8016dbc:	4298      	cmp	r0, r3
 8016dbe:	d002      	beq.n	8016dc6 <forward_concat+0x5a>
 8016dc0:	6872      	ldr	r2, [r6, #4]
 8016dc2:	2a00      	cmp	r2, #0
 8016dc4:	d1ed      	bne.n	8016da2 <forward_concat+0x36>
 8016dc6:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8016dca:	6813      	ldr	r3, [r2, #0]
 8016dcc:	6897      	ldr	r7, [r2, #8]
 8016dce:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8016dd2:	2a01      	cmp	r2, #1
 8016dd4:	d135      	bne.n	8016e42 <forward_concat+0xd6>
 8016dd6:	2901      	cmp	r1, #1
 8016dd8:	d13a      	bne.n	8016e50 <forward_concat+0xe4>
 8016dda:	f04f 0b00 	mov.w	fp, #0
 8016dde:	455c      	cmp	r4, fp
 8016de0:	d931      	bls.n	8016e46 <forward_concat+0xda>
 8016de2:	6873      	ldr	r3, [r6, #4]
 8016de4:	b37b      	cbz	r3, 8016e46 <forward_concat+0xda>
 8016de6:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 8016dea:	b364      	cbz	r4, 8016e46 <forward_concat+0xda>
 8016dec:	69a3      	ldr	r3, [r4, #24]
 8016dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016df2:	f006 facd 	bl	801d390 <ai_array_get_byte_size>
 8016df6:	69a1      	ldr	r1, [r4, #24]
 8016df8:	6965      	ldr	r5, [r4, #20]
 8016dfa:	68e2      	ldr	r2, [r4, #12]
 8016dfc:	9b01      	ldr	r3, [sp, #4]
 8016dfe:	688c      	ldr	r4, [r1, #8]
 8016e00:	69db      	ldr	r3, [r3, #28]
 8016e02:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8016e06:	eb04 0800 	add.w	r8, r4, r0
 8016e0a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8016e0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016e12:	4544      	cmp	r4, r8
 8016e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8016e18:	fb02 fa05 	mul.w	sl, r2, r5
 8016e1c:	fb03 f505 	mul.w	r5, r3, r5
 8016e20:	d20a      	bcs.n	8016e38 <forward_concat+0xcc>
 8016e22:	463b      	mov	r3, r7
 8016e24:	4621      	mov	r1, r4
 8016e26:	4454      	add	r4, sl
 8016e28:	4618      	mov	r0, r3
 8016e2a:	4652      	mov	r2, sl
 8016e2c:	f006 ff0e 	bl	801dc4c <memcpy>
 8016e30:	45a0      	cmp	r8, r4
 8016e32:	4603      	mov	r3, r0
 8016e34:	442b      	add	r3, r5
 8016e36:	d8f5      	bhi.n	8016e24 <forward_concat+0xb8>
 8016e38:	4457      	add	r7, sl
 8016e3a:	f10b 0b01 	add.w	fp, fp, #1
 8016e3e:	8834      	ldrh	r4, [r6, #0]
 8016e40:	e7cd      	b.n	8016dde <forward_concat+0x72>
 8016e42:	2901      	cmp	r1, #1
 8016e44:	d108      	bne.n	8016e58 <forward_concat+0xec>
 8016e46:	b007      	add	sp, #28
 8016e48:	ecbd 8b06 	vpop	{d8-d10}
 8016e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e50:	2a01      	cmp	r2, #1
 8016e52:	d1f6      	bne.n	8016e42 <forward_concat+0xd6>
 8016e54:	078a      	lsls	r2, r1, #30
 8016e56:	d4f6      	bmi.n	8016e46 <forward_concat+0xda>
 8016e58:	f8d9 1000 	ldr.w	r1, [r9]
 8016e5c:	460c      	mov	r4, r1
 8016e5e:	2900      	cmp	r1, #0
 8016e60:	f000 81f1 	beq.w	8017246 <forward_concat+0x4da>
 8016e64:	684a      	ldr	r2, [r1, #4]
 8016e66:	2a00      	cmp	r2, #0
 8016e68:	f000 81ed 	beq.w	8017246 <forward_concat+0x4da>
 8016e6c:	8849      	ldrh	r1, [r1, #2]
 8016e6e:	2900      	cmp	r1, #0
 8016e70:	f000 81e9 	beq.w	8017246 <forward_concat+0x4da>
 8016e74:	6812      	ldr	r2, [r2, #0]
 8016e76:	edd2 8a00 	vldr	s17, [r2]
 8016e7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016e7e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8016e82:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8016e86:	9602      	str	r6, [sp, #8]
 8016e88:	9305      	str	r3, [sp, #20]
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	eec7 9aa8 	vdiv.f32	s19, s15, s17
 8016e90:	ed9f 8ab3 	vldr	s16, [pc, #716]	; 8017160 <forward_concat+0x3f4>
 8016e94:	ed9f 9ab3 	vldr	s18, [pc, #716]	; 8017164 <forward_concat+0x3f8>
 8016e98:	4626      	mov	r6, r4
 8016e9a:	4698      	mov	r8, r3
 8016e9c:	f8cd 9010 	str.w	r9, [sp, #16]
 8016ea0:	4540      	cmp	r0, r8
 8016ea2:	d9d0      	bls.n	8016e46 <forward_concat+0xda>
 8016ea4:	9b02      	ldr	r3, [sp, #8]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d0cc      	beq.n	8016e46 <forward_concat+0xda>
 8016eac:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d0c8      	beq.n	8016e46 <forward_concat+0xda>
 8016eb4:	9a01      	ldr	r2, [sp, #4]
 8016eb6:	9303      	str	r3, [sp, #12]
 8016eb8:	69d0      	ldr	r0, [r2, #28]
 8016eba:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
 8016ebe:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8016ec2:	68d9      	ldr	r1, [r3, #12]
 8016ec4:	9b04      	ldr	r3, [sp, #16]
 8016ec6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016eca:	6894      	ldr	r4, [r2, #8]
 8016ecc:	fb01 fb05 	mul.w	fp, r1, r5
 8016ed0:	68d9      	ldr	r1, [r3, #12]
 8016ed2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016ed6:	fb01 f505 	mul.w	r5, r1, r5
 8016eda:	e9d2 a100 	ldrd	sl, r1, [r2]
 8016ede:	4650      	mov	r0, sl
 8016ee0:	f006 fa56 	bl	801d390 <ai_array_get_byte_size>
 8016ee4:	f3ca 4243 	ubfx	r2, sl, #17, #4
 8016ee8:	9b03      	ldr	r3, [sp, #12]
 8016eea:	eb04 0a00 	add.w	sl, r4, r0
 8016eee:	2a01      	cmp	r2, #1
 8016ef0:	d05a      	beq.n	8016fa8 <forward_concat+0x23c>
 8016ef2:	681a      	ldr	r2, [r3, #0]
 8016ef4:	2a00      	cmp	r2, #0
 8016ef6:	f000 80c9 	beq.w	801708c <forward_concat+0x320>
 8016efa:	6851      	ldr	r1, [r2, #4]
 8016efc:	2900      	cmp	r1, #0
 8016efe:	f000 8125 	beq.w	801714c <forward_concat+0x3e0>
 8016f02:	8850      	ldrh	r0, [r2, #2]
 8016f04:	2800      	cmp	r0, #0
 8016f06:	f000 811e 	beq.w	8017146 <forward_concat+0x3da>
 8016f0a:	680b      	ldr	r3, [r1, #0]
 8016f0c:	edd3 6a00 	vldr	s13, [r3]
 8016f10:	684b      	ldr	r3, [r1, #4]
 8016f12:	f993 0000 	ldrsb.w	r0, [r3]
 8016f16:	2e00      	cmp	r6, #0
 8016f18:	f000 80be 	beq.w	8017098 <forward_concat+0x32c>
 8016f1c:	6873      	ldr	r3, [r6, #4]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	f000 8118 	beq.w	8017154 <forward_concat+0x3e8>
 8016f24:	8871      	ldrh	r1, [r6, #2]
 8016f26:	b111      	cbz	r1, 8016f2e <forward_concat+0x1c2>
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	f993 1000 	ldrsb.w	r1, [r3]
 8016f2e:	eef4 8a66 	vcmp.f32	s17, s13
 8016f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f36:	bf0c      	ite	eq
 8016f38:	2301      	moveq	r3, #1
 8016f3a:	2300      	movne	r3, #0
 8016f3c:	4288      	cmp	r0, r1
 8016f3e:	d102      	bne.n	8016f46 <forward_concat+0x1da>
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	f040 80ab 	bne.w	801709c <forward_concat+0x330>
 8016f46:	9905      	ldr	r1, [sp, #20]
 8016f48:	2900      	cmp	r1, #0
 8016f4a:	d176      	bne.n	801703a <forward_concat+0x2ce>
 8016f4c:	b14a      	cbz	r2, 8016f62 <forward_concat+0x1f6>
 8016f4e:	6851      	ldr	r1, [r2, #4]
 8016f50:	2900      	cmp	r1, #0
 8016f52:	f000 8172 	beq.w	801723a <forward_concat+0x4ce>
 8016f56:	8852      	ldrh	r2, [r2, #2]
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	f000 816e 	beq.w	801723a <forward_concat+0x4ce>
 8016f5e:	684a      	ldr	r2, [r1, #4]
 8016f60:	7811      	ldrb	r1, [r2, #0]
 8016f62:	2e00      	cmp	r6, #0
 8016f64:	f000 816d 	beq.w	8017242 <forward_concat+0x4d6>
 8016f68:	6870      	ldr	r0, [r6, #4]
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	f000 8170 	beq.w	8017250 <forward_concat+0x4e4>
 8016f70:	8872      	ldrh	r2, [r6, #2]
 8016f72:	b10a      	cbz	r2, 8016f78 <forward_concat+0x20c>
 8016f74:	6842      	ldr	r2, [r0, #4]
 8016f76:	7812      	ldrb	r2, [r2, #0]
 8016f78:	4291      	cmp	r1, r2
 8016f7a:	f040 80f5 	bne.w	8017168 <forward_concat+0x3fc>
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	f000 80f2 	beq.w	8017168 <forward_concat+0x3fc>
 8016f84:	4554      	cmp	r4, sl
 8016f86:	d209      	bcs.n	8016f9c <forward_concat+0x230>
 8016f88:	46b9      	mov	r9, r7
 8016f8a:	4621      	mov	r1, r4
 8016f8c:	445c      	add	r4, fp
 8016f8e:	4648      	mov	r0, r9
 8016f90:	465a      	mov	r2, fp
 8016f92:	f006 fe5b 	bl	801dc4c <memcpy>
 8016f96:	45a2      	cmp	sl, r4
 8016f98:	44a9      	add	r9, r5
 8016f9a:	d8f6      	bhi.n	8016f8a <forward_concat+0x21e>
 8016f9c:	445f      	add	r7, fp
 8016f9e:	9b02      	ldr	r3, [sp, #8]
 8016fa0:	f108 0801 	add.w	r8, r8, #1
 8016fa4:	8818      	ldrh	r0, [r3, #0]
 8016fa6:	e77b      	b.n	8016ea0 <forward_concat+0x134>
 8016fa8:	f1bb 0f00 	cmp.w	fp, #0
 8016fac:	4659      	mov	r1, fp
 8016fae:	9b05      	ldr	r3, [sp, #20]
 8016fb0:	bfb8      	it	lt
 8016fb2:	f10b 0103 	addlt.w	r1, fp, #3
 8016fb6:	1089      	asrs	r1, r1, #2
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d17d      	bne.n	80170b8 <forward_concat+0x34c>
 8016fbc:	2e00      	cmp	r6, #0
 8016fbe:	f000 80cb 	beq.w	8017158 <forward_concat+0x3ec>
 8016fc2:	6873      	ldr	r3, [r6, #4]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	f000 80c7 	beq.w	8017158 <forward_concat+0x3ec>
 8016fca:	8872      	ldrh	r2, [r6, #2]
 8016fcc:	2a00      	cmp	r2, #0
 8016fce:	f000 80c3 	beq.w	8017158 <forward_concat+0x3ec>
 8016fd2:	685b      	ldr	r3, [r3, #4]
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	ee06 3a90 	vmov	s13, r3
 8016fda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016fde:	ee76 6a8a 	vadd.f32	s13, s13, s20
 8016fe2:	4554      	cmp	r4, sl
 8016fe4:	d227      	bcs.n	8017036 <forward_concat+0x2ca>
 8016fe6:	f1bb 0f03 	cmp.w	fp, #3
 8016fea:	eba5 0501 	sub.w	r5, r5, r1
 8016fee:	dd22      	ble.n	8017036 <forward_concat+0x2ca>
 8016ff0:	46be      	mov	lr, r7
 8016ff2:	46f4      	mov	ip, lr
 8016ff4:	4620      	mov	r0, r4
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016ffc:	eef0 7a66 	vmov.f32	s15, s13
 8017000:	ee07 3a10 	vmov	s14, r3
 8017004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017008:	eee7 7a29 	vfma.f32	s15, s14, s19
 801700c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017010:	ee17 3a90 	vmov	r3, s15
 8017014:	f383 0308 	usat	r3, #8, r3
 8017018:	3201      	adds	r2, #1
 801701a:	f80c 3b01 	strb.w	r3, [ip], #1
 801701e:	4291      	cmp	r1, r2
 8017020:	dcea      	bgt.n	8016ff8 <forward_concat+0x28c>
 8017022:	f1bb 0f03 	cmp.w	fp, #3
 8017026:	bfcc      	ite	gt
 8017028:	460b      	movgt	r3, r1
 801702a:	2301      	movle	r3, #1
 801702c:	441c      	add	r4, r3
 801702e:	442b      	add	r3, r5
 8017030:	45a2      	cmp	sl, r4
 8017032:	449e      	add	lr, r3
 8017034:	d8dd      	bhi.n	8016ff2 <forward_concat+0x286>
 8017036:	440f      	add	r7, r1
 8017038:	e7b1      	b.n	8016f9e <forward_concat+0x232>
 801703a:	b142      	cbz	r2, 801704e <forward_concat+0x2e2>
 801703c:	6851      	ldr	r1, [r2, #4]
 801703e:	2900      	cmp	r1, #0
 8017040:	f000 8108 	beq.w	8017254 <forward_concat+0x4e8>
 8017044:	8852      	ldrh	r2, [r2, #2]
 8017046:	b112      	cbz	r2, 801704e <forward_concat+0x2e2>
 8017048:	684a      	ldr	r2, [r1, #4]
 801704a:	f992 2000 	ldrsb.w	r2, [r2]
 801704e:	2e00      	cmp	r6, #0
 8017050:	f000 80fc 	beq.w	801724c <forward_concat+0x4e0>
 8017054:	6870      	ldr	r0, [r6, #4]
 8017056:	2800      	cmp	r0, #0
 8017058:	f000 80fe 	beq.w	8017258 <forward_concat+0x4ec>
 801705c:	8871      	ldrh	r1, [r6, #2]
 801705e:	b111      	cbz	r1, 8017066 <forward_concat+0x2fa>
 8017060:	6841      	ldr	r1, [r0, #4]
 8017062:	f991 1000 	ldrsb.w	r1, [r1]
 8017066:	428a      	cmp	r2, r1
 8017068:	f040 80af 	bne.w	80171ca <forward_concat+0x45e>
 801706c:	2b00      	cmp	r3, #0
 801706e:	f000 80ac 	beq.w	80171ca <forward_concat+0x45e>
 8017072:	4554      	cmp	r4, sl
 8017074:	d292      	bcs.n	8016f9c <forward_concat+0x230>
 8017076:	46b9      	mov	r9, r7
 8017078:	4621      	mov	r1, r4
 801707a:	445c      	add	r4, fp
 801707c:	4648      	mov	r0, r9
 801707e:	465a      	mov	r2, fp
 8017080:	f006 fde4 	bl	801dc4c <memcpy>
 8017084:	45a2      	cmp	sl, r4
 8017086:	44a9      	add	r9, r5
 8017088:	d8f6      	bhi.n	8017078 <forward_concat+0x30c>
 801708a:	e787      	b.n	8016f9c <forward_concat+0x230>
 801708c:	eef0 6a49 	vmov.f32	s13, s18
 8017090:	4610      	mov	r0, r2
 8017092:	2e00      	cmp	r6, #0
 8017094:	f47f af42 	bne.w	8016f1c <forward_concat+0x1b0>
 8017098:	4631      	mov	r1, r6
 801709a:	e748      	b.n	8016f2e <forward_concat+0x1c2>
 801709c:	4554      	cmp	r4, sl
 801709e:	f4bf af7d 	bcs.w	8016f9c <forward_concat+0x230>
 80170a2:	46b9      	mov	r9, r7
 80170a4:	4621      	mov	r1, r4
 80170a6:	445c      	add	r4, fp
 80170a8:	4648      	mov	r0, r9
 80170aa:	465a      	mov	r2, fp
 80170ac:	f006 fdce 	bl	801dc4c <memcpy>
 80170b0:	45a2      	cmp	sl, r4
 80170b2:	44a9      	add	r9, r5
 80170b4:	d8f6      	bhi.n	80170a4 <forward_concat+0x338>
 80170b6:	e771      	b.n	8016f9c <forward_concat+0x230>
 80170b8:	2e00      	cmp	r6, #0
 80170ba:	f000 80cf 	beq.w	801725c <forward_concat+0x4f0>
 80170be:	6873      	ldr	r3, [r6, #4]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	f000 80d1 	beq.w	8017268 <forward_concat+0x4fc>
 80170c6:	8872      	ldrh	r2, [r6, #2]
 80170c8:	2a00      	cmp	r2, #0
 80170ca:	f000 80ca 	beq.w	8017262 <forward_concat+0x4f6>
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	f993 3000 	ldrsb.w	r3, [r3]
 80170d4:	ee06 3a90 	vmov	s13, r3
 80170d8:	4554      	cmp	r4, sl
 80170da:	d2ac      	bcs.n	8017036 <forward_concat+0x2ca>
 80170dc:	f1bb 0f03 	cmp.w	fp, #3
 80170e0:	eba5 0501 	sub.w	r5, r5, r1
 80170e4:	dda7      	ble.n	8017036 <forward_concat+0x2ca>
 80170e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80170ea:	46be      	mov	lr, r7
 80170ec:	46f4      	mov	ip, lr
 80170ee:	4620      	mov	r0, r4
 80170f0:	2200      	movs	r2, #0
 80170f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80170f6:	eef0 7a66 	vmov.f32	s15, s13
 80170fa:	ee07 3a10 	vmov	s14, r3
 80170fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017102:	eee7 7a29 	vfma.f32	s15, s14, s19
 8017106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801710a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801710e:	bf4c      	ite	mi
 8017110:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 8017114:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 8017118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801711c:	ee17 3a90 	vmov	r3, s15
 8017120:	f303 0307 	ssat	r3, #8, r3
 8017124:	3201      	adds	r2, #1
 8017126:	f80c 3b01 	strb.w	r3, [ip], #1
 801712a:	4291      	cmp	r1, r2
 801712c:	dce1      	bgt.n	80170f2 <forward_concat+0x386>
 801712e:	f1bb 0f03 	cmp.w	fp, #3
 8017132:	bfcc      	ite	gt
 8017134:	460b      	movgt	r3, r1
 8017136:	2301      	movle	r3, #1
 8017138:	441c      	add	r4, r3
 801713a:	442b      	add	r3, r5
 801713c:	45a2      	cmp	sl, r4
 801713e:	449e      	add	lr, r3
 8017140:	d8d4      	bhi.n	80170ec <forward_concat+0x380>
 8017142:	440f      	add	r7, r1
 8017144:	e72b      	b.n	8016f9e <forward_concat+0x232>
 8017146:	eef0 6a49 	vmov.f32	s13, s18
 801714a:	e6e4      	b.n	8016f16 <forward_concat+0x1aa>
 801714c:	eef0 6a49 	vmov.f32	s13, s18
 8017150:	4608      	mov	r0, r1
 8017152:	e6e0      	b.n	8016f16 <forward_concat+0x1aa>
 8017154:	4619      	mov	r1, r3
 8017156:	e6ea      	b.n	8016f2e <forward_concat+0x1c2>
 8017158:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801715c:	e741      	b.n	8016fe2 <forward_concat+0x276>
 801715e:	bf00      	nop
 8017160:	3efffffc 	.word	0x3efffffc
 8017164:	00000000 	.word	0x00000000
 8017168:	4554      	cmp	r4, sl
 801716a:	ee69 6aa6 	vmul.f32	s13, s19, s13
 801716e:	f4bf af15 	bcs.w	8016f9c <forward_concat+0x230>
 8017172:	f1bb 0f00 	cmp.w	fp, #0
 8017176:	f77f af11 	ble.w	8016f9c <forward_concat+0x230>
 801717a:	ee07 2a90 	vmov	s15, r2
 801717e:	eb04 000b 	add.w	r0, r4, fp
 8017182:	46bc      	mov	ip, r7
 8017184:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017188:	4602      	mov	r2, r0
 801718a:	ee36 6a0a 	vadd.f32	s12, s12, s20
 801718e:	46e6      	mov	lr, ip
 8017190:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017194:	eeb0 7a46 	vmov.f32	s14, s12
 8017198:	1a5b      	subs	r3, r3, r1
 801719a:	ee07 3a90 	vmov	s15, r3
 801719e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171a2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80171a6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80171aa:	ee17 3a90 	vmov	r3, s15
 80171ae:	f383 0308 	usat	r3, #8, r3
 80171b2:	4294      	cmp	r4, r2
 80171b4:	f80e 3b01 	strb.w	r3, [lr], #1
 80171b8:	d1ea      	bne.n	8017190 <forward_concat+0x424>
 80171ba:	4550      	cmp	r0, sl
 80171bc:	44ac      	add	ip, r5
 80171be:	445a      	add	r2, fp
 80171c0:	4604      	mov	r4, r0
 80171c2:	f4bf aeeb 	bcs.w	8016f9c <forward_concat+0x230>
 80171c6:	4458      	add	r0, fp
 80171c8:	e7e1      	b.n	801718e <forward_concat+0x422>
 80171ca:	4554      	cmp	r4, sl
 80171cc:	ee69 6aa6 	vmul.f32	s13, s19, s13
 80171d0:	f4bf aee4 	bcs.w	8016f9c <forward_concat+0x230>
 80171d4:	f1bb 0f00 	cmp.w	fp, #0
 80171d8:	f77f aee0 	ble.w	8016f9c <forward_concat+0x230>
 80171dc:	ee07 1a90 	vmov	s15, r1
 80171e0:	eb04 000b 	add.w	r0, r4, fp
 80171e4:	46bc      	mov	ip, r7
 80171e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80171ea:	4601      	mov	r1, r0
 80171ec:	46e6      	mov	lr, ip
 80171ee:	f914 3b01 	ldrsb.w	r3, [r4], #1
 80171f2:	1a9b      	subs	r3, r3, r2
 80171f4:	ee07 3a90 	vmov	s15, r3
 80171f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80171fc:	eef0 7a46 	vmov.f32	s15, s12
 8017200:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801720c:	bf4c      	ite	mi
 801720e:	ee77 7ac8 	vsubmi.f32	s15, s15, s16
 8017212:	ee77 7a8a 	vaddpl.f32	s15, s15, s20
 8017216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801721a:	ee17 3a90 	vmov	r3, s15
 801721e:	f303 0307 	ssat	r3, #8, r3
 8017222:	428c      	cmp	r4, r1
 8017224:	f80e 3b01 	strb.w	r3, [lr], #1
 8017228:	d1e1      	bne.n	80171ee <forward_concat+0x482>
 801722a:	4550      	cmp	r0, sl
 801722c:	44ac      	add	ip, r5
 801722e:	4459      	add	r1, fp
 8017230:	4604      	mov	r4, r0
 8017232:	f4bf aeb3 	bcs.w	8016f9c <forward_concat+0x230>
 8017236:	4458      	add	r0, fp
 8017238:	e7d8      	b.n	80171ec <forward_concat+0x480>
 801723a:	9905      	ldr	r1, [sp, #20]
 801723c:	2e00      	cmp	r6, #0
 801723e:	f47f ae93 	bne.w	8016f68 <forward_concat+0x1fc>
 8017242:	4632      	mov	r2, r6
 8017244:	e698      	b.n	8016f78 <forward_concat+0x20c>
 8017246:	ed5f 8a39 	vldr	s17, [pc, #-228]	; 8017164 <forward_concat+0x3f8>
 801724a:	e616      	b.n	8016e7a <forward_concat+0x10e>
 801724c:	4631      	mov	r1, r6
 801724e:	e70a      	b.n	8017066 <forward_concat+0x2fa>
 8017250:	4602      	mov	r2, r0
 8017252:	e691      	b.n	8016f78 <forward_concat+0x20c>
 8017254:	460a      	mov	r2, r1
 8017256:	e6fa      	b.n	801704e <forward_concat+0x2e2>
 8017258:	4601      	mov	r1, r0
 801725a:	e704      	b.n	8017066 <forward_concat+0x2fa>
 801725c:	ee06 6a90 	vmov	s13, r6
 8017260:	e73a      	b.n	80170d8 <forward_concat+0x36c>
 8017262:	ee06 2a90 	vmov	s13, r2
 8017266:	e737      	b.n	80170d8 <forward_concat+0x36c>
 8017268:	ee06 3a90 	vmov	s13, r3
 801726c:	e734      	b.n	80170d8 <forward_concat+0x36c>
 801726e:	2300      	movs	r3, #0
 8017270:	685b      	ldr	r3, [r3, #4]
 8017272:	deff      	udf	#255	; 0xff

08017274 <forward_eltwise_integer_INT8>:
 8017274:	6982      	ldr	r2, [r0, #24]
 8017276:	8813      	ldrh	r3, [r2, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d04e      	beq.n	801731a <forward_eltwise_integer_INT8+0xa6>
 801727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017280:	ed2d 8b02 	vpush	{d8}
 8017284:	6852      	ldr	r2, [r2, #4]
 8017286:	b0ab      	sub	sp, #172	; 0xac
 8017288:	6854      	ldr	r4, [r2, #4]
 801728a:	2c00      	cmp	r4, #0
 801728c:	f000 81d4 	beq.w	8017638 <forward_eltwise_integer_INT8+0x3c4>
 8017290:	e9d4 5400 	ldrd	r5, r4, [r4]
 8017294:	2b01      	cmp	r3, #1
 8017296:	f000 81d3 	beq.w	8017640 <forward_eltwise_integer_INT8+0x3cc>
 801729a:	6916      	ldr	r6, [r2, #16]
 801729c:	b106      	cbz	r6, 80172a0 <forward_eltwise_integer_INT8+0x2c>
 801729e:	6836      	ldr	r6, [r6, #0]
 80172a0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80172a4:	f105 0108 	add.w	r1, r5, #8
 80172a8:	f104 0b08 	add.w	fp, r4, #8
 80172ac:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 80172b0:	68a0      	ldr	r0, [r4, #8]
 80172b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80172b4:	ea8c 0300 	eor.w	r3, ip, r0
 80172b8:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 80172bc:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 80172c0:	d10e      	bne.n	80172e0 <forward_eltwise_integer_INT8+0x6c>
 80172c2:	4663      	mov	r3, ip
 80172c4:	4686      	mov	lr, r0
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	f000 81b2 	beq.w	8017630 <forward_eltwise_integer_INT8+0x3bc>
 80172cc:	3b01      	subs	r3, #1
 80172ce:	68e2      	ldr	r2, [r4, #12]
 80172d0:	68e8      	ldr	r0, [r5, #12]
 80172d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80172d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80172da:	4290      	cmp	r0, r2
 80172dc:	d0f3      	beq.n	80172c6 <forward_eltwise_integer_INT8+0x52>
 80172de:	4670      	mov	r0, lr
 80172e0:	2300      	movs	r3, #0
 80172e2:	9308      	str	r3, [sp, #32]
 80172e4:	f10c 33ff 	add.w	r3, ip, #4294967295
 80172e8:	009b      	lsls	r3, r3, #2
 80172ea:	e005      	b.n	80172f8 <forward_eltwise_integer_INT8+0x84>
 80172ec:	68ea      	ldr	r2, [r5, #12]
 80172ee:	58d2      	ldr	r2, [r2, r3]
 80172f0:	3b04      	subs	r3, #4
 80172f2:	2a01      	cmp	r2, #1
 80172f4:	f040 8199 	bne.w	801762a <forward_eltwise_integer_INT8+0x3b6>
 80172f8:	1d1a      	adds	r2, r3, #4
 80172fa:	d1f7      	bne.n	80172ec <forward_eltwise_integer_INT8+0x78>
 80172fc:	f04f 0a01 	mov.w	sl, #1
 8017300:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8017304:	b158      	cbz	r0, 801731e <forward_eltwise_integer_INT8+0xaa>
 8017306:	3801      	subs	r0, #1
 8017308:	68e3      	ldr	r3, [r4, #12]
 801730a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801730e:	2b01      	cmp	r3, #1
 8017310:	d0f8      	beq.n	8017304 <forward_eltwise_integer_INT8+0x90>
 8017312:	2300      	movs	r3, #0
 8017314:	46d1      	mov	r9, sl
 8017316:	9309      	str	r3, [sp, #36]	; 0x24
 8017318:	e005      	b.n	8017326 <forward_eltwise_integer_INT8+0xb2>
 801731a:	685b      	ldr	r3, [r3, #4]
 801731c:	deff      	udf	#255	; 0xff
 801731e:	2301      	movs	r3, #1
 8017320:	f08a 0901 	eor.w	r9, sl, #1
 8017324:	9309      	str	r3, [sp, #36]	; 0x24
 8017326:	6972      	ldr	r2, [r6, #20]
 8017328:	2000      	movs	r0, #0
 801732a:	696b      	ldr	r3, [r5, #20]
 801732c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8017330:	aa1b      	add	r2, sp, #108	; 0x6c
 8017332:	685b      	ldr	r3, [r3, #4]
 8017334:	9216      	str	r2, [sp, #88]	; 0x58
 8017336:	f240 5201 	movw	r2, #1281	; 0x501
 801733a:	901f      	str	r0, [sp, #124]	; 0x7c
 801733c:	9215      	str	r2, [sp, #84]	; 0x54
 801733e:	465a      	mov	r2, fp
 8017340:	930d      	str	r3, [sp, #52]	; 0x34
 8017342:	910c      	str	r1, [sp, #48]	; 0x30
 8017344:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 8017348:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 801734c:	a815      	add	r0, sp, #84	; 0x54
 801734e:	f006 f857 	bl	801d400 <core_get_broadcasted_shape>
 8017352:	69ab      	ldr	r3, [r5, #24]
 8017354:	f8d5 c000 	ldr.w	ip, [r5]
 8017358:	930a      	str	r3, [sp, #40]	; 0x28
 801735a:	6832      	ldr	r2, [r6, #0]
 801735c:	6820      	ldr	r0, [r4, #0]
 801735e:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
 8017362:	f1bc 0f00 	cmp.w	ip, #0
 8017366:	d018      	beq.n	801739a <forward_eltwise_integer_INT8+0x126>
 8017368:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801736c:	b1ad      	cbz	r5, 801739a <forward_eltwise_integer_INT8+0x126>
 801736e:	f8bc e002 	ldrh.w	lr, [ip, #2]
 8017372:	f1be 0f00 	cmp.w	lr, #0
 8017376:	d010      	beq.n	801739a <forward_eltwise_integer_INT8+0x126>
 8017378:	682d      	ldr	r5, [r5, #0]
 801737a:	682d      	ldr	r5, [r5, #0]
 801737c:	950f      	str	r5, [sp, #60]	; 0x3c
 801737e:	b980      	cbnz	r0, 80173a2 <forward_eltwise_integer_INT8+0x12e>
 8017380:	2500      	movs	r5, #0
 8017382:	9510      	str	r5, [sp, #64]	; 0x40
 8017384:	b1d2      	cbz	r2, 80173bc <forward_eltwise_integer_INT8+0x148>
 8017386:	6855      	ldr	r5, [r2, #4]
 8017388:	b1c5      	cbz	r5, 80173bc <forward_eltwise_integer_INT8+0x148>
 801738a:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 801738e:	f1be 0f00 	cmp.w	lr, #0
 8017392:	d013      	beq.n	80173bc <forward_eltwise_integer_INT8+0x148>
 8017394:	682d      	ldr	r5, [r5, #0]
 8017396:	682d      	ldr	r5, [r5, #0]
 8017398:	e011      	b.n	80173be <forward_eltwise_integer_INT8+0x14a>
 801739a:	2500      	movs	r5, #0
 801739c:	950f      	str	r5, [sp, #60]	; 0x3c
 801739e:	2800      	cmp	r0, #0
 80173a0:	d0ee      	beq.n	8017380 <forward_eltwise_integer_INT8+0x10c>
 80173a2:	6845      	ldr	r5, [r0, #4]
 80173a4:	2d00      	cmp	r5, #0
 80173a6:	d0eb      	beq.n	8017380 <forward_eltwise_integer_INT8+0x10c>
 80173a8:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 80173ac:	f1be 0f00 	cmp.w	lr, #0
 80173b0:	d0e6      	beq.n	8017380 <forward_eltwise_integer_INT8+0x10c>
 80173b2:	682d      	ldr	r5, [r5, #0]
 80173b4:	682d      	ldr	r5, [r5, #0]
 80173b6:	9510      	str	r5, [sp, #64]	; 0x40
 80173b8:	2a00      	cmp	r2, #0
 80173ba:	d1e4      	bne.n	8017386 <forward_eltwise_integer_INT8+0x112>
 80173bc:	2500      	movs	r5, #0
 80173be:	69b6      	ldr	r6, [r6, #24]
 80173c0:	9511      	str	r5, [sp, #68]	; 0x44
 80173c2:	69a5      	ldr	r5, [r4, #24]
 80173c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80173c6:	68ad      	ldr	r5, [r5, #8]
 80173c8:	68a4      	ldr	r4, [r4, #8]
 80173ca:	68b6      	ldr	r6, [r6, #8]
 80173cc:	f1bc 0f00 	cmp.w	ip, #0
 80173d0:	d00e      	beq.n	80173f0 <forward_eltwise_integer_INT8+0x17c>
 80173d2:	f8dc e004 	ldr.w	lr, [ip, #4]
 80173d6:	f1be 0f00 	cmp.w	lr, #0
 80173da:	f000 8100 	beq.w	80175de <forward_eltwise_integer_INT8+0x36a>
 80173de:	f8bc c002 	ldrh.w	ip, [ip, #2]
 80173e2:	f1bc 0f00 	cmp.w	ip, #0
 80173e6:	d003      	beq.n	80173f0 <forward_eltwise_integer_INT8+0x17c>
 80173e8:	f8de c004 	ldr.w	ip, [lr, #4]
 80173ec:	f99c c000 	ldrsb.w	ip, [ip]
 80173f0:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 80173f4:	b158      	cbz	r0, 801740e <forward_eltwise_integer_INT8+0x19a>
 80173f6:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80173fa:	f1bc 0f00 	cmp.w	ip, #0
 80173fe:	f000 80f2 	beq.w	80175e6 <forward_eltwise_integer_INT8+0x372>
 8017402:	8840      	ldrh	r0, [r0, #2]
 8017404:	b118      	cbz	r0, 801740e <forward_eltwise_integer_INT8+0x19a>
 8017406:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801740a:	f990 0000 	ldrsb.w	r0, [r0]
 801740e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
 8017412:	b142      	cbz	r2, 8017426 <forward_eltwise_integer_INT8+0x1b2>
 8017414:	6850      	ldr	r0, [r2, #4]
 8017416:	2800      	cmp	r0, #0
 8017418:	f000 80df 	beq.w	80175da <forward_eltwise_integer_INT8+0x366>
 801741c:	8852      	ldrh	r2, [r2, #2]
 801741e:	b112      	cbz	r2, 8017426 <forward_eltwise_integer_INT8+0x1b2>
 8017420:	6842      	ldr	r2, [r0, #4]
 8017422:	f992 2000 	ldrsb.w	r2, [r2]
 8017426:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801742a:	9a08      	ldr	r2, [sp, #32]
 801742c:	b912      	cbnz	r2, 8017434 <forward_eltwise_integer_INT8+0x1c0>
 801742e:	f1b9 0f00 	cmp.w	r9, #0
 8017432:	d030      	beq.n	8017496 <forward_eltwise_integer_INT8+0x222>
 8017434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017436:	4553      	cmp	r3, sl
 8017438:	f000 80d3 	beq.w	80175e2 <forward_eltwise_integer_INT8+0x36e>
 801743c:	f1ba 0f00 	cmp.w	sl, #0
 8017440:	bf14      	ite	ne
 8017442:	2701      	movne	r7, #1
 8017444:	2702      	moveq	r7, #2
 8017446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017448:	0a1b      	lsrs	r3, r3, #8
 801744a:	f000 80f7 	beq.w	801763c <forward_eltwise_integer_INT8+0x3c8>
 801744e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017450:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8017454:	2301      	movs	r3, #1
 8017456:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801745a:	4290      	cmp	r0, r2
 801745c:	fb01 f303 	mul.w	r3, r1, r3
 8017460:	d1f9      	bne.n	8017456 <forward_eltwise_integer_INT8+0x1e2>
 8017462:	4621      	mov	r1, r4
 8017464:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 8017468:	462a      	mov	r2, r5
 801746a:	4630      	mov	r0, r6
 801746c:	9405      	str	r4, [sp, #20]
 801746e:	ac11      	add	r4, sp, #68	; 0x44
 8017470:	9706      	str	r7, [sp, #24]
 8017472:	9404      	str	r4, [sp, #16]
 8017474:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 8017478:	9403      	str	r4, [sp, #12]
 801747a:	ac10      	add	r4, sp, #64	; 0x40
 801747c:	9402      	str	r4, [sp, #8]
 801747e:	f10d 0439 	add.w	r4, sp, #57	; 0x39
 8017482:	9401      	str	r4, [sp, #4]
 8017484:	ac0f      	add	r4, sp, #60	; 0x3c
 8017486:	9400      	str	r4, [sp, #0]
 8017488:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801748a:	47a0      	blx	r4
 801748c:	b02b      	add	sp, #172	; 0xac
 801748e:	ecbd 8b02 	vpop	{d8}
 8017492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017496:	aa20      	add	r2, sp, #128	; 0x80
 8017498:	a817      	add	r0, sp, #92	; 0x5c
 801749a:	9308      	str	r3, [sp, #32]
 801749c:	9218      	str	r2, [sp, #96]	; 0x60
 801749e:	aa25      	add	r2, sp, #148	; 0x94
 80174a0:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 80174a4:	921a      	str	r2, [sp, #104]	; 0x68
 80174a6:	f240 5202 	movw	r2, #1282	; 0x502
 80174aa:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 80174ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80174b0:	9219      	str	r2, [sp, #100]	; 0x64
 80174b2:	aa15      	add	r2, sp, #84	; 0x54
 80174b4:	e9cd 9921 	strd	r9, r9, [sp, #132]	; 0x84
 80174b8:	e9cd 9923 	strd	r9, r9, [sp, #140]	; 0x8c
 80174bc:	e9cd 9926 	strd	r9, r9, [sp, #152]	; 0x98
 80174c0:	e9cd 9928 	strd	r9, r9, [sp, #160]	; 0xa0
 80174c4:	f005 ffc4 	bl	801d450 <core_compute_offsets_in_bytes>
 80174c8:	9b08      	ldr	r3, [sp, #32]
 80174ca:	aa15      	add	r2, sp, #84	; 0x54
 80174cc:	4659      	mov	r1, fp
 80174ce:	a819      	add	r0, sp, #100	; 0x64
 80174d0:	f005 ffbe 	bl	801d450 <core_compute_offsets_in_bytes>
 80174d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80174d6:	68d3      	ldr	r3, [r2, #12]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d0d7      	beq.n	801748c <forward_eltwise_integer_INT8+0x218>
 80174dc:	6891      	ldr	r1, [r2, #8]
 80174de:	eddf 8a5a 	vldr	s17, [pc, #360]	; 8017648 <forward_eltwise_integer_INT8+0x3d4>
 80174e2:	468c      	mov	ip, r1
 80174e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80174e8:	f1bc 0f00 	cmp.w	ip, #0
 80174ec:	d0ce      	beq.n	801748c <forward_eltwise_integer_INT8+0x218>
 80174ee:	9815      	ldr	r0, [sp, #84]	; 0x54
 80174f0:	f04f 0b00 	mov.w	fp, #0
 80174f4:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80174f8:	f04f 0a00 	mov.w	sl, #0
 80174fc:	2804      	cmp	r0, #4
 80174fe:	bf8c      	ite	hi
 8017500:	6911      	ldrhi	r1, [r2, #16]
 8017502:	2101      	movls	r1, #1
 8017504:	458a      	cmp	sl, r1
 8017506:	d270      	bcs.n	80175ea <forward_eltwise_integer_INT8+0x376>
 8017508:	6851      	ldr	r1, [r2, #4]
 801750a:	2900      	cmp	r1, #0
 801750c:	d054      	beq.n	80175b8 <forward_eltwise_integer_INT8+0x344>
 801750e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8017512:	f04f 0900 	mov.w	r9, #0
 8017516:	f994 2000 	ldrsb.w	r2, [r4]
 801751a:	a814      	add	r0, sp, #80	; 0x50
 801751c:	f99d 1039 	ldrsb.w	r1, [sp, #57]	; 0x39
 8017520:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8017524:	1a53      	subs	r3, r2, r1
 8017526:	f99d 103a 	ldrsb.w	r1, [sp, #58]	; 0x3a
 801752a:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 801752e:	ee07 3a10 	vmov	s14, r3
 8017532:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017536:	ee27 7a27 	vmul.f32	s14, s14, s15
 801753a:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 801753e:	f995 2000 	ldrsb.w	r2, [r5]
 8017542:	1a53      	subs	r3, r2, r1
 8017544:	aa13      	add	r2, sp, #76	; 0x4c
 8017546:	a912      	add	r1, sp, #72	; 0x48
 8017548:	ee07 3a90 	vmov	s15, r3
 801754c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017554:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8017558:	47b8      	blx	r7
 801755a:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 801755e:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 8017562:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8017566:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801756a:	ee07 3a90 	vmov	s15, r3
 801756e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801757e:	fe38 7a28 	vselgt.f32	s14, s16, s17
 8017582:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017586:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801758a:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801758e:	ee17 2a10 	vmov	r2, s14
 8017592:	f302 0207 	ssat	r2, #8, r2
 8017596:	7032      	strb	r2, [r6, #0]
 8017598:	f109 0901 	add.w	r9, r9, #1
 801759c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801759e:	4446      	add	r6, r8
 80175a0:	6852      	ldr	r2, [r2, #4]
 80175a2:	4414      	add	r4, r2
 80175a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80175a6:	6852      	ldr	r2, [r2, #4]
 80175a8:	4415      	add	r5, r2
 80175aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80175ac:	6851      	ldr	r1, [r2, #4]
 80175ae:	4549      	cmp	r1, r9
 80175b0:	d8b1      	bhi.n	8017516 <forward_eltwise_integer_INT8+0x2a2>
 80175b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80175b4:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80175b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80175ba:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80175be:	d302      	bcc.n	80175c6 <forward_eltwise_integer_INT8+0x352>
 80175c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80175c2:	6909      	ldr	r1, [r1, #16]
 80175c4:	440c      	add	r4, r1
 80175c6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80175c8:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80175cc:	d302      	bcc.n	80175d4 <forward_eltwise_integer_INT8+0x360>
 80175ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80175d0:	6909      	ldr	r1, [r1, #16]
 80175d2:	440d      	add	r5, r1
 80175d4:	f10a 0a01 	add.w	sl, sl, #1
 80175d8:	e790      	b.n	80174fc <forward_eltwise_integer_INT8+0x288>
 80175da:	4602      	mov	r2, r0
 80175dc:	e723      	b.n	8017426 <forward_eltwise_integer_INT8+0x1b2>
 80175de:	46f4      	mov	ip, lr
 80175e0:	e706      	b.n	80173f0 <forward_eltwise_integer_INT8+0x17c>
 80175e2:	2700      	movs	r7, #0
 80175e4:	e72f      	b.n	8017446 <forward_eltwise_integer_INT8+0x1d2>
 80175e6:	4660      	mov	r0, ip
 80175e8:	e711      	b.n	801740e <forward_eltwise_integer_INT8+0x19a>
 80175ea:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80175ee:	f10b 0b01 	add.w	fp, fp, #1
 80175f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80175f4:	f8de 1008 	ldr.w	r1, [lr, #8]
 80175f8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80175fc:	440c      	add	r4, r1
 80175fe:	6899      	ldr	r1, [r3, #8]
 8017600:	45dc      	cmp	ip, fp
 8017602:	440d      	add	r5, r1
 8017604:	f63f af78 	bhi.w	80174f8 <forward_eltwise_integer_INT8+0x284>
 8017608:	f8de 000c 	ldr.w	r0, [lr, #12]
 801760c:	9908      	ldr	r1, [sp, #32]
 801760e:	4404      	add	r4, r0
 8017610:	68d0      	ldr	r0, [r2, #12]
 8017612:	3101      	adds	r1, #1
 8017614:	68db      	ldr	r3, [r3, #12]
 8017616:	4288      	cmp	r0, r1
 8017618:	441d      	add	r5, r3
 801761a:	9108      	str	r1, [sp, #32]
 801761c:	f63f af64 	bhi.w	80174e8 <forward_eltwise_integer_INT8+0x274>
 8017620:	b02b      	add	sp, #172	; 0xac
 8017622:	ecbd 8b02 	vpop	{d8}
 8017626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801762a:	f04f 0a00 	mov.w	sl, #0
 801762e:	e667      	b.n	8017300 <forward_eltwise_integer_INT8+0x8c>
 8017630:	2301      	movs	r3, #1
 8017632:	4670      	mov	r0, lr
 8017634:	9308      	str	r3, [sp, #32]
 8017636:	e655      	b.n	80172e4 <forward_eltwise_integer_INT8+0x70>
 8017638:	4625      	mov	r5, r4
 801763a:	e62b      	b.n	8017294 <forward_eltwise_integer_INT8+0x20>
 801763c:	2301      	movs	r3, #1
 801763e:	e710      	b.n	8017462 <forward_eltwise_integer_INT8+0x1ee>
 8017640:	2300      	movs	r3, #0
 8017642:	685b      	ldr	r3, [r3, #4]
 8017644:	deff      	udf	#255	; 0xff
 8017646:	bf00      	nop
 8017648:	befffffc 	.word	0xbefffffc

0801764c <func_dummy>:
 801764c:	4770      	bx	lr
 801764e:	bf00      	nop

08017650 <forward_dw_3x3_sssa8_ch>:
 8017650:	6983      	ldr	r3, [r0, #24]
 8017652:	881a      	ldrh	r2, [r3, #0]
 8017654:	2a00      	cmp	r2, #0
 8017656:	f000 80d8 	beq.w	801780a <forward_dw_3x3_sssa8_ch+0x1ba>
 801765a:	6859      	ldr	r1, [r3, #4]
 801765c:	684b      	ldr	r3, [r1, #4]
 801765e:	b103      	cbz	r3, 8017662 <forward_dw_3x3_sssa8_ch+0x12>
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	2a01      	cmp	r2, #1
 8017664:	f000 80f2 	beq.w	801784c <forward_dw_3x3_sssa8_ch+0x1fc>
 8017668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801766c:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8017670:	b097      	sub	sp, #92	; 0x5c
 8017672:	f1b8 0f00 	cmp.w	r8, #0
 8017676:	d001      	beq.n	801767c <forward_dw_3x3_sssa8_ch+0x2c>
 8017678:	f8d8 8000 	ldr.w	r8, [r8]
 801767c:	2a02      	cmp	r2, #2
 801767e:	f000 80c1 	beq.w	8017804 <forward_dw_3x3_sssa8_ch+0x1b4>
 8017682:	69cc      	ldr	r4, [r1, #28]
 8017684:	2c00      	cmp	r4, #0
 8017686:	f000 80d8 	beq.w	801783a <forward_dw_3x3_sssa8_ch+0x1ea>
 801768a:	8b0d      	ldrh	r5, [r1, #24]
 801768c:	f8d4 e000 	ldr.w	lr, [r4]
 8017690:	2d01      	cmp	r5, #1
 8017692:	f200 80bc 	bhi.w	801780e <forward_dw_3x3_sssa8_ch+0x1be>
 8017696:	2500      	movs	r5, #0
 8017698:	2a03      	cmp	r2, #3
 801769a:	f000 80da 	beq.w	8017852 <forward_dw_3x3_sssa8_ch+0x202>
 801769e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80176a0:	2a00      	cmp	r2, #0
 80176a2:	f000 80cf 	beq.w	8017844 <forward_dw_3x3_sssa8_ch+0x1f4>
 80176a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80176a8:	6817      	ldr	r7, [r2, #0]
 80176aa:	910e      	str	r1, [sp, #56]	; 0x38
 80176ac:	2900      	cmp	r1, #0
 80176ae:	f000 80bc 	beq.w	801782a <forward_dw_3x3_sssa8_ch+0x1da>
 80176b2:	6856      	ldr	r6, [r2, #4]
 80176b4:	69a9      	ldr	r1, [r5, #24]
 80176b6:	69ba      	ldr	r2, [r7, #24]
 80176b8:	6889      	ldr	r1, [r1, #8]
 80176ba:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 80176bc:	9115      	str	r1, [sp, #84]	; 0x54
 80176be:	9713      	str	r7, [sp, #76]	; 0x4c
 80176c0:	68f1      	ldr	r1, [r6, #12]
 80176c2:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 80176c4:	68dd      	ldr	r5, [r3, #12]
 80176c6:	9714      	str	r7, [sp, #80]	; 0x50
 80176c8:	68cf      	ldr	r7, [r1, #12]
 80176ca:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80176ce:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80176d2:	6889      	ldr	r1, [r1, #8]
 80176d4:	970f      	str	r7, [sp, #60]	; 0x3c
 80176d6:	68ef      	ldr	r7, [r5, #12]
 80176d8:	68ad      	ldr	r5, [r5, #8]
 80176da:	9110      	str	r1, [sp, #64]	; 0x40
 80176dc:	fa1f f18c 	uxth.w	r1, ip
 80176e0:	6892      	ldr	r2, [r2, #8]
 80176e2:	9711      	str	r7, [sp, #68]	; 0x44
 80176e4:	9512      	str	r5, [sp, #72]	; 0x48
 80176e6:	2c00      	cmp	r4, #0
 80176e8:	f000 8099 	beq.w	801781e <forward_dw_3x3_sssa8_ch+0x1ce>
 80176ec:	68a4      	ldr	r4, [r4, #8]
 80176ee:	2c00      	cmp	r4, #0
 80176f0:	f000 8095 	beq.w	801781e <forward_dw_3x3_sssa8_ch+0x1ce>
 80176f4:	69a7      	ldr	r7, [r4, #24]
 80176f6:	2f00      	cmp	r7, #0
 80176f8:	bf18      	it	ne
 80176fa:	4627      	movne	r7, r4
 80176fc:	681c      	ldr	r4, [r3, #0]
 80176fe:	6835      	ldr	r5, [r6, #0]
 8017700:	f8de 0000 	ldr.w	r0, [lr]
 8017704:	2c00      	cmp	r4, #0
 8017706:	f000 8087 	beq.w	8017818 <forward_dw_3x3_sssa8_ch+0x1c8>
 801770a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801770e:	f1b9 0f00 	cmp.w	r9, #0
 8017712:	f000 8081 	beq.w	8017818 <forward_dw_3x3_sssa8_ch+0x1c8>
 8017716:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 801771a:	f1ba 0f00 	cmp.w	sl, #0
 801771e:	d07b      	beq.n	8017818 <forward_dw_3x3_sssa8_ch+0x1c8>
 8017720:	f8d9 9000 	ldr.w	r9, [r9]
 8017724:	ed99 0a00 	vldr	s0, [r9]
 8017728:	2d00      	cmp	r5, #0
 801772a:	d072      	beq.n	8017812 <forward_dw_3x3_sssa8_ch+0x1c2>
 801772c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017730:	f1b9 0f00 	cmp.w	r9, #0
 8017734:	d06d      	beq.n	8017812 <forward_dw_3x3_sssa8_ch+0x1c2>
 8017736:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801773a:	f1ba 0f00 	cmp.w	sl, #0
 801773e:	d068      	beq.n	8017812 <forward_dw_3x3_sssa8_ch+0x1c2>
 8017740:	f8d9 9000 	ldr.w	r9, [r9]
 8017744:	edd9 0a00 	vldr	s1, [r9]
 8017748:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801774c:	f8de 3018 	ldr.w	r3, [lr, #24]
 8017750:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8017754:	689b      	ldr	r3, [r3, #8]
 8017756:	930c      	str	r3, [sp, #48]	; 0x30
 8017758:	69b3      	ldr	r3, [r6, #24]
 801775a:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801775e:	b110      	cbz	r0, 8017766 <forward_dw_3x3_sssa8_ch+0x116>
 8017760:	6840      	ldr	r0, [r0, #4]
 8017762:	b100      	cbz	r0, 8017766 <forward_dw_3x3_sssa8_ch+0x116>
 8017764:	6800      	ldr	r0, [r0, #0]
 8017766:	b13c      	cbz	r4, 8017778 <forward_dw_3x3_sssa8_ch+0x128>
 8017768:	6863      	ldr	r3, [r4, #4]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d061      	beq.n	8017832 <forward_dw_3x3_sssa8_ch+0x1e2>
 801776e:	8864      	ldrh	r4, [r4, #2]
 8017770:	b114      	cbz	r4, 8017778 <forward_dw_3x3_sssa8_ch+0x128>
 8017772:	685b      	ldr	r3, [r3, #4]
 8017774:	f993 4000 	ldrsb.w	r4, [r3]
 8017778:	b13d      	cbz	r5, 801778a <forward_dw_3x3_sssa8_ch+0x13a>
 801777a:	686b      	ldr	r3, [r5, #4]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d05a      	beq.n	8017836 <forward_dw_3x3_sssa8_ch+0x1e6>
 8017780:	886d      	ldrh	r5, [r5, #2]
 8017782:	b115      	cbz	r5, 801778a <forward_dw_3x3_sssa8_ch+0x13a>
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	f993 5000 	ldrsb.w	r5, [r3]
 801778a:	fa1f fc8c 	uxth.w	ip, ip
 801778e:	231a      	movs	r3, #26
 8017790:	920d      	str	r2, [sp, #52]	; 0x34
 8017792:	fb03 230c 	mla	r3, r3, ip, r2
 8017796:	f002 fbb3 	bl	8019f00 <align_factor_ch>
 801779a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801779c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801779e:	4648      	mov	r0, r9
 80177a0:	9303      	str	r3, [sp, #12]
 80177a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80177a4:	9404      	str	r4, [sp, #16]
 80177a6:	2400      	movs	r4, #0
 80177a8:	9302      	str	r3, [sp, #8]
 80177aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80177ac:	920a      	str	r2, [sp, #40]	; 0x28
 80177ae:	9301      	str	r3, [sp, #4]
 80177b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177b2:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 80177b6:	9300      	str	r3, [sp, #0]
 80177b8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80177bc:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80177c0:	9308      	str	r3, [sp, #32]
 80177c2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80177c6:	9409      	str	r4, [sp, #36]	; 0x24
 80177c8:	9307      	str	r3, [sp, #28]
 80177ca:	465b      	mov	r3, fp
 80177cc:	e9cd 5a05 	strd	r5, sl, [sp, #20]
 80177d0:	f001 fa1c 	bl	8018c0c <forward_lite_dw_3x3_sssa8_ch>
 80177d4:	68b3      	ldr	r3, [r6, #8]
 80177d6:	0a1b      	lsrs	r3, r3, #8
 80177d8:	d032      	beq.n	8017840 <forward_dw_3x3_sssa8_ch+0x1f0>
 80177da:	68f0      	ldr	r0, [r6, #12]
 80177dc:	2201      	movs	r2, #1
 80177de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80177e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80177e6:	4298      	cmp	r0, r3
 80177e8:	fb01 f202 	mul.w	r2, r1, r2
 80177ec:	d1f9      	bne.n	80177e2 <forward_dw_3x3_sssa8_ch+0x192>
 80177ee:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80177f2:	463b      	mov	r3, r7
 80177f4:	4631      	mov	r1, r6
 80177f6:	4640      	mov	r0, r8
 80177f8:	ee17 ca90 	vmov	ip, s15
 80177fc:	b017      	add	sp, #92	; 0x5c
 80177fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017802:	4760      	bx	ip
 8017804:	2300      	movs	r3, #0
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	deff      	udf	#255	; 0xff
 801780a:	6853      	ldr	r3, [r2, #4]
 801780c:	deff      	udf	#255	; 0xff
 801780e:	6865      	ldr	r5, [r4, #4]
 8017810:	e742      	b.n	8017698 <forward_dw_3x3_sssa8_ch+0x48>
 8017812:	eddf 0a12 	vldr	s1, [pc, #72]	; 801785c <forward_dw_3x3_sssa8_ch+0x20c>
 8017816:	e797      	b.n	8017748 <forward_dw_3x3_sssa8_ch+0xf8>
 8017818:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801785c <forward_dw_3x3_sssa8_ch+0x20c>
 801781c:	e784      	b.n	8017728 <forward_dw_3x3_sssa8_ch+0xd8>
 801781e:	6a07      	ldr	r7, [r0, #32]
 8017820:	2f00      	cmp	r7, #0
 8017822:	f43f af6b 	beq.w	80176fc <forward_dw_3x3_sssa8_ch+0xac>
 8017826:	68bf      	ldr	r7, [r7, #8]
 8017828:	e768      	b.n	80176fc <forward_dw_3x3_sssa8_ch+0xac>
 801782a:	4a0d      	ldr	r2, [pc, #52]	; (8017860 <forward_dw_3x3_sssa8_ch+0x210>)
 801782c:	4646      	mov	r6, r8
 801782e:	920e      	str	r2, [sp, #56]	; 0x38
 8017830:	e740      	b.n	80176b4 <forward_dw_3x3_sssa8_ch+0x64>
 8017832:	461c      	mov	r4, r3
 8017834:	e7a0      	b.n	8017778 <forward_dw_3x3_sssa8_ch+0x128>
 8017836:	461d      	mov	r5, r3
 8017838:	e7a7      	b.n	801778a <forward_dw_3x3_sssa8_ch+0x13a>
 801783a:	46a6      	mov	lr, r4
 801783c:	4625      	mov	r5, r4
 801783e:	e72b      	b.n	8017698 <forward_dw_3x3_sssa8_ch+0x48>
 8017840:	2201      	movs	r2, #1
 8017842:	e7d4      	b.n	80177ee <forward_dw_3x3_sssa8_ch+0x19e>
 8017844:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017846:	b93b      	cbnz	r3, 8017858 <forward_dw_3x3_sssa8_ch+0x208>
 8017848:	699b      	ldr	r3, [r3, #24]
 801784a:	deff      	udf	#255	; 0xff
 801784c:	2300      	movs	r3, #0
 801784e:	685b      	ldr	r3, [r3, #4]
 8017850:	deff      	udf	#255	; 0xff
 8017852:	2300      	movs	r3, #0
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	deff      	udf	#255	; 0xff
 8017858:	68d3      	ldr	r3, [r2, #12]
 801785a:	deff      	udf	#255	; 0xff
 801785c:	00000000 	.word	0x00000000
 8017860:	0801764d 	.word	0x0801764d

08017864 <func_dummy>:
 8017864:	4770      	bx	lr
 8017866:	bf00      	nop

08017868 <forward_pw_sssa8_ch>:
 8017868:	6983      	ldr	r3, [r0, #24]
 801786a:	8819      	ldrh	r1, [r3, #0]
 801786c:	2900      	cmp	r1, #0
 801786e:	f000 80fa 	beq.w	8017a66 <forward_pw_sssa8_ch+0x1fe>
 8017872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017876:	ed2d 8b02 	vpush	{d8}
 801787a:	685d      	ldr	r5, [r3, #4]
 801787c:	b095      	sub	sp, #84	; 0x54
 801787e:	686b      	ldr	r3, [r5, #4]
 8017880:	b103      	cbz	r3, 8017884 <forward_pw_sssa8_ch+0x1c>
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	2901      	cmp	r1, #1
 8017886:	f000 8114 	beq.w	8017ab2 <forward_pw_sssa8_ch+0x24a>
 801788a:	f8d5 b010 	ldr.w	fp, [r5, #16]
 801788e:	f1bb 0f00 	cmp.w	fp, #0
 8017892:	d001      	beq.n	8017898 <forward_pw_sssa8_ch+0x30>
 8017894:	f8db b000 	ldr.w	fp, [fp]
 8017898:	2902      	cmp	r1, #2
 801789a:	f000 80e1 	beq.w	8017a60 <forward_pw_sssa8_ch+0x1f8>
 801789e:	69ec      	ldr	r4, [r5, #28]
 80178a0:	2c00      	cmp	r4, #0
 80178a2:	f000 80ff 	beq.w	8017aa4 <forward_pw_sssa8_ch+0x23c>
 80178a6:	8b2e      	ldrh	r6, [r5, #24]
 80178a8:	6822      	ldr	r2, [r4, #0]
 80178aa:	2e01      	cmp	r6, #1
 80178ac:	f200 80dd 	bhi.w	8017a6a <forward_pw_sssa8_ch+0x202>
 80178b0:	2600      	movs	r6, #0
 80178b2:	2903      	cmp	r1, #3
 80178b4:	f000 8100 	beq.w	8017ab8 <forward_pw_sssa8_ch+0x250>
 80178b8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80178ba:	2900      	cmp	r1, #0
 80178bc:	f000 80f5 	beq.w	8017aaa <forward_pw_sssa8_ch+0x242>
 80178c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80178c2:	680f      	ldr	r7, [r1, #0]
 80178c4:	9511      	str	r5, [sp, #68]	; 0x44
 80178c6:	970d      	str	r7, [sp, #52]	; 0x34
 80178c8:	2d00      	cmp	r5, #0
 80178ca:	f000 80e7 	beq.w	8017a9c <forward_pw_sssa8_ch+0x234>
 80178ce:	684f      	ldr	r7, [r1, #4]
 80178d0:	69b1      	ldr	r1, [r6, #24]
 80178d2:	68fe      	ldr	r6, [r7, #12]
 80178d4:	6889      	ldr	r1, [r1, #8]
 80178d6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80178da:	68f5      	ldr	r5, [r6, #12]
 80178dc:	9113      	str	r1, [sp, #76]	; 0x4c
 80178de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80178e0:	f8dc e004 	ldr.w	lr, [ip, #4]
 80178e4:	6989      	ldr	r1, [r1, #24]
 80178e6:	9510      	str	r5, [sp, #64]	; 0x40
 80178e8:	68b5      	ldr	r5, [r6, #8]
 80178ea:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80178ee:	9512      	str	r5, [sp, #72]	; 0x48
 80178f0:	fa1f f58e 	uxth.w	r5, lr
 80178f4:	6871      	ldr	r1, [r6, #4]
 80178f6:	ee08 5a10 	vmov	s16, r5
 80178fa:	b28d      	uxth	r5, r1
 80178fc:	950c      	str	r5, [sp, #48]	; 0x30
 80178fe:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8017902:	950a      	str	r5, [sp, #40]	; 0x28
 8017904:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8017908:	950e      	str	r5, [sp, #56]	; 0x38
 801790a:	2c00      	cmp	r4, #0
 801790c:	f000 80b5 	beq.w	8017a7a <forward_pw_sssa8_ch+0x212>
 8017910:	68a4      	ldr	r4, [r4, #8]
 8017912:	2c00      	cmp	r4, #0
 8017914:	f000 80b1 	beq.w	8017a7a <forward_pw_sssa8_ch+0x212>
 8017918:	f8d4 8018 	ldr.w	r8, [r4, #24]
 801791c:	f1b8 0f00 	cmp.w	r8, #0
 8017920:	bf18      	it	ne
 8017922:	46a0      	movne	r8, r4
 8017924:	681d      	ldr	r5, [r3, #0]
 8017926:	683e      	ldr	r6, [r7, #0]
 8017928:	6810      	ldr	r0, [r2, #0]
 801792a:	2d00      	cmp	r5, #0
 801792c:	f000 80a2 	beq.w	8017a74 <forward_pw_sssa8_ch+0x20c>
 8017930:	686c      	ldr	r4, [r5, #4]
 8017932:	2c00      	cmp	r4, #0
 8017934:	f000 809e 	beq.w	8017a74 <forward_pw_sssa8_ch+0x20c>
 8017938:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 801793c:	f1bc 0f00 	cmp.w	ip, #0
 8017940:	f000 8098 	beq.w	8017a74 <forward_pw_sssa8_ch+0x20c>
 8017944:	6824      	ldr	r4, [r4, #0]
 8017946:	ed94 0a00 	vldr	s0, [r4]
 801794a:	2e00      	cmp	r6, #0
 801794c:	f000 808f 	beq.w	8017a6e <forward_pw_sssa8_ch+0x206>
 8017950:	6874      	ldr	r4, [r6, #4]
 8017952:	2c00      	cmp	r4, #0
 8017954:	f000 808b 	beq.w	8017a6e <forward_pw_sssa8_ch+0x206>
 8017958:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 801795c:	f1bc 0f00 	cmp.w	ip, #0
 8017960:	f000 8085 	beq.w	8017a6e <forward_pw_sssa8_ch+0x206>
 8017964:	6824      	ldr	r4, [r4, #0]
 8017966:	edd4 0a00 	vldr	s1, [r4]
 801796a:	699c      	ldr	r4, [r3, #24]
 801796c:	6993      	ldr	r3, [r2, #24]
 801796e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8017972:	689b      	ldr	r3, [r3, #8]
 8017974:	930f      	str	r3, [sp, #60]	; 0x3c
 8017976:	69bb      	ldr	r3, [r7, #24]
 8017978:	689b      	ldr	r3, [r3, #8]
 801797a:	930b      	str	r3, [sp, #44]	; 0x2c
 801797c:	b110      	cbz	r0, 8017984 <forward_pw_sssa8_ch+0x11c>
 801797e:	6840      	ldr	r0, [r0, #4]
 8017980:	b100      	cbz	r0, 8017984 <forward_pw_sssa8_ch+0x11c>
 8017982:	6800      	ldr	r0, [r0, #0]
 8017984:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017986:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017988:	fb03 f202 	mul.w	r2, r3, r2
 801798c:	b28b      	uxth	r3, r1
 801798e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017990:	fb03 1202 	mla	r2, r3, r2, r1
 8017994:	4591      	cmp	r9, r2
 8017996:	d279      	bcs.n	8017a8c <forward_pw_sssa8_ch+0x224>
 8017998:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801799a:	fa1f fc8e 	uxth.w	ip, lr
 801799e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179a0:	fb02 f404 	mul.w	r4, r2, r4
 80179a4:	fb0c 9404 	mla	r4, ip, r4, r9
 80179a8:	42a1      	cmp	r1, r4
 80179aa:	bf2c      	ite	cs
 80179ac:	2400      	movcs	r4, #0
 80179ae:	2401      	movcc	r4, #1
 80179b0:	b13d      	cbz	r5, 80179c2 <forward_pw_sssa8_ch+0x15a>
 80179b2:	686a      	ldr	r2, [r5, #4]
 80179b4:	2a00      	cmp	r2, #0
 80179b6:	d06d      	beq.n	8017a94 <forward_pw_sssa8_ch+0x22c>
 80179b8:	886d      	ldrh	r5, [r5, #2]
 80179ba:	b115      	cbz	r5, 80179c2 <forward_pw_sssa8_ch+0x15a>
 80179bc:	6852      	ldr	r2, [r2, #4]
 80179be:	f992 5000 	ldrsb.w	r5, [r2]
 80179c2:	b13e      	cbz	r6, 80179d4 <forward_pw_sssa8_ch+0x16c>
 80179c4:	6872      	ldr	r2, [r6, #4]
 80179c6:	2a00      	cmp	r2, #0
 80179c8:	d066      	beq.n	8017a98 <forward_pw_sssa8_ch+0x230>
 80179ca:	8876      	ldrh	r6, [r6, #2]
 80179cc:	b116      	cbz	r6, 80179d4 <forward_pw_sssa8_ch+0x16c>
 80179ce:	6852      	ldr	r2, [r2, #4]
 80179d0:	f992 6000 	ldrsb.w	r6, [r2]
 80179d4:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 80179d8:	4652      	mov	r2, sl
 80179da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179dc:	f002 fa90 	bl	8019f00 <align_factor_ch>
 80179e0:	2c00      	cmp	r4, #0
 80179e2:	d155      	bne.n	8017a90 <forward_pw_sssa8_ch+0x228>
 80179e4:	2301      	movs	r3, #1
 80179e6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80179ea:	930a      	str	r3, [sp, #40]	; 0x28
 80179ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179ee:	2401      	movs	r4, #1
 80179f0:	9210      	str	r2, [sp, #64]	; 0x40
 80179f2:	699b      	ldr	r3, [r3, #24]
 80179f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179f8:	f005 fcca 	bl	801d390 <ai_array_get_byte_size>
 80179fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a00:	9306      	str	r3, [sp, #24]
 8017a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a04:	9008      	str	r0, [sp, #32]
 8017a06:	4648      	mov	r0, r9
 8017a08:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8017a0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017a10:	9503      	str	r5, [sp, #12]
 8017a12:	9407      	str	r4, [sp, #28]
 8017a14:	e9cd 6304 	strd	r6, r3, [sp, #16]
 8017a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a1a:	9302      	str	r3, [sp, #8]
 8017a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a1e:	9301      	str	r3, [sp, #4]
 8017a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a22:	9300      	str	r3, [sp, #0]
 8017a24:	ee18 3a10 	vmov	r3, s16
 8017a28:	f000 fc44 	bl	80182b4 <forward_lite_pw_sssa8_ch>
 8017a2c:	68bb      	ldr	r3, [r7, #8]
 8017a2e:	4622      	mov	r2, r4
 8017a30:	0a1b      	lsrs	r3, r3, #8
 8017a32:	d008      	beq.n	8017a46 <forward_pw_sssa8_ch+0x1de>
 8017a34:	68f8      	ldr	r0, [r7, #12]
 8017a36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017a3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017a3e:	4298      	cmp	r0, r3
 8017a40:	fb01 f202 	mul.w	r2, r1, r2
 8017a44:	d1f9      	bne.n	8017a3a <forward_pw_sssa8_ch+0x1d2>
 8017a46:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8017a4a:	4643      	mov	r3, r8
 8017a4c:	4639      	mov	r1, r7
 8017a4e:	4658      	mov	r0, fp
 8017a50:	ee17 ca90 	vmov	ip, s15
 8017a54:	b015      	add	sp, #84	; 0x54
 8017a56:	ecbd 8b02 	vpop	{d8}
 8017a5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5e:	4760      	bx	ip
 8017a60:	2300      	movs	r3, #0
 8017a62:	685b      	ldr	r3, [r3, #4]
 8017a64:	deff      	udf	#255	; 0xff
 8017a66:	684b      	ldr	r3, [r1, #4]
 8017a68:	deff      	udf	#255	; 0xff
 8017a6a:	6866      	ldr	r6, [r4, #4]
 8017a6c:	e721      	b.n	80178b2 <forward_pw_sssa8_ch+0x4a>
 8017a6e:	eddf 0a15 	vldr	s1, [pc, #84]	; 8017ac4 <forward_pw_sssa8_ch+0x25c>
 8017a72:	e77a      	b.n	801796a <forward_pw_sssa8_ch+0x102>
 8017a74:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8017ac4 <forward_pw_sssa8_ch+0x25c>
 8017a78:	e767      	b.n	801794a <forward_pw_sssa8_ch+0xe2>
 8017a7a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8017a7e:	f1b8 0f00 	cmp.w	r8, #0
 8017a82:	f43f af4f 	beq.w	8017924 <forward_pw_sssa8_ch+0xbc>
 8017a86:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8017a8a:	e74b      	b.n	8017924 <forward_pw_sssa8_ch+0xbc>
 8017a8c:	2400      	movs	r4, #0
 8017a8e:	e78f      	b.n	80179b0 <forward_pw_sssa8_ch+0x148>
 8017a90:	4622      	mov	r2, r4
 8017a92:	e7ab      	b.n	80179ec <forward_pw_sssa8_ch+0x184>
 8017a94:	4615      	mov	r5, r2
 8017a96:	e794      	b.n	80179c2 <forward_pw_sssa8_ch+0x15a>
 8017a98:	4616      	mov	r6, r2
 8017a9a:	e79b      	b.n	80179d4 <forward_pw_sssa8_ch+0x16c>
 8017a9c:	490a      	ldr	r1, [pc, #40]	; (8017ac8 <forward_pw_sssa8_ch+0x260>)
 8017a9e:	465f      	mov	r7, fp
 8017aa0:	9111      	str	r1, [sp, #68]	; 0x44
 8017aa2:	e715      	b.n	80178d0 <forward_pw_sssa8_ch+0x68>
 8017aa4:	4622      	mov	r2, r4
 8017aa6:	4626      	mov	r6, r4
 8017aa8:	e703      	b.n	80178b2 <forward_pw_sssa8_ch+0x4a>
 8017aaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017aac:	b93b      	cbnz	r3, 8017abe <forward_pw_sssa8_ch+0x256>
 8017aae:	699b      	ldr	r3, [r3, #24]
 8017ab0:	deff      	udf	#255	; 0xff
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	685b      	ldr	r3, [r3, #4]
 8017ab6:	deff      	udf	#255	; 0xff
 8017ab8:	2300      	movs	r3, #0
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	deff      	udf	#255	; 0xff
 8017abe:	68cb      	ldr	r3, [r1, #12]
 8017ac0:	deff      	udf	#255	; 0xff
 8017ac2:	bf00      	nop
 8017ac4:	00000000 	.word	0x00000000
 8017ac8:	08017865 	.word	0x08017865

08017acc <func_dummy>:
 8017acc:	4770      	bx	lr
 8017ace:	bf00      	nop

08017ad0 <forward_conv2d_deep_sssa8_ch>:
 8017ad0:	6983      	ldr	r3, [r0, #24]
 8017ad2:	8819      	ldrh	r1, [r3, #0]
 8017ad4:	2900      	cmp	r1, #0
 8017ad6:	f000 811d 	beq.w	8017d14 <forward_conv2d_deep_sssa8_ch+0x244>
 8017ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ade:	ed2d 8b02 	vpush	{d8}
 8017ae2:	685d      	ldr	r5, [r3, #4]
 8017ae4:	b09f      	sub	sp, #124	; 0x7c
 8017ae6:	686b      	ldr	r3, [r5, #4]
 8017ae8:	b103      	cbz	r3, 8017aec <forward_conv2d_deep_sssa8_ch+0x1c>
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	2901      	cmp	r1, #1
 8017aee:	f000 813d 	beq.w	8017d6c <forward_conv2d_deep_sssa8_ch+0x29c>
 8017af2:	f8d5 b010 	ldr.w	fp, [r5, #16]
 8017af6:	f1bb 0f00 	cmp.w	fp, #0
 8017afa:	d001      	beq.n	8017b00 <forward_conv2d_deep_sssa8_ch+0x30>
 8017afc:	f8db b000 	ldr.w	fp, [fp]
 8017b00:	2902      	cmp	r1, #2
 8017b02:	f000 8104 	beq.w	8017d0e <forward_conv2d_deep_sssa8_ch+0x23e>
 8017b06:	69ea      	ldr	r2, [r5, #28]
 8017b08:	2a00      	cmp	r2, #0
 8017b0a:	f000 8126 	beq.w	8017d5a <forward_conv2d_deep_sssa8_ch+0x28a>
 8017b0e:	8b2e      	ldrh	r6, [r5, #24]
 8017b10:	6814      	ldr	r4, [r2, #0]
 8017b12:	2e01      	cmp	r6, #1
 8017b14:	f200 8100 	bhi.w	8017d18 <forward_conv2d_deep_sssa8_ch+0x248>
 8017b18:	2600      	movs	r6, #0
 8017b1a:	2903      	cmp	r1, #3
 8017b1c:	f000 8129 	beq.w	8017d72 <forward_conv2d_deep_sssa8_ch+0x2a2>
 8017b20:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8017b22:	2900      	cmp	r1, #0
 8017b24:	f000 811e 	beq.w	8017d64 <forward_conv2d_deep_sssa8_ch+0x294>
 8017b28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017b2a:	680f      	ldr	r7, [r1, #0]
 8017b2c:	9519      	str	r5, [sp, #100]	; 0x64
 8017b2e:	9713      	str	r7, [sp, #76]	; 0x4c
 8017b30:	2d00      	cmp	r5, #0
 8017b32:	f000 810a 	beq.w	8017d4a <forward_conv2d_deep_sssa8_ch+0x27a>
 8017b36:	684f      	ldr	r7, [r1, #4]
 8017b38:	68dd      	ldr	r5, [r3, #12]
 8017b3a:	69b1      	ldr	r1, [r6, #24]
 8017b3c:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017b40:	6889      	ldr	r1, [r1, #8]
 8017b42:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8017b46:	fa1f f68e 	uxth.w	r6, lr
 8017b4a:	911d      	str	r1, [sp, #116]	; 0x74
 8017b4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017b4e:	ee08 6a10 	vmov	s16, r6
 8017b52:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8017b56:	6989      	ldr	r1, [r1, #24]
 8017b58:	9610      	str	r6, [sp, #64]	; 0x40
 8017b5a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8017b5e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017b62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8017b66:	9612      	str	r6, [sp, #72]	; 0x48
 8017b68:	b28e      	uxth	r6, r1
 8017b6a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8017b6e:	9611      	str	r6, [sp, #68]	; 0x44
 8017b70:	68ee      	ldr	r6, [r5, #12]
 8017b72:	68ad      	ldr	r5, [r5, #8]
 8017b74:	9617      	str	r6, [sp, #92]	; 0x5c
 8017b76:	9514      	str	r5, [sp, #80]	; 0x50
 8017b78:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 8017b7a:	951a      	str	r5, [sp, #104]	; 0x68
 8017b7c:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
 8017b7e:	951b      	str	r5, [sp, #108]	; 0x6c
 8017b80:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017b84:	9518      	str	r5, [sp, #96]	; 0x60
 8017b86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017b8a:	951c      	str	r5, [sp, #112]	; 0x70
 8017b8c:	2a00      	cmp	r2, #0
 8017b8e:	f000 80cd 	beq.w	8017d2c <forward_conv2d_deep_sssa8_ch+0x25c>
 8017b92:	6892      	ldr	r2, [r2, #8]
 8017b94:	2a00      	cmp	r2, #0
 8017b96:	f000 80c9 	beq.w	8017d2c <forward_conv2d_deep_sssa8_ch+0x25c>
 8017b9a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8017b9e:	f1b8 0f00 	cmp.w	r8, #0
 8017ba2:	bf18      	it	ne
 8017ba4:	4690      	movne	r8, r2
 8017ba6:	681a      	ldr	r2, [r3, #0]
 8017ba8:	683d      	ldr	r5, [r7, #0]
 8017baa:	6820      	ldr	r0, [r4, #0]
 8017bac:	2a00      	cmp	r2, #0
 8017bae:	f000 80b8 	beq.w	8017d22 <forward_conv2d_deep_sssa8_ch+0x252>
 8017bb2:	6856      	ldr	r6, [r2, #4]
 8017bb4:	2e00      	cmp	r6, #0
 8017bb6:	f000 80b4 	beq.w	8017d22 <forward_conv2d_deep_sssa8_ch+0x252>
 8017bba:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8017bbe:	f1bc 0f00 	cmp.w	ip, #0
 8017bc2:	f000 80ae 	beq.w	8017d22 <forward_conv2d_deep_sssa8_ch+0x252>
 8017bc6:	6836      	ldr	r6, [r6, #0]
 8017bc8:	ed96 0a00 	vldr	s0, [r6]
 8017bcc:	2d00      	cmp	r5, #0
 8017bce:	f000 80a5 	beq.w	8017d1c <forward_conv2d_deep_sssa8_ch+0x24c>
 8017bd2:	686e      	ldr	r6, [r5, #4]
 8017bd4:	2e00      	cmp	r6, #0
 8017bd6:	f000 80a1 	beq.w	8017d1c <forward_conv2d_deep_sssa8_ch+0x24c>
 8017bda:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8017bde:	f1bc 0f00 	cmp.w	ip, #0
 8017be2:	f000 809b 	beq.w	8017d1c <forward_conv2d_deep_sssa8_ch+0x24c>
 8017be6:	6836      	ldr	r6, [r6, #0]
 8017be8:	edd6 0a00 	vldr	s1, [r6]
 8017bec:	699e      	ldr	r6, [r3, #24]
 8017bee:	69a3      	ldr	r3, [r4, #24]
 8017bf0:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8017bf4:	689b      	ldr	r3, [r3, #8]
 8017bf6:	9316      	str	r3, [sp, #88]	; 0x58
 8017bf8:	69bb      	ldr	r3, [r7, #24]
 8017bfa:	689c      	ldr	r4, [r3, #8]
 8017bfc:	b110      	cbz	r0, 8017c04 <forward_conv2d_deep_sssa8_ch+0x134>
 8017bfe:	6840      	ldr	r0, [r0, #4]
 8017c00:	b100      	cbz	r0, 8017c04 <forward_conv2d_deep_sssa8_ch+0x134>
 8017c02:	6800      	ldr	r0, [r0, #0]
 8017c04:	b28b      	uxth	r3, r1
 8017c06:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017c08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017c0a:	fb06 f101 	mul.w	r1, r6, r1
 8017c0e:	fb03 4101 	mla	r1, r3, r1, r4
 8017c12:	458a      	cmp	sl, r1
 8017c14:	f080 8093 	bcs.w	8017d3e <forward_conv2d_deep_sssa8_ch+0x26e>
 8017c18:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8017c1a:	fa1f fc8e 	uxth.w	ip, lr
 8017c1e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017c20:	fb01 f606 	mul.w	r6, r1, r6
 8017c24:	fb0c a606 	mla	r6, ip, r6, sl
 8017c28:	42b4      	cmp	r4, r6
 8017c2a:	bf2c      	ite	cs
 8017c2c:	2600      	movcs	r6, #0
 8017c2e:	2601      	movcc	r6, #1
 8017c30:	2a00      	cmp	r2, #0
 8017c32:	d079      	beq.n	8017d28 <forward_conv2d_deep_sssa8_ch+0x258>
 8017c34:	6851      	ldr	r1, [r2, #4]
 8017c36:	2900      	cmp	r1, #0
 8017c38:	f000 808b 	beq.w	8017d52 <forward_conv2d_deep_sssa8_ch+0x282>
 8017c3c:	8852      	ldrh	r2, [r2, #2]
 8017c3e:	2a00      	cmp	r2, #0
 8017c40:	d072      	beq.n	8017d28 <forward_conv2d_deep_sssa8_ch+0x258>
 8017c42:	684a      	ldr	r2, [r1, #4]
 8017c44:	f992 2000 	ldrsb.w	r2, [r2]
 8017c48:	9215      	str	r2, [sp, #84]	; 0x54
 8017c4a:	b145      	cbz	r5, 8017c5e <forward_conv2d_deep_sssa8_ch+0x18e>
 8017c4c:	686a      	ldr	r2, [r5, #4]
 8017c4e:	2a00      	cmp	r2, #0
 8017c50:	f000 8081 	beq.w	8017d56 <forward_conv2d_deep_sssa8_ch+0x286>
 8017c54:	886d      	ldrh	r5, [r5, #2]
 8017c56:	b115      	cbz	r5, 8017c5e <forward_conv2d_deep_sssa8_ch+0x18e>
 8017c58:	6852      	ldr	r2, [r2, #4]
 8017c5a:	f992 5000 	ldrsb.w	r5, [r2]
 8017c5e:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8017c62:	464a      	mov	r2, r9
 8017c64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017c66:	f002 f94b 	bl	8019f00 <align_factor_ch>
 8017c6a:	2e00      	cmp	r6, #0
 8017c6c:	d169      	bne.n	8017d42 <forward_conv2d_deep_sssa8_ch+0x272>
 8017c6e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8017c72:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8017c76:	9318      	str	r3, [sp, #96]	; 0x60
 8017c78:	2301      	movs	r3, #1
 8017c7a:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8017c7e:	9310      	str	r3, [sp, #64]	; 0x40
 8017c80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017c82:	9217      	str	r2, [sp, #92]	; 0x5c
 8017c84:	699b      	ldr	r3, [r3, #24]
 8017c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c8a:	f005 fb81 	bl	801d390 <ai_array_get_byte_size>
 8017c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c90:	900e      	str	r0, [sp, #56]	; 0x38
 8017c92:	4650      	mov	r0, sl
 8017c94:	930c      	str	r3, [sp, #48]	; 0x30
 8017c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017c9a:	9307      	str	r3, [sp, #28]
 8017c9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c9e:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8017ca2:	9306      	str	r3, [sp, #24]
 8017ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017ca6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8017caa:	9305      	str	r3, [sp, #20]
 8017cac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017cae:	960b      	str	r6, [sp, #44]	; 0x2c
 8017cb0:	9304      	str	r3, [sp, #16]
 8017cb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017cb4:	9303      	str	r3, [sp, #12]
 8017cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017cb8:	9301      	str	r3, [sp, #4]
 8017cba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017cbc:	9300      	str	r3, [sp, #0]
 8017cbe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8017cc4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8017cc8:	e9cd 5408 	strd	r5, r4, [sp, #32]
 8017ccc:	2401      	movs	r4, #1
 8017cce:	9302      	str	r3, [sp, #8]
 8017cd0:	ee18 3a10 	vmov	r3, s16
 8017cd4:	940d      	str	r4, [sp, #52]	; 0x34
 8017cd6:	f000 fc8f 	bl	80185f8 <forward_lite_conv2d_deep_sssa8_ch>
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	0a1b      	lsrs	r3, r3, #8
 8017cde:	d03f      	beq.n	8017d60 <forward_conv2d_deep_sssa8_ch+0x290>
 8017ce0:	68f8      	ldr	r0, [r7, #12]
 8017ce2:	4622      	mov	r2, r4
 8017ce4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017ce8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017cec:	4298      	cmp	r0, r3
 8017cee:	fb01 f202 	mul.w	r2, r1, r2
 8017cf2:	d1f9      	bne.n	8017ce8 <forward_conv2d_deep_sssa8_ch+0x218>
 8017cf4:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8017cf8:	4643      	mov	r3, r8
 8017cfa:	4639      	mov	r1, r7
 8017cfc:	4658      	mov	r0, fp
 8017cfe:	ee17 ca90 	vmov	ip, s15
 8017d02:	b01f      	add	sp, #124	; 0x7c
 8017d04:	ecbd 8b02 	vpop	{d8}
 8017d08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0c:	4760      	bx	ip
 8017d0e:	2300      	movs	r3, #0
 8017d10:	685b      	ldr	r3, [r3, #4]
 8017d12:	deff      	udf	#255	; 0xff
 8017d14:	684b      	ldr	r3, [r1, #4]
 8017d16:	deff      	udf	#255	; 0xff
 8017d18:	6856      	ldr	r6, [r2, #4]
 8017d1a:	e6fe      	b.n	8017b1a <forward_conv2d_deep_sssa8_ch+0x4a>
 8017d1c:	eddf 0a17 	vldr	s1, [pc, #92]	; 8017d7c <forward_conv2d_deep_sssa8_ch+0x2ac>
 8017d20:	e764      	b.n	8017bec <forward_conv2d_deep_sssa8_ch+0x11c>
 8017d22:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8017d7c <forward_conv2d_deep_sssa8_ch+0x2ac>
 8017d26:	e751      	b.n	8017bcc <forward_conv2d_deep_sssa8_ch+0xfc>
 8017d28:	9215      	str	r2, [sp, #84]	; 0x54
 8017d2a:	e78e      	b.n	8017c4a <forward_conv2d_deep_sssa8_ch+0x17a>
 8017d2c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8017d30:	f1b8 0f00 	cmp.w	r8, #0
 8017d34:	f43f af37 	beq.w	8017ba6 <forward_conv2d_deep_sssa8_ch+0xd6>
 8017d38:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8017d3c:	e733      	b.n	8017ba6 <forward_conv2d_deep_sssa8_ch+0xd6>
 8017d3e:	2600      	movs	r6, #0
 8017d40:	e776      	b.n	8017c30 <forward_conv2d_deep_sssa8_ch+0x160>
 8017d42:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8017d46:	9218      	str	r2, [sp, #96]	; 0x60
 8017d48:	e79a      	b.n	8017c80 <forward_conv2d_deep_sssa8_ch+0x1b0>
 8017d4a:	490d      	ldr	r1, [pc, #52]	; (8017d80 <forward_conv2d_deep_sssa8_ch+0x2b0>)
 8017d4c:	465f      	mov	r7, fp
 8017d4e:	9119      	str	r1, [sp, #100]	; 0x64
 8017d50:	e6f2      	b.n	8017b38 <forward_conv2d_deep_sssa8_ch+0x68>
 8017d52:	9115      	str	r1, [sp, #84]	; 0x54
 8017d54:	e779      	b.n	8017c4a <forward_conv2d_deep_sssa8_ch+0x17a>
 8017d56:	4615      	mov	r5, r2
 8017d58:	e781      	b.n	8017c5e <forward_conv2d_deep_sssa8_ch+0x18e>
 8017d5a:	4614      	mov	r4, r2
 8017d5c:	4616      	mov	r6, r2
 8017d5e:	e6dc      	b.n	8017b1a <forward_conv2d_deep_sssa8_ch+0x4a>
 8017d60:	2201      	movs	r2, #1
 8017d62:	e7c7      	b.n	8017cf4 <forward_conv2d_deep_sssa8_ch+0x224>
 8017d64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017d66:	b93b      	cbnz	r3, 8017d78 <forward_conv2d_deep_sssa8_ch+0x2a8>
 8017d68:	699b      	ldr	r3, [r3, #24]
 8017d6a:	deff      	udf	#255	; 0xff
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	685b      	ldr	r3, [r3, #4]
 8017d70:	deff      	udf	#255	; 0xff
 8017d72:	2300      	movs	r3, #0
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	deff      	udf	#255	; 0xff
 8017d78:	68cb      	ldr	r3, [r1, #12]
 8017d7a:	deff      	udf	#255	; 0xff
 8017d7c:	00000000 	.word	0x00000000
 8017d80:	08017acd 	.word	0x08017acd

08017d84 <ai_check_custom_types>:
 8017d84:	b082      	sub	sp, #8
 8017d86:	4b12      	ldr	r3, [pc, #72]	; (8017dd0 <ai_check_custom_types+0x4c>)
 8017d88:	9301      	str	r3, [sp, #4]
 8017d8a:	b118      	cbz	r0, 8017d94 <ai_check_custom_types+0x10>
 8017d8c:	7803      	ldrb	r3, [r0, #0]
 8017d8e:	2b03      	cmp	r3, #3
 8017d90:	d002      	beq.n	8017d98 <ai_check_custom_types+0x14>
 8017d92:	2000      	movs	r0, #0
 8017d94:	b002      	add	sp, #8
 8017d96:	4770      	bx	lr
 8017d98:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	d004      	beq.n	8017daa <ai_check_custom_types+0x26>
 8017da0:	2001      	movs	r0, #1
 8017da2:	f080 0001 	eor.w	r0, r0, #1
 8017da6:	b002      	add	sp, #8
 8017da8:	4770      	bx	lr
 8017daa:	7842      	ldrb	r2, [r0, #1]
 8017dac:	3001      	adds	r0, #1
 8017dae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d1f4      	bne.n	8017da0 <ai_check_custom_types+0x1c>
 8017db6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8017dba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d1ee      	bne.n	8017da0 <ai_check_custom_types+0x1c>
 8017dc2:	7842      	ldrb	r2, [r0, #1]
 8017dc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d1e9      	bne.n	8017da0 <ai_check_custom_types+0x1c>
 8017dcc:	2000      	movs	r0, #0
 8017dce:	e7e8      	b.n	8017da2 <ai_check_custom_types+0x1e>
 8017dd0:	84048403 	.word	0x84048403

08017dd4 <ai_layers_init_all>:
 8017dd4:	2100      	movs	r1, #0
 8017dd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017dd8:	b13b      	cbz	r3, 8017dea <ai_layers_init_all+0x16>
 8017dda:	691a      	ldr	r2, [r3, #16]
 8017ddc:	3101      	adds	r1, #1
 8017dde:	60d8      	str	r0, [r3, #12]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	4613      	mov	r3, r2
 8017de4:	d001      	beq.n	8017dea <ai_layers_init_all+0x16>
 8017de6:	2a00      	cmp	r2, #0
 8017de8:	d1f6      	bne.n	8017dd8 <ai_layers_init_all+0x4>
 8017dea:	4608      	mov	r0, r1
 8017dec:	4770      	bx	lr
 8017dee:	bf00      	nop

08017df0 <ai_layers_post_init_all>:
 8017df0:	b538      	push	{r3, r4, r5, lr}
 8017df2:	2500      	movs	r5, #0
 8017df4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8017df6:	b16c      	cbz	r4, 8017e14 <ai_layers_post_init_all+0x24>
 8017df8:	6863      	ldr	r3, [r4, #4]
 8017dfa:	07db      	lsls	r3, r3, #31
 8017dfc:	d504      	bpl.n	8017e08 <ai_layers_post_init_all+0x18>
 8017dfe:	6a23      	ldr	r3, [r4, #32]
 8017e00:	4620      	mov	r0, r4
 8017e02:	b10b      	cbz	r3, 8017e08 <ai_layers_post_init_all+0x18>
 8017e04:	3501      	adds	r5, #1
 8017e06:	4798      	blx	r3
 8017e08:	6923      	ldr	r3, [r4, #16]
 8017e0a:	42a3      	cmp	r3, r4
 8017e0c:	461c      	mov	r4, r3
 8017e0e:	d001      	beq.n	8017e14 <ai_layers_post_init_all+0x24>
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d1f0      	bne.n	8017df6 <ai_layers_post_init_all+0x6>
 8017e14:	4628      	mov	r0, r5
 8017e16:	bd38      	pop	{r3, r4, r5, pc}

08017e18 <ai_layers_forward_all>:
 8017e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e1c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8017e20:	4604      	mov	r4, r0
 8017e22:	f1b8 0f00 	cmp.w	r8, #0
 8017e26:	d02a      	beq.n	8017e7e <ai_layers_forward_all+0x66>
 8017e28:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8017e2a:	6381      	str	r1, [r0, #56]	; 0x38
 8017e2c:	b319      	cbz	r1, 8017e76 <ai_layers_forward_all+0x5e>
 8017e2e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8017e30:	2001      	movs	r0, #1
 8017e32:	47c0      	blx	r8
 8017e34:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017e36:	b1f6      	cbz	r6, 8017e76 <ai_layers_forward_all+0x5e>
 8017e38:	2700      	movs	r7, #0
 8017e3a:	4631      	mov	r1, r6
 8017e3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8017e3e:	2002      	movs	r0, #2
 8017e40:	47c0      	blx	r8
 8017e42:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8017e44:	4628      	mov	r0, r5
 8017e46:	696b      	ldr	r3, [r5, #20]
 8017e48:	4798      	blx	r3
 8017e4a:	692e      	ldr	r6, [r5, #16]
 8017e4c:	2003      	movs	r0, #3
 8017e4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8017e50:	42b5      	cmp	r5, r6
 8017e52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017e54:	d007      	beq.n	8017e66 <ai_layers_forward_all+0x4e>
 8017e56:	47c0      	blx	r8
 8017e58:	3701      	adds	r7, #1
 8017e5a:	63a6      	str	r6, [r4, #56]	; 0x38
 8017e5c:	2e00      	cmp	r6, #0
 8017e5e:	d1ec      	bne.n	8017e3a <ai_layers_forward_all+0x22>
 8017e60:	4638      	mov	r0, r7
 8017e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e66:	2003      	movs	r0, #3
 8017e68:	3701      	adds	r7, #1
 8017e6a:	47c0      	blx	r8
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	4638      	mov	r0, r7
 8017e70:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e76:	2700      	movs	r7, #0
 8017e78:	4638      	mov	r0, r7
 8017e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e7e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8017e80:	6385      	str	r5, [r0, #56]	; 0x38
 8017e82:	2d00      	cmp	r5, #0
 8017e84:	d0f7      	beq.n	8017e76 <ai_layers_forward_all+0x5e>
 8017e86:	4647      	mov	r7, r8
 8017e88:	696b      	ldr	r3, [r5, #20]
 8017e8a:	4628      	mov	r0, r5
 8017e8c:	4798      	blx	r3
 8017e8e:	462b      	mov	r3, r5
 8017e90:	692d      	ldr	r5, [r5, #16]
 8017e92:	429d      	cmp	r5, r3
 8017e94:	d004      	beq.n	8017ea0 <ai_layers_forward_all+0x88>
 8017e96:	3701      	adds	r7, #1
 8017e98:	63a5      	str	r5, [r4, #56]	; 0x38
 8017e9a:	2d00      	cmp	r5, #0
 8017e9c:	d1f4      	bne.n	8017e88 <ai_layers_forward_all+0x70>
 8017e9e:	e7df      	b.n	8017e60 <ai_layers_forward_all+0x48>
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	3701      	adds	r7, #1
 8017ea4:	63a3      	str	r3, [r4, #56]	; 0x38
 8017ea6:	e7db      	b.n	8017e60 <ai_layers_forward_all+0x48>

08017ea8 <func_dummy>:
 8017ea8:	4770      	bx	lr
 8017eaa:	bf00      	nop

08017eac <forward_conv2d_rgb_sssa8_ch>:
 8017eac:	6982      	ldr	r2, [r0, #24]
 8017eae:	8813      	ldrh	r3, [r2, #0]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	f000 80df 	beq.w	8018074 <forward_conv2d_rgb_sssa8_ch+0x1c8>
 8017eb6:	6852      	ldr	r2, [r2, #4]
 8017eb8:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8017ebc:	f1bc 0f00 	cmp.w	ip, #0
 8017ec0:	d001      	beq.n	8017ec6 <forward_conv2d_rgb_sssa8_ch+0x1a>
 8017ec2:	f8dc c000 	ldr.w	ip, [ip]
 8017ec6:	2b01      	cmp	r3, #1
 8017ec8:	f000 80f5 	beq.w	80180b6 <forward_conv2d_rgb_sssa8_ch+0x20a>
 8017ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed0:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8017ed4:	b095      	sub	sp, #84	; 0x54
 8017ed6:	f1b8 0f00 	cmp.w	r8, #0
 8017eda:	d001      	beq.n	8017ee0 <forward_conv2d_rgb_sssa8_ch+0x34>
 8017edc:	f8d8 8000 	ldr.w	r8, [r8]
 8017ee0:	2b02      	cmp	r3, #2
 8017ee2:	f000 80c4 	beq.w	801806e <forward_conv2d_rgb_sssa8_ch+0x1c2>
 8017ee6:	69d4      	ldr	r4, [r2, #28]
 8017ee8:	2c00      	cmp	r4, #0
 8017eea:	f000 80db 	beq.w	80180a4 <forward_conv2d_rgb_sssa8_ch+0x1f8>
 8017eee:	8b11      	ldrh	r1, [r2, #24]
 8017ef0:	f8d4 e000 	ldr.w	lr, [r4]
 8017ef4:	2901      	cmp	r1, #1
 8017ef6:	f200 80bf 	bhi.w	8018078 <forward_conv2d_rgb_sssa8_ch+0x1cc>
 8017efa:	2100      	movs	r1, #0
 8017efc:	2b03      	cmp	r3, #3
 8017efe:	f000 80dd 	beq.w	80180bc <forward_conv2d_rgb_sssa8_ch+0x210>
 8017f02:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	f000 80d2 	beq.w	80180ae <forward_conv2d_rgb_sssa8_ch+0x202>
 8017f0a:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8017f0e:	681d      	ldr	r5, [r3, #0]
 8017f10:	f1bb 0f00 	cmp.w	fp, #0
 8017f14:	f000 80be 	beq.w	8018094 <forward_conv2d_rgb_sssa8_ch+0x1e8>
 8017f18:	685e      	ldr	r6, [r3, #4]
 8017f1a:	698a      	ldr	r2, [r1, #24]
 8017f1c:	69ab      	ldr	r3, [r5, #24]
 8017f1e:	6892      	ldr	r2, [r2, #8]
 8017f20:	68f1      	ldr	r1, [r6, #12]
 8017f22:	9213      	str	r2, [sp, #76]	; 0x4c
 8017f24:	689a      	ldr	r2, [r3, #8]
 8017f26:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8017f2a:	684d      	ldr	r5, [r1, #4]
 8017f2c:	689b      	ldr	r3, [r3, #8]
 8017f2e:	950c      	str	r5, [sp, #48]	; 0x30
 8017f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f32:	688b      	ldr	r3, [r1, #8]
 8017f34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8017f36:	930e      	str	r3, [sp, #56]	; 0x38
 8017f38:	888b      	ldrh	r3, [r1, #4]
 8017f3a:	f8de 100c 	ldr.w	r1, [lr, #12]
 8017f3e:	9311      	str	r3, [sp, #68]	; 0x44
 8017f40:	684b      	ldr	r3, [r1, #4]
 8017f42:	b2a9      	uxth	r1, r5
 8017f44:	9312      	str	r3, [sp, #72]	; 0x48
 8017f46:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8017f48:	9310      	str	r3, [sp, #64]	; 0x40
 8017f4a:	2c00      	cmp	r4, #0
 8017f4c:	f000 809c 	beq.w	8018088 <forward_conv2d_rgb_sssa8_ch+0x1dc>
 8017f50:	68a4      	ldr	r4, [r4, #8]
 8017f52:	2c00      	cmp	r4, #0
 8017f54:	f000 8098 	beq.w	8018088 <forward_conv2d_rgb_sssa8_ch+0x1dc>
 8017f58:	69a7      	ldr	r7, [r4, #24]
 8017f5a:	2f00      	cmp	r7, #0
 8017f5c:	bf18      	it	ne
 8017f5e:	4627      	movne	r7, r4
 8017f60:	f8dc 4000 	ldr.w	r4, [ip]
 8017f64:	6835      	ldr	r5, [r6, #0]
 8017f66:	f8de 0000 	ldr.w	r0, [lr]
 8017f6a:	2c00      	cmp	r4, #0
 8017f6c:	f000 8089 	beq.w	8018082 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8017f70:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017f74:	f1b9 0f00 	cmp.w	r9, #0
 8017f78:	f000 8083 	beq.w	8018082 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8017f7c:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 8017f80:	f1ba 0f00 	cmp.w	sl, #0
 8017f84:	d07d      	beq.n	8018082 <forward_conv2d_rgb_sssa8_ch+0x1d6>
 8017f86:	f8d9 9000 	ldr.w	r9, [r9]
 8017f8a:	ed99 0a00 	vldr	s0, [r9]
 8017f8e:	2d00      	cmp	r5, #0
 8017f90:	d074      	beq.n	801807c <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8017f92:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017f96:	f1b9 0f00 	cmp.w	r9, #0
 8017f9a:	d06f      	beq.n	801807c <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8017f9c:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 8017fa0:	f1ba 0f00 	cmp.w	sl, #0
 8017fa4:	d06a      	beq.n	801807c <forward_conv2d_rgb_sssa8_ch+0x1d0>
 8017fa6:	f8d9 9000 	ldr.w	r9, [r9]
 8017faa:	edd9 0a00 	vldr	s1, [r9]
 8017fae:	69b3      	ldr	r3, [r6, #24]
 8017fb0:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8017fb4:	689b      	ldr	r3, [r3, #8]
 8017fb6:	f8de c018 	ldr.w	ip, [lr, #24]
 8017fba:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8017fbe:	f8dc a008 	ldr.w	sl, [ip, #8]
 8017fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fc4:	b110      	cbz	r0, 8017fcc <forward_conv2d_rgb_sssa8_ch+0x120>
 8017fc6:	6840      	ldr	r0, [r0, #4]
 8017fc8:	b100      	cbz	r0, 8017fcc <forward_conv2d_rgb_sssa8_ch+0x120>
 8017fca:	6800      	ldr	r0, [r0, #0]
 8017fcc:	b154      	cbz	r4, 8017fe4 <forward_conv2d_rgb_sssa8_ch+0x138>
 8017fce:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8017fd2:	f1bc 0f00 	cmp.w	ip, #0
 8017fd6:	d061      	beq.n	801809c <forward_conv2d_rgb_sssa8_ch+0x1f0>
 8017fd8:	8864      	ldrh	r4, [r4, #2]
 8017fda:	b11c      	cbz	r4, 8017fe4 <forward_conv2d_rgb_sssa8_ch+0x138>
 8017fdc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017fe0:	f994 4000 	ldrsb.w	r4, [r4]
 8017fe4:	b155      	cbz	r5, 8017ffc <forward_conv2d_rgb_sssa8_ch+0x150>
 8017fe6:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017fea:	f1bc 0f00 	cmp.w	ip, #0
 8017fee:	d057      	beq.n	80180a0 <forward_conv2d_rgb_sssa8_ch+0x1f4>
 8017ff0:	886d      	ldrh	r5, [r5, #2]
 8017ff2:	b11d      	cbz	r5, 8017ffc <forward_conv2d_rgb_sssa8_ch+0x150>
 8017ff4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017ff8:	f995 5000 	ldrsb.w	r5, [r5]
 8017ffc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8018000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018004:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018008:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801800c:	f001 ff78 	bl	8019f00 <align_factor_ch>
 8018010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018014:	4648      	mov	r0, r9
 8018016:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018018:	9208      	str	r2, [sp, #32]
 801801a:	4652      	mov	r2, sl
 801801c:	9404      	str	r4, [sp, #16]
 801801e:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8018022:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018024:	9303      	str	r3, [sp, #12]
 8018026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018028:	9302      	str	r3, [sp, #8]
 801802a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801802c:	9301      	str	r3, [sp, #4]
 801802e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018032:	9307      	str	r3, [sp, #28]
 8018034:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018038:	9300      	str	r3, [sp, #0]
 801803a:	460b      	mov	r3, r1
 801803c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8018040:	f000 fba0 	bl	8018784 <forward_lite_conv2d_rgb_sssa8_ch>
 8018044:	68b3      	ldr	r3, [r6, #8]
 8018046:	0a1b      	lsrs	r3, r3, #8
 8018048:	d02f      	beq.n	80180aa <forward_conv2d_rgb_sssa8_ch+0x1fe>
 801804a:	68f0      	ldr	r0, [r6, #12]
 801804c:	2201      	movs	r2, #1
 801804e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8018052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018056:	4298      	cmp	r0, r3
 8018058:	fb01 f202 	mul.w	r2, r1, r2
 801805c:	d1f9      	bne.n	8018052 <forward_conv2d_rgb_sssa8_ch+0x1a6>
 801805e:	463b      	mov	r3, r7
 8018060:	4631      	mov	r1, r6
 8018062:	4640      	mov	r0, r8
 8018064:	46dc      	mov	ip, fp
 8018066:	b015      	add	sp, #84	; 0x54
 8018068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801806c:	4760      	bx	ip
 801806e:	2300      	movs	r3, #0
 8018070:	685b      	ldr	r3, [r3, #4]
 8018072:	deff      	udf	#255	; 0xff
 8018074:	685b      	ldr	r3, [r3, #4]
 8018076:	deff      	udf	#255	; 0xff
 8018078:	6861      	ldr	r1, [r4, #4]
 801807a:	e73f      	b.n	8017efc <forward_conv2d_rgb_sssa8_ch+0x50>
 801807c:	eddf 0a12 	vldr	s1, [pc, #72]	; 80180c8 <forward_conv2d_rgb_sssa8_ch+0x21c>
 8018080:	e795      	b.n	8017fae <forward_conv2d_rgb_sssa8_ch+0x102>
 8018082:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80180c8 <forward_conv2d_rgb_sssa8_ch+0x21c>
 8018086:	e782      	b.n	8017f8e <forward_conv2d_rgb_sssa8_ch+0xe2>
 8018088:	6a07      	ldr	r7, [r0, #32]
 801808a:	2f00      	cmp	r7, #0
 801808c:	f43f af68 	beq.w	8017f60 <forward_conv2d_rgb_sssa8_ch+0xb4>
 8018090:	68bf      	ldr	r7, [r7, #8]
 8018092:	e765      	b.n	8017f60 <forward_conv2d_rgb_sssa8_ch+0xb4>
 8018094:	4646      	mov	r6, r8
 8018096:	f8df b034 	ldr.w	fp, [pc, #52]	; 80180cc <forward_conv2d_rgb_sssa8_ch+0x220>
 801809a:	e73e      	b.n	8017f1a <forward_conv2d_rgb_sssa8_ch+0x6e>
 801809c:	4664      	mov	r4, ip
 801809e:	e7a1      	b.n	8017fe4 <forward_conv2d_rgb_sssa8_ch+0x138>
 80180a0:	4665      	mov	r5, ip
 80180a2:	e7ab      	b.n	8017ffc <forward_conv2d_rgb_sssa8_ch+0x150>
 80180a4:	46a6      	mov	lr, r4
 80180a6:	4621      	mov	r1, r4
 80180a8:	e728      	b.n	8017efc <forward_conv2d_rgb_sssa8_ch+0x50>
 80180aa:	2201      	movs	r2, #1
 80180ac:	e7d7      	b.n	801805e <forward_conv2d_rgb_sssa8_ch+0x1b2>
 80180ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80180b0:	b93a      	cbnz	r2, 80180c2 <forward_conv2d_rgb_sssa8_ch+0x216>
 80180b2:	6993      	ldr	r3, [r2, #24]
 80180b4:	deff      	udf	#255	; 0xff
 80180b6:	2300      	movs	r3, #0
 80180b8:	685b      	ldr	r3, [r3, #4]
 80180ba:	deff      	udf	#255	; 0xff
 80180bc:	2300      	movs	r3, #0
 80180be:	685b      	ldr	r3, [r3, #4]
 80180c0:	deff      	udf	#255	; 0xff
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	deff      	udf	#255	; 0xff
 80180c6:	bf00      	nop
 80180c8:	00000000 	.word	0x00000000
 80180cc:	08017ea9 	.word	0x08017ea9

080180d0 <forward_ap_integer_INT8>:
 80180d0:	6983      	ldr	r3, [r0, #24]
 80180d2:	881a      	ldrh	r2, [r3, #0]
 80180d4:	2a00      	cmp	r2, #0
 80180d6:	d074      	beq.n	80181c2 <forward_ap_integer_INT8+0xf2>
 80180d8:	6859      	ldr	r1, [r3, #4]
 80180da:	684b      	ldr	r3, [r1, #4]
 80180dc:	b103      	cbz	r3, 80180e0 <forward_ap_integer_INT8+0x10>
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	2a01      	cmp	r2, #1
 80180e2:	f000 80e0 	beq.w	80182a6 <forward_ap_integer_INT8+0x1d6>
 80180e6:	690a      	ldr	r2, [r1, #16]
 80180e8:	2a00      	cmp	r2, #0
 80180ea:	f000 80df 	beq.w	80182ac <forward_ap_integer_INT8+0x1dc>
 80180ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f2:	68de      	ldr	r6, [r3, #12]
 80180f4:	b095      	sub	sp, #84	; 0x54
 80180f6:	6811      	ldr	r1, [r2, #0]
 80180f8:	681c      	ldr	r4, [r3, #0]
 80180fa:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80180fe:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8018102:	8932      	ldrh	r2, [r6, #8]
 8018104:	89b3      	ldrh	r3, [r6, #12]
 8018106:	8b86      	ldrh	r6, [r0, #28]
 8018108:	6b07      	ldr	r7, [r0, #48]	; 0x30
 801810a:	960d      	str	r6, [sp, #52]	; 0x34
 801810c:	8c06      	ldrh	r6, [r0, #32]
 801810e:	68cd      	ldr	r5, [r1, #12]
 8018110:	960e      	str	r6, [sp, #56]	; 0x38
 8018112:	88be      	ldrh	r6, [r7, #4]
 8018114:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8018118:	960f      	str	r6, [sp, #60]	; 0x3c
 801811a:	883e      	ldrh	r6, [r7, #0]
 801811c:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8018120:	9610      	str	r6, [sp, #64]	; 0x40
 8018122:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8018124:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8018126:	9611      	str	r6, [sp, #68]	; 0x44
 8018128:	f8d1 a018 	ldr.w	sl, [r1, #24]
 801812c:	680e      	ldr	r6, [r1, #0]
 801812e:	9012      	str	r0, [sp, #72]	; 0x48
 8018130:	2c00      	cmp	r4, #0
 8018132:	d060      	beq.n	80181f6 <forward_ap_integer_INT8+0x126>
 8018134:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8018138:	f1b9 0f00 	cmp.w	r9, #0
 801813c:	d043      	beq.n	80181c6 <forward_ap_integer_INT8+0xf6>
 801813e:	8865      	ldrh	r5, [r4, #2]
 8018140:	2d00      	cmp	r5, #0
 8018142:	d06e      	beq.n	8018222 <forward_ap_integer_INT8+0x152>
 8018144:	f8d9 1000 	ldr.w	r1, [r9]
 8018148:	ed91 0a00 	vldr	s0, [r1]
 801814c:	2e00      	cmp	r6, #0
 801814e:	d06c      	beq.n	801822a <forward_ap_integer_INT8+0x15a>
 8018150:	6877      	ldr	r7, [r6, #4]
 8018152:	2f00      	cmp	r7, #0
 8018154:	d03e      	beq.n	80181d4 <forward_ap_integer_INT8+0x104>
 8018156:	8871      	ldrh	r1, [r6, #2]
 8018158:	9113      	str	r1, [sp, #76]	; 0x4c
 801815a:	2900      	cmp	r1, #0
 801815c:	d053      	beq.n	8018206 <forward_ap_integer_INT8+0x136>
 801815e:	683d      	ldr	r5, [r7, #0]
 8018160:	f8db 0008 	ldr.w	r0, [fp, #8]
 8018164:	f8da 1008 	ldr.w	r1, [sl, #8]
 8018168:	edd5 0a00 	vldr	s1, [r5]
 801816c:	f1b9 0f00 	cmp.w	r9, #0
 8018170:	d055      	beq.n	801821e <forward_ap_integer_INT8+0x14e>
 8018172:	8864      	ldrh	r4, [r4, #2]
 8018174:	2c00      	cmp	r4, #0
 8018176:	d039      	beq.n	80181ec <forward_ap_integer_INT8+0x11c>
 8018178:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801817c:	f994 4000 	ldrsb.w	r4, [r4]
 8018180:	2e00      	cmp	r6, #0
 8018182:	d036      	beq.n	80181f2 <forward_ap_integer_INT8+0x122>
 8018184:	2f00      	cmp	r7, #0
 8018186:	d034      	beq.n	80181f2 <forward_ap_integer_INT8+0x122>
 8018188:	8875      	ldrh	r5, [r6, #2]
 801818a:	9513      	str	r5, [sp, #76]	; 0x4c
 801818c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801818e:	b115      	cbz	r5, 8018196 <forward_ap_integer_INT8+0xc6>
 8018190:	687d      	ldr	r5, [r7, #4]
 8018192:	f995 5000 	ldrsb.w	r5, [r5]
 8018196:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 801819a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801819c:	9406      	str	r4, [sp, #24]
 801819e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80181a0:	9405      	str	r4, [sp, #20]
 80181a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80181a4:	9404      	str	r4, [sp, #16]
 80181a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80181a8:	9403      	str	r4, [sp, #12]
 80181aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80181ac:	9402      	str	r4, [sp, #8]
 80181ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80181b0:	e9cd e807 	strd	lr, r8, [sp, #28]
 80181b4:	e9cd c400 	strd	ip, r4, [sp]
 80181b8:	f004 fc3c 	bl	801ca34 <st_int8_avepool>
 80181bc:	b015      	add	sp, #84	; 0x54
 80181be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c2:	6853      	ldr	r3, [r2, #4]
 80181c4:	deff      	udf	#255	; 0xff
 80181c6:	2e00      	cmp	r6, #0
 80181c8:	d039      	beq.n	801823e <forward_ap_integer_INT8+0x16e>
 80181ca:	6877      	ldr	r7, [r6, #4]
 80181cc:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 80181d0:	2f00      	cmp	r7, #0
 80181d2:	d1c0      	bne.n	8018156 <forward_ap_integer_INT8+0x86>
 80181d4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80181d8:	f8da 1008 	ldr.w	r1, [sl, #8]
 80181dc:	f1b9 0f00 	cmp.w	r9, #0
 80181e0:	d05c      	beq.n	801829c <forward_ap_integer_INT8+0x1cc>
 80181e2:	8864      	ldrh	r4, [r4, #2]
 80181e4:	2c00      	cmp	r4, #0
 80181e6:	d152      	bne.n	801828e <forward_ap_integer_INT8+0x1be>
 80181e8:	eddf 0a31 	vldr	s1, [pc, #196]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 80181ec:	2400      	movs	r4, #0
 80181ee:	2f00      	cmp	r7, #0
 80181f0:	d1ca      	bne.n	8018188 <forward_ap_integer_INT8+0xb8>
 80181f2:	2500      	movs	r5, #0
 80181f4:	e7cf      	b.n	8018196 <forward_ap_integer_INT8+0xc6>
 80181f6:	b316      	cbz	r6, 801823e <forward_ap_integer_INT8+0x16e>
 80181f8:	6877      	ldr	r7, [r6, #4]
 80181fa:	b35f      	cbz	r7, 8018254 <forward_ap_integer_INT8+0x184>
 80181fc:	8871      	ldrh	r1, [r6, #2]
 80181fe:	9113      	str	r1, [sp, #76]	; 0x4c
 8018200:	bb99      	cbnz	r1, 801826a <forward_ap_integer_INT8+0x19a>
 8018202:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018206:	f8db 0008 	ldr.w	r0, [fp, #8]
 801820a:	f8da 1008 	ldr.w	r1, [sl, #8]
 801820e:	b194      	cbz	r4, 8018236 <forward_ap_integer_INT8+0x166>
 8018210:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8018214:	eddf 0a26 	vldr	s1, [pc, #152]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018218:	f1b9 0f00 	cmp.w	r9, #0
 801821c:	d1a9      	bne.n	8018172 <forward_ap_integer_INT8+0xa2>
 801821e:	464c      	mov	r4, r9
 8018220:	e7b4      	b.n	801818c <forward_ap_integer_INT8+0xbc>
 8018222:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018226:	2e00      	cmp	r6, #0
 8018228:	d192      	bne.n	8018150 <forward_ap_integer_INT8+0x80>
 801822a:	f8db 0008 	ldr.w	r0, [fp, #8]
 801822e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8018232:	bb25      	cbnz	r5, 801827e <forward_ap_integer_INT8+0x1ae>
 8018234:	462c      	mov	r4, r5
 8018236:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 801823a:	4625      	mov	r5, r4
 801823c:	e7ab      	b.n	8018196 <forward_ap_integer_INT8+0xc6>
 801823e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018242:	4634      	mov	r4, r6
 8018244:	f8db 0008 	ldr.w	r0, [fp, #8]
 8018248:	4635      	mov	r5, r6
 801824a:	eef0 0a40 	vmov.f32	s1, s0
 801824e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8018252:	e7a0      	b.n	8018196 <forward_ap_integer_INT8+0xc6>
 8018254:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018258:	463c      	mov	r4, r7
 801825a:	f8db 0008 	ldr.w	r0, [fp, #8]
 801825e:	463d      	mov	r5, r7
 8018260:	eef0 0a40 	vmov.f32	s1, s0
 8018264:	f8da 1008 	ldr.w	r1, [sl, #8]
 8018268:	e795      	b.n	8018196 <forward_ap_integer_INT8+0xc6>
 801826a:	683d      	ldr	r5, [r7, #0]
 801826c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8018270:	f8da 1008 	ldr.w	r1, [sl, #8]
 8018274:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018278:	edd5 0a00 	vldr	s1, [r5]
 801827c:	e788      	b.n	8018190 <forward_ap_integer_INT8+0xc0>
 801827e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8018282:	4635      	mov	r5, r6
 8018284:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018288:	f994 4000 	ldrsb.w	r4, [r4]
 801828c:	e783      	b.n	8018196 <forward_ap_integer_INT8+0xc6>
 801828e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8018292:	eddf 0a07 	vldr	s1, [pc, #28]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 8018296:	f994 4000 	ldrsb.w	r4, [r4]
 801829a:	e7aa      	b.n	80181f2 <forward_ap_integer_INT8+0x122>
 801829c:	464c      	mov	r4, r9
 801829e:	eddf 0a04 	vldr	s1, [pc, #16]	; 80182b0 <forward_ap_integer_INT8+0x1e0>
 80182a2:	464d      	mov	r5, r9
 80182a4:	e777      	b.n	8018196 <forward_ap_integer_INT8+0xc6>
 80182a6:	2300      	movs	r3, #0
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	deff      	udf	#255	; 0xff
 80182ac:	68d3      	ldr	r3, [r2, #12]
 80182ae:	deff      	udf	#255	; 0xff
 80182b0:	00000000 	.word	0x00000000

080182b4 <forward_lite_pw_sssa8_ch>:
 80182b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182b8:	b093      	sub	sp, #76	; 0x4c
 80182ba:	4604      	mov	r4, r0
 80182bc:	930a      	str	r3, [sp, #40]	; 0x28
 80182be:	f99d 307c 	ldrsb.w	r3, [sp, #124]	; 0x7c
 80182c2:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 80182c6:	930e      	str	r3, [sp, #56]	; 0x38
 80182c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80182ca:	9110      	str	r1, [sp, #64]	; 0x40
 80182cc:	eb03 0187 	add.w	r1, r3, r7, lsl #2
 80182d0:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80182d4:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80182d8:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80182dc:	f99d c080 	ldrsb.w	ip, [sp, #128]	; 0x80
 80182e0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80182e4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80182e6:	920d      	str	r2, [sp, #52]	; 0x34
 80182e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80182ea:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80182ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80182f0:	00bb      	lsls	r3, r7, #2
 80182f2:	9311      	str	r3, [sp, #68]	; 0x44
 80182f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80182f6:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80182fa:	007b      	lsls	r3, r7, #1
 80182fc:	930c      	str	r3, [sp, #48]	; 0x30
 80182fe:	2f00      	cmp	r7, #0
 8018300:	d075      	beq.n	80183ee <forward_lite_pw_sssa8_ch+0x13a>
 8018302:	3104      	adds	r1, #4
 8018304:	4648      	mov	r0, r9
 8018306:	eb09 0e03 	add.w	lr, r9, r3
 801830a:	f04f 0801 	mov.w	r8, #1
 801830e:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8018312:	1e5a      	subs	r2, r3, #1
 8018314:	fa08 f603 	lsl.w	r6, r8, r3
 8018318:	fa0c f303 	lsl.w	r3, ip, r3
 801831c:	b292      	uxth	r2, r2
 801831e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 8018322:	2a14      	cmp	r2, #20
 8018324:	d846      	bhi.n	80183b4 <forward_lite_pw_sssa8_ch+0x100>
 8018326:	4586      	cmp	lr, r0
 8018328:	f841 3c04 	str.w	r3, [r1, #-4]
 801832c:	f101 0104 	add.w	r1, r1, #4
 8018330:	d1ed      	bne.n	801830e <forward_lite_pw_sssa8_ch+0x5a>
 8018332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018334:	eba9 0903 	sub.w	r9, r9, r3
 8018338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801833a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801833c:	ebae 0303 	sub.w	r3, lr, r3
 8018340:	930c      	str	r3, [sp, #48]	; 0x30
 8018342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018344:	fb02 f303 	mul.w	r3, r2, r3
 8018348:	930d      	str	r3, [sp, #52]	; 0x34
 801834a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801834c:	2b01      	cmp	r3, #1
 801834e:	d038      	beq.n	80183c2 <forward_lite_pw_sssa8_ch+0x10e>
 8018350:	2300      	movs	r3, #0
 8018352:	930f      	str	r3, [sp, #60]	; 0x3c
 8018354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018356:	b353      	cbz	r3, 80183ae <forward_lite_pw_sssa8_ch+0xfa>
 8018358:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801835a:	2600      	movs	r6, #0
 801835c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801835e:	fb07 f203 	mul.w	r2, r7, r3
 8018362:	fb01 f803 	mul.w	r8, r1, r3
 8018366:	4651      	mov	r1, sl
 8018368:	46ba      	mov	sl, r7
 801836a:	464f      	mov	r7, r9
 801836c:	4691      	mov	r9, r2
 801836e:	465a      	mov	r2, fp
 8018370:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8018374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018376:	3601      	adds	r6, #1
 8018378:	4620      	mov	r0, r4
 801837a:	921e      	str	r2, [sp, #120]	; 0x78
 801837c:	9308      	str	r3, [sp, #32]
 801837e:	4444      	add	r4, r8
 8018380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018382:	911c      	str	r1, [sp, #112]	; 0x70
 8018384:	e9cd 7306 	strd	r7, r3, [sp, #24]
 8018388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801838a:	9305      	str	r3, [sp, #20]
 801838c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801838e:	e9cd a303 	strd	sl, r3, [sp, #12]
 8018392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018394:	9302      	str	r3, [sp, #8]
 8018396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018398:	9301      	str	r3, [sp, #4]
 801839a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801839c:	9300      	str	r3, [sp, #0]
 801839e:	462b      	mov	r3, r5
 80183a0:	f002 f932 	bl	801a608 <st_sssa8_ch_nn_mat_mult_nt_t>
 80183a4:	45b3      	cmp	fp, r6
 80183a6:	444d      	add	r5, r9
 80183a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80183aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80183ac:	d1e2      	bne.n	8018374 <forward_lite_pw_sssa8_ch+0xc0>
 80183ae:	b013      	add	sp, #76	; 0x4c
 80183b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b4:	4586      	cmp	lr, r0
 80183b6:	f841 cc04 	str.w	ip, [r1, #-4]
 80183ba:	f101 0104 	add.w	r1, r1, #4
 80183be:	d1a6      	bne.n	801830e <forward_lite_pw_sssa8_ch+0x5a>
 80183c0:	e7b7      	b.n	8018332 <forward_lite_pw_sssa8_ch+0x7e>
 80183c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80183c4:	f06f 0309 	mvn.w	r3, #9
 80183c8:	fb03 2307 	mla	r3, r3, r7, r2
 80183cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183ce:	fb07 f202 	mul.w	r2, r7, r2
 80183d2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80183d6:	dbbb      	blt.n	8018350 <forward_lite_pw_sssa8_ch+0x9c>
 80183d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80183da:	4639      	mov	r1, r7
 80183dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183de:	4650      	mov	r0, sl
 80183e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183e2:	9601      	str	r6, [sp, #4]
 80183e4:	9300      	str	r3, [sp, #0]
 80183e6:	f002 f8cf 	bl	801a588 <st_sssa8_ch_fullW_prefetch>
 80183ea:	960f      	str	r6, [sp, #60]	; 0x3c
 80183ec:	e7b2      	b.n	8018354 <forward_lite_pw_sssa8_ch+0xa0>
 80183ee:	46ce      	mov	lr, r9
 80183f0:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 80183f4:	e7a0      	b.n	8018338 <forward_lite_pw_sssa8_ch+0x84>
 80183f6:	bf00      	nop

080183f8 <forward_lite_node_convert_integer_iu8ou8>:
 80183f8:	ee07 3a90 	vmov	s15, r3
 80183fc:	f89d 3000 	ldrb.w	r3, [sp]
 8018400:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018404:	ee06 3a90 	vmov	s13, r3
 8018408:	1883      	adds	r3, r0, r2
 801840a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801840e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8018412:	4298      	cmp	r0, r3
 8018414:	ee76 6a87 	vadd.f32	s13, s13, s14
 8018418:	eee7 6ac0 	vfms.f32	s13, s15, s0
 801841c:	d215      	bcs.n	801844a <forward_lite_node_convert_integer_iu8ou8+0x52>
 801841e:	3801      	subs	r0, #1
 8018420:	440a      	add	r2, r1
 8018422:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8018426:	eef0 7a66 	vmov.f32	s15, s13
 801842a:	ee07 3a10 	vmov	s14, r3
 801842e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018432:	eee7 7a00 	vfma.f32	s15, s14, s0
 8018436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801843a:	ee17 3a90 	vmov	r3, s15
 801843e:	f383 0308 	usat	r3, #8, r3
 8018442:	f801 3b01 	strb.w	r3, [r1], #1
 8018446:	4291      	cmp	r1, r2
 8018448:	d1eb      	bne.n	8018422 <forward_lite_node_convert_integer_iu8ou8+0x2a>
 801844a:	4770      	bx	lr

0801844c <forward_lite_node_convert_integer_iu8os8>:
 801844c:	ee07 3a90 	vmov	s15, r3
 8018450:	f99d 3000 	ldrsb.w	r3, [sp]
 8018454:	ee06 3a90 	vmov	s13, r3
 8018458:	1883      	adds	r3, r0, r2
 801845a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801845e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018462:	4298      	cmp	r0, r3
 8018464:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8018468:	d22d      	bcs.n	80184c6 <forward_lite_node_convert_integer_iu8os8+0x7a>
 801846a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801846e:	3801      	subs	r0, #1
 8018470:	440a      	add	r2, r1
 8018472:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80184c8 <forward_lite_node_convert_integer_iu8os8+0x7c>
 8018476:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801847a:	eef0 7a66 	vmov.f32	s15, s13
 801847e:	ee07 3a10 	vmov	s14, r3
 8018482:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018486:	eee7 7a00 	vfma.f32	s15, s14, s0
 801848a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801848e:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8018492:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801849a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801849e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80184a2:	dd08      	ble.n	80184b6 <forward_lite_node_convert_integer_iu8os8+0x6a>
 80184a4:	ee17 3a10 	vmov	r3, s14
 80184a8:	f303 0307 	ssat	r3, #8, r3
 80184ac:	f801 3b01 	strb.w	r3, [r1], #1
 80184b0:	4291      	cmp	r1, r2
 80184b2:	d1e0      	bne.n	8018476 <forward_lite_node_convert_integer_iu8os8+0x2a>
 80184b4:	4770      	bx	lr
 80184b6:	ee17 3a90 	vmov	r3, s15
 80184ba:	f303 0307 	ssat	r3, #8, r3
 80184be:	f801 3b01 	strb.w	r3, [r1], #1
 80184c2:	4291      	cmp	r1, r2
 80184c4:	d1d7      	bne.n	8018476 <forward_lite_node_convert_integer_iu8os8+0x2a>
 80184c6:	4770      	bx	lr
 80184c8:	3efffffc 	.word	0x3efffffc

080184cc <forward_lite_node_convert_integer_iu8os8_fast>:
 80184cc:	b570      	push	{r4, r5, r6, lr}
 80184ce:	1095      	asrs	r5, r2, #2
 80184d0:	2d00      	cmp	r5, #0
 80184d2:	dd31      	ble.n	8018538 <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 80184d4:	00ae      	lsls	r6, r5, #2
 80184d6:	460c      	mov	r4, r1
 80184d8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80184dc:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 80184e0:	f850 3b04 	ldr.w	r3, [r0], #4
 80184e4:	ea4f 2c33 	mov.w	ip, r3, ror #8
 80184e8:	fa3f fc8c 	uxtb16	ip, ip
 80184ec:	fadc fc0e 	ssub16	ip, ip, lr
 80184f0:	fa3f f383 	uxtb16	r3, r3
 80184f4:	fad3 f30e 	ssub16	r3, r3, lr
 80184f8:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80184fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018500:	42a8      	cmp	r0, r5
 8018502:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 8018506:	ea43 030c 	orr.w	r3, r3, ip
 801850a:	f844 3b04 	str.w	r3, [r4], #4
 801850e:	d1e7      	bne.n	80184e0 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 8018510:	4431      	add	r1, r6
 8018512:	f012 0203 	ands.w	r2, r2, #3
 8018516:	d00e      	beq.n	8018536 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 8018518:	782b      	ldrb	r3, [r5, #0]
 801851a:	3a01      	subs	r2, #1
 801851c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8018520:	700b      	strb	r3, [r1, #0]
 8018522:	d008      	beq.n	8018536 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 8018524:	786b      	ldrb	r3, [r5, #1]
 8018526:	2a01      	cmp	r2, #1
 8018528:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801852c:	704b      	strb	r3, [r1, #1]
 801852e:	d002      	beq.n	8018536 <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 8018530:	78ab      	ldrb	r3, [r5, #2]
 8018532:	3b80      	subs	r3, #128	; 0x80
 8018534:	708b      	strb	r3, [r1, #2]
 8018536:	bd70      	pop	{r4, r5, r6, pc}
 8018538:	4605      	mov	r5, r0
 801853a:	e7ea      	b.n	8018512 <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0801853c <forward_lite_node_convert_integer_is8ou8>:
 801853c:	ee07 3a90 	vmov	s15, r3
 8018540:	f89d 3000 	ldrb.w	r3, [sp]
 8018544:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018548:	ee06 3a90 	vmov	s13, r3
 801854c:	1883      	adds	r3, r0, r2
 801854e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018552:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8018556:	4298      	cmp	r0, r3
 8018558:	ee76 6a87 	vadd.f32	s13, s13, s14
 801855c:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8018560:	d215      	bcs.n	801858e <forward_lite_node_convert_integer_is8ou8+0x52>
 8018562:	3801      	subs	r0, #1
 8018564:	440a      	add	r2, r1
 8018566:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 801856a:	eef0 7a66 	vmov.f32	s15, s13
 801856e:	ee07 3a10 	vmov	s14, r3
 8018572:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018576:	eee7 7a00 	vfma.f32	s15, s14, s0
 801857a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801857e:	ee17 3a90 	vmov	r3, s15
 8018582:	f383 0308 	usat	r3, #8, r3
 8018586:	f801 3b01 	strb.w	r3, [r1], #1
 801858a:	4291      	cmp	r1, r2
 801858c:	d1eb      	bne.n	8018566 <forward_lite_node_convert_integer_is8ou8+0x2a>
 801858e:	4770      	bx	lr

08018590 <forward_lite_node_convert_integer_is8ou8_fast>:
 8018590:	b570      	push	{r4, r5, r6, lr}
 8018592:	1095      	asrs	r5, r2, #2
 8018594:	2d00      	cmp	r5, #0
 8018596:	dd2d      	ble.n	80185f4 <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 8018598:	00ae      	lsls	r6, r5, #2
 801859a:	460c      	mov	r4, r1
 801859c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80185a0:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 80185a4:	f850 3b04 	ldr.w	r3, [r0], #4
 80185a8:	ea4f 2c33 	mov.w	ip, r3, ror #8
 80185ac:	fa2f fc8c 	sxtb16	ip, ip
 80185b0:	fa9c fc0e 	sadd16	ip, ip, lr
 80185b4:	fa2f f383 	sxtb16	r3, r3
 80185b8:	fa93 f30e 	sadd16	r3, r3, lr
 80185bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80185c0:	42a8      	cmp	r0, r5
 80185c2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80185c6:	f844 3b04 	str.w	r3, [r4], #4
 80185ca:	d1eb      	bne.n	80185a4 <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 80185cc:	4431      	add	r1, r6
 80185ce:	f012 0203 	ands.w	r2, r2, #3
 80185d2:	d00e      	beq.n	80185f2 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 80185d4:	782b      	ldrb	r3, [r5, #0]
 80185d6:	3a01      	subs	r2, #1
 80185d8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80185dc:	700b      	strb	r3, [r1, #0]
 80185de:	d008      	beq.n	80185f2 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 80185e0:	786b      	ldrb	r3, [r5, #1]
 80185e2:	2a01      	cmp	r2, #1
 80185e4:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80185e8:	704b      	strb	r3, [r1, #1]
 80185ea:	d002      	beq.n	80185f2 <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 80185ec:	78ab      	ldrb	r3, [r5, #2]
 80185ee:	3b80      	subs	r3, #128	; 0x80
 80185f0:	708b      	strb	r3, [r1, #2]
 80185f2:	bd70      	pop	{r4, r5, r6, pc}
 80185f4:	4605      	mov	r5, r0
 80185f6:	e7ea      	b.n	80185ce <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

080185f8 <forward_lite_conv2d_deep_sssa8_ch>:
 80185f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185fc:	b09d      	sub	sp, #116	; 0x74
 80185fe:	468b      	mov	fp, r1
 8018600:	4604      	mov	r4, r0
 8018602:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 8018606:	f8bd 809c 	ldrh.w	r8, [sp, #156]	; 0x9c
 801860a:	9214      	str	r2, [sp, #80]	; 0x50
 801860c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801860e:	9310      	str	r3, [sp, #64]	; 0x40
 8018610:	eba8 0388 	sub.w	r3, r8, r8, lsl #2
 8018614:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 8018618:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	; 0xa4
 801861c:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8018620:	9215      	str	r2, [sp, #84]	; 0x54
 8018622:	eb01 0748 	add.w	r7, r1, r8, lsl #1
 8018626:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 801862a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801862e:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 8018632:	9218      	str	r2, [sp, #96]	; 0x60
 8018634:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 8018638:	f99d c0b8 	ldrsb.w	ip, [sp, #184]	; 0xb8
 801863c:	9212      	str	r2, [sp, #72]	; 0x48
 801863e:	f99d 20b4 	ldrsb.w	r2, [sp, #180]	; 0xb4
 8018642:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 8018644:	9219      	str	r2, [sp, #100]	; 0x64
 8018646:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 801864a:	9316      	str	r3, [sp, #88]	; 0x58
 801864c:	9213      	str	r2, [sp, #76]	; 0x4c
 801864e:	f8bd 20c4 	ldrh.w	r2, [sp, #196]	; 0xc4
 8018652:	921a      	str	r2, [sp, #104]	; 0x68
 8018654:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
 8018658:	921b      	str	r2, [sp, #108]	; 0x6c
 801865a:	ea4f 0248 	mov.w	r2, r8, lsl #1
 801865e:	9211      	str	r2, [sp, #68]	; 0x44
 8018660:	f1b8 0f00 	cmp.w	r8, #0
 8018664:	f000 808a 	beq.w	801877c <forward_lite_conv2d_deep_sssa8_ch+0x184>
 8018668:	1d18      	adds	r0, r3, #4
 801866a:	f04f 0e01 	mov.w	lr, #1
 801866e:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8018672:	1e5a      	subs	r2, r3, #1
 8018674:	fa0e f603 	lsl.w	r6, lr, r3
 8018678:	fa0c f303 	lsl.w	r3, ip, r3
 801867c:	b292      	uxth	r2, r2
 801867e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 8018682:	2a14      	cmp	r2, #20
 8018684:	d852      	bhi.n	801872c <forward_lite_conv2d_deep_sssa8_ch+0x134>
 8018686:	428f      	cmp	r7, r1
 8018688:	f840 3c04 	str.w	r3, [r0, #-4]
 801868c:	f100 0004 	add.w	r0, r0, #4
 8018690:	d1ed      	bne.n	801866e <forward_lite_conv2d_deep_sssa8_ch+0x76>
 8018692:	4639      	mov	r1, r7
 8018694:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018696:	1acb      	subs	r3, r1, r3
 8018698:	9317      	str	r3, [sp, #92]	; 0x5c
 801869a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801869c:	fb13 fb0b 	smulbb	fp, r3, fp
 80186a0:	fa1f f38b 	uxth.w	r3, fp
 80186a4:	9311      	str	r3, [sp, #68]	; 0x44
 80186a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d046      	beq.n	801873a <forward_lite_conv2d_deep_sssa8_ch+0x142>
 80186ac:	2300      	movs	r3, #0
 80186ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80186b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d037      	beq.n	8018726 <forward_lite_conv2d_deep_sssa8_ch+0x12e>
 80186b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80186b8:	4649      	mov	r1, r9
 80186ba:	2600      	movs	r6, #0
 80186bc:	46c1      	mov	r9, r8
 80186be:	fb08 fb03 	mul.w	fp, r8, r3
 80186c2:	46b8      	mov	r8, r7
 80186c4:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 80186c8:	fb02 f303 	mul.w	r3, r2, r3
 80186cc:	4652      	mov	r2, sl
 80186ce:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 80186d2:	461f      	mov	r7, r3
 80186d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80186d6:	3601      	adds	r6, #1
 80186d8:	4620      	mov	r0, r4
 80186da:	922c      	str	r2, [sp, #176]	; 0xb0
 80186dc:	9126      	str	r1, [sp, #152]	; 0x98
 80186de:	443c      	add	r4, r7
 80186e0:	e9cd 830d 	strd	r8, r3, [sp, #52]	; 0x34
 80186e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80186e6:	930c      	str	r3, [sp, #48]	; 0x30
 80186e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80186ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80186ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186ee:	930a      	str	r3, [sp, #40]	; 0x28
 80186f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186f2:	9309      	str	r3, [sp, #36]	; 0x24
 80186f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80186f6:	9308      	str	r3, [sp, #32]
 80186f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80186fa:	9307      	str	r3, [sp, #28]
 80186fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80186fe:	9306      	str	r3, [sp, #24]
 8018700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018702:	9305      	str	r3, [sp, #20]
 8018704:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018706:	9304      	str	r3, [sp, #16]
 8018708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801870a:	e9cd 9302 	strd	r9, r3, [sp, #8]
 801870e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018710:	9301      	str	r3, [sp, #4]
 8018712:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8018714:	9300      	str	r3, [sp, #0]
 8018716:	462b      	mov	r3, r5
 8018718:	f002 fd80 	bl	801b21c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>
 801871c:	45b2      	cmp	sl, r6
 801871e:	445d      	add	r5, fp
 8018720:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018722:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018724:	d1d6      	bne.n	80186d4 <forward_lite_conv2d_deep_sssa8_ch+0xdc>
 8018726:	b01d      	add	sp, #116	; 0x74
 8018728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801872c:	428f      	cmp	r7, r1
 801872e:	f840 cc04 	str.w	ip, [r0, #-4]
 8018732:	f100 0004 	add.w	r0, r0, #4
 8018736:	d19a      	bne.n	801866e <forward_lite_conv2d_deep_sssa8_ch+0x76>
 8018738:	e7ab      	b.n	8018692 <forward_lite_conv2d_deep_sssa8_ch+0x9a>
 801873a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801873c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801873e:	fb08 f303 	mul.w	r3, r8, r3
 8018742:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8018744:	fb02 f303 	mul.w	r3, r2, r3
 8018748:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801874a:	fb02 f303 	mul.w	r3, r2, r3
 801874e:	f06f 0209 	mvn.w	r2, #9
 8018752:	fb02 1208 	mla	r2, r2, r8, r1
 8018756:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801875a:	dba7      	blt.n	80186ac <forward_lite_conv2d_deep_sssa8_ch+0xb4>
 801875c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801875e:	4641      	mov	r1, r8
 8018760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018762:	9701      	str	r7, [sp, #4]
 8018764:	fb02 f303 	mul.w	r3, r2, r3
 8018768:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801876a:	4610      	mov	r0, r2
 801876c:	fb03 f000 	mul.w	r0, r3, r0
 8018770:	9000      	str	r0, [sp, #0]
 8018772:	4648      	mov	r0, r9
 8018774:	f001 ff08 	bl	801a588 <st_sssa8_ch_fullW_prefetch>
 8018778:	971b      	str	r7, [sp, #108]	; 0x6c
 801877a:	e799      	b.n	80186b0 <forward_lite_conv2d_deep_sssa8_ch+0xb8>
 801877c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801877e:	9316      	str	r3, [sp, #88]	; 0x58
 8018780:	e788      	b.n	8018694 <forward_lite_conv2d_deep_sssa8_ch+0x9c>
 8018782:	bf00      	nop

08018784 <forward_lite_conv2d_rgb_sssa8_ch>:
 8018784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018788:	4617      	mov	r7, r2
 801878a:	468b      	mov	fp, r1
 801878c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8018790:	4639      	mov	r1, r7
 8018792:	ed2d 8b02 	vpush	{d8}
 8018796:	b0c9      	sub	sp, #292	; 0x124
 8018798:	ee08 2a90 	vmov	s17, r2
 801879c:	461a      	mov	r2, r3
 801879e:	f8bd 7154 	ldrh.w	r7, [sp, #340]	; 0x154
 80187a2:	f8bd 5150 	ldrh.w	r5, [sp, #336]	; 0x150
 80187a6:	4690      	mov	r8, r2
 80187a8:	971c      	str	r7, [sp, #112]	; 0x70
 80187aa:	f8bd 7158 	ldrh.w	r7, [sp, #344]	; 0x158
 80187ae:	46a9      	mov	r9, r5
 80187b0:	f99d 6160 	ldrsb.w	r6, [sp, #352]	; 0x160
 80187b4:	9312      	str	r3, [sp, #72]	; 0x48
 80187b6:	9008      	str	r0, [sp, #32]
 80187b8:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 80187ba:	985c      	ldr	r0, [sp, #368]	; 0x170
 80187bc:	970d      	str	r7, [sp, #52]	; 0x34
 80187be:	f8bd 716c 	ldrh.w	r7, [sp, #364]	; 0x16c
 80187c2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80187c6:	9500      	str	r5, [sp, #0]
 80187c8:	9003      	str	r0, [sp, #12]
 80187ca:	2003      	movs	r0, #3
 80187cc:	9301      	str	r3, [sp, #4]
 80187ce:	462b      	mov	r3, r5
 80187d0:	9602      	str	r6, [sp, #8]
 80187d2:	9522      	str	r5, [sp, #136]	; 0x88
 80187d4:	970c      	str	r7, [sp, #48]	; 0x30
 80187d6:	eb04 0748 	add.w	r7, r4, r8, lsl #1
 80187da:	f99d 5164 	ldrsb.w	r5, [sp, #356]	; 0x164
 80187de:	f001 fbf3 	bl	8019fc8 <st_sssa8_ch_convolve_rank1upd>
 80187e2:	fb19 f309 	smulbb	r3, r9, r9
 80187e6:	4642      	mov	r2, r8
 80187e8:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 80187ec:	970f      	str	r7, [sp, #60]	; 0x3c
 80187ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80187f2:	b29b      	uxth	r3, r3
 80187f4:	9310      	str	r3, [sp, #64]	; 0x40
 80187f6:	f06f 0309 	mvn.w	r3, #9
 80187fa:	fb03 7308 	mla	r3, r3, r8, r7
 80187fe:	9325      	str	r3, [sp, #148]	; 0x94
 8018800:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8018804:	9326      	str	r3, [sp, #152]	; 0x98
 8018806:	b1aa      	cbz	r2, 8018834 <forward_lite_conv2d_rgb_sssa8_ch+0xb0>
 8018808:	1d1a      	adds	r2, r3, #4
 801880a:	2001      	movs	r0, #1
 801880c:	f934 3b02 	ldrsh.w	r3, [r4], #2
 8018810:	1e59      	subs	r1, r3, #1
 8018812:	fa00 fe03 	lsl.w	lr, r0, r3
 8018816:	fa05 f303 	lsl.w	r3, r5, r3
 801881a:	b289      	uxth	r1, r1
 801881c:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 8018820:	2914      	cmp	r1, #20
 8018822:	f200 80f0 	bhi.w	8018a06 <forward_lite_conv2d_rgb_sssa8_ch+0x282>
 8018826:	42bc      	cmp	r4, r7
 8018828:	f842 3c04 	str.w	r3, [r2, #-4]
 801882c:	f102 0204 	add.w	r2, r2, #4
 8018830:	d1ec      	bne.n	801880c <forward_lite_conv2d_rgb_sssa8_ch+0x88>
 8018832:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018834:	eba4 030c 	sub.w	r3, r4, ip
 8018838:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801883a:	aa28      	add	r2, sp, #160	; 0xa0
 801883c:	a934      	add	r1, sp, #208	; 0xd0
 801883e:	9327      	str	r3, [sp, #156]	; 0x9c
 8018840:	a83e      	add	r0, sp, #248	; 0xf8
 8018842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018844:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
 8018848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801884a:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
 801884e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018850:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
 8018854:	ab30      	add	r3, sp, #192	; 0xc0
 8018856:	9300      	str	r3, [sp, #0]
 8018858:	ab2c      	add	r3, sp, #176	; 0xb0
 801885a:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
 801885e:	e9cd bb29 	strd	fp, fp, [sp, #164]	; 0xa4
 8018862:	f001 fc3b 	bl	801a0dc <ai_padding_opt_init>
 8018866:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018868:	fb04 f304 	mul.w	r3, r4, r4
 801886c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801886e:	fb01 f403 	mul.w	r4, r1, r3
 8018872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018876:	fb01 f202 	mul.w	r2, r1, r2
 801887a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801887c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018880:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018884:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8018888:	930b      	str	r3, [sp, #44]	; 0x2c
 801888a:	bfa8      	it	ge
 801888c:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 8018890:	42a2      	cmp	r2, r4
 8018892:	f340 81b1 	ble.w	8018bf8 <forward_lite_conv2d_rgb_sssa8_ch+0x474>
 8018896:	2300      	movs	r3, #0
 8018898:	9320      	str	r3, [sp, #128]	; 0x80
 801889a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801889c:	fbb4 f3f3 	udiv	r3, r4, r3
 80188a0:	b29b      	uxth	r3, r3
 80188a2:	4619      	mov	r1, r3
 80188a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80188a6:	4299      	cmp	r1, r3
 80188a8:	bf28      	it	cs
 80188aa:	4619      	movcs	r1, r3
 80188ac:	fbb3 f2f1 	udiv	r2, r3, r1
 80188b0:	fb01 3312 	mls	r3, r1, r2, r3
 80188b4:	b292      	uxth	r2, r2
 80188b6:	9121      	str	r1, [sp, #132]	; 0x84
 80188b8:	b29b      	uxth	r3, r3
 80188ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80188bc:	b11b      	cbz	r3, 80188c6 <forward_lite_conv2d_rgb_sssa8_ch+0x142>
 80188be:	4613      	mov	r3, r2
 80188c0:	3301      	adds	r3, #1
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80188c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	f000 8188 	beq.w	8018bde <forward_lite_conv2d_rgb_sssa8_ch+0x45a>
 80188ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80188d0:	b236      	sxth	r6, r6
 80188d2:	2400      	movs	r4, #0
 80188d4:	425b      	negs	r3, r3
 80188d6:	4625      	mov	r5, r4
 80188d8:	b29a      	uxth	r2, r3
 80188da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80188dc:	3b01      	subs	r3, #1
 80188de:	921f      	str	r2, [sp, #124]	; 0x7c
 80188e0:	921a      	str	r2, [sp, #104]	; 0x68
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	9324      	str	r3, [sp, #144]	; 0x90
 80188e6:	4633      	mov	r3, r6
 80188e8:	465e      	mov	r6, fp
 80188ea:	469b      	mov	fp, r3
 80188ec:	a83e      	add	r0, sp, #248	; 0xf8
 80188ee:	f001 fc4f 	bl	801a190 <ai_padding_opt_phase1>
 80188f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80188f4:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 80188f6:	fb05 f303 	mul.w	r3, r5, r3
 80188fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80188fc:	fb01 2303 	mla	r3, r1, r3, r2
 8018900:	9316      	str	r3, [sp, #88]	; 0x58
 8018902:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018904:	2b00      	cmp	r3, #0
 8018906:	f000 816f 	beq.w	8018be8 <forward_lite_conv2d_rgb_sssa8_ch+0x464>
 801890a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801890c:	2b00      	cmp	r3, #0
 801890e:	f000 8157 	beq.w	8018bc0 <forward_lite_conv2d_rgb_sssa8_ch+0x43c>
 8018912:	b2a3      	uxth	r3, r4
 8018914:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018916:	edcd 8a1d 	vstr	s17, [sp, #116]	; 0x74
 801891a:	931e      	str	r3, [sp, #120]	; 0x78
 801891c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801891e:	1a9b      	subs	r3, r3, r2
 8018920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018922:	9323      	str	r3, [sp, #140]	; 0x8c
 8018924:	fb02 3705 	mla	r7, r2, r5, r3
 8018928:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 801892c:	930e      	str	r3, [sp, #56]	; 0x38
 801892e:	46ba      	mov	sl, r7
 8018930:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018932:	9318      	str	r3, [sp, #96]	; 0x60
 8018934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018936:	9319      	str	r3, [sp, #100]	; 0x64
 8018938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801893a:	9311      	str	r3, [sp, #68]	; 0x44
 801893c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801893e:	9314      	str	r3, [sp, #80]	; 0x50
 8018940:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018942:	ee08 3a10 	vmov	s16, r3
 8018946:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018948:	9317      	str	r3, [sp, #92]	; 0x5c
 801894a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801894c:	9315      	str	r3, [sp, #84]	; 0x54
 801894e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018950:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018952:	933f      	str	r3, [sp, #252]	; 0xfc
 8018954:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018958:	9340      	str	r3, [sp, #256]	; 0x100
 801895a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801895e:	9113      	str	r1, [sp, #76]	; 0x4c
 8018960:	2100      	movs	r1, #0
 8018962:	9309      	str	r3, [sp, #36]	; 0x24
 8018964:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018966:	923e      	str	r2, [sp, #248]	; 0xf8
 8018968:	9306      	str	r3, [sp, #24]
 801896a:	910a      	str	r1, [sp, #40]	; 0x28
 801896c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801896e:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8018972:	2a00      	cmp	r2, #0
 8018974:	d071      	beq.n	8018a5a <forward_lite_conv2d_rgb_sssa8_ch+0x2d6>
 8018976:	3a01      	subs	r2, #1
 8018978:	923e      	str	r2, [sp, #248]	; 0xf8
 801897a:	2201      	movs	r2, #1
 801897c:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8018980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018982:	4552      	cmp	r2, sl
 8018984:	da51      	bge.n	8018a2a <forward_lite_conv2d_rgb_sssa8_ch+0x2a6>
 8018986:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801898a:	4696      	mov	lr, r2
 801898c:	4615      	mov	r5, r2
 801898e:	f8cd a01c 	str.w	sl, [sp, #28]
 8018992:	4547      	cmp	r7, r8
 8018994:	dd40      	ble.n	8018a18 <forward_lite_conv2d_rgb_sssa8_ch+0x294>
 8018996:	fb05 8006 	mla	r0, r5, r6, r8
 801899a:	42ae      	cmp	r6, r5
 801899c:	f103 0206 	add.w	r2, r3, #6
 80189a0:	9b08      	ldr	r3, [sp, #32]
 80189a2:	bfcc      	ite	gt
 80189a4:	2500      	movgt	r5, #0
 80189a6:	2501      	movle	r5, #1
 80189a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80189ac:	4641      	mov	r1, r8
 80189ae:	ea45 75de 	orr.w	r5, r5, lr, lsr #31
 80189b2:	4418      	add	r0, r3
 80189b4:	e00b      	b.n	80189ce <forward_lite_conv2d_rgb_sssa8_ch+0x24a>
 80189b6:	f36b 441f 	bfi	r4, fp, #16, #16
 80189ba:	f842 4c04 	str.w	r4, [r2, #-4]
 80189be:	3101      	adds	r1, #1
 80189c0:	f822 cc06 	strh.w	ip, [r2, #-6]
 80189c4:	3003      	adds	r0, #3
 80189c6:	3206      	adds	r2, #6
 80189c8:	b20c      	sxth	r4, r1
 80189ca:	42a7      	cmp	r7, r4
 80189cc:	dd24      	ble.n	8018a18 <forward_lite_conv2d_rgb_sssa8_ch+0x294>
 80189ce:	2400      	movs	r4, #0
 80189d0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80189d4:	f1a2 0906 	sub.w	r9, r2, #6
 80189d8:	46dc      	mov	ip, fp
 80189da:	f36b 040f 	bfi	r4, fp, #0, #16
 80189de:	4613      	mov	r3, r2
 80189e0:	d1e9      	bne.n	80189b6 <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 80189e2:	2d00      	cmp	r5, #0
 80189e4:	d1e7      	bne.n	80189b6 <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 80189e6:	428e      	cmp	r6, r1
 80189e8:	dde5      	ble.n	80189b6 <forward_lite_conv2d_rgb_sssa8_ch+0x232>
 80189ea:	6804      	ldr	r4, [r0, #0]
 80189ec:	fa2f fa84 	sxtb16	sl, r4
 80189f0:	ea4f 2434 	mov.w	r4, r4, ror #8
 80189f4:	fa0f fc8a 	sxth.w	ip, sl
 80189f8:	fa2f f484 	sxtb16	r4, r4
 80189fc:	eac4 040a 	pkhbt	r4, r4, sl
 8018a00:	f8c9 4002 	str.w	r4, [r9, #2]
 8018a04:	e7db      	b.n	80189be <forward_lite_conv2d_rgb_sssa8_ch+0x23a>
 8018a06:	42bc      	cmp	r4, r7
 8018a08:	f842 5c04 	str.w	r5, [r2, #-4]
 8018a0c:	f102 0204 	add.w	r2, r2, #4
 8018a10:	f47f aefc 	bne.w	801880c <forward_lite_conv2d_rgb_sssa8_ch+0x88>
 8018a14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018a16:	e70d      	b.n	8018834 <forward_lite_conv2d_rgb_sssa8_ch+0xb0>
 8018a18:	f10e 0e01 	add.w	lr, lr, #1
 8018a1c:	9a07      	ldr	r2, [sp, #28]
 8018a1e:	fa0f fe8e 	sxth.w	lr, lr
 8018a22:	4596      	cmp	lr, r2
 8018a24:	4675      	mov	r5, lr
 8018a26:	dbb4      	blt.n	8018992 <forward_lite_conv2d_rgb_sssa8_ch+0x20e>
 8018a28:	4692      	mov	sl, r2
 8018a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d057      	beq.n	8018ae0 <forward_lite_conv2d_rgb_sssa8_ch+0x35c>
 8018a30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018a32:	9a06      	ldr	r2, [sp, #24]
 8018a34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018a36:	4422      	add	r2, r4
 8018a38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018a3a:	3001      	adds	r0, #1
 8018a3c:	b292      	uxth	r2, r2
 8018a3e:	4421      	add	r1, r4
 8018a40:	b200      	sxth	r0, r0
 8018a42:	9206      	str	r2, [sp, #24]
 8018a44:	b289      	uxth	r1, r1
 8018a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018a48:	900a      	str	r0, [sp, #40]	; 0x28
 8018a4a:	4282      	cmp	r2, r0
 8018a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8018a4e:	dd6d      	ble.n	8018b2c <forward_lite_conv2d_rgb_sssa8_ch+0x3a8>
 8018a50:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8018a52:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8018a56:	2a00      	cmp	r2, #0
 8018a58:	d18d      	bne.n	8018976 <forward_lite_conv2d_rgb_sssa8_ch+0x1f2>
 8018a5a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8018a5c:	b932      	cbnz	r2, 8018a6c <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 8018a5e:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8018a60:	3a01      	subs	r2, #1
 8018a62:	9240      	str	r2, [sp, #256]	; 0x100
 8018a64:	2201      	movs	r2, #1
 8018a66:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8018a6a:	e789      	b.n	8018980 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8018a6c:	3a01      	subs	r2, #1
 8018a6e:	923f      	str	r2, [sp, #252]	; 0xfc
 8018a70:	f8bd 211c 	ldrh.w	r2, [sp, #284]	; 0x11c
 8018a74:	2a01      	cmp	r2, #1
 8018a76:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
 8018a7a:	d081      	beq.n	8018980 <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 8018a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a7e:	4552      	cmp	r2, sl
 8018a80:	dad3      	bge.n	8018a2a <forward_lite_conv2d_rgb_sssa8_ch+0x2a6>
 8018a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018a84:	4615      	mov	r5, r2
 8018a86:	9806      	ldr	r0, [sp, #24]
 8018a88:	1e4f      	subs	r7, r1, #1
 8018a8a:	fa0f fc81 	sxth.w	ip, r1
 8018a8e:	9c08      	ldr	r4, [sp, #32]
 8018a90:	4611      	mov	r1, r2
 8018a92:	1a3f      	subs	r7, r7, r0
 8018a94:	b2bf      	uxth	r7, r7
 8018a96:	3701      	adds	r7, #1
 8018a98:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018a9c:	007f      	lsls	r7, r7, #1
 8018a9e:	45c4      	cmp	ip, r8
 8018aa0:	dd16      	ble.n	8018ad0 <forward_lite_conv2d_rgb_sssa8_ch+0x34c>
 8018aa2:	fb01 8106 	mla	r1, r1, r6, r8
 8018aa6:	19d8      	adds	r0, r3, r7
 8018aa8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018aac:	4421      	add	r1, r4
 8018aae:	3306      	adds	r3, #6
 8018ab0:	f851 2b03 	ldr.w	r2, [r1], #3
 8018ab4:	fa2f fe82 	sxtb16	lr, r2
 8018ab8:	4283      	cmp	r3, r0
 8018aba:	ea4f 2232 	mov.w	r2, r2, ror #8
 8018abe:	f823 ec06 	strh.w	lr, [r3, #-6]
 8018ac2:	fa2f f282 	sxtb16	r2, r2
 8018ac6:	eac2 020e 	pkhbt	r2, r2, lr
 8018aca:	f843 2c04 	str.w	r2, [r3, #-4]
 8018ace:	d1ee      	bne.n	8018aae <forward_lite_conv2d_rgb_sssa8_ch+0x32a>
 8018ad0:	3501      	adds	r5, #1
 8018ad2:	b22d      	sxth	r5, r5
 8018ad4:	4555      	cmp	r5, sl
 8018ad6:	4629      	mov	r1, r5
 8018ad8:	dbe1      	blt.n	8018a9e <forward_lite_conv2d_rgb_sssa8_ch+0x31a>
 8018ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d1a7      	bne.n	8018a30 <forward_lite_conv2d_rgb_sssa8_ch+0x2ac>
 8018ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018ae2:	4610      	mov	r0, r2
 8018ae4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018ae6:	ee18 2a10 	vmov	r2, s16
 8018aea:	9305      	str	r3, [sp, #20]
 8018aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018aee:	9304      	str	r3, [sp, #16]
 8018af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018af2:	9303      	str	r3, [sp, #12]
 8018af4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018af6:	9302      	str	r3, [sp, #8]
 8018af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018afa:	9301      	str	r3, [sp, #4]
 8018afc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018afe:	9300      	str	r3, [sp, #0]
 8018b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b02:	f003 fa69 	bl	801bfd8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8018b06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018b08:	9b06      	ldr	r3, [sp, #24]
 8018b0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018b0c:	4423      	add	r3, r4
 8018b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b10:	3101      	adds	r1, #1
 8018b12:	9013      	str	r0, [sp, #76]	; 0x4c
 8018b14:	b29b      	uxth	r3, r3
 8018b16:	4422      	add	r2, r4
 8018b18:	b209      	sxth	r1, r1
 8018b1a:	9306      	str	r3, [sp, #24]
 8018b1c:	b292      	uxth	r2, r2
 8018b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b20:	910a      	str	r1, [sp, #40]	; 0x28
 8018b22:	428b      	cmp	r3, r1
 8018b24:	9209      	str	r2, [sp, #36]	; 0x24
 8018b26:	dd16      	ble.n	8018b56 <forward_lite_conv2d_rgb_sssa8_ch+0x3d2>
 8018b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b2a:	e791      	b.n	8018a50 <forward_lite_conv2d_rgb_sssa8_ch+0x2cc>
 8018b2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018b2e:	4299      	cmp	r1, r3
 8018b30:	d011      	beq.n	8018b56 <forward_lite_conv2d_rgb_sssa8_ch+0x3d2>
 8018b32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b34:	ee18 2a10 	vmov	r2, s16
 8018b38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018b3a:	9305      	str	r3, [sp, #20]
 8018b3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b3e:	9304      	str	r3, [sp, #16]
 8018b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b42:	9303      	str	r3, [sp, #12]
 8018b44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b46:	9302      	str	r3, [sp, #8]
 8018b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b4a:	9301      	str	r3, [sp, #4]
 8018b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018b4e:	9300      	str	r3, [sp, #0]
 8018b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b52:	f003 fd61 	bl	801c618 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8018b56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018b58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018b5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018b5c:	1a9b      	subs	r3, r3, r2
 8018b5e:	4411      	add	r1, r2
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	9116      	str	r1, [sp, #88]	; 0x58
 8018b64:	429a      	cmp	r2, r3
 8018b66:	9319      	str	r3, [sp, #100]	; 0x64
 8018b68:	bf28      	it	cs
 8018b6a:	461a      	movcs	r2, r3
 8018b6c:	b294      	uxth	r4, r2
 8018b6e:	b954      	cbnz	r4, 8018b86 <forward_lite_conv2d_rgb_sssa8_ch+0x402>
 8018b70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018b72:	3b01      	subs	r3, #1
 8018b74:	b29b      	uxth	r3, r3
 8018b76:	461a      	mov	r2, r3
 8018b78:	9318      	str	r3, [sp, #96]	; 0x60
 8018b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b7e:	429a      	cmp	r2, r3
 8018b80:	d020      	beq.n	8018bc4 <forward_lite_conv2d_rgb_sssa8_ch+0x440>
 8018b82:	9411      	str	r4, [sp, #68]	; 0x44
 8018b84:	e6e3      	b.n	801894e <forward_lite_conv2d_rgb_sssa8_ch+0x1ca>
 8018b86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018b8a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018b8c:	fb02 1003 	mla	r0, r2, r3, r1
 8018b90:	ee18 1a10 	vmov	r1, s16
 8018b94:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018b98:	901d      	str	r0, [sp, #116]	; 0x74
 8018b9a:	ee08 1a10 	vmov	s16, r1
 8018b9e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018ba0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8018ba4:	9117      	str	r1, [sp, #92]	; 0x5c
 8018ba6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018ba8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018bac:	9115      	str	r1, [sp, #84]	; 0x54
 8018bae:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018bb0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018bb6:	9314      	str	r3, [sp, #80]	; 0x50
 8018bb8:	4623      	mov	r3, r4
 8018bba:	f001 fb03 	bl	801a1c4 <st_int8_to16_dual>
 8018bbe:	e7d7      	b.n	8018b70 <forward_lite_conv2d_rgb_sssa8_ch+0x3ec>
 8018bc0:	b2a3      	uxth	r3, r4
 8018bc2:	931e      	str	r3, [sp, #120]	; 0x78
 8018bc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018bc8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8018bca:	4413      	add	r3, r2
 8018bcc:	3401      	adds	r4, #1
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	b224      	sxth	r4, r4
 8018bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8018bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018bd6:	4625      	mov	r5, r4
 8018bd8:	42a3      	cmp	r3, r4
 8018bda:	f73f ae87 	bgt.w	80188ec <forward_lite_conv2d_rgb_sssa8_ch+0x168>
 8018bde:	b049      	add	sp, #292	; 0x124
 8018be0:	ecbd 8b02 	vpop	{d8}
 8018be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018bea:	ee18 0a90 	vmov	r0, s17
 8018bee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018bf2:	f001 fae7 	bl	801a1c4 <st_int8_to16_dual>
 8018bf6:	e688      	b.n	801890a <forward_lite_conv2d_rgb_sssa8_ch+0x186>
 8018bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018bfa:	ee18 0a90 	vmov	r0, s17
 8018bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018c02:	f001 fadf 	bl	801a1c4 <st_int8_to16_dual>
 8018c06:	2301      	movs	r3, #1
 8018c08:	9320      	str	r3, [sp, #128]	; 0x80
 8018c0a:	e646      	b.n	801889a <forward_lite_conv2d_rgb_sssa8_ch+0x116>

08018c0c <forward_lite_dw_3x3_sssa8_ch>:
 8018c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c10:	b09f      	sub	sp, #124	; 0x7c
 8018c12:	461c      	mov	r4, r3
 8018c14:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 8018c18:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8018c1c:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8018c20:	9207      	str	r2, [sp, #28]
 8018c22:	f99d 20b0 	ldrsb.w	r2, [sp, #176]	; 0xb0
 8018c26:	9306      	str	r3, [sp, #24]
 8018c28:	9211      	str	r2, [sp, #68]	; 0x44
 8018c2a:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 8018c2e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018c30:	9215      	str	r2, [sp, #84]	; 0x54
 8018c32:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 8018c36:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 8018c3a:	f99d 70b4 	ldrsb.w	r7, [sp, #180]	; 0xb4
 8018c3e:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8018c42:	901b      	str	r0, [sp, #108]	; 0x6c
 8018c44:	9105      	str	r1, [sp, #20]
 8018c46:	9219      	str	r2, [sp, #100]	; 0x64
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	f000 8461 	beq.w	8019510 <forward_lite_dw_3x3_sssa8_ch+0x904>
 8018c4e:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8018c52:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018c54:	444b      	add	r3, r9
 8018c56:	44a1      	add	r9, r4
 8018c58:	9312      	str	r3, [sp, #72]	; 0x48
 8018c5a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8018c5e:	461a      	mov	r2, r3
 8018c60:	9314      	str	r3, [sp, #80]	; 0x50
 8018c62:	f06f 0315 	mvn.w	r3, #21
 8018c66:	fb03 2304 	mla	r3, r3, r4, r2
 8018c6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c6c:	b1d4      	cbz	r4, 8018ca4 <forward_lite_dw_3x3_sssa8_ch+0x98>
 8018c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c70:	2100      	movs	r1, #0
 8018c72:	2601      	movs	r6, #1
 8018c74:	f1a3 0e02 	sub.w	lr, r3, #2
 8018c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018c7a:	1d18      	adds	r0, r3, #4
 8018c7c:	f93e 3f02 	ldrsh.w	r3, [lr, #2]!
 8018c80:	3101      	adds	r1, #1
 8018c82:	1e5a      	subs	r2, r3, #1
 8018c84:	fa06 f503 	lsl.w	r5, r6, r3
 8018c88:	fa07 f303 	lsl.w	r3, r7, r3
 8018c8c:	b292      	uxth	r2, r2
 8018c8e:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8018c92:	2a14      	cmp	r2, #20
 8018c94:	f200 8433 	bhi.w	80194fe <forward_lite_dw_3x3_sssa8_ch+0x8f2>
 8018c98:	428c      	cmp	r4, r1
 8018c9a:	f840 3c04 	str.w	r3, [r0, #-4]
 8018c9e:	f100 0004 	add.w	r0, r0, #4
 8018ca2:	dceb      	bgt.n	8018c7c <forward_lite_dw_3x3_sssa8_ch+0x70>
 8018ca4:	9a06      	ldr	r2, [sp, #24]
 8018ca6:	2c03      	cmp	r4, #3
 8018ca8:	9b05      	ldr	r3, [sp, #20]
 8018caa:	fb04 f202 	mul.w	r2, r4, r2
 8018cae:	fb04 f303 	mul.w	r3, r4, r3
 8018cb2:	9216      	str	r2, [sp, #88]	; 0x58
 8018cb4:	9a07      	ldr	r2, [sp, #28]
 8018cb6:	fb03 f202 	mul.w	r2, r3, r2
 8018cba:	eba3 030c 	sub.w	r3, r3, ip
 8018cbe:	9305      	str	r3, [sp, #20]
 8018cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018cc2:	921a      	str	r2, [sp, #104]	; 0x68
 8018cc4:	f1c3 0300 	rsb	r3, r3, #0
 8018cc8:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 8018ccc:	bf8c      	ite	hi
 8018cce:	1ee3      	subhi	r3, r4, #3
 8018cd0:	2300      	movls	r3, #0
 8018cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8018cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	f000 83a5 	beq.w	8019426 <forward_lite_dw_3x3_sssa8_ch+0x81a>
 8018cdc:	f004 0303 	and.w	r3, r4, #3
 8018ce0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018ce2:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ce4:	2a00      	cmp	r2, #0
 8018ce6:	f000 839e 	beq.w	8019426 <forward_lite_dw_3x3_sssa8_ch+0x81a>
 8018cea:	3b01      	subs	r3, #1
 8018cec:	46b0      	mov	r8, r6
 8018cee:	46d1      	mov	r9, sl
 8018cf0:	940c      	str	r4, [sp, #48]	; 0x30
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	9317      	str	r3, [sp, #92]	; 0x5c
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	9318      	str	r3, [sp, #96]	; 0x60
 8018cfa:	46cc      	mov	ip, r9
 8018cfc:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8018d00:	fb03 2301 	mla	r3, r3, r1, r2
 8018d04:	930a      	str	r3, [sp, #40]	; 0x28
 8018d06:	2300      	movs	r3, #0
 8018d08:	9310      	str	r3, [sp, #64]	; 0x40
 8018d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	f000 823f 	beq.w	8019190 <forward_lite_dw_3x3_sssa8_ch+0x584>
 8018d12:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018d16:	2400      	movs	r4, #0
 8018d18:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8018d1c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018d1e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018d20:	f103 0010 	add.w	r0, r3, #16
 8018d24:	9202      	str	r2, [sp, #8]
 8018d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018d28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018d2a:	9101      	str	r1, [sp, #4]
 8018d2c:	3348      	adds	r3, #72	; 0x48
 8018d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018d30:	f8cd c010 	str.w	ip, [sp, #16]
 8018d34:	9407      	str	r4, [sp, #28]
 8018d36:	9203      	str	r2, [sp, #12]
 8018d38:	9006      	str	r0, [sp, #24]
 8018d3a:	e092      	b.n	8018e62 <forward_lite_dw_3x3_sssa8_ch+0x256>
 8018d3c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018d40:	f1a2 0902 	sub.w	r9, r2, #2
 8018d44:	2401      	movs	r4, #1
 8018d46:	9d03      	ldr	r5, [sp, #12]
 8018d48:	3a01      	subs	r2, #1
 8018d4a:	1c86      	adds	r6, r0, #2
 8018d4c:	fa04 f909 	lsl.w	r9, r4, r9
 8018d50:	f85c 4b04 	ldr.w	r4, [ip], #4
 8018d54:	fb57 9704 	smmla	r7, r7, r4, r9
 8018d58:	fa47 f202 	asr.w	r2, r7, r2
 8018d5c:	f855 7b04 	ldr.w	r7, [r5], #4
 8018d60:	443a      	add	r2, r7
 8018d62:	f302 0207 	ssat	r2, #8, r2
 8018d66:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018d6a:	f80a 2b01 	strb.w	r2, [sl], #1
 8018d6e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018d72:	2c15      	cmp	r4, #21
 8018d74:	f340 8148 	ble.w	8019008 <forward_lite_dw_3x3_sssa8_ch+0x3fc>
 8018d78:	682e      	ldr	r6, [r5, #0]
 8018d7a:	2001      	movs	r0, #1
 8018d7c:	1ea5      	subs	r5, r4, #2
 8018d7e:	f8dc 2000 	ldr.w	r2, [ip]
 8018d82:	3c01      	subs	r4, #1
 8018d84:	fa00 f505 	lsl.w	r5, r0, r5
 8018d88:	9802      	ldr	r0, [sp, #8]
 8018d8a:	fb5e 5e02 	smmla	lr, lr, r2, r5
 8018d8e:	9a01      	ldr	r2, [sp, #4]
 8018d90:	fa4e f404 	asr.w	r4, lr, r4
 8018d94:	f100 0708 	add.w	r7, r0, #8
 8018d98:	f102 0904 	add.w	r9, r2, #4
 8018d9c:	9a03      	ldr	r2, [sp, #12]
 8018d9e:	4426      	add	r6, r4
 8018da0:	f102 0c08 	add.w	ip, r2, #8
 8018da4:	f306 0607 	ssat	r6, #8, r6
 8018da8:	9a04      	ldr	r2, [sp, #16]
 8018daa:	f88a 6000 	strb.w	r6, [sl]
 8018dae:	1c95      	adds	r5, r2, #2
 8018db0:	f9b9 4000 	ldrsh.w	r4, [r9]
 8018db4:	2c15      	cmp	r4, #21
 8018db6:	f340 8148 	ble.w	801904a <forward_lite_dw_3x3_sssa8_ch+0x43e>
 8018dba:	f1a4 0902 	sub.w	r9, r4, #2
 8018dbe:	2001      	movs	r0, #1
 8018dc0:	683a      	ldr	r2, [r7, #0]
 8018dc2:	3c01      	subs	r4, #1
 8018dc4:	fa00 f909 	lsl.w	r9, r0, r9
 8018dc8:	f8dc 6000 	ldr.w	r6, [ip]
 8018dcc:	fb5b 9902 	smmla	r9, fp, r2, r9
 8018dd0:	9a01      	ldr	r2, [sp, #4]
 8018dd2:	fa49 f904 	asr.w	r9, r9, r4
 8018dd6:	9802      	ldr	r0, [sp, #8]
 8018dd8:	f102 0e06 	add.w	lr, r2, #6
 8018ddc:	9a03      	ldr	r2, [sp, #12]
 8018dde:	f100 070c 	add.w	r7, r0, #12
 8018de2:	444e      	add	r6, r9
 8018de4:	f102 0a0c 	add.w	sl, r2, #12
 8018de8:	f306 0607 	ssat	r6, #8, r6
 8018dec:	9a04      	ldr	r2, [sp, #16]
 8018dee:	702e      	strb	r6, [r5, #0]
 8018df0:	f102 0c03 	add.w	ip, r2, #3
 8018df4:	f9be 2000 	ldrsh.w	r2, [lr]
 8018df8:	2a15      	cmp	r2, #21
 8018dfa:	f340 8145 	ble.w	8019088 <forward_lite_dw_3x3_sssa8_ch+0x47c>
 8018dfe:	9801      	ldr	r0, [sp, #4]
 8018e00:	683d      	ldr	r5, [r7, #0]
 8018e02:	f100 0e08 	add.w	lr, r0, #8
 8018e06:	f8da 7000 	ldr.w	r7, [sl]
 8018e0a:	2001      	movs	r0, #1
 8018e0c:	f1a2 0a02 	sub.w	sl, r2, #2
 8018e10:	9e02      	ldr	r6, [sp, #8]
 8018e12:	3a01      	subs	r2, #1
 8018e14:	9c03      	ldr	r4, [sp, #12]
 8018e16:	fa00 fa0a 	lsl.w	sl, r0, sl
 8018e1a:	3610      	adds	r6, #16
 8018e1c:	9808      	ldr	r0, [sp, #32]
 8018e1e:	3410      	adds	r4, #16
 8018e20:	46f1      	mov	r9, lr
 8018e22:	fb50 a505 	smmla	r5, r0, r5, sl
 8018e26:	fa45 f202 	asr.w	r2, r5, r2
 8018e2a:	46b3      	mov	fp, r6
 8018e2c:	443a      	add	r2, r7
 8018e2e:	4627      	mov	r7, r4
 8018e30:	f302 0207 	ssat	r2, #8, r2
 8018e34:	f88c 2000 	strb.w	r2, [ip]
 8018e38:	9a04      	ldr	r2, [sp, #16]
 8018e3a:	3204      	adds	r2, #4
 8018e3c:	4694      	mov	ip, r2
 8018e3e:	9d07      	ldr	r5, [sp, #28]
 8018e40:	3348      	adds	r3, #72	; 0x48
 8018e42:	9806      	ldr	r0, [sp, #24]
 8018e44:	3504      	adds	r5, #4
 8018e46:	f8cd e004 	str.w	lr, [sp, #4]
 8018e4a:	3010      	adds	r0, #16
 8018e4c:	9602      	str	r6, [sp, #8]
 8018e4e:	e9cd 4203 	strd	r4, r2, [sp, #12]
 8018e52:	9006      	str	r0, [sp, #24]
 8018e54:	b2a8      	uxth	r0, r5
 8018e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e58:	4604      	mov	r4, r0
 8018e5a:	9007      	str	r0, [sp, #28]
 8018e5c:	4290      	cmp	r0, r2
 8018e5e:	f080 81a2 	bcs.w	80191a6 <forward_lite_dw_3x3_sssa8_ch+0x59a>
 8018e62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018e64:	f853 5c48 	ldr.w	r5, [r3, #-72]
 8018e68:	1902      	adds	r2, r0, r4
 8018e6a:	5904      	ldr	r4, [r0, r4]
 8018e6c:	9806      	ldr	r0, [sp, #24]
 8018e6e:	f852 c001 	ldr.w	ip, [r2, r1]
 8018e72:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 8018e76:	eac4 460c 	pkhbt	r6, r4, ip, lsl #16
 8018e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8018e7c:	eacc 4c24 	pkhtb	ip, ip, r4, asr #16
 8018e80:	9309      	str	r3, [sp, #36]	; 0x24
 8018e82:	f850 4c10 	ldr.w	r4, [r0, #-16]
 8018e86:	fa28 fe86 	sxtab16	lr, r8, r6
 8018e8a:	fb25 440e 	smlad	r4, r5, lr, r4
 8018e8e:	fa28 fe96 	sxtab16	lr, r8, r6, ror #8
 8018e92:	f853 5c44 	ldr.w	r5, [r3, #-68]
 8018e96:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 8018e9a:	fb25 6e0e 	smlad	lr, r5, lr, r6
 8018e9e:	f853 5c40 	ldr.w	r5, [r3, #-64]
 8018ea2:	f850 6c08 	ldr.w	r6, [r0, #-8]
 8018ea6:	fa28 f98c 	sxtab16	r9, r8, ip
 8018eaa:	fb25 6909 	smlad	r9, r5, r9, r6
 8018eae:	fa28 fc9c 	sxtab16	ip, r8, ip, ror #8
 8018eb2:	f853 5c3c 	ldr.w	r5, [r3, #-60]
 8018eb6:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8018eba:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8018ebe:	9d05      	ldr	r5, [sp, #20]
 8018ec0:	f852 2011 	ldr.w	r2, [r2, r1, lsl #1]
 8018ec4:	eb07 0a05 	add.w	sl, r7, r5
 8018ec8:	597e      	ldr	r6, [r7, r5]
 8018eca:	f853 7c38 	ldr.w	r7, [r3, #-56]
 8018ece:	eac2 4506 	pkhbt	r5, r2, r6, lsl #16
 8018ed2:	eb0a 0b01 	add.w	fp, sl, r1
 8018ed6:	eac6 4222 	pkhtb	r2, r6, r2, asr #16
 8018eda:	fa28 f685 	sxtab16	r6, r8, r5
 8018ede:	fb27 4406 	smlad	r4, r7, r6, r4
 8018ee2:	fa28 f595 	sxtab16	r5, r8, r5, ror #8
 8018ee6:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8018eea:	fb20 ee05 	smlad	lr, r0, r5, lr
 8018eee:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8018ef2:	fa28 f582 	sxtab16	r5, r8, r2
 8018ef6:	fb20 9905 	smlad	r9, r0, r5, r9
 8018efa:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8018efe:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8018f02:	fb20 cc02 	smlad	ip, r0, r2, ip
 8018f06:	448b      	add	fp, r1
 8018f08:	9d05      	ldr	r5, [sp, #20]
 8018f0a:	f85a 2001 	ldr.w	r2, [sl, r1]
 8018f0e:	f853 7c28 	ldr.w	r7, [r3, #-40]
 8018f12:	445d      	add	r5, fp
 8018f14:	f85a a011 	ldr.w	sl, [sl, r1, lsl #1]
 8018f18:	eac2 460a 	pkhbt	r6, r2, sl, lsl #16
 8018f1c:	eaca 4a22 	pkhtb	sl, sl, r2, asr #16
 8018f20:	fa28 f286 	sxtab16	r2, r8, r6
 8018f24:	fb27 4402 	smlad	r4, r7, r2, r4
 8018f28:	fa28 f696 	sxtab16	r6, r8, r6, ror #8
 8018f2c:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8018f30:	fb20 ee06 	smlad	lr, r0, r6, lr
 8018f34:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8018f38:	fa28 f68a 	sxtab16	r6, r8, sl
 8018f3c:	fb22 9906 	smlad	r9, r2, r6, r9
 8018f40:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 8018f44:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8018f48:	fb20 cc0a 	smlad	ip, r0, sl, ip
 8018f4c:	9a05      	ldr	r2, [sp, #20]
 8018f4e:	f855 a001 	ldr.w	sl, [r5, r1]
 8018f52:	f85b 6002 	ldr.w	r6, [fp, r2]
 8018f56:	f853 7c18 	ldr.w	r7, [r3, #-24]
 8018f5a:	eac6 420a 	pkhbt	r2, r6, sl, lsl #16
 8018f5e:	eaca 4a26 	pkhtb	sl, sl, r6, asr #16
 8018f62:	fa28 f682 	sxtab16	r6, r8, r2
 8018f66:	fb27 4706 	smlad	r7, r7, r6, r4
 8018f6a:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 8018f6e:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8018f72:	fb20 ee02 	smlad	lr, r0, r2, lr
 8018f76:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8018f7a:	fa28 f28a 	sxtab16	r2, r8, sl
 8018f7e:	fb20 9902 	smlad	r9, r0, r2, r9
 8018f82:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 8018f86:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8018f8a:	fb22 cc0a 	smlad	ip, r2, sl, ip
 8018f8e:	f855 5011 	ldr.w	r5, [r5, r1, lsl #1]
 8018f92:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018f94:	b26c      	sxtb	r4, r5
 8018f96:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018f9a:	f345 4b07 	sbfx	fp, r5, #16, #8
 8018f9e:	f833 ac04 	ldrh.w	sl, [r3, #-4]
 8018fa2:	1a24      	subs	r4, r4, r0
 8018fa4:	f833 6c06 	ldrh.w	r6, [r3, #-6]
 8018fa8:	ebab 0b00 	sub.w	fp, fp, r0
 8018fac:	fb12 7704 	smlabb	r7, r2, r4, r7
 8018fb0:	f345 2207 	sbfx	r2, r5, #8, #8
 8018fb4:	fb1a 9b0b 	smlabb	fp, sl, fp, r9
 8018fb8:	ebc0 6525 	rsb	r5, r0, r5, asr #24
 8018fbc:	1a12      	subs	r2, r2, r0
 8018fbe:	f833 ac02 	ldrh.w	sl, [r3, #-2]
 8018fc2:	9801      	ldr	r0, [sp, #4]
 8018fc4:	fb16 ee02 	smlabb	lr, r6, r2, lr
 8018fc8:	fb1a c205 	smlabb	r2, sl, r5, ip
 8018fcc:	9208      	str	r2, [sp, #32]
 8018fce:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018fd2:	2a15      	cmp	r2, #21
 8018fd4:	f73f aeb2 	bgt.w	8018d3c <forward_lite_dw_3x3_sssa8_ch+0x130>
 8018fd8:	2a00      	cmp	r2, #0
 8018fda:	dd6b      	ble.n	80190b4 <forward_lite_dw_3x3_sssa8_ch+0x4a8>
 8018fdc:	007f      	lsls	r7, r7, #1
 8018fde:	1c86      	adds	r6, r0, #2
 8018fe0:	e9dd c502 	ldrd	ip, r5, [sp, #8]
 8018fe4:	f85c 4b04 	ldr.w	r4, [ip], #4
 8018fe8:	f855 9b04 	ldr.w	r9, [r5], #4
 8018fec:	fb57 9704 	smmla	r7, r7, r4, r9
 8018ff0:	4117      	asrs	r7, r2
 8018ff2:	f307 0207 	ssat	r2, #8, r7
 8018ff6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018ffa:	f80a 2b01 	strb.w	r2, [sl], #1
 8018ffe:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019002:	2c15      	cmp	r4, #21
 8019004:	f73f aeb8 	bgt.w	8018d78 <forward_lite_dw_3x3_sssa8_ch+0x16c>
 8019008:	2c00      	cmp	r4, #0
 801900a:	f340 80a5 	ble.w	8019158 <forward_lite_dw_3x3_sssa8_ch+0x54c>
 801900e:	f8dc 2000 	ldr.w	r2, [ip]
 8019012:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8019016:	682d      	ldr	r5, [r5, #0]
 8019018:	fb5e 5e02 	smmla	lr, lr, r2, r5
 801901c:	9a03      	ldr	r2, [sp, #12]
 801901e:	fa4e f404 	asr.w	r4, lr, r4
 8019022:	9802      	ldr	r0, [sp, #8]
 8019024:	f102 0c08 	add.w	ip, r2, #8
 8019028:	9a01      	ldr	r2, [sp, #4]
 801902a:	f100 0708 	add.w	r7, r0, #8
 801902e:	f102 0904 	add.w	r9, r2, #4
 8019032:	f304 0407 	ssat	r4, #8, r4
 8019036:	f88a 4000 	strb.w	r4, [sl]
 801903a:	f9b9 4000 	ldrsh.w	r4, [r9]
 801903e:	9a04      	ldr	r2, [sp, #16]
 8019040:	2c15      	cmp	r4, #21
 8019042:	f102 0502 	add.w	r5, r2, #2
 8019046:	f73f aeb8 	bgt.w	8018dba <forward_lite_dw_3x3_sssa8_ch+0x1ae>
 801904a:	2c00      	cmp	r4, #0
 801904c:	dd68      	ble.n	8019120 <forward_lite_dw_3x3_sssa8_ch+0x514>
 801904e:	683a      	ldr	r2, [r7, #0]
 8019050:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8019054:	f8dc 6000 	ldr.w	r6, [ip]
 8019058:	fb59 6902 	smmla	r9, r9, r2, r6
 801905c:	9a03      	ldr	r2, [sp, #12]
 801905e:	fa49 f404 	asr.w	r4, r9, r4
 8019062:	9802      	ldr	r0, [sp, #8]
 8019064:	f102 0a0c 	add.w	sl, r2, #12
 8019068:	9a01      	ldr	r2, [sp, #4]
 801906a:	f100 070c 	add.w	r7, r0, #12
 801906e:	f102 0e06 	add.w	lr, r2, #6
 8019072:	f304 0407 	ssat	r4, #8, r4
 8019076:	9a04      	ldr	r2, [sp, #16]
 8019078:	702c      	strb	r4, [r5, #0]
 801907a:	f102 0c03 	add.w	ip, r2, #3
 801907e:	f9be 2000 	ldrsh.w	r2, [lr]
 8019082:	2a15      	cmp	r2, #21
 8019084:	f73f aebb 	bgt.w	8018dfe <forward_lite_dw_3x3_sssa8_ch+0x1f2>
 8019088:	2a00      	cmp	r2, #0
 801908a:	dd2b      	ble.n	80190e4 <forward_lite_dw_3x3_sssa8_ch+0x4d8>
 801908c:	9801      	ldr	r0, [sp, #4]
 801908e:	9e02      	ldr	r6, [sp, #8]
 8019090:	9c03      	ldr	r4, [sp, #12]
 8019092:	f100 0e08 	add.w	lr, r0, #8
 8019096:	3610      	adds	r6, #16
 8019098:	9808      	ldr	r0, [sp, #32]
 801909a:	3410      	adds	r4, #16
 801909c:	683f      	ldr	r7, [r7, #0]
 801909e:	0045      	lsls	r5, r0, #1
 80190a0:	f8da a000 	ldr.w	sl, [sl]
 80190a4:	46b3      	mov	fp, r6
 80190a6:	46f1      	mov	r9, lr
 80190a8:	fb55 aa07 	smmla	sl, r5, r7, sl
 80190ac:	4627      	mov	r7, r4
 80190ae:	fa4a f202 	asr.w	r2, sl, r2
 80190b2:	e6bd      	b.n	8018e30 <forward_lite_dw_3x3_sssa8_ch+0x224>
 80190b4:	f1c2 0201 	rsb	r2, r2, #1
 80190b8:	4097      	lsls	r7, r2
 80190ba:	9a01      	ldr	r2, [sp, #4]
 80190bc:	1c96      	adds	r6, r2, #2
 80190be:	f307 021f 	ssat	r2, #32, r7
 80190c2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80190c6:	f85c 7b04 	ldr.w	r7, [ip], #4
 80190ca:	fb52 f217 	smmulr	r2, r2, r7
 80190ce:	9d03      	ldr	r5, [sp, #12]
 80190d0:	f855 4b04 	ldr.w	r4, [r5], #4
 80190d4:	4422      	add	r2, r4
 80190d6:	f302 0207 	ssat	r2, #8, r2
 80190da:	f8dd a010 	ldr.w	sl, [sp, #16]
 80190de:	f80a 2b01 	strb.w	r2, [sl], #1
 80190e2:	e644      	b.n	8018d6e <forward_lite_dw_3x3_sssa8_ch+0x162>
 80190e4:	9801      	ldr	r0, [sp, #4]
 80190e6:	f1c2 0501 	rsb	r5, r2, #1
 80190ea:	9a08      	ldr	r2, [sp, #32]
 80190ec:	f100 0e08 	add.w	lr, r0, #8
 80190f0:	40aa      	lsls	r2, r5
 80190f2:	46f1      	mov	r9, lr
 80190f4:	f302 051f 	ssat	r5, #32, r2
 80190f8:	9e02      	ldr	r6, [sp, #8]
 80190fa:	683a      	ldr	r2, [r7, #0]
 80190fc:	3610      	adds	r6, #16
 80190fe:	46b3      	mov	fp, r6
 8019100:	fb55 f512 	smmulr	r5, r5, r2
 8019104:	9c03      	ldr	r4, [sp, #12]
 8019106:	f8da 2000 	ldr.w	r2, [sl]
 801910a:	3410      	adds	r4, #16
 801910c:	4415      	add	r5, r2
 801910e:	4627      	mov	r7, r4
 8019110:	f305 0507 	ssat	r5, #8, r5
 8019114:	9a04      	ldr	r2, [sp, #16]
 8019116:	f88c 5000 	strb.w	r5, [ip]
 801911a:	3204      	adds	r2, #4
 801911c:	4694      	mov	ip, r2
 801911e:	e68e      	b.n	8018e3e <forward_lite_dw_3x3_sssa8_ch+0x232>
 8019120:	f1c4 0901 	rsb	r9, r4, #1
 8019124:	9a01      	ldr	r2, [sp, #4]
 8019126:	fa0b f909 	lsl.w	r9, fp, r9
 801912a:	f102 0e06 	add.w	lr, r2, #6
 801912e:	f309 091f 	ssat	r9, #32, r9
 8019132:	9802      	ldr	r0, [sp, #8]
 8019134:	683a      	ldr	r2, [r7, #0]
 8019136:	f100 070c 	add.w	r7, r0, #12
 801913a:	fb59 f912 	smmulr	r9, r9, r2
 801913e:	f8dc 2000 	ldr.w	r2, [ip]
 8019142:	9803      	ldr	r0, [sp, #12]
 8019144:	444a      	add	r2, r9
 8019146:	f100 0a0c 	add.w	sl, r0, #12
 801914a:	f302 0207 	ssat	r2, #8, r2
 801914e:	702a      	strb	r2, [r5, #0]
 8019150:	9a04      	ldr	r2, [sp, #16]
 8019152:	f102 0c03 	add.w	ip, r2, #3
 8019156:	e64d      	b.n	8018df4 <forward_lite_dw_3x3_sssa8_ch+0x1e8>
 8019158:	f1c4 0401 	rsb	r4, r4, #1
 801915c:	9a01      	ldr	r2, [sp, #4]
 801915e:	fa0e fe04 	lsl.w	lr, lr, r4
 8019162:	f102 0904 	add.w	r9, r2, #4
 8019166:	f30e 0e1f 	ssat	lr, #32, lr
 801916a:	9802      	ldr	r0, [sp, #8]
 801916c:	f8dc 2000 	ldr.w	r2, [ip]
 8019170:	f100 0708 	add.w	r7, r0, #8
 8019174:	fb5e fe12 	smmulr	lr, lr, r2
 8019178:	682a      	ldr	r2, [r5, #0]
 801917a:	9803      	ldr	r0, [sp, #12]
 801917c:	4472      	add	r2, lr
 801917e:	f100 0c08 	add.w	ip, r0, #8
 8019182:	f302 0207 	ssat	r2, #8, r2
 8019186:	f88a 2000 	strb.w	r2, [sl]
 801918a:	9a04      	ldr	r2, [sp, #16]
 801918c:	1c95      	adds	r5, r2, #2
 801918e:	e60f      	b.n	8018db0 <forward_lite_dw_3x3_sssa8_ch+0x1a4>
 8019190:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019192:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8019196:	930b      	str	r3, [sp, #44]	; 0x2c
 8019198:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 801919c:	e9dd 3712 	ldrd	r3, r7, [sp, #72]	; 0x48
 80191a0:	9309      	str	r3, [sp, #36]	; 0x24
 80191a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191a4:	9307      	str	r3, [sp, #28]
 80191a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	f000 8127 	beq.w	80193fc <forward_lite_dw_3x3_sssa8_ch+0x7f0>
 80191ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191b0:	9b07      	ldr	r3, [sp, #28]
 80191b2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80191b4:	18d0      	adds	r0, r2, r3
 80191b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80191b8:	56d3      	ldrsb	r3, [r2, r3]
 80191ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80191bc:	1b9a      	subs	r2, r3, r6
 80191be:	680b      	ldr	r3, [r1, #0]
 80191c0:	8821      	ldrh	r1, [r4, #0]
 80191c2:	fb11 3302 	smlabb	r3, r1, r2, r3
 80191c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80191c8:	5642      	ldrsb	r2, [r0, r1]
 80191ca:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 80191ce:	f910 0011 	ldrsb.w	r0, [r0, r1, lsl #1]
 80191d2:	1b92      	subs	r2, r2, r6
 80191d4:	8861      	ldrh	r1, [r4, #2]
 80191d6:	1b80      	subs	r0, r0, r6
 80191d8:	fb12 3301 	smlabb	r3, r2, r1, r3
 80191dc:	9a05      	ldr	r2, [sp, #20]
 80191de:	18ac      	adds	r4, r5, r2
 80191e0:	56aa      	ldrsb	r2, [r5, r2]
 80191e2:	4635      	mov	r5, r6
 80191e4:	1b92      	subs	r2, r2, r6
 80191e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80191e8:	88b1      	ldrh	r1, [r6, #4]
 80191ea:	fb10 3101 	smlabb	r1, r0, r1, r3
 80191ee:	88f3      	ldrh	r3, [r6, #6]
 80191f0:	fb12 1103 	smlabb	r1, r2, r3, r1
 80191f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191f6:	56e2      	ldrsb	r2, [r4, r3]
 80191f8:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 80191fc:	f914 3013 	ldrsb.w	r3, [r4, r3, lsl #1]
 8019200:	1b52      	subs	r2, r2, r5
 8019202:	8934      	ldrh	r4, [r6, #8]
 8019204:	1b5b      	subs	r3, r3, r5
 8019206:	fb12 1204 	smlabb	r2, r2, r4, r1
 801920a:	9905      	ldr	r1, [sp, #20]
 801920c:	1844      	adds	r4, r0, r1
 801920e:	5641      	ldrsb	r1, [r0, r1]
 8019210:	8970      	ldrh	r0, [r6, #10]
 8019212:	1b49      	subs	r1, r1, r5
 8019214:	fb13 2300 	smlabb	r3, r3, r0, r2
 8019218:	89b0      	ldrh	r0, [r6, #12]
 801921a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801921c:	fb11 3300 	smlabb	r3, r1, r0, r3
 8019220:	56a1      	ldrsb	r1, [r4, r2]
 8019222:	f914 0012 	ldrsb.w	r0, [r4, r2, lsl #1]
 8019226:	4634      	mov	r4, r6
 8019228:	1b4a      	subs	r2, r1, r5
 801922a:	89f1      	ldrh	r1, [r6, #14]
 801922c:	1b40      	subs	r0, r0, r5
 801922e:	fb12 3101 	smlabb	r1, r2, r1, r3
 8019232:	9b07      	ldr	r3, [sp, #28]
 8019234:	1c5e      	adds	r6, r3, #1
 8019236:	8a23      	ldrh	r3, [r4, #16]
 8019238:	f9b9 4000 	ldrsh.w	r4, [r9]
 801923c:	fb10 1003 	smlabb	r0, r0, r3, r1
 8019240:	b2b6      	uxth	r6, r6
 8019242:	2c15      	cmp	r4, #21
 8019244:	b229      	sxth	r1, r5
 8019246:	f300 80f1 	bgt.w	801942c <forward_lite_dw_3x3_sssa8_ch+0x820>
 801924a:	2c00      	cmp	r4, #0
 801924c:	f340 8122 	ble.w	8019494 <forward_lite_dw_3x3_sssa8_ch+0x888>
 8019250:	f8db 3000 	ldr.w	r3, [fp]
 8019254:	0040      	lsls	r0, r0, #1
 8019256:	683a      	ldr	r2, [r7, #0]
 8019258:	fb50 2003 	smmla	r0, r0, r3, r2
 801925c:	fa40 f404 	asr.w	r4, r0, r4
 8019260:	f304 0407 	ssat	r4, #8, r4
 8019264:	46e6      	mov	lr, ip
 8019266:	f80e 4b01 	strb.w	r4, [lr], #1
 801926a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801926c:	2b00      	cmp	r3, #0
 801926e:	f000 80c3 	beq.w	80193f8 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 8019272:	9b07      	ldr	r3, [sp, #28]
 8019274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019276:	3302      	adds	r3, #2
 8019278:	8a6a      	ldrh	r2, [r5, #18]
 801927a:	b29b      	uxth	r3, r3
 801927c:	9301      	str	r3, [sp, #4]
 801927e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019280:	199c      	adds	r4, r3, r6
 8019282:	5798      	ldrsb	r0, [r3, r6]
 8019284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019286:	1a40      	subs	r0, r0, r1
 8019288:	685b      	ldr	r3, [r3, #4]
 801928a:	fb10 3302 	smlabb	r3, r0, r2, r3
 801928e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019290:	56a0      	ldrsb	r0, [r4, r2]
 8019292:	eb04 0642 	add.w	r6, r4, r2, lsl #1
 8019296:	f914 4012 	ldrsb.w	r4, [r4, r2, lsl #1]
 801929a:	1a40      	subs	r0, r0, r1
 801929c:	8aaa      	ldrh	r2, [r5, #20]
 801929e:	1a64      	subs	r4, r4, r1
 80192a0:	fb10 3002 	smlabb	r0, r0, r2, r3
 80192a4:	9b05      	ldr	r3, [sp, #20]
 80192a6:	18f5      	adds	r5, r6, r3
 80192a8:	56f3      	ldrsb	r3, [r6, r3]
 80192aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80192ac:	1a5b      	subs	r3, r3, r1
 80192ae:	8af2      	ldrh	r2, [r6, #22]
 80192b0:	fb14 0202 	smlabb	r2, r4, r2, r0
 80192b4:	8b30      	ldrh	r0, [r6, #24]
 80192b6:	fb13 2200 	smlabb	r2, r3, r0, r2
 80192ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80192bc:	562b      	ldrsb	r3, [r5, r0]
 80192be:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 80192c2:	f915 0010 	ldrsb.w	r0, [r5, r0, lsl #1]
 80192c6:	1a5b      	subs	r3, r3, r1
 80192c8:	8b75      	ldrh	r5, [r6, #26]
 80192ca:	1a40      	subs	r0, r0, r1
 80192cc:	fb13 2305 	smlabb	r3, r3, r5, r2
 80192d0:	9a05      	ldr	r2, [sp, #20]
 80192d2:	18a5      	adds	r5, r4, r2
 80192d4:	56a2      	ldrsb	r2, [r4, r2]
 80192d6:	8bb4      	ldrh	r4, [r6, #28]
 80192d8:	1a52      	subs	r2, r2, r1
 80192da:	fb10 3304 	smlabb	r3, r0, r4, r3
 80192de:	8bf0      	ldrh	r0, [r6, #30]
 80192e0:	8c34      	ldrh	r4, [r6, #32]
 80192e2:	fb12 3200 	smlabb	r2, r2, r0, r3
 80192e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80192e8:	562b      	ldrsb	r3, [r5, r0]
 80192ea:	f915 0010 	ldrsb.w	r0, [r5, r0, lsl #1]
 80192ee:	1a5b      	subs	r3, r3, r1
 80192f0:	1a40      	subs	r0, r0, r1
 80192f2:	fb13 2204 	smlabb	r2, r3, r4, r2
 80192f6:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 80192fa:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 80192fc:	2c15      	cmp	r4, #21
 80192fe:	fb10 2003 	smlabb	r0, r0, r3, r2
 8019302:	f300 80a5 	bgt.w	8019450 <forward_lite_dw_3x3_sssa8_ch+0x844>
 8019306:	2c00      	cmp	r4, #0
 8019308:	f340 80d6 	ble.w	80194b8 <forward_lite_dw_3x3_sssa8_ch+0x8ac>
 801930c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8019310:	0040      	lsls	r0, r0, #1
 8019312:	687a      	ldr	r2, [r7, #4]
 8019314:	fb50 2003 	smmla	r0, r0, r3, r2
 8019318:	fa40 f404 	asr.w	r4, r0, r4
 801931c:	f304 0407 	ssat	r4, #8, r4
 8019320:	46f2      	mov	sl, lr
 8019322:	f80a 4b01 	strb.w	r4, [sl], #1
 8019326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019328:	2b02      	cmp	r3, #2
 801932a:	d065      	beq.n	80193f8 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 801932c:	9801      	ldr	r0, [sp, #4]
 801932e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019332:	689c      	ldr	r4, [r3, #8]
 8019334:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019336:	1813      	adds	r3, r2, r0
 8019338:	5612      	ldrsb	r2, [r2, r0]
 801933a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801933c:	1a50      	subs	r0, r2, r1
 801933e:	8cad      	ldrh	r5, [r5, #36]	; 0x24
 8019340:	f9b9 e004 	ldrsh.w	lr, [r9, #4]
 8019344:	fb15 4200 	smlabb	r2, r5, r0, r4
 8019348:	579d      	ldrsb	r5, [r3, r6]
 801934a:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 801934e:	f913 6016 	ldrsb.w	r6, [r3, r6, lsl #1]
 8019352:	1a6c      	subs	r4, r5, r1
 8019354:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019356:	9b05      	ldr	r3, [sp, #20]
 8019358:	1a76      	subs	r6, r6, r1
 801935a:	8ced      	ldrh	r5, [r5, #38]	; 0x26
 801935c:	f1be 0f15 	cmp.w	lr, #21
 8019360:	fb15 2504 	smlabb	r5, r5, r4, r2
 8019364:	eb00 0403 	add.w	r4, r0, r3
 8019368:	56c3      	ldrsb	r3, [r0, r3]
 801936a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801936c:	eba3 0201 	sub.w	r2, r3, r1
 8019370:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8019372:	fb13 5306 	smlabb	r3, r3, r6, r5
 8019376:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019378:	4605      	mov	r5, r0
 801937a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 801937c:	fb10 3302 	smlabb	r3, r0, r2, r3
 8019380:	57a0      	ldrsb	r0, [r4, r6]
 8019382:	eb04 0246 	add.w	r2, r4, r6, lsl #1
 8019386:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
 801938a:	eba0 0001 	sub.w	r0, r0, r1
 801938e:	462e      	mov	r6, r5
 8019390:	8dad      	ldrh	r5, [r5, #44]	; 0x2c
 8019392:	eba4 0401 	sub.w	r4, r4, r1
 8019396:	fb15 3000 	smlabb	r0, r5, r0, r3
 801939a:	9b05      	ldr	r3, [sp, #20]
 801939c:	eb02 0503 	add.w	r5, r2, r3
 80193a0:	56d2      	ldrsb	r2, [r2, r3]
 80193a2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
 80193a4:	eba2 0201 	sub.w	r2, r2, r1
 80193a8:	fb13 0304 	smlabb	r3, r3, r4, r0
 80193ac:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 80193ae:	4634      	mov	r4, r6
 80193b0:	fb10 3302 	smlabb	r3, r0, r2, r3
 80193b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193b6:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80193b8:	56ae      	ldrsb	r6, [r5, r2]
 80193ba:	f915 2012 	ldrsb.w	r2, [r5, r2, lsl #1]
 80193be:	eba6 0601 	sub.w	r6, r6, r1
 80193c2:	eba2 0101 	sub.w	r1, r2, r1
 80193c6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80193c8:	fb10 3306 	smlabb	r3, r0, r6, r3
 80193cc:	fb12 3301 	smlabb	r3, r2, r1, r3
 80193d0:	dd50      	ble.n	8019474 <forward_lite_dw_3x3_sssa8_ch+0x868>
 80193d2:	f1ae 0102 	sub.w	r1, lr, #2
 80193d6:	2401      	movs	r4, #1
 80193d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80193dc:	68b8      	ldr	r0, [r7, #8]
 80193de:	f8db 2008 	ldr.w	r2, [fp, #8]
 80193e2:	fa04 f101 	lsl.w	r1, r4, r1
 80193e6:	fb53 1102 	smmla	r1, r3, r2, r1
 80193ea:	fa41 f10e 	asr.w	r1, r1, lr
 80193ee:	4401      	add	r1, r0
 80193f0:	f301 0107 	ssat	r1, #8, r1
 80193f4:	f88a 1000 	strb.w	r1, [sl]
 80193f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193fa:	449c      	add	ip, r3
 80193fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80193fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019400:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019402:	3301      	adds	r3, #1
 8019404:	440a      	add	r2, r1
 8019406:	b21b      	sxth	r3, r3
 8019408:	920a      	str	r2, [sp, #40]	; 0x28
 801940a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801940c:	9310      	str	r3, [sp, #64]	; 0x40
 801940e:	429a      	cmp	r2, r3
 8019410:	f73f ac7b 	bgt.w	8018d0a <forward_lite_dw_3x3_sssa8_ch+0xfe>
 8019414:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019416:	46e1      	mov	r9, ip
 8019418:	9919      	ldr	r1, [sp, #100]	; 0x64
 801941a:	3301      	adds	r3, #1
 801941c:	b21b      	sxth	r3, r3
 801941e:	428b      	cmp	r3, r1
 8019420:	9318      	str	r3, [sp, #96]	; 0x60
 8019422:	f6ff ac6a 	blt.w	8018cfa <forward_lite_dw_3x3_sssa8_ch+0xee>
 8019426:	b01f      	add	sp, #124	; 0x7c
 8019428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801942c:	1ea5      	subs	r5, r4, #2
 801942e:	2301      	movs	r3, #1
 8019430:	3c01      	subs	r4, #1
 8019432:	f8db 2000 	ldr.w	r2, [fp]
 8019436:	fa03 f505 	lsl.w	r5, r3, r5
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	fb50 5202 	smmla	r2, r0, r2, r5
 8019440:	4122      	asrs	r2, r4
 8019442:	4413      	add	r3, r2
 8019444:	f303 0307 	ssat	r3, #8, r3
 8019448:	46e6      	mov	lr, ip
 801944a:	f80e 3b01 	strb.w	r3, [lr], #1
 801944e:	e70c      	b.n	801926a <forward_lite_dw_3x3_sssa8_ch+0x65e>
 8019450:	1ea5      	subs	r5, r4, #2
 8019452:	2301      	movs	r3, #1
 8019454:	3c01      	subs	r4, #1
 8019456:	f8db 2004 	ldr.w	r2, [fp, #4]
 801945a:	fa03 f505 	lsl.w	r5, r3, r5
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	fb50 5202 	smmla	r2, r0, r2, r5
 8019464:	4122      	asrs	r2, r4
 8019466:	4413      	add	r3, r2
 8019468:	f303 0307 	ssat	r3, #8, r3
 801946c:	46f2      	mov	sl, lr
 801946e:	f80a 3b01 	strb.w	r3, [sl], #1
 8019472:	e758      	b.n	8019326 <forward_lite_dw_3x3_sssa8_ch+0x71a>
 8019474:	f1be 0f00 	cmp.w	lr, #0
 8019478:	dd30      	ble.n	80194dc <forward_lite_dw_3x3_sssa8_ch+0x8d0>
 801947a:	f8db 2008 	ldr.w	r2, [fp, #8]
 801947e:	005b      	lsls	r3, r3, #1
 8019480:	68b9      	ldr	r1, [r7, #8]
 8019482:	fb53 1302 	smmla	r3, r3, r2, r1
 8019486:	fa43 f30e 	asr.w	r3, r3, lr
 801948a:	f303 0307 	ssat	r3, #8, r3
 801948e:	f88a 3000 	strb.w	r3, [sl]
 8019492:	e7b1      	b.n	80193f8 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 8019494:	f1c4 0401 	rsb	r4, r4, #1
 8019498:	fa00 f404 	lsl.w	r4, r0, r4
 801949c:	f304 021f 	ssat	r2, #32, r4
 80194a0:	f8db 3000 	ldr.w	r3, [fp]
 80194a4:	fb52 f213 	smmulr	r2, r2, r3
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	4413      	add	r3, r2
 80194ac:	f303 0307 	ssat	r3, #8, r3
 80194b0:	46e6      	mov	lr, ip
 80194b2:	f80e 3b01 	strb.w	r3, [lr], #1
 80194b6:	e6d8      	b.n	801926a <forward_lite_dw_3x3_sssa8_ch+0x65e>
 80194b8:	f1c4 0401 	rsb	r4, r4, #1
 80194bc:	fa00 f204 	lsl.w	r2, r0, r4
 80194c0:	f302 021f 	ssat	r2, #32, r2
 80194c4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80194c8:	fb52 f213 	smmulr	r2, r2, r3
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	4413      	add	r3, r2
 80194d0:	f303 0307 	ssat	r3, #8, r3
 80194d4:	46f2      	mov	sl, lr
 80194d6:	f80a 3b01 	strb.w	r3, [sl], #1
 80194da:	e724      	b.n	8019326 <forward_lite_dw_3x3_sssa8_ch+0x71a>
 80194dc:	f1ce 0e01 	rsb	lr, lr, #1
 80194e0:	fa03 f30e 	lsl.w	r3, r3, lr
 80194e4:	f303 031f 	ssat	r3, #32, r3
 80194e8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80194ec:	fb53 f312 	smmulr	r3, r3, r2
 80194f0:	68ba      	ldr	r2, [r7, #8]
 80194f2:	4413      	add	r3, r2
 80194f4:	f303 0307 	ssat	r3, #8, r3
 80194f8:	f88a 3000 	strb.w	r3, [sl]
 80194fc:	e77c      	b.n	80193f8 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 80194fe:	42a1      	cmp	r1, r4
 8019500:	f840 7c04 	str.w	r7, [r0, #-4]
 8019504:	f100 0004 	add.w	r0, r0, #4
 8019508:	f6ff abb8 	blt.w	8018c7c <forward_lite_dw_3x3_sssa8_ch+0x70>
 801950c:	f7ff bbca 	b.w	8018ca4 <forward_lite_dw_3x3_sssa8_ch+0x98>
 8019510:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019512:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8019516:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 801951a:	9012      	str	r0, [sp, #72]	; 0x48
 801951c:	f000 814f 	beq.w	80197be <forward_lite_dw_3x3_sssa8_ch+0xbb2>
 8019520:	f10e 33ff 	add.w	r3, lr, #4294967295
 8019524:	f108 0204 	add.w	r2, r8, #4
 8019528:	4641      	mov	r1, r8
 801952a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 801952e:	b29b      	uxth	r3, r3
 8019530:	eba9 0604 	sub.w	r6, r9, r4
 8019534:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019538:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801953c:	9301      	str	r3, [sp, #4]
 801953e:	eb08 0304 	add.w	r3, r8, r4
 8019542:	9204      	str	r2, [sp, #16]
 8019544:	00a2      	lsls	r2, r4, #2
 8019546:	9203      	str	r2, [sp, #12]
 8019548:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801954c:	9202      	str	r2, [sp, #8]
 801954e:	901d      	str	r0, [sp, #116]	; 0x74
 8019550:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019552:	f8d1 b000 	ldr.w	fp, [r1]
 8019556:	681a      	ldr	r2, [r3, #0]
 8019558:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 801955c:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 8019560:	f105 0b04 	add.w	fp, r5, #4
 8019564:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8019568:	fa2f fb80 	sxtb16	fp, r0
 801956c:	f8c5 b000 	str.w	fp, [r5]
 8019570:	fa2f f090 	sxtb16	r0, r0, ror #8
 8019574:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019576:	6028      	str	r0, [r5, #0]
 8019578:	3504      	adds	r5, #4
 801957a:	951d      	str	r5, [sp, #116]	; 0x74
 801957c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801957e:	fa2f f582 	sxtb16	r5, r2
 8019582:	3004      	adds	r0, #4
 8019584:	f840 5c04 	str.w	r5, [r0, #-4]
 8019588:	901d      	str	r0, [sp, #116]	; 0x74
 801958a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801958e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019590:	6002      	str	r2, [r0, #0]
 8019592:	3004      	adds	r0, #4
 8019594:	f85c b001 	ldr.w	fp, [ip, r1]
 8019598:	901d      	str	r0, [sp, #116]	; 0x74
 801959a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801959c:	f85c 2003 	ldr.w	r2, [ip, r3]
 80195a0:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 80195a4:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 80195a8:	f105 0b04 	add.w	fp, r5, #4
 80195ac:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 80195b0:	fa2f fb80 	sxtb16	fp, r0
 80195b4:	f8c5 b000 	str.w	fp, [r5]
 80195b8:	fa2f f090 	sxtb16	r0, r0, ror #8
 80195bc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80195be:	6028      	str	r0, [r5, #0]
 80195c0:	3504      	adds	r5, #4
 80195c2:	951d      	str	r5, [sp, #116]	; 0x74
 80195c4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80195c6:	fa2f f582 	sxtb16	r5, r2
 80195ca:	3004      	adds	r0, #4
 80195cc:	f840 5c04 	str.w	r5, [r0, #-4]
 80195d0:	901d      	str	r0, [sp, #116]	; 0x74
 80195d2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80195d6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80195d8:	6002      	str	r2, [r0, #0]
 80195da:	3004      	adds	r0, #4
 80195dc:	9a04      	ldr	r2, [sp, #16]
 80195de:	901d      	str	r0, [sp, #116]	; 0x74
 80195e0:	f853 b002 	ldr.w	fp, [r3, r2]
 80195e4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80195e6:	9a03      	ldr	r2, [sp, #12]
 80195e8:	589a      	ldr	r2, [r3, r2]
 80195ea:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 80195ee:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 80195f2:	f105 0b04 	add.w	fp, r5, #4
 80195f6:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 80195fa:	fa2f fb80 	sxtb16	fp, r0
 80195fe:	f8c5 b000 	str.w	fp, [r5]
 8019602:	fa2f f090 	sxtb16	r0, r0, ror #8
 8019606:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019608:	6028      	str	r0, [r5, #0]
 801960a:	3504      	adds	r5, #4
 801960c:	951d      	str	r5, [sp, #116]	; 0x74
 801960e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019610:	fa2f f582 	sxtb16	r5, r2
 8019614:	3004      	adds	r0, #4
 8019616:	f840 5c04 	str.w	r5, [r0, #-4]
 801961a:	901d      	str	r0, [sp, #116]	; 0x74
 801961c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019620:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019622:	6002      	str	r2, [r0, #0]
 8019624:	3004      	adds	r0, #4
 8019626:	9a02      	ldr	r2, [sp, #8]
 8019628:	901d      	str	r0, [sp, #116]	; 0x74
 801962a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801962c:	f853 b002 	ldr.w	fp, [r3, r2]
 8019630:	598a      	ldr	r2, [r1, r6]
 8019632:	eacb 4002 	pkhbt	r0, fp, r2, lsl #16
 8019636:	eac2 422b 	pkhtb	r2, r2, fp, asr #16
 801963a:	f105 0b04 	add.w	fp, r5, #4
 801963e:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8019642:	fa2f fb80 	sxtb16	fp, r0
 8019646:	f8c5 b000 	str.w	fp, [r5]
 801964a:	fa2f f090 	sxtb16	r0, r0, ror #8
 801964e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019650:	6028      	str	r0, [r5, #0]
 8019652:	3504      	adds	r5, #4
 8019654:	951d      	str	r5, [sp, #116]	; 0x74
 8019656:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019658:	fa2f f582 	sxtb16	r5, r2
 801965c:	3004      	adds	r0, #4
 801965e:	f840 5c04 	str.w	r5, [r0, #-4]
 8019662:	901d      	str	r0, [sp, #116]	; 0x74
 8019664:	fa2f f292 	sxtb16	r2, r2, ror #8
 8019668:	981d      	ldr	r0, [sp, #116]	; 0x74
 801966a:	6002      	str	r2, [r0, #0]
 801966c:	3004      	adds	r0, #4
 801966e:	599a      	ldr	r2, [r3, r6]
 8019670:	901d      	str	r0, [sp, #116]	; 0x74
 8019672:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019674:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 8019678:	fa2f f585 	sxtb16	r5, r5
 801967c:	8005      	strh	r5, [r0, #0]
 801967e:	0c2d      	lsrs	r5, r5, #16
 8019680:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 8019684:	8045      	strh	r5, [r0, #2]
 8019686:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 801968a:	8082      	strh	r2, [r0, #4]
 801968c:	0c12      	lsrs	r2, r2, #16
 801968e:	3104      	adds	r1, #4
 8019690:	3008      	adds	r0, #8
 8019692:	f820 2c02 	strh.w	r2, [r0, #-2]
 8019696:	3304      	adds	r3, #4
 8019698:	9a01      	ldr	r2, [sp, #4]
 801969a:	4291      	cmp	r1, r2
 801969c:	f47f af57 	bne.w	801954e <forward_lite_dw_3x3_sssa8_ch+0x942>
 80196a0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80196a4:	4602      	mov	r2, r0
 80196a6:	fa1f fe8e 	uxth.w	lr, lr
 80196aa:	f014 0303 	ands.w	r3, r4, #3
 80196ae:	f43f aad0 	beq.w	8018c52 <forward_lite_dw_3x3_sssa8_ch+0x46>
 80196b2:	3b01      	subs	r3, #1
 80196b4:	f10e 0101 	add.w	r1, lr, #1
 80196b8:	b29d      	uxth	r5, r3
 80196ba:	f918 300e 	ldrsb.w	r3, [r8, lr]
 80196be:	b28e      	uxth	r6, r1
 80196c0:	8013      	strh	r3, [r2, #0]
 80196c2:	eb08 030e 	add.w	r3, r8, lr
 80196c6:	5719      	ldrsb	r1, [r3, r4]
 80196c8:	8051      	strh	r1, [r2, #2]
 80196ca:	1919      	adds	r1, r3, r4
 80196cc:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 80196d0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80196d4:	8090      	strh	r0, [r2, #4]
 80196d6:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80196da:	80d1      	strh	r1, [r2, #6]
 80196dc:	1919      	adds	r1, r3, r4
 80196de:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 80196e2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80196e6:	8110      	strh	r0, [r2, #8]
 80196e8:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80196ec:	8151      	strh	r1, [r2, #10]
 80196ee:	1919      	adds	r1, r3, r4
 80196f0:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 80196f4:	8190      	strh	r0, [r2, #12]
 80196f6:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 80196fa:	81d1      	strh	r1, [r2, #14]
 80196fc:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 8019700:	8213      	strh	r3, [r2, #16]
 8019702:	2d00      	cmp	r5, #0
 8019704:	d04e      	beq.n	80197a4 <forward_lite_dw_3x3_sssa8_ch+0xb98>
 8019706:	f918 3006 	ldrsb.w	r3, [r8, r6]
 801970a:	f10e 0e02 	add.w	lr, lr, #2
 801970e:	2d01      	cmp	r5, #1
 8019710:	8253      	strh	r3, [r2, #18]
 8019712:	eb08 0306 	add.w	r3, r8, r6
 8019716:	fa1f fe8e 	uxth.w	lr, lr
 801971a:	5719      	ldrsb	r1, [r3, r4]
 801971c:	8291      	strh	r1, [r2, #20]
 801971e:	eb03 0104 	add.w	r1, r3, r4
 8019722:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8019726:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801972a:	82d0      	strh	r0, [r2, #22]
 801972c:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8019730:	8311      	strh	r1, [r2, #24]
 8019732:	eb03 0104 	add.w	r1, r3, r4
 8019736:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 801973a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801973e:	8350      	strh	r0, [r2, #26]
 8019740:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8019744:	8391      	strh	r1, [r2, #28]
 8019746:	eb03 0104 	add.w	r1, r3, r4
 801974a:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 801974e:	83d0      	strh	r0, [r2, #30]
 8019750:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8019754:	8411      	strh	r1, [r2, #32]
 8019756:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 801975a:	8453      	strh	r3, [r2, #34]	; 0x22
 801975c:	d022      	beq.n	80197a4 <forward_lite_dw_3x3_sssa8_ch+0xb98>
 801975e:	f918 100e 	ldrsb.w	r1, [r8, lr]
 8019762:	eb08 030e 	add.w	r3, r8, lr
 8019766:	8491      	strh	r1, [r2, #36]	; 0x24
 8019768:	5719      	ldrsb	r1, [r3, r4]
 801976a:	84d1      	strh	r1, [r2, #38]	; 0x26
 801976c:	1919      	adds	r1, r3, r4
 801976e:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8019772:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8019776:	8510      	strh	r0, [r2, #40]	; 0x28
 8019778:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801977c:	8551      	strh	r1, [r2, #42]	; 0x2a
 801977e:	1919      	adds	r1, r3, r4
 8019780:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8019784:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8019788:	8590      	strh	r0, [r2, #44]	; 0x2c
 801978a:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801978e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8019790:	1919      	adds	r1, r3, r4
 8019792:	f913 0014 	ldrsb.w	r0, [r3, r4, lsl #1]
 8019796:	8610      	strh	r0, [r2, #48]	; 0x30
 8019798:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801979c:	8651      	strh	r1, [r2, #50]	; 0x32
 801979e:	f913 3024 	ldrsb.w	r3, [r3, r4, lsl #2]
 80197a2:	8693      	strh	r3, [r2, #52]	; 0x34
 80197a4:	44a1      	add	r9, r4
 80197a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80197a8:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 80197ac:	461a      	mov	r2, r3
 80197ae:	9314      	str	r3, [sp, #80]	; 0x50
 80197b0:	f06f 0315 	mvn.w	r3, #21
 80197b4:	fb03 2304 	mla	r3, r3, r4, r2
 80197b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80197ba:	f7ff ba58 	b.w	8018c6e <forward_lite_dw_3x3_sssa8_ch+0x62>
 80197be:	4602      	mov	r2, r0
 80197c0:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80197c4:	e771      	b.n	80196aa <forward_lite_dw_3x3_sssa8_ch+0xa9e>
 80197c6:	bf00      	nop

080197c8 <ai_sum_f32>:
 80197c8:	edd1 7a00 	vldr	s15, [r1]
 80197cc:	ed92 7a00 	vldr	s14, [r2]
 80197d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80197d4:	edc0 7a00 	vstr	s15, [r0]
 80197d8:	4770      	bx	lr
 80197da:	bf00      	nop

080197dc <ai_sum_buffer_INT8>:
 80197dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e0:	b085      	sub	sp, #20
 80197e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80197e4:	9300      	str	r3, [sp, #0]
 80197e6:	ed94 6a00 	vldr	s12, [r4]
 80197ea:	461c      	mov	r4, r3
 80197ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197ee:	08a4      	lsrs	r4, r4, #2
 80197f0:	f993 9000 	ldrsb.w	r9, [r3]
 80197f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80197f6:	fa1f f589 	uxth.w	r5, r9
 80197fa:	f993 a000 	ldrsb.w	sl, [r3]
 80197fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019800:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8019804:	fa1f f68a 	uxth.w	r6, sl
 8019808:	ed93 5a00 	vldr	s10, [r3]
 801980c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801980e:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8019812:	edd3 7a00 	vldr	s15, [r3]
 8019816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019818:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801981c:	f993 7000 	ldrsb.w	r7, [r3]
 8019820:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019822:	ee07 7a10 	vmov	s14, r7
 8019826:	eec5 5a27 	vdiv.f32	s11, s10, s15
 801982a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801982e:	bb23      	cbnz	r3, 801987a <ai_sum_buffer_INT8+0x9e>
 8019830:	eeb4 6a67 	vcmp.f32	s12, s15
 8019834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019838:	f040 811e 	bne.w	8019a78 <ai_sum_buffer_INT8+0x29c>
 801983c:	45b9      	cmp	r9, r7
 801983e:	f040 811b 	bne.w	8019a78 <ai_sum_buffer_INT8+0x29c>
 8019842:	eeb4 5a67 	vcmp.f32	s10, s15
 8019846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801984a:	f040 8115 	bne.w	8019a78 <ai_sum_buffer_INT8+0x29c>
 801984e:	45ba      	cmp	sl, r7
 8019850:	f040 8112 	bne.w	8019a78 <ai_sum_buffer_INT8+0x29c>
 8019854:	9b00      	ldr	r3, [sp, #0]
 8019856:	b16b      	cbz	r3, 8019874 <ai_sum_buffer_INT8+0x98>
 8019858:	440b      	add	r3, r1
 801985a:	461d      	mov	r5, r3
 801985c:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8019860:	f912 4b01 	ldrsb.w	r4, [r2], #1
 8019864:	4423      	add	r3, r4
 8019866:	1bdb      	subs	r3, r3, r7
 8019868:	f303 0307 	ssat	r3, #8, r3
 801986c:	42a9      	cmp	r1, r5
 801986e:	f800 3b01 	strb.w	r3, [r0], #1
 8019872:	d1f3      	bne.n	801985c <ai_sum_buffer_INT8+0x80>
 8019874:	b005      	add	sp, #20
 8019876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801987a:	2b01      	cmp	r3, #1
 801987c:	f000 8240 	beq.w	8019d00 <ai_sum_buffer_INT8+0x524>
 8019880:	f992 3000 	ldrsb.w	r3, [r2]
 8019884:	eba3 030a 	sub.w	r3, r3, sl
 8019888:	ee07 3a90 	vmov	s15, r3
 801988c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019890:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019894:	2c00      	cmp	r4, #0
 8019896:	f000 832c 	beq.w	8019ef2 <ai_sum_buffer_INT8+0x716>
 801989a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801989e:	00a7      	lsls	r7, r4, #2
 80198a0:	ed9f 6a74 	vldr	s12, [pc, #464]	; 8019a74 <ai_sum_buffer_INT8+0x298>
 80198a4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80198a8:	4606      	mov	r6, r0
 80198aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80198ae:	fa2f f28c 	sxtb16	r2, ip
 80198b2:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 80198b6:	fa2f fc8c 	sxtb16	ip, ip
 80198ba:	fadc fc05 	ssub16	ip, ip, r5
 80198be:	fad2 f205 	ssub16	r2, r2, r5
 80198c2:	b213      	sxth	r3, r2
 80198c4:	eef0 4a47 	vmov.f32	s9, s14
 80198c8:	ee05 3a10 	vmov	s10, r3
 80198cc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80198d0:	eee5 4a26 	vfma.f32	s9, s10, s13
 80198d4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80198d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198dc:	fe75 7a86 	vselgt.f32	s15, s11, s12
 80198e0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80198e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198e8:	ee17 8a90 	vmov	r8, s15
 80198ec:	f308 0807 	ssat	r8, #8, r8
 80198f0:	1412      	asrs	r2, r2, #16
 80198f2:	eeb0 5a47 	vmov.f32	s10, s14
 80198f6:	fa4f f888 	sxtb.w	r8, r8
 80198fa:	ee07 2a90 	vmov	s15, r2
 80198fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019902:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8019906:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801990a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801990e:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8019912:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801991a:	ee17 3a90 	vmov	r3, s15
 801991e:	f303 0307 	ssat	r3, #8, r3
 8019922:	b25a      	sxtb	r2, r3
 8019924:	eef0 4a47 	vmov.f32	s9, s14
 8019928:	fa0f f38c 	sxth.w	r3, ip
 801992c:	ee05 3a10 	vmov	s10, r3
 8019930:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019934:	eee5 4a26 	vfma.f32	s9, s10, s13
 8019938:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801993c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019940:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8019944:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801994c:	ee17 ea90 	vmov	lr, s15
 8019950:	f30e 0e07 	ssat	lr, #8, lr
 8019954:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8019958:	eeb0 5a47 	vmov.f32	s10, s14
 801995c:	fa4f fe8e 	sxtb.w	lr, lr
 8019960:	ee07 ca90 	vmov	s15, ip
 8019964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019968:	eea7 5aa6 	vfma.f32	s10, s15, s13
 801996c:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8019970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019974:	fe75 7a86 	vselgt.f32	s15, s11, s12
 8019978:	ee77 7a85 	vadd.f32	s15, s15, s10
 801997c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019980:	ee17 3a90 	vmov	r3, s15
 8019984:	f303 0c07 	ssat	ip, #8, r3
 8019988:	0413      	lsls	r3, r2, #16
 801998a:	42a1      	cmp	r1, r4
 801998c:	fa5f f888 	uxtb.w	r8, r8
 8019990:	ea4f 220e 	mov.w	r2, lr, lsl #8
 8019994:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019998:	b292      	uxth	r2, r2
 801999a:	ea43 0308 	orr.w	r3, r3, r8
 801999e:	ea43 0302 	orr.w	r3, r3, r2
 80199a2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80199a6:	f846 3b04 	str.w	r3, [r6], #4
 80199aa:	f47f af7e 	bne.w	80198aa <ai_sum_buffer_INT8+0xce>
 80199ae:	4438      	add	r0, r7
 80199b0:	9b00      	ldr	r3, [sp, #0]
 80199b2:	f013 0303 	ands.w	r3, r3, #3
 80199b6:	f43f af5d 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 80199ba:	f994 2000 	ldrsb.w	r2, [r4]
 80199be:	eef0 4a47 	vmov.f32	s9, s14
 80199c2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80199c6:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8019a74 <ai_sum_buffer_INT8+0x298>
 80199ca:	eba2 0209 	sub.w	r2, r2, r9
 80199ce:	ee07 2a90 	vmov	s15, r2
 80199d2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80199d6:	eee5 4aa6 	vfma.f32	s9, s11, s13
 80199da:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80199de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e2:	fe76 7a05 	vselgt.f32	s15, s12, s10
 80199e6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80199ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199ee:	ee17 2a90 	vmov	r2, s15
 80199f2:	f302 0207 	ssat	r2, #8, r2
 80199f6:	3b01      	subs	r3, #1
 80199f8:	7002      	strb	r2, [r0, #0]
 80199fa:	f43f af3b 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 80199fe:	f994 2001 	ldrsb.w	r2, [r4, #1]
 8019a02:	eef0 4a47 	vmov.f32	s9, s14
 8019a06:	eba2 0209 	sub.w	r2, r2, r9
 8019a0a:	ee07 2a90 	vmov	s15, r2
 8019a0e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8019a12:	eee5 4aa6 	vfma.f32	s9, s11, s13
 8019a16:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a1e:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8019a22:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a2a:	ee17 2a90 	vmov	r2, s15
 8019a2e:	f302 0207 	ssat	r2, #8, r2
 8019a32:	2b01      	cmp	r3, #1
 8019a34:	7042      	strb	r2, [r0, #1]
 8019a36:	f43f af1d 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 8019a3a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8019a3e:	eba3 0309 	sub.w	r3, r3, r9
 8019a42:	ee07 3a90 	vmov	s15, r3
 8019a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a4a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019a4e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a56:	fe36 6a05 	vselgt.f32	s12, s12, s10
 8019a5a:	ee36 7a07 	vadd.f32	s14, s12, s14
 8019a5e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019a62:	ee17 3a10 	vmov	r3, s14
 8019a66:	f303 0307 	ssat	r3, #8, r3
 8019a6a:	7083      	strb	r3, [r0, #2]
 8019a6c:	b005      	add	sp, #20
 8019a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a72:	bf00      	nop
 8019a74:	befffffc 	.word	0xbefffffc
 8019a78:	2c00      	cmp	r4, #0
 8019a7a:	f000 8238 	beq.w	8019eee <ai_sum_buffer_INT8+0x712>
 8019a7e:	00a3      	lsls	r3, r4, #2
 8019a80:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8019a84:	ed1f 5a05 	vldr	s10, [pc, #-20]	; 8019a74 <ai_sum_buffer_INT8+0x298>
 8019a88:	4680      	mov	r8, r0
 8019a8a:	9301      	str	r3, [sp, #4]
 8019a8c:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8019a90:	4617      	mov	r7, r2
 8019a92:	f8cd 9008 	str.w	r9, [sp, #8]
 8019a96:	469b      	mov	fp, r3
 8019a98:	9303      	str	r3, [sp, #12]
 8019a9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8019a9e:	f857 3b04 	ldr.w	r3, [r7], #4
 8019aa2:	fa2f f48c 	sxtb16	r4, ip
 8019aa6:	ea4f 2933 	mov.w	r9, r3, ror #8
 8019aaa:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8019aae:	fa2f f989 	sxtb16	r9, r9
 8019ab2:	fa2f fc8c 	sxtb16	ip, ip
 8019ab6:	fa2f f383 	sxtb16	r3, r3
 8019aba:	fadc fc05 	ssub16	ip, ip, r5
 8019abe:	fad4 f405 	ssub16	r4, r4, r5
 8019ac2:	fad9 f906 	ssub16	r9, r9, r6
 8019ac6:	fad3 f306 	ssub16	r3, r3, r6
 8019aca:	fa0f fe83 	sxth.w	lr, r3
 8019ace:	ee07 ea90 	vmov	s15, lr
 8019ad2:	fa0f fe84 	sxth.w	lr, r4
 8019ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ada:	ee06 ea10 	vmov	s12, lr
 8019ade:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019ae2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019ae6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019aee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af6:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8019afa:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b02:	ee17 ea90 	vmov	lr, s15
 8019b06:	f30e 0e07 	ssat	lr, #8, lr
 8019b0a:	141b      	asrs	r3, r3, #16
 8019b0c:	1424      	asrs	r4, r4, #16
 8019b0e:	ee07 3a90 	vmov	s15, r3
 8019b12:	fa4f fe8e 	sxtb.w	lr, lr
 8019b16:	ee06 4a10 	vmov	s12, r4
 8019b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b1e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019b22:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019b26:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b36:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8019b3a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b42:	ee17 3a90 	vmov	r3, s15
 8019b46:	f303 0307 	ssat	r3, #8, r3
 8019b4a:	fa0f f489 	sxth.w	r4, r9
 8019b4e:	b25b      	sxtb	r3, r3
 8019b50:	ee07 4a90 	vmov	s15, r4
 8019b54:	fa0f f48c 	sxth.w	r4, ip
 8019b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b5c:	ee06 4a10 	vmov	s12, r4
 8019b60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019b64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019b68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b78:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8019b7c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b84:	ee17 4a90 	vmov	r4, s15
 8019b88:	f304 0407 	ssat	r4, #8, r4
 8019b8c:	ea4f 4929 	mov.w	r9, r9, asr #16
 8019b90:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8019b94:	ee07 9a90 	vmov	s15, r9
 8019b98:	b264      	sxtb	r4, r4
 8019b9a:	ee06 ca10 	vmov	s12, ip
 8019b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ba2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019ba6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019baa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bba:	fe34 6a85 	vselgt.f32	s12, s9, s10
 8019bbe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bc6:	ee17 ca90 	vmov	ip, s15
 8019bca:	f30c 0c07 	ssat	ip, #8, ip
 8019bce:	041b      	lsls	r3, r3, #16
 8019bd0:	4559      	cmp	r1, fp
 8019bd2:	fa5f fe8e 	uxtb.w	lr, lr
 8019bd6:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8019bda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019bde:	b2a4      	uxth	r4, r4
 8019be0:	ea43 0e0e 	orr.w	lr, r3, lr
 8019be4:	ea4e 0e04 	orr.w	lr, lr, r4
 8019be8:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 8019bec:	f848 eb04 	str.w	lr, [r8], #4
 8019bf0:	f47f af53 	bne.w	8019a9a <ai_sum_buffer_INT8+0x2be>
 8019bf4:	e9dd 3901 	ldrd	r3, r9, [sp, #4]
 8019bf8:	441a      	add	r2, r3
 8019bfa:	4418      	add	r0, r3
 8019bfc:	9b00      	ldr	r3, [sp, #0]
 8019bfe:	f013 0303 	ands.w	r3, r3, #3
 8019c02:	f43f ae37 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 8019c06:	f992 1000 	ldrsb.w	r1, [r2]
 8019c0a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8019c0e:	9c03      	ldr	r4, [sp, #12]
 8019c10:	eba1 010a 	sub.w	r1, r1, sl
 8019c14:	ed5f 4a69 	vldr	s9, [pc, #-420]	; 8019a74 <ai_sum_buffer_INT8+0x298>
 8019c18:	ee07 1a90 	vmov	s15, r1
 8019c1c:	f994 1000 	ldrsb.w	r1, [r4]
 8019c20:	eba1 0109 	sub.w	r1, r1, r9
 8019c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c28:	ee06 1a10 	vmov	s12, r1
 8019c2c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019c30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019c34:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c44:	fe35 6a24 	vselgt.f32	s12, s10, s9
 8019c48:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c50:	ee17 1a90 	vmov	r1, s15
 8019c54:	f301 0107 	ssat	r1, #8, r1
 8019c58:	3b01      	subs	r3, #1
 8019c5a:	7001      	strb	r1, [r0, #0]
 8019c5c:	f43f ae0a 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 8019c60:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8019c64:	eba1 010a 	sub.w	r1, r1, sl
 8019c68:	ee07 1a90 	vmov	s15, r1
 8019c6c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8019c70:	eba1 0109 	sub.w	r1, r1, r9
 8019c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c78:	ee06 1a10 	vmov	s12, r1
 8019c7c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019c80:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019c84:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c94:	fe35 6a24 	vselgt.f32	s12, s10, s9
 8019c98:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ca0:	ee17 1a90 	vmov	r1, s15
 8019ca4:	f301 0107 	ssat	r1, #8, r1
 8019ca8:	2b01      	cmp	r3, #1
 8019caa:	7041      	strb	r1, [r0, #1]
 8019cac:	f43f ade2 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 8019cb0:	f992 3002 	ldrsb.w	r3, [r2, #2]
 8019cb4:	f994 2002 	ldrsb.w	r2, [r4, #2]
 8019cb8:	eba3 030a 	sub.w	r3, r3, sl
 8019cbc:	eba2 0209 	sub.w	r2, r2, r9
 8019cc0:	ee07 3a90 	vmov	s15, r3
 8019cc4:	ee06 2a10 	vmov	s12, r2
 8019cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ccc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019cd0:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8019cd4:	eee6 5a26 	vfma.f32	s11, s12, s13
 8019cd8:	ee35 7a87 	vadd.f32	s14, s11, s14
 8019cdc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ce4:	fe35 5a24 	vselgt.f32	s10, s10, s9
 8019ce8:	ee35 7a07 	vadd.f32	s14, s10, s14
 8019cec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019cf0:	ee17 3a10 	vmov	r3, s14
 8019cf4:	f303 0307 	ssat	r3, #8, r3
 8019cf8:	7083      	strb	r3, [r0, #2]
 8019cfa:	b005      	add	sp, #20
 8019cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d00:	f991 3000 	ldrsb.w	r3, [r1]
 8019d04:	eba3 0309 	sub.w	r3, r3, r9
 8019d08:	ee07 3a90 	vmov	s15, r3
 8019d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d10:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019d14:	2c00      	cmp	r4, #0
 8019d16:	f000 80ee 	beq.w	8019ef6 <ai_sum_buffer_INT8+0x71a>
 8019d1a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019d1e:	00a7      	lsls	r7, r4, #2
 8019d20:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 8019a74 <ai_sum_buffer_INT8+0x298>
 8019d24:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8019d28:	4605      	mov	r5, r0
 8019d2a:	f852 cb04 	ldr.w	ip, [r2], #4
 8019d2e:	fa2f f18c 	sxtb16	r1, ip
 8019d32:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 8019d36:	fa2f fc8c 	sxtb16	ip, ip
 8019d3a:	fadc fc06 	ssub16	ip, ip, r6
 8019d3e:	fad1 f106 	ssub16	r1, r1, r6
 8019d42:	b20b      	sxth	r3, r1
 8019d44:	eef0 4a47 	vmov.f32	s9, s14
 8019d48:	ee05 3a10 	vmov	s10, r3
 8019d4c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019d50:	eee5 4a25 	vfma.f32	s9, s10, s11
 8019d54:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d5c:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8019d60:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d68:	ee17 8a90 	vmov	r8, s15
 8019d6c:	f308 0807 	ssat	r8, #8, r8
 8019d70:	1409      	asrs	r1, r1, #16
 8019d72:	eeb0 5a47 	vmov.f32	s10, s14
 8019d76:	fa4f f888 	sxtb.w	r8, r8
 8019d7a:	ee07 1a90 	vmov	s15, r1
 8019d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d82:	eea7 5aa5 	vfma.f32	s10, s15, s11
 8019d86:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8019d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d8e:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8019d92:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d9a:	ee17 3a90 	vmov	r3, s15
 8019d9e:	f303 0307 	ssat	r3, #8, r3
 8019da2:	b259      	sxtb	r1, r3
 8019da4:	eef0 4a47 	vmov.f32	s9, s14
 8019da8:	fa0f f38c 	sxth.w	r3, ip
 8019dac:	ee05 3a10 	vmov	s10, r3
 8019db0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019db4:	eee5 4a25 	vfma.f32	s9, s10, s11
 8019db8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dc0:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8019dc4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019dcc:	ee17 ea90 	vmov	lr, s15
 8019dd0:	f30e 0e07 	ssat	lr, #8, lr
 8019dd4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8019dd8:	eeb0 5a47 	vmov.f32	s10, s14
 8019ddc:	fa4f fe8e 	sxtb.w	lr, lr
 8019de0:	ee07 ca90 	vmov	s15, ip
 8019de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019de8:	eea7 5aa5 	vfma.f32	s10, s15, s11
 8019dec:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8019df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019df4:	fe76 7a26 	vselgt.f32	s15, s12, s13
 8019df8:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e00:	ee17 3a90 	vmov	r3, s15
 8019e04:	f303 0c07 	ssat	ip, #8, r3
 8019e08:	040b      	lsls	r3, r1, #16
 8019e0a:	42a2      	cmp	r2, r4
 8019e0c:	fa5f f888 	uxtb.w	r8, r8
 8019e10:	ea4f 210e 	mov.w	r1, lr, lsl #8
 8019e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019e18:	b289      	uxth	r1, r1
 8019e1a:	ea43 0308 	orr.w	r3, r3, r8
 8019e1e:	ea43 0301 	orr.w	r3, r3, r1
 8019e22:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8019e26:	f845 3b04 	str.w	r3, [r5], #4
 8019e2a:	f47f af7e 	bne.w	8019d2a <ai_sum_buffer_INT8+0x54e>
 8019e2e:	4438      	add	r0, r7
 8019e30:	9b00      	ldr	r3, [sp, #0]
 8019e32:	f013 0203 	ands.w	r2, r3, #3
 8019e36:	f43f ad1d 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 8019e3a:	f994 3000 	ldrsb.w	r3, [r4]
 8019e3e:	eef0 4a47 	vmov.f32	s9, s14
 8019e42:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8019e46:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8019efc <ai_sum_buffer_INT8+0x720>
 8019e4a:	eba3 030a 	sub.w	r3, r3, sl
 8019e4e:	ee07 3a90 	vmov	s15, r3
 8019e52:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019e56:	eee5 4a86 	vfma.f32	s9, s11, s12
 8019e5a:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e62:	fe76 7a85 	vselgt.f32	s15, s13, s10
 8019e66:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e6e:	ee17 3a90 	vmov	r3, s15
 8019e72:	f303 0307 	ssat	r3, #8, r3
 8019e76:	3a01      	subs	r2, #1
 8019e78:	7003      	strb	r3, [r0, #0]
 8019e7a:	f43f acfb 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 8019e7e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8019e82:	eef0 4a47 	vmov.f32	s9, s14
 8019e86:	eba3 030a 	sub.w	r3, r3, sl
 8019e8a:	ee07 3a90 	vmov	s15, r3
 8019e8e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019e92:	eee5 4a86 	vfma.f32	s9, s11, s12
 8019e96:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e9e:	fe76 7a85 	vselgt.f32	s15, s13, s10
 8019ea2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019eaa:	ee17 3a90 	vmov	r3, s15
 8019eae:	f303 0307 	ssat	r3, #8, r3
 8019eb2:	2a01      	cmp	r2, #1
 8019eb4:	7043      	strb	r3, [r0, #1]
 8019eb6:	f43f acdd 	beq.w	8019874 <ai_sum_buffer_INT8+0x98>
 8019eba:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8019ebe:	eba3 030a 	sub.w	r3, r3, sl
 8019ec2:	ee07 3a90 	vmov	s15, r3
 8019ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019eca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019ece:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ed6:	fe76 6a85 	vselgt.f32	s13, s13, s10
 8019eda:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019ede:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019ee2:	ee17 3a10 	vmov	r3, s14
 8019ee6:	f303 0307 	ssat	r3, #8, r3
 8019eea:	7083      	strb	r3, [r0, #2]
 8019eec:	e4c2      	b.n	8019874 <ai_sum_buffer_INT8+0x98>
 8019eee:	9103      	str	r1, [sp, #12]
 8019ef0:	e684      	b.n	8019bfc <ai_sum_buffer_INT8+0x420>
 8019ef2:	460c      	mov	r4, r1
 8019ef4:	e55c      	b.n	80199b0 <ai_sum_buffer_INT8+0x1d4>
 8019ef6:	4614      	mov	r4, r2
 8019ef8:	e79a      	b.n	8019e30 <ai_sum_buffer_INT8+0x654>
 8019efa:	bf00      	nop
 8019efc:	befffffc 	.word	0xbefffffc

08019f00 <align_factor_ch>:
 8019f00:	2900      	cmp	r1, #0
 8019f02:	d05d      	beq.n	8019fc0 <align_factor_ch+0xc0>
 8019f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f08:	ed2d 8b04 	vpush	{d8-d9}
 8019f0c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8019f10:	4604      	mov	r4, r0
 8019f12:	4691      	mov	r9, r2
 8019f14:	4698      	mov	r8, r3
 8019f16:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8019f1a:	eddf 9a2a 	vldr	s19, [pc, #168]	; 8019fc4 <align_factor_ch+0xc4>
 8019f1e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8019f22:	2700      	movs	r7, #0
 8019f24:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019f28:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8019f2c:	ecf4 7a01 	vldmia	r4!, {s15}
 8019f30:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019f34:	eef4 7a68 	vcmp.f32	s15, s17
 8019f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f3c:	d528      	bpl.n	8019f90 <align_factor_ch+0x90>
 8019f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f46:	dd23      	ble.n	8019f90 <align_factor_ch+0x90>
 8019f48:	2200      	movs	r2, #0
 8019f4a:	e003      	b.n	8019f54 <align_factor_ch+0x54>
 8019f4c:	2a20      	cmp	r2, #32
 8019f4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019f52:	d031      	beq.n	8019fb8 <align_factor_ch+0xb8>
 8019f54:	eef4 7ac8 	vcmpe.f32	s15, s16
 8019f58:	b213      	sxth	r3, r2
 8019f5a:	3201      	adds	r2, #1
 8019f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f60:	d4f4      	bmi.n	8019f4c <align_factor_ch+0x4c>
 8019f62:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8019f66:	f8a8 3000 	strh.w	r3, [r8]
 8019f6a:	ee17 0a90 	vmov	r0, s15
 8019f6e:	f7e6 fa2f 	bl	80003d0 <__aeabi_f2lz>
 8019f72:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8019f76:	bf18      	it	ne
 8019f78:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 8019f7c:	42a5      	cmp	r5, r4
 8019f7e:	f108 0802 	add.w	r8, r8, #2
 8019f82:	f849 0b04 	str.w	r0, [r9], #4
 8019f86:	d1d1      	bne.n	8019f2c <align_factor_ch+0x2c>
 8019f88:	ecbd 8b04 	vpop	{d8-d9}
 8019f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f90:	2300      	movs	r3, #0
 8019f92:	e005      	b.n	8019fa0 <align_factor_ch+0xa0>
 8019f94:	b213      	sxth	r3, r2
 8019f96:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019f9a:	f113 0f1f 	cmn.w	r3, #31
 8019f9e:	d006      	beq.n	8019fae <align_factor_ch+0xae>
 8019fa0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8019fa4:	1e5a      	subs	r2, r3, #1
 8019fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019faa:	dcf3      	bgt.n	8019f94 <align_factor_ch+0x94>
 8019fac:	e7d9      	b.n	8019f62 <align_factor_ch+0x62>
 8019fae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019fb2:	f06f 031d 	mvn.w	r3, #29
 8019fb6:	e7d4      	b.n	8019f62 <align_factor_ch+0x62>
 8019fb8:	2000      	movs	r0, #0
 8019fba:	f8a8 7000 	strh.w	r7, [r8]
 8019fbe:	e7dd      	b.n	8019f7c <align_factor_ch+0x7c>
 8019fc0:	4770      	bx	lr
 8019fc2:	bf00      	nop
 8019fc4:	4f000000 	.word	0x4f000000

08019fc8 <st_sssa8_ch_convolve_rank1upd>:
 8019fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fcc:	b085      	sub	sp, #20
 8019fce:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8019fd2:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 8019fd6:	fb13 f304 	smulbb	r3, r3, r4
 8019fda:	460c      	mov	r4, r1
 8019fdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019fde:	fb13 f500 	smulbb	r5, r3, r0
 8019fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019fe4:	2a00      	cmp	r2, #0
 8019fe6:	d070      	beq.n	801a0ca <st_sssa8_ch_convolve_rank1upd+0x102>
 8019fe8:	b2ad      	uxth	r5, r5
 8019fea:	f1a1 0904 	sub.w	r9, r1, #4
 8019fee:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8019ff2:	08af      	lsrs	r7, r5, #2
 8019ff4:	f005 0503 	and.w	r5, r5, #3
 8019ff8:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8019ffc:	1e69      	subs	r1, r5, #1
 8019ffe:	f1a7 0381 	sub.w	r3, r7, #129	; 0x81
 801a002:	f1a7 0280 	sub.w	r2, r7, #128	; 0x80
 801a006:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 801a00a:	b289      	uxth	r1, r1
 801a00c:	9100      	str	r1, [sp, #0]
 801a00e:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 801a012:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 801a016:	b292      	uxth	r2, r2
 801a018:	9202      	str	r2, [sp, #8]
 801a01a:	025a      	lsls	r2, r3, #9
 801a01c:	3301      	adds	r3, #1
 801a01e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801a022:	025b      	lsls	r3, r3, #9
 801a024:	9203      	str	r2, [sp, #12]
 801a026:	9301      	str	r3, [sp, #4]
 801a028:	2f80      	cmp	r7, #128	; 0x80
 801a02a:	d953      	bls.n	801a0d4 <st_sssa8_ch_convolve_rank1upd+0x10c>
 801a02c:	9b03      	ldr	r3, [sp, #12]
 801a02e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 801a032:	2600      	movs	r6, #0
 801a034:	eb04 0c03 	add.w	ip, r4, r3
 801a038:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 801a03c:	2200      	movs	r2, #0
 801a03e:	f851 3b04 	ldr.w	r3, [r1], #4
 801a042:	fa2f fe83 	sxtb16	lr, r3
 801a046:	4281      	cmp	r1, r0
 801a048:	ea4f 2333 	mov.w	r3, r3, ror #8
 801a04c:	fa92 f21e 	qadd16	r2, r2, lr
 801a050:	fa2f f383 	sxtb16	r3, r3
 801a054:	fa92 f213 	qadd16	r2, r2, r3
 801a058:	d1f1      	bne.n	801a03e <st_sssa8_ch_convolve_rank1upd+0x76>
 801a05a:	f501 7000 	add.w	r0, r1, #512	; 0x200
 801a05e:	b213      	sxth	r3, r2
 801a060:	4560      	cmp	r0, ip
 801a062:	eb03 4222 	add.w	r2, r3, r2, asr #16
 801a066:	4416      	add	r6, r2
 801a068:	d1e6      	bne.n	801a038 <st_sssa8_ch_convolve_rank1upd+0x70>
 801a06a:	9b01      	ldr	r3, [sp, #4]
 801a06c:	18e1      	adds	r1, r4, r3
 801a06e:	9c02      	ldr	r4, [sp, #8]
 801a070:	b374      	cbz	r4, 801a0d0 <st_sssa8_ch_convolve_rank1upd+0x108>
 801a072:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801a076:	2200      	movs	r2, #0
 801a078:	f851 3b04 	ldr.w	r3, [r1], #4
 801a07c:	fa2f f083 	sxtb16	r0, r3
 801a080:	428c      	cmp	r4, r1
 801a082:	ea4f 2333 	mov.w	r3, r3, ror #8
 801a086:	fa92 f210 	qadd16	r2, r2, r0
 801a08a:	fa2f f383 	sxtb16	r3, r3
 801a08e:	fa92 f213 	qadd16	r2, r2, r3
 801a092:	d1f1      	bne.n	801a078 <st_sssa8_ch_convolve_rank1upd+0xb0>
 801a094:	b213      	sxth	r3, r2
 801a096:	eb03 4322 	add.w	r3, r3, r2, asr #16
 801a09a:	441e      	add	r6, r3
 801a09c:	b16d      	cbz	r5, 801a0ba <st_sssa8_ch_convolve_rank1upd+0xf2>
 801a09e:	f994 3000 	ldrsb.w	r3, [r4]
 801a0a2:	441e      	add	r6, r3
 801a0a4:	9b00      	ldr	r3, [sp, #0]
 801a0a6:	b13b      	cbz	r3, 801a0b8 <st_sssa8_ch_convolve_rank1upd+0xf0>
 801a0a8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801a0ac:	2d02      	cmp	r5, #2
 801a0ae:	441e      	add	r6, r3
 801a0b0:	d002      	beq.n	801a0b8 <st_sssa8_ch_convolve_rank1upd+0xf0>
 801a0b2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801a0b6:	441e      	add	r6, r3
 801a0b8:	442c      	add	r4, r5
 801a0ba:	f859 3f04 	ldr.w	r3, [r9, #4]!
 801a0be:	fb0b 3616 	mls	r6, fp, r6, r3
 801a0c2:	f84a 6b04 	str.w	r6, [sl], #4
 801a0c6:	45c2      	cmp	sl, r8
 801a0c8:	d1ae      	bne.n	801a028 <st_sssa8_ch_convolve_rank1upd+0x60>
 801a0ca:	b005      	add	sp, #20
 801a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d0:	460c      	mov	r4, r1
 801a0d2:	e7e3      	b.n	801a09c <st_sssa8_ch_convolve_rank1upd+0xd4>
 801a0d4:	4621      	mov	r1, r4
 801a0d6:	2600      	movs	r6, #0
 801a0d8:	463c      	mov	r4, r7
 801a0da:	e7c9      	b.n	801a070 <st_sssa8_ch_convolve_rank1upd+0xa8>

0801a0dc <ai_padding_opt_init>:
 801a0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a0e0:	2700      	movs	r7, #0
 801a0e2:	9c07      	ldr	r4, [sp, #28]
 801a0e4:	e9c0 7700 	strd	r7, r7, [r0]
 801a0e8:	6087      	str	r7, [r0, #8]
 801a0ea:	46b9      	mov	r9, r7
 801a0ec:	690d      	ldr	r5, [r1, #16]
 801a0ee:	f1c5 0c00 	rsb	ip, r5, #0
 801a0f2:	689d      	ldr	r5, [r3, #8]
 801a0f4:	42bd      	cmp	r5, r7
 801a0f6:	dd1c      	ble.n	801a132 <ai_padding_opt_init+0x56>
 801a0f8:	463e      	mov	r6, r7
 801a0fa:	46be      	mov	lr, r7
 801a0fc:	e010      	b.n	801a120 <ai_padding_opt_init+0x44>
 801a0fe:	6895      	ldr	r5, [r2, #8]
 801a100:	eba5 080c 	sub.w	r8, r5, ip
 801a104:	68a5      	ldr	r5, [r4, #8]
 801a106:	45a8      	cmp	r8, r5
 801a108:	da10      	bge.n	801a12c <ai_padding_opt_init+0x50>
 801a10a:	f109 0901 	add.w	r9, r9, #1
 801a10e:	f8c0 9008 	str.w	r9, [r0, #8]
 801a112:	688d      	ldr	r5, [r1, #8]
 801a114:	f10e 0e01 	add.w	lr, lr, #1
 801a118:	44ac      	add	ip, r5
 801a11a:	689d      	ldr	r5, [r3, #8]
 801a11c:	4575      	cmp	r5, lr
 801a11e:	dd09      	ble.n	801a134 <ai_padding_opt_init+0x58>
 801a120:	f1bc 0f00 	cmp.w	ip, #0
 801a124:	daeb      	bge.n	801a0fe <ai_padding_opt_init+0x22>
 801a126:	3601      	adds	r6, #1
 801a128:	6006      	str	r6, [r0, #0]
 801a12a:	e7f2      	b.n	801a112 <ai_padding_opt_init+0x36>
 801a12c:	3701      	adds	r7, #1
 801a12e:	6047      	str	r7, [r0, #4]
 801a130:	e7ef      	b.n	801a112 <ai_padding_opt_init+0x36>
 801a132:	463e      	mov	r6, r7
 801a134:	2500      	movs	r5, #0
 801a136:	f8c0 9014 	str.w	r9, [r0, #20]
 801a13a:	e9c0 6703 	strd	r6, r7, [r0, #12]
 801a13e:	e9c0 5506 	strd	r5, r5, [r0, #24]
 801a142:	6205      	str	r5, [r0, #32]
 801a144:	694e      	ldr	r6, [r1, #20]
 801a146:	f1c6 0c00 	rsb	ip, r6, #0
 801a14a:	685e      	ldr	r6, [r3, #4]
 801a14c:	42ae      	cmp	r6, r5
 801a14e:	dd1c      	ble.n	801a18a <ai_padding_opt_init+0xae>
 801a150:	46ae      	mov	lr, r5
 801a152:	e00f      	b.n	801a174 <ai_padding_opt_init+0x98>
 801a154:	6855      	ldr	r5, [r2, #4]
 801a156:	6866      	ldr	r6, [r4, #4]
 801a158:	eba5 050c 	sub.w	r5, r5, ip
 801a15c:	42b5      	cmp	r5, r6
 801a15e:	da10      	bge.n	801a182 <ai_padding_opt_init+0xa6>
 801a160:	6a05      	ldr	r5, [r0, #32]
 801a162:	3501      	adds	r5, #1
 801a164:	6205      	str	r5, [r0, #32]
 801a166:	68cd      	ldr	r5, [r1, #12]
 801a168:	f10e 0e01 	add.w	lr, lr, #1
 801a16c:	44ac      	add	ip, r5
 801a16e:	685d      	ldr	r5, [r3, #4]
 801a170:	4575      	cmp	r5, lr
 801a172:	dd0a      	ble.n	801a18a <ai_padding_opt_init+0xae>
 801a174:	f1bc 0f00 	cmp.w	ip, #0
 801a178:	daec      	bge.n	801a154 <ai_padding_opt_init+0x78>
 801a17a:	6985      	ldr	r5, [r0, #24]
 801a17c:	3501      	adds	r5, #1
 801a17e:	6185      	str	r5, [r0, #24]
 801a180:	e7f1      	b.n	801a166 <ai_padding_opt_init+0x8a>
 801a182:	69c5      	ldr	r5, [r0, #28]
 801a184:	3501      	adds	r5, #1
 801a186:	61c5      	str	r5, [r0, #28]
 801a188:	e7ed      	b.n	801a166 <ai_padding_opt_init+0x8a>
 801a18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a18e:	bf00      	nop

0801a190 <ai_padding_opt_phase1>:
 801a190:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 801a194:	b923      	cbnz	r3, 801a1a0 <ai_padding_opt_phase1+0x10>
 801a196:	b17a      	cbz	r2, 801a1b8 <ai_padding_opt_phase1+0x28>
 801a198:	3a01      	subs	r2, #1
 801a19a:	8483      	strh	r3, [r0, #36]	; 0x24
 801a19c:	61c2      	str	r2, [r0, #28]
 801a19e:	e004      	b.n	801a1aa <ai_padding_opt_phase1+0x1a>
 801a1a0:	b152      	cbz	r2, 801a1b8 <ai_padding_opt_phase1+0x28>
 801a1a2:	2201      	movs	r2, #1
 801a1a4:	3b01      	subs	r3, #1
 801a1a6:	8482      	strh	r2, [r0, #36]	; 0x24
 801a1a8:	6183      	str	r3, [r0, #24]
 801a1aa:	68c3      	ldr	r3, [r0, #12]
 801a1ac:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 801a1b0:	6003      	str	r3, [r0, #0]
 801a1b2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801a1b6:	4770      	bx	lr
 801a1b8:	6a03      	ldr	r3, [r0, #32]
 801a1ba:	2201      	movs	r2, #1
 801a1bc:	3b01      	subs	r3, #1
 801a1be:	8482      	strh	r2, [r0, #36]	; 0x24
 801a1c0:	6203      	str	r3, [r0, #32]
 801a1c2:	e7f2      	b.n	801a1aa <ai_padding_opt_phase1+0x1a>

0801a1c4 <st_int8_to16_dual>:
 801a1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c8:	4698      	mov	r8, r3
 801a1ca:	085b      	lsrs	r3, r3, #1
 801a1cc:	eb00 0c02 	add.w	ip, r0, r2
 801a1d0:	f000 80b9 	beq.w	801a346 <st_int8_to16_dual+0x182>
 801a1d4:	f1a2 0710 	sub.w	r7, r2, #16
 801a1d8:	1f16      	subs	r6, r2, #4
 801a1da:	2f00      	cmp	r7, #0
 801a1dc:	f04f 0500 	mov.w	r5, #0
 801a1e0:	db73      	blt.n	801a2ca <st_int8_to16_dual+0x106>
 801a1e2:	f8d0 e000 	ldr.w	lr, [r0]
 801a1e6:	f8dc 4000 	ldr.w	r4, [ip]
 801a1ea:	fa2f f99e 	sxtb16	r9, lr, ror #8
 801a1ee:	fa2f fe8e 	sxtb16	lr, lr
 801a1f2:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801a1f6:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801a1fa:	fa2f f994 	sxtb16	r9, r4, ror #8
 801a1fe:	f8c1 e000 	str.w	lr, [r1]
 801a202:	f8c1 a008 	str.w	sl, [r1, #8]
 801a206:	fa2f f484 	sxtb16	r4, r4
 801a20a:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 801a20e:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 801a212:	f8c1 e00c 	str.w	lr, [r1, #12]
 801a216:	604c      	str	r4, [r1, #4]
 801a218:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801a21c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a220:	fa2f f99e 	sxtb16	r9, lr, ror #8
 801a224:	fa2f fe8e 	sxtb16	lr, lr
 801a228:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801a22c:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801a230:	fa2f f994 	sxtb16	r9, r4, ror #8
 801a234:	f8c1 e010 	str.w	lr, [r1, #16]
 801a238:	f8c1 a018 	str.w	sl, [r1, #24]
 801a23c:	fa2f f484 	sxtb16	r4, r4
 801a240:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 801a244:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 801a248:	f8c1 e01c 	str.w	lr, [r1, #28]
 801a24c:	614c      	str	r4, [r1, #20]
 801a24e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 801a252:	f8dc 4008 	ldr.w	r4, [ip, #8]
 801a256:	fa2f f99e 	sxtb16	r9, lr, ror #8
 801a25a:	fa2f fe8e 	sxtb16	lr, lr
 801a25e:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801a262:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801a266:	fa2f f994 	sxtb16	r9, r4, ror #8
 801a26a:	3010      	adds	r0, #16
 801a26c:	f10c 0c10 	add.w	ip, ip, #16
 801a270:	f8c1 e020 	str.w	lr, [r1, #32]
 801a274:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 801a278:	fa2f f484 	sxtb16	r4, r4
 801a27c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 801a280:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 801a284:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 801a288:	624c      	str	r4, [r1, #36]	; 0x24
 801a28a:	f850 ec04 	ldr.w	lr, [r0, #-4]
 801a28e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 801a292:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 801a296:	fa2f fe8e 	sxtb16	lr, lr
 801a29a:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 801a29e:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 801a2a2:	fa2f fa94 	sxtb16	sl, r4, ror #8
 801a2a6:	3510      	adds	r5, #16
 801a2a8:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 801a2ac:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 801a2b0:	3140      	adds	r1, #64	; 0x40
 801a2b2:	42bd      	cmp	r5, r7
 801a2b4:	fa2f f484 	sxtb16	r4, r4
 801a2b8:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 801a2bc:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 801a2c0:	f841 ec04 	str.w	lr, [r1, #-4]
 801a2c4:	f841 4c0c 	str.w	r4, [r1, #-12]
 801a2c8:	dd8b      	ble.n	801a1e2 <st_int8_to16_dual+0x1e>
 801a2ca:	42ae      	cmp	r6, r5
 801a2cc:	db1e      	blt.n	801a30c <st_int8_to16_dual+0x148>
 801a2ce:	f850 4b04 	ldr.w	r4, [r0], #4
 801a2d2:	f85c eb04 	ldr.w	lr, [ip], #4
 801a2d6:	fa2f fa94 	sxtb16	sl, r4, ror #8
 801a2da:	fa2f f484 	sxtb16	r4, r4
 801a2de:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 801a2e2:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 801a2e6:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 801a2ea:	3504      	adds	r5, #4
 801a2ec:	600c      	str	r4, [r1, #0]
 801a2ee:	f8c1 9008 	str.w	r9, [r1, #8]
 801a2f2:	3110      	adds	r1, #16
 801a2f4:	42b5      	cmp	r5, r6
 801a2f6:	fa2f fe8e 	sxtb16	lr, lr
 801a2fa:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 801a2fe:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 801a302:	f841 4c04 	str.w	r4, [r1, #-4]
 801a306:	f841 ec0c 	str.w	lr, [r1, #-12]
 801a30a:	dde0      	ble.n	801a2ce <st_int8_to16_dual+0x10a>
 801a30c:	42aa      	cmp	r2, r5
 801a30e:	dd40      	ble.n	801a392 <st_int8_to16_dual+0x1ce>
 801a310:	1b55      	subs	r5, r2, r5
 801a312:	1d0c      	adds	r4, r1, #4
 801a314:	46e6      	mov	lr, ip
 801a316:	eb00 0a05 	add.w	sl, r0, r5
 801a31a:	f910 9b01 	ldrsb.w	r9, [r0], #1
 801a31e:	3404      	adds	r4, #4
 801a320:	f824 9c08 	strh.w	r9, [r4, #-8]
 801a324:	4550      	cmp	r0, sl
 801a326:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 801a32a:	f824 9c06 	strh.w	r9, [r4, #-6]
 801a32e:	d1f4      	bne.n	801a31a <st_int8_to16_dual+0x156>
 801a330:	44ac      	add	ip, r5
 801a332:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801a336:	3b01      	subs	r3, #1
 801a338:	eb0a 0002 	add.w	r0, sl, r2
 801a33c:	4494      	add	ip, r2
 801a33e:	b29b      	uxth	r3, r3
 801a340:	2b00      	cmp	r3, #0
 801a342:	f47f af4a 	bne.w	801a1da <st_int8_to16_dual+0x16>
 801a346:	f018 0f01 	tst.w	r8, #1
 801a34a:	d020      	beq.n	801a38e <st_int8_to16_dual+0x1ca>
 801a34c:	1f17      	subs	r7, r2, #4
 801a34e:	f04f 0400 	mov.w	r4, #0
 801a352:	d411      	bmi.n	801a378 <st_int8_to16_dual+0x1b4>
 801a354:	f850 3b04 	ldr.w	r3, [r0], #4
 801a358:	fa2f f593 	sxtb16	r5, r3, ror #8
 801a35c:	3404      	adds	r4, #4
 801a35e:	3108      	adds	r1, #8
 801a360:	fa2f f383 	sxtb16	r3, r3
 801a364:	42a7      	cmp	r7, r4
 801a366:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 801a36a:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 801a36e:	f841 6c04 	str.w	r6, [r1, #-4]
 801a372:	f841 3c08 	str.w	r3, [r1, #-8]
 801a376:	daed      	bge.n	801a354 <st_int8_to16_dual+0x190>
 801a378:	42a2      	cmp	r2, r4
 801a37a:	dd08      	ble.n	801a38e <st_int8_to16_dual+0x1ca>
 801a37c:	1b13      	subs	r3, r2, r4
 801a37e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a382:	f910 2b01 	ldrsb.w	r2, [r0], #1
 801a386:	f821 2b02 	strh.w	r2, [r1], #2
 801a38a:	428b      	cmp	r3, r1
 801a38c:	d1f9      	bne.n	801a382 <st_int8_to16_dual+0x1be>
 801a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a392:	4682      	mov	sl, r0
 801a394:	e7cf      	b.n	801a336 <st_int8_to16_dual+0x172>
 801a396:	bf00      	nop

0801a398 <weights_2channels_prefetch>:
 801a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	b087      	sub	sp, #28
 801a3a0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801a3a4:	9302      	str	r3, [sp, #8]
 801a3a6:	f340 80e6 	ble.w	801a576 <weights_2channels_prefetch+0x1de>
 801a3aa:	f1a8 0310 	sub.w	r3, r8, #16
 801a3ae:	f1a8 0403 	sub.w	r4, r8, #3
 801a3b2:	f04f 0b00 	mov.w	fp, #0
 801a3b6:	091b      	lsrs	r3, r3, #4
 801a3b8:	9403      	str	r4, [sp, #12]
 801a3ba:	f1a8 0404 	sub.w	r4, r8, #4
 801a3be:	3301      	adds	r3, #1
 801a3c0:	9405      	str	r4, [sp, #20]
 801a3c2:	011c      	lsls	r4, r3, #4
 801a3c4:	019b      	lsls	r3, r3, #6
 801a3c6:	9400      	str	r4, [sp, #0]
 801a3c8:	9304      	str	r3, [sp, #16]
 801a3ca:	f1b8 0f0f 	cmp.w	r8, #15
 801a3ce:	f340 80d7 	ble.w	801a580 <weights_2channels_prefetch+0x1e8>
 801a3d2:	9b00      	ldr	r3, [sp, #0]
 801a3d4:	460d      	mov	r5, r1
 801a3d6:	18c6      	adds	r6, r0, r3
 801a3d8:	4613      	mov	r3, r2
 801a3da:	6804      	ldr	r4, [r0, #0]
 801a3dc:	3010      	adds	r0, #16
 801a3de:	682f      	ldr	r7, [r5, #0]
 801a3e0:	3340      	adds	r3, #64	; 0x40
 801a3e2:	fa2f fc84 	sxtb16	ip, r4
 801a3e6:	3510      	adds	r5, #16
 801a3e8:	f843 cc40 	str.w	ip, [r3, #-64]
 801a3ec:	ea4f 2434 	mov.w	r4, r4, ror #8
 801a3f0:	42b0      	cmp	r0, r6
 801a3f2:	fa2f f484 	sxtb16	r4, r4
 801a3f6:	f843 4c3c 	str.w	r4, [r3, #-60]
 801a3fa:	ea4f 2437 	mov.w	r4, r7, ror #8
 801a3fe:	fa2f f787 	sxtb16	r7, r7
 801a402:	fa2f f484 	sxtb16	r4, r4
 801a406:	f843 7c38 	str.w	r7, [r3, #-56]
 801a40a:	f843 4c34 	str.w	r4, [r3, #-52]
 801a40e:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 801a412:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 801a416:	ea4f 2c34 	mov.w	ip, r4, ror #8
 801a41a:	fa2f f484 	sxtb16	r4, r4
 801a41e:	fa2f fc8c 	sxtb16	ip, ip
 801a422:	f843 4c28 	str.w	r4, [r3, #-40]
 801a426:	f843 cc24 	str.w	ip, [r3, #-36]
 801a42a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801a42e:	fa2f f787 	sxtb16	r7, r7
 801a432:	f843 7c30 	str.w	r7, [r3, #-48]
 801a436:	fa2f f78c 	sxtb16	r7, ip
 801a43a:	f843 7c2c 	str.w	r7, [r3, #-44]
 801a43e:	f850 7c08 	ldr.w	r7, [r0, #-8]
 801a442:	f855 4c08 	ldr.w	r4, [r5, #-8]
 801a446:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801a44a:	fa2f f787 	sxtb16	r7, r7
 801a44e:	fa2f fc8c 	sxtb16	ip, ip
 801a452:	f843 7c20 	str.w	r7, [r3, #-32]
 801a456:	ea4f 2734 	mov.w	r7, r4, ror #8
 801a45a:	f843 cc1c 	str.w	ip, [r3, #-28]
 801a45e:	fa2f f787 	sxtb16	r7, r7
 801a462:	fa2f f484 	sxtb16	r4, r4
 801a466:	f843 7c14 	str.w	r7, [r3, #-20]
 801a46a:	f843 4c18 	str.w	r4, [r3, #-24]
 801a46e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801a472:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a476:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801a47a:	fa2f f787 	sxtb16	r7, r7
 801a47e:	fa2f fc8c 	sxtb16	ip, ip
 801a482:	f843 7c10 	str.w	r7, [r3, #-16]
 801a486:	ea4f 2734 	mov.w	r7, r4, ror #8
 801a48a:	f843 cc0c 	str.w	ip, [r3, #-12]
 801a48e:	fa2f f787 	sxtb16	r7, r7
 801a492:	fa2f f484 	sxtb16	r4, r4
 801a496:	f843 7c04 	str.w	r7, [r3, #-4]
 801a49a:	f843 4c08 	str.w	r4, [r3, #-8]
 801a49e:	d19c      	bne.n	801a3da <weights_2channels_prefetch+0x42>
 801a4a0:	9b04      	ldr	r3, [sp, #16]
 801a4a2:	441a      	add	r2, r3
 801a4a4:	9b00      	ldr	r3, [sp, #0]
 801a4a6:	4419      	add	r1, r3
 801a4a8:	469e      	mov	lr, r3
 801a4aa:	9b03      	ldr	r3, [sp, #12]
 801a4ac:	4573      	cmp	r3, lr
 801a4ae:	dd65      	ble.n	801a57c <weights_2channels_prefetch+0x1e4>
 801a4b0:	9b05      	ldr	r3, [sp, #20]
 801a4b2:	4614      	mov	r4, r2
 801a4b4:	460f      	mov	r7, r1
 801a4b6:	eba3 090e 	sub.w	r9, r3, lr
 801a4ba:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801a4be:	f109 0a01 	add.w	sl, r9, #1
 801a4c2:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801a4c6:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 801a4ca:	9301      	str	r3, [sp, #4]
 801a4cc:	f856 3b04 	ldr.w	r3, [r6], #4
 801a4d0:	3410      	adds	r4, #16
 801a4d2:	f857 5b04 	ldr.w	r5, [r7], #4
 801a4d6:	fa2f fc83 	sxtb16	ip, r3
 801a4da:	4286      	cmp	r6, r0
 801a4dc:	ea4f 2333 	mov.w	r3, r3, ror #8
 801a4e0:	fa2f f383 	sxtb16	r3, r3
 801a4e4:	f844 3c0c 	str.w	r3, [r4, #-12]
 801a4e8:	ea4f 2335 	mov.w	r3, r5, ror #8
 801a4ec:	fa2f f585 	sxtb16	r5, r5
 801a4f0:	f844 cc10 	str.w	ip, [r4, #-16]
 801a4f4:	f844 5c08 	str.w	r5, [r4, #-8]
 801a4f8:	fa2f f383 	sxtb16	r3, r3
 801a4fc:	f844 3c04 	str.w	r3, [r4, #-4]
 801a500:	d1e4      	bne.n	801a4cc <weights_2channels_prefetch+0x134>
 801a502:	9b01      	ldr	r3, [sp, #4]
 801a504:	f10e 0e04 	add.w	lr, lr, #4
 801a508:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 801a50c:	4419      	add	r1, r3
 801a50e:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801a512:	45f0      	cmp	r8, lr
 801a514:	dd29      	ble.n	801a56a <weights_2channels_prefetch+0x1d2>
 801a516:	f990 3000 	ldrsb.w	r3, [r0]
 801a51a:	8013      	strh	r3, [r2, #0]
 801a51c:	f991 3000 	ldrsb.w	r3, [r1]
 801a520:	8053      	strh	r3, [r2, #2]
 801a522:	f10e 0301 	add.w	r3, lr, #1
 801a526:	4598      	cmp	r8, r3
 801a528:	dd19      	ble.n	801a55e <weights_2channels_prefetch+0x1c6>
 801a52a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801a52e:	8093      	strh	r3, [r2, #4]
 801a530:	f991 3001 	ldrsb.w	r3, [r1, #1]
 801a534:	80d3      	strh	r3, [r2, #6]
 801a536:	f10e 0302 	add.w	r3, lr, #2
 801a53a:	4598      	cmp	r8, r3
 801a53c:	dd0f      	ble.n	801a55e <weights_2channels_prefetch+0x1c6>
 801a53e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801a542:	8113      	strh	r3, [r2, #8]
 801a544:	f10e 0303 	add.w	r3, lr, #3
 801a548:	f991 4002 	ldrsb.w	r4, [r1, #2]
 801a54c:	4598      	cmp	r8, r3
 801a54e:	8154      	strh	r4, [r2, #10]
 801a550:	dd05      	ble.n	801a55e <weights_2channels_prefetch+0x1c6>
 801a552:	f990 3003 	ldrsb.w	r3, [r0, #3]
 801a556:	8193      	strh	r3, [r2, #12]
 801a558:	f991 3003 	ldrsb.w	r3, [r1, #3]
 801a55c:	81d3      	strh	r3, [r2, #14]
 801a55e:	eba8 0e0e 	sub.w	lr, r8, lr
 801a562:	4470      	add	r0, lr
 801a564:	4471      	add	r1, lr
 801a566:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 801a56a:	f10b 0b01 	add.w	fp, fp, #1
 801a56e:	9b02      	ldr	r3, [sp, #8]
 801a570:	455b      	cmp	r3, fp
 801a572:	f47f af2a 	bne.w	801a3ca <weights_2channels_prefetch+0x32>
 801a576:	b007      	add	sp, #28
 801a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a57c:	4630      	mov	r0, r6
 801a57e:	e7c8      	b.n	801a512 <weights_2channels_prefetch+0x17a>
 801a580:	4606      	mov	r6, r0
 801a582:	f04f 0e00 	mov.w	lr, #0
 801a586:	e790      	b.n	801a4aa <weights_2channels_prefetch+0x112>

0801a588 <st_sssa8_ch_fullW_prefetch>:
 801a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a58c:	b087      	sub	sp, #28
 801a58e:	461c      	mov	r4, r3
 801a590:	4680      	mov	r8, r0
 801a592:	4613      	mov	r3, r2
 801a594:	104f      	asrs	r7, r1, #1
 801a596:	4620      	mov	r0, r4
 801a598:	9103      	str	r1, [sp, #12]
 801a59a:	9704      	str	r7, [sp, #16]
 801a59c:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 801a5a0:	eb08 0402 	add.w	r4, r8, r2
 801a5a4:	d020      	beq.n	801a5e8 <st_sssa8_ch_fullW_prefetch+0x60>
 801a5a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a5a8:	4646      	mov	r6, r8
 801a5aa:	4655      	mov	r5, sl
 801a5ac:	f8cd 8014 	str.w	r8, [sp, #20]
 801a5b0:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801a5b4:	4680      	mov	r8, r0
 801a5b6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801a5ba:	469a      	mov	sl, r3
 801a5bc:	462a      	mov	r2, r5
 801a5be:	4621      	mov	r1, r4
 801a5c0:	4630      	mov	r0, r6
 801a5c2:	4653      	mov	r3, sl
 801a5c4:	f8cd 8000 	str.w	r8, [sp]
 801a5c8:	445d      	add	r5, fp
 801a5ca:	f7ff fee5 	bl	801a398 <weights_2channels_prefetch>
 801a5ce:	3f01      	subs	r7, #1
 801a5d0:	444c      	add	r4, r9
 801a5d2:	444e      	add	r6, r9
 801a5d4:	d1f2      	bne.n	801a5bc <st_sssa8_ch_fullW_prefetch+0x34>
 801a5d6:	9b04      	ldr	r3, [sp, #16]
 801a5d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a5dc:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801a5e0:	fb03 8809 	mla	r8, r3, r9, r8
 801a5e4:	fb03 aa0b 	mla	sl, r3, fp, sl
 801a5e8:	9b03      	ldr	r3, [sp, #12]
 801a5ea:	07db      	lsls	r3, r3, #31
 801a5ec:	d509      	bpl.n	801a602 <st_sssa8_ch_fullW_prefetch+0x7a>
 801a5ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	dd06      	ble.n	801a602 <st_sssa8_ch_fullW_prefetch+0x7a>
 801a5f4:	4443      	add	r3, r8
 801a5f6:	f918 2b01 	ldrsb.w	r2, [r8], #1
 801a5fa:	4543      	cmp	r3, r8
 801a5fc:	f82a 2b02 	strh.w	r2, [sl], #2
 801a600:	d1f9      	bne.n	801a5f6 <st_sssa8_ch_fullW_prefetch+0x6e>
 801a602:	b007      	add	sp, #28
 801a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a608 <st_sssa8_ch_nn_mat_mult_nt_t>:
 801a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a60c:	b0b5      	sub	sp, #212	; 0xd4
 801a60e:	9027      	str	r0, [sp, #156]	; 0x9c
 801a610:	912d      	str	r1, [sp, #180]	; 0xb4
 801a612:	9233      	str	r2, [sp, #204]	; 0xcc
 801a614:	932e      	str	r3, [sp, #184]	; 0xb8
 801a616:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 801a61a:	2c00      	cmp	r4, #0
 801a61c:	bf18      	it	ne
 801a61e:	4620      	movne	r0, r4
 801a620:	9c41      	ldr	r4, [sp, #260]	; 0x104
 801a622:	2c01      	cmp	r4, #1
 801a624:	9045      	str	r0, [sp, #276]	; 0x114
 801a626:	f340 826b 	ble.w	801ab00 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 801a62a:	9c42      	ldr	r4, [sp, #264]	; 0x108
 801a62c:	461e      	mov	r6, r3
 801a62e:	4694      	mov	ip, r2
 801a630:	9f42      	ldr	r7, [sp, #264]	; 0x108
 801a632:	f1a4 0310 	sub.w	r3, r4, #16
 801a636:	9c41      	ldr	r4, [sp, #260]	; 0x104
 801a638:	468e      	mov	lr, r1
 801a63a:	9d40      	ldr	r5, [sp, #256]	; 0x100
 801a63c:	1ea0      	subs	r0, r4, #2
 801a63e:	0919      	lsrs	r1, r3, #4
 801a640:	f023 030f 	bic.w	r3, r3, #15
 801a644:	9c42      	ldr	r4, [sp, #264]	; 0x108
 801a646:	f020 0201 	bic.w	r2, r0, #1
 801a64a:	9032      	str	r0, [sp, #200]	; 0xc8
 801a64c:	4630      	mov	r0, r6
 801a64e:	3101      	adds	r1, #1
 801a650:	4432      	add	r2, r6
 801a652:	10a4      	asrs	r4, r4, #2
 801a654:	106d      	asrs	r5, r5, #1
 801a656:	1cd6      	adds	r6, r2, #3
 801a658:	f107 0214 	add.w	r2, r7, #20
 801a65c:	942f      	str	r4, [sp, #188]	; 0xbc
 801a65e:	18d3      	adds	r3, r2, r3
 801a660:	9629      	str	r6, [sp, #164]	; 0xa4
 801a662:	9e41      	ldr	r6, [sp, #260]	; 0x104
 801a664:	9318      	str	r3, [sp, #96]	; 0x60
 801a666:	f06f 0303 	mvn.w	r3, #3
 801a66a:	0076      	lsls	r6, r6, #1
 801a66c:	952a      	str	r5, [sp, #168]	; 0xa8
 801a66e:	1bdb      	subs	r3, r3, r7
 801a670:	9613      	str	r6, [sp, #76]	; 0x4c
 801a672:	9319      	str	r3, [sp, #100]	; 0x64
 801a674:	f1a7 030f 	sub.w	r3, r7, #15
 801a678:	9312      	str	r3, [sp, #72]	; 0x48
 801a67a:	f007 0303 	and.w	r3, r7, #3
 801a67e:	9330      	str	r3, [sp, #192]	; 0xc0
 801a680:	9b40      	ldr	r3, [sp, #256]	; 0x100
 801a682:	f003 0301 	and.w	r3, r3, #1
 801a686:	9328      	str	r3, [sp, #160]	; 0xa0
 801a688:	007b      	lsls	r3, r7, #1
 801a68a:	9326      	str	r3, [sp, #152]	; 0x98
 801a68c:	00bb      	lsls	r3, r7, #2
 801a68e:	932c      	str	r3, [sp, #176]	; 0xb0
 801a690:	1f3b      	subs	r3, r7, #4
 801a692:	9317      	str	r3, [sp, #92]	; 0x5c
 801a694:	1c43      	adds	r3, r0, #1
 801a696:	931b      	str	r3, [sp, #108]	; 0x6c
 801a698:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 801a69a:	3302      	adds	r3, #2
 801a69c:	9321      	str	r3, [sp, #132]	; 0x84
 801a69e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801a6a0:	3304      	adds	r3, #4
 801a6a2:	931f      	str	r3, [sp, #124]	; 0x7c
 801a6a4:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801a6a6:	3304      	adds	r3, #4
 801a6a8:	9320      	str	r3, [sp, #128]	; 0x80
 801a6aa:	4663      	mov	r3, ip
 801a6ac:	3304      	adds	r3, #4
 801a6ae:	9322      	str	r3, [sp, #136]	; 0x88
 801a6b0:	010b      	lsls	r3, r1, #4
 801a6b2:	9316      	str	r3, [sp, #88]	; 0x58
 801a6b4:	018b      	lsls	r3, r1, #6
 801a6b6:	9325      	str	r3, [sp, #148]	; 0x94
 801a6b8:	0123      	lsls	r3, r4, #4
 801a6ba:	9331      	str	r3, [sp, #196]	; 0xc4
 801a6bc:	fb06 f305 	mul.w	r3, r6, r5
 801a6c0:	932b      	str	r3, [sp, #172]	; 0xac
 801a6c2:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 801a6c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a6c8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a6ca:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 801a6ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a6d2:	3901      	subs	r1, #1
 801a6d4:	2b15      	cmp	r3, #21
 801a6d6:	931a      	str	r3, [sp, #104]	; 0x68
 801a6d8:	920a      	str	r2, [sp, #40]	; 0x28
 801a6da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a6dc:	9101      	str	r1, [sp, #4]
 801a6de:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a6e2:	6812      	ldr	r2, [r2, #0]
 801a6e4:	910d      	str	r1, [sp, #52]	; 0x34
 801a6e6:	920e      	str	r2, [sp, #56]	; 0x38
 801a6e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a6ea:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a6ee:	6812      	ldr	r2, [r2, #0]
 801a6f0:	910f      	str	r1, [sp, #60]	; 0x3c
 801a6f2:	9210      	str	r2, [sp, #64]	; 0x40
 801a6f4:	f300 8402 	bgt.w	801aefc <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	bfcc      	ite	gt
 801a6fc:	2300      	movgt	r3, #0
 801a6fe:	2301      	movle	r3, #1
 801a700:	425b      	negs	r3, r3
 801a702:	9308      	str	r3, [sp, #32]
 801a704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a706:	2b15      	cmp	r3, #21
 801a708:	f300 82c4 	bgt.w	801ac94 <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	bfcc      	ite	gt
 801a710:	2300      	movgt	r3, #0
 801a712:	2301      	movle	r3, #1
 801a714:	425b      	negs	r3, r3
 801a716:	9309      	str	r3, [sp, #36]	; 0x24
 801a718:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	f000 82c0 	beq.w	801aca0 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 801a720:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801a722:	2b00      	cmp	r3, #0
 801a724:	f040 8397 	bne.w	801ae56 <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 801a728:	461a      	mov	r2, r3
 801a72a:	4619      	mov	r1, r3
 801a72c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801a72e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a732:	18cb      	adds	r3, r1, r3
 801a734:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a736:	930c      	str	r3, [sp, #48]	; 0x30
 801a738:	6803      	ldr	r3, [r0, #0]
 801a73a:	18d3      	adds	r3, r2, r3
 801a73c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a73e:	2900      	cmp	r1, #0
 801a740:	f000 8510 	beq.w	801b164 <st_sssa8_ch_nn_mat_mult_nt_t+0xb5c>
 801a744:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a746:	2001      	movs	r0, #1
 801a748:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a74a:	1e93      	subs	r3, r2, #2
 801a74c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801a750:	9104      	str	r1, [sp, #16]
 801a752:	fa00 f303 	lsl.w	r3, r0, r3
 801a756:	931c      	str	r3, [sp, #112]	; 0x70
 801a758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a75a:	3b02      	subs	r3, #2
 801a75c:	fa00 f303 	lsl.w	r3, r0, r3
 801a760:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a762:	931d      	str	r3, [sp, #116]	; 0x74
 801a764:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801a766:	3b03      	subs	r3, #3
 801a768:	9311      	str	r3, [sp, #68]	; 0x44
 801a76a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a76c:	4418      	add	r0, r3
 801a76e:	9303      	str	r3, [sp, #12]
 801a770:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801a772:	9002      	str	r0, [sp, #8]
 801a774:	3304      	adds	r3, #4
 801a776:	9845      	ldr	r0, [sp, #276]	; 0x114
 801a778:	9315      	str	r3, [sp, #84]	; 0x54
 801a77a:	1e53      	subs	r3, r2, #1
 801a77c:	4420      	add	r0, r4
 801a77e:	931e      	str	r3, [sp, #120]	; 0x78
 801a780:	f1c2 0301 	rsb	r3, r2, #1
 801a784:	9014      	str	r0, [sp, #80]	; 0x50
 801a786:	9324      	str	r3, [sp, #144]	; 0x90
 801a788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	f340 8279 	ble.w	801ac82 <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 801a790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a792:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a794:	eb0b 0703 	add.w	r7, fp, r3
 801a798:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a79a:	f8cd b014 	str.w	fp, [sp, #20]
 801a79e:	4604      	mov	r4, r0
 801a7a0:	445b      	add	r3, fp
 801a7a2:	9e45      	ldr	r6, [sp, #276]	; 0x114
 801a7a4:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 801a7a8:	9301      	str	r3, [sp, #4]
 801a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7ac:	4619      	mov	r1, r3
 801a7ae:	f85b c007 	ldr.w	ip, [fp, r7]
 801a7b2:	eb0b 0e07 	add.w	lr, fp, r7
 801a7b6:	6832      	ldr	r2, [r6, #0]
 801a7b8:	f8d6 9004 	ldr.w	r9, [r6, #4]
 801a7bc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801a7c0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801a7c4:	fa2f f58c 	sxtb16	r5, ip
 801a7c8:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801a7cc:	fb25 0002 	smlad	r0, r5, r2, r0
 801a7d0:	fb2c 0009 	smlad	r0, ip, r9, r0
 801a7d4:	fb25 350a 	smlad	r5, r5, sl, r3
 801a7d8:	fb2c 5508 	smlad	r5, ip, r8, r5
 801a7dc:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801a7e0:	fa2f fc83 	sxtb16	ip, r3
 801a7e4:	fa2f f393 	sxtb16	r3, r3, ror #8
 801a7e8:	fb2c 4202 	smlad	r2, ip, r2, r4
 801a7ec:	fb2c 110a 	smlad	r1, ip, sl, r1
 801a7f0:	fb23 2209 	smlad	r2, r3, r9, r2
 801a7f4:	f8d6 9010 	ldr.w	r9, [r6, #16]
 801a7f8:	6974      	ldr	r4, [r6, #20]
 801a7fa:	fb23 1808 	smlad	r8, r3, r8, r1
 801a7fe:	f8de 1004 	ldr.w	r1, [lr, #4]
 801a802:	69b3      	ldr	r3, [r6, #24]
 801a804:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 801a808:	fa2f fc81 	sxtb16	ip, r1
 801a80c:	fa2f f191 	sxtb16	r1, r1, ror #8
 801a810:	fb2c 0009 	smlad	r0, ip, r9, r0
 801a814:	fb21 0004 	smlad	r0, r1, r4, r0
 801a818:	fb2c 5c03 	smlad	ip, ip, r3, r5
 801a81c:	fb21 cc0a 	smlad	ip, r1, sl, ip
 801a820:	683d      	ldr	r5, [r7, #0]
 801a822:	fa2f f185 	sxtb16	r1, r5
 801a826:	fa2f f595 	sxtb16	r5, r5, ror #8
 801a82a:	fb21 2909 	smlad	r9, r1, r9, r2
 801a82e:	fb21 8803 	smlad	r8, r1, r3, r8
 801a832:	fb25 9904 	smlad	r9, r5, r4, r9
 801a836:	6a34      	ldr	r4, [r6, #32]
 801a838:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a83a:	fb25 8a0a 	smlad	sl, r5, sl, r8
 801a83e:	f8de 2008 	ldr.w	r2, [lr, #8]
 801a842:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 801a846:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 801a848:	fa2f f182 	sxtb16	r1, r2
 801a84c:	fa2f f292 	sxtb16	r2, r2, ror #8
 801a850:	fb21 0004 	smlad	r0, r1, r4, r0
 801a854:	fb22 0003 	smlad	r0, r2, r3, r0
 801a858:	fb21 c108 	smlad	r1, r1, r8, ip
 801a85c:	fb22 1205 	smlad	r2, r2, r5, r1
 801a860:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801a864:	fa2f f18c 	sxtb16	r1, ip
 801a868:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801a86c:	fb21 9404 	smlad	r4, r1, r4, r9
 801a870:	fb21 aa08 	smlad	sl, r1, r8, sl
 801a874:	fb2c 4903 	smlad	r9, ip, r3, r4
 801a878:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 801a87c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 801a87e:	fb2c a505 	smlad	r5, ip, r5, sl
 801a882:	f8de 300c 	ldr.w	r3, [lr, #12]
 801a886:	3640      	adds	r6, #64	; 0x40
 801a888:	f856 ac08 	ldr.w	sl, [r6, #-8]
 801a88c:	f856 ec04 	ldr.w	lr, [r6, #-4]
 801a890:	fa2f f183 	sxtb16	r1, r3
 801a894:	fa2f f393 	sxtb16	r3, r3, ror #8
 801a898:	fb21 0008 	smlad	r0, r1, r8, r0
 801a89c:	fb23 0004 	smlad	r0, r3, r4, r0
 801a8a0:	fb21 220a 	smlad	r2, r1, sl, r2
 801a8a4:	fb23 230e 	smlad	r3, r3, lr, r2
 801a8a8:	68b9      	ldr	r1, [r7, #8]
 801a8aa:	fa2f f281 	sxtb16	r2, r1
 801a8ae:	fa2f f191 	sxtb16	r1, r1, ror #8
 801a8b2:	fb22 9908 	smlad	r9, r2, r8, r9
 801a8b6:	fb22 550a 	smlad	r5, r2, sl, r5
 801a8ba:	fb21 9404 	smlad	r4, r1, r4, r9
 801a8be:	fb21 510e 	smlad	r1, r1, lr, r5
 801a8c2:	3710      	adds	r7, #16
 801a8c4:	9a01      	ldr	r2, [sp, #4]
 801a8c6:	4297      	cmp	r7, r2
 801a8c8:	f47f af71 	bne.w	801a7ae <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 801a8cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a8ce:	f8dd b014 	ldr.w	fp, [sp, #20]
 801a8d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a8d4:	4692      	mov	sl, r2
 801a8d6:	4493      	add	fp, r2
 801a8d8:	9501      	str	r5, [sp, #4]
 801a8da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8dc:	4592      	cmp	sl, r2
 801a8de:	f280 81ce 	bge.w	801ac7e <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 801a8e2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801a8e4:	f8cd a01c 	str.w	sl, [sp, #28]
 801a8e8:	eba5 020a 	sub.w	r2, r5, sl
 801a8ec:	46aa      	mov	sl, r5
 801a8ee:	0892      	lsrs	r2, r2, #2
 801a8f0:	4616      	mov	r6, r2
 801a8f2:	9206      	str	r2, [sp, #24]
 801a8f4:	9a01      	ldr	r2, [sp, #4]
 801a8f6:	3601      	adds	r6, #1
 801a8f8:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 801a8fc:	9605      	str	r6, [sp, #20]
 801a8fe:	f8d2 8000 	ldr.w	r8, [r2]
 801a902:	3210      	adds	r2, #16
 801a904:	f85b 5b04 	ldr.w	r5, [fp], #4
 801a908:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 801a90c:	f852 ec08 	ldr.w	lr, [r2, #-8]
 801a910:	f852 7c04 	ldr.w	r7, [r2, #-4]
 801a914:	fa2f f685 	sxtb16	r6, r5
 801a918:	fa2f f595 	sxtb16	r5, r5, ror #8
 801a91c:	fb26 0008 	smlad	r0, r6, r8, r0
 801a920:	fb25 000c 	smlad	r0, r5, ip, r0
 801a924:	fb26 330e 	smlad	r3, r6, lr, r3
 801a928:	fb25 3307 	smlad	r3, r5, r7, r3
 801a92c:	f85b 500a 	ldr.w	r5, [fp, sl]
 801a930:	fa2f f685 	sxtb16	r6, r5
 801a934:	fa2f f595 	sxtb16	r5, r5, ror #8
 801a938:	fb26 4408 	smlad	r4, r6, r8, r4
 801a93c:	fb26 110e 	smlad	r1, r6, lr, r1
 801a940:	fb25 440c 	smlad	r4, r5, ip, r4
 801a944:	fb25 1107 	smlad	r1, r5, r7, r1
 801a948:	45cb      	cmp	fp, r9
 801a94a:	d1d8      	bne.n	801a8fe <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 801a94c:	9a01      	ldr	r2, [sp, #4]
 801a94e:	9d05      	ldr	r5, [sp, #20]
 801a950:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a954:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 801a958:	9d06      	ldr	r5, [sp, #24]
 801a95a:	9201      	str	r2, [sp, #4]
 801a95c:	f10a 0204 	add.w	r2, sl, #4
 801a960:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 801a964:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801a966:	4552      	cmp	r2, sl
 801a968:	dd58      	ble.n	801aa1c <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 801a96a:	9f01      	ldr	r7, [sp, #4]
 801a96c:	f999 2000 	ldrsb.w	r2, [r9]
 801a970:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 801a974:	f9b7 6000 	ldrsh.w	r6, [r7]
 801a978:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a97c:	fb16 0002 	smlabb	r0, r6, r2, r0
 801a980:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801a982:	f919 2002 	ldrsb.w	r2, [r9, r2]
 801a986:	fb15 1102 	smlabb	r1, r5, r2, r1
 801a98a:	9d42      	ldr	r5, [sp, #264]	; 0x108
 801a98c:	fb16 4402 	smlabb	r4, r6, r2, r4
 801a990:	f10a 0201 	add.w	r2, sl, #1
 801a994:	4295      	cmp	r5, r2
 801a996:	dd3d      	ble.n	801aa14 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801a998:	eb09 0205 	add.w	r2, r9, r5
 801a99c:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 801a9a0:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 801a9a4:	f992 2001 	ldrsb.w	r2, [r2, #1]
 801a9a8:	fb16 4402 	smlabb	r4, r6, r2, r4
 801a9ac:	fb15 1102 	smlabb	r1, r5, r2, r1
 801a9b0:	f999 2001 	ldrsb.w	r2, [r9, #1]
 801a9b4:	fb16 0002 	smlabb	r0, r6, r2, r0
 801a9b8:	9e42      	ldr	r6, [sp, #264]	; 0x108
 801a9ba:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a9be:	f10a 0202 	add.w	r2, sl, #2
 801a9c2:	f109 0502 	add.w	r5, r9, #2
 801a9c6:	4296      	cmp	r6, r2
 801a9c8:	dd24      	ble.n	801aa14 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801a9ca:	57aa      	ldrsb	r2, [r5, r6]
 801a9cc:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 801a9d0:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 801a9d4:	fb16 4402 	smlabb	r4, r6, r2, r4
 801a9d8:	fb15 1102 	smlabb	r1, r5, r2, r1
 801a9dc:	f999 2002 	ldrsb.w	r2, [r9, #2]
 801a9e0:	fb16 0002 	smlabb	r0, r6, r2, r0
 801a9e4:	9e42      	ldr	r6, [sp, #264]	; 0x108
 801a9e6:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a9ea:	f10a 0203 	add.w	r2, sl, #3
 801a9ee:	f109 0503 	add.w	r5, r9, #3
 801a9f2:	4296      	cmp	r6, r2
 801a9f4:	dd0e      	ble.n	801aa14 <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 801a9f6:	57ad      	ldrsb	r5, [r5, r6]
 801a9f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a9fc:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 801aa00:	fb12 4405 	smlabb	r4, r2, r5, r4
 801aa04:	fb16 1105 	smlabb	r1, r6, r5, r1
 801aa08:	f999 5003 	ldrsb.w	r5, [r9, #3]
 801aa0c:	fb12 0005 	smlabb	r0, r2, r5, r0
 801aa10:	fb16 3305 	smlabb	r3, r6, r5, r3
 801aa14:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801aa16:	eba2 020a 	sub.w	r2, r2, sl
 801aa1a:	4491      	add	r9, r2
 801aa1c:	9a08      	ldr	r2, [sp, #32]
 801aa1e:	2a00      	cmp	r2, #0
 801aa20:	f040 80dd 	bne.w	801abde <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 801aa24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aa26:	0040      	lsls	r0, r0, #1
 801aa28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801aa2a:	0064      	lsls	r4, r4, #1
 801aa2c:	fb50 5002 	smmla	r0, r0, r2, r5
 801aa30:	fb54 5402 	smmla	r4, r4, r2, r5
 801aa34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801aa36:	4110      	asrs	r0, r2
 801aa38:	f300 0007 	ssat	r0, #8, r0
 801aa3c:	9d03      	ldr	r5, [sp, #12]
 801aa3e:	4114      	asrs	r4, r2
 801aa40:	f805 0c01 	strb.w	r0, [r5, #-1]
 801aa44:	f304 0407 	ssat	r4, #8, r4
 801aa48:	9a02      	ldr	r2, [sp, #8]
 801aa4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801aa4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa50:	2a00      	cmp	r2, #0
 801aa52:	f040 80ac 	bne.w	801abae <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 801aa56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aa58:	005b      	lsls	r3, r3, #1
 801aa5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801aa5c:	0049      	lsls	r1, r1, #1
 801aa5e:	fb53 0302 	smmla	r3, r3, r2, r0
 801aa62:	fb51 0102 	smmla	r1, r1, r2, r0
 801aa66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa68:	4113      	asrs	r3, r2
 801aa6a:	f303 0307 	ssat	r3, #8, r3
 801aa6e:	9803      	ldr	r0, [sp, #12]
 801aa70:	4111      	asrs	r1, r2
 801aa72:	7003      	strb	r3, [r0, #0]
 801aa74:	f301 0107 	ssat	r1, #8, r1
 801aa78:	9b02      	ldr	r3, [sp, #8]
 801aa7a:	7019      	strb	r1, [r3, #0]
 801aa7c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801aa7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aa80:	eb09 0b03 	add.w	fp, r9, r3
 801aa84:	9b03      	ldr	r3, [sp, #12]
 801aa86:	4413      	add	r3, r2
 801aa88:	9303      	str	r3, [sp, #12]
 801aa8a:	9b02      	ldr	r3, [sp, #8]
 801aa8c:	4413      	add	r3, r2
 801aa8e:	9302      	str	r3, [sp, #8]
 801aa90:	9b04      	ldr	r3, [sp, #16]
 801aa92:	3b01      	subs	r3, #1
 801aa94:	9304      	str	r3, [sp, #16]
 801aa96:	f47f ae77 	bne.w	801a788 <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 801aa9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801aa9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801aa9e:	3b01      	subs	r3, #1
 801aaa0:	4413      	add	r3, r2
 801aaa2:	9301      	str	r3, [sp, #4]
 801aaa4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	f040 822b 	bne.w	801af02 <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 801aaac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801aaae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801aab0:	4413      	add	r3, r2
 801aab2:	9323      	str	r3, [sp, #140]	; 0x8c
 801aab4:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801aab6:	b11b      	cbz	r3, 801aac0 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 801aab8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801aaba:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801aabc:	4413      	add	r3, r2
 801aabe:	9345      	str	r3, [sp, #276]	; 0x114
 801aac0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801aac2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aac4:	3204      	adds	r2, #4
 801aac6:	3302      	adds	r3, #2
 801aac8:	9221      	str	r2, [sp, #132]	; 0x84
 801aaca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801aacc:	931b      	str	r3, [sp, #108]	; 0x6c
 801aace:	3208      	adds	r2, #8
 801aad0:	921f      	str	r2, [sp, #124]	; 0x7c
 801aad2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aad4:	3208      	adds	r2, #8
 801aad6:	9220      	str	r2, [sp, #128]	; 0x80
 801aad8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801aada:	3208      	adds	r2, #8
 801aadc:	9222      	str	r2, [sp, #136]	; 0x88
 801aade:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801aae0:	429a      	cmp	r2, r3
 801aae2:	f47f adf0 	bne.w	801a6c6 <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 801aae6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aae8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801aaea:	085a      	lsrs	r2, r3, #1
 801aaec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801aaee:	fb02 3303 	mla	r3, r2, r3, r3
 801aaf2:	3201      	adds	r2, #1
 801aaf4:	4419      	add	r1, r3
 801aaf6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801aaf8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801aafc:	912d      	str	r1, [sp, #180]	; 0xb4
 801aafe:	932e      	str	r3, [sp, #184]	; 0xb8
 801ab00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ab02:	07db      	lsls	r3, r3, #31
 801ab04:	d54f      	bpl.n	801aba6 <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 801ab06:	9b40      	ldr	r3, [sp, #256]	; 0x100
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	dd4c      	ble.n	801aba6 <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 801ab0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ab0e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 801ab12:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801ab16:	2200      	movs	r2, #0
 801ab18:	441c      	add	r4, r3
 801ab1a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ab1c:	f04f 0901 	mov.w	r9, #1
 801ab20:	4611      	mov	r1, r2
 801ab22:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 801ab26:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801ab28:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 801ab2c:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801ab2e:	f8cd e004 	str.w	lr, [sp, #4]
 801ab32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ab36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ab38:	4498      	add	r8, r3
 801ab3a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 801ab3c:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 801ab40:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 801ab44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ab46:	9e01      	ldr	r6, [sp, #4]
 801ab48:	f1be 0f00 	cmp.w	lr, #0
 801ab4c:	6837      	ldr	r7, [r6, #0]
 801ab4e:	dd0d      	ble.n	801ab6c <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 801ab50:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 801ab52:	eb03 0b0e 	add.w	fp, r3, lr
 801ab56:	f106 3cff 	add.w	ip, r6, #4294967295
 801ab5a:	f913 6b01 	ldrsb.w	r6, [r3], #1
 801ab5e:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 801ab62:	1a36      	subs	r6, r6, r0
 801ab64:	455b      	cmp	r3, fp
 801ab66:	fb0a 7706 	mla	r7, sl, r6, r7
 801ab6a:	d1f6      	bne.n	801ab5a <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 801ab6c:	f9b8 c000 	ldrsh.w	ip, [r8]
 801ab70:	f1bc 0f15 	cmp.w	ip, #21
 801ab74:	f340 82f9 	ble.w	801b16a <st_sssa8_ch_nn_mat_mult_nt_t+0xb62>
 801ab78:	f1ac 0a02 	sub.w	sl, ip, #2
 801ab7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab80:	682e      	ldr	r6, [r5, #0]
 801ab82:	fa09 fa0a 	lsl.w	sl, r9, sl
 801ab86:	fb57 a606 	smmla	r6, r7, r6, sl
 801ab8a:	fa46 fc0c 	asr.w	ip, r6, ip
 801ab8e:	6826      	ldr	r6, [r4, #0]
 801ab90:	4466      	add	r6, ip
 801ab92:	f306 0607 	ssat	r6, #8, r6
 801ab96:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801ab98:	54be      	strb	r6, [r7, r2]
 801ab9a:	9e41      	ldr	r6, [sp, #260]	; 0x104
 801ab9c:	3101      	adds	r1, #1
 801ab9e:	4432      	add	r2, r6
 801aba0:	9e40      	ldr	r6, [sp, #256]	; 0x100
 801aba2:	428e      	cmp	r6, r1
 801aba4:	d1cf      	bne.n	801ab46 <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 801aba6:	2000      	movs	r0, #0
 801aba8:	b035      	add	sp, #212	; 0xd4
 801abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abae:	3201      	adds	r2, #1
 801abb0:	d02e      	beq.n	801ac10 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 801abb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801abb4:	981d      	ldr	r0, [sp, #116]	; 0x74
 801abb6:	fb53 0302 	smmla	r3, r3, r2, r0
 801abba:	fb51 0102 	smmla	r1, r1, r2, r0
 801abbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801abc2:	3a01      	subs	r2, #1
 801abc4:	4113      	asrs	r3, r2
 801abc6:	4403      	add	r3, r0
 801abc8:	f303 0307 	ssat	r3, #8, r3
 801abcc:	4111      	asrs	r1, r2
 801abce:	9a03      	ldr	r2, [sp, #12]
 801abd0:	4401      	add	r1, r0
 801abd2:	7013      	strb	r3, [r2, #0]
 801abd4:	f301 0207 	ssat	r2, #8, r1
 801abd8:	9b02      	ldr	r3, [sp, #8]
 801abda:	701a      	strb	r2, [r3, #0]
 801abdc:	e74e      	b.n	801aa7c <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 801abde:	3201      	adds	r2, #1
 801abe0:	d031      	beq.n	801ac46 <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 801abe2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801abe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abe6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801abe8:	fb50 5002 	smmla	r0, r0, r2, r5
 801abec:	fb54 5402 	smmla	r4, r4, r2, r5
 801abf0:	4130      	asrs	r0, r6
 801abf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801abf4:	4410      	add	r0, r2
 801abf6:	f300 0007 	ssat	r0, #8, r0
 801abfa:	9d03      	ldr	r5, [sp, #12]
 801abfc:	4134      	asrs	r4, r6
 801abfe:	f805 0c01 	strb.w	r0, [r5, #-1]
 801ac02:	18a2      	adds	r2, r4, r2
 801ac04:	f302 0207 	ssat	r2, #8, r2
 801ac08:	9802      	ldr	r0, [sp, #8]
 801ac0a:	f800 2c01 	strb.w	r2, [r0, #-1]
 801ac0e:	e71e      	b.n	801aa4e <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 801ac10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac12:	f1c2 0201 	rsb	r2, r2, #1
 801ac16:	4093      	lsls	r3, r2
 801ac18:	f303 031f 	ssat	r3, #32, r3
 801ac1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ac1e:	fb53 f310 	smmulr	r3, r3, r0
 801ac22:	fa01 f202 	lsl.w	r2, r1, r2
 801ac26:	f302 021f 	ssat	r2, #32, r2
 801ac2a:	fb52 f210 	smmulr	r2, r2, r0
 801ac2e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ac30:	440b      	add	r3, r1
 801ac32:	f303 0307 	ssat	r3, #8, r3
 801ac36:	9803      	ldr	r0, [sp, #12]
 801ac38:	440a      	add	r2, r1
 801ac3a:	7003      	strb	r3, [r0, #0]
 801ac3c:	f302 0207 	ssat	r2, #8, r2
 801ac40:	9b02      	ldr	r3, [sp, #8]
 801ac42:	701a      	strb	r2, [r3, #0]
 801ac44:	e71a      	b.n	801aa7c <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 801ac46:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801ac48:	fa00 f205 	lsl.w	r2, r0, r5
 801ac4c:	f302 021f 	ssat	r2, #32, r2
 801ac50:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801ac52:	fb52 f216 	smmulr	r2, r2, r6
 801ac56:	fa04 f005 	lsl.w	r0, r4, r5
 801ac5a:	f300 001f 	ssat	r0, #32, r0
 801ac5e:	fb50 f016 	smmulr	r0, r0, r6
 801ac62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ac64:	4422      	add	r2, r4
 801ac66:	f302 0207 	ssat	r2, #8, r2
 801ac6a:	9d03      	ldr	r5, [sp, #12]
 801ac6c:	4420      	add	r0, r4
 801ac6e:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ac72:	f300 0007 	ssat	r0, #8, r0
 801ac76:	9a02      	ldr	r2, [sp, #8]
 801ac78:	f802 0c01 	strb.w	r0, [r2, #-1]
 801ac7c:	e6e7      	b.n	801aa4e <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 801ac7e:	46d9      	mov	r9, fp
 801ac80:	e670      	b.n	801a964 <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 801ac82:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ac84:	f04f 0a00 	mov.w	sl, #0
 801ac88:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ac8a:	9301      	str	r3, [sp, #4]
 801ac8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac8e:	4604      	mov	r4, r0
 801ac90:	4619      	mov	r1, r3
 801ac92:	e622      	b.n	801a8da <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 801ac94:	2301      	movs	r3, #1
 801ac96:	9309      	str	r3, [sp, #36]	; 0x24
 801ac98:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	f47f ad40 	bne.w	801a720 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 801aca0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801aca2:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801aca4:	eb03 0a02 	add.w	sl, r3, r2
 801aca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801acaa:	2b00      	cmp	r3, #0
 801acac:	f340 82b1 	ble.w	801b212 <st_sssa8_ch_nn_mat_mult_nt_t+0xc0a>
 801acb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801acb2:	4650      	mov	r0, sl
 801acb4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801acb6:	18d5      	adds	r5, r2, r3
 801acb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801acba:	6811      	ldr	r1, [r2, #0]
 801acbc:	3210      	adds	r2, #16
 801acbe:	6804      	ldr	r4, [r0, #0]
 801acc0:	3340      	adds	r3, #64	; 0x40
 801acc2:	fa2f f681 	sxtb16	r6, r1
 801acc6:	3010      	adds	r0, #16
 801acc8:	f843 6c40 	str.w	r6, [r3, #-64]
 801accc:	ea4f 2131 	mov.w	r1, r1, ror #8
 801acd0:	42aa      	cmp	r2, r5
 801acd2:	fa2f f181 	sxtb16	r1, r1
 801acd6:	f843 1c3c 	str.w	r1, [r3, #-60]
 801acda:	ea4f 2134 	mov.w	r1, r4, ror #8
 801acde:	fa2f f484 	sxtb16	r4, r4
 801ace2:	fa2f f181 	sxtb16	r1, r1
 801ace6:	f843 4c38 	str.w	r4, [r3, #-56]
 801acea:	f843 1c34 	str.w	r1, [r3, #-52]
 801acee:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 801acf2:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801acf6:	ea4f 2631 	mov.w	r6, r1, ror #8
 801acfa:	fa2f f181 	sxtb16	r1, r1
 801acfe:	fa2f f686 	sxtb16	r6, r6
 801ad02:	f843 1c28 	str.w	r1, [r3, #-40]
 801ad06:	f843 6c24 	str.w	r6, [r3, #-36]
 801ad0a:	ea4f 2634 	mov.w	r6, r4, ror #8
 801ad0e:	fa2f f484 	sxtb16	r4, r4
 801ad12:	f843 4c30 	str.w	r4, [r3, #-48]
 801ad16:	fa2f f486 	sxtb16	r4, r6
 801ad1a:	f843 4c2c 	str.w	r4, [r3, #-44]
 801ad1e:	f852 4c08 	ldr.w	r4, [r2, #-8]
 801ad22:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801ad26:	ea4f 2634 	mov.w	r6, r4, ror #8
 801ad2a:	fa2f f484 	sxtb16	r4, r4
 801ad2e:	fa2f f686 	sxtb16	r6, r6
 801ad32:	f843 4c20 	str.w	r4, [r3, #-32]
 801ad36:	ea4f 2431 	mov.w	r4, r1, ror #8
 801ad3a:	f843 6c1c 	str.w	r6, [r3, #-28]
 801ad3e:	fa2f f484 	sxtb16	r4, r4
 801ad42:	fa2f f181 	sxtb16	r1, r1
 801ad46:	f843 4c14 	str.w	r4, [r3, #-20]
 801ad4a:	f843 1c18 	str.w	r1, [r3, #-24]
 801ad4e:	f852 4c04 	ldr.w	r4, [r2, #-4]
 801ad52:	f850 1c04 	ldr.w	r1, [r0, #-4]
 801ad56:	ea4f 2634 	mov.w	r6, r4, ror #8
 801ad5a:	fa2f f484 	sxtb16	r4, r4
 801ad5e:	fa2f f686 	sxtb16	r6, r6
 801ad62:	f843 4c10 	str.w	r4, [r3, #-16]
 801ad66:	ea4f 2431 	mov.w	r4, r1, ror #8
 801ad6a:	f843 6c0c 	str.w	r6, [r3, #-12]
 801ad6e:	fa2f f484 	sxtb16	r4, r4
 801ad72:	fa2f f181 	sxtb16	r1, r1
 801ad76:	f843 4c04 	str.w	r4, [r3, #-4]
 801ad7a:	f843 1c08 	str.w	r1, [r3, #-8]
 801ad7e:	d19c      	bne.n	801acba <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 801ad80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ad82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ad84:	9925      	ldr	r1, [sp, #148]	; 0x94
 801ad86:	449a      	add	sl, r3
 801ad88:	469c      	mov	ip, r3
 801ad8a:	1857      	adds	r7, r2, r1
 801ad8c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801ad8e:	3b03      	subs	r3, #3
 801ad90:	4563      	cmp	r3, ip
 801ad92:	f340 823c 	ble.w	801b20e <st_sssa8_ch_nn_mat_mult_nt_t+0xc06>
 801ad96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ad98:	463a      	mov	r2, r7
 801ad9a:	4650      	mov	r0, sl
 801ad9c:	eba3 030c 	sub.w	r3, r3, ip
 801ada0:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801ada4:	f108 0e01 	add.w	lr, r8, #1
 801ada8:	ea4f 098e 	mov.w	r9, lr, lsl #2
 801adac:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 801adb0:	f855 3b04 	ldr.w	r3, [r5], #4
 801adb4:	3210      	adds	r2, #16
 801adb6:	f850 1b04 	ldr.w	r1, [r0], #4
 801adba:	fa2f f483 	sxtb16	r4, r3
 801adbe:	42b5      	cmp	r5, r6
 801adc0:	ea4f 2333 	mov.w	r3, r3, ror #8
 801adc4:	fa2f f383 	sxtb16	r3, r3
 801adc8:	f842 3c0c 	str.w	r3, [r2, #-12]
 801adcc:	ea4f 2331 	mov.w	r3, r1, ror #8
 801add0:	fa2f f181 	sxtb16	r1, r1
 801add4:	f842 4c10 	str.w	r4, [r2, #-16]
 801add8:	f842 1c08 	str.w	r1, [r2, #-8]
 801addc:	fa2f f383 	sxtb16	r3, r3
 801ade0:	f842 3c04 	str.w	r3, [r2, #-4]
 801ade4:	d1e4      	bne.n	801adb0 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 801ade6:	f10c 0304 	add.w	r3, ip, #4
 801adea:	44ca      	add	sl, r9
 801adec:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 801adf0:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 801adf4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801adf6:	4563      	cmp	r3, ip
 801adf8:	f77f ac92 	ble.w	801a720 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 801adfc:	f996 3000 	ldrsb.w	r3, [r6]
 801ae00:	803b      	strh	r3, [r7, #0]
 801ae02:	f10c 0301 	add.w	r3, ip, #1
 801ae06:	f99a 2000 	ldrsb.w	r2, [sl]
 801ae0a:	807a      	strh	r2, [r7, #2]
 801ae0c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801ae0e:	429a      	cmp	r2, r3
 801ae10:	f77f ac86 	ble.w	801a720 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 801ae14:	f996 3001 	ldrsb.w	r3, [r6, #1]
 801ae18:	80bb      	strh	r3, [r7, #4]
 801ae1a:	f10c 0302 	add.w	r3, ip, #2
 801ae1e:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 801ae22:	80fa      	strh	r2, [r7, #6]
 801ae24:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801ae26:	429a      	cmp	r2, r3
 801ae28:	f77f ac7a 	ble.w	801a720 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 801ae2c:	f996 3002 	ldrsb.w	r3, [r6, #2]
 801ae30:	f10c 0c03 	add.w	ip, ip, #3
 801ae34:	813b      	strh	r3, [r7, #8]
 801ae36:	4594      	cmp	ip, r2
 801ae38:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 801ae3c:	817b      	strh	r3, [r7, #10]
 801ae3e:	f6bf ac6f 	bge.w	801a720 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 801ae42:	f996 3003 	ldrsb.w	r3, [r6, #3]
 801ae46:	81bb      	strh	r3, [r7, #12]
 801ae48:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 801ae4c:	81fb      	strh	r3, [r7, #14]
 801ae4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	f43f ac69 	beq.w	801a728 <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 801ae56:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	f000 81cc 	beq.w	801b1f6 <st_sssa8_ch_nn_mat_mult_nt_t+0xbee>
 801ae5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ae60:	2300      	movs	r3, #0
 801ae62:	f102 0110 	add.w	r1, r2, #16
 801ae66:	461a      	mov	r2, r3
 801ae68:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 801ae6c:	3801      	subs	r0, #1
 801ae6e:	f101 0110 	add.w	r1, r1, #16
 801ae72:	eba3 0304 	sub.w	r3, r3, r4
 801ae76:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 801ae7a:	eba2 0204 	sub.w	r2, r2, r4
 801ae7e:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 801ae82:	eba3 0304 	sub.w	r3, r3, r4
 801ae86:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 801ae8a:	eba2 0204 	sub.w	r2, r2, r4
 801ae8e:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 801ae92:	eba3 0304 	sub.w	r3, r3, r4
 801ae96:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 801ae9a:	eba2 0204 	sub.w	r2, r2, r4
 801ae9e:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 801aea2:	eba3 0304 	sub.w	r3, r3, r4
 801aea6:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 801aeaa:	eba2 0204 	sub.w	r2, r2, r4
 801aeae:	d1db      	bne.n	801ae68 <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 801aeb0:	9945      	ldr	r1, [sp, #276]	; 0x114
 801aeb2:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801aeb4:	4401      	add	r1, r0
 801aeb6:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 801aeb8:	b1cc      	cbz	r4, 801aeee <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801aeba:	f9b1 0000 	ldrsh.w	r0, [r1]
 801aebe:	2c01      	cmp	r4, #1
 801aec0:	eba3 0300 	sub.w	r3, r3, r0
 801aec4:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801aec8:	eba2 0200 	sub.w	r2, r2, r0
 801aecc:	d00f      	beq.n	801aeee <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801aece:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 801aed2:	2c02      	cmp	r4, #2
 801aed4:	eba3 0300 	sub.w	r3, r3, r0
 801aed8:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 801aedc:	eba2 0200 	sub.w	r2, r2, r0
 801aee0:	d005      	beq.n	801aeee <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 801aee2:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 801aee6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801aeea:	1a1b      	subs	r3, r3, r0
 801aeec:	1a52      	subs	r2, r2, r1
 801aeee:	9943      	ldr	r1, [sp, #268]	; 0x10c
 801aef0:	fb03 f101 	mul.w	r1, r3, r1
 801aef4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801aef6:	fb03 f202 	mul.w	r2, r3, r2
 801aefa:	e417      	b.n	801a72c <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 801aefc:	2301      	movs	r3, #1
 801aefe:	9308      	str	r3, [sp, #32]
 801af00:	e400      	b.n	801a704 <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 801af02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801af04:	2b00      	cmp	r3, #0
 801af06:	f340 817c 	ble.w	801b202 <st_sssa8_ch_nn_mat_mult_nt_t+0xbfa>
 801af0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801af0c:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 801af10:	eb0b 0003 	add.w	r0, fp, r3
 801af14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801af16:	f8db 1000 	ldr.w	r1, [fp]
 801af1a:	fa2f f481 	sxtb16	r4, r1
 801af1e:	fa2f f191 	sxtb16	r1, r1, ror #8
 801af22:	681e      	ldr	r6, [r3, #0]
 801af24:	fb24 5506 	smlad	r5, r4, r6, r5
 801af28:	685e      	ldr	r6, [r3, #4]
 801af2a:	fb21 5606 	smlad	r6, r1, r6, r5
 801af2e:	689d      	ldr	r5, [r3, #8]
 801af30:	fb24 2205 	smlad	r2, r4, r5, r2
 801af34:	68dc      	ldr	r4, [r3, #12]
 801af36:	fb21 2104 	smlad	r1, r1, r4, r2
 801af3a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801af3e:	fa2f f482 	sxtb16	r4, r2
 801af42:	fa2f f292 	sxtb16	r2, r2, ror #8
 801af46:	691d      	ldr	r5, [r3, #16]
 801af48:	fb24 6505 	smlad	r5, r4, r5, r6
 801af4c:	695e      	ldr	r6, [r3, #20]
 801af4e:	fb22 5606 	smlad	r6, r2, r6, r5
 801af52:	699d      	ldr	r5, [r3, #24]
 801af54:	fb24 1105 	smlad	r1, r4, r5, r1
 801af58:	69dc      	ldr	r4, [r3, #28]
 801af5a:	fb22 1104 	smlad	r1, r2, r4, r1
 801af5e:	f8db 2008 	ldr.w	r2, [fp, #8]
 801af62:	fa2f f482 	sxtb16	r4, r2
 801af66:	fa2f f292 	sxtb16	r2, r2, ror #8
 801af6a:	6a1d      	ldr	r5, [r3, #32]
 801af6c:	fb24 6505 	smlad	r5, r4, r5, r6
 801af70:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801af72:	fb22 5606 	smlad	r6, r2, r6, r5
 801af76:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801af78:	fb24 1105 	smlad	r1, r4, r5, r1
 801af7c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801af7e:	fb22 1104 	smlad	r1, r2, r4, r1
 801af82:	f8db 200c 	ldr.w	r2, [fp, #12]
 801af86:	3340      	adds	r3, #64	; 0x40
 801af88:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801af8c:	f10b 0b10 	add.w	fp, fp, #16
 801af90:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 801af94:	f853 cc08 	ldr.w	ip, [r3, #-8]
 801af98:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801af9c:	fa2f f482 	sxtb16	r4, r2
 801afa0:	fa2f f292 	sxtb16	r2, r2, ror #8
 801afa4:	fb24 6505 	smlad	r5, r4, r5, r6
 801afa8:	fb22 550e 	smlad	r5, r2, lr, r5
 801afac:	fb24 110c 	smlad	r1, r4, ip, r1
 801afb0:	fb22 1207 	smlad	r2, r2, r7, r1
 801afb4:	4583      	cmp	fp, r0
 801afb6:	d1ae      	bne.n	801af16 <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 801afb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801afba:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801afbe:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 801afc2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801afc4:	eb03 0e02 	add.w	lr, r3, r2
 801afc8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801afca:	3b03      	subs	r3, #3
 801afcc:	4543      	cmp	r3, r8
 801afce:	f340 8116 	ble.w	801b1fe <st_sssa8_ch_nn_mat_mult_nt_t+0xbf6>
 801afd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801afd4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801afd6:	eba3 0a08 	sub.w	sl, r3, r8
 801afda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801afdc:	4673      	mov	r3, lr
 801afde:	f8cd e008 	str.w	lr, [sp, #8]
 801afe2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 801afe6:	f10a 0901 	add.w	r9, sl, #1
 801afea:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 801afee:	681c      	ldr	r4, [r3, #0]
 801aff0:	3310      	adds	r3, #16
 801aff2:	f850 2b04 	ldr.w	r2, [r0], #4
 801aff6:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 801affa:	f853 ec08 	ldr.w	lr, [r3, #-8]
 801affe:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801b002:	fa2f f182 	sxtb16	r1, r2
 801b006:	fa2f f292 	sxtb16	r2, r2, ror #8
 801b00a:	fb21 6604 	smlad	r6, r1, r4, r6
 801b00e:	fb22 660b 	smlad	r6, r2, fp, r6
 801b012:	fb21 550e 	smlad	r5, r1, lr, r5
 801b016:	fb22 5507 	smlad	r5, r2, r7, r5
 801b01a:	4560      	cmp	r0, ip
 801b01c:	d1e7      	bne.n	801afee <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 801b01e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b022:	f108 0804 	add.w	r8, r8, #4
 801b026:	950b      	str	r5, [sp, #44]	; 0x2c
 801b028:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 801b02c:	960c      	str	r6, [sp, #48]	; 0x30
 801b02e:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 801b032:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801b034:	4543      	cmp	r3, r8
 801b036:	dd40      	ble.n	801b0ba <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 801b038:	f99c 3000 	ldrsb.w	r3, [ip]
 801b03c:	f8be 2000 	ldrh.w	r2, [lr]
 801b040:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b042:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b044:	fb12 1103 	smlabb	r1, r2, r3, r1
 801b048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b04c:	fb12 0003 	smlabb	r0, r2, r3, r0
 801b050:	f108 0301 	add.w	r3, r8, #1
 801b054:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801b056:	910c      	str	r1, [sp, #48]	; 0x30
 801b058:	429a      	cmp	r2, r3
 801b05a:	900b      	str	r0, [sp, #44]	; 0x2c
 801b05c:	dd2d      	ble.n	801b0ba <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 801b05e:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 801b062:	f8be 2004 	ldrh.w	r2, [lr, #4]
 801b066:	fb12 1103 	smlabb	r1, r2, r3, r1
 801b06a:	f8be 2006 	ldrh.w	r2, [lr, #6]
 801b06e:	fb12 0003 	smlabb	r0, r2, r3, r0
 801b072:	f108 0302 	add.w	r3, r8, #2
 801b076:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801b078:	910c      	str	r1, [sp, #48]	; 0x30
 801b07a:	429a      	cmp	r2, r3
 801b07c:	900b      	str	r0, [sp, #44]	; 0x2c
 801b07e:	dd1c      	ble.n	801b0ba <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 801b080:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 801b084:	f108 0803 	add.w	r8, r8, #3
 801b088:	f8be 2008 	ldrh.w	r2, [lr, #8]
 801b08c:	fb12 1103 	smlabb	r1, r2, r3, r1
 801b090:	f8be 200a 	ldrh.w	r2, [lr, #10]
 801b094:	fb12 0003 	smlabb	r0, r2, r3, r0
 801b098:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801b09a:	910c      	str	r1, [sp, #48]	; 0x30
 801b09c:	4543      	cmp	r3, r8
 801b09e:	900b      	str	r0, [sp, #44]	; 0x2c
 801b0a0:	dd0b      	ble.n	801b0ba <st_sssa8_ch_nn_mat_mult_nt_t+0xab2>
 801b0a2:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 801b0a6:	f8be 200c 	ldrh.w	r2, [lr, #12]
 801b0aa:	fb12 1203 	smlabb	r2, r2, r3, r1
 801b0ae:	920c      	str	r2, [sp, #48]	; 0x30
 801b0b0:	f8be 200e 	ldrh.w	r2, [lr, #14]
 801b0b4:	fb12 0303 	smlabb	r3, r2, r3, r0
 801b0b8:	930b      	str	r3, [sp, #44]	; 0x2c
 801b0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b0bc:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801b0c0:	2915      	cmp	r1, #21
 801b0c2:	dd3d      	ble.n	801b140 <st_sssa8_ch_nn_mat_mult_nt_t+0xb38>
 801b0c4:	1e8a      	subs	r2, r1, #2
 801b0c6:	2301      	movs	r3, #1
 801b0c8:	3901      	subs	r1, #1
 801b0ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b0cc:	fa03 f202 	lsl.w	r2, r3, r2
 801b0d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b0d2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b0d6:	fb50 2303 	smmla	r3, r0, r3, r2
 801b0da:	fa43 f101 	asr.w	r1, r3, r1
 801b0de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b0e0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b0e4:	440b      	add	r3, r1
 801b0e6:	f303 0307 	ssat	r3, #8, r3
 801b0ea:	9a01      	ldr	r2, [sp, #4]
 801b0ec:	7013      	strb	r3, [r2, #0]
 801b0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b0f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b0f4:	2915      	cmp	r1, #21
 801b0f6:	dd13      	ble.n	801b120 <st_sssa8_ch_nn_mat_mult_nt_t+0xb18>
 801b0f8:	1e8a      	subs	r2, r1, #2
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	3901      	subs	r1, #1
 801b0fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b100:	fa03 f202 	lsl.w	r2, r3, r2
 801b104:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	fb50 2303 	smmla	r3, r0, r3, r2
 801b10c:	fa43 f101 	asr.w	r1, r3, r1
 801b110:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	440b      	add	r3, r1
 801b116:	f303 0307 	ssat	r3, #8, r3
 801b11a:	9a01      	ldr	r2, [sp, #4]
 801b11c:	7053      	strb	r3, [r2, #1]
 801b11e:	e4c5      	b.n	801aaac <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 801b120:	2900      	cmp	r1, #0
 801b122:	dd56      	ble.n	801b1d2 <st_sssa8_ch_nn_mat_mult_nt_t+0xbca>
 801b124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b126:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b128:	0058      	lsls	r0, r3, #1
 801b12a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b12c:	6812      	ldr	r2, [r2, #0]
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	fb50 2303 	smmla	r3, r0, r3, r2
 801b134:	410b      	asrs	r3, r1
 801b136:	f303 0307 	ssat	r3, #8, r3
 801b13a:	9a01      	ldr	r2, [sp, #4]
 801b13c:	7053      	strb	r3, [r2, #1]
 801b13e:	e4b5      	b.n	801aaac <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 801b140:	2900      	cmp	r1, #0
 801b142:	dd32      	ble.n	801b1aa <st_sssa8_ch_nn_mat_mult_nt_t+0xba2>
 801b144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b146:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b148:	0058      	lsls	r0, r3, #1
 801b14a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b14c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801b150:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b154:	fb50 2303 	smmla	r3, r0, r3, r2
 801b158:	410b      	asrs	r3, r1
 801b15a:	f303 0307 	ssat	r3, #8, r3
 801b15e:	9a01      	ldr	r2, [sp, #4]
 801b160:	7013      	strb	r3, [r2, #0]
 801b162:	e7c4      	b.n	801b0ee <st_sssa8_ch_nn_mat_mult_nt_t+0xae6>
 801b164:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801b168:	e49c      	b.n	801aaa4 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 801b16a:	f1bc 0f00 	cmp.w	ip, #0
 801b16e:	dd0c      	ble.n	801b18a <st_sssa8_ch_nn_mat_mult_nt_t+0xb82>
 801b170:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 801b174:	682e      	ldr	r6, [r5, #0]
 801b176:	6827      	ldr	r7, [r4, #0]
 801b178:	fb5a 7706 	smmla	r7, sl, r6, r7
 801b17c:	fa47 f60c 	asr.w	r6, r7, ip
 801b180:	f306 0607 	ssat	r6, #8, r6
 801b184:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801b186:	54be      	strb	r6, [r7, r2]
 801b188:	e507      	b.n	801ab9a <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 801b18a:	f1cc 0c01 	rsb	ip, ip, #1
 801b18e:	fa07 f70c 	lsl.w	r7, r7, ip
 801b192:	f307 071f 	ssat	r7, #32, r7
 801b196:	682e      	ldr	r6, [r5, #0]
 801b198:	fb57 f716 	smmulr	r7, r7, r6
 801b19c:	6826      	ldr	r6, [r4, #0]
 801b19e:	443e      	add	r6, r7
 801b1a0:	f306 0607 	ssat	r6, #8, r6
 801b1a4:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801b1a6:	54be      	strb	r6, [r7, r2]
 801b1a8:	e4f7      	b.n	801ab9a <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 801b1aa:	f1c1 0101 	rsb	r1, r1, #1
 801b1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b1b0:	408a      	lsls	r2, r1
 801b1b2:	f302 021f 	ssat	r2, #32, r2
 801b1b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b1b8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b1bc:	fb52 f213 	smmulr	r2, r2, r3
 801b1c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b1c2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b1c6:	4413      	add	r3, r2
 801b1c8:	f303 0307 	ssat	r3, #8, r3
 801b1cc:	9a01      	ldr	r2, [sp, #4]
 801b1ce:	7013      	strb	r3, [r2, #0]
 801b1d0:	e78d      	b.n	801b0ee <st_sssa8_ch_nn_mat_mult_nt_t+0xae6>
 801b1d2:	f1c1 0101 	rsb	r1, r1, #1
 801b1d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1d8:	408a      	lsls	r2, r1
 801b1da:	f302 021f 	ssat	r2, #32, r2
 801b1de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	fb52 f213 	smmulr	r2, r2, r3
 801b1e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	4413      	add	r3, r2
 801b1ec:	f303 0307 	ssat	r3, #8, r3
 801b1f0:	9a01      	ldr	r2, [sp, #4]
 801b1f2:	7053      	strb	r3, [r2, #1]
 801b1f4:	e45a      	b.n	801aaac <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 801b1f6:	4602      	mov	r2, r0
 801b1f8:	9945      	ldr	r1, [sp, #276]	; 0x114
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	e65b      	b.n	801aeb6 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 801b1fe:	4684      	mov	ip, r0
 801b200:	e717      	b.n	801b032 <st_sssa8_ch_nn_mat_mult_nt_t+0xa2a>
 801b202:	4658      	mov	r0, fp
 801b204:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 801b208:	f04f 0800 	mov.w	r8, #0
 801b20c:	e6dc      	b.n	801afc8 <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 801b20e:	462e      	mov	r6, r5
 801b210:	e5f0      	b.n	801adf4 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 801b212:	9f45      	ldr	r7, [sp, #276]	; 0x114
 801b214:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801b216:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 801b21a:	e5b7      	b.n	801ad8c <st_sssa8_ch_nn_mat_mult_nt_t+0x784>

0801b21c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t>:
 801b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b220:	b0c9      	sub	sp, #292	; 0x124
 801b222:	469c      	mov	ip, r3
 801b224:	4696      	mov	lr, r2
 801b226:	902c      	str	r0, [sp, #176]	; 0xb0
 801b228:	9329      	str	r3, [sp, #164]	; 0xa4
 801b22a:	9855      	ldr	r0, [sp, #340]	; 0x154
 801b22c:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 801b230:	f8bd 6164 	ldrh.w	r6, [sp, #356]	; 0x164
 801b234:	fb00 f003 	mul.w	r0, r0, r3
 801b238:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801b23a:	f8bd 7170 	ldrh.w	r7, [sp, #368]	; 0x170
 801b23e:	9245      	str	r2, [sp, #276]	; 0x114
 801b240:	9631      	str	r6, [sp, #196]	; 0xc4
 801b242:	f8bd 215c 	ldrh.w	r2, [sp, #348]	; 0x15c
 801b246:	f8bd 6168 	ldrh.w	r6, [sp, #360]	; 0x168
 801b24a:	9134      	str	r1, [sp, #208]	; 0xd0
 801b24c:	9006      	str	r0, [sp, #24]
 801b24e:	923a      	str	r2, [sp, #232]	; 0xe8
 801b250:	962e      	str	r6, [sp, #184]	; 0xb8
 801b252:	9709      	str	r7, [sp, #36]	; 0x24
 801b254:	e9dd 455f 	ldrd	r4, r5, [sp, #380]	; 0x17c
 801b258:	2d00      	cmp	r5, #0
 801b25a:	bf18      	it	ne
 801b25c:	462c      	movne	r4, r5
 801b25e:	f8bd 5160 	ldrh.w	r5, [sp, #352]	; 0x160
 801b262:	2b01      	cmp	r3, #1
 801b264:	945f      	str	r4, [sp, #380]	; 0x17c
 801b266:	f8bd 4158 	ldrh.w	r4, [sp, #344]	; 0x158
 801b26a:	952d      	str	r5, [sp, #180]	; 0xb4
 801b26c:	9446      	str	r4, [sp, #280]	; 0x118
 801b26e:	f340 82b4 	ble.w	801b7da <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x5be>
 801b272:	3b02      	subs	r3, #2
 801b274:	1eaa      	subs	r2, r5, #2
 801b276:	9d55      	ldr	r5, [sp, #340]	; 0x154
 801b278:	4688      	mov	r8, r1
 801b27a:	085b      	lsrs	r3, r3, #1
 801b27c:	f1a0 0110 	sub.w	r1, r0, #16
 801b280:	fb05 f404 	mul.w	r4, r5, r4
 801b284:	f000 0503 	and.w	r5, r0, #3
 801b288:	3301      	adds	r3, #1
 801b28a:	9143      	str	r1, [sp, #268]	; 0x10c
 801b28c:	9537      	str	r5, [sp, #220]	; 0xdc
 801b28e:	0852      	lsrs	r2, r2, #1
 801b290:	9d54      	ldr	r5, [sp, #336]	; 0x150
 801b292:	fb00 f707 	mul.w	r7, r0, r7
 801b296:	9339      	str	r3, [sp, #228]	; 0xe4
 801b298:	090b      	lsrs	r3, r1, #4
 801b29a:	1081      	asrs	r1, r0, #2
 801b29c:	9414      	str	r4, [sp, #80]	; 0x50
 801b29e:	973b      	str	r7, [sp, #236]	; 0xec
 801b2a0:	3301      	adds	r3, #1
 801b2a2:	9136      	str	r1, [sp, #216]	; 0xd8
 801b2a4:	0069      	lsls	r1, r5, #1
 801b2a6:	460d      	mov	r5, r1
 801b2a8:	9121      	str	r1, [sp, #132]	; 0x84
 801b2aa:	fb02 f104 	mul.w	r1, r2, r4
 801b2ae:	fb02 5505 	mla	r5, r2, r5, r5
 801b2b2:	9542      	str	r5, [sp, #264]	; 0x108
 801b2b4:	004d      	lsls	r5, r1, #1
 801b2b6:	9936      	ldr	r1, [sp, #216]	; 0xd8
 801b2b8:	9541      	str	r5, [sp, #260]	; 0x104
 801b2ba:	f06f 0503 	mvn.w	r5, #3
 801b2be:	1b2d      	subs	r5, r5, r4
 801b2c0:	9513      	str	r5, [sp, #76]	; 0x4c
 801b2c2:	1f25      	subs	r5, r4, #4
 801b2c4:	0064      	lsls	r4, r4, #1
 801b2c6:	9511      	str	r5, [sp, #68]	; 0x44
 801b2c8:	941f      	str	r4, [sp, #124]	; 0x7c
 801b2ca:	007c      	lsls	r4, r7, #1
 801b2cc:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801b2ce:	9438      	str	r4, [sp, #224]	; 0xe0
 801b2d0:	00bc      	lsls	r4, r7, #2
 801b2d2:	f105 39ff 	add.w	r9, r5, #4294967295
 801b2d6:	f005 0501 	and.w	r5, r5, #1
 801b2da:	943d      	str	r4, [sp, #244]	; 0xf4
 801b2dc:	1a34      	subs	r4, r6, r0
 801b2de:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
 801b2e2:	f1a0 090f 	sub.w	r9, r0, #15
 801b2e6:	940b      	str	r4, [sp, #44]	; 0x2c
 801b2e8:	9c53      	ldr	r4, [sp, #332]	; 0x14c
 801b2ea:	9839      	ldr	r0, [sp, #228]	; 0xe4
 801b2ec:	3402      	adds	r4, #2
 801b2ee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801b2f2:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 801b2f6:	953c      	str	r5, [sp, #240]	; 0xf0
 801b2f8:	942b      	str	r4, [sp, #172]	; 0xac
 801b2fa:	9c52      	ldr	r4, [sp, #328]	; 0x148
 801b2fc:	9044      	str	r0, [sp, #272]	; 0x110
 801b2fe:	0108      	lsls	r0, r1, #4
 801b300:	3404      	adds	r4, #4
 801b302:	903f      	str	r0, [sp, #252]	; 0xfc
 801b304:	9427      	str	r4, [sp, #156]	; 0x9c
 801b306:	9c5e      	ldr	r4, [sp, #376]	; 0x178
 801b308:	3404      	adds	r4, #4
 801b30a:	9428      	str	r4, [sp, #160]	; 0xa0
 801b30c:	4674      	mov	r4, lr
 801b30e:	3404      	adds	r4, #4
 801b310:	9433      	str	r4, [sp, #204]	; 0xcc
 801b312:	9937      	ldr	r1, [sp, #220]	; 0xdc
 801b314:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 801b316:	0088      	lsls	r0, r1, #2
 801b318:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 801b31c:	fb06 f202 	mul.w	r2, r6, r2
 801b320:	9040      	str	r0, [sp, #256]	; 0x100
 801b322:	923e      	str	r2, [sp, #248]	; 0xf8
 801b324:	011a      	lsls	r2, r3, #4
 801b326:	019b      	lsls	r3, r3, #6
 801b328:	920f      	str	r2, [sp, #60]	; 0x3c
 801b32a:	9310      	str	r3, [sp, #64]	; 0x40
 801b32c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b32e:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 801b332:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b336:	2b15      	cmp	r3, #21
 801b338:	9320      	str	r3, [sp, #128]	; 0x80
 801b33a:	921d      	str	r2, [sp, #116]	; 0x74
 801b33c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b33e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801b342:	6812      	ldr	r2, [r2, #0]
 801b344:	9122      	str	r1, [sp, #136]	; 0x88
 801b346:	9223      	str	r2, [sp, #140]	; 0x8c
 801b348:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801b34a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801b34e:	6812      	ldr	r2, [r2, #0]
 801b350:	9124      	str	r1, [sp, #144]	; 0x90
 801b352:	9225      	str	r2, [sp, #148]	; 0x94
 801b354:	f300 8522 	bgt.w	801bd9c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb80>
 801b358:	2b00      	cmp	r3, #0
 801b35a:	bfcc      	ite	gt
 801b35c:	2300      	movgt	r3, #0
 801b35e:	2301      	movle	r3, #1
 801b360:	425b      	negs	r3, r3
 801b362:	9319      	str	r3, [sp, #100]	; 0x64
 801b364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b366:	2b15      	cmp	r3, #21
 801b368:	f300 84aa 	bgt.w	801bcc0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xaa4>
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	bfcc      	ite	gt
 801b370:	2300      	movgt	r3, #0
 801b372:	2301      	movle	r3, #1
 801b374:	425b      	negs	r3, r3
 801b376:	931a      	str	r3, [sp, #104]	; 0x68
 801b378:	9b60      	ldr	r3, [sp, #384]	; 0x180
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	f000 84a6 	beq.w	801bccc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xab0>
 801b380:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 801b382:	2b00      	cmp	r3, #0
 801b384:	f040 84b0 	bne.w	801bce8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xacc>
 801b388:	461c      	mov	r4, r3
 801b38a:	9933      	ldr	r1, [sp, #204]	; 0xcc
 801b38c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801b390:	18a2      	adds	r2, r4, r2
 801b392:	921b      	str	r2, [sp, #108]	; 0x6c
 801b394:	680a      	ldr	r2, [r1, #0]
 801b396:	4413      	add	r3, r2
 801b398:	931c      	str	r3, [sp, #112]	; 0x70
 801b39a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	f000 81f8 	beq.w	801b792 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x576>
 801b3a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b3a4:	2301      	movs	r3, #1
 801b3a6:	2100      	movs	r1, #0
 801b3a8:	3a02      	subs	r2, #2
 801b3aa:	912a      	str	r1, [sp, #168]	; 0xa8
 801b3ac:	fa03 f202 	lsl.w	r2, r3, r2
 801b3b0:	9135      	str	r1, [sp, #212]	; 0xd4
 801b3b2:	922f      	str	r2, [sp, #188]	; 0xbc
 801b3b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b3b6:	3a02      	subs	r2, #2
 801b3b8:	4093      	lsls	r3, r2
 801b3ba:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 801b3bc:	9330      	str	r3, [sp, #192]	; 0xc0
 801b3be:	f022 020f 	bic.w	r2, r2, #15
 801b3c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b3c4:	3314      	adds	r3, #20
 801b3c6:	4413      	add	r3, r2
 801b3c8:	9312      	str	r3, [sp, #72]	; 0x48
 801b3ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b3cc:	9305      	str	r3, [sp, #20]
 801b3ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b3d0:	9326      	str	r3, [sp, #152]	; 0x98
 801b3d2:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801b3d4:	3301      	adds	r3, #1
 801b3d6:	9347      	str	r3, [sp, #284]	; 0x11c
 801b3d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	f340 81ca 	ble.w	801b774 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x558>
 801b3e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b3e2:	1c5a      	adds	r2, r3, #1
 801b3e4:	9216      	str	r2, [sp, #88]	; 0x58
 801b3e6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 801b3e8:	4413      	add	r3, r2
 801b3ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b3ec:	9315      	str	r3, [sp, #84]	; 0x54
 801b3ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b3f0:	4413      	add	r3, r2
 801b3f2:	9317      	str	r3, [sp, #92]	; 0x5c
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	9318      	str	r3, [sp, #96]	; 0x60
 801b3f8:	9b06      	ldr	r3, [sp, #24]
 801b3fa:	3b03      	subs	r3, #3
 801b3fc:	930c      	str	r3, [sp, #48]	; 0x30
 801b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b400:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 801b404:	2b00      	cmp	r3, #0
 801b406:	f000 82f0 	beq.w	801b9ea <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7ce>
 801b40a:	2100      	movs	r1, #0
 801b40c:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801b40e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b410:	9105      	str	r1, [sp, #20]
 801b412:	9914      	ldr	r1, [sp, #80]	; 0x50
 801b414:	4692      	mov	sl, r2
 801b416:	9304      	str	r3, [sp, #16]
 801b418:	3104      	adds	r1, #4
 801b41a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b41c:	910d      	str	r1, [sp, #52]	; 0x34
 801b41e:	469c      	mov	ip, r3
 801b420:	9906      	ldr	r1, [sp, #24]
 801b422:	3904      	subs	r1, #4
 801b424:	910e      	str	r1, [sp, #56]	; 0x38
 801b426:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b428:	2900      	cmp	r1, #0
 801b42a:	f340 8272 	ble.w	801b912 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6f6>
 801b42e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b430:	f8cd b01c 	str.w	fp, [sp, #28]
 801b434:	eb0b 0501 	add.w	r5, fp, r1
 801b438:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b43a:	9c04      	ldr	r4, [sp, #16]
 801b43c:	4459      	add	r1, fp
 801b43e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 801b442:	9103      	str	r1, [sp, #12]
 801b444:	f85b 6005 	ldr.w	r6, [fp, r5]
 801b448:	eb0b 0705 	add.w	r7, fp, r5
 801b44c:	6821      	ldr	r1, [r4, #0]
 801b44e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b452:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801b456:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 801b45a:	fa2f f086 	sxtb16	r0, r6
 801b45e:	fa2f f696 	sxtb16	r6, r6, ror #8
 801b462:	fb20 2201 	smlad	r2, r0, r1, r2
 801b466:	fb26 2208 	smlad	r2, r6, r8, r2
 801b46a:	fb20 3009 	smlad	r0, r0, r9, r3
 801b46e:	fb26 000e 	smlad	r0, r6, lr, r0
 801b472:	f855 3c04 	ldr.w	r3, [r5, #-4]
 801b476:	fa2f f683 	sxtb16	r6, r3
 801b47a:	fa2f f393 	sxtb16	r3, r3, ror #8
 801b47e:	fb26 a101 	smlad	r1, r6, r1, sl
 801b482:	fb26 cc09 	smlad	ip, r6, r9, ip
 801b486:	fb23 1108 	smlad	r1, r3, r8, r1
 801b48a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801b48e:	f8d4 a014 	ldr.w	sl, [r4, #20]
 801b492:	fb23 ce0e 	smlad	lr, r3, lr, ip
 801b496:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801b49a:	69a3      	ldr	r3, [r4, #24]
 801b49c:	f8d4 901c 	ldr.w	r9, [r4, #28]
 801b4a0:	fa2f f68c 	sxtb16	r6, ip
 801b4a4:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801b4a8:	fb26 2208 	smlad	r2, r6, r8, r2
 801b4ac:	fb2c 220a 	smlad	r2, ip, sl, r2
 801b4b0:	fb26 0603 	smlad	r6, r6, r3, r0
 801b4b4:	fb2c 6609 	smlad	r6, ip, r9, r6
 801b4b8:	6828      	ldr	r0, [r5, #0]
 801b4ba:	fa2f fc80 	sxtb16	ip, r0
 801b4be:	fa2f f090 	sxtb16	r0, r0, ror #8
 801b4c2:	fb2c 1808 	smlad	r8, ip, r8, r1
 801b4c6:	fb2c ee03 	smlad	lr, ip, r3, lr
 801b4ca:	fb20 880a 	smlad	r8, r0, sl, r8
 801b4ce:	f8d4 a020 	ldr.w	sl, [r4, #32]
 801b4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4d4:	fb20 e909 	smlad	r9, r0, r9, lr
 801b4d8:	68b9      	ldr	r1, [r7, #8]
 801b4da:	f8d4 e028 	ldr.w	lr, [r4, #40]	; 0x28
 801b4de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b4e0:	fa2f fc81 	sxtb16	ip, r1
 801b4e4:	fa2f f191 	sxtb16	r1, r1, ror #8
 801b4e8:	fb2c 220a 	smlad	r2, ip, sl, r2
 801b4ec:	fb21 2203 	smlad	r2, r1, r3, r2
 801b4f0:	fb2c 6c0e 	smlad	ip, ip, lr, r6
 801b4f4:	fb21 c100 	smlad	r1, r1, r0, ip
 801b4f8:	686e      	ldr	r6, [r5, #4]
 801b4fa:	fa2f fc86 	sxtb16	ip, r6
 801b4fe:	fa2f f696 	sxtb16	r6, r6, ror #8
 801b502:	fb2c 8a0a 	smlad	sl, ip, sl, r8
 801b506:	fb2c 990e 	smlad	r9, ip, lr, r9
 801b50a:	fb26 a803 	smlad	r8, r6, r3, sl
 801b50e:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 801b512:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 801b516:	fb26 9000 	smlad	r0, r6, r0, r9
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	3440      	adds	r4, #64	; 0x40
 801b51e:	f854 9c08 	ldr.w	r9, [r4, #-8]
 801b522:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801b526:	fa2f fc83 	sxtb16	ip, r3
 801b52a:	fa2f f393 	sxtb16	r3, r3, ror #8
 801b52e:	fb2c 220e 	smlad	r2, ip, lr, r2
 801b532:	fb23 220a 	smlad	r2, r3, sl, r2
 801b536:	fb2c 1109 	smlad	r1, ip, r9, r1
 801b53a:	fb23 1307 	smlad	r3, r3, r7, r1
 801b53e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801b542:	fa2f f18c 	sxtb16	r1, ip
 801b546:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 801b54a:	fb21 880e 	smlad	r8, r1, lr, r8
 801b54e:	fb21 0009 	smlad	r0, r1, r9, r0
 801b552:	fb2c 8a0a 	smlad	sl, ip, sl, r8
 801b556:	fb2c 0c07 	smlad	ip, ip, r7, r0
 801b55a:	3510      	adds	r5, #16
 801b55c:	9903      	ldr	r1, [sp, #12]
 801b55e:	428d      	cmp	r5, r1
 801b560:	f47f af70 	bne.w	801b444 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x228>
 801b564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b566:	9804      	ldr	r0, [sp, #16]
 801b568:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b56c:	4689      	mov	r9, r1
 801b56e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b570:	448b      	add	fp, r1
 801b572:	4420      	add	r0, r4
 801b574:	9004      	str	r0, [sp, #16]
 801b576:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b578:	4589      	cmp	r9, r1
 801b57a:	f280 81c8 	bge.w	801b90e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6f2>
 801b57e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b580:	f8cd 9020 	str.w	r9, [sp, #32]
 801b584:	eba1 0109 	sub.w	r1, r1, r9
 801b588:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801b58c:	0889      	lsrs	r1, r1, #2
 801b58e:	4608      	mov	r0, r1
 801b590:	9107      	str	r1, [sp, #28]
 801b592:	9904      	ldr	r1, [sp, #16]
 801b594:	3001      	adds	r0, #1
 801b596:	eb0b 0880 	add.w	r8, fp, r0, lsl #2
 801b59a:	9003      	str	r0, [sp, #12]
 801b59c:	f8d1 e000 	ldr.w	lr, [r1]
 801b5a0:	3110      	adds	r1, #16
 801b5a2:	f85b 0b04 	ldr.w	r0, [fp], #4
 801b5a6:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 801b5aa:	f851 7c08 	ldr.w	r7, [r1, #-8]
 801b5ae:	f851 5c04 	ldr.w	r5, [r1, #-4]
 801b5b2:	fa2f f480 	sxtb16	r4, r0
 801b5b6:	fa2f f090 	sxtb16	r0, r0, ror #8
 801b5ba:	fb24 220e 	smlad	r2, r4, lr, r2
 801b5be:	fb20 2206 	smlad	r2, r0, r6, r2
 801b5c2:	fb24 3307 	smlad	r3, r4, r7, r3
 801b5c6:	fb20 3305 	smlad	r3, r0, r5, r3
 801b5ca:	f85b 0009 	ldr.w	r0, [fp, r9]
 801b5ce:	fa2f f480 	sxtb16	r4, r0
 801b5d2:	fa2f f090 	sxtb16	r0, r0, ror #8
 801b5d6:	fb24 aa0e 	smlad	sl, r4, lr, sl
 801b5da:	fb24 cc07 	smlad	ip, r4, r7, ip
 801b5de:	fb20 aa06 	smlad	sl, r0, r6, sl
 801b5e2:	fb20 cc05 	smlad	ip, r0, r5, ip
 801b5e6:	45c3      	cmp	fp, r8
 801b5e8:	d1d8      	bne.n	801b59c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x380>
 801b5ea:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b5ee:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801b5f2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801b5f6:	9807      	ldr	r0, [sp, #28]
 801b5f8:	9104      	str	r1, [sp, #16]
 801b5fa:	f109 0104 	add.w	r1, r9, #4
 801b5fe:	eb01 0980 	add.w	r9, r1, r0, lsl #2
 801b602:	9e06      	ldr	r6, [sp, #24]
 801b604:	454e      	cmp	r6, r9
 801b606:	dd59      	ble.n	801b6bc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4a0>
 801b608:	9d04      	ldr	r5, [sp, #16]
 801b60a:	f998 1000 	ldrsb.w	r1, [r8]
 801b60e:	f9b5 4000 	ldrsh.w	r4, [r5]
 801b612:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 801b616:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801b618:	fb14 2201 	smlabb	r2, r4, r1, r2
 801b61c:	fb10 3301 	smlabb	r3, r0, r1, r3
 801b620:	f918 1007 	ldrsb.w	r1, [r8, r7]
 801b624:	fb14 aa01 	smlabb	sl, r4, r1, sl
 801b628:	fb10 cc01 	smlabb	ip, r0, r1, ip
 801b62c:	f109 0101 	add.w	r1, r9, #1
 801b630:	42b1      	cmp	r1, r6
 801b632:	da3b      	bge.n	801b6ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x490>
 801b634:	eb08 0107 	add.w	r1, r8, r7
 801b638:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 801b63c:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 801b640:	f991 1001 	ldrsb.w	r1, [r1, #1]
 801b644:	fb10 cc01 	smlabb	ip, r0, r1, ip
 801b648:	fb14 aa01 	smlabb	sl, r4, r1, sl
 801b64c:	f998 1001 	ldrsb.w	r1, [r8, #1]
 801b650:	fb10 3301 	smlabb	r3, r0, r1, r3
 801b654:	f108 0002 	add.w	r0, r8, #2
 801b658:	fb14 2201 	smlabb	r2, r4, r1, r2
 801b65c:	f109 0102 	add.w	r1, r9, #2
 801b660:	42b1      	cmp	r1, r6
 801b662:	da23      	bge.n	801b6ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x490>
 801b664:	57c1      	ldrsb	r1, [r0, r7]
 801b666:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801b66a:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 801b66e:	fb14 aa01 	smlabb	sl, r4, r1, sl
 801b672:	fb10 cc01 	smlabb	ip, r0, r1, ip
 801b676:	f998 1002 	ldrsb.w	r1, [r8, #2]
 801b67a:	fb10 3301 	smlabb	r3, r0, r1, r3
 801b67e:	f108 0003 	add.w	r0, r8, #3
 801b682:	fb14 2201 	smlabb	r2, r4, r1, r2
 801b686:	f109 0103 	add.w	r1, r9, #3
 801b68a:	42b1      	cmp	r1, r6
 801b68c:	da0e      	bge.n	801b6ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x490>
 801b68e:	57c1      	ldrsb	r1, [r0, r7]
 801b690:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 801b694:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
 801b698:	fb14 aa01 	smlabb	sl, r4, r1, sl
 801b69c:	fb10 cc01 	smlabb	ip, r0, r1, ip
 801b6a0:	f998 1003 	ldrsb.w	r1, [r8, #3]
 801b6a4:	fb14 2201 	smlabb	r2, r4, r1, r2
 801b6a8:	fb10 3301 	smlabb	r3, r0, r1, r3
 801b6ac:	9906      	ldr	r1, [sp, #24]
 801b6ae:	9804      	ldr	r0, [sp, #16]
 801b6b0:	eba1 0109 	sub.w	r1, r1, r9
 801b6b4:	4488      	add	r8, r1
 801b6b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b6ba:	9104      	str	r1, [sp, #16]
 801b6bc:	9905      	ldr	r1, [sp, #20]
 801b6be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b6c0:	3101      	adds	r1, #1
 801b6c2:	eb08 0b00 	add.w	fp, r8, r0
 801b6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6c8:	9105      	str	r1, [sp, #20]
 801b6ca:	4288      	cmp	r0, r1
 801b6cc:	f47f aeab 	bne.w	801b426 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x20a>
 801b6d0:	461c      	mov	r4, r3
 801b6d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	f040 813a 	bne.w	801b94e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x732>
 801b6da:	9924      	ldr	r1, [sp, #144]	; 0x90
 801b6dc:	0052      	lsls	r2, r2, #1
 801b6de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b6e0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801b6e4:	fb52 1203 	smmla	r2, r2, r3, r1
 801b6e8:	fb5a 1a03 	smmla	sl, sl, r3, r1
 801b6ec:	9920      	ldr	r1, [sp, #128]	; 0x80
 801b6ee:	410a      	asrs	r2, r1
 801b6f0:	f302 0307 	ssat	r3, #8, r2
 801b6f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b6f6:	fa4a fa01 	asr.w	sl, sl, r1
 801b6fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b6fe:	f30a 0307 	ssat	r3, #8, sl
 801b702:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b704:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b708:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	f040 8104 	bne.w	801b918 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6fc>
 801b710:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801b712:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 801b716:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b718:	ea4f 044c 	mov.w	r4, ip, lsl #1
 801b71c:	fb5e 2e03 	smmla	lr, lr, r3, r2
 801b720:	fb54 2403 	smmla	r4, r4, r3, r2
 801b724:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b726:	fa4e fe02 	asr.w	lr, lr, r2
 801b72a:	f30e 0307 	ssat	r3, #8, lr
 801b72e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b730:	4114      	asrs	r4, r2
 801b732:	700b      	strb	r3, [r1, #0]
 801b734:	f304 0307 	ssat	r3, #8, r4
 801b738:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b73a:	7013      	strb	r3, [r2, #0]
 801b73c:	460a      	mov	r2, r1
 801b73e:	9921      	ldr	r1, [sp, #132]	; 0x84
 801b740:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b742:	440a      	add	r2, r1
 801b744:	3302      	adds	r3, #2
 801b746:	9216      	str	r2, [sp, #88]	; 0x58
 801b748:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b74a:	9318      	str	r3, [sp, #96]	; 0x60
 801b74c:	440a      	add	r2, r1
 801b74e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801b750:	9215      	str	r2, [sp, #84]	; 0x54
 801b752:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b754:	440a      	add	r2, r1
 801b756:	9217      	str	r2, [sp, #92]	; 0x5c
 801b758:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b75a:	4293      	cmp	r3, r2
 801b75c:	f6ff ae4f 	blt.w	801b3fe <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1e2>
 801b760:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b762:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801b764:	4413      	add	r3, r2
 801b766:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b768:	9326      	str	r3, [sp, #152]	; 0x98
 801b76a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b76c:	4413      	add	r3, r2
 801b76e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801b770:	18d3      	adds	r3, r2, r3
 801b772:	9305      	str	r3, [sp, #20]
 801b774:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801b776:	2b00      	cmp	r3, #0
 801b778:	f040 813d 	bne.w	801b9f6 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7da>
 801b77c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b77e:	993e      	ldr	r1, [sp, #248]	; 0xf8
 801b780:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801b782:	440a      	add	r2, r1
 801b784:	3301      	adds	r3, #1
 801b786:	922a      	str	r2, [sp, #168]	; 0xa8
 801b788:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801b78a:	9335      	str	r3, [sp, #212]	; 0xd4
 801b78c:	4293      	cmp	r3, r2
 801b78e:	f47f ae23 	bne.w	801b3d8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x1bc>
 801b792:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801b794:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 801b796:	4413      	add	r3, r2
 801b798:	9332      	str	r3, [sp, #200]	; 0xc8
 801b79a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b79c:	3302      	adds	r3, #2
 801b79e:	9329      	str	r3, [sp, #164]	; 0xa4
 801b7a0:	9b60      	ldr	r3, [sp, #384]	; 0x180
 801b7a2:	b11b      	cbz	r3, 801b7ac <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x590>
 801b7a4:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801b7a6:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 801b7a8:	4413      	add	r3, r2
 801b7aa:	935f      	str	r3, [sp, #380]	; 0x17c
 801b7ac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b7ae:	9a44      	ldr	r2, [sp, #272]	; 0x110
 801b7b0:	3304      	adds	r3, #4
 801b7b2:	932b      	str	r3, [sp, #172]	; 0xac
 801b7b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b7b6:	3308      	adds	r3, #8
 801b7b8:	9327      	str	r3, [sp, #156]	; 0x9c
 801b7ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b7bc:	3308      	adds	r3, #8
 801b7be:	9328      	str	r3, [sp, #160]	; 0xa0
 801b7c0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b7c2:	3308      	adds	r3, #8
 801b7c4:	9333      	str	r3, [sp, #204]	; 0xcc
 801b7c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b7c8:	4293      	cmp	r3, r2
 801b7ca:	f47f adaf 	bne.w	801b32c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x110>
 801b7ce:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b7d0:	e9dd 2138 	ldrd	r2, r1, [sp, #224]	; 0xe0
 801b7d4:	fb01 3302 	mla	r3, r1, r2, r3
 801b7d8:	9334      	str	r3, [sp, #208]	; 0xd0
 801b7da:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801b7dc:	07db      	lsls	r3, r3, #31
 801b7de:	f140 8092 	bpl.w	801b906 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ea>
 801b7e2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	f000 808e 	beq.w	801b906 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ea>
 801b7ea:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801b7ec:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 801b7f0:	9a54      	ldr	r2, [sp, #336]	; 0x150
 801b7f2:	4499      	add	r9, r3
 801b7f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801b7f6:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801b7fa:	9307      	str	r3, [sp, #28]
 801b7fc:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801b7fe:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 801b802:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 801b804:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 801b808:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b80c:	4413      	add	r3, r2
 801b80e:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 801b810:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b814:	9308      	str	r3, [sp, #32]
 801b816:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d074      	beq.n	801b906 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6ea>
 801b81c:	9955      	ldr	r1, [sp, #340]	; 0x154
 801b81e:	9a46      	ldr	r2, [sp, #280]	; 0x118
 801b820:	9e5d      	ldr	r6, [sp, #372]	; 0x174
 801b822:	fb01 f202 	mul.w	r2, r1, r2
 801b826:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801b828:	920b      	str	r2, [sp, #44]	; 0x2c
 801b82a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 801b82c:	fb01 f202 	mul.w	r2, r1, r2
 801b830:	9906      	ldr	r1, [sp, #24]
 801b832:	920a      	str	r2, [sp, #40]	; 0x28
 801b834:	468e      	mov	lr, r1
 801b836:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801b838:	440a      	add	r2, r1
 801b83a:	4693      	mov	fp, r2
 801b83c:	9a54      	ldr	r2, [sp, #336]	; 0x150
 801b83e:	fb02 f303 	mul.w	r3, r2, r3
 801b842:	9306      	str	r3, [sp, #24]
 801b844:	2300      	movs	r3, #0
 801b846:	9304      	str	r3, [sp, #16]
 801b848:	2300      	movs	r3, #0
 801b84a:	f8cd b00c 	str.w	fp, [sp, #12]
 801b84e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801b852:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 801b856:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801b85a:	9305      	str	r3, [sp, #20]
 801b85c:	9b07      	ldr	r3, [sp, #28]
 801b85e:	6819      	ldr	r1, [r3, #0]
 801b860:	f1bb 0f00 	cmp.w	fp, #0
 801b864:	d01e      	beq.n	801b8a4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x688>
 801b866:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801b86a:	2700      	movs	r7, #0
 801b86c:	9d03      	ldr	r5, [sp, #12]
 801b86e:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
 801b872:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 801b876:	f1be 0f00 	cmp.w	lr, #0
 801b87a:	eba5 020e 	sub.w	r2, r5, lr
 801b87e:	dd0b      	ble.n	801b898 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x67c>
 801b880:	f10c 30ff 	add.w	r0, ip, #4294967295
 801b884:	f912 3b01 	ldrsb.w	r3, [r2], #1
 801b888:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 801b88c:	1b9b      	subs	r3, r3, r6
 801b88e:	42aa      	cmp	r2, r5
 801b890:	fb04 1103 	mla	r1, r4, r3, r1
 801b894:	d1f6      	bne.n	801b884 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x668>
 801b896:	44f4      	add	ip, lr
 801b898:	3701      	adds	r7, #1
 801b89a:	4445      	add	r5, r8
 801b89c:	45bb      	cmp	fp, r7
 801b89e:	d1ea      	bne.n	801b876 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x65a>
 801b8a0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801b8a4:	9b08      	ldr	r3, [sp, #32]
 801b8a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b8aa:	2815      	cmp	r0, #21
 801b8ac:	f340 8291 	ble.w	801bdd2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbb6>
 801b8b0:	1e83      	subs	r3, r0, #2
 801b8b2:	1e42      	subs	r2, r0, #1
 801b8b4:	2001      	movs	r0, #1
 801b8b6:	4098      	lsls	r0, r3
 801b8b8:	f8da 3000 	ldr.w	r3, [sl]
 801b8bc:	fb51 0303 	smmla	r3, r1, r3, r0
 801b8c0:	fa43 f202 	asr.w	r2, r3, r2
 801b8c4:	f8d9 3000 	ldr.w	r3, [r9]
 801b8c8:	4413      	add	r3, r2
 801b8ca:	f303 0307 	ssat	r3, #8, r3
 801b8ce:	f888 3000 	strb.w	r3, [r8]
 801b8d2:	9a54      	ldr	r2, [sp, #336]	; 0x150
 801b8d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b8d6:	4490      	add	r8, r2
 801b8d8:	9a03      	ldr	r2, [sp, #12]
 801b8da:	9b05      	ldr	r3, [sp, #20]
 801b8dc:	440a      	add	r2, r1
 801b8de:	3301      	adds	r3, #1
 801b8e0:	9203      	str	r2, [sp, #12]
 801b8e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b8e4:	9305      	str	r3, [sp, #20]
 801b8e6:	4293      	cmp	r3, r2
 801b8e8:	d1b8      	bne.n	801b85c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x640>
 801b8ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b8ec:	9906      	ldr	r1, [sp, #24]
 801b8ee:	9b04      	ldr	r3, [sp, #16]
 801b8f0:	440a      	add	r2, r1
 801b8f2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801b8f6:	3301      	adds	r3, #1
 801b8f8:	9229      	str	r2, [sp, #164]	; 0xa4
 801b8fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8fc:	9304      	str	r3, [sp, #16]
 801b8fe:	4493      	add	fp, r2
 801b900:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801b902:	4293      	cmp	r3, r2
 801b904:	d1a0      	bne.n	801b848 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x62c>
 801b906:	2000      	movs	r0, #0
 801b908:	b049      	add	sp, #292	; 0x124
 801b90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b90e:	46d8      	mov	r8, fp
 801b910:	e677      	b.n	801b602 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x3e6>
 801b912:	f04f 0900 	mov.w	r9, #0
 801b916:	e62e      	b.n	801b576 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x35a>
 801b918:	3301      	adds	r3, #1
 801b91a:	d034      	beq.n	801b986 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x76a>
 801b91c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b91e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801b920:	fb54 2e03 	smmla	lr, r4, r3, r2
 801b924:	fb5c 2403 	smmla	r4, ip, r3, r2
 801b928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b92a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801b92c:	3b01      	subs	r3, #1
 801b92e:	fa4e f203 	asr.w	r2, lr, r3
 801b932:	440a      	add	r2, r1
 801b934:	f302 0207 	ssat	r2, #8, r2
 801b938:	fa44 f303 	asr.w	r3, r4, r3
 801b93c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b93e:	440b      	add	r3, r1
 801b940:	7002      	strb	r2, [r0, #0]
 801b942:	f303 0307 	ssat	r3, #8, r3
 801b946:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b948:	7013      	strb	r3, [r2, #0]
 801b94a:	4602      	mov	r2, r0
 801b94c:	e6f7      	b.n	801b73e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x522>
 801b94e:	3301      	adds	r3, #1
 801b950:	d02e      	beq.n	801b9b0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x794>
 801b952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b954:	992f      	ldr	r1, [sp, #188]	; 0xbc
 801b956:	fb52 1203 	smmla	r2, r2, r3, r1
 801b95a:	fb5a 1a03 	smmla	sl, sl, r3, r1
 801b95e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b960:	9924      	ldr	r1, [sp, #144]	; 0x90
 801b962:	3b01      	subs	r3, #1
 801b964:	411a      	asrs	r2, r3
 801b966:	440a      	add	r2, r1
 801b968:	f302 0207 	ssat	r2, #8, r2
 801b96c:	fa4a fa03 	asr.w	sl, sl, r3
 801b970:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b972:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b976:	eb0a 0301 	add.w	r3, sl, r1
 801b97a:	f303 0307 	ssat	r3, #8, r3
 801b97e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b980:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b984:	e6c0      	b.n	801b708 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4ec>
 801b986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b988:	4622      	mov	r2, r4
 801b98a:	f1c3 0301 	rsb	r3, r3, #1
 801b98e:	409a      	lsls	r2, r3
 801b990:	f302 021f 	ssat	r2, #32, r2
 801b994:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801b996:	fb52 f211 	smmulr	r2, r2, r1
 801b99a:	fa0c f303 	lsl.w	r3, ip, r3
 801b99e:	f303 031f 	ssat	r3, #32, r3
 801b9a2:	fb53 f311 	smmulr	r3, r3, r1
 801b9a6:	9925      	ldr	r1, [sp, #148]	; 0x94
 801b9a8:	440a      	add	r2, r1
 801b9aa:	f302 0207 	ssat	r2, #8, r2
 801b9ae:	e7c5      	b.n	801b93c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x720>
 801b9b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b9b2:	f1c3 0301 	rsb	r3, r3, #1
 801b9b6:	409a      	lsls	r2, r3
 801b9b8:	f302 021f 	ssat	r2, #32, r2
 801b9bc:	9922      	ldr	r1, [sp, #136]	; 0x88
 801b9be:	fb52 f211 	smmulr	r2, r2, r1
 801b9c2:	fa0a f303 	lsl.w	r3, sl, r3
 801b9c6:	f303 031f 	ssat	r3, #32, r3
 801b9ca:	fb53 f311 	smmulr	r3, r3, r1
 801b9ce:	9924      	ldr	r1, [sp, #144]	; 0x90
 801b9d0:	440a      	add	r2, r1
 801b9d2:	f302 0207 	ssat	r2, #8, r2
 801b9d6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b9d8:	440b      	add	r3, r1
 801b9da:	f800 2c01 	strb.w	r2, [r0, #-1]
 801b9de:	f303 0307 	ssat	r3, #8, r3
 801b9e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b9e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b9e8:	e68e      	b.n	801b708 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4ec>
 801b9ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b9ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b9ee:	469c      	mov	ip, r3
 801b9f0:	461c      	mov	r4, r3
 801b9f2:	4692      	mov	sl, r2
 801b9f4:	e66d      	b.n	801b6d2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x4b6>
 801b9f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b9f8:	2b01      	cmp	r3, #1
 801b9fa:	f000 8143 	beq.w	801bc84 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa68>
 801b9fe:	9b05      	ldr	r3, [sp, #20]
 801ba00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ba02:	4413      	add	r3, r2
 801ba04:	9305      	str	r3, [sp, #20]
 801ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	f000 8143 	beq.w	801bc94 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa78>
 801ba0e:	9b06      	ldr	r3, [sp, #24]
 801ba10:	f8dd 917c 	ldr.w	r9, [sp, #380]	; 0x17c
 801ba14:	1eda      	subs	r2, r3, #3
 801ba16:	3b04      	subs	r3, #4
 801ba18:	9208      	str	r2, [sp, #32]
 801ba1a:	9a05      	ldr	r2, [sp, #20]
 801ba1c:	930c      	str	r3, [sp, #48]	; 0x30
 801ba1e:	9203      	str	r2, [sp, #12]
 801ba20:	2200      	movs	r2, #0
 801ba22:	e9dd ab1b 	ldrd	sl, fp, [sp, #108]	; 0x6c
 801ba26:	9204      	str	r2, [sp, #16]
 801ba28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba2a:	9a03      	ldr	r2, [sp, #12]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	4611      	mov	r1, r2
 801ba30:	f340 80ff 	ble.w	801bc32 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa16>
 801ba34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba36:	464b      	mov	r3, r9
 801ba38:	188f      	adds	r7, r1, r2
 801ba3a:	6808      	ldr	r0, [r1, #0]
 801ba3c:	fa2f f280 	sxtb16	r2, r0
 801ba40:	fa2f f090 	sxtb16	r0, r0, ror #8
 801ba44:	681c      	ldr	r4, [r3, #0]
 801ba46:	fb22 a404 	smlad	r4, r2, r4, sl
 801ba4a:	685d      	ldr	r5, [r3, #4]
 801ba4c:	fb20 4605 	smlad	r6, r0, r5, r4
 801ba50:	689c      	ldr	r4, [r3, #8]
 801ba52:	fb22 b204 	smlad	r2, r2, r4, fp
 801ba56:	68dc      	ldr	r4, [r3, #12]
 801ba58:	fb20 2004 	smlad	r0, r0, r4, r2
 801ba5c:	684a      	ldr	r2, [r1, #4]
 801ba5e:	fa2f f482 	sxtb16	r4, r2
 801ba62:	fa2f f292 	sxtb16	r2, r2, ror #8
 801ba66:	691d      	ldr	r5, [r3, #16]
 801ba68:	fb24 6505 	smlad	r5, r4, r5, r6
 801ba6c:	695e      	ldr	r6, [r3, #20]
 801ba6e:	fb22 5506 	smlad	r5, r2, r6, r5
 801ba72:	699e      	ldr	r6, [r3, #24]
 801ba74:	fb24 0006 	smlad	r0, r4, r6, r0
 801ba78:	69dc      	ldr	r4, [r3, #28]
 801ba7a:	fb22 0204 	smlad	r2, r2, r4, r0
 801ba7e:	688e      	ldr	r6, [r1, #8]
 801ba80:	fa2f f086 	sxtb16	r0, r6
 801ba84:	fa2f f696 	sxtb16	r6, r6, ror #8
 801ba88:	6a1c      	ldr	r4, [r3, #32]
 801ba8a:	fb20 5404 	smlad	r4, r0, r4, r5
 801ba8e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801ba90:	fb26 4505 	smlad	r5, r6, r5, r4
 801ba94:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 801ba98:	fb20 200b 	smlad	r0, r0, fp, r2
 801ba9c:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 801baa0:	fb26 000b 	smlad	r0, r6, fp, r0
 801baa4:	68ca      	ldr	r2, [r1, #12]
 801baa6:	3340      	adds	r3, #64	; 0x40
 801baa8:	f853 4c10 	ldr.w	r4, [r3, #-16]
 801baac:	3110      	adds	r1, #16
 801baae:	f853 ac0c 	ldr.w	sl, [r3, #-12]
 801bab2:	f853 cc08 	ldr.w	ip, [r3, #-8]
 801bab6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801baba:	fa2f fb82 	sxtb16	fp, r2
 801babe:	fa2f f292 	sxtb16	r2, r2, ror #8
 801bac2:	fb2b 5404 	smlad	r4, fp, r4, r5
 801bac6:	fb22 4a0a 	smlad	sl, r2, sl, r4
 801baca:	fb2b 0b0c 	smlad	fp, fp, ip, r0
 801bace:	fb22 bb06 	smlad	fp, r2, r6, fp
 801bad2:	428f      	cmp	r7, r1
 801bad4:	d1b1      	bne.n	801ba3a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x81e>
 801bad6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bad8:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 801badc:	4499      	add	r9, r3
 801bade:	9b08      	ldr	r3, [sp, #32]
 801bae0:	459e      	cmp	lr, r3
 801bae2:	f280 80a4 	bge.w	801bc2e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa12>
 801bae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bae8:	4648      	mov	r0, r9
 801baea:	eba3 080e 	sub.w	r8, r3, lr
 801baee:	ea4f 0898 	mov.w	r8, r8, lsr #2
 801baf2:	f108 0301 	add.w	r3, r8, #1
 801baf6:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 801bafa:	9307      	str	r3, [sp, #28]
 801bafc:	6804      	ldr	r4, [r0, #0]
 801bafe:	3010      	adds	r0, #16
 801bb00:	f851 3b04 	ldr.w	r3, [r1], #4
 801bb04:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 801bb08:	f850 6c08 	ldr.w	r6, [r0, #-8]
 801bb0c:	f850 5c04 	ldr.w	r5, [r0, #-4]
 801bb10:	fa2f f283 	sxtb16	r2, r3
 801bb14:	fa2f f393 	sxtb16	r3, r3, ror #8
 801bb18:	fb22 a404 	smlad	r4, r2, r4, sl
 801bb1c:	fb23 4a07 	smlad	sl, r3, r7, r4
 801bb20:	fb22 b206 	smlad	r2, r2, r6, fp
 801bb24:	fb23 2b05 	smlad	fp, r3, r5, r2
 801bb28:	4561      	cmp	r1, ip
 801bb2a:	d1e7      	bne.n	801bafc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8e0>
 801bb2c:	9b07      	ldr	r3, [sp, #28]
 801bb2e:	f10e 0e04 	add.w	lr, lr, #4
 801bb32:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 801bb36:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 801bb3a:	9906      	ldr	r1, [sp, #24]
 801bb3c:	4571      	cmp	r1, lr
 801bb3e:	dd38      	ble.n	801bbb2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x996>
 801bb40:	f99c 3000 	ldrsb.w	r3, [ip]
 801bb44:	f8b9 2000 	ldrh.w	r2, [r9]
 801bb48:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801bb4c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801bb50:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801bb54:	f10e 0301 	add.w	r3, lr, #1
 801bb58:	4299      	cmp	r1, r3
 801bb5a:	dd25      	ble.n	801bba8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x98c>
 801bb5c:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 801bb60:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801bb64:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801bb68:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801bb6c:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801bb70:	f10e 0302 	add.w	r3, lr, #2
 801bb74:	4299      	cmp	r1, r3
 801bb76:	dd17      	ble.n	801bba8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x98c>
 801bb78:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 801bb7c:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 801bb80:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801bb84:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 801bb88:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801bb8c:	f10e 0303 	add.w	r3, lr, #3
 801bb90:	4299      	cmp	r1, r3
 801bb92:	dd09      	ble.n	801bba8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x98c>
 801bb94:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 801bb98:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 801bb9c:	fb12 aa03 	smlabb	sl, r2, r3, sl
 801bba0:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801bba4:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801bba8:	9b06      	ldr	r3, [sp, #24]
 801bbaa:	eba3 0e0e 	sub.w	lr, r3, lr
 801bbae:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 801bbb2:	9a03      	ldr	r2, [sp, #12]
 801bbb4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801bbb6:	9b04      	ldr	r3, [sp, #16]
 801bbb8:	440a      	add	r2, r1
 801bbba:	3301      	adds	r3, #1
 801bbbc:	9203      	str	r2, [sp, #12]
 801bbbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbc0:	9304      	str	r3, [sp, #16]
 801bbc2:	429a      	cmp	r2, r3
 801bbc4:	f47f af30 	bne.w	801ba28 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x80c>
 801bbc8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bbca:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801bbce:	2915      	cmp	r1, #21
 801bbd0:	dd44      	ble.n	801bc5c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa40>
 801bbd2:	1e8b      	subs	r3, r1, #2
 801bbd4:	2201      	movs	r2, #1
 801bbd6:	3901      	subs	r1, #1
 801bbd8:	409a      	lsls	r2, r3
 801bbda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bbdc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bbe0:	fb5a 2303 	smmla	r3, sl, r3, r2
 801bbe4:	fa43 f101 	asr.w	r1, r3, r1
 801bbe8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bbea:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bbee:	440b      	add	r3, r1
 801bbf0:	f303 0307 	ssat	r3, #8, r3
 801bbf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bbf6:	7013      	strb	r3, [r2, #0]
 801bbf8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bbfa:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bbfe:	2915      	cmp	r1, #21
 801bc00:	dd1a      	ble.n	801bc38 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa1c>
 801bc02:	1e8b      	subs	r3, r1, #2
 801bc04:	2201      	movs	r2, #1
 801bc06:	3901      	subs	r1, #1
 801bc08:	409a      	lsls	r2, r3
 801bc0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	fb5b 2303 	smmla	r3, fp, r3, r2
 801bc12:	fa43 f101 	asr.w	r1, r3, r1
 801bc16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	440b      	add	r3, r1
 801bc1c:	f303 0307 	ssat	r3, #8, r3
 801bc20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bc22:	7053      	strb	r3, [r2, #1]
 801bc24:	4613      	mov	r3, r2
 801bc26:	9a54      	ldr	r2, [sp, #336]	; 0x150
 801bc28:	4413      	add	r3, r2
 801bc2a:	9326      	str	r3, [sp, #152]	; 0x98
 801bc2c:	e5a6      	b.n	801b77c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x560>
 801bc2e:	468c      	mov	ip, r1
 801bc30:	e783      	b.n	801bb3a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x91e>
 801bc32:	f04f 0e00 	mov.w	lr, #0
 801bc36:	e752      	b.n	801bade <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x8c2>
 801bc38:	2900      	cmp	r1, #0
 801bc3a:	dd2e      	ble.n	801bc9a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa7e>
 801bc3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc3e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801bc42:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	6812      	ldr	r2, [r2, #0]
 801bc48:	fb5b 2b03 	smmla	fp, fp, r3, r2
 801bc4c:	fa4b f301 	asr.w	r3, fp, r1
 801bc50:	f303 0307 	ssat	r3, #8, r3
 801bc54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bc56:	7053      	strb	r3, [r2, #1]
 801bc58:	4613      	mov	r3, r2
 801bc5a:	e7e4      	b.n	801bc26 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa0a>
 801bc5c:	2900      	cmp	r1, #0
 801bc5e:	f340 80a1 	ble.w	801bda4 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb88>
 801bc62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc64:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801bc68:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801bc6a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bc6e:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801bc72:	fb5a 2a03 	smmla	sl, sl, r3, r2
 801bc76:	fa4a f301 	asr.w	r3, sl, r1
 801bc7a:	f303 0307 	ssat	r3, #8, r3
 801bc7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bc80:	7013      	strb	r3, [r2, #0]
 801bc82:	e7b9      	b.n	801bbf8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9dc>
 801bc84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bc86:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801bc88:	4413      	add	r3, r2
 801bc8a:	9305      	str	r3, [sp, #20]
 801bc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	f47f aebd 	bne.w	801ba0e <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x7f2>
 801bc94:	e9dd ab1b 	ldrd	sl, fp, [sp, #108]	; 0x6c
 801bc98:	e796      	b.n	801bbc8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9ac>
 801bc9a:	f1c1 0101 	rsb	r1, r1, #1
 801bc9e:	fa0b f201 	lsl.w	r2, fp, r1
 801bca2:	f302 021f 	ssat	r2, #32, r2
 801bca6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	fb52 f213 	smmulr	r2, r2, r3
 801bcae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	4413      	add	r3, r2
 801bcb4:	f303 0307 	ssat	r3, #8, r3
 801bcb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bcba:	7053      	strb	r3, [r2, #1]
 801bcbc:	4613      	mov	r3, r2
 801bcbe:	e7b2      	b.n	801bc26 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xa0a>
 801bcc0:	2301      	movs	r3, #1
 801bcc2:	931a      	str	r3, [sp, #104]	; 0x68
 801bcc4:	9b60      	ldr	r3, [sp, #384]	; 0x180
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	f47f ab5a 	bne.w	801b380 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x164>
 801bccc:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801bcce:	9b06      	ldr	r3, [sp, #24]
 801bcd0:	4601      	mov	r1, r0
 801bcd2:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 801bcd4:	9300      	str	r3, [sp, #0]
 801bcd6:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
 801bcd8:	4421      	add	r1, r4
 801bcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcdc:	f7fe fb5c 	bl	801a398 <weights_2channels_prefetch>
 801bce0:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	f43f ab50 	beq.w	801b388 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x16c>
 801bce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d06e      	beq.n	801bdcc <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbb0>
 801bcee:	2300      	movs	r3, #0
 801bcf0:	985f      	ldr	r0, [sp, #380]	; 0x17c
 801bcf2:	9937      	ldr	r1, [sp, #220]	; 0xdc
 801bcf4:	461c      	mov	r4, r3
 801bcf6:	461e      	mov	r6, r3
 801bcf8:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 801bcfa:	b33f      	cbz	r7, 801bd4c <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb30>
 801bcfc:	f100 0510 	add.w	r5, r0, #16
 801bd00:	f935 2c10 	ldrsh.w	r2, [r5, #-16]
 801bd04:	3f01      	subs	r7, #1
 801bd06:	f105 0510 	add.w	r5, r5, #16
 801bd0a:	eba4 0402 	sub.w	r4, r4, r2
 801bd0e:	f935 2c18 	ldrsh.w	r2, [r5, #-24]
 801bd12:	eba3 0302 	sub.w	r3, r3, r2
 801bd16:	f935 2c1e 	ldrsh.w	r2, [r5, #-30]
 801bd1a:	eba4 0402 	sub.w	r4, r4, r2
 801bd1e:	f935 2c16 	ldrsh.w	r2, [r5, #-22]
 801bd22:	eba3 0302 	sub.w	r3, r3, r2
 801bd26:	f935 2c1c 	ldrsh.w	r2, [r5, #-28]
 801bd2a:	eba4 0402 	sub.w	r4, r4, r2
 801bd2e:	f935 2c14 	ldrsh.w	r2, [r5, #-20]
 801bd32:	eba3 0302 	sub.w	r3, r3, r2
 801bd36:	f935 2c1a 	ldrsh.w	r2, [r5, #-26]
 801bd3a:	eba4 0402 	sub.w	r4, r4, r2
 801bd3e:	f935 2c12 	ldrsh.w	r2, [r5, #-18]
 801bd42:	eba3 0302 	sub.w	r3, r3, r2
 801bd46:	d1db      	bne.n	801bd00 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xae4>
 801bd48:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801bd4a:	4410      	add	r0, r2
 801bd4c:	b1d9      	cbz	r1, 801bd86 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb6a>
 801bd4e:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bd52:	2901      	cmp	r1, #1
 801bd54:	eba4 0402 	sub.w	r4, r4, r2
 801bd58:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bd5c:	eba3 0302 	sub.w	r3, r3, r2
 801bd60:	d00f      	beq.n	801bd82 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb66>
 801bd62:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801bd66:	2902      	cmp	r1, #2
 801bd68:	eba4 0402 	sub.w	r4, r4, r2
 801bd6c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801bd70:	eba3 0302 	sub.w	r3, r3, r2
 801bd74:	d005      	beq.n	801bd82 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xb66>
 801bd76:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801bd7a:	1aa4      	subs	r4, r4, r2
 801bd7c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bd80:	1a9b      	subs	r3, r3, r2
 801bd82:	9a40      	ldr	r2, [sp, #256]	; 0x100
 801bd84:	4410      	add	r0, r2
 801bd86:	3601      	adds	r6, #1
 801bd88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd8a:	42b2      	cmp	r2, r6
 801bd8c:	d1b4      	bne.n	801bcf8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xadc>
 801bd8e:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 801bd90:	fb02 f404 	mul.w	r4, r2, r4
 801bd94:	fb02 f303 	mul.w	r3, r2, r3
 801bd98:	f7ff baf7 	b.w	801b38a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x16e>
 801bd9c:	2301      	movs	r3, #1
 801bd9e:	9319      	str	r3, [sp, #100]	; 0x64
 801bda0:	f7ff bae0 	b.w	801b364 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x148>
 801bda4:	f1c1 0101 	rsb	r1, r1, #1
 801bda8:	fa0a f201 	lsl.w	r2, sl, r1
 801bdac:	f302 021f 	ssat	r2, #32, r2
 801bdb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bdb2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bdb6:	fb52 f213 	smmulr	r2, r2, r3
 801bdba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bdbc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bdc0:	4413      	add	r3, r2
 801bdc2:	f303 0307 	ssat	r3, #8, r3
 801bdc6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bdc8:	7013      	strb	r3, [r2, #0]
 801bdca:	e715      	b.n	801bbf8 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x9dc>
 801bdcc:	461c      	mov	r4, r3
 801bdce:	f7ff badc 	b.w	801b38a <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x16e>
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	dd0c      	ble.n	801bdf0 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0xbd4>
 801bdd6:	0049      	lsls	r1, r1, #1
 801bdd8:	f8da 3000 	ldr.w	r3, [sl]
 801bddc:	f8d9 2000 	ldr.w	r2, [r9]
 801bde0:	fb51 2303 	smmla	r3, r1, r3, r2
 801bde4:	4103      	asrs	r3, r0
 801bde6:	f303 0307 	ssat	r3, #8, r3
 801bdea:	f888 3000 	strb.w	r3, [r8]
 801bdee:	e570      	b.n	801b8d2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6b6>
 801bdf0:	f1c0 0201 	rsb	r2, r0, #1
 801bdf4:	fa01 f202 	lsl.w	r2, r1, r2
 801bdf8:	f302 021f 	ssat	r2, #32, r2
 801bdfc:	f8da 3000 	ldr.w	r3, [sl]
 801be00:	fb52 f213 	smmulr	r2, r2, r3
 801be04:	f8d9 3000 	ldr.w	r3, [r9]
 801be08:	4413      	add	r3, r2
 801be0a:	f303 0307 	ssat	r3, #8, r3
 801be0e:	f888 3000 	strb.w	r3, [r8]
 801be12:	e55e      	b.n	801b8d2 <st_sssa8_ch_nn_mat_mult_conv2d_nt_t+0x6b6>

0801be14 <st_int8_fill>:
 801be14:	078b      	lsls	r3, r1, #30
 801be16:	468c      	mov	ip, r1
 801be18:	d00a      	beq.n	801be30 <st_int8_fill+0x1c>
 801be1a:	b912      	cbnz	r2, 801be22 <st_int8_fill+0xe>
 801be1c:	e045      	b.n	801beaa <st_int8_fill+0x96>
 801be1e:	2a00      	cmp	r2, #0
 801be20:	d044      	beq.n	801beac <st_int8_fill+0x98>
 801be22:	f80c 0b01 	strb.w	r0, [ip], #1
 801be26:	f01c 0f03 	tst.w	ip, #3
 801be2a:	f102 32ff 	add.w	r2, r2, #4294967295
 801be2e:	d1f6      	bne.n	801be1e <st_int8_fill+0xa>
 801be30:	b2c3      	uxtb	r3, r0
 801be32:	0911      	lsrs	r1, r2, #4
 801be34:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801be38:	b510      	push	{r4, lr}
 801be3a:	ea4f 2400 	mov.w	r4, r0, lsl #8
 801be3e:	b2a4      	uxth	r4, r4
 801be40:	ea44 0403 	orr.w	r4, r4, r3
 801be44:	ea4f 4300 	mov.w	r3, r0, lsl #16
 801be48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801be4c:	ea44 0403 	orr.w	r4, r4, r3
 801be50:	d043      	beq.n	801beda <st_int8_fill+0xc6>
 801be52:	1e4b      	subs	r3, r1, #1
 801be54:	2b04      	cmp	r3, #4
 801be56:	d92a      	bls.n	801beae <st_int8_fill+0x9a>
 801be58:	f01c 0f07 	tst.w	ip, #7
 801be5c:	d127      	bne.n	801beae <st_int8_fill+0x9a>
 801be5e:	f10c 0310 	add.w	r3, ip, #16
 801be62:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 801be66:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 801be6a:	e943 4404 	strd	r4, r4, [r3, #-16]
 801be6e:	e943 4402 	strd	r4, r4, [r3, #-8]
 801be72:	3310      	adds	r3, #16
 801be74:	428b      	cmp	r3, r1
 801be76:	d1f8      	bne.n	801be6a <st_int8_fill+0x56>
 801be78:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801be7c:	44f4      	add	ip, lr
 801be7e:	f002 0203 	and.w	r2, r2, #3
 801be82:	b15b      	cbz	r3, 801be9c <st_int8_fill+0x88>
 801be84:	1e59      	subs	r1, r3, #1
 801be86:	f8cc 4000 	str.w	r4, [ip]
 801be8a:	d005      	beq.n	801be98 <st_int8_fill+0x84>
 801be8c:	2901      	cmp	r1, #1
 801be8e:	f8cc 4004 	str.w	r4, [ip, #4]
 801be92:	bf18      	it	ne
 801be94:	f8cc 4008 	strne.w	r4, [ip, #8]
 801be98:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 801be9c:	b1e2      	cbz	r2, 801bed8 <st_int8_fill+0xc4>
 801be9e:	4601      	mov	r1, r0
 801bea0:	4660      	mov	r0, ip
 801bea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bea6:	f001 bef9 	b.w	801dc9c <memset>
 801beaa:	4770      	bx	lr
 801beac:	4770      	bx	lr
 801beae:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 801beb2:	4663      	mov	r3, ip
 801beb4:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 801beb8:	601c      	str	r4, [r3, #0]
 801beba:	3310      	adds	r3, #16
 801bebc:	f843 4c0c 	str.w	r4, [r3, #-12]
 801bec0:	f843 4c08 	str.w	r4, [r3, #-8]
 801bec4:	f843 4c04 	str.w	r4, [r3, #-4]
 801bec8:	4299      	cmp	r1, r3
 801beca:	d1f5      	bne.n	801beb8 <st_int8_fill+0xa4>
 801becc:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801bed0:	44f4      	add	ip, lr
 801bed2:	f002 0203 	and.w	r2, r2, #3
 801bed6:	e7d4      	b.n	801be82 <st_int8_fill+0x6e>
 801bed8:	bd10      	pop	{r4, pc}
 801beda:	0893      	lsrs	r3, r2, #2
 801bedc:	f002 0203 	and.w	r2, r2, #3
 801bee0:	e7cf      	b.n	801be82 <st_int8_fill+0x6e>
 801bee2:	bf00      	nop

0801bee4 <st_int8_copy>:
 801bee4:	078b      	lsls	r3, r1, #30
 801bee6:	d00a      	beq.n	801befe <st_int8_copy+0x1a>
 801bee8:	b912      	cbnz	r2, 801bef0 <st_int8_copy+0xc>
 801beea:	e04f      	b.n	801bf8c <st_int8_copy+0xa8>
 801beec:	2a00      	cmp	r2, #0
 801beee:	d04e      	beq.n	801bf8e <st_int8_copy+0xaa>
 801bef0:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801bef4:	3a01      	subs	r2, #1
 801bef6:	f801 3b01 	strb.w	r3, [r1], #1
 801befa:	078b      	lsls	r3, r1, #30
 801befc:	d1f6      	bne.n	801beec <st_int8_copy+0x8>
 801befe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf02:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 801bf06:	d063      	beq.n	801bfd0 <st_int8_copy+0xec>
 801bf08:	ea41 0300 	orr.w	r3, r1, r0
 801bf0c:	075b      	lsls	r3, r3, #29
 801bf0e:	d13f      	bne.n	801bf90 <st_int8_copy+0xac>
 801bf10:	f10e 33ff 	add.w	r3, lr, #4294967295
 801bf14:	2b01      	cmp	r3, #1
 801bf16:	d93b      	bls.n	801bf90 <st_int8_copy+0xac>
 801bf18:	f100 0310 	add.w	r3, r0, #16
 801bf1c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801bf20:	f101 0c10 	add.w	ip, r1, #16
 801bf24:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 801bf28:	3310      	adds	r3, #16
 801bf2a:	f10c 0c10 	add.w	ip, ip, #16
 801bf2e:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 801bf32:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 801bf36:	4573      	cmp	r3, lr
 801bf38:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 801bf3c:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 801bf40:	d1f2      	bne.n	801bf28 <st_int8_copy+0x44>
 801bf42:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801bf46:	4420      	add	r0, r4
 801bf48:	4421      	add	r1, r4
 801bf4a:	f002 0203 	and.w	r2, r2, #3
 801bf4e:	b16b      	cbz	r3, 801bf6c <st_int8_copy+0x88>
 801bf50:	6804      	ldr	r4, [r0, #0]
 801bf52:	600c      	str	r4, [r1, #0]
 801bf54:	1e5c      	subs	r4, r3, #1
 801bf56:	d005      	beq.n	801bf64 <st_int8_copy+0x80>
 801bf58:	6845      	ldr	r5, [r0, #4]
 801bf5a:	2c01      	cmp	r4, #1
 801bf5c:	604d      	str	r5, [r1, #4]
 801bf5e:	d001      	beq.n	801bf64 <st_int8_copy+0x80>
 801bf60:	6884      	ldr	r4, [r0, #8]
 801bf62:	608c      	str	r4, [r1, #8]
 801bf64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801bf68:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801bf6c:	b162      	cbz	r2, 801bf88 <st_int8_copy+0xa4>
 801bf6e:	f990 3000 	ldrsb.w	r3, [r0]
 801bf72:	3a01      	subs	r2, #1
 801bf74:	700b      	strb	r3, [r1, #0]
 801bf76:	d007      	beq.n	801bf88 <st_int8_copy+0xa4>
 801bf78:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801bf7c:	2a01      	cmp	r2, #1
 801bf7e:	704b      	strb	r3, [r1, #1]
 801bf80:	d002      	beq.n	801bf88 <st_int8_copy+0xa4>
 801bf82:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801bf86:	708b      	strb	r3, [r1, #2]
 801bf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf8c:	4770      	bx	lr
 801bf8e:	4770      	bx	lr
 801bf90:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801bf94:	4684      	mov	ip, r0
 801bf96:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 801bf9a:	460b      	mov	r3, r1
 801bf9c:	f8dc 8004 	ldr.w	r8, [ip, #4]
 801bfa0:	3310      	adds	r3, #16
 801bfa2:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801bfa6:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801bfaa:	f85c 6b10 	ldr.w	r6, [ip], #16
 801bfae:	f843 8c0c 	str.w	r8, [r3, #-12]
 801bfb2:	f843 7c08 	str.w	r7, [r3, #-8]
 801bfb6:	f843 6c10 	str.w	r6, [r3, #-16]
 801bfba:	f843 5c04 	str.w	r5, [r3, #-4]
 801bfbe:	459e      	cmp	lr, r3
 801bfc0:	d1ec      	bne.n	801bf9c <st_int8_copy+0xb8>
 801bfc2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801bfc6:	4420      	add	r0, r4
 801bfc8:	4421      	add	r1, r4
 801bfca:	f002 0203 	and.w	r2, r2, #3
 801bfce:	e7be      	b.n	801bf4e <st_int8_copy+0x6a>
 801bfd0:	0893      	lsrs	r3, r2, #2
 801bfd2:	f002 0203 	and.w	r2, r2, #3
 801bfd6:	e7ba      	b.n	801bf4e <st_int8_copy+0x6a>

0801bfd8 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 801bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfdc:	b09d      	sub	sp, #116	; 0x74
 801bfde:	4683      	mov	fp, r0
 801bfe0:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 801bfe4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801bfe6:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 801bfea:	441d      	add	r5, r3
 801bfec:	9417      	str	r4, [sp, #92]	; 0x5c
 801bfee:	0864      	lsrs	r4, r4, #1
 801bff0:	9318      	str	r3, [sp, #96]	; 0x60
 801bff2:	910c      	str	r1, [sp, #48]	; 0x30
 801bff4:	9216      	str	r2, [sp, #88]	; 0x58
 801bff6:	9007      	str	r0, [sp, #28]
 801bff8:	9515      	str	r5, [sp, #84]	; 0x54
 801bffa:	9419      	str	r4, [sp, #100]	; 0x64
 801bffc:	f000 81ce 	beq.w	801c39c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c4>
 801c000:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 801c004:	4617      	mov	r7, r2
 801c006:	1e62      	subs	r2, r4, #1
 801c008:	460c      	mov	r4, r1
 801c00a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c00c:	f1a0 0310 	sub.w	r3, r0, #16
 801c010:	b292      	uxth	r2, r2
 801c012:	46d9      	mov	r9, fp
 801c014:	3108      	adds	r1, #8
 801c016:	091b      	lsrs	r3, r3, #4
 801c018:	960f      	str	r6, [sp, #60]	; 0x3c
 801c01a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c01e:	3301      	adds	r3, #1
 801c020:	9708      	str	r7, [sp, #32]
 801c022:	910e      	str	r1, [sp, #56]	; 0x38
 801c024:	4601      	mov	r1, r0
 801c026:	3803      	subs	r0, #3
 801c028:	900d      	str	r0, [sp, #52]	; 0x34
 801c02a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801c02c:	3004      	adds	r0, #4
 801c02e:	9002      	str	r0, [sp, #8]
 801c030:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801c032:	3004      	adds	r0, #4
 801c034:	9005      	str	r0, [sp, #20]
 801c036:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801c038:	3004      	adds	r0, #4
 801c03a:	9003      	str	r0, [sp, #12]
 801c03c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801c03e:	3001      	adds	r0, #1
 801c040:	9004      	str	r0, [sp, #16]
 801c042:	1c68      	adds	r0, r5, #1
 801c044:	9006      	str	r0, [sp, #24]
 801c046:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 801c04a:	9013      	str	r0, [sp, #76]	; 0x4c
 801c04c:	0198      	lsls	r0, r3, #6
 801c04e:	9010      	str	r0, [sp, #64]	; 0x40
 801c050:	0118      	lsls	r0, r3, #4
 801c052:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 801c056:	9012      	str	r0, [sp, #72]	; 0x48
 801c058:	9311      	str	r3, [sp, #68]	; 0x44
 801c05a:	1f0b      	subs	r3, r1, #4
 801c05c:	9314      	str	r3, [sp, #80]	; 0x50
 801c05e:	9908      	ldr	r1, [sp, #32]
 801c060:	9c07      	ldr	r4, [sp, #28]
 801c062:	680b      	ldr	r3, [r1, #0]
 801c064:	3108      	adds	r1, #8
 801c066:	2c0f      	cmp	r4, #15
 801c068:	931b      	str	r3, [sp, #108]	; 0x6c
 801c06a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c06c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c06e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801c072:	9108      	str	r1, [sp, #32]
 801c074:	921b      	str	r2, [sp, #108]	; 0x6c
 801c076:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c078:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c07a:	f340 8282 	ble.w	801c582 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5aa>
 801c07e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c080:	464d      	mov	r5, r9
 801c082:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c084:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c086:	f8d4 e000 	ldr.w	lr, [r4]
 801c08a:	f8d7 a000 	ldr.w	sl, [r7]
 801c08e:	f8d5 c000 	ldr.w	ip, [r5]
 801c092:	f8d5 8004 	ldr.w	r8, [r5, #4]
 801c096:	fb2c 330e 	smlad	r3, ip, lr, r3
 801c09a:	fb2c 000a 	smlad	r0, ip, sl, r0
 801c09e:	fb28 2e0e 	smlad	lr, r8, lr, r2
 801c0a2:	fb28 110a 	smlad	r1, r8, sl, r1
 801c0a6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801c0aa:	f8d7 8004 	ldr.w	r8, [r7, #4]
 801c0ae:	68aa      	ldr	r2, [r5, #8]
 801c0b0:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 801c0b4:	fb22 330c 	smlad	r3, r2, ip, r3
 801c0b8:	fb22 0008 	smlad	r0, r2, r8, r0
 801c0bc:	fb2b ee0c 	smlad	lr, fp, ip, lr
 801c0c0:	fb2b 1808 	smlad	r8, fp, r8, r1
 801c0c4:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801c0c8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801c0cc:	692a      	ldr	r2, [r5, #16]
 801c0ce:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801c0d2:	fb22 330c 	smlad	r3, r2, ip, r3
 801c0d6:	fb22 000b 	smlad	r0, r2, fp, r0
 801c0da:	fb2a ee0c 	smlad	lr, sl, ip, lr
 801c0de:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 801c0e2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801c0e6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801c0ea:	f8d5 8018 	ldr.w	r8, [r5, #24]
 801c0ee:	69e9      	ldr	r1, [r5, #28]
 801c0f0:	fb28 330c 	smlad	r3, r8, ip, r3
 801c0f4:	fb28 000a 	smlad	r0, r8, sl, r0
 801c0f8:	fb21 ec0c 	smlad	ip, r1, ip, lr
 801c0fc:	fb21 ba0a 	smlad	sl, r1, sl, fp
 801c100:	f8d4 e010 	ldr.w	lr, [r4, #16]
 801c104:	6939      	ldr	r1, [r7, #16]
 801c106:	f8d5 8020 	ldr.w	r8, [r5, #32]
 801c10a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801c10c:	fb28 330e 	smlad	r3, r8, lr, r3
 801c110:	fb28 0001 	smlad	r0, r8, r1, r0
 801c114:	fb22 cc0e 	smlad	ip, r2, lr, ip
 801c118:	fb22 a101 	smlad	r1, r2, r1, sl
 801c11c:	f8d4 e014 	ldr.w	lr, [r4, #20]
 801c120:	f8d7 a014 	ldr.w	sl, [r7, #20]
 801c124:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 801c128:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801c12a:	fb28 330e 	smlad	r3, r8, lr, r3
 801c12e:	fb28 000a 	smlad	r0, r8, sl, r0
 801c132:	fb22 cc0e 	smlad	ip, r2, lr, ip
 801c136:	fb22 120a 	smlad	r2, r2, sl, r1
 801c13a:	f8d4 e018 	ldr.w	lr, [r4, #24]
 801c13e:	f8d7 b018 	ldr.w	fp, [r7, #24]
 801c142:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c146:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801c148:	fb28 330e 	smlad	r3, r8, lr, r3
 801c14c:	fb28 080b 	smlad	r8, r8, fp, r0
 801c150:	fb21 ce0e 	smlad	lr, r1, lr, ip
 801c154:	fb21 210b 	smlad	r1, r1, fp, r2
 801c158:	69e2      	ldr	r2, [r4, #28]
 801c15a:	3720      	adds	r7, #32
 801c15c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c15e:	3420      	adds	r4, #32
 801c160:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 801c164:	3540      	adds	r5, #64	; 0x40
 801c166:	f857 bc04 	ldr.w	fp, [r7, #-4]
 801c16a:	fb20 3302 	smlad	r3, r0, r2, r3
 801c16e:	fb20 800b 	smlad	r0, r0, fp, r8
 801c172:	fb2c e202 	smlad	r2, ip, r2, lr
 801c176:	fb2c 110b 	smlad	r1, ip, fp, r1
 801c17a:	42a6      	cmp	r6, r4
 801c17c:	d183      	bne.n	801c086 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 801c17e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c180:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801c184:	44a9      	add	r9, r5
 801c186:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c188:	9501      	str	r5, [sp, #4]
 801c18a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c18c:	45ab      	cmp	fp, r5
 801c18e:	f280 8201 	bge.w	801c594 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5bc>
 801c192:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c194:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c198:	eba5 050b 	sub.w	r5, r5, fp
 801c19c:	08ad      	lsrs	r5, r5, #2
 801c19e:	462e      	mov	r6, r5
 801c1a0:	950b      	str	r5, [sp, #44]	; 0x2c
 801c1a2:	464d      	mov	r5, r9
 801c1a4:	3601      	adds	r6, #1
 801c1a6:	00f7      	lsls	r7, r6, #3
 801c1a8:	960a      	str	r6, [sp, #40]	; 0x28
 801c1aa:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 801c1ae:	9709      	str	r7, [sp, #36]	; 0x24
 801c1b0:	f8d4 e000 	ldr.w	lr, [r4]
 801c1b4:	f8dc 7000 	ldr.w	r7, [ip]
 801c1b8:	f8d5 a000 	ldr.w	sl, [r5]
 801c1bc:	686e      	ldr	r6, [r5, #4]
 801c1be:	fb2a 330e 	smlad	r3, sl, lr, r3
 801c1c2:	fb2a 0007 	smlad	r0, sl, r7, r0
 801c1c6:	fb26 220e 	smlad	r2, r6, lr, r2
 801c1ca:	fb26 1107 	smlad	r1, r6, r7, r1
 801c1ce:	6867      	ldr	r7, [r4, #4]
 801c1d0:	f10c 0c08 	add.w	ip, ip, #8
 801c1d4:	68ae      	ldr	r6, [r5, #8]
 801c1d6:	3408      	adds	r4, #8
 801c1d8:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801c1dc:	3510      	adds	r5, #16
 801c1de:	f85c ac04 	ldr.w	sl, [ip, #-4]
 801c1e2:	fb26 3307 	smlad	r3, r6, r7, r3
 801c1e6:	fb26 000a 	smlad	r0, r6, sl, r0
 801c1ea:	fb2e 2207 	smlad	r2, lr, r7, r2
 801c1ee:	fb2e 110a 	smlad	r1, lr, sl, r1
 801c1f2:	4544      	cmp	r4, r8
 801c1f4:	d1dc      	bne.n	801c1b0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1d8>
 801c1f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c1f8:	f10b 0b04 	add.w	fp, fp, #4
 801c1fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c1fe:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 801c202:	9c01      	ldr	r4, [sp, #4]
 801c204:	442c      	add	r4, r5
 801c206:	9401      	str	r4, [sp, #4]
 801c208:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c20a:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 801c20e:	9f07      	ldr	r7, [sp, #28]
 801c210:	455f      	cmp	r7, fp
 801c212:	dd54      	ble.n	801c2be <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e6>
 801c214:	f9b8 5000 	ldrsh.w	r5, [r8]
 801c218:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 801c21c:	f9b9 6000 	ldrsh.w	r6, [r9]
 801c220:	fb05 2204 	mla	r2, r5, r4, r2
 801c224:	fb06 3305 	mla	r3, r6, r5, r3
 801c228:	9d01      	ldr	r5, [sp, #4]
 801c22a:	f9b5 5000 	ldrsh.w	r5, [r5]
 801c22e:	fb05 1104 	mla	r1, r5, r4, r1
 801c232:	f10b 0401 	add.w	r4, fp, #1
 801c236:	fb06 0005 	mla	r0, r6, r5, r0
 801c23a:	42a7      	cmp	r7, r4
 801c23c:	dd3a      	ble.n	801c2b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 801c23e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801c242:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 801c246:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 801c24a:	fb05 2204 	mla	r2, r5, r4, r2
 801c24e:	fb06 3305 	mla	r3, r6, r5, r3
 801c252:	9d01      	ldr	r5, [sp, #4]
 801c254:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 801c258:	fb05 1104 	mla	r1, r5, r4, r1
 801c25c:	f10b 0402 	add.w	r4, fp, #2
 801c260:	fb06 0005 	mla	r0, r6, r5, r0
 801c264:	42a7      	cmp	r7, r4
 801c266:	dd25      	ble.n	801c2b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 801c268:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 801c26c:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 801c270:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801c274:	fb05 2204 	mla	r2, r5, r4, r2
 801c278:	fb06 3305 	mla	r3, r6, r5, r3
 801c27c:	9d01      	ldr	r5, [sp, #4]
 801c27e:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 801c282:	fb05 1104 	mla	r1, r5, r4, r1
 801c286:	f10b 0403 	add.w	r4, fp, #3
 801c28a:	fb06 0005 	mla	r0, r6, r5, r0
 801c28e:	42a7      	cmp	r7, r4
 801c290:	dd10      	ble.n	801c2b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2dc>
 801c292:	9c01      	ldr	r4, [sp, #4]
 801c294:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 801c298:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 801c29c:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 801c2a0:	fb04 3305 	mla	r3, r4, r5, r3
 801c2a4:	fb04 0006 	mla	r0, r4, r6, r0
 801c2a8:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 801c2ac:	fb05 2204 	mla	r2, r5, r4, r2
 801c2b0:	fb06 1104 	mla	r1, r6, r4, r1
 801c2b4:	9c07      	ldr	r4, [sp, #28]
 801c2b6:	eba4 0b0b 	sub.w	fp, r4, fp
 801c2ba:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 801c2be:	9c02      	ldr	r4, [sp, #8]
 801c2c0:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 801c2c4:	2c15      	cmp	r4, #21
 801c2c6:	f340 80e5 	ble.w	801c494 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4bc>
 801c2ca:	1ea6      	subs	r6, r4, #2
 801c2cc:	2501      	movs	r5, #1
 801c2ce:	3c01      	subs	r4, #1
 801c2d0:	fa05 f606 	lsl.w	r6, r5, r6
 801c2d4:	9d05      	ldr	r5, [sp, #20]
 801c2d6:	f855 5c04 	ldr.w	r5, [r5, #-4]
 801c2da:	fb53 6305 	smmla	r3, r3, r5, r6
 801c2de:	fb50 6005 	smmla	r0, r0, r5, r6
 801c2e2:	9d03      	ldr	r5, [sp, #12]
 801c2e4:	4123      	asrs	r3, r4
 801c2e6:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801c2ea:	443b      	add	r3, r7
 801c2ec:	f303 0307 	ssat	r3, #8, r3
 801c2f0:	4120      	asrs	r0, r4
 801c2f2:	9c04      	ldr	r4, [sp, #16]
 801c2f4:	4438      	add	r0, r7
 801c2f6:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c2fa:	f300 0007 	ssat	r0, #8, r0
 801c2fe:	9b06      	ldr	r3, [sp, #24]
 801c300:	f803 0c01 	strb.w	r0, [r3, #-1]
 801c304:	9b02      	ldr	r3, [sp, #8]
 801c306:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 801c30a:	2b15      	cmp	r3, #21
 801c30c:	f340 80e2 	ble.w	801c4d4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4fc>
 801c310:	1e9c      	subs	r4, r3, #2
 801c312:	2001      	movs	r0, #1
 801c314:	3b01      	subs	r3, #1
 801c316:	fa00 f404 	lsl.w	r4, r0, r4
 801c31a:	9805      	ldr	r0, [sp, #20]
 801c31c:	6800      	ldr	r0, [r0, #0]
 801c31e:	fb52 4200 	smmla	r2, r2, r0, r4
 801c322:	fb51 4100 	smmla	r1, r1, r0, r4
 801c326:	9803      	ldr	r0, [sp, #12]
 801c328:	411a      	asrs	r2, r3
 801c32a:	6805      	ldr	r5, [r0, #0]
 801c32c:	442a      	add	r2, r5
 801c32e:	f302 0207 	ssat	r2, #8, r2
 801c332:	4119      	asrs	r1, r3
 801c334:	9b04      	ldr	r3, [sp, #16]
 801c336:	4429      	add	r1, r5
 801c338:	701a      	strb	r2, [r3, #0]
 801c33a:	f301 0107 	ssat	r1, #8, r1
 801c33e:	9b06      	ldr	r3, [sp, #24]
 801c340:	7019      	strb	r1, [r3, #0]
 801c342:	9a05      	ldr	r2, [sp, #20]
 801c344:	9b02      	ldr	r3, [sp, #8]
 801c346:	3208      	adds	r2, #8
 801c348:	3304      	adds	r3, #4
 801c34a:	9205      	str	r2, [sp, #20]
 801c34c:	9a03      	ldr	r2, [sp, #12]
 801c34e:	9302      	str	r3, [sp, #8]
 801c350:	3208      	adds	r2, #8
 801c352:	9203      	str	r2, [sp, #12]
 801c354:	9a04      	ldr	r2, [sp, #16]
 801c356:	3202      	adds	r2, #2
 801c358:	9204      	str	r2, [sp, #16]
 801c35a:	9a06      	ldr	r2, [sp, #24]
 801c35c:	3202      	adds	r2, #2
 801c35e:	9206      	str	r2, [sp, #24]
 801c360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c362:	4293      	cmp	r3, r2
 801c364:	f47f ae7b 	bne.w	801c05e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 801c368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c36a:	46cb      	mov	fp, r9
 801c36c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c36e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c372:	9229      	str	r2, [sp, #164]	; 0xa4
 801c374:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c376:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c37a:	922a      	str	r2, [sp, #168]	; 0xa8
 801c37c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c37e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801c382:	922b      	str	r2, [sp, #172]	; 0xac
 801c384:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c386:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801c38a:	9215      	str	r2, [sp, #84]	; 0x54
 801c38c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c38e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c392:	9216      	str	r2, [sp, #88]	; 0x58
 801c394:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801c396:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c39a:	9328      	str	r3, [sp, #160]	; 0xa0
 801c39c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c39e:	07db      	lsls	r3, r3, #31
 801c3a0:	d56f      	bpl.n	801c482 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 801c3a2:	9a07      	ldr	r2, [sp, #28]
 801c3a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c3a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c3a8:	0896      	lsrs	r6, r2, #2
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 801c3b0:	f000 812e 	beq.w	801c610 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x638>
 801c3b4:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 801c3b8:	463c      	mov	r4, r7
 801c3ba:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 801c3be:	461a      	mov	r2, r3
 801c3c0:	f8db 5000 	ldr.w	r5, [fp]
 801c3c4:	f10b 0b08 	add.w	fp, fp, #8
 801c3c8:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 801c3cc:	f8d0 e000 	ldr.w	lr, [r0]
 801c3d0:	fb25 330e 	smlad	r3, r5, lr, r3
 801c3d4:	f8d4 e000 	ldr.w	lr, [r4]
 801c3d8:	fb25 220e 	smlad	r2, r5, lr, r2
 801c3dc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801c3e0:	3408      	adds	r4, #8
 801c3e2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801c3e6:	3008      	adds	r0, #8
 801c3e8:	fb21 330e 	smlad	r3, r1, lr, r3
 801c3ec:	fb21 2205 	smlad	r2, r1, r5, r2
 801c3f0:	45b3      	cmp	fp, r6
 801c3f2:	d1e5      	bne.n	801c3c0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e8>
 801c3f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c3f6:	4467      	add	r7, ip
 801c3f8:	4461      	add	r1, ip
 801c3fa:	910c      	str	r1, [sp, #48]	; 0x30
 801c3fc:	9907      	ldr	r1, [sp, #28]
 801c3fe:	f011 0103 	ands.w	r1, r1, #3
 801c402:	d01d      	beq.n	801c440 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 801c404:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c406:	3901      	subs	r1, #1
 801c408:	f9b6 0000 	ldrsh.w	r0, [r6]
 801c40c:	882c      	ldrh	r4, [r5, #0]
 801c40e:	b289      	uxth	r1, r1
 801c410:	fb14 3300 	smlabb	r3, r4, r0, r3
 801c414:	883c      	ldrh	r4, [r7, #0]
 801c416:	fb14 2200 	smlabb	r2, r4, r0, r2
 801c41a:	b189      	cbz	r1, 801c440 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 801c41c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801c420:	2901      	cmp	r1, #1
 801c422:	886c      	ldrh	r4, [r5, #2]
 801c424:	fb14 3300 	smlabb	r3, r4, r0, r3
 801c428:	887c      	ldrh	r4, [r7, #2]
 801c42a:	fb14 2200 	smlabb	r2, r4, r0, r2
 801c42e:	d007      	beq.n	801c440 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x468>
 801c430:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 801c434:	88a8      	ldrh	r0, [r5, #4]
 801c436:	fb11 3300 	smlabb	r3, r1, r0, r3
 801c43a:	88b8      	ldrh	r0, [r7, #4]
 801c43c:	fb11 2200 	smlabb	r2, r1, r0, r2
 801c440:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c442:	f9b1 1000 	ldrsh.w	r1, [r1]
 801c446:	2915      	cmp	r1, #21
 801c448:	f340 80a6 	ble.w	801c598 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c0>
 801c44c:	1e8d      	subs	r5, r1, #2
 801c44e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801c450:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801c452:	3901      	subs	r1, #1
 801c454:	2601      	movs	r6, #1
 801c456:	6800      	ldr	r0, [r0, #0]
 801c458:	6824      	ldr	r4, [r4, #0]
 801c45a:	40ae      	lsls	r6, r5
 801c45c:	fb53 6500 	smmla	r5, r3, r0, r6
 801c460:	fb52 6300 	smmla	r3, r2, r0, r6
 801c464:	fa45 f201 	asr.w	r2, r5, r1
 801c468:	4422      	add	r2, r4
 801c46a:	f302 0207 	ssat	r2, #8, r2
 801c46e:	410b      	asrs	r3, r1
 801c470:	982b      	ldr	r0, [sp, #172]	; 0xac
 801c472:	4423      	add	r3, r4
 801c474:	f800 2b01 	strb.w	r2, [r0], #1
 801c478:	f303 0307 	ssat	r3, #8, r3
 801c47c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c47e:	902b      	str	r0, [sp, #172]	; 0xac
 801c480:	7013      	strb	r3, [r2, #0]
 801c482:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 801c486:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 801c48a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c48c:	4418      	add	r0, r3
 801c48e:	b01d      	add	sp, #116	; 0x74
 801c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c494:	2c00      	cmp	r4, #0
 801c496:	dd34      	ble.n	801c502 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x52a>
 801c498:	9d05      	ldr	r5, [sp, #20]
 801c49a:	005b      	lsls	r3, r3, #1
 801c49c:	9e03      	ldr	r6, [sp, #12]
 801c49e:	0040      	lsls	r0, r0, #1
 801c4a0:	f855 5c04 	ldr.w	r5, [r5, #-4]
 801c4a4:	f856 6c04 	ldr.w	r6, [r6, #-4]
 801c4a8:	fb53 6305 	smmla	r3, r3, r5, r6
 801c4ac:	fb50 6005 	smmla	r0, r0, r5, r6
 801c4b0:	4123      	asrs	r3, r4
 801c4b2:	f303 0307 	ssat	r3, #8, r3
 801c4b6:	4120      	asrs	r0, r4
 801c4b8:	9c04      	ldr	r4, [sp, #16]
 801c4ba:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c4be:	f300 0007 	ssat	r0, #8, r0
 801c4c2:	9b06      	ldr	r3, [sp, #24]
 801c4c4:	f803 0c01 	strb.w	r0, [r3, #-1]
 801c4c8:	9b02      	ldr	r3, [sp, #8]
 801c4ca:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 801c4ce:	2b15      	cmp	r3, #21
 801c4d0:	f73f af1e 	bgt.w	801c310 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x338>
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	dd36      	ble.n	801c546 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56e>
 801c4d8:	9805      	ldr	r0, [sp, #20]
 801c4da:	0052      	lsls	r2, r2, #1
 801c4dc:	9c03      	ldr	r4, [sp, #12]
 801c4de:	0049      	lsls	r1, r1, #1
 801c4e0:	6800      	ldr	r0, [r0, #0]
 801c4e2:	6824      	ldr	r4, [r4, #0]
 801c4e4:	fb52 4200 	smmla	r2, r2, r0, r4
 801c4e8:	fb51 4100 	smmla	r1, r1, r0, r4
 801c4ec:	411a      	asrs	r2, r3
 801c4ee:	f302 0207 	ssat	r2, #8, r2
 801c4f2:	4119      	asrs	r1, r3
 801c4f4:	9b04      	ldr	r3, [sp, #16]
 801c4f6:	701a      	strb	r2, [r3, #0]
 801c4f8:	f301 0107 	ssat	r1, #8, r1
 801c4fc:	9b06      	ldr	r3, [sp, #24]
 801c4fe:	7019      	strb	r1, [r3, #0]
 801c500:	e71f      	b.n	801c342 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36a>
 801c502:	f1c4 0401 	rsb	r4, r4, #1
 801c506:	fa03 f504 	lsl.w	r5, r3, r4
 801c50a:	f305 051f 	ssat	r5, #32, r5
 801c50e:	9b05      	ldr	r3, [sp, #20]
 801c510:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801c514:	fb55 f516 	smmulr	r5, r5, r6
 801c518:	40a0      	lsls	r0, r4
 801c51a:	f300 001f 	ssat	r0, #32, r0
 801c51e:	fb50 f016 	smmulr	r0, r0, r6
 801c522:	9c03      	ldr	r4, [sp, #12]
 801c524:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c528:	442b      	add	r3, r5
 801c52a:	f303 0307 	ssat	r3, #8, r3
 801c52e:	9d04      	ldr	r5, [sp, #16]
 801c530:	f805 3c01 	strb.w	r3, [r5, #-1]
 801c534:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c538:	4403      	add	r3, r0
 801c53a:	f303 0307 	ssat	r3, #8, r3
 801c53e:	9806      	ldr	r0, [sp, #24]
 801c540:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c544:	e6de      	b.n	801c304 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32c>
 801c546:	f1c3 0301 	rsb	r3, r3, #1
 801c54a:	fa02 f003 	lsl.w	r0, r2, r3
 801c54e:	f300 001f 	ssat	r0, #32, r0
 801c552:	9a05      	ldr	r2, [sp, #20]
 801c554:	6814      	ldr	r4, [r2, #0]
 801c556:	fb50 f014 	smmulr	r0, r0, r4
 801c55a:	fa01 f303 	lsl.w	r3, r1, r3
 801c55e:	f303 021f 	ssat	r2, #32, r3
 801c562:	fb52 f214 	smmulr	r2, r2, r4
 801c566:	9903      	ldr	r1, [sp, #12]
 801c568:	680b      	ldr	r3, [r1, #0]
 801c56a:	4403      	add	r3, r0
 801c56c:	f303 0307 	ssat	r3, #8, r3
 801c570:	9804      	ldr	r0, [sp, #16]
 801c572:	7003      	strb	r3, [r0, #0]
 801c574:	680b      	ldr	r3, [r1, #0]
 801c576:	4413      	add	r3, r2
 801c578:	f303 0307 	ssat	r3, #8, r3
 801c57c:	9a06      	ldr	r2, [sp, #24]
 801c57e:	7013      	strb	r3, [r2, #0]
 801c580:	e6df      	b.n	801c342 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36a>
 801c582:	f04f 0b00 	mov.w	fp, #0
 801c586:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c588:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c58a:	45ab      	cmp	fp, r5
 801c58c:	9401      	str	r4, [sp, #4]
 801c58e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c590:	f6ff adff 	blt.w	801c192 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ba>
 801c594:	46a0      	mov	r8, r4
 801c596:	e63a      	b.n	801c20e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x236>
 801c598:	2900      	cmp	r1, #0
 801c59a:	dd1a      	ble.n	801c5d2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5fa>
 801c59c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801c59e:	005b      	lsls	r3, r3, #1
 801c5a0:	0052      	lsls	r2, r2, #1
 801c5a2:	6804      	ldr	r4, [r0, #0]
 801c5a4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801c5a6:	6805      	ldr	r5, [r0, #0]
 801c5a8:	fb53 5004 	smmla	r0, r3, r4, r5
 801c5ac:	fb52 5304 	smmla	r3, r2, r4, r5
 801c5b0:	fa40 f201 	asr.w	r2, r0, r1
 801c5b4:	f302 0207 	ssat	r2, #8, r2
 801c5b8:	982b      	ldr	r0, [sp, #172]	; 0xac
 801c5ba:	f800 2b01 	strb.w	r2, [r0], #1
 801c5be:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801c5c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c5c4:	4113      	asrs	r3, r2
 801c5c6:	f303 0307 	ssat	r3, #8, r3
 801c5ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c5cc:	902b      	str	r0, [sp, #172]	; 0xac
 801c5ce:	7013      	strb	r3, [r2, #0]
 801c5d0:	e757      	b.n	801c482 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 801c5d2:	f1c1 0101 	rsb	r1, r1, #1
 801c5d6:	408b      	lsls	r3, r1
 801c5d8:	f303 031f 	ssat	r3, #32, r3
 801c5dc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801c5de:	6800      	ldr	r0, [r0, #0]
 801c5e0:	fb53 f310 	smmulr	r3, r3, r0
 801c5e4:	408a      	lsls	r2, r1
 801c5e6:	f302 021f 	ssat	r2, #32, r2
 801c5ea:	fb52 f210 	smmulr	r2, r2, r0
 801c5ee:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801c5f0:	6809      	ldr	r1, [r1, #0]
 801c5f2:	440b      	add	r3, r1
 801c5f4:	f303 0307 	ssat	r3, #8, r3
 801c5f8:	992b      	ldr	r1, [sp, #172]	; 0xac
 801c5fa:	f801 3b01 	strb.w	r3, [r1], #1
 801c5fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	4413      	add	r3, r2
 801c604:	f303 0307 	ssat	r3, #8, r3
 801c608:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c60a:	912b      	str	r1, [sp, #172]	; 0xac
 801c60c:	7013      	strb	r3, [r2, #0]
 801c60e:	e738      	b.n	801c482 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4aa>
 801c610:	465e      	mov	r6, fp
 801c612:	461a      	mov	r2, r3
 801c614:	e6f2      	b.n	801c3fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 801c616:	bf00      	nop

0801c618 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 801c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c61c:	b093      	sub	sp, #76	; 0x4c
 801c61e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801c622:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801c626:	085d      	lsrs	r5, r3, #1
 801c628:	930e      	str	r3, [sp, #56]	; 0x38
 801c62a:	9107      	str	r1, [sp, #28]
 801c62c:	920d      	str	r2, [sp, #52]	; 0x34
 801c62e:	9405      	str	r4, [sp, #20]
 801c630:	950f      	str	r5, [sp, #60]	; 0x3c
 801c632:	f000 81fc 	beq.w	801ca2e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 801c636:	4616      	mov	r6, r2
 801c638:	1e6a      	subs	r2, r5, #1
 801c63a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801c63c:	460f      	mov	r7, r1
 801c63e:	b292      	uxth	r2, r2
 801c640:	f1a4 0310 	sub.w	r3, r4, #16
 801c644:	1d29      	adds	r1, r5, #4
 801c646:	f106 0a08 	add.w	sl, r6, #8
 801c64a:	091b      	lsrs	r3, r3, #4
 801c64c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801c650:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c652:	3301      	adds	r3, #1
 801c654:	f102 0b02 	add.w	fp, r2, #2
 801c658:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c65a:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 801c65e:	9509      	str	r5, [sp, #36]	; 0x24
 801c660:	3204      	adds	r2, #4
 801c662:	1ee5      	subs	r5, r4, #3
 801c664:	9202      	str	r2, [sp, #8]
 801c666:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c668:	9508      	str	r5, [sp, #32]
 801c66a:	3208      	adds	r2, #8
 801c66c:	9204      	str	r2, [sp, #16]
 801c66e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c670:	3208      	adds	r2, #8
 801c672:	9201      	str	r2, [sp, #4]
 801c674:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c676:	3202      	adds	r2, #2
 801c678:	9203      	str	r2, [sp, #12]
 801c67a:	019a      	lsls	r2, r3, #6
 801c67c:	011b      	lsls	r3, r3, #4
 801c67e:	920a      	str	r2, [sp, #40]	; 0x28
 801c680:	930b      	str	r3, [sp, #44]	; 0x2c
 801c682:	1f23      	subs	r3, r4, #4
 801c684:	930c      	str	r3, [sp, #48]	; 0x30
 801c686:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 801c68a:	9905      	ldr	r1, [sp, #20]
 801c68c:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 801c690:	9311      	str	r3, [sp, #68]	; 0x44
 801c692:	290f      	cmp	r1, #15
 801c694:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c696:	9211      	str	r2, [sp, #68]	; 0x44
 801c698:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c69a:	9c07      	ldr	r4, [sp, #28]
 801c69c:	f340 819c 	ble.w	801c9d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 801c6a0:	4601      	mov	r1, r0
 801c6a2:	f8d4 c000 	ldr.w	ip, [r4]
 801c6a6:	680e      	ldr	r6, [r1, #0]
 801c6a8:	fb26 330c 	smlad	r3, r6, ip, r3
 801c6ac:	684d      	ldr	r5, [r1, #4]
 801c6ae:	fb25 220c 	smlad	r2, r5, ip, r2
 801c6b2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801c6b6:	688e      	ldr	r6, [r1, #8]
 801c6b8:	fb26 360c 	smlad	r6, r6, ip, r3
 801c6bc:	68cd      	ldr	r5, [r1, #12]
 801c6be:	fb25 250c 	smlad	r5, r5, ip, r2
 801c6c2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801c6c6:	690b      	ldr	r3, [r1, #16]
 801c6c8:	fb23 660c 	smlad	r6, r3, ip, r6
 801c6cc:	694a      	ldr	r2, [r1, #20]
 801c6ce:	fb22 550c 	smlad	r5, r2, ip, r5
 801c6d2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801c6d6:	698b      	ldr	r3, [r1, #24]
 801c6d8:	fb23 630c 	smlad	r3, r3, ip, r6
 801c6dc:	69ca      	ldr	r2, [r1, #28]
 801c6de:	fb22 520c 	smlad	r2, r2, ip, r5
 801c6e2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801c6e6:	6a0e      	ldr	r6, [r1, #32]
 801c6e8:	fb26 330c 	smlad	r3, r6, ip, r3
 801c6ec:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 801c6ee:	fb25 220c 	smlad	r2, r5, ip, r2
 801c6f2:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801c6f6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 801c6f8:	fb26 360c 	smlad	r6, r6, ip, r3
 801c6fc:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 801c6fe:	fb25 250c 	smlad	r5, r5, ip, r2
 801c702:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801c706:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801c708:	fb23 660c 	smlad	r6, r3, ip, r6
 801c70c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801c70e:	fb22 550c 	smlad	r5, r2, ip, r5
 801c712:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 801c716:	3140      	adds	r1, #64	; 0x40
 801c718:	f851 3c08 	ldr.w	r3, [r1, #-8]
 801c71c:	3420      	adds	r4, #32
 801c71e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801c722:	fb23 630c 	smlad	r3, r3, ip, r6
 801c726:	fb22 520c 	smlad	r2, r2, ip, r5
 801c72a:	42bc      	cmp	r4, r7
 801c72c:	d1b9      	bne.n	801c6a2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 801c72e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c730:	463c      	mov	r4, r7
 801c732:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 801c736:	4408      	add	r0, r1
 801c738:	9908      	ldr	r1, [sp, #32]
 801c73a:	458e      	cmp	lr, r1
 801c73c:	da25      	bge.n	801c78a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 801c73e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c740:	eba1 090e 	sub.w	r9, r1, lr
 801c744:	4601      	mov	r1, r0
 801c746:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801c74a:	f109 0501 	add.w	r5, r9, #1
 801c74e:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 801c752:	9506      	str	r5, [sp, #24]
 801c754:	6825      	ldr	r5, [r4, #0]
 801c756:	680e      	ldr	r6, [r1, #0]
 801c758:	fb26 3305 	smlad	r3, r6, r5, r3
 801c75c:	684e      	ldr	r6, [r1, #4]
 801c75e:	fb26 2505 	smlad	r5, r6, r5, r2
 801c762:	6866      	ldr	r6, [r4, #4]
 801c764:	3110      	adds	r1, #16
 801c766:	f851 cc08 	ldr.w	ip, [r1, #-8]
 801c76a:	3408      	adds	r4, #8
 801c76c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801c770:	fb2c 3306 	smlad	r3, ip, r6, r3
 801c774:	fb22 5206 	smlad	r2, r2, r6, r5
 801c778:	45a0      	cmp	r8, r4
 801c77a:	d1eb      	bne.n	801c754 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 801c77c:	9906      	ldr	r1, [sp, #24]
 801c77e:	f10e 0e04 	add.w	lr, lr, #4
 801c782:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801c786:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801c78a:	9e05      	ldr	r6, [sp, #20]
 801c78c:	4576      	cmp	r6, lr
 801c78e:	dd30      	ble.n	801c7f2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 801c790:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c794:	8805      	ldrh	r5, [r0, #0]
 801c796:	fb15 3301 	smlabb	r3, r5, r1, r3
 801c79a:	8845      	ldrh	r5, [r0, #2]
 801c79c:	fb11 2205 	smlabb	r2, r1, r5, r2
 801c7a0:	f10e 0101 	add.w	r1, lr, #1
 801c7a4:	428e      	cmp	r6, r1
 801c7a6:	dd1f      	ble.n	801c7e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801c7a8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801c7ac:	8885      	ldrh	r5, [r0, #4]
 801c7ae:	fb15 3301 	smlabb	r3, r5, r1, r3
 801c7b2:	88c5      	ldrh	r5, [r0, #6]
 801c7b4:	fb11 2205 	smlabb	r2, r1, r5, r2
 801c7b8:	f10e 0102 	add.w	r1, lr, #2
 801c7bc:	428e      	cmp	r6, r1
 801c7be:	dd13      	ble.n	801c7e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801c7c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c7c4:	8905      	ldrh	r5, [r0, #8]
 801c7c6:	fb15 3301 	smlabb	r3, r5, r1, r3
 801c7ca:	8945      	ldrh	r5, [r0, #10]
 801c7cc:	fb11 2205 	smlabb	r2, r1, r5, r2
 801c7d0:	f10e 0103 	add.w	r1, lr, #3
 801c7d4:	428e      	cmp	r6, r1
 801c7d6:	dd07      	ble.n	801c7e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 801c7d8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c7dc:	8984      	ldrh	r4, [r0, #12]
 801c7de:	fb14 3301 	smlabb	r3, r4, r1, r3
 801c7e2:	89c4      	ldrh	r4, [r0, #14]
 801c7e4:	fb11 2204 	smlabb	r2, r1, r4, r2
 801c7e8:	9905      	ldr	r1, [sp, #20]
 801c7ea:	eba1 0e0e 	sub.w	lr, r1, lr
 801c7ee:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801c7f2:	9902      	ldr	r1, [sp, #8]
 801c7f4:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 801c7f8:	2d15      	cmp	r5, #21
 801c7fa:	f340 80b0 	ble.w	801c95e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 801c7fe:	9e04      	ldr	r6, [sp, #16]
 801c800:	1eac      	subs	r4, r5, #2
 801c802:	2101      	movs	r1, #1
 801c804:	3d01      	subs	r5, #1
 801c806:	f1a6 0e04 	sub.w	lr, r6, #4
 801c80a:	fa01 f404 	lsl.w	r4, r1, r4
 801c80e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 801c812:	fb53 4401 	smmla	r4, r3, r1, r4
 801c816:	9b01      	ldr	r3, [sp, #4]
 801c818:	fa44 f505 	asr.w	r5, r4, r5
 801c81c:	f853 4c08 	ldr.w	r4, [r3, #-8]
 801c820:	1f1e      	subs	r6, r3, #4
 801c822:	442c      	add	r4, r5
 801c824:	f304 0407 	ssat	r4, #8, r4
 801c828:	f80b 4c02 	strb.w	r4, [fp, #-2]
 801c82c:	9b03      	ldr	r3, [sp, #12]
 801c82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c832:	2b15      	cmp	r3, #21
 801c834:	f340 8085 	ble.w	801c942 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 801c838:	1e9c      	subs	r4, r3, #2
 801c83a:	2501      	movs	r5, #1
 801c83c:	3b01      	subs	r3, #1
 801c83e:	6836      	ldr	r6, [r6, #0]
 801c840:	f8de 1000 	ldr.w	r1, [lr]
 801c844:	fa05 f404 	lsl.w	r4, r5, r4
 801c848:	fb52 4201 	smmla	r2, r2, r1, r4
 801c84c:	411a      	asrs	r2, r3
 801c84e:	4432      	add	r2, r6
 801c850:	f302 0207 	ssat	r2, #8, r2
 801c854:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801c858:	9b02      	ldr	r3, [sp, #8]
 801c85a:	f10b 0b02 	add.w	fp, fp, #2
 801c85e:	f10a 0a08 	add.w	sl, sl, #8
 801c862:	3304      	adds	r3, #4
 801c864:	9302      	str	r3, [sp, #8]
 801c866:	9b04      	ldr	r3, [sp, #16]
 801c868:	3308      	adds	r3, #8
 801c86a:	9304      	str	r3, [sp, #16]
 801c86c:	9b01      	ldr	r3, [sp, #4]
 801c86e:	3308      	adds	r3, #8
 801c870:	9301      	str	r3, [sp, #4]
 801c872:	9b03      	ldr	r3, [sp, #12]
 801c874:	3304      	adds	r3, #4
 801c876:	9303      	str	r3, [sp, #12]
 801c878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c87a:	459b      	cmp	fp, r3
 801c87c:	f47f af03 	bne.w	801c686 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 801c880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c882:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c884:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c888:	921e      	str	r2, [sp, #120]	; 0x78
 801c88a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c88c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c890:	921f      	str	r2, [sp, #124]	; 0x7c
 801c892:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c894:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c898:	9220      	str	r2, [sp, #128]	; 0x80
 801c89a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c89c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c8a0:	920d      	str	r2, [sp, #52]	; 0x34
 801c8a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c8a4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c8a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8aa:	07db      	lsls	r3, r3, #31
 801c8ac:	d545      	bpl.n	801c93a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 801c8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8b0:	681a      	ldr	r2, [r3, #0]
 801c8b2:	9b05      	ldr	r3, [sp, #20]
 801c8b4:	089e      	lsrs	r6, r3, #2
 801c8b6:	d014      	beq.n	801c8e2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 801c8b8:	00f7      	lsls	r7, r6, #3
 801c8ba:	9b07      	ldr	r3, [sp, #28]
 801c8bc:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801c8c0:	6805      	ldr	r5, [r0, #0]
 801c8c2:	3008      	adds	r0, #8
 801c8c4:	f850 4c04 	ldr.w	r4, [r0, #-4]
 801c8c8:	f8d3 c000 	ldr.w	ip, [r3]
 801c8cc:	fb25 220c 	smlad	r2, r5, ip, r2
 801c8d0:	685d      	ldr	r5, [r3, #4]
 801c8d2:	3308      	adds	r3, #8
 801c8d4:	fb24 2205 	smlad	r2, r4, r5, r2
 801c8d8:	4286      	cmp	r6, r0
 801c8da:	d1f1      	bne.n	801c8c0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 801c8dc:	9b07      	ldr	r3, [sp, #28]
 801c8de:	443b      	add	r3, r7
 801c8e0:	9307      	str	r3, [sp, #28]
 801c8e2:	9b05      	ldr	r3, [sp, #20]
 801c8e4:	f013 0303 	ands.w	r3, r3, #3
 801c8e8:	d011      	beq.n	801c90e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801c8ea:	3b01      	subs	r3, #1
 801c8ec:	9e07      	ldr	r6, [sp, #28]
 801c8ee:	8804      	ldrh	r4, [r0, #0]
 801c8f0:	8835      	ldrh	r5, [r6, #0]
 801c8f2:	b29b      	uxth	r3, r3
 801c8f4:	fb15 2204 	smlabb	r2, r5, r4, r2
 801c8f8:	b14b      	cbz	r3, 801c90e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801c8fa:	8845      	ldrh	r5, [r0, #2]
 801c8fc:	2b01      	cmp	r3, #1
 801c8fe:	8874      	ldrh	r4, [r6, #2]
 801c900:	fb15 2204 	smlabb	r2, r5, r4, r2
 801c904:	d003      	beq.n	801c90e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 801c906:	8880      	ldrh	r0, [r0, #4]
 801c908:	88b3      	ldrh	r3, [r6, #4]
 801c90a:	fb10 2203 	smlabb	r2, r0, r3, r2
 801c90e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c910:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c914:	2b15      	cmp	r3, #21
 801c916:	dd62      	ble.n	801c9de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 801c918:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801c91a:	1e9e      	subs	r6, r3, #2
 801c91c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c91e:	3b01      	subs	r3, #1
 801c920:	6825      	ldr	r5, [r4, #0]
 801c922:	2401      	movs	r4, #1
 801c924:	6800      	ldr	r0, [r0, #0]
 801c926:	40b4      	lsls	r4, r6
 801c928:	fb52 4200 	smmla	r2, r2, r0, r4
 801c92c:	fa42 f303 	asr.w	r3, r2, r3
 801c930:	442b      	add	r3, r5
 801c932:	f303 0307 	ssat	r3, #8, r3
 801c936:	f801 3b01 	strb.w	r3, [r1], #1
 801c93a:	4608      	mov	r0, r1
 801c93c:	b013      	add	sp, #76	; 0x4c
 801c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c942:	2b00      	cmp	r3, #0
 801c944:	dd21      	ble.n	801c98a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 801c946:	f8de 1000 	ldr.w	r1, [lr]
 801c94a:	0052      	lsls	r2, r2, #1
 801c94c:	6834      	ldr	r4, [r6, #0]
 801c94e:	fb52 4201 	smmla	r2, r2, r1, r4
 801c952:	411a      	asrs	r2, r3
 801c954:	f302 0307 	ssat	r3, #8, r2
 801c958:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801c95c:	e77c      	b.n	801c858 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 801c95e:	2d00      	cmp	r5, #0
 801c960:	dd24      	ble.n	801c9ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 801c962:	9e04      	ldr	r6, [sp, #16]
 801c964:	005b      	lsls	r3, r3, #1
 801c966:	9c01      	ldr	r4, [sp, #4]
 801c968:	f856 1c08 	ldr.w	r1, [r6, #-8]
 801c96c:	f1a6 0e04 	sub.w	lr, r6, #4
 801c970:	f854 4c08 	ldr.w	r4, [r4, #-8]
 801c974:	fb53 4301 	smmla	r3, r3, r1, r4
 801c978:	9c01      	ldr	r4, [sp, #4]
 801c97a:	fa43 f505 	asr.w	r5, r3, r5
 801c97e:	1f26      	subs	r6, r4, #4
 801c980:	f305 0507 	ssat	r5, #8, r5
 801c984:	f80b 5c02 	strb.w	r5, [fp, #-2]
 801c988:	e750      	b.n	801c82c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 801c98a:	f1c3 0301 	rsb	r3, r3, #1
 801c98e:	fa02 f303 	lsl.w	r3, r2, r3
 801c992:	f303 031f 	ssat	r3, #32, r3
 801c996:	f8de 2000 	ldr.w	r2, [lr]
 801c99a:	fb53 f312 	smmulr	r3, r3, r2
 801c99e:	6832      	ldr	r2, [r6, #0]
 801c9a0:	441a      	add	r2, r3
 801c9a2:	f302 0207 	ssat	r2, #8, r2
 801c9a6:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801c9aa:	e755      	b.n	801c858 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 801c9ac:	f1c5 0501 	rsb	r5, r5, #1
 801c9b0:	40ab      	lsls	r3, r5
 801c9b2:	f303 031f 	ssat	r3, #32, r3
 801c9b6:	9904      	ldr	r1, [sp, #16]
 801c9b8:	f1a1 0e04 	sub.w	lr, r1, #4
 801c9bc:	f851 1c08 	ldr.w	r1, [r1, #-8]
 801c9c0:	fb53 f111 	smmulr	r1, r3, r1
 801c9c4:	9c01      	ldr	r4, [sp, #4]
 801c9c6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801c9ca:	1f26      	subs	r6, r4, #4
 801c9cc:	440b      	add	r3, r1
 801c9ce:	f303 0307 	ssat	r3, #8, r3
 801c9d2:	f80b 3c02 	strb.w	r3, [fp, #-2]
 801c9d6:	e729      	b.n	801c82c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 801c9d8:	f04f 0e00 	mov.w	lr, #0
 801c9dc:	e6ac      	b.n	801c738 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	dd10      	ble.n	801ca04 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 801c9e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c9e4:	0052      	lsls	r2, r2, #1
 801c9e6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801c9e8:	6800      	ldr	r0, [r0, #0]
 801c9ea:	6824      	ldr	r4, [r4, #0]
 801c9ec:	fb52 4200 	smmla	r2, r2, r0, r4
 801c9f0:	fa42 f303 	asr.w	r3, r2, r3
 801c9f4:	f303 0307 	ssat	r3, #8, r3
 801c9f8:	f801 3b01 	strb.w	r3, [r1], #1
 801c9fc:	4608      	mov	r0, r1
 801c9fe:	b013      	add	sp, #76	; 0x4c
 801ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca04:	f1c3 0301 	rsb	r3, r3, #1
 801ca08:	fa02 f303 	lsl.w	r3, r2, r3
 801ca0c:	f303 031f 	ssat	r3, #32, r3
 801ca10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ca12:	6812      	ldr	r2, [r2, #0]
 801ca14:	fb53 f312 	smmulr	r3, r3, r2
 801ca18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ca1a:	6812      	ldr	r2, [r2, #0]
 801ca1c:	4413      	add	r3, r2
 801ca1e:	f303 0307 	ssat	r3, #8, r3
 801ca22:	f801 3b01 	strb.w	r3, [r1], #1
 801ca26:	4608      	mov	r0, r1
 801ca28:	b013      	add	sp, #76	; 0x4c
 801ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca2e:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ca30:	e73a      	b.n	801c8a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 801ca32:	bf00      	nop

0801ca34 <st_int8_avepool>:
 801ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca38:	b095      	sub	sp, #84	; 0x54
 801ca3a:	4699      	mov	r9, r3
 801ca3c:	4692      	mov	sl, r2
 801ca3e:	ee80 6a20 	vdiv.f32	s12, s0, s1
 801ca42:	9102      	str	r1, [sp, #8]
 801ca44:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 801ca48:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 801ca4c:	910f      	str	r1, [sp, #60]	; 0x3c
 801ca4e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 801ca52:	930d      	str	r3, [sp, #52]	; 0x34
 801ca54:	9110      	str	r1, [sp, #64]	; 0x40
 801ca56:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801ca5a:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 801ca5e:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801ca62:	9309      	str	r3, [sp, #36]	; 0x24
 801ca64:	9104      	str	r1, [sp, #16]
 801ca66:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801ca6a:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 801ca6e:	930e      	str	r3, [sp, #56]	; 0x38
 801ca70:	ee03 1a90 	vmov	s7, r1
 801ca74:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 801ca78:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 801ca7c:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 801ca80:	9211      	str	r2, [sp, #68]	; 0x44
 801ca82:	2a00      	cmp	r2, #0
 801ca84:	f000 80b3 	beq.w	801cbee <st_int8_avepool+0x1ba>
 801ca88:	eeb4 0a60 	vcmp.f32	s0, s1
 801ca8c:	ee03 1a10 	vmov	s6, r1
 801ca90:	4683      	mov	fp, r0
 801ca92:	ee13 1a90 	vmov	r1, s7
 801ca96:	ee13 0a10 	vmov	r0, s6
 801ca9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca9e:	bf0c      	ite	eq
 801caa0:	2201      	moveq	r2, #1
 801caa2:	2200      	movne	r2, #0
 801caa4:	4281      	cmp	r1, r0
 801caa6:	bf14      	ite	ne
 801caa8:	2200      	movne	r2, #0
 801caaa:	f002 0201 	andeq.w	r2, r2, #1
 801caae:	f1b8 0f01 	cmp.w	r8, #1
 801cab2:	9201      	str	r2, [sp, #4]
 801cab4:	f040 80c2 	bne.w	801cc3c <st_int8_avepool+0x208>
 801cab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801caba:	eddf 5a5e 	vldr	s11, [pc, #376]	; 801cc34 <st_int8_avepool+0x200>
 801cabe:	1ad3      	subs	r3, r2, r3
 801cac0:	eddf 2a5d 	vldr	s5, [pc, #372]	; 801cc38 <st_int8_avepool+0x204>
 801cac4:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 801cac8:	b29b      	uxth	r3, r3
 801caca:	1a89      	subs	r1, r1, r2
 801cacc:	4252      	negs	r2, r2
 801cace:	9306      	str	r3, [sp, #24]
 801cad0:	b293      	uxth	r3, r2
 801cad2:	2200      	movs	r2, #0
 801cad4:	910d      	str	r1, [sp, #52]	; 0x34
 801cad6:	930c      	str	r3, [sp, #48]	; 0x30
 801cad8:	4613      	mov	r3, r2
 801cada:	9904      	ldr	r1, [sp, #16]
 801cadc:	2900      	cmp	r1, #0
 801cade:	f000 80a6 	beq.w	801cc2e <st_int8_avepool+0x1fa>
 801cae2:	b292      	uxth	r2, r2
 801cae4:	2100      	movs	r1, #0
 801cae6:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 801caea:	9207      	str	r2, [sp, #28]
 801caec:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 801caf0:	9a04      	ldr	r2, [sp, #16]
 801caf2:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801caf6:	4688      	mov	r8, r1
 801caf8:	fb02 f303 	mul.w	r3, r2, r3
 801cafc:	9a06      	ldr	r2, [sp, #24]
 801cafe:	9308      	str	r3, [sp, #32]
 801cb00:	fa0f fe82 	sxth.w	lr, r2
 801cb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb06:	1ad3      	subs	r3, r2, r3
 801cb08:	b21b      	sxth	r3, r3
 801cb0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb0e:	9303      	str	r3, [sp, #12]
 801cb10:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801cb14:	9305      	str	r3, [sp, #20]
 801cb16:	b28b      	uxth	r3, r1
 801cb18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801cb1a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801cb1e:	930a      	str	r3, [sp, #40]	; 0x28
 801cb20:	4570      	cmp	r0, lr
 801cb22:	9b08      	ldr	r3, [sp, #32]
 801cb24:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801cb28:	4498      	add	r8, r3
 801cb2a:	da79      	bge.n	801cc20 <st_int8_avepool+0x1ec>
 801cb2c:	2700      	movs	r7, #0
 801cb2e:	46bc      	mov	ip, r7
 801cb30:	42a6      	cmp	r6, r4
 801cb32:	da17      	bge.n	801cb64 <st_int8_avepool+0x130>
 801cb34:	43c5      	mvns	r5, r0
 801cb36:	4548      	cmp	r0, r9
 801cb38:	fb0a f200 	mul.w	r2, sl, r0
 801cb3c:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 801cb40:	da10      	bge.n	801cb64 <st_int8_avepool+0x130>
 801cb42:	4432      	add	r2, r6
 801cb44:	4633      	mov	r3, r6
 801cb46:	445a      	add	r2, fp
 801cb48:	0419      	lsls	r1, r3, #16
 801cb4a:	d406      	bmi.n	801cb5a <st_int8_avepool+0x126>
 801cb4c:	b12d      	cbz	r5, 801cb5a <st_int8_avepool+0x126>
 801cb4e:	4553      	cmp	r3, sl
 801cb50:	da03      	bge.n	801cb5a <st_int8_avepool+0x126>
 801cb52:	f992 1000 	ldrsb.w	r1, [r2]
 801cb56:	3701      	adds	r7, #1
 801cb58:	448c      	add	ip, r1
 801cb5a:	3301      	adds	r3, #1
 801cb5c:	3201      	adds	r2, #1
 801cb5e:	b219      	sxth	r1, r3
 801cb60:	42a1      	cmp	r1, r4
 801cb62:	dbf1      	blt.n	801cb48 <st_int8_avepool+0x114>
 801cb64:	3001      	adds	r0, #1
 801cb66:	b200      	sxth	r0, r0
 801cb68:	4570      	cmp	r0, lr
 801cb6a:	dbe1      	blt.n	801cb30 <st_int8_avepool+0xfc>
 801cb6c:	9b01      	ldr	r3, [sp, #4]
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d140      	bne.n	801cbf4 <st_int8_avepool+0x1c0>
 801cb72:	ee07 ca90 	vmov	s15, ip
 801cb76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801cb7a:	ee07 7a90 	vmov	s15, r7
 801cb7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cb82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cb86:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801cb8a:	eeb0 7a64 	vmov.f32	s14, s9
 801cb8e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801cb92:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801cb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb9a:	fe65 7a25 	vselge.f32	s15, s10, s11
 801cb9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cba6:	ee17 3a90 	vmov	r3, s15
 801cbaa:	f303 0307 	ssat	r3, #8, r3
 801cbae:	9a02      	ldr	r2, [sp, #8]
 801cbb0:	f802 3008 	strb.w	r3, [r2, r8]
 801cbb4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801cbb6:	9b05      	ldr	r3, [sp, #20]
 801cbb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cbba:	4403      	add	r3, r0
 801cbbc:	9a03      	ldr	r2, [sp, #12]
 801cbbe:	3101      	adds	r1, #1
 801cbc0:	b29b      	uxth	r3, r3
 801cbc2:	4402      	add	r2, r0
 801cbc4:	b209      	sxth	r1, r1
 801cbc6:	9305      	str	r3, [sp, #20]
 801cbc8:	b292      	uxth	r2, r2
 801cbca:	9b04      	ldr	r3, [sp, #16]
 801cbcc:	4688      	mov	r8, r1
 801cbce:	9203      	str	r2, [sp, #12]
 801cbd0:	428b      	cmp	r3, r1
 801cbd2:	dca0      	bgt.n	801cb16 <st_int8_avepool+0xe2>
 801cbd4:	9a07      	ldr	r2, [sp, #28]
 801cbd6:	9b06      	ldr	r3, [sp, #24]
 801cbd8:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cbda:	3201      	adds	r2, #1
 801cbdc:	440b      	add	r3, r1
 801cbde:	b212      	sxth	r2, r2
 801cbe0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cbe2:	b29b      	uxth	r3, r3
 801cbe4:	4291      	cmp	r1, r2
 801cbe6:	9306      	str	r3, [sp, #24]
 801cbe8:	4613      	mov	r3, r2
 801cbea:	f73f af76 	bgt.w	801cada <st_int8_avepool+0xa6>
 801cbee:	b015      	add	sp, #84	; 0x54
 801cbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbf4:	f1bc 0f00 	cmp.w	ip, #0
 801cbf8:	db09      	blt.n	801cc0e <st_int8_avepool+0x1da>
 801cbfa:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 801cbfe:	fbb3 f7f7 	udiv	r7, r3, r7
 801cc02:	f307 0307 	ssat	r3, #8, r7
 801cc06:	9a02      	ldr	r2, [sp, #8]
 801cc08:	f802 3008 	strb.w	r3, [r2, r8]
 801cc0c:	e7d2      	b.n	801cbb4 <st_int8_avepool+0x180>
 801cc0e:	2f00      	cmp	r7, #0
 801cc10:	463b      	mov	r3, r7
 801cc12:	bfb8      	it	lt
 801cc14:	1c7b      	addlt	r3, r7, #1
 801cc16:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 801cc1a:	fb93 f7f7 	sdiv	r7, r3, r7
 801cc1e:	e7f0      	b.n	801cc02 <st_int8_avepool+0x1ce>
 801cc20:	9b01      	ldr	r3, [sp, #4]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	f040 80df 	bne.w	801cde6 <st_int8_avepool+0x3b2>
 801cc28:	eef0 7a62 	vmov.f32	s15, s5
 801cc2c:	e7ab      	b.n	801cb86 <st_int8_avepool+0x152>
 801cc2e:	b293      	uxth	r3, r2
 801cc30:	9307      	str	r3, [sp, #28]
 801cc32:	e7cf      	b.n	801cbd4 <st_int8_avepool+0x1a0>
 801cc34:	befffffc 	.word	0xbefffffc
 801cc38:	7fc00000 	.word	0x7fc00000
 801cc3c:	425b      	negs	r3, r3
 801cc3e:	2200      	movs	r2, #0
 801cc40:	9904      	ldr	r1, [sp, #16]
 801cc42:	b29b      	uxth	r3, r3
 801cc44:	f8cd b00c 	str.w	fp, [sp, #12]
 801cc48:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 801cc34 <st_int8_avepool+0x200>
 801cc4c:	46d3      	mov	fp, sl
 801cc4e:	9308      	str	r3, [sp, #32]
 801cc50:	46ca      	mov	sl, r9
 801cc52:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 801cc38 <st_int8_avepool+0x204>
 801cc56:	4613      	mov	r3, r2
 801cc58:	2900      	cmp	r1, #0
 801cc5a:	f000 80a3 	beq.w	801cda4 <st_int8_avepool+0x370>
 801cc5e:	b292      	uxth	r2, r2
 801cc60:	2100      	movs	r1, #0
 801cc62:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 801cc66:	920c      	str	r2, [sp, #48]	; 0x30
 801cc68:	9a04      	ldr	r2, [sp, #16]
 801cc6a:	fb03 f302 	mul.w	r3, r3, r2
 801cc6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc70:	9313      	str	r3, [sp, #76]	; 0x4c
 801cc72:	4253      	negs	r3, r2
 801cc74:	b29b      	uxth	r3, r3
 801cc76:	9306      	str	r3, [sp, #24]
 801cc78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc7a:	1a9b      	subs	r3, r3, r2
 801cc7c:	b29b      	uxth	r3, r3
 801cc7e:	9307      	str	r3, [sp, #28]
 801cc80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cc84:	4413      	add	r3, r2
 801cc86:	fa0f fe83 	sxth.w	lr, r3
 801cc8a:	b213      	sxth	r3, r2
 801cc8c:	930a      	str	r3, [sp, #40]	; 0x28
 801cc8e:	460b      	mov	r3, r1
 801cc90:	f1b8 0f00 	cmp.w	r8, #0
 801cc94:	f000 80a4 	beq.w	801cde0 <st_int8_avepool+0x3ac>
 801cc98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc9a:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 801cc9e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 801cca2:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 801cca6:	4413      	add	r3, r2
 801cca8:	b28a      	uxth	r2, r1
 801ccaa:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 801ccae:	920b      	str	r2, [sp, #44]	; 0x2c
 801ccb0:	9a02      	ldr	r2, [sp, #8]
 801ccb2:	fb08 2303 	mla	r3, r8, r3, r2
 801ccb6:	9312      	str	r3, [sp, #72]	; 0x48
 801ccb8:	2300      	movs	r3, #0
 801ccba:	4699      	mov	r9, r3
 801ccbc:	9305      	str	r3, [sp, #20]
 801ccbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ccc0:	4570      	cmp	r0, lr
 801ccc2:	f280 8088 	bge.w	801cdd6 <st_int8_avepool+0x3a2>
 801ccc6:	2700      	movs	r7, #0
 801ccc8:	46bc      	mov	ip, r7
 801ccca:	42ae      	cmp	r6, r5
 801cccc:	da1a      	bge.n	801cd04 <st_int8_avepool+0x2d0>
 801ccce:	43c4      	mvns	r4, r0
 801ccd0:	4550      	cmp	r0, sl
 801ccd2:	fb0b f300 	mul.w	r3, fp, r0
 801ccd6:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 801ccda:	da13      	bge.n	801cd04 <st_int8_avepool+0x2d0>
 801ccdc:	199a      	adds	r2, r3, r6
 801ccde:	9b03      	ldr	r3, [sp, #12]
 801cce0:	fb08 9202 	mla	r2, r8, r2, r9
 801cce4:	441a      	add	r2, r3
 801cce6:	4633      	mov	r3, r6
 801cce8:	0419      	lsls	r1, r3, #16
 801ccea:	d406      	bmi.n	801ccfa <st_int8_avepool+0x2c6>
 801ccec:	b12c      	cbz	r4, 801ccfa <st_int8_avepool+0x2c6>
 801ccee:	459b      	cmp	fp, r3
 801ccf0:	dd03      	ble.n	801ccfa <st_int8_avepool+0x2c6>
 801ccf2:	f992 1000 	ldrsb.w	r1, [r2]
 801ccf6:	3701      	adds	r7, #1
 801ccf8:	448c      	add	ip, r1
 801ccfa:	3301      	adds	r3, #1
 801ccfc:	4442      	add	r2, r8
 801ccfe:	b219      	sxth	r1, r3
 801cd00:	42a9      	cmp	r1, r5
 801cd02:	dbf1      	blt.n	801cce8 <st_int8_avepool+0x2b4>
 801cd04:	3001      	adds	r0, #1
 801cd06:	b200      	sxth	r0, r0
 801cd08:	4570      	cmp	r0, lr
 801cd0a:	dbde      	blt.n	801ccca <st_int8_avepool+0x296>
 801cd0c:	9b01      	ldr	r3, [sp, #4]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d14b      	bne.n	801cdaa <st_int8_avepool+0x376>
 801cd12:	ee07 ca90 	vmov	s15, ip
 801cd16:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 801cd1a:	ee07 7a90 	vmov	s15, r7
 801cd1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cd22:	eec2 7a87 	vdiv.f32	s15, s5, s14
 801cd26:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801cd2a:	eeb0 7a44 	vmov.f32	s14, s8
 801cd2e:	eea7 7a86 	vfma.f32	s14, s15, s12
 801cd32:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801cd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd3a:	fe64 7aa5 	vselge.f32	s15, s9, s11
 801cd3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cd46:	ee17 3a90 	vmov	r3, s15
 801cd4a:	f303 0307 	ssat	r3, #8, r3
 801cd4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd50:	f802 3009 	strb.w	r3, [r2, r9]
 801cd54:	9b05      	ldr	r3, [sp, #20]
 801cd56:	3301      	adds	r3, #1
 801cd58:	b21b      	sxth	r3, r3
 801cd5a:	4543      	cmp	r3, r8
 801cd5c:	4699      	mov	r9, r3
 801cd5e:	9305      	str	r3, [sp, #20]
 801cd60:	dbad      	blt.n	801ccbe <st_int8_avepool+0x28a>
 801cd62:	9a06      	ldr	r2, [sp, #24]
 801cd64:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801cd66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cd68:	4402      	add	r2, r0
 801cd6a:	9b07      	ldr	r3, [sp, #28]
 801cd6c:	3101      	adds	r1, #1
 801cd6e:	b292      	uxth	r2, r2
 801cd70:	4403      	add	r3, r0
 801cd72:	b209      	sxth	r1, r1
 801cd74:	9206      	str	r2, [sp, #24]
 801cd76:	b29b      	uxth	r3, r3
 801cd78:	9a04      	ldr	r2, [sp, #16]
 801cd7a:	9307      	str	r3, [sp, #28]
 801cd7c:	460b      	mov	r3, r1
 801cd7e:	4291      	cmp	r1, r2
 801cd80:	db86      	blt.n	801cc90 <st_int8_avepool+0x25c>
 801cd82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd84:	9b08      	ldr	r3, [sp, #32]
 801cd86:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cd88:	3201      	adds	r2, #1
 801cd8a:	440b      	add	r3, r1
 801cd8c:	b212      	sxth	r2, r2
 801cd8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cd90:	b29b      	uxth	r3, r3
 801cd92:	4291      	cmp	r1, r2
 801cd94:	9308      	str	r3, [sp, #32]
 801cd96:	4613      	mov	r3, r2
 801cd98:	f77f af29 	ble.w	801cbee <st_int8_avepool+0x1ba>
 801cd9c:	9904      	ldr	r1, [sp, #16]
 801cd9e:	2900      	cmp	r1, #0
 801cda0:	f47f af5d 	bne.w	801cc5e <st_int8_avepool+0x22a>
 801cda4:	b293      	uxth	r3, r2
 801cda6:	930c      	str	r3, [sp, #48]	; 0x30
 801cda8:	e7eb      	b.n	801cd82 <st_int8_avepool+0x34e>
 801cdaa:	f1bc 0f00 	cmp.w	ip, #0
 801cdae:	db09      	blt.n	801cdc4 <st_int8_avepool+0x390>
 801cdb0:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 801cdb4:	fbbc f7f7 	udiv	r7, ip, r7
 801cdb8:	f307 0707 	ssat	r7, #8, r7
 801cdbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cdbe:	f803 7009 	strb.w	r7, [r3, r9]
 801cdc2:	e7c7      	b.n	801cd54 <st_int8_avepool+0x320>
 801cdc4:	2f00      	cmp	r7, #0
 801cdc6:	463b      	mov	r3, r7
 801cdc8:	bfb8      	it	lt
 801cdca:	1c7b      	addlt	r3, r7, #1
 801cdcc:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 801cdd0:	fb93 f7f7 	sdiv	r7, r3, r7
 801cdd4:	e7f0      	b.n	801cdb8 <st_int8_avepool+0x384>
 801cdd6:	9b01      	ldr	r3, [sp, #4]
 801cdd8:	b92b      	cbnz	r3, 801cde6 <st_int8_avepool+0x3b2>
 801cdda:	eef0 7a66 	vmov.f32	s15, s13
 801cdde:	e7a2      	b.n	801cd26 <st_int8_avepool+0x2f2>
 801cde0:	b28b      	uxth	r3, r1
 801cde2:	930b      	str	r3, [sp, #44]	; 0x2c
 801cde4:	e7bd      	b.n	801cd62 <st_int8_avepool+0x32e>
 801cde6:	deff      	udf	#255	; 0xff

0801cde8 <arm_float_to_q15>:
 801cde8:	b530      	push	{r4, r5, lr}
 801cdea:	0895      	lsrs	r5, r2, #2
 801cdec:	d069      	beq.n	801cec2 <arm_float_to_q15+0xda>
 801cdee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cdf2:	f100 0c10 	add.w	ip, r0, #16
 801cdf6:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 801cdfa:	ed9f 6a55 	vldr	s12, [pc, #340]	; 801cf50 <arm_float_to_q15+0x168>
 801cdfe:	f101 0e08 	add.w	lr, r1, #8
 801ce02:	462c      	mov	r4, r5
 801ce04:	ed5c 7a04 	vldr	s15, [ip, #-16]
 801ce08:	ee67 6a86 	vmul.f32	s13, s15, s12
 801ce0c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801ce10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce14:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801ce18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ce20:	ee17 3a90 	vmov	r3, s15
 801ce24:	f303 030f 	ssat	r3, #16, r3
 801ce28:	f82e 3c08 	strh.w	r3, [lr, #-8]
 801ce2c:	ed5c 7a03 	vldr	s15, [ip, #-12]
 801ce30:	ee67 6a86 	vmul.f32	s13, s15, s12
 801ce34:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801ce38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce3c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801ce40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ce48:	ee17 3a90 	vmov	r3, s15
 801ce4c:	f303 030f 	ssat	r3, #16, r3
 801ce50:	f82e 3c06 	strh.w	r3, [lr, #-6]
 801ce54:	ed5c 7a02 	vldr	s15, [ip, #-8]
 801ce58:	ee67 6a86 	vmul.f32	s13, s15, s12
 801ce5c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801ce60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce64:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801ce68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ce70:	ee17 3a90 	vmov	r3, s15
 801ce74:	f303 030f 	ssat	r3, #16, r3
 801ce78:	f82e 3c04 	strh.w	r3, [lr, #-4]
 801ce7c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801ce80:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ce84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ce88:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ce8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ce90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce94:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801ce98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ce9c:	bfcc      	ite	gt
 801ce9e:	ee16 3a90 	vmovgt	r3, s13
 801cea2:	ee17 3a90 	vmovle	r3, s15
 801cea6:	f303 030f 	ssat	r3, #16, r3
 801ceaa:	3c01      	subs	r4, #1
 801ceac:	f82e 3c02 	strh.w	r3, [lr, #-2]
 801ceb0:	f10c 0c10 	add.w	ip, ip, #16
 801ceb4:	f10e 0e08 	add.w	lr, lr, #8
 801ceb8:	d1a4      	bne.n	801ce04 <arm_float_to_q15+0x1c>
 801ceba:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801cebe:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801cec2:	f012 0203 	ands.w	r2, r2, #3
 801cec6:	d042      	beq.n	801cf4e <arm_float_to_q15+0x166>
 801cec8:	edd0 7a00 	vldr	s15, [r0]
 801cecc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ced0:	eddf 5a1f 	vldr	s11, [pc, #124]	; 801cf50 <arm_float_to_q15+0x168>
 801ced4:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801ced8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801cedc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801cee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cee4:	fe77 7a06 	vselgt.f32	s15, s14, s12
 801cee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ceec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cef0:	ee17 3a90 	vmov	r3, s15
 801cef4:	f303 030f 	ssat	r3, #16, r3
 801cef8:	3a01      	subs	r2, #1
 801cefa:	800b      	strh	r3, [r1, #0]
 801cefc:	d027      	beq.n	801cf4e <arm_float_to_q15+0x166>
 801cefe:	edd0 7a01 	vldr	s15, [r0, #4]
 801cf02:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801cf06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf0e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 801cf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cf1a:	ee17 3a90 	vmov	r3, s15
 801cf1e:	f303 030f 	ssat	r3, #16, r3
 801cf22:	2a01      	cmp	r2, #1
 801cf24:	804b      	strh	r3, [r1, #2]
 801cf26:	d012      	beq.n	801cf4e <arm_float_to_q15+0x166>
 801cf28:	edd0 7a02 	vldr	s15, [r0, #8]
 801cf2c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801cf30:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf38:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801cf3c:	ee37 7a25 	vadd.f32	s14, s14, s11
 801cf40:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801cf44:	ee17 3a10 	vmov	r3, s14
 801cf48:	f303 030f 	ssat	r3, #16, r3
 801cf4c:	808b      	strh	r3, [r1, #4]
 801cf4e:	bd30      	pop	{r4, r5, pc}
 801cf50:	47000000 	.word	0x47000000

0801cf54 <arm_float_to_q7>:
 801cf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf56:	0895      	lsrs	r5, r2, #2
 801cf58:	d06f      	beq.n	801d03a <arm_float_to_q7+0xe6>
 801cf5a:	f101 0c04 	add.w	ip, r1, #4
 801cf5e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801cf62:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 801cf66:	f100 0e10 	add.w	lr, r0, #16
 801cf6a:	eddf 5a5f 	vldr	s11, [pc, #380]	; 801d0e8 <arm_float_to_q7+0x194>
 801cf6e:	00ae      	lsls	r6, r5, #2
 801cf70:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 801cf74:	ed5e 7a04 	vldr	s15, [lr, #-16]
 801cf78:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801cf7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801cf80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf84:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801cf88:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cf90:	ee17 3a90 	vmov	r3, s15
 801cf94:	b21b      	sxth	r3, r3
 801cf96:	f303 0307 	ssat	r3, #8, r3
 801cf9a:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801cf9e:	ed5e 7a03 	vldr	s15, [lr, #-12]
 801cfa2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801cfa6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801cfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfae:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801cfb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cfba:	ee17 3a90 	vmov	r3, s15
 801cfbe:	b21b      	sxth	r3, r3
 801cfc0:	f303 0307 	ssat	r3, #8, r3
 801cfc4:	f80c 3c03 	strb.w	r3, [ip, #-3]
 801cfc8:	ed5e 7a02 	vldr	s15, [lr, #-8]
 801cfcc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801cfd0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801cfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfd8:	fe76 7a05 	vselgt.f32	s15, s12, s10
 801cfdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cfe4:	ee17 3a90 	vmov	r3, s15
 801cfe8:	b21b      	sxth	r3, r3
 801cfea:	f303 0307 	ssat	r3, #8, r3
 801cfee:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801cff2:	ed5e 6a01 	vldr	s13, [lr, #-4]
 801cff6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801cffa:	ee76 7a86 	vadd.f32	s15, s13, s12
 801cffe:	ee36 7ac6 	vsub.f32	s14, s13, s12
 801d002:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801d006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d00a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801d00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d012:	ee17 3a90 	vmov	r3, s15
 801d016:	ee17 7a10 	vmov	r7, s14
 801d01a:	b21b      	sxth	r3, r3
 801d01c:	b23f      	sxth	r7, r7
 801d01e:	dd56      	ble.n	801d0ce <arm_float_to_q7+0x17a>
 801d020:	f303 0307 	ssat	r3, #8, r3
 801d024:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801d028:	f10c 0c04 	add.w	ip, ip, #4
 801d02c:	f10e 0e10 	add.w	lr, lr, #16
 801d030:	4564      	cmp	r4, ip
 801d032:	d19f      	bne.n	801cf74 <arm_float_to_q7+0x20>
 801d034:	4431      	add	r1, r6
 801d036:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801d03a:	f012 0203 	ands.w	r2, r2, #3
 801d03e:	d045      	beq.n	801d0cc <arm_float_to_q7+0x178>
 801d040:	edd0 7a00 	vldr	s15, [r0]
 801d044:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d048:	ed9f 5a27 	vldr	s10, [pc, #156]	; 801d0e8 <arm_float_to_q7+0x194>
 801d04c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 801d050:	ee67 6a85 	vmul.f32	s13, s15, s10
 801d054:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801d058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d05c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801d060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d068:	ee17 3a90 	vmov	r3, s15
 801d06c:	b21b      	sxth	r3, r3
 801d06e:	f303 0307 	ssat	r3, #8, r3
 801d072:	3a01      	subs	r2, #1
 801d074:	700b      	strb	r3, [r1, #0]
 801d076:	d029      	beq.n	801d0cc <arm_float_to_q7+0x178>
 801d078:	edd0 6a01 	vldr	s13, [r0, #4]
 801d07c:	ee26 6a85 	vmul.f32	s12, s13, s10
 801d080:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801d084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d088:	fe77 6a25 	vselgt.f32	s13, s14, s11
 801d08c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d090:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801d094:	ee16 3a90 	vmov	r3, s13
 801d098:	b21b      	sxth	r3, r3
 801d09a:	f303 0307 	ssat	r3, #8, r3
 801d09e:	2a01      	cmp	r2, #1
 801d0a0:	704b      	strb	r3, [r1, #1]
 801d0a2:	d013      	beq.n	801d0cc <arm_float_to_q7+0x178>
 801d0a4:	edd0 7a02 	vldr	s15, [r0, #8]
 801d0a8:	ee27 5a85 	vmul.f32	s10, s15, s10
 801d0ac:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801d0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0b4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801d0b8:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d0bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d0c0:	ee17 3a90 	vmov	r3, s15
 801d0c4:	b21b      	sxth	r3, r3
 801d0c6:	f303 0307 	ssat	r3, #8, r3
 801d0ca:	708b      	strb	r3, [r1, #2]
 801d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0ce:	f307 0707 	ssat	r7, #8, r7
 801d0d2:	f80c 7c01 	strb.w	r7, [ip, #-1]
 801d0d6:	f10c 0c04 	add.w	ip, ip, #4
 801d0da:	f10e 0e10 	add.w	lr, lr, #16
 801d0de:	45a4      	cmp	ip, r4
 801d0e0:	f47f af48 	bne.w	801cf74 <arm_float_to_q7+0x20>
 801d0e4:	e7a6      	b.n	801d034 <arm_float_to_q7+0xe0>
 801d0e6:	bf00      	nop
 801d0e8:	43000000 	.word	0x43000000

0801d0ec <arm_q15_to_float>:
 801d0ec:	b530      	push	{r4, r5, lr}
 801d0ee:	0894      	lsrs	r4, r2, #2
 801d0f0:	d038      	beq.n	801d164 <arm_q15_to_float+0x78>
 801d0f2:	f100 0c08 	add.w	ip, r0, #8
 801d0f6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801d1b4 <arm_q15_to_float+0xc8>
 801d0fa:	f101 0310 	add.w	r3, r1, #16
 801d0fe:	46a6      	mov	lr, r4
 801d100:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 801d104:	3310      	adds	r3, #16
 801d106:	f10c 0c08 	add.w	ip, ip, #8
 801d10a:	f1be 0e01 	subs.w	lr, lr, #1
 801d10e:	ee07 5a90 	vmov	s15, r5
 801d112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d116:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d11a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 801d11e:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 801d122:	ee07 5a90 	vmov	s15, r5
 801d126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d12a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d12e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 801d132:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 801d136:	ee07 5a90 	vmov	s15, r5
 801d13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d13e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d142:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801d146:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 801d14a:	ee07 5a90 	vmov	s15, r5
 801d14e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d152:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d156:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801d15a:	d1d1      	bne.n	801d100 <arm_q15_to_float+0x14>
 801d15c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801d160:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 801d164:	f012 0203 	ands.w	r2, r2, #3
 801d168:	d023      	beq.n	801d1b2 <arm_q15_to_float+0xc6>
 801d16a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d16e:	3a01      	subs	r2, #1
 801d170:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801d1b4 <arm_q15_to_float+0xc8>
 801d174:	ee07 3a90 	vmov	s15, r3
 801d178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d17c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d180:	edc1 7a00 	vstr	s15, [r1]
 801d184:	d015      	beq.n	801d1b2 <arm_q15_to_float+0xc6>
 801d186:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d18a:	2a01      	cmp	r2, #1
 801d18c:	ee07 3a90 	vmov	s15, r3
 801d190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d194:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d198:	edc1 7a01 	vstr	s15, [r1, #4]
 801d19c:	d009      	beq.n	801d1b2 <arm_q15_to_float+0xc6>
 801d19e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d1a2:	ee07 3a90 	vmov	s15, r3
 801d1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d1ae:	edc1 7a02 	vstr	s15, [r1, #8]
 801d1b2:	bd30      	pop	{r4, r5, pc}
 801d1b4:	38000000 	.word	0x38000000

0801d1b8 <arm_q7_to_float>:
 801d1b8:	b530      	push	{r4, r5, lr}
 801d1ba:	0894      	lsrs	r4, r2, #2
 801d1bc:	d036      	beq.n	801d22c <arm_q7_to_float+0x74>
 801d1be:	1d03      	adds	r3, r0, #4
 801d1c0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801d1c4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 801d27c <arm_q7_to_float+0xc4>
 801d1c8:	f101 0010 	add.w	r0, r1, #16
 801d1cc:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 801d1d0:	3010      	adds	r0, #16
 801d1d2:	ee07 ea90 	vmov	s15, lr
 801d1d6:	469e      	mov	lr, r3
 801d1d8:	3304      	adds	r3, #4
 801d1da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1de:	45e6      	cmp	lr, ip
 801d1e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d1e4:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 801d1e8:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 801d1ec:	ee07 5a90 	vmov	s15, r5
 801d1f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d1f8:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 801d1fc:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 801d200:	ee07 5a90 	vmov	s15, r5
 801d204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d208:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d20c:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 801d210:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 801d214:	ee07 5a90 	vmov	s15, r5
 801d218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d21c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d220:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 801d224:	d1d2      	bne.n	801d1cc <arm_q7_to_float+0x14>
 801d226:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801d22a:	4660      	mov	r0, ip
 801d22c:	f012 0203 	ands.w	r2, r2, #3
 801d230:	d023      	beq.n	801d27a <arm_q7_to_float+0xc2>
 801d232:	f990 3000 	ldrsb.w	r3, [r0]
 801d236:	3a01      	subs	r2, #1
 801d238:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801d27c <arm_q7_to_float+0xc4>
 801d23c:	ee07 3a90 	vmov	s15, r3
 801d240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d244:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d248:	edc1 7a00 	vstr	s15, [r1]
 801d24c:	d015      	beq.n	801d27a <arm_q7_to_float+0xc2>
 801d24e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801d252:	2a01      	cmp	r2, #1
 801d254:	ee07 3a90 	vmov	s15, r3
 801d258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d25c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d260:	edc1 7a01 	vstr	s15, [r1, #4]
 801d264:	d009      	beq.n	801d27a <arm_q7_to_float+0xc2>
 801d266:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801d26a:	ee07 3a90 	vmov	s15, r3
 801d26e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d272:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d276:	edc1 7a02 	vstr	s15, [r1, #8]
 801d27a:	bd30      	pop	{r4, r5, pc}
 801d27c:	3c000000 	.word	0x3c000000

0801d280 <ai_version_get>:
 801d280:	0212      	lsls	r2, r2, #8
 801d282:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801d286:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801d28a:	4770      	bx	lr

0801d28c <get_tensor_byte_size>:
 801d28c:	b430      	push	{r4, r5}
 801d28e:	6985      	ldr	r5, [r0, #24]
 801d290:	68c4      	ldr	r4, [r0, #12]
 801d292:	6941      	ldr	r1, [r0, #20]
 801d294:	4b06      	ldr	r3, [pc, #24]	; (801d2b0 <get_tensor_byte_size+0x24>)
 801d296:	6828      	ldr	r0, [r5, #0]
 801d298:	4a06      	ldr	r2, [pc, #24]	; (801d2b4 <get_tensor_byte_size+0x28>)
 801d29a:	4003      	ands	r3, r0
 801d29c:	68c9      	ldr	r1, [r1, #12]
 801d29e:	68e0      	ldr	r0, [r4, #12]
 801d2a0:	4293      	cmp	r3, r2
 801d2a2:	fb01 f000 	mul.w	r0, r1, r0
 801d2a6:	d101      	bne.n	801d2ac <get_tensor_byte_size+0x20>
 801d2a8:	3007      	adds	r0, #7
 801d2aa:	08c0      	lsrs	r0, r0, #3
 801d2ac:	bc30      	pop	{r4, r5}
 801d2ae:	4770      	bx	lr
 801d2b0:	017fffff 	.word	0x017fffff
 801d2b4:	000400c0 	.word	0x000400c0

0801d2b8 <ai_array_to_buffer_fmt>:
 801d2b8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801d2bc:	2b02      	cmp	r3, #2
 801d2be:	d050      	beq.n	801d362 <ai_array_to_buffer_fmt+0xaa>
 801d2c0:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801d2c4:	4b29      	ldr	r3, [pc, #164]	; (801d36c <ai_array_to_buffer_fmt+0xb4>)
 801d2c6:	429a      	cmp	r2, r3
 801d2c8:	d00b      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d2ca:	dc1c      	bgt.n	801d306 <ai_array_to_buffer_fmt+0x4e>
 801d2cc:	4b28      	ldr	r3, [pc, #160]	; (801d370 <ai_array_to_buffer_fmt+0xb8>)
 801d2ce:	429a      	cmp	r2, r3
 801d2d0:	d007      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d2d2:	dd0b      	ble.n	801d2ec <ai_array_to_buffer_fmt+0x34>
 801d2d4:	4b27      	ldr	r3, [pc, #156]	; (801d374 <ai_array_to_buffer_fmt+0xbc>)
 801d2d6:	429a      	cmp	r2, r3
 801d2d8:	d003      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d2da:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801d2de:	429a      	cmp	r2, r3
 801d2e0:	d131      	bne.n	801d346 <ai_array_to_buffer_fmt+0x8e>
 801d2e2:	4613      	mov	r3, r2
 801d2e4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801d2e8:	4318      	orrs	r0, r3
 801d2ea:	4770      	bx	lr
 801d2ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801d2f0:	429a      	cmp	r2, r3
 801d2f2:	d0f6      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d2f4:	dd2c      	ble.n	801d350 <ai_array_to_buffer_fmt+0x98>
 801d2f6:	4b20      	ldr	r3, [pc, #128]	; (801d378 <ai_array_to_buffer_fmt+0xc0>)
 801d2f8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801d2fc:	429a      	cmp	r2, r3
 801d2fe:	bf18      	it	ne
 801d300:	2340      	movne	r3, #64	; 0x40
 801d302:	4318      	orrs	r0, r3
 801d304:	4770      	bx	lr
 801d306:	4b1d      	ldr	r3, [pc, #116]	; (801d37c <ai_array_to_buffer_fmt+0xc4>)
 801d308:	429a      	cmp	r2, r3
 801d30a:	d0ea      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d30c:	dd0e      	ble.n	801d32c <ai_array_to_buffer_fmt+0x74>
 801d30e:	4b1c      	ldr	r3, [pc, #112]	; (801d380 <ai_array_to_buffer_fmt+0xc8>)
 801d310:	429a      	cmp	r2, r3
 801d312:	d0e6      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d314:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 801d318:	429a      	cmp	r2, r3
 801d31a:	d0e2      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d31c:	4b19      	ldr	r3, [pc, #100]	; (801d384 <ai_array_to_buffer_fmt+0xcc>)
 801d31e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801d322:	429a      	cmp	r2, r3
 801d324:	bf18      	it	ne
 801d326:	2340      	movne	r3, #64	; 0x40
 801d328:	4318      	orrs	r0, r3
 801d32a:	4770      	bx	lr
 801d32c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801d330:	429a      	cmp	r2, r3
 801d332:	d0d6      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d334:	3307      	adds	r3, #7
 801d336:	429a      	cmp	r2, r3
 801d338:	d0d3      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d33a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801d33e:	429a      	cmp	r2, r3
 801d340:	bf18      	it	ne
 801d342:	2340      	movne	r3, #64	; 0x40
 801d344:	e7ce      	b.n	801d2e4 <ai_array_to_buffer_fmt+0x2c>
 801d346:	4b10      	ldr	r3, [pc, #64]	; (801d388 <ai_array_to_buffer_fmt+0xd0>)
 801d348:	429a      	cmp	r2, r3
 801d34a:	bf18      	it	ne
 801d34c:	2340      	movne	r3, #64	; 0x40
 801d34e:	e7c9      	b.n	801d2e4 <ai_array_to_buffer_fmt+0x2c>
 801d350:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801d354:	429a      	cmp	r2, r3
 801d356:	d0c4      	beq.n	801d2e2 <ai_array_to_buffer_fmt+0x2a>
 801d358:	3380      	adds	r3, #128	; 0x80
 801d35a:	429a      	cmp	r2, r3
 801d35c:	bf18      	it	ne
 801d35e:	2340      	movne	r3, #64	; 0x40
 801d360:	e7c0      	b.n	801d2e4 <ai_array_to_buffer_fmt+0x2c>
 801d362:	4b0a      	ldr	r3, [pc, #40]	; (801d38c <ai_array_to_buffer_fmt+0xd4>)
 801d364:	4003      	ands	r3, r0
 801d366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801d36a:	e7bb      	b.n	801d2e4 <ai_array_to_buffer_fmt+0x2c>
 801d36c:	00840040 	.word	0x00840040
 801d370:	00040840 	.word	0x00040840
 801d374:	00041040 	.word	0x00041040
 801d378:	00040447 	.word	0x00040447
 801d37c:	00840840 	.word	0x00840840
 801d380:	00841040 	.word	0x00841040
 801d384:	0084084f 	.word	0x0084084f
 801d388:	0004084f 	.word	0x0004084f
 801d38c:	00803fff 	.word	0x00803fff

0801d390 <ai_array_get_byte_size>:
 801d390:	b319      	cbz	r1, 801d3da <ai_array_get_byte_size+0x4a>
 801d392:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801d396:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801d39a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801d39e:	11c0      	asrs	r0, r0, #7
 801d3a0:	fb03 f101 	mul.w	r1, r3, r1
 801d3a4:	2a04      	cmp	r2, #4
 801d3a6:	f101 0107 	add.w	r1, r1, #7
 801d3aa:	f021 0107 	bic.w	r1, r1, #7
 801d3ae:	fa21 f10c 	lsr.w	r1, r1, ip
 801d3b2:	d00b      	beq.n	801d3cc <ai_array_get_byte_size+0x3c>
 801d3b4:	2a08      	cmp	r2, #8
 801d3b6:	d002      	beq.n	801d3be <ai_array_get_byte_size+0x2e>
 801d3b8:	3107      	adds	r1, #7
 801d3ba:	08c8      	lsrs	r0, r1, #3
 801d3bc:	4770      	bx	lr
 801d3be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801d3c2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801d3c6:	3107      	adds	r1, #7
 801d3c8:	08c8      	lsrs	r0, r1, #3
 801d3ca:	4770      	bx	lr
 801d3cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801d3d0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801d3d4:	3107      	adds	r1, #7
 801d3d6:	08c8      	lsrs	r0, r1, #3
 801d3d8:	4770      	bx	lr
 801d3da:	4608      	mov	r0, r1
 801d3dc:	4770      	bx	lr
 801d3de:	bf00      	nop

0801d3e0 <ai_array_get_data_byte_size>:
 801d3e0:	b161      	cbz	r1, 801d3fc <ai_array_get_data_byte_size+0x1c>
 801d3e2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801d3e6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801d3ea:	fb03 f101 	mul.w	r1, r3, r1
 801d3ee:	1dc8      	adds	r0, r1, #7
 801d3f0:	f020 0007 	bic.w	r0, r0, #7
 801d3f4:	40d0      	lsrs	r0, r2
 801d3f6:	3007      	adds	r0, #7
 801d3f8:	08c0      	lsrs	r0, r0, #3
 801d3fa:	4770      	bx	lr
 801d3fc:	4608      	mov	r0, r1
 801d3fe:	4770      	bx	lr

0801d400 <core_get_broadcasted_shape>:
 801d400:	b470      	push	{r4, r5, r6}
 801d402:	6804      	ldr	r4, [r0, #0]
 801d404:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801d408:	b304      	cbz	r4, 801d44c <core_get_broadcasted_shape+0x4c>
 801d40a:	4623      	mov	r3, r4
 801d40c:	3b01      	subs	r3, #1
 801d40e:	429c      	cmp	r4, r3
 801d410:	d917      	bls.n	801d442 <core_get_broadcasted_shape+0x42>
 801d412:	6815      	ldr	r5, [r2, #0]
 801d414:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801d418:	2401      	movs	r4, #1
 801d41a:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 801d41e:	d202      	bcs.n	801d426 <core_get_broadcasted_shape+0x26>
 801d420:	6854      	ldr	r4, [r2, #4]
 801d422:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801d426:	680e      	ldr	r6, [r1, #0]
 801d428:	2501      	movs	r5, #1
 801d42a:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 801d42e:	d202      	bcs.n	801d436 <core_get_broadcasted_shape+0x36>
 801d430:	684d      	ldr	r5, [r1, #4]
 801d432:	f855 500c 	ldr.w	r5, [r5, ip]
 801d436:	42ac      	cmp	r4, r5
 801d438:	bf38      	it	cc
 801d43a:	462c      	movcc	r4, r5
 801d43c:	6845      	ldr	r5, [r0, #4]
 801d43e:	f845 400c 	str.w	r4, [r5, ip]
 801d442:	b11b      	cbz	r3, 801d44c <core_get_broadcasted_shape+0x4c>
 801d444:	6804      	ldr	r4, [r0, #0]
 801d446:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801d44a:	e7df      	b.n	801d40c <core_get_broadcasted_shape+0xc>
 801d44c:	bc70      	pop	{r4, r5, r6}
 801d44e:	4770      	bx	lr

0801d450 <core_compute_offsets_in_bytes>:
 801d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d454:	e9d1 5c00 	ldrd	r5, ip, [r1]
 801d458:	6857      	ldr	r7, [r2, #4]
 801d45a:	b085      	sub	sp, #20
 801d45c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d460:	687e      	ldr	r6, [r7, #4]
 801d462:	1ba1      	subs	r1, r4, r6
 801d464:	bf18      	it	ne
 801d466:	2101      	movne	r1, #1
 801d468:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 801d46c:	9101      	str	r1, [sp, #4]
 801d46e:	f0c0 809c 	bcc.w	801d5aa <core_compute_offsets_in_bytes+0x15a>
 801d472:	f8dc 9010 	ldr.w	r9, [ip, #16]
 801d476:	fb09 fe04 	mul.w	lr, r9, r4
 801d47a:	6812      	ldr	r2, [r2, #0]
 801d47c:	f8d0 b000 	ldr.w	fp, [r0]
 801d480:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801d484:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 801d488:	bf2c      	ite	cs
 801d48a:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 801d48e:	f04f 0a01 	movcc.w	sl, #1
 801d492:	9202      	str	r2, [sp, #8]
 801d494:	ebb9 0c0a 	subs.w	ip, r9, sl
 801d498:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 801d49c:	bf18      	it	ne
 801d49e:	f04f 0c01 	movne.w	ip, #1
 801d4a2:	ebb5 0708 	subs.w	r7, r5, r8
 801d4a6:	9203      	str	r2, [sp, #12]
 801d4a8:	f3cb 2217 	ubfx	r2, fp, #8, #24
 801d4ac:	bf18      	it	ne
 801d4ae:	2701      	movne	r7, #1
 801d4b0:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 801d4b4:	d31f      	bcc.n	801d4f6 <core_compute_offsets_in_bytes+0xa6>
 801d4b6:	1ba2      	subs	r2, r4, r6
 801d4b8:	6841      	ldr	r1, [r0, #4]
 801d4ba:	fab2 f282 	clz	r2, r2
 801d4be:	0952      	lsrs	r2, r2, #5
 801d4c0:	604a      	str	r2, [r1, #4]
 801d4c2:	f8d0 b000 	ldr.w	fp, [r0]
 801d4c6:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 801d4ca:	f3cb 2217 	ubfx	r2, fp, #8, #24
 801d4ce:	d312      	bcc.n	801d4f6 <core_compute_offsets_in_bytes+0xa6>
 801d4d0:	9a01      	ldr	r2, [sp, #4]
 801d4d2:	45d1      	cmp	r9, sl
 801d4d4:	bf14      	ite	ne
 801d4d6:	2200      	movne	r2, #0
 801d4d8:	f002 0201 	andeq.w	r2, r2, #1
 801d4dc:	42b4      	cmp	r4, r6
 801d4de:	bf14      	ite	ne
 801d4e0:	f04f 0900 	movne.w	r9, #0
 801d4e4:	f00c 0901 	andeq.w	r9, ip, #1
 801d4e8:	6846      	ldr	r6, [r0, #4]
 801d4ea:	fb04 2219 	mls	r2, r4, r9, r2
 801d4ee:	6132      	str	r2, [r6, #16]
 801d4f0:	6802      	ldr	r2, [r0, #0]
 801d4f2:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801d4f6:	2a02      	cmp	r2, #2
 801d4f8:	fb0e f607 	mul.w	r6, lr, r7
 801d4fc:	d90f      	bls.n	801d51e <core_compute_offsets_in_bytes+0xce>
 801d4fe:	9a01      	ldr	r2, [sp, #4]
 801d500:	4545      	cmp	r5, r8
 801d502:	bf14      	ite	ne
 801d504:	2200      	movne	r2, #0
 801d506:	f002 0201 	andeq.w	r2, r2, #1
 801d50a:	ea0c 0202 	and.w	r2, ip, r2
 801d50e:	1b92      	subs	r2, r2, r6
 801d510:	fb04 240c 	mla	r4, r4, ip, r2
 801d514:	6842      	ldr	r2, [r0, #4]
 801d516:	6094      	str	r4, [r2, #8]
 801d518:	6802      	ldr	r2, [r0, #0]
 801d51a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801d51e:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 801d522:	428c      	cmp	r4, r1
 801d524:	d13f      	bne.n	801d5a6 <core_compute_offsets_in_bytes+0x156>
 801d526:	2f00      	cmp	r7, #0
 801d528:	d03d      	beq.n	801d5a6 <core_compute_offsets_in_bytes+0x156>
 801d52a:	9901      	ldr	r1, [sp, #4]
 801d52c:	ea01 010c 	and.w	r1, r1, ip
 801d530:	2a03      	cmp	r2, #3
 801d532:	d910      	bls.n	801d556 <core_compute_offsets_in_bytes+0x106>
 801d534:	fb0e f505 	mul.w	r5, lr, r5
 801d538:	e9dd 2402 	ldrd	r2, r4, [sp, #8]
 801d53c:	ebb2 0c04 	subs.w	ip, r2, r4
 801d540:	6842      	ldr	r2, [r0, #4]
 801d542:	bf18      	it	ne
 801d544:	f04f 0c01 	movne.w	ip, #1
 801d548:	fb0c 1115 	mls	r1, ip, r5, r1
 801d54c:	440e      	add	r6, r1
 801d54e:	60d6      	str	r6, [r2, #12]
 801d550:	6802      	ldr	r2, [r0, #0]
 801d552:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801d556:	2a01      	cmp	r2, #1
 801d558:	d912      	bls.n	801d580 <core_compute_offsets_in_bytes+0x130>
 801d55a:	6841      	ldr	r1, [r0, #4]
 801d55c:	684a      	ldr	r2, [r1, #4]
 801d55e:	fb03 f202 	mul.w	r2, r3, r2
 801d562:	604a      	str	r2, [r1, #4]
 801d564:	6801      	ldr	r1, [r0, #0]
 801d566:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801d56a:	f3c1 2217 	ubfx	r2, r1, #8, #24
 801d56e:	d307      	bcc.n	801d580 <core_compute_offsets_in_bytes+0x130>
 801d570:	6841      	ldr	r1, [r0, #4]
 801d572:	690a      	ldr	r2, [r1, #16]
 801d574:	fb03 f202 	mul.w	r2, r3, r2
 801d578:	610a      	str	r2, [r1, #16]
 801d57a:	6802      	ldr	r2, [r0, #0]
 801d57c:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801d580:	2a02      	cmp	r2, #2
 801d582:	d90d      	bls.n	801d5a0 <core_compute_offsets_in_bytes+0x150>
 801d584:	6841      	ldr	r1, [r0, #4]
 801d586:	688a      	ldr	r2, [r1, #8]
 801d588:	fb03 f202 	mul.w	r2, r3, r2
 801d58c:	608a      	str	r2, [r1, #8]
 801d58e:	6802      	ldr	r2, [r0, #0]
 801d590:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801d594:	d304      	bcc.n	801d5a0 <core_compute_offsets_in_bytes+0x150>
 801d596:	6841      	ldr	r1, [r0, #4]
 801d598:	68ca      	ldr	r2, [r1, #12]
 801d59a:	fb02 f303 	mul.w	r3, r2, r3
 801d59e:	60cb      	str	r3, [r1, #12]
 801d5a0:	b005      	add	sp, #20
 801d5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5a6:	2100      	movs	r1, #0
 801d5a8:	e7c2      	b.n	801d530 <core_compute_offsets_in_bytes+0xe0>
 801d5aa:	46a6      	mov	lr, r4
 801d5ac:	f04f 0901 	mov.w	r9, #1
 801d5b0:	e763      	b.n	801d47a <core_compute_offsets_in_bytes+0x2a>
 801d5b2:	bf00      	nop

0801d5b4 <_ZdlPvj>:
 801d5b4:	f000 b8c9 	b.w	801d74a <_ZdlPv>

0801d5b8 <_Znwj>:
 801d5b8:	2801      	cmp	r0, #1
 801d5ba:	bf38      	it	cc
 801d5bc:	2001      	movcc	r0, #1
 801d5be:	b510      	push	{r4, lr}
 801d5c0:	4604      	mov	r4, r0
 801d5c2:	4620      	mov	r0, r4
 801d5c4:	f000 fb32 	bl	801dc2c <malloc>
 801d5c8:	b930      	cbnz	r0, 801d5d8 <_Znwj+0x20>
 801d5ca:	f000 f8c1 	bl	801d750 <_ZSt15get_new_handlerv>
 801d5ce:	b908      	cbnz	r0, 801d5d4 <_Znwj+0x1c>
 801d5d0:	f000 fafa 	bl	801dbc8 <abort>
 801d5d4:	4780      	blx	r0
 801d5d6:	e7f4      	b.n	801d5c2 <_Znwj+0xa>
 801d5d8:	bd10      	pop	{r4, pc}

0801d5da <_ZSt17__throw_bad_allocv>:
 801d5da:	b508      	push	{r3, lr}
 801d5dc:	f000 faf4 	bl	801dbc8 <abort>

0801d5e0 <_ZSt19__throw_logic_errorPKc>:
 801d5e0:	b508      	push	{r3, lr}
 801d5e2:	f000 faf1 	bl	801dbc8 <abort>

0801d5e6 <_ZSt20__throw_length_errorPKc>:
 801d5e6:	b508      	push	{r3, lr}
 801d5e8:	f000 faee 	bl	801dbc8 <abort>

0801d5ec <_ZSt24__throw_out_of_range_fmtPKcz>:
 801d5ec:	b40f      	push	{r0, r1, r2, r3}
 801d5ee:	b580      	push	{r7, lr}
 801d5f0:	b084      	sub	sp, #16
 801d5f2:	af00      	add	r7, sp, #0
 801d5f4:	f107 0418 	add.w	r4, r7, #24
 801d5f8:	f854 2b04 	ldr.w	r2, [r4], #4
 801d5fc:	607a      	str	r2, [r7, #4]
 801d5fe:	4610      	mov	r0, r2
 801d600:	f7e2 fe76 	bl	80002f0 <strlen>
 801d604:	f200 2307 	addw	r3, r0, #519	; 0x207
 801d608:	f023 0307 	bic.w	r3, r3, #7
 801d60c:	ebad 0d03 	sub.w	sp, sp, r3
 801d610:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801d614:	687a      	ldr	r2, [r7, #4]
 801d616:	60fc      	str	r4, [r7, #12]
 801d618:	4623      	mov	r3, r4
 801d61a:	4668      	mov	r0, sp
 801d61c:	f000 f854 	bl	801d6c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801d620:	f000 fad2 	bl	801dbc8 <abort>

0801d624 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 801d624:	b580      	push	{r7, lr}
 801d626:	b09c      	sub	sp, #112	; 0x70
 801d628:	4606      	mov	r6, r0
 801d62a:	af00      	add	r7, sp, #0
 801d62c:	460c      	mov	r4, r1
 801d62e:	1ba4      	subs	r4, r4, r6
 801d630:	490e      	ldr	r1, [pc, #56]	; (801d66c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801d632:	2269      	movs	r2, #105	; 0x69
 801d634:	1d38      	adds	r0, r7, #4
 801d636:	f000 fb09 	bl	801dc4c <memcpy>
 801d63a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801d63e:	f023 0307 	bic.w	r3, r3, #7
 801d642:	ebad 0d03 	sub.w	sp, sp, r3
 801d646:	466d      	mov	r5, sp
 801d648:	2268      	movs	r2, #104	; 0x68
 801d64a:	1d39      	adds	r1, r7, #4
 801d64c:	4628      	mov	r0, r5
 801d64e:	f000 fafd 	bl	801dc4c <memcpy>
 801d652:	4622      	mov	r2, r4
 801d654:	4631      	mov	r1, r6
 801d656:	f105 0068 	add.w	r0, r5, #104	; 0x68
 801d65a:	442c      	add	r4, r5
 801d65c:	f000 faf6 	bl	801dc4c <memcpy>
 801d660:	2300      	movs	r3, #0
 801d662:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801d666:	4628      	mov	r0, r5
 801d668:	f7ff ffba 	bl	801d5e0 <_ZSt19__throw_logic_errorPKc>
 801d66c:	080931d0 	.word	0x080931d0

0801d670 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d674:	af00      	add	r7, sp, #0
 801d676:	b084      	sub	sp, #16
 801d678:	466d      	mov	r5, sp
 801d67a:	f105 040c 	add.w	r4, r5, #12
 801d67e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801d6c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 801d682:	4623      	mov	r3, r4
 801d684:	f04f 0c0a 	mov.w	ip, #10
 801d688:	fbb2 f6fc 	udiv	r6, r2, ip
 801d68c:	fb0c 2e16 	mls	lr, ip, r6, r2
 801d690:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801d694:	f803 ed01 	strb.w	lr, [r3, #-1]!
 801d698:	4696      	mov	lr, r2
 801d69a:	f1be 0f09 	cmp.w	lr, #9
 801d69e:	4632      	mov	r2, r6
 801d6a0:	d8f2      	bhi.n	801d688 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801d6a2:	1ae4      	subs	r4, r4, r3
 801d6a4:	428c      	cmp	r4, r1
 801d6a6:	d809      	bhi.n	801d6bc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801d6a8:	f1c4 030c 	rsb	r3, r4, #12
 801d6ac:	4622      	mov	r2, r4
 801d6ae:	18e9      	adds	r1, r5, r3
 801d6b0:	f000 facc 	bl	801dc4c <memcpy>
 801d6b4:	4620      	mov	r0, r4
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6bc:	f04f 34ff 	mov.w	r4, #4294967295
 801d6c0:	e7f8      	b.n	801d6b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801d6c2:	bf00      	nop
 801d6c4:	08093239 	.word	0x08093239

0801d6c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801d6c8:	3901      	subs	r1, #1
 801d6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6ce:	4607      	mov	r7, r0
 801d6d0:	4615      	mov	r5, r2
 801d6d2:	eb00 0801 	add.w	r8, r0, r1
 801d6d6:	4604      	mov	r4, r0
 801d6d8:	782a      	ldrb	r2, [r5, #0]
 801d6da:	b392      	cbz	r2, 801d742 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 801d6dc:	4544      	cmp	r4, r8
 801d6de:	d22a      	bcs.n	801d736 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801d6e0:	2a25      	cmp	r2, #37	; 0x25
 801d6e2:	d107      	bne.n	801d6f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801d6e4:	786a      	ldrb	r2, [r5, #1]
 801d6e6:	2a73      	cmp	r2, #115	; 0x73
 801d6e8:	d009      	beq.n	801d6fe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 801d6ea:	2a7a      	cmp	r2, #122	; 0x7a
 801d6ec:	d012      	beq.n	801d714 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 801d6ee:	2a25      	cmp	r2, #37	; 0x25
 801d6f0:	d100      	bne.n	801d6f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801d6f2:	3501      	adds	r5, #1
 801d6f4:	f815 2b01 	ldrb.w	r2, [r5], #1
 801d6f8:	f804 2b01 	strb.w	r2, [r4], #1
 801d6fc:	e7ec      	b.n	801d6d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801d6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801d702:	3a01      	subs	r2, #1
 801d704:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801d708:	b1c9      	cbz	r1, 801d73e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801d70a:	4544      	cmp	r4, r8
 801d70c:	d013      	beq.n	801d736 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801d70e:	f804 1b01 	strb.w	r1, [r4], #1
 801d712:	e7f7      	b.n	801d704 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 801d714:	78aa      	ldrb	r2, [r5, #2]
 801d716:	2a75      	cmp	r2, #117	; 0x75
 801d718:	d1ec      	bne.n	801d6f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801d71a:	461e      	mov	r6, r3
 801d71c:	eba8 0104 	sub.w	r1, r8, r4
 801d720:	f856 2b04 	ldr.w	r2, [r6], #4
 801d724:	4620      	mov	r0, r4
 801d726:	f7ff ffa3 	bl	801d670 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801d72a:	2800      	cmp	r0, #0
 801d72c:	dd03      	ble.n	801d736 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801d72e:	4404      	add	r4, r0
 801d730:	3503      	adds	r5, #3
 801d732:	4633      	mov	r3, r6
 801d734:	e7d0      	b.n	801d6d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801d736:	4621      	mov	r1, r4
 801d738:	4638      	mov	r0, r7
 801d73a:	f7ff ff73 	bl	801d624 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801d73e:	3502      	adds	r5, #2
 801d740:	e7ca      	b.n	801d6d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801d742:	7022      	strb	r2, [r4, #0]
 801d744:	1be0      	subs	r0, r4, r7
 801d746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d74a <_ZdlPv>:
 801d74a:	f000 ba77 	b.w	801dc3c <free>
	...

0801d750 <_ZSt15get_new_handlerv>:
 801d750:	4b02      	ldr	r3, [pc, #8]	; (801d75c <_ZSt15get_new_handlerv+0xc>)
 801d752:	6818      	ldr	r0, [r3, #0]
 801d754:	f3bf 8f5b 	dmb	ish
 801d758:	4770      	bx	lr
 801d75a:	bf00      	nop
 801d75c:	2405e3b0 	.word	0x2405e3b0

0801d760 <with_errnof>:
 801d760:	b513      	push	{r0, r1, r4, lr}
 801d762:	4604      	mov	r4, r0
 801d764:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d768:	f000 fa36 	bl	801dbd8 <__errno>
 801d76c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d770:	6004      	str	r4, [r0, #0]
 801d772:	b002      	add	sp, #8
 801d774:	bd10      	pop	{r4, pc}

0801d776 <xflowf>:
 801d776:	b130      	cbz	r0, 801d786 <xflowf+0x10>
 801d778:	eef1 7a40 	vneg.f32	s15, s0
 801d77c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d780:	2022      	movs	r0, #34	; 0x22
 801d782:	f7ff bfed 	b.w	801d760 <with_errnof>
 801d786:	eef0 7a40 	vmov.f32	s15, s0
 801d78a:	e7f7      	b.n	801d77c <xflowf+0x6>

0801d78c <__math_uflowf>:
 801d78c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d794 <__math_uflowf+0x8>
 801d790:	f7ff bff1 	b.w	801d776 <xflowf>
 801d794:	10000000 	.word	0x10000000

0801d798 <__math_may_uflowf>:
 801d798:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d7a0 <__math_may_uflowf+0x8>
 801d79c:	f7ff bfeb 	b.w	801d776 <xflowf>
 801d7a0:	1a200000 	.word	0x1a200000

0801d7a4 <__math_oflowf>:
 801d7a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d7ac <__math_oflowf+0x8>
 801d7a8:	f7ff bfe5 	b.w	801d776 <xflowf>
 801d7ac:	70000000 	.word	0x70000000

0801d7b0 <__math_divzerof>:
 801d7b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d7b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801d7b8:	2800      	cmp	r0, #0
 801d7ba:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801d7be:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801d7cc <__math_divzerof+0x1c>
 801d7c2:	2022      	movs	r0, #34	; 0x22
 801d7c4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d7c8:	f7ff bfca 	b.w	801d760 <with_errnof>
 801d7cc:	00000000 	.word	0x00000000

0801d7d0 <__math_invalidf>:
 801d7d0:	eef0 7a40 	vmov.f32	s15, s0
 801d7d4:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d7d8:	eef4 7a67 	vcmp.f32	s15, s15
 801d7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7e0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801d7e4:	d602      	bvs.n	801d7ec <__math_invalidf+0x1c>
 801d7e6:	2021      	movs	r0, #33	; 0x21
 801d7e8:	f7ff bfba 	b.w	801d760 <with_errnof>
 801d7ec:	4770      	bx	lr
	...

0801d7f0 <expf>:
 801d7f0:	ee10 2a10 	vmov	r2, s0
 801d7f4:	f240 412a 	movw	r1, #1066	; 0x42a
 801d7f8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801d7fc:	428b      	cmp	r3, r1
 801d7fe:	b430      	push	{r4, r5}
 801d800:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d804:	d92a      	bls.n	801d85c <expf+0x6c>
 801d806:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801d80a:	d058      	beq.n	801d8be <expf+0xce>
 801d80c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d810:	d303      	bcc.n	801d81a <expf+0x2a>
 801d812:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d816:	bc30      	pop	{r4, r5}
 801d818:	4770      	bx	lr
 801d81a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801d8c4 <expf+0xd4>
 801d81e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d826:	dd03      	ble.n	801d830 <expf+0x40>
 801d828:	bc30      	pop	{r4, r5}
 801d82a:	2000      	movs	r0, #0
 801d82c:	f7ff bfba 	b.w	801d7a4 <__math_oflowf>
 801d830:	eddf 7a25 	vldr	s15, [pc, #148]	; 801d8c8 <expf+0xd8>
 801d834:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d83c:	d503      	bpl.n	801d846 <expf+0x56>
 801d83e:	bc30      	pop	{r4, r5}
 801d840:	2000      	movs	r0, #0
 801d842:	f7ff bfa3 	b.w	801d78c <__math_uflowf>
 801d846:	eddf 7a21 	vldr	s15, [pc, #132]	; 801d8cc <expf+0xdc>
 801d84a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d852:	d503      	bpl.n	801d85c <expf+0x6c>
 801d854:	bc30      	pop	{r4, r5}
 801d856:	2000      	movs	r0, #0
 801d858:	f7ff bf9e 	b.w	801d798 <__math_may_uflowf>
 801d85c:	4b1c      	ldr	r3, [pc, #112]	; (801d8d0 <expf+0xe0>)
 801d85e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d862:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801d866:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801d86a:	eeb0 7b44 	vmov.f64	d7, d4
 801d86e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d872:	ee17 0a10 	vmov	r0, s14
 801d876:	ee37 7b44 	vsub.f64	d7, d7, d4
 801d87a:	f000 021f 	and.w	r2, r0, #31
 801d87e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801d882:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801d886:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d88a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801d88e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801d892:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d896:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801d89a:	684d      	ldr	r5, [r1, #4]
 801d89c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801d8a0:	2100      	movs	r1, #0
 801d8a2:	190a      	adds	r2, r1, r4
 801d8a4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801d8a8:	eea5 0b07 	vfma.f64	d0, d5, d7
 801d8ac:	ec43 2b17 	vmov	d7, r2, r3
 801d8b0:	eea6 0b04 	vfma.f64	d0, d6, d4
 801d8b4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d8b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d8bc:	e7ab      	b.n	801d816 <expf+0x26>
 801d8be:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801d8d4 <expf+0xe4>
 801d8c2:	e7a8      	b.n	801d816 <expf+0x26>
 801d8c4:	42b17217 	.word	0x42b17217
 801d8c8:	c2cff1b4 	.word	0xc2cff1b4
 801d8cc:	c2ce8ecf 	.word	0xc2ce8ecf
 801d8d0:	08093248 	.word	0x08093248
 801d8d4:	00000000 	.word	0x00000000

0801d8d8 <checkint>:
 801d8d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801d8dc:	2b7e      	cmp	r3, #126	; 0x7e
 801d8de:	dd10      	ble.n	801d902 <checkint+0x2a>
 801d8e0:	2b96      	cmp	r3, #150	; 0x96
 801d8e2:	dc0c      	bgt.n	801d8fe <checkint+0x26>
 801d8e4:	2201      	movs	r2, #1
 801d8e6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801d8ea:	fa02 f303 	lsl.w	r3, r2, r3
 801d8ee:	1e5a      	subs	r2, r3, #1
 801d8f0:	4202      	tst	r2, r0
 801d8f2:	d106      	bne.n	801d902 <checkint+0x2a>
 801d8f4:	4203      	tst	r3, r0
 801d8f6:	bf0c      	ite	eq
 801d8f8:	2002      	moveq	r0, #2
 801d8fa:	2001      	movne	r0, #1
 801d8fc:	4770      	bx	lr
 801d8fe:	2002      	movs	r0, #2
 801d900:	4770      	bx	lr
 801d902:	2000      	movs	r0, #0
 801d904:	4770      	bx	lr
	...

0801d908 <powf>:
 801d908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d90a:	ee10 1a10 	vmov	r1, s0
 801d90e:	ee10 4a90 	vmov	r4, s1
 801d912:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801d916:	0062      	lsls	r2, r4, #1
 801d918:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801d91c:	eef0 7a40 	vmov.f32	s15, s0
 801d920:	f102 30ff 	add.w	r0, r2, #4294967295
 801d924:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801d928:	d252      	bcs.n	801d9d0 <powf+0xc8>
 801d92a:	4298      	cmp	r0, r3
 801d92c:	d252      	bcs.n	801d9d4 <powf+0xcc>
 801d92e:	2000      	movs	r0, #0
 801d930:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801d934:	4ca0      	ldr	r4, [pc, #640]	; (801dbb8 <powf+0x2b0>)
 801d936:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801d93a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801d93e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801d942:	0dd2      	lsrs	r2, r2, #23
 801d944:	05d2      	lsls	r2, r2, #23
 801d946:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801d94a:	1a8b      	subs	r3, r1, r2
 801d94c:	ed95 6b00 	vldr	d6, [r5]
 801d950:	ee07 3a90 	vmov	s15, r3
 801d954:	15d2      	asrs	r2, r2, #23
 801d956:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d95a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801d95e:	ed95 6b02 	vldr	d6, [r5, #8]
 801d962:	ee25 2b05 	vmul.f64	d2, d5, d5
 801d966:	ee22 1b02 	vmul.f64	d1, d2, d2
 801d96a:	ee07 2a90 	vmov	s15, r2
 801d96e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801d972:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d976:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d97a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 801d97e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801d982:	eea5 3b06 	vfma.f64	d3, d5, d6
 801d986:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 801d98a:	eea5 6b04 	vfma.f64	d6, d5, d4
 801d98e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801d992:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801d996:	eea5 7b04 	vfma.f64	d7, d5, d4
 801d99a:	eea2 7b06 	vfma.f64	d7, d2, d6
 801d99e:	eea3 7b01 	vfma.f64	d7, d3, d1
 801d9a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d9a6:	ee10 3a90 	vmov	r3, s1
 801d9aa:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801d9ae:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801d9b2:	429a      	cmp	r2, r3
 801d9b4:	f0c0 80b1 	bcc.w	801db1a <powf+0x212>
 801d9b8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 801db98 <powf+0x290>
 801d9bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9c4:	dd79      	ble.n	801daba <powf+0x1b2>
 801d9c6:	b003      	add	sp, #12
 801d9c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9cc:	f7ff beea 	b.w	801d7a4 <__math_oflowf>
 801d9d0:	4298      	cmp	r0, r3
 801d9d2:	d32d      	bcc.n	801da30 <powf+0x128>
 801d9d4:	b952      	cbnz	r2, 801d9ec <powf+0xe4>
 801d9d6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801d9da:	005b      	lsls	r3, r3, #1
 801d9dc:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801d9e0:	f240 80c9 	bls.w	801db76 <powf+0x26e>
 801d9e4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 801d9e8:	b003      	add	sp, #12
 801d9ea:	bd30      	pop	{r4, r5, pc}
 801d9ec:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801d9f0:	d105      	bne.n	801d9fe <powf+0xf6>
 801d9f2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801d9f6:	0064      	lsls	r4, r4, #1
 801d9f8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801d9fc:	e7f0      	b.n	801d9e0 <powf+0xd8>
 801d9fe:	004b      	lsls	r3, r1, #1
 801da00:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801da04:	d8ee      	bhi.n	801d9e4 <powf+0xdc>
 801da06:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801da0a:	d1eb      	bne.n	801d9e4 <powf+0xdc>
 801da0c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801da10:	f000 80b1 	beq.w	801db76 <powf+0x26e>
 801da14:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801da18:	ea6f 0404 	mvn.w	r4, r4
 801da1c:	bf34      	ite	cc
 801da1e:	2300      	movcc	r3, #0
 801da20:	2301      	movcs	r3, #1
 801da22:	0fe4      	lsrs	r4, r4, #31
 801da24:	42a3      	cmp	r3, r4
 801da26:	f040 80a9 	bne.w	801db7c <powf+0x274>
 801da2a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801da2e:	e7db      	b.n	801d9e8 <powf+0xe0>
 801da30:	004d      	lsls	r5, r1, #1
 801da32:	1e6a      	subs	r2, r5, #1
 801da34:	429a      	cmp	r2, r3
 801da36:	d31c      	bcc.n	801da72 <powf+0x16a>
 801da38:	2900      	cmp	r1, #0
 801da3a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801da3e:	da0f      	bge.n	801da60 <powf+0x158>
 801da40:	ee10 0a90 	vmov	r0, s1
 801da44:	f7ff ff48 	bl	801d8d8 <checkint>
 801da48:	2801      	cmp	r0, #1
 801da4a:	d109      	bne.n	801da60 <powf+0x158>
 801da4c:	eeb1 0a40 	vneg.f32	s0, s0
 801da50:	b945      	cbnz	r5, 801da64 <powf+0x15c>
 801da52:	2c00      	cmp	r4, #0
 801da54:	dac8      	bge.n	801d9e8 <powf+0xe0>
 801da56:	b003      	add	sp, #12
 801da58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801da5c:	f7ff bea8 	b.w	801d7b0 <__math_divzerof>
 801da60:	2000      	movs	r0, #0
 801da62:	e7f5      	b.n	801da50 <powf+0x148>
 801da64:	2c00      	cmp	r4, #0
 801da66:	dabf      	bge.n	801d9e8 <powf+0xe0>
 801da68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801da6c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801da70:	e7ba      	b.n	801d9e8 <powf+0xe0>
 801da72:	2900      	cmp	r1, #0
 801da74:	da1f      	bge.n	801dab6 <powf+0x1ae>
 801da76:	ee10 0a90 	vmov	r0, s1
 801da7a:	f7ff ff2d 	bl	801d8d8 <checkint>
 801da7e:	b920      	cbnz	r0, 801da8a <powf+0x182>
 801da80:	b003      	add	sp, #12
 801da82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801da86:	f7ff bea3 	b.w	801d7d0 <__math_invalidf>
 801da8a:	2801      	cmp	r0, #1
 801da8c:	bf14      	ite	ne
 801da8e:	2000      	movne	r0, #0
 801da90:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801da94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801da98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801da9c:	f4bf af48 	bcs.w	801d930 <powf+0x28>
 801daa0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 801dbbc <powf+0x2b4>
 801daa4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801daa8:	ee10 3a10 	vmov	r3, s0
 801daac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dab0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801dab4:	e73c      	b.n	801d930 <powf+0x28>
 801dab6:	2000      	movs	r0, #0
 801dab8:	e7ee      	b.n	801da98 <powf+0x190>
 801daba:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801dba0 <powf+0x298>
 801dabe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801dac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dac6:	dd10      	ble.n	801daea <powf+0x1e2>
 801dac8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801dacc:	2800      	cmp	r0, #0
 801dace:	d158      	bne.n	801db82 <powf+0x27a>
 801dad0:	9300      	str	r3, [sp, #0]
 801dad2:	eddd 7a00 	vldr	s15, [sp]
 801dad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dada:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dade:	eef4 7a47 	vcmp.f32	s15, s14
 801dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dae6:	f47f af6e 	bne.w	801d9c6 <powf+0xbe>
 801daea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801dba8 <powf+0x2a0>
 801daee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daf6:	d804      	bhi.n	801db02 <powf+0x1fa>
 801daf8:	b003      	add	sp, #12
 801dafa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dafe:	f7ff be45 	b.w	801d78c <__math_uflowf>
 801db02:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801dbb0 <powf+0x2a8>
 801db06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801db0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db0e:	d504      	bpl.n	801db1a <powf+0x212>
 801db10:	b003      	add	sp, #12
 801db12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db16:	f7ff be3f 	b.w	801d798 <__math_may_uflowf>
 801db1a:	4b29      	ldr	r3, [pc, #164]	; (801dbc0 <powf+0x2b8>)
 801db1c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801db20:	ee30 6b07 	vadd.f64	d6, d0, d7
 801db24:	ee16 2a10 	vmov	r2, s12
 801db28:	ee36 7b47 	vsub.f64	d7, d6, d7
 801db2c:	f002 011f 	and.w	r1, r2, #31
 801db30:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801db34:	ee30 7b47 	vsub.f64	d7, d0, d7
 801db38:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801db3c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801db40:	ee27 4b07 	vmul.f64	d4, d7, d7
 801db44:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801db48:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801db4c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801db50:	686d      	ldr	r5, [r5, #4]
 801db52:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801db56:	1882      	adds	r2, r0, r2
 801db58:	2300      	movs	r3, #0
 801db5a:	1918      	adds	r0, r3, r4
 801db5c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 801db60:	eea7 0b05 	vfma.f64	d0, d7, d5
 801db64:	ec41 0b17 	vmov	d7, r0, r1
 801db68:	eea6 0b04 	vfma.f64	d0, d6, d4
 801db6c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801db70:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801db74:	e738      	b.n	801d9e8 <powf+0xe0>
 801db76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801db7a:	e735      	b.n	801d9e8 <powf+0xe0>
 801db7c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801dbc4 <powf+0x2bc>
 801db80:	e732      	b.n	801d9e8 <powf+0xe0>
 801db82:	9301      	str	r3, [sp, #4]
 801db84:	eddd 7a01 	vldr	s15, [sp, #4]
 801db88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801db8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801db90:	e7a5      	b.n	801dade <powf+0x1d6>
 801db92:	bf00      	nop
 801db94:	f3af 8000 	nop.w
 801db98:	ffd1d571 	.word	0xffd1d571
 801db9c:	405fffff 	.word	0x405fffff
 801dba0:	ffa3aae2 	.word	0xffa3aae2
 801dba4:	405fffff 	.word	0x405fffff
 801dba8:	00000000 	.word	0x00000000
 801dbac:	c062c000 	.word	0xc062c000
 801dbb0:	00000000 	.word	0x00000000
 801dbb4:	c062a000 	.word	0xc062a000
 801dbb8:	08093390 	.word	0x08093390
 801dbbc:	4b000000 	.word	0x4b000000
 801dbc0:	08093248 	.word	0x08093248
 801dbc4:	00000000 	.word	0x00000000

0801dbc8 <abort>:
 801dbc8:	b508      	push	{r3, lr}
 801dbca:	2006      	movs	r0, #6
 801dbcc:	f000 fa14 	bl	801dff8 <raise>
 801dbd0:	2001      	movs	r0, #1
 801dbd2:	f001 f8cb 	bl	801ed6c <_exit>
	...

0801dbd8 <__errno>:
 801dbd8:	4b01      	ldr	r3, [pc, #4]	; (801dbe0 <__errno+0x8>)
 801dbda:	6818      	ldr	r0, [r3, #0]
 801dbdc:	4770      	bx	lr
 801dbde:	bf00      	nop
 801dbe0:	240081e4 	.word	0x240081e4

0801dbe4 <__libc_init_array>:
 801dbe4:	b570      	push	{r4, r5, r6, lr}
 801dbe6:	4d0d      	ldr	r5, [pc, #52]	; (801dc1c <__libc_init_array+0x38>)
 801dbe8:	4c0d      	ldr	r4, [pc, #52]	; (801dc20 <__libc_init_array+0x3c>)
 801dbea:	1b64      	subs	r4, r4, r5
 801dbec:	10a4      	asrs	r4, r4, #2
 801dbee:	2600      	movs	r6, #0
 801dbf0:	42a6      	cmp	r6, r4
 801dbf2:	d109      	bne.n	801dc08 <__libc_init_array+0x24>
 801dbf4:	4d0b      	ldr	r5, [pc, #44]	; (801dc24 <__libc_init_array+0x40>)
 801dbf6:	4c0c      	ldr	r4, [pc, #48]	; (801dc28 <__libc_init_array+0x44>)
 801dbf8:	f001 f8ba 	bl	801ed70 <_init>
 801dbfc:	1b64      	subs	r4, r4, r5
 801dbfe:	10a4      	asrs	r4, r4, #2
 801dc00:	2600      	movs	r6, #0
 801dc02:	42a6      	cmp	r6, r4
 801dc04:	d105      	bne.n	801dc12 <__libc_init_array+0x2e>
 801dc06:	bd70      	pop	{r4, r5, r6, pc}
 801dc08:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc0c:	4798      	blx	r3
 801dc0e:	3601      	adds	r6, #1
 801dc10:	e7ee      	b.n	801dbf0 <__libc_init_array+0xc>
 801dc12:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc16:	4798      	blx	r3
 801dc18:	3601      	adds	r6, #1
 801dc1a:	e7f2      	b.n	801dc02 <__libc_init_array+0x1e>
 801dc1c:	08093558 	.word	0x08093558
 801dc20:	08093558 	.word	0x08093558
 801dc24:	08093558 	.word	0x08093558
 801dc28:	0809355c 	.word	0x0809355c

0801dc2c <malloc>:
 801dc2c:	4b02      	ldr	r3, [pc, #8]	; (801dc38 <malloc+0xc>)
 801dc2e:	4601      	mov	r1, r0
 801dc30:	6818      	ldr	r0, [r3, #0]
 801dc32:	f000 b8a7 	b.w	801dd84 <_malloc_r>
 801dc36:	bf00      	nop
 801dc38:	240081e4 	.word	0x240081e4

0801dc3c <free>:
 801dc3c:	4b02      	ldr	r3, [pc, #8]	; (801dc48 <free+0xc>)
 801dc3e:	4601      	mov	r1, r0
 801dc40:	6818      	ldr	r0, [r3, #0]
 801dc42:	f000 b833 	b.w	801dcac <_free_r>
 801dc46:	bf00      	nop
 801dc48:	240081e4 	.word	0x240081e4

0801dc4c <memcpy>:
 801dc4c:	440a      	add	r2, r1
 801dc4e:	4291      	cmp	r1, r2
 801dc50:	f100 33ff 	add.w	r3, r0, #4294967295
 801dc54:	d100      	bne.n	801dc58 <memcpy+0xc>
 801dc56:	4770      	bx	lr
 801dc58:	b510      	push	{r4, lr}
 801dc5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dc62:	4291      	cmp	r1, r2
 801dc64:	d1f9      	bne.n	801dc5a <memcpy+0xe>
 801dc66:	bd10      	pop	{r4, pc}

0801dc68 <memmove>:
 801dc68:	4288      	cmp	r0, r1
 801dc6a:	b510      	push	{r4, lr}
 801dc6c:	eb01 0402 	add.w	r4, r1, r2
 801dc70:	d902      	bls.n	801dc78 <memmove+0x10>
 801dc72:	4284      	cmp	r4, r0
 801dc74:	4623      	mov	r3, r4
 801dc76:	d807      	bhi.n	801dc88 <memmove+0x20>
 801dc78:	1e43      	subs	r3, r0, #1
 801dc7a:	42a1      	cmp	r1, r4
 801dc7c:	d008      	beq.n	801dc90 <memmove+0x28>
 801dc7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dc82:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dc86:	e7f8      	b.n	801dc7a <memmove+0x12>
 801dc88:	4402      	add	r2, r0
 801dc8a:	4601      	mov	r1, r0
 801dc8c:	428a      	cmp	r2, r1
 801dc8e:	d100      	bne.n	801dc92 <memmove+0x2a>
 801dc90:	bd10      	pop	{r4, pc}
 801dc92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dc96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dc9a:	e7f7      	b.n	801dc8c <memmove+0x24>

0801dc9c <memset>:
 801dc9c:	4402      	add	r2, r0
 801dc9e:	4603      	mov	r3, r0
 801dca0:	4293      	cmp	r3, r2
 801dca2:	d100      	bne.n	801dca6 <memset+0xa>
 801dca4:	4770      	bx	lr
 801dca6:	f803 1b01 	strb.w	r1, [r3], #1
 801dcaa:	e7f9      	b.n	801dca0 <memset+0x4>

0801dcac <_free_r>:
 801dcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dcae:	2900      	cmp	r1, #0
 801dcb0:	d044      	beq.n	801dd3c <_free_r+0x90>
 801dcb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dcb6:	9001      	str	r0, [sp, #4]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	f1a1 0404 	sub.w	r4, r1, #4
 801dcbe:	bfb8      	it	lt
 801dcc0:	18e4      	addlt	r4, r4, r3
 801dcc2:	f000 fc95 	bl	801e5f0 <__malloc_lock>
 801dcc6:	4a1e      	ldr	r2, [pc, #120]	; (801dd40 <_free_r+0x94>)
 801dcc8:	9801      	ldr	r0, [sp, #4]
 801dcca:	6813      	ldr	r3, [r2, #0]
 801dccc:	b933      	cbnz	r3, 801dcdc <_free_r+0x30>
 801dcce:	6063      	str	r3, [r4, #4]
 801dcd0:	6014      	str	r4, [r2, #0]
 801dcd2:	b003      	add	sp, #12
 801dcd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dcd8:	f000 bc90 	b.w	801e5fc <__malloc_unlock>
 801dcdc:	42a3      	cmp	r3, r4
 801dcde:	d908      	bls.n	801dcf2 <_free_r+0x46>
 801dce0:	6825      	ldr	r5, [r4, #0]
 801dce2:	1961      	adds	r1, r4, r5
 801dce4:	428b      	cmp	r3, r1
 801dce6:	bf01      	itttt	eq
 801dce8:	6819      	ldreq	r1, [r3, #0]
 801dcea:	685b      	ldreq	r3, [r3, #4]
 801dcec:	1949      	addeq	r1, r1, r5
 801dcee:	6021      	streq	r1, [r4, #0]
 801dcf0:	e7ed      	b.n	801dcce <_free_r+0x22>
 801dcf2:	461a      	mov	r2, r3
 801dcf4:	685b      	ldr	r3, [r3, #4]
 801dcf6:	b10b      	cbz	r3, 801dcfc <_free_r+0x50>
 801dcf8:	42a3      	cmp	r3, r4
 801dcfa:	d9fa      	bls.n	801dcf2 <_free_r+0x46>
 801dcfc:	6811      	ldr	r1, [r2, #0]
 801dcfe:	1855      	adds	r5, r2, r1
 801dd00:	42a5      	cmp	r5, r4
 801dd02:	d10b      	bne.n	801dd1c <_free_r+0x70>
 801dd04:	6824      	ldr	r4, [r4, #0]
 801dd06:	4421      	add	r1, r4
 801dd08:	1854      	adds	r4, r2, r1
 801dd0a:	42a3      	cmp	r3, r4
 801dd0c:	6011      	str	r1, [r2, #0]
 801dd0e:	d1e0      	bne.n	801dcd2 <_free_r+0x26>
 801dd10:	681c      	ldr	r4, [r3, #0]
 801dd12:	685b      	ldr	r3, [r3, #4]
 801dd14:	6053      	str	r3, [r2, #4]
 801dd16:	4421      	add	r1, r4
 801dd18:	6011      	str	r1, [r2, #0]
 801dd1a:	e7da      	b.n	801dcd2 <_free_r+0x26>
 801dd1c:	d902      	bls.n	801dd24 <_free_r+0x78>
 801dd1e:	230c      	movs	r3, #12
 801dd20:	6003      	str	r3, [r0, #0]
 801dd22:	e7d6      	b.n	801dcd2 <_free_r+0x26>
 801dd24:	6825      	ldr	r5, [r4, #0]
 801dd26:	1961      	adds	r1, r4, r5
 801dd28:	428b      	cmp	r3, r1
 801dd2a:	bf04      	itt	eq
 801dd2c:	6819      	ldreq	r1, [r3, #0]
 801dd2e:	685b      	ldreq	r3, [r3, #4]
 801dd30:	6063      	str	r3, [r4, #4]
 801dd32:	bf04      	itt	eq
 801dd34:	1949      	addeq	r1, r1, r5
 801dd36:	6021      	streq	r1, [r4, #0]
 801dd38:	6054      	str	r4, [r2, #4]
 801dd3a:	e7ca      	b.n	801dcd2 <_free_r+0x26>
 801dd3c:	b003      	add	sp, #12
 801dd3e:	bd30      	pop	{r4, r5, pc}
 801dd40:	2405e3b4 	.word	0x2405e3b4

0801dd44 <sbrk_aligned>:
 801dd44:	b570      	push	{r4, r5, r6, lr}
 801dd46:	4e0e      	ldr	r6, [pc, #56]	; (801dd80 <sbrk_aligned+0x3c>)
 801dd48:	460c      	mov	r4, r1
 801dd4a:	6831      	ldr	r1, [r6, #0]
 801dd4c:	4605      	mov	r5, r0
 801dd4e:	b911      	cbnz	r1, 801dd56 <sbrk_aligned+0x12>
 801dd50:	f000 f91a 	bl	801df88 <_sbrk_r>
 801dd54:	6030      	str	r0, [r6, #0]
 801dd56:	4621      	mov	r1, r4
 801dd58:	4628      	mov	r0, r5
 801dd5a:	f000 f915 	bl	801df88 <_sbrk_r>
 801dd5e:	1c43      	adds	r3, r0, #1
 801dd60:	d00a      	beq.n	801dd78 <sbrk_aligned+0x34>
 801dd62:	1cc4      	adds	r4, r0, #3
 801dd64:	f024 0403 	bic.w	r4, r4, #3
 801dd68:	42a0      	cmp	r0, r4
 801dd6a:	d007      	beq.n	801dd7c <sbrk_aligned+0x38>
 801dd6c:	1a21      	subs	r1, r4, r0
 801dd6e:	4628      	mov	r0, r5
 801dd70:	f000 f90a 	bl	801df88 <_sbrk_r>
 801dd74:	3001      	adds	r0, #1
 801dd76:	d101      	bne.n	801dd7c <sbrk_aligned+0x38>
 801dd78:	f04f 34ff 	mov.w	r4, #4294967295
 801dd7c:	4620      	mov	r0, r4
 801dd7e:	bd70      	pop	{r4, r5, r6, pc}
 801dd80:	2405e3b8 	.word	0x2405e3b8

0801dd84 <_malloc_r>:
 801dd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd88:	1ccd      	adds	r5, r1, #3
 801dd8a:	f025 0503 	bic.w	r5, r5, #3
 801dd8e:	3508      	adds	r5, #8
 801dd90:	2d0c      	cmp	r5, #12
 801dd92:	bf38      	it	cc
 801dd94:	250c      	movcc	r5, #12
 801dd96:	2d00      	cmp	r5, #0
 801dd98:	4607      	mov	r7, r0
 801dd9a:	db01      	blt.n	801dda0 <_malloc_r+0x1c>
 801dd9c:	42a9      	cmp	r1, r5
 801dd9e:	d905      	bls.n	801ddac <_malloc_r+0x28>
 801dda0:	230c      	movs	r3, #12
 801dda2:	603b      	str	r3, [r7, #0]
 801dda4:	2600      	movs	r6, #0
 801dda6:	4630      	mov	r0, r6
 801dda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddac:	4e2e      	ldr	r6, [pc, #184]	; (801de68 <_malloc_r+0xe4>)
 801ddae:	f000 fc1f 	bl	801e5f0 <__malloc_lock>
 801ddb2:	6833      	ldr	r3, [r6, #0]
 801ddb4:	461c      	mov	r4, r3
 801ddb6:	bb34      	cbnz	r4, 801de06 <_malloc_r+0x82>
 801ddb8:	4629      	mov	r1, r5
 801ddba:	4638      	mov	r0, r7
 801ddbc:	f7ff ffc2 	bl	801dd44 <sbrk_aligned>
 801ddc0:	1c43      	adds	r3, r0, #1
 801ddc2:	4604      	mov	r4, r0
 801ddc4:	d14d      	bne.n	801de62 <_malloc_r+0xde>
 801ddc6:	6834      	ldr	r4, [r6, #0]
 801ddc8:	4626      	mov	r6, r4
 801ddca:	2e00      	cmp	r6, #0
 801ddcc:	d140      	bne.n	801de50 <_malloc_r+0xcc>
 801ddce:	6823      	ldr	r3, [r4, #0]
 801ddd0:	4631      	mov	r1, r6
 801ddd2:	4638      	mov	r0, r7
 801ddd4:	eb04 0803 	add.w	r8, r4, r3
 801ddd8:	f000 f8d6 	bl	801df88 <_sbrk_r>
 801dddc:	4580      	cmp	r8, r0
 801ddde:	d13a      	bne.n	801de56 <_malloc_r+0xd2>
 801dde0:	6821      	ldr	r1, [r4, #0]
 801dde2:	3503      	adds	r5, #3
 801dde4:	1a6d      	subs	r5, r5, r1
 801dde6:	f025 0503 	bic.w	r5, r5, #3
 801ddea:	3508      	adds	r5, #8
 801ddec:	2d0c      	cmp	r5, #12
 801ddee:	bf38      	it	cc
 801ddf0:	250c      	movcc	r5, #12
 801ddf2:	4629      	mov	r1, r5
 801ddf4:	4638      	mov	r0, r7
 801ddf6:	f7ff ffa5 	bl	801dd44 <sbrk_aligned>
 801ddfa:	3001      	adds	r0, #1
 801ddfc:	d02b      	beq.n	801de56 <_malloc_r+0xd2>
 801ddfe:	6823      	ldr	r3, [r4, #0]
 801de00:	442b      	add	r3, r5
 801de02:	6023      	str	r3, [r4, #0]
 801de04:	e00e      	b.n	801de24 <_malloc_r+0xa0>
 801de06:	6822      	ldr	r2, [r4, #0]
 801de08:	1b52      	subs	r2, r2, r5
 801de0a:	d41e      	bmi.n	801de4a <_malloc_r+0xc6>
 801de0c:	2a0b      	cmp	r2, #11
 801de0e:	d916      	bls.n	801de3e <_malloc_r+0xba>
 801de10:	1961      	adds	r1, r4, r5
 801de12:	42a3      	cmp	r3, r4
 801de14:	6025      	str	r5, [r4, #0]
 801de16:	bf18      	it	ne
 801de18:	6059      	strne	r1, [r3, #4]
 801de1a:	6863      	ldr	r3, [r4, #4]
 801de1c:	bf08      	it	eq
 801de1e:	6031      	streq	r1, [r6, #0]
 801de20:	5162      	str	r2, [r4, r5]
 801de22:	604b      	str	r3, [r1, #4]
 801de24:	4638      	mov	r0, r7
 801de26:	f104 060b 	add.w	r6, r4, #11
 801de2a:	f000 fbe7 	bl	801e5fc <__malloc_unlock>
 801de2e:	f026 0607 	bic.w	r6, r6, #7
 801de32:	1d23      	adds	r3, r4, #4
 801de34:	1af2      	subs	r2, r6, r3
 801de36:	d0b6      	beq.n	801dda6 <_malloc_r+0x22>
 801de38:	1b9b      	subs	r3, r3, r6
 801de3a:	50a3      	str	r3, [r4, r2]
 801de3c:	e7b3      	b.n	801dda6 <_malloc_r+0x22>
 801de3e:	6862      	ldr	r2, [r4, #4]
 801de40:	42a3      	cmp	r3, r4
 801de42:	bf0c      	ite	eq
 801de44:	6032      	streq	r2, [r6, #0]
 801de46:	605a      	strne	r2, [r3, #4]
 801de48:	e7ec      	b.n	801de24 <_malloc_r+0xa0>
 801de4a:	4623      	mov	r3, r4
 801de4c:	6864      	ldr	r4, [r4, #4]
 801de4e:	e7b2      	b.n	801ddb6 <_malloc_r+0x32>
 801de50:	4634      	mov	r4, r6
 801de52:	6876      	ldr	r6, [r6, #4]
 801de54:	e7b9      	b.n	801ddca <_malloc_r+0x46>
 801de56:	230c      	movs	r3, #12
 801de58:	603b      	str	r3, [r7, #0]
 801de5a:	4638      	mov	r0, r7
 801de5c:	f000 fbce 	bl	801e5fc <__malloc_unlock>
 801de60:	e7a1      	b.n	801dda6 <_malloc_r+0x22>
 801de62:	6025      	str	r5, [r4, #0]
 801de64:	e7de      	b.n	801de24 <_malloc_r+0xa0>
 801de66:	bf00      	nop
 801de68:	2405e3b4 	.word	0x2405e3b4

0801de6c <iprintf>:
 801de6c:	b40f      	push	{r0, r1, r2, r3}
 801de6e:	4b0a      	ldr	r3, [pc, #40]	; (801de98 <iprintf+0x2c>)
 801de70:	b513      	push	{r0, r1, r4, lr}
 801de72:	681c      	ldr	r4, [r3, #0]
 801de74:	b124      	cbz	r4, 801de80 <iprintf+0x14>
 801de76:	69a3      	ldr	r3, [r4, #24]
 801de78:	b913      	cbnz	r3, 801de80 <iprintf+0x14>
 801de7a:	4620      	mov	r0, r4
 801de7c:	f000 fab2 	bl	801e3e4 <__sinit>
 801de80:	ab05      	add	r3, sp, #20
 801de82:	9a04      	ldr	r2, [sp, #16]
 801de84:	68a1      	ldr	r1, [r4, #8]
 801de86:	9301      	str	r3, [sp, #4]
 801de88:	4620      	mov	r0, r4
 801de8a:	f000 fbe7 	bl	801e65c <_vfiprintf_r>
 801de8e:	b002      	add	sp, #8
 801de90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de94:	b004      	add	sp, #16
 801de96:	4770      	bx	lr
 801de98:	240081e4 	.word	0x240081e4

0801de9c <_puts_r>:
 801de9c:	b570      	push	{r4, r5, r6, lr}
 801de9e:	460e      	mov	r6, r1
 801dea0:	4605      	mov	r5, r0
 801dea2:	b118      	cbz	r0, 801deac <_puts_r+0x10>
 801dea4:	6983      	ldr	r3, [r0, #24]
 801dea6:	b90b      	cbnz	r3, 801deac <_puts_r+0x10>
 801dea8:	f000 fa9c 	bl	801e3e4 <__sinit>
 801deac:	69ab      	ldr	r3, [r5, #24]
 801deae:	68ac      	ldr	r4, [r5, #8]
 801deb0:	b913      	cbnz	r3, 801deb8 <_puts_r+0x1c>
 801deb2:	4628      	mov	r0, r5
 801deb4:	f000 fa96 	bl	801e3e4 <__sinit>
 801deb8:	4b2c      	ldr	r3, [pc, #176]	; (801df6c <_puts_r+0xd0>)
 801deba:	429c      	cmp	r4, r3
 801debc:	d120      	bne.n	801df00 <_puts_r+0x64>
 801debe:	686c      	ldr	r4, [r5, #4]
 801dec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dec2:	07db      	lsls	r3, r3, #31
 801dec4:	d405      	bmi.n	801ded2 <_puts_r+0x36>
 801dec6:	89a3      	ldrh	r3, [r4, #12]
 801dec8:	0598      	lsls	r0, r3, #22
 801deca:	d402      	bmi.n	801ded2 <_puts_r+0x36>
 801decc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dece:	f000 fb27 	bl	801e520 <__retarget_lock_acquire_recursive>
 801ded2:	89a3      	ldrh	r3, [r4, #12]
 801ded4:	0719      	lsls	r1, r3, #28
 801ded6:	d51d      	bpl.n	801df14 <_puts_r+0x78>
 801ded8:	6923      	ldr	r3, [r4, #16]
 801deda:	b1db      	cbz	r3, 801df14 <_puts_r+0x78>
 801dedc:	3e01      	subs	r6, #1
 801dede:	68a3      	ldr	r3, [r4, #8]
 801dee0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801dee4:	3b01      	subs	r3, #1
 801dee6:	60a3      	str	r3, [r4, #8]
 801dee8:	bb39      	cbnz	r1, 801df3a <_puts_r+0x9e>
 801deea:	2b00      	cmp	r3, #0
 801deec:	da38      	bge.n	801df60 <_puts_r+0xc4>
 801deee:	4622      	mov	r2, r4
 801def0:	210a      	movs	r1, #10
 801def2:	4628      	mov	r0, r5
 801def4:	f000 f89c 	bl	801e030 <__swbuf_r>
 801def8:	3001      	adds	r0, #1
 801defa:	d011      	beq.n	801df20 <_puts_r+0x84>
 801defc:	250a      	movs	r5, #10
 801defe:	e011      	b.n	801df24 <_puts_r+0x88>
 801df00:	4b1b      	ldr	r3, [pc, #108]	; (801df70 <_puts_r+0xd4>)
 801df02:	429c      	cmp	r4, r3
 801df04:	d101      	bne.n	801df0a <_puts_r+0x6e>
 801df06:	68ac      	ldr	r4, [r5, #8]
 801df08:	e7da      	b.n	801dec0 <_puts_r+0x24>
 801df0a:	4b1a      	ldr	r3, [pc, #104]	; (801df74 <_puts_r+0xd8>)
 801df0c:	429c      	cmp	r4, r3
 801df0e:	bf08      	it	eq
 801df10:	68ec      	ldreq	r4, [r5, #12]
 801df12:	e7d5      	b.n	801dec0 <_puts_r+0x24>
 801df14:	4621      	mov	r1, r4
 801df16:	4628      	mov	r0, r5
 801df18:	f000 f8dc 	bl	801e0d4 <__swsetup_r>
 801df1c:	2800      	cmp	r0, #0
 801df1e:	d0dd      	beq.n	801dedc <_puts_r+0x40>
 801df20:	f04f 35ff 	mov.w	r5, #4294967295
 801df24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df26:	07da      	lsls	r2, r3, #31
 801df28:	d405      	bmi.n	801df36 <_puts_r+0x9a>
 801df2a:	89a3      	ldrh	r3, [r4, #12]
 801df2c:	059b      	lsls	r3, r3, #22
 801df2e:	d402      	bmi.n	801df36 <_puts_r+0x9a>
 801df30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df32:	f000 faf6 	bl	801e522 <__retarget_lock_release_recursive>
 801df36:	4628      	mov	r0, r5
 801df38:	bd70      	pop	{r4, r5, r6, pc}
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	da04      	bge.n	801df48 <_puts_r+0xac>
 801df3e:	69a2      	ldr	r2, [r4, #24]
 801df40:	429a      	cmp	r2, r3
 801df42:	dc06      	bgt.n	801df52 <_puts_r+0xb6>
 801df44:	290a      	cmp	r1, #10
 801df46:	d004      	beq.n	801df52 <_puts_r+0xb6>
 801df48:	6823      	ldr	r3, [r4, #0]
 801df4a:	1c5a      	adds	r2, r3, #1
 801df4c:	6022      	str	r2, [r4, #0]
 801df4e:	7019      	strb	r1, [r3, #0]
 801df50:	e7c5      	b.n	801dede <_puts_r+0x42>
 801df52:	4622      	mov	r2, r4
 801df54:	4628      	mov	r0, r5
 801df56:	f000 f86b 	bl	801e030 <__swbuf_r>
 801df5a:	3001      	adds	r0, #1
 801df5c:	d1bf      	bne.n	801dede <_puts_r+0x42>
 801df5e:	e7df      	b.n	801df20 <_puts_r+0x84>
 801df60:	6823      	ldr	r3, [r4, #0]
 801df62:	250a      	movs	r5, #10
 801df64:	1c5a      	adds	r2, r3, #1
 801df66:	6022      	str	r2, [r4, #0]
 801df68:	701d      	strb	r5, [r3, #0]
 801df6a:	e7db      	b.n	801df24 <_puts_r+0x88>
 801df6c:	080934dc 	.word	0x080934dc
 801df70:	080934fc 	.word	0x080934fc
 801df74:	080934bc 	.word	0x080934bc

0801df78 <puts>:
 801df78:	4b02      	ldr	r3, [pc, #8]	; (801df84 <puts+0xc>)
 801df7a:	4601      	mov	r1, r0
 801df7c:	6818      	ldr	r0, [r3, #0]
 801df7e:	f7ff bf8d 	b.w	801de9c <_puts_r>
 801df82:	bf00      	nop
 801df84:	240081e4 	.word	0x240081e4

0801df88 <_sbrk_r>:
 801df88:	b538      	push	{r3, r4, r5, lr}
 801df8a:	4d06      	ldr	r5, [pc, #24]	; (801dfa4 <_sbrk_r+0x1c>)
 801df8c:	2300      	movs	r3, #0
 801df8e:	4604      	mov	r4, r0
 801df90:	4608      	mov	r0, r1
 801df92:	602b      	str	r3, [r5, #0]
 801df94:	f7e8 faac 	bl	80064f0 <_sbrk>
 801df98:	1c43      	adds	r3, r0, #1
 801df9a:	d102      	bne.n	801dfa2 <_sbrk_r+0x1a>
 801df9c:	682b      	ldr	r3, [r5, #0]
 801df9e:	b103      	cbz	r3, 801dfa2 <_sbrk_r+0x1a>
 801dfa0:	6023      	str	r3, [r4, #0]
 801dfa2:	bd38      	pop	{r3, r4, r5, pc}
 801dfa4:	2405e3c0 	.word	0x2405e3c0

0801dfa8 <_raise_r>:
 801dfa8:	291f      	cmp	r1, #31
 801dfaa:	b538      	push	{r3, r4, r5, lr}
 801dfac:	4604      	mov	r4, r0
 801dfae:	460d      	mov	r5, r1
 801dfb0:	d904      	bls.n	801dfbc <_raise_r+0x14>
 801dfb2:	2316      	movs	r3, #22
 801dfb4:	6003      	str	r3, [r0, #0]
 801dfb6:	f04f 30ff 	mov.w	r0, #4294967295
 801dfba:	bd38      	pop	{r3, r4, r5, pc}
 801dfbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801dfbe:	b112      	cbz	r2, 801dfc6 <_raise_r+0x1e>
 801dfc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dfc4:	b94b      	cbnz	r3, 801dfda <_raise_r+0x32>
 801dfc6:	4620      	mov	r0, r4
 801dfc8:	f000 f830 	bl	801e02c <_getpid_r>
 801dfcc:	462a      	mov	r2, r5
 801dfce:	4601      	mov	r1, r0
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dfd6:	f000 b817 	b.w	801e008 <_kill_r>
 801dfda:	2b01      	cmp	r3, #1
 801dfdc:	d00a      	beq.n	801dff4 <_raise_r+0x4c>
 801dfde:	1c59      	adds	r1, r3, #1
 801dfe0:	d103      	bne.n	801dfea <_raise_r+0x42>
 801dfe2:	2316      	movs	r3, #22
 801dfe4:	6003      	str	r3, [r0, #0]
 801dfe6:	2001      	movs	r0, #1
 801dfe8:	e7e7      	b.n	801dfba <_raise_r+0x12>
 801dfea:	2400      	movs	r4, #0
 801dfec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dff0:	4628      	mov	r0, r5
 801dff2:	4798      	blx	r3
 801dff4:	2000      	movs	r0, #0
 801dff6:	e7e0      	b.n	801dfba <_raise_r+0x12>

0801dff8 <raise>:
 801dff8:	4b02      	ldr	r3, [pc, #8]	; (801e004 <raise+0xc>)
 801dffa:	4601      	mov	r1, r0
 801dffc:	6818      	ldr	r0, [r3, #0]
 801dffe:	f7ff bfd3 	b.w	801dfa8 <_raise_r>
 801e002:	bf00      	nop
 801e004:	240081e4 	.word	0x240081e4

0801e008 <_kill_r>:
 801e008:	b538      	push	{r3, r4, r5, lr}
 801e00a:	4d07      	ldr	r5, [pc, #28]	; (801e028 <_kill_r+0x20>)
 801e00c:	2300      	movs	r3, #0
 801e00e:	4604      	mov	r4, r0
 801e010:	4608      	mov	r0, r1
 801e012:	4611      	mov	r1, r2
 801e014:	602b      	str	r3, [r5, #0]
 801e016:	f000 fe99 	bl	801ed4c <_kill>
 801e01a:	1c43      	adds	r3, r0, #1
 801e01c:	d102      	bne.n	801e024 <_kill_r+0x1c>
 801e01e:	682b      	ldr	r3, [r5, #0]
 801e020:	b103      	cbz	r3, 801e024 <_kill_r+0x1c>
 801e022:	6023      	str	r3, [r4, #0]
 801e024:	bd38      	pop	{r3, r4, r5, pc}
 801e026:	bf00      	nop
 801e028:	2405e3c0 	.word	0x2405e3c0

0801e02c <_getpid_r>:
 801e02c:	f000 be86 	b.w	801ed3c <_getpid>

0801e030 <__swbuf_r>:
 801e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e032:	460e      	mov	r6, r1
 801e034:	4614      	mov	r4, r2
 801e036:	4605      	mov	r5, r0
 801e038:	b118      	cbz	r0, 801e042 <__swbuf_r+0x12>
 801e03a:	6983      	ldr	r3, [r0, #24]
 801e03c:	b90b      	cbnz	r3, 801e042 <__swbuf_r+0x12>
 801e03e:	f000 f9d1 	bl	801e3e4 <__sinit>
 801e042:	4b21      	ldr	r3, [pc, #132]	; (801e0c8 <__swbuf_r+0x98>)
 801e044:	429c      	cmp	r4, r3
 801e046:	d12b      	bne.n	801e0a0 <__swbuf_r+0x70>
 801e048:	686c      	ldr	r4, [r5, #4]
 801e04a:	69a3      	ldr	r3, [r4, #24]
 801e04c:	60a3      	str	r3, [r4, #8]
 801e04e:	89a3      	ldrh	r3, [r4, #12]
 801e050:	071a      	lsls	r2, r3, #28
 801e052:	d52f      	bpl.n	801e0b4 <__swbuf_r+0x84>
 801e054:	6923      	ldr	r3, [r4, #16]
 801e056:	b36b      	cbz	r3, 801e0b4 <__swbuf_r+0x84>
 801e058:	6923      	ldr	r3, [r4, #16]
 801e05a:	6820      	ldr	r0, [r4, #0]
 801e05c:	1ac0      	subs	r0, r0, r3
 801e05e:	6963      	ldr	r3, [r4, #20]
 801e060:	b2f6      	uxtb	r6, r6
 801e062:	4283      	cmp	r3, r0
 801e064:	4637      	mov	r7, r6
 801e066:	dc04      	bgt.n	801e072 <__swbuf_r+0x42>
 801e068:	4621      	mov	r1, r4
 801e06a:	4628      	mov	r0, r5
 801e06c:	f000 f926 	bl	801e2bc <_fflush_r>
 801e070:	bb30      	cbnz	r0, 801e0c0 <__swbuf_r+0x90>
 801e072:	68a3      	ldr	r3, [r4, #8]
 801e074:	3b01      	subs	r3, #1
 801e076:	60a3      	str	r3, [r4, #8]
 801e078:	6823      	ldr	r3, [r4, #0]
 801e07a:	1c5a      	adds	r2, r3, #1
 801e07c:	6022      	str	r2, [r4, #0]
 801e07e:	701e      	strb	r6, [r3, #0]
 801e080:	6963      	ldr	r3, [r4, #20]
 801e082:	3001      	adds	r0, #1
 801e084:	4283      	cmp	r3, r0
 801e086:	d004      	beq.n	801e092 <__swbuf_r+0x62>
 801e088:	89a3      	ldrh	r3, [r4, #12]
 801e08a:	07db      	lsls	r3, r3, #31
 801e08c:	d506      	bpl.n	801e09c <__swbuf_r+0x6c>
 801e08e:	2e0a      	cmp	r6, #10
 801e090:	d104      	bne.n	801e09c <__swbuf_r+0x6c>
 801e092:	4621      	mov	r1, r4
 801e094:	4628      	mov	r0, r5
 801e096:	f000 f911 	bl	801e2bc <_fflush_r>
 801e09a:	b988      	cbnz	r0, 801e0c0 <__swbuf_r+0x90>
 801e09c:	4638      	mov	r0, r7
 801e09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0a0:	4b0a      	ldr	r3, [pc, #40]	; (801e0cc <__swbuf_r+0x9c>)
 801e0a2:	429c      	cmp	r4, r3
 801e0a4:	d101      	bne.n	801e0aa <__swbuf_r+0x7a>
 801e0a6:	68ac      	ldr	r4, [r5, #8]
 801e0a8:	e7cf      	b.n	801e04a <__swbuf_r+0x1a>
 801e0aa:	4b09      	ldr	r3, [pc, #36]	; (801e0d0 <__swbuf_r+0xa0>)
 801e0ac:	429c      	cmp	r4, r3
 801e0ae:	bf08      	it	eq
 801e0b0:	68ec      	ldreq	r4, [r5, #12]
 801e0b2:	e7ca      	b.n	801e04a <__swbuf_r+0x1a>
 801e0b4:	4621      	mov	r1, r4
 801e0b6:	4628      	mov	r0, r5
 801e0b8:	f000 f80c 	bl	801e0d4 <__swsetup_r>
 801e0bc:	2800      	cmp	r0, #0
 801e0be:	d0cb      	beq.n	801e058 <__swbuf_r+0x28>
 801e0c0:	f04f 37ff 	mov.w	r7, #4294967295
 801e0c4:	e7ea      	b.n	801e09c <__swbuf_r+0x6c>
 801e0c6:	bf00      	nop
 801e0c8:	080934dc 	.word	0x080934dc
 801e0cc:	080934fc 	.word	0x080934fc
 801e0d0:	080934bc 	.word	0x080934bc

0801e0d4 <__swsetup_r>:
 801e0d4:	4b32      	ldr	r3, [pc, #200]	; (801e1a0 <__swsetup_r+0xcc>)
 801e0d6:	b570      	push	{r4, r5, r6, lr}
 801e0d8:	681d      	ldr	r5, [r3, #0]
 801e0da:	4606      	mov	r6, r0
 801e0dc:	460c      	mov	r4, r1
 801e0de:	b125      	cbz	r5, 801e0ea <__swsetup_r+0x16>
 801e0e0:	69ab      	ldr	r3, [r5, #24]
 801e0e2:	b913      	cbnz	r3, 801e0ea <__swsetup_r+0x16>
 801e0e4:	4628      	mov	r0, r5
 801e0e6:	f000 f97d 	bl	801e3e4 <__sinit>
 801e0ea:	4b2e      	ldr	r3, [pc, #184]	; (801e1a4 <__swsetup_r+0xd0>)
 801e0ec:	429c      	cmp	r4, r3
 801e0ee:	d10f      	bne.n	801e110 <__swsetup_r+0x3c>
 801e0f0:	686c      	ldr	r4, [r5, #4]
 801e0f2:	89a3      	ldrh	r3, [r4, #12]
 801e0f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e0f8:	0719      	lsls	r1, r3, #28
 801e0fa:	d42c      	bmi.n	801e156 <__swsetup_r+0x82>
 801e0fc:	06dd      	lsls	r5, r3, #27
 801e0fe:	d411      	bmi.n	801e124 <__swsetup_r+0x50>
 801e100:	2309      	movs	r3, #9
 801e102:	6033      	str	r3, [r6, #0]
 801e104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e108:	81a3      	strh	r3, [r4, #12]
 801e10a:	f04f 30ff 	mov.w	r0, #4294967295
 801e10e:	e03e      	b.n	801e18e <__swsetup_r+0xba>
 801e110:	4b25      	ldr	r3, [pc, #148]	; (801e1a8 <__swsetup_r+0xd4>)
 801e112:	429c      	cmp	r4, r3
 801e114:	d101      	bne.n	801e11a <__swsetup_r+0x46>
 801e116:	68ac      	ldr	r4, [r5, #8]
 801e118:	e7eb      	b.n	801e0f2 <__swsetup_r+0x1e>
 801e11a:	4b24      	ldr	r3, [pc, #144]	; (801e1ac <__swsetup_r+0xd8>)
 801e11c:	429c      	cmp	r4, r3
 801e11e:	bf08      	it	eq
 801e120:	68ec      	ldreq	r4, [r5, #12]
 801e122:	e7e6      	b.n	801e0f2 <__swsetup_r+0x1e>
 801e124:	0758      	lsls	r0, r3, #29
 801e126:	d512      	bpl.n	801e14e <__swsetup_r+0x7a>
 801e128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e12a:	b141      	cbz	r1, 801e13e <__swsetup_r+0x6a>
 801e12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e130:	4299      	cmp	r1, r3
 801e132:	d002      	beq.n	801e13a <__swsetup_r+0x66>
 801e134:	4630      	mov	r0, r6
 801e136:	f7ff fdb9 	bl	801dcac <_free_r>
 801e13a:	2300      	movs	r3, #0
 801e13c:	6363      	str	r3, [r4, #52]	; 0x34
 801e13e:	89a3      	ldrh	r3, [r4, #12]
 801e140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e144:	81a3      	strh	r3, [r4, #12]
 801e146:	2300      	movs	r3, #0
 801e148:	6063      	str	r3, [r4, #4]
 801e14a:	6923      	ldr	r3, [r4, #16]
 801e14c:	6023      	str	r3, [r4, #0]
 801e14e:	89a3      	ldrh	r3, [r4, #12]
 801e150:	f043 0308 	orr.w	r3, r3, #8
 801e154:	81a3      	strh	r3, [r4, #12]
 801e156:	6923      	ldr	r3, [r4, #16]
 801e158:	b94b      	cbnz	r3, 801e16e <__swsetup_r+0x9a>
 801e15a:	89a3      	ldrh	r3, [r4, #12]
 801e15c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e164:	d003      	beq.n	801e16e <__swsetup_r+0x9a>
 801e166:	4621      	mov	r1, r4
 801e168:	4630      	mov	r0, r6
 801e16a:	f000 fa01 	bl	801e570 <__smakebuf_r>
 801e16e:	89a0      	ldrh	r0, [r4, #12]
 801e170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e174:	f010 0301 	ands.w	r3, r0, #1
 801e178:	d00a      	beq.n	801e190 <__swsetup_r+0xbc>
 801e17a:	2300      	movs	r3, #0
 801e17c:	60a3      	str	r3, [r4, #8]
 801e17e:	6963      	ldr	r3, [r4, #20]
 801e180:	425b      	negs	r3, r3
 801e182:	61a3      	str	r3, [r4, #24]
 801e184:	6923      	ldr	r3, [r4, #16]
 801e186:	b943      	cbnz	r3, 801e19a <__swsetup_r+0xc6>
 801e188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e18c:	d1ba      	bne.n	801e104 <__swsetup_r+0x30>
 801e18e:	bd70      	pop	{r4, r5, r6, pc}
 801e190:	0781      	lsls	r1, r0, #30
 801e192:	bf58      	it	pl
 801e194:	6963      	ldrpl	r3, [r4, #20]
 801e196:	60a3      	str	r3, [r4, #8]
 801e198:	e7f4      	b.n	801e184 <__swsetup_r+0xb0>
 801e19a:	2000      	movs	r0, #0
 801e19c:	e7f7      	b.n	801e18e <__swsetup_r+0xba>
 801e19e:	bf00      	nop
 801e1a0:	240081e4 	.word	0x240081e4
 801e1a4:	080934dc 	.word	0x080934dc
 801e1a8:	080934fc 	.word	0x080934fc
 801e1ac:	080934bc 	.word	0x080934bc

0801e1b0 <__sflush_r>:
 801e1b0:	898a      	ldrh	r2, [r1, #12]
 801e1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1b6:	4605      	mov	r5, r0
 801e1b8:	0710      	lsls	r0, r2, #28
 801e1ba:	460c      	mov	r4, r1
 801e1bc:	d458      	bmi.n	801e270 <__sflush_r+0xc0>
 801e1be:	684b      	ldr	r3, [r1, #4]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	dc05      	bgt.n	801e1d0 <__sflush_r+0x20>
 801e1c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	dc02      	bgt.n	801e1d0 <__sflush_r+0x20>
 801e1ca:	2000      	movs	r0, #0
 801e1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e1d2:	2e00      	cmp	r6, #0
 801e1d4:	d0f9      	beq.n	801e1ca <__sflush_r+0x1a>
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e1dc:	682f      	ldr	r7, [r5, #0]
 801e1de:	602b      	str	r3, [r5, #0]
 801e1e0:	d032      	beq.n	801e248 <__sflush_r+0x98>
 801e1e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e1e4:	89a3      	ldrh	r3, [r4, #12]
 801e1e6:	075a      	lsls	r2, r3, #29
 801e1e8:	d505      	bpl.n	801e1f6 <__sflush_r+0x46>
 801e1ea:	6863      	ldr	r3, [r4, #4]
 801e1ec:	1ac0      	subs	r0, r0, r3
 801e1ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e1f0:	b10b      	cbz	r3, 801e1f6 <__sflush_r+0x46>
 801e1f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e1f4:	1ac0      	subs	r0, r0, r3
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	4602      	mov	r2, r0
 801e1fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e1fc:	6a21      	ldr	r1, [r4, #32]
 801e1fe:	4628      	mov	r0, r5
 801e200:	47b0      	blx	r6
 801e202:	1c43      	adds	r3, r0, #1
 801e204:	89a3      	ldrh	r3, [r4, #12]
 801e206:	d106      	bne.n	801e216 <__sflush_r+0x66>
 801e208:	6829      	ldr	r1, [r5, #0]
 801e20a:	291d      	cmp	r1, #29
 801e20c:	d82c      	bhi.n	801e268 <__sflush_r+0xb8>
 801e20e:	4a2a      	ldr	r2, [pc, #168]	; (801e2b8 <__sflush_r+0x108>)
 801e210:	40ca      	lsrs	r2, r1
 801e212:	07d6      	lsls	r6, r2, #31
 801e214:	d528      	bpl.n	801e268 <__sflush_r+0xb8>
 801e216:	2200      	movs	r2, #0
 801e218:	6062      	str	r2, [r4, #4]
 801e21a:	04d9      	lsls	r1, r3, #19
 801e21c:	6922      	ldr	r2, [r4, #16]
 801e21e:	6022      	str	r2, [r4, #0]
 801e220:	d504      	bpl.n	801e22c <__sflush_r+0x7c>
 801e222:	1c42      	adds	r2, r0, #1
 801e224:	d101      	bne.n	801e22a <__sflush_r+0x7a>
 801e226:	682b      	ldr	r3, [r5, #0]
 801e228:	b903      	cbnz	r3, 801e22c <__sflush_r+0x7c>
 801e22a:	6560      	str	r0, [r4, #84]	; 0x54
 801e22c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e22e:	602f      	str	r7, [r5, #0]
 801e230:	2900      	cmp	r1, #0
 801e232:	d0ca      	beq.n	801e1ca <__sflush_r+0x1a>
 801e234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e238:	4299      	cmp	r1, r3
 801e23a:	d002      	beq.n	801e242 <__sflush_r+0x92>
 801e23c:	4628      	mov	r0, r5
 801e23e:	f7ff fd35 	bl	801dcac <_free_r>
 801e242:	2000      	movs	r0, #0
 801e244:	6360      	str	r0, [r4, #52]	; 0x34
 801e246:	e7c1      	b.n	801e1cc <__sflush_r+0x1c>
 801e248:	6a21      	ldr	r1, [r4, #32]
 801e24a:	2301      	movs	r3, #1
 801e24c:	4628      	mov	r0, r5
 801e24e:	47b0      	blx	r6
 801e250:	1c41      	adds	r1, r0, #1
 801e252:	d1c7      	bne.n	801e1e4 <__sflush_r+0x34>
 801e254:	682b      	ldr	r3, [r5, #0]
 801e256:	2b00      	cmp	r3, #0
 801e258:	d0c4      	beq.n	801e1e4 <__sflush_r+0x34>
 801e25a:	2b1d      	cmp	r3, #29
 801e25c:	d001      	beq.n	801e262 <__sflush_r+0xb2>
 801e25e:	2b16      	cmp	r3, #22
 801e260:	d101      	bne.n	801e266 <__sflush_r+0xb6>
 801e262:	602f      	str	r7, [r5, #0]
 801e264:	e7b1      	b.n	801e1ca <__sflush_r+0x1a>
 801e266:	89a3      	ldrh	r3, [r4, #12]
 801e268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e26c:	81a3      	strh	r3, [r4, #12]
 801e26e:	e7ad      	b.n	801e1cc <__sflush_r+0x1c>
 801e270:	690f      	ldr	r7, [r1, #16]
 801e272:	2f00      	cmp	r7, #0
 801e274:	d0a9      	beq.n	801e1ca <__sflush_r+0x1a>
 801e276:	0793      	lsls	r3, r2, #30
 801e278:	680e      	ldr	r6, [r1, #0]
 801e27a:	bf08      	it	eq
 801e27c:	694b      	ldreq	r3, [r1, #20]
 801e27e:	600f      	str	r7, [r1, #0]
 801e280:	bf18      	it	ne
 801e282:	2300      	movne	r3, #0
 801e284:	eba6 0807 	sub.w	r8, r6, r7
 801e288:	608b      	str	r3, [r1, #8]
 801e28a:	f1b8 0f00 	cmp.w	r8, #0
 801e28e:	dd9c      	ble.n	801e1ca <__sflush_r+0x1a>
 801e290:	6a21      	ldr	r1, [r4, #32]
 801e292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e294:	4643      	mov	r3, r8
 801e296:	463a      	mov	r2, r7
 801e298:	4628      	mov	r0, r5
 801e29a:	47b0      	blx	r6
 801e29c:	2800      	cmp	r0, #0
 801e29e:	dc06      	bgt.n	801e2ae <__sflush_r+0xfe>
 801e2a0:	89a3      	ldrh	r3, [r4, #12]
 801e2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e2a6:	81a3      	strh	r3, [r4, #12]
 801e2a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e2ac:	e78e      	b.n	801e1cc <__sflush_r+0x1c>
 801e2ae:	4407      	add	r7, r0
 801e2b0:	eba8 0800 	sub.w	r8, r8, r0
 801e2b4:	e7e9      	b.n	801e28a <__sflush_r+0xda>
 801e2b6:	bf00      	nop
 801e2b8:	20400001 	.word	0x20400001

0801e2bc <_fflush_r>:
 801e2bc:	b538      	push	{r3, r4, r5, lr}
 801e2be:	690b      	ldr	r3, [r1, #16]
 801e2c0:	4605      	mov	r5, r0
 801e2c2:	460c      	mov	r4, r1
 801e2c4:	b913      	cbnz	r3, 801e2cc <_fflush_r+0x10>
 801e2c6:	2500      	movs	r5, #0
 801e2c8:	4628      	mov	r0, r5
 801e2ca:	bd38      	pop	{r3, r4, r5, pc}
 801e2cc:	b118      	cbz	r0, 801e2d6 <_fflush_r+0x1a>
 801e2ce:	6983      	ldr	r3, [r0, #24]
 801e2d0:	b90b      	cbnz	r3, 801e2d6 <_fflush_r+0x1a>
 801e2d2:	f000 f887 	bl	801e3e4 <__sinit>
 801e2d6:	4b14      	ldr	r3, [pc, #80]	; (801e328 <_fflush_r+0x6c>)
 801e2d8:	429c      	cmp	r4, r3
 801e2da:	d11b      	bne.n	801e314 <_fflush_r+0x58>
 801e2dc:	686c      	ldr	r4, [r5, #4]
 801e2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d0ef      	beq.n	801e2c6 <_fflush_r+0xa>
 801e2e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e2e8:	07d0      	lsls	r0, r2, #31
 801e2ea:	d404      	bmi.n	801e2f6 <_fflush_r+0x3a>
 801e2ec:	0599      	lsls	r1, r3, #22
 801e2ee:	d402      	bmi.n	801e2f6 <_fflush_r+0x3a>
 801e2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2f2:	f000 f915 	bl	801e520 <__retarget_lock_acquire_recursive>
 801e2f6:	4628      	mov	r0, r5
 801e2f8:	4621      	mov	r1, r4
 801e2fa:	f7ff ff59 	bl	801e1b0 <__sflush_r>
 801e2fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e300:	07da      	lsls	r2, r3, #31
 801e302:	4605      	mov	r5, r0
 801e304:	d4e0      	bmi.n	801e2c8 <_fflush_r+0xc>
 801e306:	89a3      	ldrh	r3, [r4, #12]
 801e308:	059b      	lsls	r3, r3, #22
 801e30a:	d4dd      	bmi.n	801e2c8 <_fflush_r+0xc>
 801e30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e30e:	f000 f908 	bl	801e522 <__retarget_lock_release_recursive>
 801e312:	e7d9      	b.n	801e2c8 <_fflush_r+0xc>
 801e314:	4b05      	ldr	r3, [pc, #20]	; (801e32c <_fflush_r+0x70>)
 801e316:	429c      	cmp	r4, r3
 801e318:	d101      	bne.n	801e31e <_fflush_r+0x62>
 801e31a:	68ac      	ldr	r4, [r5, #8]
 801e31c:	e7df      	b.n	801e2de <_fflush_r+0x22>
 801e31e:	4b04      	ldr	r3, [pc, #16]	; (801e330 <_fflush_r+0x74>)
 801e320:	429c      	cmp	r4, r3
 801e322:	bf08      	it	eq
 801e324:	68ec      	ldreq	r4, [r5, #12]
 801e326:	e7da      	b.n	801e2de <_fflush_r+0x22>
 801e328:	080934dc 	.word	0x080934dc
 801e32c:	080934fc 	.word	0x080934fc
 801e330:	080934bc 	.word	0x080934bc

0801e334 <std>:
 801e334:	2300      	movs	r3, #0
 801e336:	b510      	push	{r4, lr}
 801e338:	4604      	mov	r4, r0
 801e33a:	e9c0 3300 	strd	r3, r3, [r0]
 801e33e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e342:	6083      	str	r3, [r0, #8]
 801e344:	8181      	strh	r1, [r0, #12]
 801e346:	6643      	str	r3, [r0, #100]	; 0x64
 801e348:	81c2      	strh	r2, [r0, #14]
 801e34a:	6183      	str	r3, [r0, #24]
 801e34c:	4619      	mov	r1, r3
 801e34e:	2208      	movs	r2, #8
 801e350:	305c      	adds	r0, #92	; 0x5c
 801e352:	f7ff fca3 	bl	801dc9c <memset>
 801e356:	4b05      	ldr	r3, [pc, #20]	; (801e36c <std+0x38>)
 801e358:	6263      	str	r3, [r4, #36]	; 0x24
 801e35a:	4b05      	ldr	r3, [pc, #20]	; (801e370 <std+0x3c>)
 801e35c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e35e:	4b05      	ldr	r3, [pc, #20]	; (801e374 <std+0x40>)
 801e360:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e362:	4b05      	ldr	r3, [pc, #20]	; (801e378 <std+0x44>)
 801e364:	6224      	str	r4, [r4, #32]
 801e366:	6323      	str	r3, [r4, #48]	; 0x30
 801e368:	bd10      	pop	{r4, pc}
 801e36a:	bf00      	nop
 801e36c:	0801ebe5 	.word	0x0801ebe5
 801e370:	0801ec07 	.word	0x0801ec07
 801e374:	0801ec3f 	.word	0x0801ec3f
 801e378:	0801ec63 	.word	0x0801ec63

0801e37c <_cleanup_r>:
 801e37c:	4901      	ldr	r1, [pc, #4]	; (801e384 <_cleanup_r+0x8>)
 801e37e:	f000 b8af 	b.w	801e4e0 <_fwalk_reent>
 801e382:	bf00      	nop
 801e384:	0801e2bd 	.word	0x0801e2bd

0801e388 <__sfmoreglue>:
 801e388:	b570      	push	{r4, r5, r6, lr}
 801e38a:	2268      	movs	r2, #104	; 0x68
 801e38c:	1e4d      	subs	r5, r1, #1
 801e38e:	4355      	muls	r5, r2
 801e390:	460e      	mov	r6, r1
 801e392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e396:	f7ff fcf5 	bl	801dd84 <_malloc_r>
 801e39a:	4604      	mov	r4, r0
 801e39c:	b140      	cbz	r0, 801e3b0 <__sfmoreglue+0x28>
 801e39e:	2100      	movs	r1, #0
 801e3a0:	e9c0 1600 	strd	r1, r6, [r0]
 801e3a4:	300c      	adds	r0, #12
 801e3a6:	60a0      	str	r0, [r4, #8]
 801e3a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e3ac:	f7ff fc76 	bl	801dc9c <memset>
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	bd70      	pop	{r4, r5, r6, pc}

0801e3b4 <__sfp_lock_acquire>:
 801e3b4:	4801      	ldr	r0, [pc, #4]	; (801e3bc <__sfp_lock_acquire+0x8>)
 801e3b6:	f000 b8b3 	b.w	801e520 <__retarget_lock_acquire_recursive>
 801e3ba:	bf00      	nop
 801e3bc:	2405e3bd 	.word	0x2405e3bd

0801e3c0 <__sfp_lock_release>:
 801e3c0:	4801      	ldr	r0, [pc, #4]	; (801e3c8 <__sfp_lock_release+0x8>)
 801e3c2:	f000 b8ae 	b.w	801e522 <__retarget_lock_release_recursive>
 801e3c6:	bf00      	nop
 801e3c8:	2405e3bd 	.word	0x2405e3bd

0801e3cc <__sinit_lock_acquire>:
 801e3cc:	4801      	ldr	r0, [pc, #4]	; (801e3d4 <__sinit_lock_acquire+0x8>)
 801e3ce:	f000 b8a7 	b.w	801e520 <__retarget_lock_acquire_recursive>
 801e3d2:	bf00      	nop
 801e3d4:	2405e3be 	.word	0x2405e3be

0801e3d8 <__sinit_lock_release>:
 801e3d8:	4801      	ldr	r0, [pc, #4]	; (801e3e0 <__sinit_lock_release+0x8>)
 801e3da:	f000 b8a2 	b.w	801e522 <__retarget_lock_release_recursive>
 801e3de:	bf00      	nop
 801e3e0:	2405e3be 	.word	0x2405e3be

0801e3e4 <__sinit>:
 801e3e4:	b510      	push	{r4, lr}
 801e3e6:	4604      	mov	r4, r0
 801e3e8:	f7ff fff0 	bl	801e3cc <__sinit_lock_acquire>
 801e3ec:	69a3      	ldr	r3, [r4, #24]
 801e3ee:	b11b      	cbz	r3, 801e3f8 <__sinit+0x14>
 801e3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3f4:	f7ff bff0 	b.w	801e3d8 <__sinit_lock_release>
 801e3f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e3fc:	6523      	str	r3, [r4, #80]	; 0x50
 801e3fe:	4b13      	ldr	r3, [pc, #76]	; (801e44c <__sinit+0x68>)
 801e400:	4a13      	ldr	r2, [pc, #76]	; (801e450 <__sinit+0x6c>)
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	62a2      	str	r2, [r4, #40]	; 0x28
 801e406:	42a3      	cmp	r3, r4
 801e408:	bf04      	itt	eq
 801e40a:	2301      	moveq	r3, #1
 801e40c:	61a3      	streq	r3, [r4, #24]
 801e40e:	4620      	mov	r0, r4
 801e410:	f000 f820 	bl	801e454 <__sfp>
 801e414:	6060      	str	r0, [r4, #4]
 801e416:	4620      	mov	r0, r4
 801e418:	f000 f81c 	bl	801e454 <__sfp>
 801e41c:	60a0      	str	r0, [r4, #8]
 801e41e:	4620      	mov	r0, r4
 801e420:	f000 f818 	bl	801e454 <__sfp>
 801e424:	2200      	movs	r2, #0
 801e426:	60e0      	str	r0, [r4, #12]
 801e428:	2104      	movs	r1, #4
 801e42a:	6860      	ldr	r0, [r4, #4]
 801e42c:	f7ff ff82 	bl	801e334 <std>
 801e430:	68a0      	ldr	r0, [r4, #8]
 801e432:	2201      	movs	r2, #1
 801e434:	2109      	movs	r1, #9
 801e436:	f7ff ff7d 	bl	801e334 <std>
 801e43a:	68e0      	ldr	r0, [r4, #12]
 801e43c:	2202      	movs	r2, #2
 801e43e:	2112      	movs	r1, #18
 801e440:	f7ff ff78 	bl	801e334 <std>
 801e444:	2301      	movs	r3, #1
 801e446:	61a3      	str	r3, [r4, #24]
 801e448:	e7d2      	b.n	801e3f0 <__sinit+0xc>
 801e44a:	bf00      	nop
 801e44c:	080934b8 	.word	0x080934b8
 801e450:	0801e37d 	.word	0x0801e37d

0801e454 <__sfp>:
 801e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e456:	4607      	mov	r7, r0
 801e458:	f7ff ffac 	bl	801e3b4 <__sfp_lock_acquire>
 801e45c:	4b1e      	ldr	r3, [pc, #120]	; (801e4d8 <__sfp+0x84>)
 801e45e:	681e      	ldr	r6, [r3, #0]
 801e460:	69b3      	ldr	r3, [r6, #24]
 801e462:	b913      	cbnz	r3, 801e46a <__sfp+0x16>
 801e464:	4630      	mov	r0, r6
 801e466:	f7ff ffbd 	bl	801e3e4 <__sinit>
 801e46a:	3648      	adds	r6, #72	; 0x48
 801e46c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e470:	3b01      	subs	r3, #1
 801e472:	d503      	bpl.n	801e47c <__sfp+0x28>
 801e474:	6833      	ldr	r3, [r6, #0]
 801e476:	b30b      	cbz	r3, 801e4bc <__sfp+0x68>
 801e478:	6836      	ldr	r6, [r6, #0]
 801e47a:	e7f7      	b.n	801e46c <__sfp+0x18>
 801e47c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e480:	b9d5      	cbnz	r5, 801e4b8 <__sfp+0x64>
 801e482:	4b16      	ldr	r3, [pc, #88]	; (801e4dc <__sfp+0x88>)
 801e484:	60e3      	str	r3, [r4, #12]
 801e486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e48a:	6665      	str	r5, [r4, #100]	; 0x64
 801e48c:	f000 f847 	bl	801e51e <__retarget_lock_init_recursive>
 801e490:	f7ff ff96 	bl	801e3c0 <__sfp_lock_release>
 801e494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e49c:	6025      	str	r5, [r4, #0]
 801e49e:	61a5      	str	r5, [r4, #24]
 801e4a0:	2208      	movs	r2, #8
 801e4a2:	4629      	mov	r1, r5
 801e4a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e4a8:	f7ff fbf8 	bl	801dc9c <memset>
 801e4ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e4b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e4b4:	4620      	mov	r0, r4
 801e4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4b8:	3468      	adds	r4, #104	; 0x68
 801e4ba:	e7d9      	b.n	801e470 <__sfp+0x1c>
 801e4bc:	2104      	movs	r1, #4
 801e4be:	4638      	mov	r0, r7
 801e4c0:	f7ff ff62 	bl	801e388 <__sfmoreglue>
 801e4c4:	4604      	mov	r4, r0
 801e4c6:	6030      	str	r0, [r6, #0]
 801e4c8:	2800      	cmp	r0, #0
 801e4ca:	d1d5      	bne.n	801e478 <__sfp+0x24>
 801e4cc:	f7ff ff78 	bl	801e3c0 <__sfp_lock_release>
 801e4d0:	230c      	movs	r3, #12
 801e4d2:	603b      	str	r3, [r7, #0]
 801e4d4:	e7ee      	b.n	801e4b4 <__sfp+0x60>
 801e4d6:	bf00      	nop
 801e4d8:	080934b8 	.word	0x080934b8
 801e4dc:	ffff0001 	.word	0xffff0001

0801e4e0 <_fwalk_reent>:
 801e4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4e4:	4606      	mov	r6, r0
 801e4e6:	4688      	mov	r8, r1
 801e4e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e4ec:	2700      	movs	r7, #0
 801e4ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e4f2:	f1b9 0901 	subs.w	r9, r9, #1
 801e4f6:	d505      	bpl.n	801e504 <_fwalk_reent+0x24>
 801e4f8:	6824      	ldr	r4, [r4, #0]
 801e4fa:	2c00      	cmp	r4, #0
 801e4fc:	d1f7      	bne.n	801e4ee <_fwalk_reent+0xe>
 801e4fe:	4638      	mov	r0, r7
 801e500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e504:	89ab      	ldrh	r3, [r5, #12]
 801e506:	2b01      	cmp	r3, #1
 801e508:	d907      	bls.n	801e51a <_fwalk_reent+0x3a>
 801e50a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e50e:	3301      	adds	r3, #1
 801e510:	d003      	beq.n	801e51a <_fwalk_reent+0x3a>
 801e512:	4629      	mov	r1, r5
 801e514:	4630      	mov	r0, r6
 801e516:	47c0      	blx	r8
 801e518:	4307      	orrs	r7, r0
 801e51a:	3568      	adds	r5, #104	; 0x68
 801e51c:	e7e9      	b.n	801e4f2 <_fwalk_reent+0x12>

0801e51e <__retarget_lock_init_recursive>:
 801e51e:	4770      	bx	lr

0801e520 <__retarget_lock_acquire_recursive>:
 801e520:	4770      	bx	lr

0801e522 <__retarget_lock_release_recursive>:
 801e522:	4770      	bx	lr

0801e524 <__swhatbuf_r>:
 801e524:	b570      	push	{r4, r5, r6, lr}
 801e526:	460e      	mov	r6, r1
 801e528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e52c:	2900      	cmp	r1, #0
 801e52e:	b096      	sub	sp, #88	; 0x58
 801e530:	4614      	mov	r4, r2
 801e532:	461d      	mov	r5, r3
 801e534:	da08      	bge.n	801e548 <__swhatbuf_r+0x24>
 801e536:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e53a:	2200      	movs	r2, #0
 801e53c:	602a      	str	r2, [r5, #0]
 801e53e:	061a      	lsls	r2, r3, #24
 801e540:	d410      	bmi.n	801e564 <__swhatbuf_r+0x40>
 801e542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e546:	e00e      	b.n	801e566 <__swhatbuf_r+0x42>
 801e548:	466a      	mov	r2, sp
 801e54a:	f000 fbb1 	bl	801ecb0 <_fstat_r>
 801e54e:	2800      	cmp	r0, #0
 801e550:	dbf1      	blt.n	801e536 <__swhatbuf_r+0x12>
 801e552:	9a01      	ldr	r2, [sp, #4]
 801e554:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e558:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e55c:	425a      	negs	r2, r3
 801e55e:	415a      	adcs	r2, r3
 801e560:	602a      	str	r2, [r5, #0]
 801e562:	e7ee      	b.n	801e542 <__swhatbuf_r+0x1e>
 801e564:	2340      	movs	r3, #64	; 0x40
 801e566:	2000      	movs	r0, #0
 801e568:	6023      	str	r3, [r4, #0]
 801e56a:	b016      	add	sp, #88	; 0x58
 801e56c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e570 <__smakebuf_r>:
 801e570:	898b      	ldrh	r3, [r1, #12]
 801e572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e574:	079d      	lsls	r5, r3, #30
 801e576:	4606      	mov	r6, r0
 801e578:	460c      	mov	r4, r1
 801e57a:	d507      	bpl.n	801e58c <__smakebuf_r+0x1c>
 801e57c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e580:	6023      	str	r3, [r4, #0]
 801e582:	6123      	str	r3, [r4, #16]
 801e584:	2301      	movs	r3, #1
 801e586:	6163      	str	r3, [r4, #20]
 801e588:	b002      	add	sp, #8
 801e58a:	bd70      	pop	{r4, r5, r6, pc}
 801e58c:	ab01      	add	r3, sp, #4
 801e58e:	466a      	mov	r2, sp
 801e590:	f7ff ffc8 	bl	801e524 <__swhatbuf_r>
 801e594:	9900      	ldr	r1, [sp, #0]
 801e596:	4605      	mov	r5, r0
 801e598:	4630      	mov	r0, r6
 801e59a:	f7ff fbf3 	bl	801dd84 <_malloc_r>
 801e59e:	b948      	cbnz	r0, 801e5b4 <__smakebuf_r+0x44>
 801e5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5a4:	059a      	lsls	r2, r3, #22
 801e5a6:	d4ef      	bmi.n	801e588 <__smakebuf_r+0x18>
 801e5a8:	f023 0303 	bic.w	r3, r3, #3
 801e5ac:	f043 0302 	orr.w	r3, r3, #2
 801e5b0:	81a3      	strh	r3, [r4, #12]
 801e5b2:	e7e3      	b.n	801e57c <__smakebuf_r+0xc>
 801e5b4:	4b0d      	ldr	r3, [pc, #52]	; (801e5ec <__smakebuf_r+0x7c>)
 801e5b6:	62b3      	str	r3, [r6, #40]	; 0x28
 801e5b8:	89a3      	ldrh	r3, [r4, #12]
 801e5ba:	6020      	str	r0, [r4, #0]
 801e5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e5c0:	81a3      	strh	r3, [r4, #12]
 801e5c2:	9b00      	ldr	r3, [sp, #0]
 801e5c4:	6163      	str	r3, [r4, #20]
 801e5c6:	9b01      	ldr	r3, [sp, #4]
 801e5c8:	6120      	str	r0, [r4, #16]
 801e5ca:	b15b      	cbz	r3, 801e5e4 <__smakebuf_r+0x74>
 801e5cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e5d0:	4630      	mov	r0, r6
 801e5d2:	f000 fb7f 	bl	801ecd4 <_isatty_r>
 801e5d6:	b128      	cbz	r0, 801e5e4 <__smakebuf_r+0x74>
 801e5d8:	89a3      	ldrh	r3, [r4, #12]
 801e5da:	f023 0303 	bic.w	r3, r3, #3
 801e5de:	f043 0301 	orr.w	r3, r3, #1
 801e5e2:	81a3      	strh	r3, [r4, #12]
 801e5e4:	89a0      	ldrh	r0, [r4, #12]
 801e5e6:	4305      	orrs	r5, r0
 801e5e8:	81a5      	strh	r5, [r4, #12]
 801e5ea:	e7cd      	b.n	801e588 <__smakebuf_r+0x18>
 801e5ec:	0801e37d 	.word	0x0801e37d

0801e5f0 <__malloc_lock>:
 801e5f0:	4801      	ldr	r0, [pc, #4]	; (801e5f8 <__malloc_lock+0x8>)
 801e5f2:	f7ff bf95 	b.w	801e520 <__retarget_lock_acquire_recursive>
 801e5f6:	bf00      	nop
 801e5f8:	2405e3bc 	.word	0x2405e3bc

0801e5fc <__malloc_unlock>:
 801e5fc:	4801      	ldr	r0, [pc, #4]	; (801e604 <__malloc_unlock+0x8>)
 801e5fe:	f7ff bf90 	b.w	801e522 <__retarget_lock_release_recursive>
 801e602:	bf00      	nop
 801e604:	2405e3bc 	.word	0x2405e3bc

0801e608 <__sfputc_r>:
 801e608:	6893      	ldr	r3, [r2, #8]
 801e60a:	3b01      	subs	r3, #1
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	b410      	push	{r4}
 801e610:	6093      	str	r3, [r2, #8]
 801e612:	da08      	bge.n	801e626 <__sfputc_r+0x1e>
 801e614:	6994      	ldr	r4, [r2, #24]
 801e616:	42a3      	cmp	r3, r4
 801e618:	db01      	blt.n	801e61e <__sfputc_r+0x16>
 801e61a:	290a      	cmp	r1, #10
 801e61c:	d103      	bne.n	801e626 <__sfputc_r+0x1e>
 801e61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e622:	f7ff bd05 	b.w	801e030 <__swbuf_r>
 801e626:	6813      	ldr	r3, [r2, #0]
 801e628:	1c58      	adds	r0, r3, #1
 801e62a:	6010      	str	r0, [r2, #0]
 801e62c:	7019      	strb	r1, [r3, #0]
 801e62e:	4608      	mov	r0, r1
 801e630:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e634:	4770      	bx	lr

0801e636 <__sfputs_r>:
 801e636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e638:	4606      	mov	r6, r0
 801e63a:	460f      	mov	r7, r1
 801e63c:	4614      	mov	r4, r2
 801e63e:	18d5      	adds	r5, r2, r3
 801e640:	42ac      	cmp	r4, r5
 801e642:	d101      	bne.n	801e648 <__sfputs_r+0x12>
 801e644:	2000      	movs	r0, #0
 801e646:	e007      	b.n	801e658 <__sfputs_r+0x22>
 801e648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e64c:	463a      	mov	r2, r7
 801e64e:	4630      	mov	r0, r6
 801e650:	f7ff ffda 	bl	801e608 <__sfputc_r>
 801e654:	1c43      	adds	r3, r0, #1
 801e656:	d1f3      	bne.n	801e640 <__sfputs_r+0xa>
 801e658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e65c <_vfiprintf_r>:
 801e65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e660:	460d      	mov	r5, r1
 801e662:	b09d      	sub	sp, #116	; 0x74
 801e664:	4614      	mov	r4, r2
 801e666:	4698      	mov	r8, r3
 801e668:	4606      	mov	r6, r0
 801e66a:	b118      	cbz	r0, 801e674 <_vfiprintf_r+0x18>
 801e66c:	6983      	ldr	r3, [r0, #24]
 801e66e:	b90b      	cbnz	r3, 801e674 <_vfiprintf_r+0x18>
 801e670:	f7ff feb8 	bl	801e3e4 <__sinit>
 801e674:	4b89      	ldr	r3, [pc, #548]	; (801e89c <_vfiprintf_r+0x240>)
 801e676:	429d      	cmp	r5, r3
 801e678:	d11b      	bne.n	801e6b2 <_vfiprintf_r+0x56>
 801e67a:	6875      	ldr	r5, [r6, #4]
 801e67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e67e:	07d9      	lsls	r1, r3, #31
 801e680:	d405      	bmi.n	801e68e <_vfiprintf_r+0x32>
 801e682:	89ab      	ldrh	r3, [r5, #12]
 801e684:	059a      	lsls	r2, r3, #22
 801e686:	d402      	bmi.n	801e68e <_vfiprintf_r+0x32>
 801e688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e68a:	f7ff ff49 	bl	801e520 <__retarget_lock_acquire_recursive>
 801e68e:	89ab      	ldrh	r3, [r5, #12]
 801e690:	071b      	lsls	r3, r3, #28
 801e692:	d501      	bpl.n	801e698 <_vfiprintf_r+0x3c>
 801e694:	692b      	ldr	r3, [r5, #16]
 801e696:	b9eb      	cbnz	r3, 801e6d4 <_vfiprintf_r+0x78>
 801e698:	4629      	mov	r1, r5
 801e69a:	4630      	mov	r0, r6
 801e69c:	f7ff fd1a 	bl	801e0d4 <__swsetup_r>
 801e6a0:	b1c0      	cbz	r0, 801e6d4 <_vfiprintf_r+0x78>
 801e6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6a4:	07dc      	lsls	r4, r3, #31
 801e6a6:	d50e      	bpl.n	801e6c6 <_vfiprintf_r+0x6a>
 801e6a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e6ac:	b01d      	add	sp, #116	; 0x74
 801e6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6b2:	4b7b      	ldr	r3, [pc, #492]	; (801e8a0 <_vfiprintf_r+0x244>)
 801e6b4:	429d      	cmp	r5, r3
 801e6b6:	d101      	bne.n	801e6bc <_vfiprintf_r+0x60>
 801e6b8:	68b5      	ldr	r5, [r6, #8]
 801e6ba:	e7df      	b.n	801e67c <_vfiprintf_r+0x20>
 801e6bc:	4b79      	ldr	r3, [pc, #484]	; (801e8a4 <_vfiprintf_r+0x248>)
 801e6be:	429d      	cmp	r5, r3
 801e6c0:	bf08      	it	eq
 801e6c2:	68f5      	ldreq	r5, [r6, #12]
 801e6c4:	e7da      	b.n	801e67c <_vfiprintf_r+0x20>
 801e6c6:	89ab      	ldrh	r3, [r5, #12]
 801e6c8:	0598      	lsls	r0, r3, #22
 801e6ca:	d4ed      	bmi.n	801e6a8 <_vfiprintf_r+0x4c>
 801e6cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e6ce:	f7ff ff28 	bl	801e522 <__retarget_lock_release_recursive>
 801e6d2:	e7e9      	b.n	801e6a8 <_vfiprintf_r+0x4c>
 801e6d4:	2300      	movs	r3, #0
 801e6d6:	9309      	str	r3, [sp, #36]	; 0x24
 801e6d8:	2320      	movs	r3, #32
 801e6da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e6de:	f8cd 800c 	str.w	r8, [sp, #12]
 801e6e2:	2330      	movs	r3, #48	; 0x30
 801e6e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e8a8 <_vfiprintf_r+0x24c>
 801e6e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e6ec:	f04f 0901 	mov.w	r9, #1
 801e6f0:	4623      	mov	r3, r4
 801e6f2:	469a      	mov	sl, r3
 801e6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e6f8:	b10a      	cbz	r2, 801e6fe <_vfiprintf_r+0xa2>
 801e6fa:	2a25      	cmp	r2, #37	; 0x25
 801e6fc:	d1f9      	bne.n	801e6f2 <_vfiprintf_r+0x96>
 801e6fe:	ebba 0b04 	subs.w	fp, sl, r4
 801e702:	d00b      	beq.n	801e71c <_vfiprintf_r+0xc0>
 801e704:	465b      	mov	r3, fp
 801e706:	4622      	mov	r2, r4
 801e708:	4629      	mov	r1, r5
 801e70a:	4630      	mov	r0, r6
 801e70c:	f7ff ff93 	bl	801e636 <__sfputs_r>
 801e710:	3001      	adds	r0, #1
 801e712:	f000 80aa 	beq.w	801e86a <_vfiprintf_r+0x20e>
 801e716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e718:	445a      	add	r2, fp
 801e71a:	9209      	str	r2, [sp, #36]	; 0x24
 801e71c:	f89a 3000 	ldrb.w	r3, [sl]
 801e720:	2b00      	cmp	r3, #0
 801e722:	f000 80a2 	beq.w	801e86a <_vfiprintf_r+0x20e>
 801e726:	2300      	movs	r3, #0
 801e728:	f04f 32ff 	mov.w	r2, #4294967295
 801e72c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e730:	f10a 0a01 	add.w	sl, sl, #1
 801e734:	9304      	str	r3, [sp, #16]
 801e736:	9307      	str	r3, [sp, #28]
 801e738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e73c:	931a      	str	r3, [sp, #104]	; 0x68
 801e73e:	4654      	mov	r4, sl
 801e740:	2205      	movs	r2, #5
 801e742:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e746:	4858      	ldr	r0, [pc, #352]	; (801e8a8 <_vfiprintf_r+0x24c>)
 801e748:	f7e1 fdda 	bl	8000300 <memchr>
 801e74c:	9a04      	ldr	r2, [sp, #16]
 801e74e:	b9d8      	cbnz	r0, 801e788 <_vfiprintf_r+0x12c>
 801e750:	06d1      	lsls	r1, r2, #27
 801e752:	bf44      	itt	mi
 801e754:	2320      	movmi	r3, #32
 801e756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e75a:	0713      	lsls	r3, r2, #28
 801e75c:	bf44      	itt	mi
 801e75e:	232b      	movmi	r3, #43	; 0x2b
 801e760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e764:	f89a 3000 	ldrb.w	r3, [sl]
 801e768:	2b2a      	cmp	r3, #42	; 0x2a
 801e76a:	d015      	beq.n	801e798 <_vfiprintf_r+0x13c>
 801e76c:	9a07      	ldr	r2, [sp, #28]
 801e76e:	4654      	mov	r4, sl
 801e770:	2000      	movs	r0, #0
 801e772:	f04f 0c0a 	mov.w	ip, #10
 801e776:	4621      	mov	r1, r4
 801e778:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e77c:	3b30      	subs	r3, #48	; 0x30
 801e77e:	2b09      	cmp	r3, #9
 801e780:	d94e      	bls.n	801e820 <_vfiprintf_r+0x1c4>
 801e782:	b1b0      	cbz	r0, 801e7b2 <_vfiprintf_r+0x156>
 801e784:	9207      	str	r2, [sp, #28]
 801e786:	e014      	b.n	801e7b2 <_vfiprintf_r+0x156>
 801e788:	eba0 0308 	sub.w	r3, r0, r8
 801e78c:	fa09 f303 	lsl.w	r3, r9, r3
 801e790:	4313      	orrs	r3, r2
 801e792:	9304      	str	r3, [sp, #16]
 801e794:	46a2      	mov	sl, r4
 801e796:	e7d2      	b.n	801e73e <_vfiprintf_r+0xe2>
 801e798:	9b03      	ldr	r3, [sp, #12]
 801e79a:	1d19      	adds	r1, r3, #4
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	9103      	str	r1, [sp, #12]
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	bfbb      	ittet	lt
 801e7a4:	425b      	neglt	r3, r3
 801e7a6:	f042 0202 	orrlt.w	r2, r2, #2
 801e7aa:	9307      	strge	r3, [sp, #28]
 801e7ac:	9307      	strlt	r3, [sp, #28]
 801e7ae:	bfb8      	it	lt
 801e7b0:	9204      	strlt	r2, [sp, #16]
 801e7b2:	7823      	ldrb	r3, [r4, #0]
 801e7b4:	2b2e      	cmp	r3, #46	; 0x2e
 801e7b6:	d10c      	bne.n	801e7d2 <_vfiprintf_r+0x176>
 801e7b8:	7863      	ldrb	r3, [r4, #1]
 801e7ba:	2b2a      	cmp	r3, #42	; 0x2a
 801e7bc:	d135      	bne.n	801e82a <_vfiprintf_r+0x1ce>
 801e7be:	9b03      	ldr	r3, [sp, #12]
 801e7c0:	1d1a      	adds	r2, r3, #4
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	9203      	str	r2, [sp, #12]
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	bfb8      	it	lt
 801e7ca:	f04f 33ff 	movlt.w	r3, #4294967295
 801e7ce:	3402      	adds	r4, #2
 801e7d0:	9305      	str	r3, [sp, #20]
 801e7d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e8b8 <_vfiprintf_r+0x25c>
 801e7d6:	7821      	ldrb	r1, [r4, #0]
 801e7d8:	2203      	movs	r2, #3
 801e7da:	4650      	mov	r0, sl
 801e7dc:	f7e1 fd90 	bl	8000300 <memchr>
 801e7e0:	b140      	cbz	r0, 801e7f4 <_vfiprintf_r+0x198>
 801e7e2:	2340      	movs	r3, #64	; 0x40
 801e7e4:	eba0 000a 	sub.w	r0, r0, sl
 801e7e8:	fa03 f000 	lsl.w	r0, r3, r0
 801e7ec:	9b04      	ldr	r3, [sp, #16]
 801e7ee:	4303      	orrs	r3, r0
 801e7f0:	3401      	adds	r4, #1
 801e7f2:	9304      	str	r3, [sp, #16]
 801e7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7f8:	482c      	ldr	r0, [pc, #176]	; (801e8ac <_vfiprintf_r+0x250>)
 801e7fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e7fe:	2206      	movs	r2, #6
 801e800:	f7e1 fd7e 	bl	8000300 <memchr>
 801e804:	2800      	cmp	r0, #0
 801e806:	d03f      	beq.n	801e888 <_vfiprintf_r+0x22c>
 801e808:	4b29      	ldr	r3, [pc, #164]	; (801e8b0 <_vfiprintf_r+0x254>)
 801e80a:	bb1b      	cbnz	r3, 801e854 <_vfiprintf_r+0x1f8>
 801e80c:	9b03      	ldr	r3, [sp, #12]
 801e80e:	3307      	adds	r3, #7
 801e810:	f023 0307 	bic.w	r3, r3, #7
 801e814:	3308      	adds	r3, #8
 801e816:	9303      	str	r3, [sp, #12]
 801e818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e81a:	443b      	add	r3, r7
 801e81c:	9309      	str	r3, [sp, #36]	; 0x24
 801e81e:	e767      	b.n	801e6f0 <_vfiprintf_r+0x94>
 801e820:	fb0c 3202 	mla	r2, ip, r2, r3
 801e824:	460c      	mov	r4, r1
 801e826:	2001      	movs	r0, #1
 801e828:	e7a5      	b.n	801e776 <_vfiprintf_r+0x11a>
 801e82a:	2300      	movs	r3, #0
 801e82c:	3401      	adds	r4, #1
 801e82e:	9305      	str	r3, [sp, #20]
 801e830:	4619      	mov	r1, r3
 801e832:	f04f 0c0a 	mov.w	ip, #10
 801e836:	4620      	mov	r0, r4
 801e838:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e83c:	3a30      	subs	r2, #48	; 0x30
 801e83e:	2a09      	cmp	r2, #9
 801e840:	d903      	bls.n	801e84a <_vfiprintf_r+0x1ee>
 801e842:	2b00      	cmp	r3, #0
 801e844:	d0c5      	beq.n	801e7d2 <_vfiprintf_r+0x176>
 801e846:	9105      	str	r1, [sp, #20]
 801e848:	e7c3      	b.n	801e7d2 <_vfiprintf_r+0x176>
 801e84a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e84e:	4604      	mov	r4, r0
 801e850:	2301      	movs	r3, #1
 801e852:	e7f0      	b.n	801e836 <_vfiprintf_r+0x1da>
 801e854:	ab03      	add	r3, sp, #12
 801e856:	9300      	str	r3, [sp, #0]
 801e858:	462a      	mov	r2, r5
 801e85a:	4b16      	ldr	r3, [pc, #88]	; (801e8b4 <_vfiprintf_r+0x258>)
 801e85c:	a904      	add	r1, sp, #16
 801e85e:	4630      	mov	r0, r6
 801e860:	f3af 8000 	nop.w
 801e864:	4607      	mov	r7, r0
 801e866:	1c78      	adds	r0, r7, #1
 801e868:	d1d6      	bne.n	801e818 <_vfiprintf_r+0x1bc>
 801e86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e86c:	07d9      	lsls	r1, r3, #31
 801e86e:	d405      	bmi.n	801e87c <_vfiprintf_r+0x220>
 801e870:	89ab      	ldrh	r3, [r5, #12]
 801e872:	059a      	lsls	r2, r3, #22
 801e874:	d402      	bmi.n	801e87c <_vfiprintf_r+0x220>
 801e876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e878:	f7ff fe53 	bl	801e522 <__retarget_lock_release_recursive>
 801e87c:	89ab      	ldrh	r3, [r5, #12]
 801e87e:	065b      	lsls	r3, r3, #25
 801e880:	f53f af12 	bmi.w	801e6a8 <_vfiprintf_r+0x4c>
 801e884:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e886:	e711      	b.n	801e6ac <_vfiprintf_r+0x50>
 801e888:	ab03      	add	r3, sp, #12
 801e88a:	9300      	str	r3, [sp, #0]
 801e88c:	462a      	mov	r2, r5
 801e88e:	4b09      	ldr	r3, [pc, #36]	; (801e8b4 <_vfiprintf_r+0x258>)
 801e890:	a904      	add	r1, sp, #16
 801e892:	4630      	mov	r0, r6
 801e894:	f000 f880 	bl	801e998 <_printf_i>
 801e898:	e7e4      	b.n	801e864 <_vfiprintf_r+0x208>
 801e89a:	bf00      	nop
 801e89c:	080934dc 	.word	0x080934dc
 801e8a0:	080934fc 	.word	0x080934fc
 801e8a4:	080934bc 	.word	0x080934bc
 801e8a8:	0809351c 	.word	0x0809351c
 801e8ac:	08093526 	.word	0x08093526
 801e8b0:	00000000 	.word	0x00000000
 801e8b4:	0801e637 	.word	0x0801e637
 801e8b8:	08093522 	.word	0x08093522

0801e8bc <_printf_common>:
 801e8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8c0:	4616      	mov	r6, r2
 801e8c2:	4699      	mov	r9, r3
 801e8c4:	688a      	ldr	r2, [r1, #8]
 801e8c6:	690b      	ldr	r3, [r1, #16]
 801e8c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e8cc:	4293      	cmp	r3, r2
 801e8ce:	bfb8      	it	lt
 801e8d0:	4613      	movlt	r3, r2
 801e8d2:	6033      	str	r3, [r6, #0]
 801e8d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e8d8:	4607      	mov	r7, r0
 801e8da:	460c      	mov	r4, r1
 801e8dc:	b10a      	cbz	r2, 801e8e2 <_printf_common+0x26>
 801e8de:	3301      	adds	r3, #1
 801e8e0:	6033      	str	r3, [r6, #0]
 801e8e2:	6823      	ldr	r3, [r4, #0]
 801e8e4:	0699      	lsls	r1, r3, #26
 801e8e6:	bf42      	ittt	mi
 801e8e8:	6833      	ldrmi	r3, [r6, #0]
 801e8ea:	3302      	addmi	r3, #2
 801e8ec:	6033      	strmi	r3, [r6, #0]
 801e8ee:	6825      	ldr	r5, [r4, #0]
 801e8f0:	f015 0506 	ands.w	r5, r5, #6
 801e8f4:	d106      	bne.n	801e904 <_printf_common+0x48>
 801e8f6:	f104 0a19 	add.w	sl, r4, #25
 801e8fa:	68e3      	ldr	r3, [r4, #12]
 801e8fc:	6832      	ldr	r2, [r6, #0]
 801e8fe:	1a9b      	subs	r3, r3, r2
 801e900:	42ab      	cmp	r3, r5
 801e902:	dc26      	bgt.n	801e952 <_printf_common+0x96>
 801e904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e908:	1e13      	subs	r3, r2, #0
 801e90a:	6822      	ldr	r2, [r4, #0]
 801e90c:	bf18      	it	ne
 801e90e:	2301      	movne	r3, #1
 801e910:	0692      	lsls	r2, r2, #26
 801e912:	d42b      	bmi.n	801e96c <_printf_common+0xb0>
 801e914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e918:	4649      	mov	r1, r9
 801e91a:	4638      	mov	r0, r7
 801e91c:	47c0      	blx	r8
 801e91e:	3001      	adds	r0, #1
 801e920:	d01e      	beq.n	801e960 <_printf_common+0xa4>
 801e922:	6823      	ldr	r3, [r4, #0]
 801e924:	68e5      	ldr	r5, [r4, #12]
 801e926:	6832      	ldr	r2, [r6, #0]
 801e928:	f003 0306 	and.w	r3, r3, #6
 801e92c:	2b04      	cmp	r3, #4
 801e92e:	bf08      	it	eq
 801e930:	1aad      	subeq	r5, r5, r2
 801e932:	68a3      	ldr	r3, [r4, #8]
 801e934:	6922      	ldr	r2, [r4, #16]
 801e936:	bf0c      	ite	eq
 801e938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e93c:	2500      	movne	r5, #0
 801e93e:	4293      	cmp	r3, r2
 801e940:	bfc4      	itt	gt
 801e942:	1a9b      	subgt	r3, r3, r2
 801e944:	18ed      	addgt	r5, r5, r3
 801e946:	2600      	movs	r6, #0
 801e948:	341a      	adds	r4, #26
 801e94a:	42b5      	cmp	r5, r6
 801e94c:	d11a      	bne.n	801e984 <_printf_common+0xc8>
 801e94e:	2000      	movs	r0, #0
 801e950:	e008      	b.n	801e964 <_printf_common+0xa8>
 801e952:	2301      	movs	r3, #1
 801e954:	4652      	mov	r2, sl
 801e956:	4649      	mov	r1, r9
 801e958:	4638      	mov	r0, r7
 801e95a:	47c0      	blx	r8
 801e95c:	3001      	adds	r0, #1
 801e95e:	d103      	bne.n	801e968 <_printf_common+0xac>
 801e960:	f04f 30ff 	mov.w	r0, #4294967295
 801e964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e968:	3501      	adds	r5, #1
 801e96a:	e7c6      	b.n	801e8fa <_printf_common+0x3e>
 801e96c:	18e1      	adds	r1, r4, r3
 801e96e:	1c5a      	adds	r2, r3, #1
 801e970:	2030      	movs	r0, #48	; 0x30
 801e972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e976:	4422      	add	r2, r4
 801e978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e97c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e980:	3302      	adds	r3, #2
 801e982:	e7c7      	b.n	801e914 <_printf_common+0x58>
 801e984:	2301      	movs	r3, #1
 801e986:	4622      	mov	r2, r4
 801e988:	4649      	mov	r1, r9
 801e98a:	4638      	mov	r0, r7
 801e98c:	47c0      	blx	r8
 801e98e:	3001      	adds	r0, #1
 801e990:	d0e6      	beq.n	801e960 <_printf_common+0xa4>
 801e992:	3601      	adds	r6, #1
 801e994:	e7d9      	b.n	801e94a <_printf_common+0x8e>
	...

0801e998 <_printf_i>:
 801e998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e99c:	7e0f      	ldrb	r7, [r1, #24]
 801e99e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e9a0:	2f78      	cmp	r7, #120	; 0x78
 801e9a2:	4691      	mov	r9, r2
 801e9a4:	4680      	mov	r8, r0
 801e9a6:	460c      	mov	r4, r1
 801e9a8:	469a      	mov	sl, r3
 801e9aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e9ae:	d807      	bhi.n	801e9c0 <_printf_i+0x28>
 801e9b0:	2f62      	cmp	r7, #98	; 0x62
 801e9b2:	d80a      	bhi.n	801e9ca <_printf_i+0x32>
 801e9b4:	2f00      	cmp	r7, #0
 801e9b6:	f000 80d8 	beq.w	801eb6a <_printf_i+0x1d2>
 801e9ba:	2f58      	cmp	r7, #88	; 0x58
 801e9bc:	f000 80a3 	beq.w	801eb06 <_printf_i+0x16e>
 801e9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e9c8:	e03a      	b.n	801ea40 <_printf_i+0xa8>
 801e9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e9ce:	2b15      	cmp	r3, #21
 801e9d0:	d8f6      	bhi.n	801e9c0 <_printf_i+0x28>
 801e9d2:	a101      	add	r1, pc, #4	; (adr r1, 801e9d8 <_printf_i+0x40>)
 801e9d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e9d8:	0801ea31 	.word	0x0801ea31
 801e9dc:	0801ea45 	.word	0x0801ea45
 801e9e0:	0801e9c1 	.word	0x0801e9c1
 801e9e4:	0801e9c1 	.word	0x0801e9c1
 801e9e8:	0801e9c1 	.word	0x0801e9c1
 801e9ec:	0801e9c1 	.word	0x0801e9c1
 801e9f0:	0801ea45 	.word	0x0801ea45
 801e9f4:	0801e9c1 	.word	0x0801e9c1
 801e9f8:	0801e9c1 	.word	0x0801e9c1
 801e9fc:	0801e9c1 	.word	0x0801e9c1
 801ea00:	0801e9c1 	.word	0x0801e9c1
 801ea04:	0801eb51 	.word	0x0801eb51
 801ea08:	0801ea75 	.word	0x0801ea75
 801ea0c:	0801eb33 	.word	0x0801eb33
 801ea10:	0801e9c1 	.word	0x0801e9c1
 801ea14:	0801e9c1 	.word	0x0801e9c1
 801ea18:	0801eb73 	.word	0x0801eb73
 801ea1c:	0801e9c1 	.word	0x0801e9c1
 801ea20:	0801ea75 	.word	0x0801ea75
 801ea24:	0801e9c1 	.word	0x0801e9c1
 801ea28:	0801e9c1 	.word	0x0801e9c1
 801ea2c:	0801eb3b 	.word	0x0801eb3b
 801ea30:	682b      	ldr	r3, [r5, #0]
 801ea32:	1d1a      	adds	r2, r3, #4
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	602a      	str	r2, [r5, #0]
 801ea38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ea3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ea40:	2301      	movs	r3, #1
 801ea42:	e0a3      	b.n	801eb8c <_printf_i+0x1f4>
 801ea44:	6820      	ldr	r0, [r4, #0]
 801ea46:	6829      	ldr	r1, [r5, #0]
 801ea48:	0606      	lsls	r6, r0, #24
 801ea4a:	f101 0304 	add.w	r3, r1, #4
 801ea4e:	d50a      	bpl.n	801ea66 <_printf_i+0xce>
 801ea50:	680e      	ldr	r6, [r1, #0]
 801ea52:	602b      	str	r3, [r5, #0]
 801ea54:	2e00      	cmp	r6, #0
 801ea56:	da03      	bge.n	801ea60 <_printf_i+0xc8>
 801ea58:	232d      	movs	r3, #45	; 0x2d
 801ea5a:	4276      	negs	r6, r6
 801ea5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ea60:	485e      	ldr	r0, [pc, #376]	; (801ebdc <_printf_i+0x244>)
 801ea62:	230a      	movs	r3, #10
 801ea64:	e019      	b.n	801ea9a <_printf_i+0x102>
 801ea66:	680e      	ldr	r6, [r1, #0]
 801ea68:	602b      	str	r3, [r5, #0]
 801ea6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ea6e:	bf18      	it	ne
 801ea70:	b236      	sxthne	r6, r6
 801ea72:	e7ef      	b.n	801ea54 <_printf_i+0xbc>
 801ea74:	682b      	ldr	r3, [r5, #0]
 801ea76:	6820      	ldr	r0, [r4, #0]
 801ea78:	1d19      	adds	r1, r3, #4
 801ea7a:	6029      	str	r1, [r5, #0]
 801ea7c:	0601      	lsls	r1, r0, #24
 801ea7e:	d501      	bpl.n	801ea84 <_printf_i+0xec>
 801ea80:	681e      	ldr	r6, [r3, #0]
 801ea82:	e002      	b.n	801ea8a <_printf_i+0xf2>
 801ea84:	0646      	lsls	r6, r0, #25
 801ea86:	d5fb      	bpl.n	801ea80 <_printf_i+0xe8>
 801ea88:	881e      	ldrh	r6, [r3, #0]
 801ea8a:	4854      	ldr	r0, [pc, #336]	; (801ebdc <_printf_i+0x244>)
 801ea8c:	2f6f      	cmp	r7, #111	; 0x6f
 801ea8e:	bf0c      	ite	eq
 801ea90:	2308      	moveq	r3, #8
 801ea92:	230a      	movne	r3, #10
 801ea94:	2100      	movs	r1, #0
 801ea96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ea9a:	6865      	ldr	r5, [r4, #4]
 801ea9c:	60a5      	str	r5, [r4, #8]
 801ea9e:	2d00      	cmp	r5, #0
 801eaa0:	bfa2      	ittt	ge
 801eaa2:	6821      	ldrge	r1, [r4, #0]
 801eaa4:	f021 0104 	bicge.w	r1, r1, #4
 801eaa8:	6021      	strge	r1, [r4, #0]
 801eaaa:	b90e      	cbnz	r6, 801eab0 <_printf_i+0x118>
 801eaac:	2d00      	cmp	r5, #0
 801eaae:	d04d      	beq.n	801eb4c <_printf_i+0x1b4>
 801eab0:	4615      	mov	r5, r2
 801eab2:	fbb6 f1f3 	udiv	r1, r6, r3
 801eab6:	fb03 6711 	mls	r7, r3, r1, r6
 801eaba:	5dc7      	ldrb	r7, [r0, r7]
 801eabc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801eac0:	4637      	mov	r7, r6
 801eac2:	42bb      	cmp	r3, r7
 801eac4:	460e      	mov	r6, r1
 801eac6:	d9f4      	bls.n	801eab2 <_printf_i+0x11a>
 801eac8:	2b08      	cmp	r3, #8
 801eaca:	d10b      	bne.n	801eae4 <_printf_i+0x14c>
 801eacc:	6823      	ldr	r3, [r4, #0]
 801eace:	07de      	lsls	r6, r3, #31
 801ead0:	d508      	bpl.n	801eae4 <_printf_i+0x14c>
 801ead2:	6923      	ldr	r3, [r4, #16]
 801ead4:	6861      	ldr	r1, [r4, #4]
 801ead6:	4299      	cmp	r1, r3
 801ead8:	bfde      	ittt	le
 801eada:	2330      	movle	r3, #48	; 0x30
 801eadc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801eae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801eae4:	1b52      	subs	r2, r2, r5
 801eae6:	6122      	str	r2, [r4, #16]
 801eae8:	f8cd a000 	str.w	sl, [sp]
 801eaec:	464b      	mov	r3, r9
 801eaee:	aa03      	add	r2, sp, #12
 801eaf0:	4621      	mov	r1, r4
 801eaf2:	4640      	mov	r0, r8
 801eaf4:	f7ff fee2 	bl	801e8bc <_printf_common>
 801eaf8:	3001      	adds	r0, #1
 801eafa:	d14c      	bne.n	801eb96 <_printf_i+0x1fe>
 801eafc:	f04f 30ff 	mov.w	r0, #4294967295
 801eb00:	b004      	add	sp, #16
 801eb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb06:	4835      	ldr	r0, [pc, #212]	; (801ebdc <_printf_i+0x244>)
 801eb08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801eb0c:	6829      	ldr	r1, [r5, #0]
 801eb0e:	6823      	ldr	r3, [r4, #0]
 801eb10:	f851 6b04 	ldr.w	r6, [r1], #4
 801eb14:	6029      	str	r1, [r5, #0]
 801eb16:	061d      	lsls	r5, r3, #24
 801eb18:	d514      	bpl.n	801eb44 <_printf_i+0x1ac>
 801eb1a:	07df      	lsls	r7, r3, #31
 801eb1c:	bf44      	itt	mi
 801eb1e:	f043 0320 	orrmi.w	r3, r3, #32
 801eb22:	6023      	strmi	r3, [r4, #0]
 801eb24:	b91e      	cbnz	r6, 801eb2e <_printf_i+0x196>
 801eb26:	6823      	ldr	r3, [r4, #0]
 801eb28:	f023 0320 	bic.w	r3, r3, #32
 801eb2c:	6023      	str	r3, [r4, #0]
 801eb2e:	2310      	movs	r3, #16
 801eb30:	e7b0      	b.n	801ea94 <_printf_i+0xfc>
 801eb32:	6823      	ldr	r3, [r4, #0]
 801eb34:	f043 0320 	orr.w	r3, r3, #32
 801eb38:	6023      	str	r3, [r4, #0]
 801eb3a:	2378      	movs	r3, #120	; 0x78
 801eb3c:	4828      	ldr	r0, [pc, #160]	; (801ebe0 <_printf_i+0x248>)
 801eb3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801eb42:	e7e3      	b.n	801eb0c <_printf_i+0x174>
 801eb44:	0659      	lsls	r1, r3, #25
 801eb46:	bf48      	it	mi
 801eb48:	b2b6      	uxthmi	r6, r6
 801eb4a:	e7e6      	b.n	801eb1a <_printf_i+0x182>
 801eb4c:	4615      	mov	r5, r2
 801eb4e:	e7bb      	b.n	801eac8 <_printf_i+0x130>
 801eb50:	682b      	ldr	r3, [r5, #0]
 801eb52:	6826      	ldr	r6, [r4, #0]
 801eb54:	6961      	ldr	r1, [r4, #20]
 801eb56:	1d18      	adds	r0, r3, #4
 801eb58:	6028      	str	r0, [r5, #0]
 801eb5a:	0635      	lsls	r5, r6, #24
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	d501      	bpl.n	801eb64 <_printf_i+0x1cc>
 801eb60:	6019      	str	r1, [r3, #0]
 801eb62:	e002      	b.n	801eb6a <_printf_i+0x1d2>
 801eb64:	0670      	lsls	r0, r6, #25
 801eb66:	d5fb      	bpl.n	801eb60 <_printf_i+0x1c8>
 801eb68:	8019      	strh	r1, [r3, #0]
 801eb6a:	2300      	movs	r3, #0
 801eb6c:	6123      	str	r3, [r4, #16]
 801eb6e:	4615      	mov	r5, r2
 801eb70:	e7ba      	b.n	801eae8 <_printf_i+0x150>
 801eb72:	682b      	ldr	r3, [r5, #0]
 801eb74:	1d1a      	adds	r2, r3, #4
 801eb76:	602a      	str	r2, [r5, #0]
 801eb78:	681d      	ldr	r5, [r3, #0]
 801eb7a:	6862      	ldr	r2, [r4, #4]
 801eb7c:	2100      	movs	r1, #0
 801eb7e:	4628      	mov	r0, r5
 801eb80:	f7e1 fbbe 	bl	8000300 <memchr>
 801eb84:	b108      	cbz	r0, 801eb8a <_printf_i+0x1f2>
 801eb86:	1b40      	subs	r0, r0, r5
 801eb88:	6060      	str	r0, [r4, #4]
 801eb8a:	6863      	ldr	r3, [r4, #4]
 801eb8c:	6123      	str	r3, [r4, #16]
 801eb8e:	2300      	movs	r3, #0
 801eb90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb94:	e7a8      	b.n	801eae8 <_printf_i+0x150>
 801eb96:	6923      	ldr	r3, [r4, #16]
 801eb98:	462a      	mov	r2, r5
 801eb9a:	4649      	mov	r1, r9
 801eb9c:	4640      	mov	r0, r8
 801eb9e:	47d0      	blx	sl
 801eba0:	3001      	adds	r0, #1
 801eba2:	d0ab      	beq.n	801eafc <_printf_i+0x164>
 801eba4:	6823      	ldr	r3, [r4, #0]
 801eba6:	079b      	lsls	r3, r3, #30
 801eba8:	d413      	bmi.n	801ebd2 <_printf_i+0x23a>
 801ebaa:	68e0      	ldr	r0, [r4, #12]
 801ebac:	9b03      	ldr	r3, [sp, #12]
 801ebae:	4298      	cmp	r0, r3
 801ebb0:	bfb8      	it	lt
 801ebb2:	4618      	movlt	r0, r3
 801ebb4:	e7a4      	b.n	801eb00 <_printf_i+0x168>
 801ebb6:	2301      	movs	r3, #1
 801ebb8:	4632      	mov	r2, r6
 801ebba:	4649      	mov	r1, r9
 801ebbc:	4640      	mov	r0, r8
 801ebbe:	47d0      	blx	sl
 801ebc0:	3001      	adds	r0, #1
 801ebc2:	d09b      	beq.n	801eafc <_printf_i+0x164>
 801ebc4:	3501      	adds	r5, #1
 801ebc6:	68e3      	ldr	r3, [r4, #12]
 801ebc8:	9903      	ldr	r1, [sp, #12]
 801ebca:	1a5b      	subs	r3, r3, r1
 801ebcc:	42ab      	cmp	r3, r5
 801ebce:	dcf2      	bgt.n	801ebb6 <_printf_i+0x21e>
 801ebd0:	e7eb      	b.n	801ebaa <_printf_i+0x212>
 801ebd2:	2500      	movs	r5, #0
 801ebd4:	f104 0619 	add.w	r6, r4, #25
 801ebd8:	e7f5      	b.n	801ebc6 <_printf_i+0x22e>
 801ebda:	bf00      	nop
 801ebdc:	0809352d 	.word	0x0809352d
 801ebe0:	0809353e 	.word	0x0809353e

0801ebe4 <__sread>:
 801ebe4:	b510      	push	{r4, lr}
 801ebe6:	460c      	mov	r4, r1
 801ebe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebec:	f000 f894 	bl	801ed18 <_read_r>
 801ebf0:	2800      	cmp	r0, #0
 801ebf2:	bfab      	itete	ge
 801ebf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ebf6:	89a3      	ldrhlt	r3, [r4, #12]
 801ebf8:	181b      	addge	r3, r3, r0
 801ebfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ebfe:	bfac      	ite	ge
 801ec00:	6563      	strge	r3, [r4, #84]	; 0x54
 801ec02:	81a3      	strhlt	r3, [r4, #12]
 801ec04:	bd10      	pop	{r4, pc}

0801ec06 <__swrite>:
 801ec06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec0a:	461f      	mov	r7, r3
 801ec0c:	898b      	ldrh	r3, [r1, #12]
 801ec0e:	05db      	lsls	r3, r3, #23
 801ec10:	4605      	mov	r5, r0
 801ec12:	460c      	mov	r4, r1
 801ec14:	4616      	mov	r6, r2
 801ec16:	d505      	bpl.n	801ec24 <__swrite+0x1e>
 801ec18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec1c:	2302      	movs	r3, #2
 801ec1e:	2200      	movs	r2, #0
 801ec20:	f000 f868 	bl	801ecf4 <_lseek_r>
 801ec24:	89a3      	ldrh	r3, [r4, #12]
 801ec26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ec2e:	81a3      	strh	r3, [r4, #12]
 801ec30:	4632      	mov	r2, r6
 801ec32:	463b      	mov	r3, r7
 801ec34:	4628      	mov	r0, r5
 801ec36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec3a:	f000 b817 	b.w	801ec6c <_write_r>

0801ec3e <__sseek>:
 801ec3e:	b510      	push	{r4, lr}
 801ec40:	460c      	mov	r4, r1
 801ec42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec46:	f000 f855 	bl	801ecf4 <_lseek_r>
 801ec4a:	1c43      	adds	r3, r0, #1
 801ec4c:	89a3      	ldrh	r3, [r4, #12]
 801ec4e:	bf15      	itete	ne
 801ec50:	6560      	strne	r0, [r4, #84]	; 0x54
 801ec52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ec56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ec5a:	81a3      	strheq	r3, [r4, #12]
 801ec5c:	bf18      	it	ne
 801ec5e:	81a3      	strhne	r3, [r4, #12]
 801ec60:	bd10      	pop	{r4, pc}

0801ec62 <__sclose>:
 801ec62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec66:	f000 b813 	b.w	801ec90 <_close_r>
	...

0801ec6c <_write_r>:
 801ec6c:	b538      	push	{r3, r4, r5, lr}
 801ec6e:	4d07      	ldr	r5, [pc, #28]	; (801ec8c <_write_r+0x20>)
 801ec70:	4604      	mov	r4, r0
 801ec72:	4608      	mov	r0, r1
 801ec74:	4611      	mov	r1, r2
 801ec76:	2200      	movs	r2, #0
 801ec78:	602a      	str	r2, [r5, #0]
 801ec7a:	461a      	mov	r2, r3
 801ec7c:	f7e6 fcaa 	bl	80055d4 <_write>
 801ec80:	1c43      	adds	r3, r0, #1
 801ec82:	d102      	bne.n	801ec8a <_write_r+0x1e>
 801ec84:	682b      	ldr	r3, [r5, #0]
 801ec86:	b103      	cbz	r3, 801ec8a <_write_r+0x1e>
 801ec88:	6023      	str	r3, [r4, #0]
 801ec8a:	bd38      	pop	{r3, r4, r5, pc}
 801ec8c:	2405e3c0 	.word	0x2405e3c0

0801ec90 <_close_r>:
 801ec90:	b538      	push	{r3, r4, r5, lr}
 801ec92:	4d06      	ldr	r5, [pc, #24]	; (801ecac <_close_r+0x1c>)
 801ec94:	2300      	movs	r3, #0
 801ec96:	4604      	mov	r4, r0
 801ec98:	4608      	mov	r0, r1
 801ec9a:	602b      	str	r3, [r5, #0]
 801ec9c:	f7e6 fcc6 	bl	800562c <_close>
 801eca0:	1c43      	adds	r3, r0, #1
 801eca2:	d102      	bne.n	801ecaa <_close_r+0x1a>
 801eca4:	682b      	ldr	r3, [r5, #0]
 801eca6:	b103      	cbz	r3, 801ecaa <_close_r+0x1a>
 801eca8:	6023      	str	r3, [r4, #0]
 801ecaa:	bd38      	pop	{r3, r4, r5, pc}
 801ecac:	2405e3c0 	.word	0x2405e3c0

0801ecb0 <_fstat_r>:
 801ecb0:	b538      	push	{r3, r4, r5, lr}
 801ecb2:	4d07      	ldr	r5, [pc, #28]	; (801ecd0 <_fstat_r+0x20>)
 801ecb4:	2300      	movs	r3, #0
 801ecb6:	4604      	mov	r4, r0
 801ecb8:	4608      	mov	r0, r1
 801ecba:	4611      	mov	r1, r2
 801ecbc:	602b      	str	r3, [r5, #0]
 801ecbe:	f7e6 fcf5 	bl	80056ac <_fstat>
 801ecc2:	1c43      	adds	r3, r0, #1
 801ecc4:	d102      	bne.n	801eccc <_fstat_r+0x1c>
 801ecc6:	682b      	ldr	r3, [r5, #0]
 801ecc8:	b103      	cbz	r3, 801eccc <_fstat_r+0x1c>
 801ecca:	6023      	str	r3, [r4, #0]
 801eccc:	bd38      	pop	{r3, r4, r5, pc}
 801ecce:	bf00      	nop
 801ecd0:	2405e3c0 	.word	0x2405e3c0

0801ecd4 <_isatty_r>:
 801ecd4:	b538      	push	{r3, r4, r5, lr}
 801ecd6:	4d06      	ldr	r5, [pc, #24]	; (801ecf0 <_isatty_r+0x1c>)
 801ecd8:	2300      	movs	r3, #0
 801ecda:	4604      	mov	r4, r0
 801ecdc:	4608      	mov	r0, r1
 801ecde:	602b      	str	r3, [r5, #0]
 801ece0:	f7e6 fc62 	bl	80055a8 <_isatty>
 801ece4:	1c43      	adds	r3, r0, #1
 801ece6:	d102      	bne.n	801ecee <_isatty_r+0x1a>
 801ece8:	682b      	ldr	r3, [r5, #0]
 801ecea:	b103      	cbz	r3, 801ecee <_isatty_r+0x1a>
 801ecec:	6023      	str	r3, [r4, #0]
 801ecee:	bd38      	pop	{r3, r4, r5, pc}
 801ecf0:	2405e3c0 	.word	0x2405e3c0

0801ecf4 <_lseek_r>:
 801ecf4:	b538      	push	{r3, r4, r5, lr}
 801ecf6:	4d07      	ldr	r5, [pc, #28]	; (801ed14 <_lseek_r+0x20>)
 801ecf8:	4604      	mov	r4, r0
 801ecfa:	4608      	mov	r0, r1
 801ecfc:	4611      	mov	r1, r2
 801ecfe:	2200      	movs	r2, #0
 801ed00:	602a      	str	r2, [r5, #0]
 801ed02:	461a      	mov	r2, r3
 801ed04:	f000 f82a 	bl	801ed5c <_lseek>
 801ed08:	1c43      	adds	r3, r0, #1
 801ed0a:	d102      	bne.n	801ed12 <_lseek_r+0x1e>
 801ed0c:	682b      	ldr	r3, [r5, #0]
 801ed0e:	b103      	cbz	r3, 801ed12 <_lseek_r+0x1e>
 801ed10:	6023      	str	r3, [r4, #0]
 801ed12:	bd38      	pop	{r3, r4, r5, pc}
 801ed14:	2405e3c0 	.word	0x2405e3c0

0801ed18 <_read_r>:
 801ed18:	b538      	push	{r3, r4, r5, lr}
 801ed1a:	4d07      	ldr	r5, [pc, #28]	; (801ed38 <_read_r+0x20>)
 801ed1c:	4604      	mov	r4, r0
 801ed1e:	4608      	mov	r0, r1
 801ed20:	4611      	mov	r1, r2
 801ed22:	2200      	movs	r2, #0
 801ed24:	602a      	str	r2, [r5, #0]
 801ed26:	461a      	mov	r2, r3
 801ed28:	f7e6 fc98 	bl	800565c <_read>
 801ed2c:	1c43      	adds	r3, r0, #1
 801ed2e:	d102      	bne.n	801ed36 <_read_r+0x1e>
 801ed30:	682b      	ldr	r3, [r5, #0]
 801ed32:	b103      	cbz	r3, 801ed36 <_read_r+0x1e>
 801ed34:	6023      	str	r3, [r4, #0]
 801ed36:	bd38      	pop	{r3, r4, r5, pc}
 801ed38:	2405e3c0 	.word	0x2405e3c0

0801ed3c <_getpid>:
 801ed3c:	4b02      	ldr	r3, [pc, #8]	; (801ed48 <_getpid+0xc>)
 801ed3e:	2258      	movs	r2, #88	; 0x58
 801ed40:	601a      	str	r2, [r3, #0]
 801ed42:	f04f 30ff 	mov.w	r0, #4294967295
 801ed46:	4770      	bx	lr
 801ed48:	2405e3c0 	.word	0x2405e3c0

0801ed4c <_kill>:
 801ed4c:	4b02      	ldr	r3, [pc, #8]	; (801ed58 <_kill+0xc>)
 801ed4e:	2258      	movs	r2, #88	; 0x58
 801ed50:	601a      	str	r2, [r3, #0]
 801ed52:	f04f 30ff 	mov.w	r0, #4294967295
 801ed56:	4770      	bx	lr
 801ed58:	2405e3c0 	.word	0x2405e3c0

0801ed5c <_lseek>:
 801ed5c:	4b02      	ldr	r3, [pc, #8]	; (801ed68 <_lseek+0xc>)
 801ed5e:	2258      	movs	r2, #88	; 0x58
 801ed60:	601a      	str	r2, [r3, #0]
 801ed62:	f04f 30ff 	mov.w	r0, #4294967295
 801ed66:	4770      	bx	lr
 801ed68:	2405e3c0 	.word	0x2405e3c0

0801ed6c <_exit>:
 801ed6c:	e7fe      	b.n	801ed6c <_exit>
	...

0801ed70 <_init>:
 801ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed72:	bf00      	nop
 801ed74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed76:	bc08      	pop	{r3}
 801ed78:	469e      	mov	lr, r3
 801ed7a:	4770      	bx	lr

0801ed7c <_fini>:
 801ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed7e:	bf00      	nop
 801ed80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed82:	bc08      	pop	{r3}
 801ed84:	469e      	mov	lr, r3
 801ed86:	4770      	bx	lr
