
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010088  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  08010338  08010338  00020338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010a28  08010a28  00020a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010a30  08010a30  00020a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010a34  08010a34  00020a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010a38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0004bdb4  240000b8  08010af0  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2404be6c  08010af0  0003be6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020fd8  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c62  00000000  00000000  000510be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001608  00000000  00000000  00054d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014b0  00000000  00000000  00056328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035bd4  00000000  00000000  000577d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ed6f  00000000  00000000  0008d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ca78  00000000  00000000  000ac11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f8b93  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063f8  00000000  00000000  001f8be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010320 	.word	0x08010320

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	08010320 	.word	0x08010320

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f003 fd0c 	bl	80040b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f858 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f9ec 	bl	8000a7c <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f000 f9ca 	bl	8000a3c <MX_DMA_Init>
  MX_RTC_Init();
 80006a8:	f000 f952 	bl	8000950 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80006ac:	f000 f97a 	bl	80009a4 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 80006b0:	f000 f90e 	bl	80008d0 <MX_I2C4_Init>
  MX_DMA2D_Init();
 80006b4:	f000 f8d2 	bl	800085c <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80006b8:	4820      	ldr	r0, [pc, #128]	; (800073c <main+0xa8>)
 80006ba:	f002 f937 	bl	800292c <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <main+0xac>)
 80006c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c4:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80006c8:	4619      	mov	r1, r3
 80006ca:	481e      	ldr	r0, [pc, #120]	; (8000744 <main+0xb0>)
 80006cc:	f00e fdcc 	bl	800f268 <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f002 ff18 	bl	8003506 <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R320x240, CAMERA_PF_RGB565) != BSP_ERROR_NONE){
 80006d6:	2200      	movs	r2, #0
 80006d8:	2101      	movs	r1, #1
 80006da:	2000      	movs	r0, #0
 80006dc:	f002 fe32 	bl	8003344 <BSP_CAMERA_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x56>
	  Error_Handler();
 80006e6:	f000 fc79 	bl	8000fdc <Error_Handler>
  }

  HAL_Delay(2000);
 80006ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ee:	f003 fd73 	bl	80041d8 <HAL_Delay>

  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 80006f2:	2202      	movs	r2, #2
 80006f4:	4912      	ldr	r1, [pc, #72]	; (8000740 <main+0xac>)
 80006f6:	2000      	movs	r0, #0
 80006f8:	f002 fe9a 	bl	8003430 <BSP_CAMERA_Start>

  printf("BUFFER RANDOM VALUE AFTER CAPTURE: %d\n", buffer[5640]);
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <main+0xac>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8000706:	4619      	mov	r1, r3
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <main+0xb4>)
 800070a:	f00e fdad 	bl	800f268 <iprintf>
  while(camera_frame_ready == 0){
 800070e:	bf00      	nop
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <main+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0fb      	beq.n	8000710 <main+0x7c>

  }

  BSP_CAMERA_Stop(0);
 8000718:	2000      	movs	r0, #0
 800071a:	f002 fec3 	bl	80034a4 <BSP_CAMERA_Stop>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  printf("BUFFER RANDOM VALUE AFTER CAPTURE: %d\n", buffer[5640]);
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <main+0xac>)
 8000720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000724:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8000728:	4619      	mov	r1, r3
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <main+0xb4>)
 800072c:	f00e fd9c 	bl	800f268 <iprintf>
	  //uint16_t chip_id_reg = 0x300B;
	  //printf("Register %x has value %x\n", chip_id_reg, read_register(chip_id_reg));
	  HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f003 fd50 	bl	80041d8 <HAL_Delay>
	  printf("BUFFER RANDOM VALUE AFTER CAPTURE: %d\n", buffer[5640]);
 8000738:	e7f1      	b.n	800071e <main+0x8a>
 800073a:	bf00      	nop
 800073c:	24000230 	.word	0x24000230
 8000740:	240002c8 	.word	0x240002c8
 8000744:	08010338 	.word	0x08010338
 8000748:	08010360 	.word	0x08010360
 800074c:	240002c4 	.word	0x240002c4

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	; 0x70
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00e fd7a 	bl	800f258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00e fd74 	bl	800f258 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <SystemClock_Config+0x104>)
 8000772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000776:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800077a:	2004      	movs	r0, #4
 800077c:	f009 fe5a 	bl	800a434 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <SystemClock_Config+0x108>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a33      	ldr	r2, [pc, #204]	; (8000858 <SystemClock_Config+0x108>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b31      	ldr	r3, [pc, #196]	; (8000858 <SystemClock_Config+0x108>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079c:	bf00      	nop
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <SystemClock_Config+0x108>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007aa:	d1f8      	bne.n	800079e <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ac:	f009 fe32 	bl	800a414 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <SystemClock_Config+0x104>)
 80007b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80007b4:	4a27      	ldr	r2, [pc, #156]	; (8000854 <SystemClock_Config+0x104>)
 80007b6:	f023 0318 	bic.w	r3, r3, #24
 80007ba:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007bc:	2305      	movs	r3, #5
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007d2:	230c      	movs	r3, #12
 80007d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80007d6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80007da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e0:	2303      	movs	r3, #3
 80007e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007e8:	2304      	movs	r3, #4
 80007ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f009 fe75 	bl	800a4e8 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000804:	f000 fbea 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	233f      	movs	r3, #63	; 0x3f
 800080a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2303      	movs	r3, #3
 800080e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000814:	2308      	movs	r3, #8
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2103      	movs	r1, #3
 800082e:	4618      	mov	r0, r3
 8000830:	f00a fa8c 	bl	800ad4c <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800083a:	f000 fbcf 	bl	8000fdc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800083e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000842:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000846:	2000      	movs	r0, #0
 8000848:	f00a fc36 	bl	800b0b8 <HAL_RCC_MCOConfig>
}
 800084c:	bf00      	nop
 800084e:	3770      	adds	r7, #112	; 0x70
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400
 8000858:	58024800 	.word	0x58024800

0800085c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 8000862:	4a1a      	ldr	r2, [pc, #104]	; (80008cc <MX_DMA2D_Init+0x70>)
 8000864:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 800086e:	2202      	movs	r2, #2
 8000870:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 800087a:	2200      	movs	r2, #0
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 8000880:	2202      	movs	r2, #2
 8000882:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 8000886:	2200      	movs	r2, #0
 8000888:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 800088c:	2200      	movs	r2, #0
 800088e:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 8000892:	2200      	movs	r2, #0
 8000894:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 80008a4:	f006 ff38 	bl	8007718 <HAL_DMA2D_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008ae:	f000 fb95 	bl	8000fdc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008b2:	2101      	movs	r1, #1
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_DMA2D_Init+0x6c>)
 80008b6:	f007 f8a3 	bl	8007a00 <HAL_DMA2D_ConfigLayer>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80008c0:	f000 fb8c 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2400014c 	.word	0x2400014c
 80008cc:	52001000 	.word	0x52001000

080008d0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C4_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C4_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C4_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C4_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C4_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C4_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C4_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C4_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C4_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C4_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C4_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C4_Init+0x74>)
 800090c:	f008 f8aa 	bl	8008a64 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 fb61 	bl	8000fdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C4_Init+0x74>)
 800091e:	f009 fce1 	bl	800a2e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 fb58 	bl	8000fdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C4_Init+0x74>)
 8000930:	f009 fd23 	bl	800a37a <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fb4f 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	240001b4 	.word	0x240001b4
 8000948:	58001c00 	.word	0x58001c00
 800094c:	c010151e 	.word	0xc010151e

08000950 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_RTC_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_RTC_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_RTC_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_RTC_Init+0x4c>)
 8000962:	227f      	movs	r2, #127	; 0x7f
 8000964:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_RTC_Init+0x4c>)
 8000968:	22ff      	movs	r2, #255	; 0xff
 800096a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_RTC_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_RTC_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_RTC_Init+0x4c>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_RTC_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_RTC_Init+0x4c>)
 8000988:	f00c fbb6 	bl	800d0f8 <HAL_RTC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000992:	f000 fb23 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	24000208 	.word	0x24000208
 80009a0:	58004000 	.word	0x58004000

080009a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_USART1_UART_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 80009ee:	f00c fca1 	bl	800d334 <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 faf0 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 8000a00:	f00e fb36 	bl	800f070 <HAL_UARTEx_SetTxFifoThreshold>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0a:	f000 fae7 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 8000a12:	f00e fb6b 	bl	800f0ec <HAL_UARTEx_SetRxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 fade 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_USART1_UART_Init+0x90>)
 8000a22:	f00e faec 	bl	800effe <HAL_UARTEx_DisableFifoMode>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 fad6 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000230 	.word	0x24000230
 8000a38:	40011000 	.word	0x40011000

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a44:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2039      	movs	r0, #57	; 0x39
 8000a66:	f003 fcda 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a6a:	2039      	movs	r0, #57	; 0x39
 8000a6c:	f003 fcf1 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	58024400 	.word	0x58024400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	; 0x40
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a92:	4bbf      	ldr	r3, [pc, #764]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a98:	4abd      	ldr	r2, [pc, #756]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aa2:	4bbb      	ldr	r3, [pc, #748]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4bb7      	ldr	r3, [pc, #732]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ab2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab6:	4ab6      	ldr	r2, [pc, #728]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac0:	4bb3      	ldr	r3, [pc, #716]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ac2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ace:	4bb0      	ldr	r3, [pc, #704]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad4:	4aae      	ldr	r2, [pc, #696]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ada:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ade:	4bac      	ldr	r3, [pc, #688]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ae0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000aec:	4ba8      	ldr	r3, [pc, #672]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af2:	4aa7      	ldr	r2, [pc, #668]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000afc:	4ba4      	ldr	r3, [pc, #656]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000afe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4ba1      	ldr	r3, [pc, #644]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	4a9f      	ldr	r2, [pc, #636]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b1a:	4b9d      	ldr	r3, [pc, #628]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b99      	ldr	r3, [pc, #612]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	4a98      	ldr	r2, [pc, #608]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b38:	4b95      	ldr	r3, [pc, #596]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b46:	4b92      	ldr	r3, [pc, #584]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4c:	4a90      	ldr	r2, [pc, #576]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b56:	4b8e      	ldr	r3, [pc, #568]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b64:	4b8a      	ldr	r3, [pc, #552]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6a:	4a89      	ldr	r2, [pc, #548]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b74:	4b86      	ldr	r3, [pc, #536]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b83      	ldr	r3, [pc, #524]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b88:	4a81      	ldr	r2, [pc, #516]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b92:	4b7f      	ldr	r3, [pc, #508]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba0:	4b7b      	ldr	r3, [pc, #492]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ba2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba6:	4a7a      	ldr	r2, [pc, #488]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb0:	4b77      	ldr	r3, [pc, #476]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbe:	4b74      	ldr	r3, [pc, #464]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc4:	4a72      	ldr	r2, [pc, #456]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bce:	4b70      	ldr	r3, [pc, #448]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd4:	f003 0320 	and.w	r3, r3, #32
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	210e      	movs	r1, #14
 8000be0:	486c      	ldr	r0, [pc, #432]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000be2:	f007 ff25 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f640 0104 	movw	r1, #2052	; 0x804
 8000bec:	486a      	ldr	r0, [pc, #424]	; (8000d98 <MX_GPIO_Init+0x31c>)
 8000bee:	f007 ff1f 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf8:	4868      	ldr	r0, [pc, #416]	; (8000d9c <MX_GPIO_Init+0x320>)
 8000bfa:	f007 ff19 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2108      	movs	r1, #8
 8000c02:	4865      	ldr	r0, [pc, #404]	; (8000d98 <MX_GPIO_Init+0x31c>)
 8000c04:	f007 ff14 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2106      	movs	r1, #6
 8000c0c:	4863      	ldr	r0, [pc, #396]	; (8000d9c <MX_GPIO_Init+0x320>)
 8000c0e:	f007 ff0f 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000c12:	2330      	movs	r3, #48	; 0x30
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	485b      	ldr	r0, [pc, #364]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000c28:	f007 fc48 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000c2c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4853      	ldr	r0, [pc, #332]	; (8000d98 <MX_GPIO_Init+0x31c>)
 8000c4a:	f007 fc37 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_B4_Pin LCD_B5_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G6_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8000c4e:	23ff      	movs	r3, #255	; 0xff
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c5e:	230e      	movs	r3, #14
 8000c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c66:	4619      	mov	r1, r3
 8000c68:	484d      	ldr	r0, [pc, #308]	; (8000da0 <MX_GPIO_Init+0x324>)
 8000c6a:	f007 fc27 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000c6e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000c80:	2305      	movs	r3, #5
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4843      	ldr	r0, [pc, #268]	; (8000d98 <MX_GPIO_Init+0x31c>)
 8000c8c:	f007 fc16 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ca2:	2309      	movs	r3, #9
 8000ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000caa:	4619      	mov	r1, r3
 8000cac:	483a      	ldr	r0, [pc, #232]	; (8000d98 <MX_GPIO_Init+0x31c>)
 8000cae:	f007 fc05 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO7_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000cc2:	230a      	movs	r3, #10
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4835      	ldr	r0, [pc, #212]	; (8000da4 <MX_GPIO_Init+0x328>)
 8000cce:	f007 fbf5 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000cd2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	482d      	ldr	r0, [pc, #180]	; (8000da4 <MX_GPIO_Init+0x328>)
 8000cf0:	f007 fbe4 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000cf4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d06:	230c      	movs	r3, #12
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4825      	ldr	r0, [pc, #148]	; (8000da8 <MX_GPIO_Init+0x32c>)
 8000d12:	f007 fbd3 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000d16:	230e      	movs	r3, #14
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4819      	ldr	r0, [pc, #100]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000d2e:	f007 fbc5 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000d32:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d44:	230c      	movs	r3, #12
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <MX_GPIO_Init+0x330>)
 8000d50:	f007 fbb4 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000d54:	f640 030c 	movw	r3, #2060	; 0x80c
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480a      	ldr	r0, [pc, #40]	; (8000d98 <MX_GPIO_Init+0x31c>)
 8000d6e:	f007 fba5 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B1_Pin LCD_B0_Pin
                           LCD_G4_Pin LCD_G3_Pin LCD_G2_Pin LCD_G1_Pin
                           LCD_R7_Pin LCD_G0_Pin LCD_R1_Pin LCD_R6_Pin
                           LCD_R2_Pin LCD_R5_Pin LCD_R3_Pin LCD_R4_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8000d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d84:	230e      	movs	r3, #14
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8c:	e010      	b.n	8000db0 <MX_GPIO_Init+0x334>
 8000d8e:	bf00      	nop
 8000d90:	58024400 	.word	0x58024400
 8000d94:	58022000 	.word	0x58022000
 8000d98:	58021800 	.word	0x58021800
 8000d9c:	58020000 	.word	0x58020000
 8000da0:	58022800 	.word	0x58022800
 8000da4:	58020c00 	.word	0x58020c00
 8000da8:	58020800 	.word	0x58020800
 8000dac:	58021000 	.word	0x58021000
 8000db0:	4619      	mov	r1, r3
 8000db2:	4881      	ldr	r0, [pc, #516]	; (8000fb8 <MX_GPIO_Init+0x53c>)
 8000db4:	f007 fb82 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000db8:	2304      	movs	r3, #4
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000dc8:	230c      	movs	r3, #12
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	487a      	ldr	r0, [pc, #488]	; (8000fbc <MX_GPIO_Init+0x540>)
 8000dd4:	f007 fb72 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4874      	ldr	r0, [pc, #464]	; (8000fc0 <MX_GPIO_Init+0x544>)
 8000df0:	f007 fb64 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e06:	2305      	movs	r3, #5
 8000e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	486c      	ldr	r0, [pc, #432]	; (8000fc4 <MX_GPIO_Init+0x548>)
 8000e12:	f007 fb53 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000e16:	f640 0306 	movw	r3, #2054	; 0x806
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4865      	ldr	r0, [pc, #404]	; (8000fc4 <MX_GPIO_Init+0x548>)
 8000e30:	f007 fb44 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	485f      	ldr	r0, [pc, #380]	; (8000fc8 <MX_GPIO_Init+0x54c>)
 8000e4c:	f007 fb36 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000e50:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e62:	230c      	movs	r3, #12
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4857      	ldr	r0, [pc, #348]	; (8000fcc <MX_GPIO_Init+0x550>)
 8000e6e:	f007 fb25 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	484d      	ldr	r0, [pc, #308]	; (8000fc4 <MX_GPIO_Init+0x548>)
 8000e90:	f007 fb14 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4848      	ldr	r0, [pc, #288]	; (8000fd0 <MX_GPIO_Init+0x554>)
 8000eb0:	f007 fb04 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_CLK_Pin LCD_VSYNC_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000eb4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ec6:	230e      	movs	r3, #14
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	483b      	ldr	r0, [pc, #236]	; (8000fc0 <MX_GPIO_Init+0x544>)
 8000ed2:	f007 faf3 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	; (8000fc8 <MX_GPIO_Init+0x54c>)
 8000ef2:	f007 fae3 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO4_Pin OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000ef6:	2322      	movs	r3, #34	; 0x22
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000f06:	230a      	movs	r3, #10
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482d      	ldr	r0, [pc, #180]	; (8000fc8 <MX_GPIO_Init+0x54c>)
 8000f12:	f007 fad3 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f16:	2304      	movs	r3, #4
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	482a      	ldr	r0, [pc, #168]	; (8000fd4 <MX_GPIO_Init+0x558>)
 8000f2c:	f007 fac6 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000f30:	23e0      	movs	r3, #224	; 0xe0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f40:	230c      	movs	r3, #12
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <MX_GPIO_Init+0x558>)
 8000f4c:	f007 fab6 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO5_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000f50:	2308      	movs	r3, #8
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f60:	2309      	movs	r3, #9
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_GPIO_Init+0x558>)
 8000f6c:	f007 faa6 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_WS_Pin I2S6_MCK_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000f70:	2309      	movs	r3, #9
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000f80:	2305      	movs	r3, #5
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <MX_GPIO_Init+0x548>)
 8000f8c:	f007 fa96 	bl	80084bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000f90:	2304      	movs	r3, #4
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000fa0:	2309      	movs	r3, #9
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <MX_GPIO_Init+0x55c>)
 8000fac:	f007 fa86 	bl	80084bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3740      	adds	r7, #64	; 0x40
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58022400 	.word	0x58022400
 8000fbc:	58020c00 	.word	0x58020c00
 8000fc0:	58022000 	.word	0x58022000
 8000fc4:	58020000 	.word	0x58020000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58021400 	.word	0x58021400
 8000fd0:	58021800 	.word	0x58021800
 8000fd4:	58021c00 	.word	0x58021c00
 8000fd8:	58020400 	.word	0x58020400

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d103      	bne.n	8001000 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	e02c      	b.n	800105a <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	891a      	ldrh	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <OV5640_RegisterBusIO+0x7c>)
 8001034:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <OV5640_RegisterBusIO+0x80>)
 800103a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4798      	blx	r3
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	e002      	b.n	800105a <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001058:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800286b 	.word	0x0800286b
 8001068:	0800289d 	.word	0x0800289d

0800106c <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001082:	2b00      	cmp	r3, #0
 8001084:	d165      	bne.n	8001152 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d80e      	bhi.n	80010aa <OV5640_Init+0x3e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00f      	beq.n	80010b2 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d00c      	beq.n	80010b2 <OV5640_Init+0x46>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d009      	beq.n	80010b2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d006      	beq.n	80010b2 <OV5640_Init+0x46>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d003      	beq.n	80010b2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	e04f      	b.n	8001152 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e01f      	b.n	80010f8 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010be:	d018      	beq.n	80010f2 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 80010c0:	4a26      	ldr	r2, [pc, #152]	; (800115c <OV5640_Init+0xf0>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	885b      	ldrh	r3, [r3, #2]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f103 0018 	add.w	r0, r3, #24
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <OV5640_Init+0xf0>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80010dc:	f107 0217 	add.w	r2, r7, #23
 80010e0:	2301      	movs	r3, #1
 80010e2:	f001 fc0b 	bl	80028fc <ov5640_write_reg>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f0:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2bfd      	cmp	r3, #253	; 0xfd
 80010fc:	d9dc      	bls.n	80010b8 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d126      	bne.n	8001152 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f9e0 	bl	80014cc <OV5640_SetResolution>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	e01b      	b.n	8001152 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f833 	bl	8001188 <OV5640_SetPixelFormat>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e010      	b.n	8001152 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001130:	2300      	movs	r3, #0
 8001132:	2201      	movs	r2, #1
 8001134:	2101      	movs	r1, #1
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fb64 	bl	8001804 <OV5640_SetPolarities>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	e003      	b.n	8001152 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001152:	69bb      	ldr	r3, [r7, #24]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	080103d0 	.word	0x080103d0

08001160 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800116e:	2b01      	cmp	r3, #1
 8001170:	d103      	bne.n	800117a <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00f      	beq.n	80011bc <OV5640_SetPixelFormat+0x34>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d00c      	beq.n	80011bc <OV5640_SetPixelFormat+0x34>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d009      	beq.n	80011bc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d006      	beq.n	80011bc <OV5640_SetPixelFormat+0x34>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d003      	beq.n	80011bc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e16a      	b.n	8001492 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3b01      	subs	r3, #1
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	f200 80c3 	bhi.w	800134c <OV5640_SetPixelFormat+0x1c4>
 80011c6:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <OV5640_SetPixelFormat+0x44>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	08001245 	.word	0x08001245
 80011d0:	080011ed 	.word	0x080011ed
 80011d4:	0800134d 	.word	0x0800134d
 80011d8:	0800134d 	.word	0x0800134d
 80011dc:	0800134d 	.word	0x0800134d
 80011e0:	0800134d 	.word	0x0800134d
 80011e4:	0800129d 	.word	0x0800129d
 80011e8:	080012f5 	.word	0x080012f5
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	e024      	b.n	800123c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f8:	d01d      	beq.n	8001236 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80011fa:	4aa8      	ldr	r2, [pc, #672]	; (800149c <OV5640_SetPixelFormat+0x314>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	885b      	ldrh	r3, [r3, #2]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f103 0018 	add.w	r0, r3, #24
 800120e:	4aa3      	ldr	r2, [pc, #652]	; (800149c <OV5640_SetPixelFormat+0x314>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001216:	f107 020f 	add.w	r2, r7, #15
 800121a:	2301      	movs	r3, #1
 800121c:	f001 fb6e 	bl	80028fc <ov5640_write_reg>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e003      	b.n	8001236 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800122e:	2101      	movs	r1, #1
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f001 fb00 	bl	8002836 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	3301      	adds	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d9d7      	bls.n	80011f2 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001242:	e0af      	b.n	80013a4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	e024      	b.n	8001294 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001250:	d01d      	beq.n	800128e <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001252:	4a93      	ldr	r2, [pc, #588]	; (80014a0 <OV5640_SetPixelFormat+0x318>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	885b      	ldrh	r3, [r3, #2]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f103 0018 	add.w	r0, r3, #24
 8001266:	4a8e      	ldr	r2, [pc, #568]	; (80014a0 <OV5640_SetPixelFormat+0x318>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800126e:	f107 020f 	add.w	r2, r7, #15
 8001272:	2301      	movs	r3, #1
 8001274:	f001 fb42 	bl	80028fc <ov5640_write_reg>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e003      	b.n	800128e <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001286:	2101      	movs	r1, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 fad4 	bl	8002836 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	3301      	adds	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d9d7      	bls.n	800124a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800129a:	e083      	b.n	80013a4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e024      	b.n	80012ec <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a8:	d01d      	beq.n	80012e6 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80012aa:	4a7e      	ldr	r2, [pc, #504]	; (80014a4 <OV5640_SetPixelFormat+0x31c>)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	885b      	ldrh	r3, [r3, #2]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f103 0018 	add.w	r0, r3, #24
 80012be:	4a79      	ldr	r2, [pc, #484]	; (80014a4 <OV5640_SetPixelFormat+0x31c>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80012c6:	f107 020f 	add.w	r2, r7, #15
 80012ca:	2301      	movs	r3, #1
 80012cc:	f001 fb16 	bl	80028fc <ov5640_write_reg>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e003      	b.n	80012e6 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80012de:	2101      	movs	r1, #1
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f001 faa8 	bl	8002836 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	3301      	adds	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d9d7      	bls.n	80012a2 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80012f2:	e057      	b.n	80013a4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	e024      	b.n	8001344 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001300:	d01d      	beq.n	800133e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001302:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <OV5640_SetPixelFormat+0x320>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	885b      	ldrh	r3, [r3, #2]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f103 0018 	add.w	r0, r3, #24
 8001316:	4a64      	ldr	r2, [pc, #400]	; (80014a8 <OV5640_SetPixelFormat+0x320>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800131e:	f107 020f 	add.w	r2, r7, #15
 8001322:	2301      	movs	r3, #1
 8001324:	f001 faea 	bl	80028fc <ov5640_write_reg>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e003      	b.n	800133e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001336:	2101      	movs	r1, #1
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 fa7c 	bl	8002836 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	3301      	adds	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d9d7      	bls.n	80012fa <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800134a:	e02b      	b.n	80013a4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	e024      	b.n	800139c <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001358:	d01d      	beq.n	8001396 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800135a:	4a54      	ldr	r2, [pc, #336]	; (80014ac <OV5640_SetPixelFormat+0x324>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	885b      	ldrh	r3, [r3, #2]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f103 0018 	add.w	r0, r3, #24
 800136e:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <OV5640_SetPixelFormat+0x324>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001376:	f107 020f 	add.w	r2, r7, #15
 800137a:	2301      	movs	r3, #1
 800137c:	f001 fabe 	bl	80028fc <ov5640_write_reg>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e003      	b.n	8001396 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800138e:	2101      	movs	r1, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 fa50 	bl	8002836 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	3301      	adds	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d9d7      	bls.n	8001352 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80013a2:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d173      	bne.n	8001492 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f103 0018 	add.w	r0, r3, #24
 80013b0:	f107 020f 	add.w	r2, r7, #15
 80013b4:	2301      	movs	r3, #1
 80013b6:	f643 0121 	movw	r1, #14369	; 0x3821
 80013ba:	f001 fa88 	bl	80028ce <ov5640_read_reg>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e062      	b.n	8001492 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f103 0018 	add.w	r0, r3, #24
 80013dc:	f107 020f 	add.w	r2, r7, #15
 80013e0:	2301      	movs	r3, #1
 80013e2:	f643 0121 	movw	r1, #14369	; 0x3821
 80013e6:	f001 fa89 	bl	80028fc <ov5640_write_reg>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e04c      	b.n	8001492 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f103 0018 	add.w	r0, r3, #24
 80013fe:	f107 020f 	add.w	r2, r7, #15
 8001402:	2301      	movs	r3, #1
 8001404:	f243 0102 	movw	r1, #12290	; 0x3002
 8001408:	f001 fa61 	bl	80028ce <ov5640_read_reg>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e03b      	b.n	8001492 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f023 031c 	bic.w	r3, r3, #28
 8001420:	b2db      	uxtb	r3, r3
 8001422:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f103 0018 	add.w	r0, r3, #24
 800142a:	f107 020f 	add.w	r2, r7, #15
 800142e:	2301      	movs	r3, #1
 8001430:	f243 0102 	movw	r1, #12290	; 0x3002
 8001434:	f001 fa62 	bl	80028fc <ov5640_write_reg>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	e025      	b.n	8001492 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f103 0018 	add.w	r0, r3, #24
 800144c:	f107 020f 	add.w	r2, r7, #15
 8001450:	2301      	movs	r3, #1
 8001452:	f243 0106 	movw	r1, #12294	; 0x3006
 8001456:	f001 fa3a 	bl	80028ce <ov5640_read_reg>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e014      	b.n	8001492 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800146e:	b2db      	uxtb	r3, r3
 8001470:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f103 0018 	add.w	r0, r3, #24
 8001478:	f107 020f 	add.w	r2, r7, #15
 800147c:	2301      	movs	r3, #1
 800147e:	f243 0106 	movw	r1, #12294	; 0x3006
 8001482:	f001 fa3b 	bl	80028fc <ov5640_write_reg>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001490:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001492:	697b      	ldr	r3, [r7, #20]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	080107c8 	.word	0x080107c8
 80014a0:	080107d0 	.word	0x080107d0
 80014a4:	080107d8 	.word	0x080107d8
 80014a8:	080107e0 	.word	0x080107e0
 80014ac:	080107e8 	.word	0x080107e8

080014b0 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d903      	bls.n	80014e8 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e0d8      	b.n	800169a <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	f200 80d1 	bhi.w	8001692 <OV5640_SetResolution+0x1c6>
 80014f0:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <OV5640_SetResolution+0x2c>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	0800150d 	.word	0x0800150d
 80014fc:	0800155b 	.word	0x0800155b
 8001500:	080015a9 	.word	0x080015a9
 8001504:	080015f7 	.word	0x080015f7
 8001508:	08001645 	.word	0x08001645
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e01f      	b.n	8001552 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001518:	d018      	beq.n	800154c <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800151a:	4a62      	ldr	r2, [pc, #392]	; (80016a4 <OV5640_SetResolution+0x1d8>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	885b      	ldrh	r3, [r3, #2]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f103 0018 	add.w	r0, r3, #24
 800152e:	4a5d      	ldr	r2, [pc, #372]	; (80016a4 <OV5640_SetResolution+0x1d8>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001536:	f107 020f 	add.w	r2, r7, #15
 800153a:	2301      	movs	r3, #1
 800153c:	f001 f9de 	bl	80028fc <ov5640_write_reg>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	3301      	adds	r3, #1
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d9dc      	bls.n	8001512 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001558:	e09f      	b.n	800169a <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	e01f      	b.n	80015a0 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001566:	d018      	beq.n	800159a <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001568:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <OV5640_SetResolution+0x1dc>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	885b      	ldrh	r3, [r3, #2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f103 0018 	add.w	r0, r3, #24
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <OV5640_SetResolution+0x1dc>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001584:	f107 020f 	add.w	r2, r7, #15
 8001588:	2301      	movs	r3, #1
 800158a:	f001 f9b7 	bl	80028fc <ov5640_write_reg>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001598:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	3301      	adds	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d9dc      	bls.n	8001560 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80015a6:	e078      	b.n	800169a <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e01f      	b.n	80015ee <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d018      	beq.n	80015e8 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80015b6:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <OV5640_SetResolution+0x1e0>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	885b      	ldrh	r3, [r3, #2]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f103 0018 	add.w	r0, r3, #24
 80015ca:	4a38      	ldr	r2, [pc, #224]	; (80016ac <OV5640_SetResolution+0x1e0>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80015d2:	f107 020f 	add.w	r2, r7, #15
 80015d6:	2301      	movs	r3, #1
 80015d8:	f001 f990 	bl	80028fc <ov5640_write_reg>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	3301      	adds	r3, #1
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d9dc      	bls.n	80015ae <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80015f4:	e051      	b.n	800169a <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	e01f      	b.n	800163c <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001602:	d018      	beq.n	8001636 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <OV5640_SetResolution+0x1e4>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	885b      	ldrh	r3, [r3, #2]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f103 0018 	add.w	r0, r3, #24
 8001618:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <OV5640_SetResolution+0x1e4>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001620:	f107 020f 	add.w	r2, r7, #15
 8001624:	2301      	movs	r3, #1
 8001626:	f001 f969 	bl	80028fc <ov5640_write_reg>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001634:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	3301      	adds	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d9dc      	bls.n	80015fc <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001642:	e02a      	b.n	800169a <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	e01f      	b.n	800168a <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001650:	d018      	beq.n	8001684 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <OV5640_SetResolution+0x1e8>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	885b      	ldrh	r3, [r3, #2]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f103 0018 	add.w	r0, r3, #24
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <OV5640_SetResolution+0x1e8>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800166e:	f107 020f 	add.w	r2, r7, #15
 8001672:	2301      	movs	r3, #1
 8001674:	f001 f942 	bl	80028fc <ov5640_write_reg>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001682:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	3301      	adds	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d9dc      	bls.n	800164a <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001690:	e003      	b.n	800169a <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001696:	617b      	str	r3, [r7, #20]
        break;
 8001698:	bf00      	nop
    }
  }

  return ret;
 800169a:	697b      	ldr	r3, [r7, #20]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	080107f0 	.word	0x080107f0
 80016a8:	08010800 	.word	0x08010800
 80016ac:	08010810 	.word	0x08010810
 80016b0:	08010820 	.word	0x08010820
 80016b4:	08010830 	.word	0x08010830

080016b8 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f103 0018 	add.w	r0, r3, #24
 80016c8:	f107 020f 	add.w	r2, r7, #15
 80016cc:	2301      	movs	r3, #1
 80016ce:	f643 0108 	movw	r1, #14344	; 0x3808
 80016d2:	f001 f8fc 	bl	80028ce <ov5640_read_reg>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e08a      	b.n	80017fa <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f103 0018 	add.w	r0, r3, #24
 80016f2:	f107 020f 	add.w	r2, r7, #15
 80016f6:	2301      	movs	r3, #1
 80016f8:	f643 0109 	movw	r1, #14345	; 0x3809
 80016fc:	f001 f8e7 	bl	80028ce <ov5640_read_reg>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e075      	b.n	80017fa <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	b29a      	uxth	r2, r3
 8001712:	8a7b      	ldrh	r3, [r7, #18]
 8001714:	4313      	orrs	r3, r2
 8001716:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0018 	add.w	r0, r3, #24
 800171e:	f107 020f 	add.w	r2, r7, #15
 8001722:	2301      	movs	r3, #1
 8001724:	f643 010a 	movw	r1, #14346	; 0x380a
 8001728:	f001 f8d1 	bl	80028ce <ov5640_read_reg>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e05f      	b.n	80017fa <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	b29b      	uxth	r3, r3
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f103 0018 	add.w	r0, r3, #24
 8001748:	f107 020f 	add.w	r2, r7, #15
 800174c:	2301      	movs	r3, #1
 800174e:	f643 010b 	movw	r1, #14347	; 0x380b
 8001752:	f001 f8bc 	bl	80028ce <ov5640_read_reg>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e04a      	b.n	80017fa <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	b29a      	uxth	r2, r3
 8001768:	8a3b      	ldrh	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 800176e:	8a7b      	ldrh	r3, [r7, #18]
 8001770:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001774:	d109      	bne.n	800178a <OV5640_GetResolution+0xd2>
 8001776:	8a3b      	ldrh	r3, [r7, #16]
 8001778:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800177c:	d105      	bne.n	800178a <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2204      	movs	r2, #4
 8001782:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e037      	b.n	80017fa <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 800178a:	8a7b      	ldrh	r3, [r7, #18]
 800178c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001790:	d109      	bne.n	80017a6 <OV5640_GetResolution+0xee>
 8001792:	8a3b      	ldrh	r3, [r7, #16]
 8001794:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001798:	d105      	bne.n	80017a6 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2203      	movs	r2, #3
 800179e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e029      	b.n	80017fa <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80017ac:	d109      	bne.n	80017c2 <OV5640_GetResolution+0x10a>
 80017ae:	8a3b      	ldrh	r3, [r7, #16]
 80017b0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80017b4:	d105      	bne.n	80017c2 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e01b      	b.n	80017fa <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 80017c2:	8a7b      	ldrh	r3, [r7, #18]
 80017c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017c8:	d108      	bne.n	80017dc <OV5640_GetResolution+0x124>
 80017ca:	8a3b      	ldrh	r3, [r7, #16]
 80017cc:	2bf0      	cmp	r3, #240	; 0xf0
 80017ce:	d105      	bne.n	80017dc <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e00e      	b.n	80017fa <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80017dc:	8a7b      	ldrh	r3, [r7, #18]
 80017de:	2ba0      	cmp	r3, #160	; 0xa0
 80017e0:	d108      	bne.n	80017f4 <OV5640_GetResolution+0x13c>
 80017e2:	8a3b      	ldrh	r3, [r7, #16]
 80017e4:	2b78      	cmp	r3, #120	; 0x78
 80017e6:	d105      	bne.n	80017f4 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e002      	b.n	80017fa <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80017fa:	697b      	ldr	r3, [r7, #20]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d011      	beq.n	8001840 <OV5640_SetPolarities+0x3c>
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <OV5640_SetPolarities+0x24>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10b      	bne.n	8001840 <OV5640_SetPolarities+0x3c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <OV5640_SetPolarities+0x3c>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d006      	beq.n	8001848 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e01e      	b.n	8001886 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	b2da      	uxtb	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b2da      	uxtb	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b2db      	uxtb	r3, r3
 8001864:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f103 0018 	add.w	r0, r3, #24
 800186c:	f107 0213 	add.w	r2, r7, #19
 8001870:	2301      	movs	r3, #1
 8001872:	f244 7140 	movw	r1, #18240	; 0x4740
 8001876:	f001 f841 	bl	80028fc <ov5640_write_reg>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001884:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001886:	697b      	ldr	r3, [r7, #20]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f103 0018 	add.w	r0, r3, #24
 80018aa:	f107 020b 	add.w	r2, r7, #11
 80018ae:	2301      	movs	r3, #1
 80018b0:	f243 0108 	movw	r1, #12296	; 0x3008
 80018b4:	f001 f822 	bl	80028fc <ov5640_write_reg>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e032      	b.n	800192c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 80018c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 ffb3 	bl	8002836 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0018 	add.w	r0, r3, #24
 80018d6:	f107 020b 	add.w	r2, r7, #11
 80018da:	2301      	movs	r3, #1
 80018dc:	f243 010a 	movw	r1, #12298	; 0x300a
 80018e0:	f000 fff5 	bl	80028ce <ov5640_read_reg>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e01c      	b.n	800192c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	021a      	lsls	r2, r3, #8
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f103 0018 	add.w	r0, r3, #24
 8001900:	f107 020b 	add.w	r2, r7, #11
 8001904:	2301      	movs	r3, #1
 8001906:	f243 010b 	movw	r1, #12299	; 0x300b
 800190a:	f000 ffe0 	bl	80028ce <ov5640_read_reg>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e007      	b.n	800192c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	7afa      	ldrb	r2, [r7, #11]
 8001922:	431a      	orrs	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 800192c:	68fb      	ldr	r3, [r7, #12]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e01f      	b.n	800198e <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f103 0018 	add.w	r0, r3, #24
 80019b0:	f107 020f 	add.w	r2, r7, #15
 80019b4:	2301      	movs	r3, #1
 80019b6:	f243 4106 	movw	r1, #13318	; 0x3406
 80019ba:	f000 ff9f 	bl	80028fc <ov5640_write_reg>
 80019be:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 80019c6:	2346      	movs	r3, #70	; 0x46
 80019c8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f103 0018 	add.w	r0, r3, #24
 80019d0:	f107 020f 	add.w	r2, r7, #15
 80019d4:	2301      	movs	r3, #1
 80019d6:	f245 1190 	movw	r1, #20880	; 0x5190
 80019da:	f000 ff8f 	bl	80028fc <ov5640_write_reg>
 80019de:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 80019e6:	23f8      	movs	r3, #248	; 0xf8
 80019e8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f103 0018 	add.w	r0, r3, #24
 80019f0:	f107 020f 	add.w	r2, r7, #15
 80019f4:	2301      	movs	r3, #1
 80019f6:	f245 1191 	movw	r1, #20881	; 0x5191
 80019fa:	f000 ff7f 	bl	80028fc <ov5640_write_reg>
 80019fe:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8001a06:	2304      	movs	r3, #4
 8001a08:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f103 0018 	add.w	r0, r3, #24
 8001a10:	f107 020f 	add.w	r2, r7, #15
 8001a14:	2301      	movs	r3, #1
 8001a16:	f245 1192 	movw	r1, #20882	; 0x5192
 8001a1a:	f000 ff6f 	bl	80028fc <ov5640_write_reg>
 8001a1e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 80db 	bne.w	8001bde <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	2b07      	cmp	r3, #7
 8001a2e:	f200 80af 	bhi.w	8001b90 <OV5640_SetLightMode+0x1f4>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <OV5640_SetLightMode+0x9c>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a59 	.word	0x08001a59
 8001a3c:	08001aa7 	.word	0x08001aa7
 8001a40:	08001b91 	.word	0x08001b91
 8001a44:	08001b43 	.word	0x08001b43
 8001a48:	08001b91 	.word	0x08001b91
 8001a4c:	08001b91 	.word	0x08001b91
 8001a50:	08001b91 	.word	0x08001b91
 8001a54:	08001af5 	.word	0x08001af5
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e01f      	b.n	8001a9e <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a64:	d018      	beq.n	8001a98 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001a66:	4a61      	ldr	r2, [pc, #388]	; (8001bec <OV5640_SetLightMode+0x250>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	885b      	ldrh	r3, [r3, #2]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f103 0018 	add.w	r0, r3, #24
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <OV5640_SetLightMode+0x250>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a82:	f107 020f 	add.w	r2, r7, #15
 8001a86:	2301      	movs	r3, #1
 8001a88:	f000 ff38 	bl	80028fc <ov5640_write_reg>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a96:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d9dc      	bls.n	8001a5e <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8001aa4:	e09c      	b.n	8001be0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e01f      	b.n	8001aec <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab2:	d018      	beq.n	8001ae6 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8001ab4:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <OV5640_SetLightMode+0x254>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	885b      	ldrh	r3, [r3, #2]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f103 0018 	add.w	r0, r3, #24
 8001ac8:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <OV5640_SetLightMode+0x254>)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ad0:	f107 020f 	add.w	r2, r7, #15
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f000 ff11 	bl	80028fc <ov5640_write_reg>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d9dc      	bls.n	8001aac <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8001af2:	e075      	b.n	8001be0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	e01f      	b.n	8001b3a <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b00:	d018      	beq.n	8001b34 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8001b02:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <OV5640_SetLightMode+0x258>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	885b      	ldrh	r3, [r3, #2]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f103 0018 	add.w	r0, r3, #24
 8001b16:	4a37      	ldr	r2, [pc, #220]	; (8001bf4 <OV5640_SetLightMode+0x258>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b1e:	f107 020f 	add.w	r2, r7, #15
 8001b22:	2301      	movs	r3, #1
 8001b24:	f000 feea 	bl	80028fc <ov5640_write_reg>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b32:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	3301      	adds	r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d9dc      	bls.n	8001afa <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8001b40:	e04e      	b.n	8001be0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e01f      	b.n	8001b88 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b4e:	d018      	beq.n	8001b82 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8001b50:	4a29      	ldr	r2, [pc, #164]	; (8001bf8 <OV5640_SetLightMode+0x25c>)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	885b      	ldrh	r3, [r3, #2]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f103 0018 	add.w	r0, r3, #24
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <OV5640_SetLightMode+0x25c>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b6c:	f107 020f 	add.w	r2, r7, #15
 8001b70:	2301      	movs	r3, #1
 8001b72:	f000 fec3 	bl	80028fc <ov5640_write_reg>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b80:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	3301      	adds	r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d9dc      	bls.n	8001b48 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8001b8e:	e027      	b.n	8001be0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	e01f      	b.n	8001bd6 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9c:	d018      	beq.n	8001bd0 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <OV5640_SetLightMode+0x260>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	885b      	ldrh	r3, [r3, #2]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f103 0018 	add.w	r0, r3, #24
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <OV5640_SetLightMode+0x260>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001bba:	f107 020f 	add.w	r2, r7, #15
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f000 fe9c 	bl	80028fc <ov5640_write_reg>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bce:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d9dc      	bls.n	8001b96 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8001bdc:	e000      	b.n	8001be0 <OV5640_SetLightMode+0x244>
    }
  }
 8001bde:	bf00      	nop
  return ret;
 8001be0:	697b      	ldr	r3, [r7, #20]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	08010840 	.word	0x08010840
 8001bf0:	0801085c 	.word	0x0801085c
 8001bf4:	08010878 	.word	0x08010878
 8001bf8:	08010894 	.word	0x08010894
 8001bfc:	080108b0 	.word	0x080108b0

08001c00 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	2b1f      	cmp	r3, #31
 8001c10:	f200 81c0 	bhi.w	8001f94 <OV5640_SetColorEffect+0x394>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <OV5640_SetColorEffect+0x1c>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c9d 	.word	0x08001c9d
 8001c20:	08001d27 	.word	0x08001d27
 8001c24:	08001f95 	.word	0x08001f95
 8001c28:	08001db1 	.word	0x08001db1
 8001c2c:	08001f95 	.word	0x08001f95
 8001c30:	08001f95 	.word	0x08001f95
 8001c34:	08001f95 	.word	0x08001f95
 8001c38:	08001e3b 	.word	0x08001e3b
 8001c3c:	08001f95 	.word	0x08001f95
 8001c40:	08001f95 	.word	0x08001f95
 8001c44:	08001f95 	.word	0x08001f95
 8001c48:	08001f95 	.word	0x08001f95
 8001c4c:	08001f95 	.word	0x08001f95
 8001c50:	08001f95 	.word	0x08001f95
 8001c54:	08001f95 	.word	0x08001f95
 8001c58:	08001ec5 	.word	0x08001ec5
 8001c5c:	08001f95 	.word	0x08001f95
 8001c60:	08001f95 	.word	0x08001f95
 8001c64:	08001f95 	.word	0x08001f95
 8001c68:	08001f95 	.word	0x08001f95
 8001c6c:	08001f95 	.word	0x08001f95
 8001c70:	08001f95 	.word	0x08001f95
 8001c74:	08001f95 	.word	0x08001f95
 8001c78:	08001f95 	.word	0x08001f95
 8001c7c:	08001f95 	.word	0x08001f95
 8001c80:	08001f95 	.word	0x08001f95
 8001c84:	08001f95 	.word	0x08001f95
 8001c88:	08001f95 	.word	0x08001f95
 8001c8c:	08001f95 	.word	0x08001f95
 8001c90:	08001f95 	.word	0x08001f95
 8001c94:	08001f95 	.word	0x08001f95
 8001c98:	08001f4d 	.word	0x08001f4d
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8001c9c:	23ff      	movs	r3, #255	; 0xff
 8001c9e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f103 0018 	add.w	r0, r3, #24
 8001ca6:	f107 020b 	add.w	r2, r7, #11
 8001caa:	2301      	movs	r3, #1
 8001cac:	f245 0101 	movw	r1, #20481	; 0x5001
 8001cb0:	f000 fe24 	bl	80028fc <ov5640_write_reg>
 8001cb4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10c      	bne.n	8001cd6 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8001cbc:	2318      	movs	r3, #24
 8001cbe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f103 0018 	add.w	r0, r3, #24
 8001cc6:	f107 020b 	add.w	r2, r7, #11
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001cd0:	f000 fe14 	bl	80028fc <ov5640_write_reg>
 8001cd4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10c      	bne.n	8001cf6 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8001cdc:	23a0      	movs	r3, #160	; 0xa0
 8001cde:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f103 0018 	add.w	r0, r3, #24
 8001ce6:	f107 020b 	add.w	r2, r7, #11
 8001cea:	2301      	movs	r3, #1
 8001cec:	f245 5183 	movw	r1, #21891	; 0x5583
 8001cf0:	f000 fe04 	bl	80028fc <ov5640_write_reg>
 8001cf4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10c      	bne.n	8001d16 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8001cfc:	2340      	movs	r3, #64	; 0x40
 8001cfe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f103 0018 	add.w	r0, r3, #24
 8001d06:	f107 020b 	add.w	r2, r7, #11
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f245 5184 	movw	r1, #21892	; 0x5584
 8001d10:	f000 fdf4 	bl	80028fc <ov5640_write_reg>
 8001d14:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 815f 	beq.w	8001fdc <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d22:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001d24:	e15a      	b.n	8001fdc <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8001d26:	23ff      	movs	r3, #255	; 0xff
 8001d28:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f103 0018 	add.w	r0, r3, #24
 8001d30:	f107 020b 	add.w	r2, r7, #11
 8001d34:	2301      	movs	r3, #1
 8001d36:	f245 0101 	movw	r1, #20481	; 0x5001
 8001d3a:	f000 fddf 	bl	80028fc <ov5640_write_reg>
 8001d3e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8001d46:	2318      	movs	r3, #24
 8001d48:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f103 0018 	add.w	r0, r3, #24
 8001d50:	f107 020b 	add.w	r2, r7, #11
 8001d54:	2301      	movs	r3, #1
 8001d56:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001d5a:	f000 fdcf 	bl	80028fc <ov5640_write_reg>
 8001d5e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f103 0018 	add.w	r0, r3, #24
 8001d70:	f107 020b 	add.w	r2, r7, #11
 8001d74:	2301      	movs	r3, #1
 8001d76:	f245 5183 	movw	r1, #21891	; 0x5583
 8001d7a:	f000 fdbf 	bl	80028fc <ov5640_write_reg>
 8001d7e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8001d86:	23c0      	movs	r3, #192	; 0xc0
 8001d88:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f103 0018 	add.w	r0, r3, #24
 8001d90:	f107 020b 	add.w	r2, r7, #11
 8001d94:	2301      	movs	r3, #1
 8001d96:	f245 5184 	movw	r1, #21892	; 0x5584
 8001d9a:	f000 fdaf 	bl	80028fc <ov5640_write_reg>
 8001d9e:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 811c 	beq.w	8001fe0 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dac:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001dae:	e117      	b.n	8001fe0 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8001db0:	23ff      	movs	r3, #255	; 0xff
 8001db2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f103 0018 	add.w	r0, r3, #24
 8001dba:	f107 020b 	add.w	r2, r7, #11
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f245 0101 	movw	r1, #20481	; 0x5001
 8001dc4:	f000 fd9a 	bl	80028fc <ov5640_write_reg>
 8001dc8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10c      	bne.n	8001dea <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8001dd0:	2318      	movs	r3, #24
 8001dd2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f103 0018 	add.w	r0, r3, #24
 8001dda:	f107 020b 	add.w	r2, r7, #11
 8001dde:	2301      	movs	r3, #1
 8001de0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001de4:	f000 fd8a 	bl	80028fc <ov5640_write_reg>
 8001de8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10c      	bne.n	8001e0a <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f103 0018 	add.w	r0, r3, #24
 8001dfa:	f107 020b 	add.w	r2, r7, #11
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f245 5183 	movw	r1, #21891	; 0x5583
 8001e04:	f000 fd7a 	bl	80028fc <ov5640_write_reg>
 8001e08:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8001e10:	2360      	movs	r3, #96	; 0x60
 8001e12:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 0018 	add.w	r0, r3, #24
 8001e1a:	f107 020b 	add.w	r2, r7, #11
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f245 5184 	movw	r1, #21892	; 0x5584
 8001e24:	f000 fd6a 	bl	80028fc <ov5640_write_reg>
 8001e28:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80d9 	beq.w	8001fe4 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e36:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001e38:	e0d4      	b.n	8001fe4 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8001e3a:	23ff      	movs	r3, #255	; 0xff
 8001e3c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f103 0018 	add.w	r0, r3, #24
 8001e44:	f107 020b 	add.w	r2, r7, #11
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f245 0101 	movw	r1, #20481	; 0x5001
 8001e4e:	f000 fd55 	bl	80028fc <ov5640_write_reg>
 8001e52:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8001e5a:	2318      	movs	r3, #24
 8001e5c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f103 0018 	add.w	r0, r3, #24
 8001e64:	f107 020b 	add.w	r2, r7, #11
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001e6e:	f000 fd45 	bl	80028fc <ov5640_write_reg>
 8001e72:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f103 0018 	add.w	r0, r3, #24
 8001e84:	f107 020b 	add.w	r2, r7, #11
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f245 5183 	movw	r1, #21891	; 0x5583
 8001e8e:	f000 fd35 	bl	80028fc <ov5640_write_reg>
 8001e92:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f103 0018 	add.w	r0, r3, #24
 8001ea4:	f107 020b 	add.w	r2, r7, #11
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f245 5184 	movw	r1, #21892	; 0x5584
 8001eae:	f000 fd25 	bl	80028fc <ov5640_write_reg>
 8001eb2:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8096 	beq.w	8001fe8 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec0:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001ec2:	e091      	b.n	8001fe8 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8001ec4:	23ff      	movs	r3, #255	; 0xff
 8001ec6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f103 0018 	add.w	r0, r3, #24
 8001ece:	f107 020b 	add.w	r2, r7, #11
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f245 0101 	movw	r1, #20481	; 0x5001
 8001ed8:	f000 fd10 	bl	80028fc <ov5640_write_reg>
 8001edc:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8001ee4:	2318      	movs	r3, #24
 8001ee6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f103 0018 	add.w	r0, r3, #24
 8001eee:	f107 020b 	add.w	r2, r7, #11
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001ef8:	f000 fd00 	bl	80028fc <ov5640_write_reg>
 8001efc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10c      	bne.n	8001f1e <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8001f04:	2340      	movs	r3, #64	; 0x40
 8001f06:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0018 	add.w	r0, r3, #24
 8001f0e:	f107 020b 	add.w	r2, r7, #11
 8001f12:	2301      	movs	r3, #1
 8001f14:	f245 5183 	movw	r1, #21891	; 0x5583
 8001f18:	f000 fcf0 	bl	80028fc <ov5640_write_reg>
 8001f1c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10c      	bne.n	8001f3e <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8001f24:	23a0      	movs	r3, #160	; 0xa0
 8001f26:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f103 0018 	add.w	r0, r3, #24
 8001f2e:	f107 020b 	add.w	r2, r7, #11
 8001f32:	2301      	movs	r3, #1
 8001f34:	f245 5184 	movw	r1, #21892	; 0x5584
 8001f38:	f000 fce0 	bl	80028fc <ov5640_write_reg>
 8001f3c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d053      	beq.n	8001fec <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f48:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001f4a:	e04f      	b.n	8001fec <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8001f4c:	23ff      	movs	r3, #255	; 0xff
 8001f4e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f103 0018 	add.w	r0, r3, #24
 8001f56:	f107 020b 	add.w	r2, r7, #11
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f245 0101 	movw	r1, #20481	; 0x5001
 8001f60:	f000 fccc 	bl	80028fc <ov5640_write_reg>
 8001f64:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10c      	bne.n	8001f86 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f103 0018 	add.w	r0, r3, #24
 8001f76:	f107 020b 	add.w	r2, r7, #11
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001f80:	f000 fcbc 	bl	80028fc <ov5640_write_reg>
 8001f84:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d031      	beq.n	8001ff0 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f90:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001f92:	e02d      	b.n	8001ff0 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8001f94:	237f      	movs	r3, #127	; 0x7f
 8001f96:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f103 0018 	add.w	r0, r3, #24
 8001f9e:	f107 020b 	add.w	r2, r7, #11
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f245 0101 	movw	r1, #20481	; 0x5001
 8001fa8:	f000 fca8 	bl	80028fc <ov5640_write_reg>
 8001fac:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f103 0018 	add.w	r0, r3, #24
 8001fbe:	f107 020b 	add.w	r2, r7, #11
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001fc8:	f000 fc98 	bl	80028fc <ov5640_write_reg>
 8001fcc:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00f      	beq.n	8001ff4 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fd8:	60fb      	str	r3, [r7, #12]
      }

      break;
 8001fda:	e00b      	b.n	8001ff4 <OV5640_SetColorEffect+0x3f4>
      break;
 8001fdc:	bf00      	nop
 8001fde:	e00a      	b.n	8001ff6 <OV5640_SetColorEffect+0x3f6>
      break;
 8001fe0:	bf00      	nop
 8001fe2:	e008      	b.n	8001ff6 <OV5640_SetColorEffect+0x3f6>
      break;
 8001fe4:	bf00      	nop
 8001fe6:	e006      	b.n	8001ff6 <OV5640_SetColorEffect+0x3f6>
      break;
 8001fe8:	bf00      	nop
 8001fea:	e004      	b.n	8001ff6 <OV5640_SetColorEffect+0x3f6>
      break;
 8001fec:	bf00      	nop
 8001fee:	e002      	b.n	8001ff6 <OV5640_SetColorEffect+0x3f6>
      break;
 8001ff0:	bf00      	nop
 8001ff2:	e000      	b.n	8001ff6 <OV5640_SetColorEffect+0x3f6>
      break;
 8001ff4:	bf00      	nop
  }

  return ret;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800200a:	4a34      	ldr	r2, [pc, #208]	; (80020dc <OV5640_SetBrightness+0xdc>)
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	ca07      	ldmia	r2, {r0, r1, r2}
 8002012:	c303      	stmia	r3!, {r0, r1}
 8002014:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002016:	23ff      	movs	r3, #255	; 0xff
 8002018:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f103 0018 	add.w	r0, r3, #24
 8002020:	f107 020f 	add.w	r2, r7, #15
 8002024:	2301      	movs	r3, #1
 8002026:	f245 0101 	movw	r1, #20481	; 0x5001
 800202a:	f000 fc67 	bl	80028fc <ov5640_write_reg>
 800202e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d111      	bne.n	800205a <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3304      	adds	r3, #4
 800203a:	3320      	adds	r3, #32
 800203c:	443b      	add	r3, r7
 800203e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002042:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f103 0018 	add.w	r0, r3, #24
 800204a:	f107 020f 	add.w	r2, r7, #15
 800204e:	2301      	movs	r3, #1
 8002050:	f245 5187 	movw	r1, #21895	; 0x5587
 8002054:	f000 fc52 	bl	80028fc <ov5640_write_reg>
 8002058:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10c      	bne.n	800207a <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002060:	2304      	movs	r3, #4
 8002062:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 0018 	add.w	r0, r3, #24
 800206a:	f107 020f 	add.w	r2, r7, #15
 800206e:	2301      	movs	r3, #1
 8002070:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002074:	f000 fc42 	bl	80028fc <ov5640_write_reg>
 8002078:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d127      	bne.n	80020d0 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	da12      	bge.n	80020ac <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0018 	add.w	r0, r3, #24
 8002090:	f107 020f 	add.w	r2, r7, #15
 8002094:	2301      	movs	r3, #1
 8002096:	f245 5188 	movw	r1, #21896	; 0x5588
 800209a:	f000 fc2f 	bl	80028fc <ov5640_write_reg>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d015      	beq.n	80020d0 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e011      	b.n	80020d0 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 80020ac:	2309      	movs	r3, #9
 80020ae:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0018 	add.w	r0, r3, #24
 80020b6:	f107 020f 	add.w	r2, r7, #15
 80020ba:	2301      	movs	r3, #1
 80020bc:	f245 5188 	movw	r1, #21896	; 0x5588
 80020c0:	f000 fc1c 	bl	80028fc <ov5640_write_reg>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80020d0:	69fb      	ldr	r3, [r7, #28]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	08010388 	.word	0x08010388

080020e0 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <OV5640_SetSaturation+0xcc>)
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f2:	c303      	stmia	r3!, {r0, r1}
 80020f4:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80020f6:	23ff      	movs	r3, #255	; 0xff
 80020f8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 0018 	add.w	r0, r3, #24
 8002100:	f107 020f 	add.w	r2, r7, #15
 8002104:	2301      	movs	r3, #1
 8002106:	f245 0101 	movw	r1, #20481	; 0x5001
 800210a:	f000 fbf7 	bl	80028fc <ov5640_write_reg>
 800210e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d111      	bne.n	800213a <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	3320      	adds	r3, #32
 800211c:	443b      	add	r3, r7
 800211e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002122:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 0018 	add.w	r0, r3, #24
 800212a:	f107 020f 	add.w	r2, r7, #15
 800212e:	2301      	movs	r3, #1
 8002130:	f245 5183 	movw	r1, #21891	; 0x5583
 8002134:	f000 fbe2 	bl	80028fc <ov5640_write_reg>
 8002138:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f103 0018 	add.w	r0, r3, #24
 8002146:	f107 020f 	add.w	r2, r7, #15
 800214a:	2301      	movs	r3, #1
 800214c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002150:	f000 fbd4 	bl	80028fc <ov5640_write_reg>
 8002154:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10c      	bne.n	8002176 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 800215c:	2302      	movs	r3, #2
 800215e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 0018 	add.w	r0, r3, #24
 8002166:	f107 020f 	add.w	r2, r7, #15
 800216a:	2301      	movs	r3, #1
 800216c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002170:	f000 fbc4 	bl	80028fc <ov5640_write_reg>
 8002174:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 800217c:	2341      	movs	r3, #65	; 0x41
 800217e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0018 	add.w	r0, r3, #24
 8002186:	f107 020f 	add.w	r2, r7, #15
 800218a:	2301      	movs	r3, #1
 800218c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002190:	f000 fbb4 	bl	80028fc <ov5640_write_reg>
 8002194:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a0:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80021a2:	69fb      	ldr	r3, [r7, #28]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	08010394 	.word	0x08010394

080021b0 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80021ba:	4a30      	ldr	r2, [pc, #192]	; (800227c <OV5640_SetContrast+0xcc>)
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021c2:	c303      	stmia	r3!, {r0, r1}
 80021c4:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80021c6:	23ff      	movs	r3, #255	; 0xff
 80021c8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f103 0018 	add.w	r0, r3, #24
 80021d0:	f107 020f 	add.w	r2, r7, #15
 80021d4:	2301      	movs	r3, #1
 80021d6:	f245 0101 	movw	r1, #20481	; 0x5001
 80021da:	f000 fb8f 	bl	80028fc <ov5640_write_reg>
 80021de:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80021e6:	2304      	movs	r3, #4
 80021e8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f103 0018 	add.w	r0, r3, #24
 80021f0:	f107 020f 	add.w	r2, r7, #15
 80021f4:	2301      	movs	r3, #1
 80021f6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80021fa:	f000 fb7f 	bl	80028fc <ov5640_write_reg>
 80021fe:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d111      	bne.n	800222a <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3304      	adds	r3, #4
 800220a:	3320      	adds	r3, #32
 800220c:	443b      	add	r3, r7
 800220e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002212:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0018 	add.w	r0, r3, #24
 800221a:	f107 020f 	add.w	r2, r7, #15
 800221e:	2301      	movs	r3, #1
 8002220:	f245 5186 	movw	r1, #21894	; 0x5586
 8002224:	f000 fb6a 	bl	80028fc <ov5640_write_reg>
 8002228:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f103 0018 	add.w	r0, r3, #24
 8002236:	f107 020f 	add.w	r2, r7, #15
 800223a:	2301      	movs	r3, #1
 800223c:	f245 5185 	movw	r1, #21893	; 0x5585
 8002240:	f000 fb5c 	bl	80028fc <ov5640_write_reg>
 8002244:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10c      	bne.n	8002266 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 800224c:	2341      	movs	r3, #65	; 0x41
 800224e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f103 0018 	add.w	r0, r3, #24
 8002256:	f107 020f 	add.w	r2, r7, #15
 800225a:	2301      	movs	r3, #1
 800225c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002260:	f000 fb4c 	bl	80028fc <ov5640_write_reg>
 8002264:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002270:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002272:	69fb      	ldr	r3, [r7, #28]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	080103a0 	.word	0x080103a0

08002280 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800228a:	4a3c      	ldr	r2, [pc, #240]	; (800237c <OV5640_SetHueDegree+0xfc>)
 800228c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002290:	ca07      	ldmia	r2, {r0, r1, r2}
 8002292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8002296:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <OV5640_SetHueDegree+0x100>)
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	ca07      	ldmia	r2, {r0, r1, r2}
 800229e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80022a2:	4a38      	ldr	r2, [pc, #224]	; (8002384 <OV5640_SetHueDegree+0x104>)
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80022ae:	23ff      	movs	r3, #255	; 0xff
 80022b0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0018 	add.w	r0, r3, #24
 80022b8:	f107 020f 	add.w	r2, r7, #15
 80022bc:	2301      	movs	r3, #1
 80022be:	f245 0101 	movw	r1, #20481	; 0x5001
 80022c2:	f000 fb1b 	bl	80028fc <ov5640_write_reg>
 80022c6:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f103 0018 	add.w	r0, r3, #24
 80022d8:	f107 020f 	add.w	r2, r7, #15
 80022dc:	2301      	movs	r3, #1
 80022de:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80022e2:	f000 fb0b 	bl	80028fc <ov5640_write_reg>
 80022e6:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d111      	bne.n	8002312 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	3306      	adds	r3, #6
 80022f2:	3338      	adds	r3, #56	; 0x38
 80022f4:	443b      	add	r3, r7
 80022f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80022fa:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f103 0018 	add.w	r0, r3, #24
 8002302:	f107 020f 	add.w	r2, r7, #15
 8002306:	2301      	movs	r3, #1
 8002308:	f245 5181 	movw	r1, #21889	; 0x5581
 800230c:	f000 faf6 	bl	80028fc <ov5640_write_reg>
 8002310:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002314:	2b00      	cmp	r3, #0
 8002316:	d111      	bne.n	800233c <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	3306      	adds	r3, #6
 800231c:	3338      	adds	r3, #56	; 0x38
 800231e:	443b      	add	r3, r7
 8002320:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002324:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f103 0018 	add.w	r0, r3, #24
 800232c:	f107 020f 	add.w	r2, r7, #15
 8002330:	2301      	movs	r3, #1
 8002332:	f245 5182 	movw	r1, #21890	; 0x5582
 8002336:	f000 fae1 	bl	80028fc <ov5640_write_reg>
 800233a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233e:	2b00      	cmp	r3, #0
 8002340:	d111      	bne.n	8002366 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	3306      	adds	r3, #6
 8002346:	3338      	adds	r3, #56	; 0x38
 8002348:	443b      	add	r3, r7
 800234a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800234e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 0018 	add.w	r0, r3, #24
 8002356:	f107 020f 	add.w	r2, r7, #15
 800235a:	2301      	movs	r3, #1
 800235c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002360:	f000 facc 	bl	80028fc <ov5640_write_reg>
 8002364:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002374:	4618      	mov	r0, r3
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	080103ac 	.word	0x080103ac
 8002380:	080103b8 	.word	0x080103b8
 8002384:	080103c4 	.word	0x080103c4

08002388 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f103 0018 	add.w	r0, r3, #24
 800239c:	f107 020b 	add.w	r2, r7, #11
 80023a0:	2301      	movs	r3, #1
 80023a2:	f643 0120 	movw	r1, #14368	; 0x3820
 80023a6:	f000 fa92 	bl	80028ce <ov5640_read_reg>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e0cb      	b.n	8002550 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	f023 0306 	bic.w	r3, r3, #6
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 0018 	add.w	r0, r3, #24
 80023c8:	f107 020a 	add.w	r2, r7, #10
 80023cc:	2301      	movs	r3, #1
 80023ce:	f643 0121 	movw	r1, #14369	; 0x3821
 80023d2:	f000 fa7c 	bl	80028ce <ov5640_read_reg>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e0b5      	b.n	8002550 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80023e8:	7abb      	ldrb	r3, [r7, #10]
 80023ea:	f023 0306 	bic.w	r3, r3, #6
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d056      	beq.n	80024a6 <OV5640_MirrorFlipConfig+0x11e>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d87f      	bhi.n	80024fe <OV5640_MirrorFlipConfig+0x176>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d029      	beq.n	8002458 <OV5640_MirrorFlipConfig+0xd0>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d179      	bne.n	80024fe <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f103 0018 	add.w	r0, r3, #24
 8002410:	f107 020b 	add.w	r2, r7, #11
 8002414:	2301      	movs	r3, #1
 8002416:	f643 0120 	movw	r1, #14368	; 0x3820
 800241a:	f000 fa6f 	bl	80028fc <ov5640_write_reg>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002428:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800242a:	e08a      	b.n	8002542 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 800242c:	7abb      	ldrb	r3, [r7, #10]
 800242e:	f043 0306 	orr.w	r3, r3, #6
 8002432:	b2db      	uxtb	r3, r3
 8002434:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f103 0018 	add.w	r0, r3, #24
 800243c:	f107 020a 	add.w	r2, r7, #10
 8002440:	2301      	movs	r3, #1
 8002442:	f643 0121 	movw	r1, #14369	; 0x3821
 8002446:	f000 fa59 	bl	80028fc <ov5640_write_reg>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d078      	beq.n	8002542 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002454:	60fb      	str	r3, [r7, #12]
          break;
 8002456:	e074      	b.n	8002542 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	f043 0306 	orr.w	r3, r3, #6
 800245e:	b2db      	uxtb	r3, r3
 8002460:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f103 0018 	add.w	r0, r3, #24
 8002468:	f107 020b 	add.w	r2, r7, #11
 800246c:	2301      	movs	r3, #1
 800246e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002472:	f000 fa43 	bl	80028fc <ov5640_write_reg>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002480:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002482:	e060      	b.n	8002546 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0018 	add.w	r0, r3, #24
 800248a:	f107 020a 	add.w	r2, r7, #10
 800248e:	2301      	movs	r3, #1
 8002490:	f643 0121 	movw	r1, #14369	; 0x3821
 8002494:	f000 fa32 	bl	80028fc <ov5640_write_reg>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d053      	beq.n	8002546 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a2:	60fb      	str	r3, [r7, #12]
          break;
 80024a4:	e04f      	b.n	8002546 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 80024a6:	7afb      	ldrb	r3, [r7, #11]
 80024a8:	f043 0306 	orr.w	r3, r3, #6
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f103 0018 	add.w	r0, r3, #24
 80024b6:	f107 020b 	add.w	r2, r7, #11
 80024ba:	2301      	movs	r3, #1
 80024bc:	f643 0120 	movw	r1, #14368	; 0x3820
 80024c0:	f000 fa1c 	bl	80028fc <ov5640_write_reg>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ce:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80024d0:	e03b      	b.n	800254a <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 80024d2:	7abb      	ldrb	r3, [r7, #10]
 80024d4:	f043 0306 	orr.w	r3, r3, #6
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f103 0018 	add.w	r0, r3, #24
 80024e2:	f107 020a 	add.w	r2, r7, #10
 80024e6:	2301      	movs	r3, #1
 80024e8:	f643 0121 	movw	r1, #14369	; 0x3821
 80024ec:	f000 fa06 	bl	80028fc <ov5640_write_reg>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d029      	beq.n	800254a <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fa:	60fb      	str	r3, [r7, #12]
          break;
 80024fc:	e025      	b.n	800254a <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f103 0018 	add.w	r0, r3, #24
 8002504:	f107 020b 	add.w	r2, r7, #11
 8002508:	2301      	movs	r3, #1
 800250a:	f643 0120 	movw	r1, #14368	; 0x3820
 800250e:	f000 f9f5 	bl	80028fc <ov5640_write_reg>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800251c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800251e:	e016      	b.n	800254e <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f103 0018 	add.w	r0, r3, #24
 8002526:	f107 020a 	add.w	r2, r7, #10
 800252a:	2301      	movs	r3, #1
 800252c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002530:	f000 f9e4 	bl	80028fc <ov5640_write_reg>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253e:	60fb      	str	r3, [r7, #12]
          break;
 8002540:	e005      	b.n	800254e <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002542:	bf00      	nop
 8002544:	e004      	b.n	8002550 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800254e:	bf00      	nop
      }
    }
  }

  return ret;
 8002550:	68fb      	ldr	r3, [r7, #12]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff f8a2 	bl	80016b8 <OV5640_GetResolution>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e04e      	b.n	8002620 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b44      	cmp	r3, #68	; 0x44
 800258a:	d112      	bne.n	80025b2 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 800258c:	2310      	movs	r3, #16
 800258e:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f103 0018 	add.w	r0, r3, #24
 8002596:	f107 020b 	add.w	r2, r7, #11
 800259a:	2301      	movs	r3, #1
 800259c:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80025a0:	f000 f9ac 	bl	80028fc <ov5640_write_reg>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03a      	beq.n	8002620 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e036      	b.n	8002620 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d802      	bhi.n	80025be <OV5640_ZoomConfig+0x64>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 80025bc:	e00a      	b.n	80025d4 <OV5640_ZoomConfig+0x7a>
      switch (res)
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d004      	beq.n	80025cc <OV5640_ZoomConfig+0x72>
          break;
 80025c2:	e007      	b.n	80025d4 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	613b      	str	r3, [r7, #16]
          break;
 80025ca:	e003      	b.n	80025d4 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	613b      	str	r3, [r7, #16]
          break;
 80025d2:	bf00      	nop
      }

      tmp = 0x00;
 80025d4:	2300      	movs	r3, #0
 80025d6:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 0018 	add.w	r0, r3, #24
 80025de:	f107 020b 	add.w	r2, r7, #11
 80025e2:	2301      	movs	r3, #1
 80025e4:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80025e8:	f000 f988 	bl	80028fc <ov5640_write_reg>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e012      	b.n	8002620 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f103 0018 	add.w	r0, r3, #24
 8002606:	f107 020b 	add.w	r2, r7, #11
 800260a:	2301      	movs	r3, #1
 800260c:	f245 6101 	movw	r1, #22017	; 0x5601
 8002610:	f000 f974 	bl	80028fc <ov5640_write_reg>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800261e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002620:	697b      	ldr	r3, [r7, #20]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	f040 80ce 	bne.w	80027dc <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f103 0018 	add.w	r0, r3, #24
 8002646:	f107 020b 	add.w	r2, r7, #11
 800264a:	2301      	movs	r3, #1
 800264c:	f243 0138 	movw	r1, #12344	; 0x3038
 8002650:	f000 f954 	bl	80028fc <ov5640_write_reg>
 8002654:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 0018 	add.w	r0, r3, #24
 8002662:	f107 020b 	add.w	r2, r7, #11
 8002666:	2301      	movs	r3, #1
 8002668:	f243 0139 	movw	r1, #12345	; 0x3039
 800266c:	f000 f946 	bl	80028fc <ov5640_write_reg>
 8002670:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10c      	bne.n	8002692 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002678:	237c      	movs	r3, #124	; 0x7c
 800267a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0018 	add.w	r0, r3, #24
 8002682:	f107 020b 	add.w	r2, r7, #11
 8002686:	2301      	movs	r3, #1
 8002688:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800268c:	f000 f936 	bl	80028fc <ov5640_write_reg>
 8002690:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10c      	bne.n	80026b2 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002698:	2301      	movs	r3, #1
 800269a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 0018 	add.w	r0, r3, #24
 80026a2:	f107 020b 	add.w	r2, r7, #11
 80026a6:	2301      	movs	r3, #1
 80026a8:	f643 2108 	movw	r1, #14856	; 0x3a08
 80026ac:	f000 f926 	bl	80028fc <ov5640_write_reg>
 80026b0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10c      	bne.n	80026d2 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 80026b8:	2327      	movs	r3, #39	; 0x27
 80026ba:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f103 0018 	add.w	r0, r3, #24
 80026c2:	f107 020b 	add.w	r2, r7, #11
 80026c6:	2301      	movs	r3, #1
 80026c8:	f643 2109 	movw	r1, #14857	; 0x3a09
 80026cc:	f000 f916 	bl	80028fc <ov5640_write_reg>
 80026d0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10c      	bne.n	80026f2 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 80026d8:	2300      	movs	r3, #0
 80026da:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 0018 	add.w	r0, r3, #24
 80026e2:	f107 020b 	add.w	r2, r7, #11
 80026e6:	2301      	movs	r3, #1
 80026e8:	f643 210a 	movw	r1, #14858	; 0x3a0a
 80026ec:	f000 f906 	bl	80028fc <ov5640_write_reg>
 80026f0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10c      	bne.n	8002712 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 80026f8:	23f6      	movs	r3, #246	; 0xf6
 80026fa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f103 0018 	add.w	r0, r3, #24
 8002702:	f107 020b 	add.w	r2, r7, #11
 8002706:	2301      	movs	r3, #1
 8002708:	f643 210b 	movw	r1, #14859	; 0x3a0b
 800270c:	f000 f8f6 	bl	80028fc <ov5640_write_reg>
 8002710:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10c      	bne.n	8002732 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002718:	2304      	movs	r3, #4
 800271a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 0018 	add.w	r0, r3, #24
 8002722:	f107 020b 	add.w	r2, r7, #11
 8002726:	2301      	movs	r3, #1
 8002728:	f643 210d 	movw	r1, #14861	; 0x3a0d
 800272c:	f000 f8e6 	bl	80028fc <ov5640_write_reg>
 8002730:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0018 	add.w	r0, r3, #24
 800273e:	f107 020b 	add.w	r2, r7, #11
 8002742:	2301      	movs	r3, #1
 8002744:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002748:	f000 f8d8 	bl	80028fc <ov5640_write_reg>
 800274c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002754:	230b      	movs	r3, #11
 8002756:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0018 	add.w	r0, r3, #24
 800275e:	f107 020b 	add.w	r2, r7, #11
 8002762:	2301      	movs	r3, #1
 8002764:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002768:	f000 f8c8 	bl	80028fc <ov5640_write_reg>
 800276c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10c      	bne.n	800278e <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002774:	2388      	movs	r3, #136	; 0x88
 8002776:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f103 0018 	add.w	r0, r3, #24
 800277e:	f107 020b 	add.w	r2, r7, #11
 8002782:	2301      	movs	r3, #1
 8002784:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002788:	f000 f8b8 	bl	80028fc <ov5640_write_reg>
 800278c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10c      	bne.n	80027ae <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002794:	230b      	movs	r3, #11
 8002796:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f103 0018 	add.w	r0, r3, #24
 800279e:	f107 020b 	add.w	r2, r7, #11
 80027a2:	2301      	movs	r3, #1
 80027a4:	f643 2114 	movw	r1, #14868	; 0x3a14
 80027a8:	f000 f8a8 	bl	80028fc <ov5640_write_reg>
 80027ac:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10c      	bne.n	80027ce <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 80027b4:	2388      	movs	r3, #136	; 0x88
 80027b6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 0018 	add.w	r0, r3, #24
 80027be:	f107 020b 	add.w	r2, r7, #11
 80027c2:	2301      	movs	r3, #1
 80027c4:	f643 2115 	movw	r1, #14869	; 0x3a15
 80027c8:	f000 f898 	bl	80028fc <ov5640_write_reg>
 80027cc:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02b      	beq.n	800282c <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e027      	b.n	800282c <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f103 0018 	add.w	r0, r3, #24
 80027e2:	f107 020b 	add.w	r2, r7, #11
 80027e6:	2301      	movs	r3, #1
 80027e8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80027ec:	f000 f86f 	bl	80028ce <ov5640_read_reg>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e016      	b.n	800282c <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	b2db      	uxtb	r3, r3
 800280a:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f103 0018 	add.w	r0, r3, #24
 8002812:	f107 020b 	add.w	r2, r7, #11
 8002816:	2301      	movs	r3, #1
 8002818:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800281c:	f000 f86e 	bl	80028fc <ov5640_write_reg>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800282c:	68fb      	ldr	r3, [r7, #12]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4798      	blx	r3
 8002846:	4603      	mov	r3, r0
 8002848:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800284a:	bf00      	nop
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	4798      	blx	r3
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f5      	bhi.n	800284c <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800286a:	b590      	push	{r4, r7, lr}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	461a      	mov	r2, r3
 8002876:	460b      	mov	r3, r1
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	4613      	mov	r3, r2
 800287c:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	691c      	ldr	r4, [r3, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	8918      	ldrh	r0, [r3, #8]
 800288a:	893b      	ldrh	r3, [r7, #8]
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	47a0      	blx	r4
 8002892:	4603      	mov	r3, r0
}
 8002894:	4618      	mov	r0, r3
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}

0800289c <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	461a      	mov	r2, r3
 80028a8:	460b      	mov	r3, r1
 80028aa:	817b      	strh	r3, [r7, #10]
 80028ac:	4613      	mov	r3, r2
 80028ae:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	68dc      	ldr	r4, [r3, #12]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	8918      	ldrh	r0, [r3, #8]
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	47a0      	blx	r4
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}

080028ce <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80028ce:	b590      	push	{r4, r7, lr}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	461a      	mov	r2, r3
 80028da:	460b      	mov	r3, r1
 80028dc:	817b      	strh	r3, [r7, #10]
 80028de:	4613      	mov	r3, r2
 80028e0:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685c      	ldr	r4, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6898      	ldr	r0, [r3, #8]
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	47a0      	blx	r4
 80028f2:	4603      	mov	r3, r0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}

080028fc <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	461a      	mov	r2, r3
 8002908:	460b      	mov	r3, r1
 800290a:	817b      	strh	r3, [r7, #10]
 800290c:	4613      	mov	r3, r2
 800290e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681c      	ldr	r4, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6898      	ldr	r0, [r3, #8]
 8002918:	893b      	ldrh	r3, [r7, #8]
 800291a:	8979      	ldrh	r1, [r7, #10]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	47a0      	blx	r4
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
	...

0800292c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <RetargetInit+0x28>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <RetargetInit+0x2c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6898      	ldr	r0, [r3, #8]
 8002940:	2300      	movs	r3, #0
 8002942:	2202      	movs	r2, #2
 8002944:	2100      	movs	r1, #0
 8002946:	f00c fca7 	bl	800f298 <setvbuf>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2404b2c8 	.word	0x2404b2c8
 8002958:	24000054 	.word	0x24000054

0800295c <_isatty>:

int _isatty(int fd) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db04      	blt.n	8002974 <_isatty+0x18>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b02      	cmp	r3, #2
 800296e:	dc01      	bgt.n	8002974 <_isatty+0x18>
    return 1;
 8002970:	2301      	movs	r3, #1
 8002972:	e005      	b.n	8002980 <_isatty+0x24>

  errno = EBADF;
 8002974:	f00c fc46 	bl	800f204 <__errno>
 8002978:	4603      	mov	r3, r0
 800297a:	2209      	movs	r2, #9
 800297c:	601a      	str	r2, [r3, #0]
  return 0;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <_write>:

int _write(int fd, char* ptr, int len) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d002      	beq.n	80029a0 <_write+0x18>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d111      	bne.n	80029c4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <_write+0x54>)
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	f00a fd11 	bl	800d3d4 <HAL_UART_Transmit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <_write+0x38>
      return len;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	e008      	b.n	80029d2 <_write+0x4a>
    else
      return EIO;
 80029c0:	2305      	movs	r3, #5
 80029c2:	e006      	b.n	80029d2 <_write+0x4a>
  }
  errno = EBADF;
 80029c4:	f00c fc1e 	bl	800f204 <__errno>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2209      	movs	r2, #9
 80029cc:	601a      	str	r2, [r3, #0]
  return -1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2404b2c8 	.word	0x2404b2c8

080029e0 <_close>:

int _close(int fd) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db04      	blt.n	80029f8 <_close+0x18>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	dc01      	bgt.n	80029f8 <_close+0x18>
    return 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e006      	b.n	8002a06 <_close+0x26>

  errno = EBADF;
 80029f8:	f00c fc04 	bl	800f204 <__errno>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2209      	movs	r2, #9
 8002a00:	601a      	str	r2, [r3, #0]
  return -1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <_read>:

int _read(int fd, char* ptr, int len) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d110      	bne.n	8002a44 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <_read+0x4c>)
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	f00a fd5f 	bl	800d4f0 <HAL_UART_Receive>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <_read+0x30>
      return 1;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e008      	b.n	8002a52 <_read+0x42>
    else
      return EIO;
 8002a40:	2305      	movs	r3, #5
 8002a42:	e006      	b.n	8002a52 <_read+0x42>
  }
  errno = EBADF;
 8002a44:	f00c fbde 	bl	800f204 <__errno>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2209      	movs	r2, #9
 8002a4c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2404b2c8 	.word	0x2404b2c8

08002a60 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db08      	blt.n	8002a82 <_fstat+0x22>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	dc05      	bgt.n	8002a82 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a7c:	605a      	str	r2, [r3, #4]
    return 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e005      	b.n	8002a8e <_fstat+0x2e>
  }

  errno = EBADF;
 8002a82:	f00c fbbf 	bl	800f204 <__errno>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2209      	movs	r2, #9
 8002a8a:	601a      	str	r2, [r3, #0]
  return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <BSP_I2C4_Init+0x64>)
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <BSP_I2C4_Init+0x68>)
 8002aa6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <BSP_I2C4_Init+0x6c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11f      	bne.n	8002af0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <BSP_I2C4_Init+0x6c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <BSP_I2C4_Init+0x6c>)
 8002ab8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002aba:	4810      	ldr	r0, [pc, #64]	; (8002afc <BSP_I2C4_Init+0x64>)
 8002abc:	f006 fb7b 	bl	80091b6 <HAL_I2C_GetState>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d114      	bne.n	8002af0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8002ac6:	480d      	ldr	r0, [pc, #52]	; (8002afc <BSP_I2C4_Init+0x64>)
 8002ac8:	f000 fb60 	bl	800318c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002acc:	f008 fd1e 	bl	800b50c <HAL_RCC_GetPCLK2Freq>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	490d      	ldr	r1, [pc, #52]	; (8002b08 <BSP_I2C4_Init+0x70>)
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f8e3 	bl	8002ca0 <I2C_GetTiming>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <BSP_I2C4_Init+0x64>)
 8002ae0:	f000 f838 	bl	8002b54 <MX_I2C4_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002aea:	f06f 0307 	mvn.w	r3, #7
 8002aee:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2404bcd4 	.word	0x2404bcd4
 8002b00:	58001c00 	.word	0x58001c00
 8002b04:	2404b2cc 	.word	0x2404b2cc
 8002b08:	000186a0 	.word	0x000186a0

08002b0c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <BSP_I2C4_DeInit+0x40>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <BSP_I2C4_DeInit+0x40>)
 8002b1e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <BSP_I2C4_DeInit+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8002b28:	4809      	ldr	r0, [pc, #36]	; (8002b50 <BSP_I2C4_DeInit+0x44>)
 8002b2a:	f000 fb9b 	bl	8003264 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8002b2e:	4808      	ldr	r0, [pc, #32]	; (8002b50 <BSP_I2C4_DeInit+0x44>)
 8002b30:	f006 f828 	bl	8008b84 <HAL_I2C_DeInit>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002b3a:	f06f 0307 	mvn.w	r3, #7
 8002b3e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2404b2cc 	.word	0x2404b2cc
 8002b50:	2404bcd4 	.word	0x2404bcd4

08002b54 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f005 ff66 	bl	8008a64 <HAL_I2C_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e014      	b.n	8002bce <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f007 fb9a 	bl	800a2e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e008      	b.n	8002bce <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f007 fbdb 	bl	800a37a <HAL_I2CEx_ConfigDigitalFilter>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60ba      	str	r2, [r7, #8]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	81fb      	strh	r3, [r7, #14]
 8002be6:	460b      	mov	r3, r1
 8002be8:	81bb      	strh	r3, [r7, #12]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002bee:	89b9      	ldrh	r1, [r7, #12]
 8002bf0:	89f8      	ldrh	r0, [r7, #14]
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f000 fb57 	bl	80032ac <I2C4_WriteReg>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e00c      	b.n	8002c24 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002c0a:	4809      	ldr	r0, [pc, #36]	; (8002c30 <BSP_I2C4_WriteReg16+0x58>)
 8002c0c:	f006 fae1 	bl	80091d2 <HAL_I2C_GetError>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d103      	bne.n	8002c1e <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c16:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e002      	b.n	8002c24 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002c1e:	f06f 0303 	mvn.w	r3, #3
 8002c22:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002c24:	697b      	ldr	r3, [r7, #20]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2404bcd4 	.word	0x2404bcd4

08002c34 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60ba      	str	r2, [r7, #8]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	81fb      	strh	r3, [r7, #14]
 8002c42:	460b      	mov	r3, r1
 8002c44:	81bb      	strh	r3, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002c4a:	89b9      	ldrh	r1, [r7, #12]
 8002c4c:	89f8      	ldrh	r0, [r7, #14]
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f000 fb4f 	bl	80032f8 <I2C4_ReadReg>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e00c      	b.n	8002c80 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <BSP_I2C4_ReadReg16+0x58>)
 8002c68:	f006 fab3 	bl	80091d2 <HAL_I2C_GetError>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d103      	bne.n	8002c7a <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c72:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e002      	b.n	8002c80 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002c7a:	f06f 0303 	mvn.w	r3, #3
 8002c7e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002c80:	697b      	ldr	r3, [r7, #20]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2404bcd4 	.word	0x2404bcd4

08002c90 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002c94:	f001 fa94 	bl	80041c0 <HAL_GetTick>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d06b      	beq.n	8002d8c <I2C_GetTiming+0xec>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d068      	beq.n	8002d8c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e060      	b.n	8002d82 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002cc0:	4a35      	ldr	r2, [pc, #212]	; (8002d98 <I2C_GetTiming+0xf8>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3304      	adds	r3, #4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d352      	bcc.n	8002d7c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002cd6:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <I2C_GetTiming+0xf8>)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d847      	bhi.n	8002d7c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002cec:	6939      	ldr	r1, [r7, #16]
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f856 	bl	8002da0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002cf4:	6939      	ldr	r1, [r7, #16]
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f940 	bl	8002f7c <I2C_Compute_SCLL_SCLH>
 8002cfc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b7f      	cmp	r3, #127	; 0x7f
 8002d02:	d842      	bhi.n	8002d8a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002d04:	4925      	ldr	r1, [pc, #148]	; (8002d9c <I2C_GetTiming+0xfc>)
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002d16:	4821      	ldr	r0, [pc, #132]	; (8002d9c <I2C_GetTiming+0xfc>)
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4403      	add	r3, r0
 8002d24:	3304      	adds	r3, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	051b      	lsls	r3, r3, #20
 8002d2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002d2e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002d30:	481a      	ldr	r0, [pc, #104]	; (8002d9c <I2C_GetTiming+0xfc>)
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4403      	add	r3, r0
 8002d3e:	3308      	adds	r3, #8
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002d48:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002d4a:	4814      	ldr	r0, [pc, #80]	; (8002d9c <I2C_GetTiming+0xfc>)
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4403      	add	r3, r0
 8002d58:	330c      	adds	r3, #12
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002d60:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002d62:	480e      	ldr	r0, [pc, #56]	; (8002d9c <I2C_GetTiming+0xfc>)
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4403      	add	r3, r0
 8002d70:	3310      	adds	r3, #16
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002d76:	430b      	orrs	r3, r1
 8002d78:	617b      	str	r3, [r7, #20]
        }
        break;
 8002d7a:	e006      	b.n	8002d8a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d99b      	bls.n	8002cc0 <I2C_GetTiming+0x20>
 8002d88:	e000      	b.n	8002d8c <I2C_GetTiming+0xec>
        break;
 8002d8a:	bf00      	nop
      }
    }
  }

  return ret;
 8002d8c:	697b      	ldr	r3, [r7, #20]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	080108cc 	.word	0x080108cc
 8002d9c:	2404b2d0 	.word	0x2404b2d0

08002da0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b08f      	sub	sp, #60	; 0x3c
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002daa:	2310      	movs	r3, #16
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	085a      	lsrs	r2, r3, #1
 8002db2:	4b6e      	ldr	r3, [pc, #440]	; (8002f6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002db4:	4413      	add	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dbc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002dbe:	2332      	movs	r3, #50	; 0x32
 8002dc0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002dc2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002dc6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002dc8:	4a69      	ldr	r2, [pc, #420]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3324      	adds	r3, #36	; 0x24
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	330c      	adds	r3, #12
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002dec:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002dee:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002df0:	495f      	ldr	r1, [pc, #380]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	202c      	movs	r0, #44	; 0x2c
 8002df6:	fb00 f303 	mul.w	r3, r0, r3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3328      	adds	r3, #40	; 0x28
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3303      	adds	r3, #3
 8002e02:	69f9      	ldr	r1, [r7, #28]
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002e0c:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3310      	adds	r3, #16
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4a54      	ldr	r2, [pc, #336]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3320      	adds	r3, #32
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002e30:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002e32:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002e34:	494e      	ldr	r1, [pc, #312]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	202c      	movs	r0, #44	; 0x2c
 8002e3a:	fb00 f303 	mul.w	r3, r0, r3
 8002e3e:	440b      	add	r3, r1
 8002e40:	3328      	adds	r3, #40	; 0x28
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3304      	adds	r3, #4
 8002e46:	69f9      	ldr	r1, [r7, #28]
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002e50:	4a47      	ldr	r2, [pc, #284]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3320      	adds	r3, #32
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	4a43      	ldr	r2, [pc, #268]	; (8002f70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3314      	adds	r3, #20
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4403      	add	r3, r0
 8002e74:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	dc01      	bgt.n	8002e80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	dc01      	bgt.n	8002e8a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8e:	e062      	b.n	8002f56 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
 8002e94:	e059      	b.n	8002f4a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	3301      	adds	r3, #1
 8002e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9c:	3201      	adds	r2, #1
 8002e9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d348      	bcc.n	8002f44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	e042      	b.n	8002f3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	3301      	adds	r3, #1
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	fb03 f202 	mul.w	r2, r3, r2
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d332      	bcc.n	8002f38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d82e      	bhi.n	8002f38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d02a      	beq.n	8002f38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4924      	ldr	r1, [pc, #144]	; (8002f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	491f      	ldr	r1, [pc, #124]	; (8002f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3304      	adds	r3, #4
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4919      	ldr	r1, [pc, #100]	; (8002f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f2e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b7f      	cmp	r3, #127	; 0x7f
 8002f36:	d812      	bhi.n	8002f5e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2b0f      	cmp	r3, #15
 8002f42:	d9b9      	bls.n	8002eb8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	3301      	adds	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d9a2      	bls.n	8002e96 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	3301      	adds	r3, #1
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d999      	bls.n	8002e90 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002f5c:	e000      	b.n	8002f60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002f5e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002f60:	373c      	adds	r7, #60	; 0x3c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	3b9aca00 	.word	0x3b9aca00
 8002f70:	080108cc 	.word	0x080108cc
 8002f74:	2404bcd0 	.word	0x2404bcd0
 8002f78:	2404b2d0 	.word	0x2404b2d0

08002f7c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b093      	sub	sp, #76	; 0x4c
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	085a      	lsrs	r2, r3, #1
 8002f90:	4b7a      	ldr	r3, [pc, #488]	; (800317c <I2C_Compute_SCLL_SCLH+0x200>)
 8002f92:	4413      	add	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002f9c:	4a78      	ldr	r2, [pc, #480]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	085a      	lsrs	r2, r3, #1
 8002fac:	4b73      	ldr	r3, [pc, #460]	; (800317c <I2C_Compute_SCLL_SCLH+0x200>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	4973      	ldr	r1, [pc, #460]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	202c      	movs	r0, #44	; 0x2c
 8002fb6:	fb00 f202 	mul.w	r2, r0, r2
 8002fba:	440a      	add	r2, r1
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002fc4:	2332      	movs	r3, #50	; 0x32
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002fc8:	4a6d      	ldr	r2, [pc, #436]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3328      	adds	r3, #40	; 0x28
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002fe0:	4a67      	ldr	r2, [pc, #412]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a62      	ldr	r2, [pc, #392]	; (800317c <I2C_Compute_SCLL_SCLH+0x200>)
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002ff8:	4a61      	ldr	r2, [pc, #388]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3308      	adds	r3, #8
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a5c      	ldr	r2, [pc, #368]	; (800317c <I2C_Compute_SCLL_SCLH+0x200>)
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003014:	2300      	movs	r3, #0
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
 8003018:	e0a3      	b.n	8003162 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800301a:	495a      	ldr	r1, [pc, #360]	; (8003184 <I2C_Compute_SCLL_SCLH+0x208>)
 800301c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003034:	2300      	movs	r3, #0
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	e08c      	b.n	8003154 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	441a      	add	r2, r3
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003042:	3301      	adds	r3, #1
 8003044:	6979      	ldr	r1, [r7, #20]
 8003046:	fb03 f101 	mul.w	r1, r3, r1
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	440b      	add	r3, r1
 8003050:	4413      	add	r3, r2
 8003052:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003054:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3318      	adds	r3, #24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	429a      	cmp	r2, r3
 8003068:	d971      	bls.n	800314e <I2C_Compute_SCLL_SCLH+0x1d2>
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003078:	429a      	cmp	r2, r3
 800307a:	d268      	bcs.n	800314e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800307c:	2300      	movs	r3, #0
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003080:	e062      	b.n	8003148 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	441a      	add	r2, r3
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	3301      	adds	r3, #1
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	fb03 f101 	mul.w	r1, r3, r1
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	4413      	add	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	441a      	add	r2, r3
 80030a2:	4937      	ldr	r1, [pc, #220]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	202c      	movs	r0, #44	; 0x2c
 80030a8:	fb00 f303 	mul.w	r3, r0, r3
 80030ac:	440b      	add	r3, r1
 80030ae:	3320      	adds	r3, #32
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	441a      	add	r2, r3
 80030b4:	4932      	ldr	r1, [pc, #200]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	202c      	movs	r0, #44	; 0x2c
 80030ba:	fb00 f303 	mul.w	r3, r0, r3
 80030be:	440b      	add	r3, r1
 80030c0:	3324      	adds	r3, #36	; 0x24
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d338      	bcc.n	8003142 <I2C_Compute_SCLL_SCLH+0x1c6>
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d834      	bhi.n	8003142 <I2C_Compute_SCLL_SCLH+0x1c6>
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <I2C_Compute_SCLL_SCLH+0x204>)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	331c      	adds	r3, #28
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d329      	bcc.n	8003142 <I2C_Compute_SCLL_SCLH+0x1c6>
 80030ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d225      	bcs.n	8003142 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2b00      	cmp	r3, #0
 8003102:	da02      	bge.n	800310a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	425b      	negs	r3, r3
 8003108:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800310e:	429a      	cmp	r2, r3
 8003110:	d917      	bls.n	8003142 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003116:	491b      	ldr	r1, [pc, #108]	; (8003184 <I2C_Compute_SCLL_SCLH+0x208>)
 8003118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3310      	adds	r3, #16
 8003126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003128:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800312a:	4916      	ldr	r1, [pc, #88]	; (8003184 <I2C_Compute_SCLL_SCLH+0x208>)
 800312c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	330c      	adds	r3, #12
 800313a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800313c:	601a      	str	r2, [r3, #0]
              ret = count;
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	3301      	adds	r3, #1
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d999      	bls.n	8003082 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	3301      	adds	r3, #1
 8003152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003156:	2bff      	cmp	r3, #255	; 0xff
 8003158:	f67f af6f 	bls.w	800303a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	3301      	adds	r3, #1
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003168:	429a      	cmp	r2, r3
 800316a:	f4ff af56 	bcc.w	800301a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800316e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003170:	4618      	mov	r0, r3
 8003172:	374c      	adds	r7, #76	; 0x4c
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	3b9aca00 	.word	0x3b9aca00
 8003180:	080108cc 	.word	0x080108cc
 8003184:	2404b2d0 	.word	0x2404b2d0
 8003188:	2404bcd0 	.word	0x2404bcd0

0800318c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <I2C4_MspInit+0xd0>)
 8003196:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800319a:	4a30      	ldr	r2, [pc, #192]	; (800325c <I2C4_MspInit+0xd0>)
 800319c:	f043 0308 	orr.w	r3, r3, #8
 80031a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <I2C4_MspInit+0xd0>)
 80031a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <I2C4_MspInit+0xd0>)
 80031b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031b8:	4a28      	ldr	r2, [pc, #160]	; (800325c <I2C4_MspInit+0xd0>)
 80031ba:	f043 0308 	orr.w	r3, r3, #8
 80031be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <I2C4_MspInit+0xd0>)
 80031c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80031d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80031d6:	2312      	movs	r3, #18
 80031d8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80031de:	2302      	movs	r3, #2
 80031e0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80031e2:	2304      	movs	r3, #4
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4619      	mov	r1, r3
 80031ec:	481c      	ldr	r0, [pc, #112]	; (8003260 <I2C4_MspInit+0xd4>)
 80031ee:	f005 f965 	bl	80084bc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80031f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80031f8:	2312      	movs	r3, #18
 80031fa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003204:	2304      	movs	r3, #4
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4814      	ldr	r0, [pc, #80]	; (8003260 <I2C4_MspInit+0xd4>)
 8003210:	f005 f954 	bl	80084bc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <I2C4_MspInit+0xd0>)
 8003216:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <I2C4_MspInit+0xd0>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <I2C4_MspInit+0xd0>)
 8003226:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <I2C4_MspInit+0xd0>)
 8003234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <I2C4_MspInit+0xd0>)
 800323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <I2C4_MspInit+0xd0>)
 8003244:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <I2C4_MspInit+0xd0>)
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003252:	bf00      	nop
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	58024400 	.word	0x58024400
 8003260:	58020c00 	.word	0x58020c00

08003264 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800326c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003270:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4619      	mov	r1, r3
 8003276:	480b      	ldr	r0, [pc, #44]	; (80032a4 <I2C4_MspDeInit+0x40>)
 8003278:	f005 fad0 	bl	800881c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800327c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003280:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4619      	mov	r1, r3
 8003286:	4807      	ldr	r0, [pc, #28]	; (80032a4 <I2C4_MspDeInit+0x40>)
 8003288:	f005 fac8 	bl	800881c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <I2C4_MspDeInit+0x44>)
 800328e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <I2C4_MspDeInit+0x44>)
 8003294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003298:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800329c:	bf00      	nop
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	58020c00 	.word	0x58020c00
 80032a8:	58024400 	.word	0x58024400

080032ac <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	4603      	mov	r3, r0
 80032b6:	81fb      	strh	r3, [r7, #14]
 80032b8:	460b      	mov	r3, r1
 80032ba:	81bb      	strh	r3, [r7, #12]
 80032bc:	4613      	mov	r3, r2
 80032be:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80032c0:	8978      	ldrh	r0, [r7, #10]
 80032c2:	89ba      	ldrh	r2, [r7, #12]
 80032c4:	89f9      	ldrh	r1, [r7, #14]
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	8b3b      	ldrh	r3, [r7, #24]
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4603      	mov	r3, r0
 80032d6:	4807      	ldr	r0, [pc, #28]	; (80032f4 <I2C4_WriteReg+0x48>)
 80032d8:	f005 fc84 	bl	8008be4 <HAL_I2C_Mem_Write>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e001      	b.n	80032ea <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80032e6:	f06f 0307 	mvn.w	r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	2404bcd4 	.word	0x2404bcd4

080032f8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af04      	add	r7, sp, #16
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	4603      	mov	r3, r0
 8003302:	81fb      	strh	r3, [r7, #14]
 8003304:	460b      	mov	r3, r1
 8003306:	81bb      	strh	r3, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800330c:	8978      	ldrh	r0, [r7, #10]
 800330e:	89ba      	ldrh	r2, [r7, #12]
 8003310:	89f9      	ldrh	r1, [r7, #14]
 8003312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003316:	9302      	str	r3, [sp, #8]
 8003318:	8b3b      	ldrh	r3, [r7, #24]
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4603      	mov	r3, r0
 8003322:	4807      	ldr	r0, [pc, #28]	; (8003340 <I2C4_ReadReg+0x48>)
 8003324:	f005 fd72 	bl	8008e0c <HAL_I2C_Mem_Read>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800332e:	2300      	movs	r3, #0
 8003330:	e001      	b.n	8003336 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003332:	f06f 0307 	mvn.w	r3, #7
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2404bcd4 	.word	0x2404bcd4

08003344 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800335a:	f06f 0301 	mvn.w	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e035      	b.n	80033ce <BSP_CAMERA_Init+0x8a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
 8003362:	481d      	ldr	r0, [pc, #116]	; (80033d8 <BSP_CAMERA_Init+0x94>)
 8003364:	f000 f94a 	bl	80035fc <DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8003368:	481b      	ldr	r0, [pc, #108]	; (80033d8 <BSP_CAMERA_Init+0x94>)
 800336a:	f000 f839 	bl	80033e0 <MX_DCMI_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <BSP_CAMERA_Init+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003374:	f06f 0303 	mvn.w	r3, #3
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e028      	b.n	80033ce <BSP_CAMERA_Init+0x8a>
    }
    else if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 800337c:	2000      	movs	r0, #0
 800337e:	f000 f8af 	bl	80034e0 <BSP_CAMERA_HwReset>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <BSP_CAMERA_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003388:	f06f 0307 	mvn.w	r3, #7
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e01e      	b.n	80033ce <BSP_CAMERA_Init+0x8a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	68b8      	ldr	r0, [r7, #8]
 8003394:	f000 fa46 	bl	8003824 <OV5640_Probe>
 8003398:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <BSP_CAMERA_Init+0x64>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80033a0:	f06f 0306 	mvn.w	r3, #6
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e012      	b.n	80033ce <BSP_CAMERA_Init+0x8a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 80033a8:	490c      	ldr	r1, [pc, #48]	; (80033dc <BSP_CAMERA_Init+0x98>)
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	440b      	add	r3, r1
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <BSP_CAMERA_Init+0x98>)
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	440b      	add	r3, r1
 80033c8:	3304      	adds	r3, #4
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 80033ce:	697b      	ldr	r3, [r7, #20]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2404bd2c 	.word	0x2404bd2c
 80033dc:	2404bd7c 	.word	0x2404bd7c

080033e0 <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef* hdcmi)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a10      	ldr	r2, [pc, #64]	; (800342c <MX_DCMI_Init+0x4c>)
 80033ec:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	609a      	str	r2, [r3, #8]

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 f846 	bl	80044a4 <HAL_DCMI_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_DCMI_Init+0x42>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <MX_DCMI_Init+0x44>
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	48020000 	.word	0x48020000

08003430 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003442:	f06f 0301 	mvn.w	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e022      	b.n	8003490 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 800344a:	68bc      	ldr	r4, [r7, #8]
 800344c:	4913      	ldr	r1, [pc, #76]	; (800349c <BSP_CAMERA_Start+0x6c>)
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	440b      	add	r3, r1
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	490f      	ldr	r1, [pc, #60]	; (800349c <BSP_CAMERA_Start+0x6c>)
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	440b      	add	r3, r1
 800346a:	3304      	adds	r3, #4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4619      	mov	r1, r3
 8003470:	f000 f872 	bl	8003558 <GetSize>
 8003474:	4603      	mov	r3, r0
 8003476:	4622      	mov	r2, r4
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4809      	ldr	r0, [pc, #36]	; (80034a0 <BSP_CAMERA_Start+0x70>)
 800347c:	f001 f88c 	bl	8004598 <HAL_DCMI_Start_DMA>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003486:	f06f 0303 	mvn.w	r3, #3
 800348a:	e002      	b.n	8003492 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003490:	697b      	ldr	r3, [r7, #20]
}
 8003492:	4618      	mov	r0, r3
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}
 800349a:	bf00      	nop
 800349c:	2404bd7c 	.word	0x2404bd7c
 80034a0:	2404bd2c 	.word	0x2404bd2c

080034a4 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80034b2:	f06f 0301 	mvn.w	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e00b      	b.n	80034d2 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 80034ba:	4808      	ldr	r0, [pc, #32]	; (80034dc <BSP_CAMERA_Stop+0x38>)
 80034bc:	f001 f92e 	bl	800471c <HAL_DCMI_Stop>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80034c6:	f06f 0303 	mvn.w	r3, #3
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e001      	b.n	80034d2 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2404bd2c 	.word	0x2404bd2c

080034e0 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80034f2:	f06f 0301 	mvn.w	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 80034f8:	68fb      	ldr	r3, [r7, #12]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003518:	f06f 0301 	mvn.w	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003548:	2000      	movs	r0, #0
 800354a:	f7ff ffef 	bl	800352c <BSP_CAMERA_ErrorCallback>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 800356c:	2303      	movs	r3, #3
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	e001      	b.n	8003576 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003572:	2302      	movs	r3, #2
 8003574:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d834      	bhi.n	80035e6 <GetSize+0x8e>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <GetSize+0x2c>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003599 	.word	0x08003599
 8003588:	080035a9 	.word	0x080035a9
 800358c:	080035b9 	.word	0x080035b9
 8003590:	080035c9 	.word	0x080035c9
 8003594:	080035d9 	.word	0x080035d9
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	60fb      	str	r3, [r7, #12]
    break;
 80035a6:	e01f      	b.n	80035e8 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	60fb      	str	r3, [r7, #12]
    break;
 80035b6:	e017      	b.n	80035e8 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	025b      	lsls	r3, r3, #9
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	60fb      	str	r3, [r7, #12]
    break;
 80035c6:	e00f      	b.n	80035e8 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	60fb      	str	r3, [r7, #12]
    break;
 80035d6:	e007      	b.n	80035e8 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <GetSize+0xa0>)
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	60fb      	str	r3, [r7, #12]
    break;
 80035e4:	e000      	b.n	80035e8 <GetSize+0x90>
  default:
    break;
 80035e6:	bf00      	nop
  }

  return (int32_t)size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	0005dc00 	.word	0x0005dc00

080035fc <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b090      	sub	sp, #64	; 0x40
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8003604:	4b7e      	ldr	r3, [pc, #504]	; (8003800 <DCMI_MspInit+0x204>)
 8003606:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800360a:	4a7d      	ldr	r2, [pc, #500]	; (8003800 <DCMI_MspInit+0x204>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8003614:	4b7a      	ldr	r3, [pc, #488]	; (8003800 <DCMI_MspInit+0x204>)
 8003616:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003622:	4b77      	ldr	r3, [pc, #476]	; (8003800 <DCMI_MspInit+0x204>)
 8003624:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003628:	4a75      	ldr	r2, [pc, #468]	; (8003800 <DCMI_MspInit+0x204>)
 800362a:	f043 0302 	orr.w	r3, r3, #2
 800362e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8003632:	4b73      	ldr	r3, [pc, #460]	; (8003800 <DCMI_MspInit+0x204>)
 8003634:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <DCMI_MspInit+0x204>)
 8003642:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <DCMI_MspInit+0x204>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003650:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <DCMI_MspInit+0x204>)
 8003652:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	4b68      	ldr	r3, [pc, #416]	; (8003800 <DCMI_MspInit+0x204>)
 8003660:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003664:	4a66      	ldr	r2, [pc, #408]	; (8003800 <DCMI_MspInit+0x204>)
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800366e:	4b64      	ldr	r3, [pc, #400]	; (8003800 <DCMI_MspInit+0x204>)
 8003670:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800367c:	4b60      	ldr	r3, [pc, #384]	; (8003800 <DCMI_MspInit+0x204>)
 800367e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003682:	4a5f      	ldr	r2, [pc, #380]	; (8003800 <DCMI_MspInit+0x204>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800368c:	4b5c      	ldr	r3, [pc, #368]	; (8003800 <DCMI_MspInit+0x204>)
 800368e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800369a:	4b59      	ldr	r3, [pc, #356]	; (8003800 <DCMI_MspInit+0x204>)
 800369c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036a0:	4a57      	ldr	r2, [pc, #348]	; (8003800 <DCMI_MspInit+0x204>)
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <DCMI_MspInit+0x204>)
 80036ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80036b8:	4b51      	ldr	r3, [pc, #324]	; (8003800 <DCMI_MspInit+0x204>)
 80036ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036be:	4a50      	ldr	r2, [pc, #320]	; (8003800 <DCMI_MspInit+0x204>)
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80036c8:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <DCMI_MspInit+0x204>)
 80036ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036d6:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <DCMI_MspInit+0x204>)
 80036d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036dc:	4a48      	ldr	r2, [pc, #288]	; (8003800 <DCMI_MspInit+0x204>)
 80036de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80036e6:	4b46      	ldr	r3, [pc, #280]	; (8003800 <DCMI_MspInit+0x204>)
 80036e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]

  /* Configure DCMI GPIO as alternate function */
  /* DCMI PIXCLK and HSYNC pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_4;
 80036f4:	2350      	movs	r3, #80	; 0x50
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80036fc:	2301      	movs	r3, #1
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8003704:	230d      	movs	r3, #13
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8003708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800370c:	4619      	mov	r1, r3
 800370e:	483d      	ldr	r0, [pc, #244]	; (8003804 <DCMI_MspInit+0x208>)
 8003710:	f004 fed4 	bl	80084bc <HAL_GPIO_Init>

  /* DCMI D0, D1 pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7;
 8003714:	23c0      	movs	r3, #192	; 0xc0
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371c:	4619      	mov	r1, r3
 800371e:	483a      	ldr	r0, [pc, #232]	; (8003808 <DCMI_MspInit+0x20c>)
 8003720:	f004 fecc 	bl	80084bc <HAL_GPIO_Init>

  /* DCMI VSYNC, D2, D3 pins */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8003724:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800372a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800372e:	4619      	mov	r1, r3
 8003730:	4836      	ldr	r0, [pc, #216]	; (800380c <DCMI_MspInit+0x210>)
 8003732:	f004 fec3 	bl	80084bc <HAL_GPIO_Init>

  /* DCMI D4 pins */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003736:	2310      	movs	r3, #16
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800373a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800373e:	4619      	mov	r1, r3
 8003740:	4833      	ldr	r0, [pc, #204]	; (8003810 <DCMI_MspInit+0x214>)
 8003742:	f004 febb 	bl	80084bc <HAL_GPIO_Init>

  /* DCMI D5 pins */
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8003746:	2308      	movs	r3, #8
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800374a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800374e:	4619      	mov	r1, r3
 8003750:	4830      	ldr	r0, [pc, #192]	; (8003814 <DCMI_MspInit+0x218>)
 8003752:	f004 feb3 	bl	80084bc <HAL_GPIO_Init>

  /* DCMI D6, D7 pins */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9;
 8003756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800375c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003760:	4619      	mov	r1, r3
 8003762:	482d      	ldr	r0, [pc, #180]	; (8003818 <DCMI_MspInit+0x21c>)
 8003764:	f004 feaa 	bl	80084bc <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI_PSSI;
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <DCMI_MspInit+0x220>)
 800376a:	224b      	movs	r2, #75	; 0x4b
 800376c:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800376e:	4b2b      	ldr	r3, [pc, #172]	; (800381c <DCMI_MspInit+0x220>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <DCMI_MspInit+0x220>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <DCMI_MspInit+0x220>)
 800377c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003780:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <DCMI_MspInit+0x220>)
 8003784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003788:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <DCMI_MspInit+0x220>)
 800378c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003790:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <DCMI_MspInit+0x220>)
 8003794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003798:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <DCMI_MspInit+0x220>)
 800379c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037a0:	621a      	str	r2, [r3, #32]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <DCMI_MspInit+0x220>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80037a8:	4b1c      	ldr	r3, [pc, #112]	; (800381c <DCMI_MspInit+0x220>)
 80037aa:	2203      	movs	r2, #3
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 80037ae:	4b1b      	ldr	r3, [pc, #108]	; (800381c <DCMI_MspInit+0x220>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <DCMI_MspInit+0x220>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30

  hdma_handler.Instance = DMA2_Stream1;
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <DCMI_MspInit+0x220>)
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <DCMI_MspInit+0x224>)
 80037be:	601a      	str	r2, [r3, #0]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a16      	ldr	r2, [pc, #88]	; (800381c <DCMI_MspInit+0x220>)
 80037c4:	649a      	str	r2, [r3, #72]	; 0x48
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <DCMI_MspInit+0x220>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6393      	str	r3, [r2, #56]	; 0x38

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	210f      	movs	r1, #15
 80037d0:	204e      	movs	r0, #78	; 0x4e
 80037d2:	f000 fe24 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80037d6:	204e      	movs	r0, #78	; 0x4e
 80037d8:	f000 fe3b 	bl	8004452 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80037dc:	2200      	movs	r2, #0
 80037de:	210f      	movs	r1, #15
 80037e0:	2039      	movs	r0, #57	; 0x39
 80037e2:	f000 fe1c 	bl	800441e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80037e6:	2039      	movs	r0, #57	; 0x39
 80037e8:	f000 fe33 	bl	8004452 <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 f8a3 	bl	800493c <HAL_DMA_Init>
}
 80037f6:	bf00      	nop
 80037f8:	3740      	adds	r7, #64	; 0x40
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	58024400 	.word	0x58024400
 8003804:	58020000 	.word	0x58020000
 8003808:	58020800 	.word	0x58020800
 800380c:	58021800 	.word	0x58021800
 8003810:	58021000 	.word	0x58021000
 8003814:	58020c00 	.word	0x58020c00
 8003818:	58020400 	.word	0x58020400
 800381c:	2404bdb4 	.word	0x2404bdb4
 8003820:	40020428 	.word	0x40020428

08003824 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800382e:	2378      	movs	r3, #120	; 0x78
 8003830:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <OV5640_Probe+0xc0>)
 8003834:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003836:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <OV5640_Probe+0xc4>)
 8003838:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <OV5640_Probe+0xc8>)
 800383c:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <OV5640_Probe+0xcc>)
 8003840:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003842:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <OV5640_Probe+0xd0>)
 8003844:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003846:	f107 030c 	add.w	r3, r7, #12
 800384a:	4619      	mov	r1, r3
 800384c:	482a      	ldr	r0, [pc, #168]	; (80038f8 <OV5640_Probe+0xd4>)
 800384e:	f7fd fbcb 	bl	8000fe8 <OV5640_RegisterBusIO>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003858:	f06f 0304 	mvn.w	r3, #4
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	e03c      	b.n	80038da <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003860:	f107 0308 	add.w	r3, r7, #8
 8003864:	4619      	mov	r1, r3
 8003866:	4824      	ldr	r0, [pc, #144]	; (80038f8 <OV5640_Probe+0xd4>)
 8003868:	f7fe f812 	bl	8001890 <OV5640_ReadID>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003872:	f06f 0304 	mvn.w	r3, #4
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e02f      	b.n	80038da <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f245 6240 	movw	r2, #22080	; 0x5640
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003884:	f06f 0306 	mvn.w	r3, #6
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e026      	b.n	80038da <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <OV5640_Probe+0xd8>)
 800388e:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <OV5640_Probe+0xdc>)
 8003890:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003892:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <OV5640_Probe+0xe0>)
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <OV5640_Probe+0xd4>)
 8003896:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <OV5640_Probe+0xd8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a19      	ldr	r2, [pc, #100]	; (8003904 <OV5640_Probe+0xe0>)
 80038a0:	6810      	ldr	r0, [r2, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80038ae:	f06f 0304 	mvn.w	r3, #4
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e011      	b.n	80038da <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <OV5640_Probe+0xd8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a11      	ldr	r2, [pc, #68]	; (8003904 <OV5640_Probe+0xe0>)
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	4911      	ldr	r1, [pc, #68]	; (8003908 <OV5640_Probe+0xe4>)
 80038c2:	6809      	ldr	r1, [r1, #0]
 80038c4:	4610      	mov	r0, r2
 80038c6:	4798      	blx	r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80038ce:	f06f 0304 	mvn.w	r3, #4
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	e001      	b.n	80038da <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3728      	adds	r7, #40	; 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	08002a99 	.word	0x08002a99
 80038e8:	08002b0d 	.word	0x08002b0d
 80038ec:	08002c35 	.word	0x08002c35
 80038f0:	08002bd9 	.word	0x08002bd9
 80038f4:	08002c91 	.word	0x08002c91
 80038f8:	2404be2c 	.word	0x2404be2c
 80038fc:	2404bdac 	.word	0x2404bdac
 8003900:	24000000 	.word	0x24000000
 8003904:	2404bd28 	.word	0x2404bd28
 8003908:	2404bdb0 	.word	0x2404bdb0

0800390c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_MspInit+0x30>)
 8003914:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003918:	4a08      	ldr	r2, [pc, #32]	; (800393c <HAL_MspInit+0x30>)
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_MspInit+0x30>)
 8003924:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	58024400 	.word	0x58024400

08003940 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08e      	sub	sp, #56	; 0x38
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a72      	ldr	r2, [pc, #456]	; (8003b28 <HAL_DCMI_MspInit+0x1e8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	f040 80dd 	bne.w	8003b1e <HAL_DCMI_MspInit+0x1de>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003964:	4b71      	ldr	r3, [pc, #452]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 8003966:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800396a:	4a70      	ldr	r2, [pc, #448]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8003974:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 8003976:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 8003984:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003988:	4a68      	ldr	r2, [pc, #416]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003992:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 8003994:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039a0:	4b62      	ldr	r3, [pc, #392]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039a6:	4a61      	ldr	r2, [pc, #388]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80039be:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039c4:	4a59      	ldr	r2, [pc, #356]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039ce:	4b57      	ldr	r3, [pc, #348]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039e2:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039e4:	f043 0304 	orr.w	r3, r3, #4
 80039e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039ec:	4b4f      	ldr	r3, [pc, #316]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fa:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 80039fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003a0a:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <HAL_DCMI_MspInit+0x1ec>)
 8003a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PH12     ------> DCMI_D3
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
 8003a18:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a2a:	230d      	movs	r3, #13
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a32:	4619      	mov	r1, r3
 8003a34:	483e      	ldr	r0, [pc, #248]	; (8003b30 <HAL_DCMI_MspInit+0x1f0>)
 8003a36:	f004 fd41 	bl	80084bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a4c:	230d      	movs	r3, #13
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a54:	4619      	mov	r1, r3
 8003a56:	4837      	ldr	r0, [pc, #220]	; (8003b34 <HAL_DCMI_MspInit+0x1f4>)
 8003a58:	f004 fd30 	bl	80084bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8003a5c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a6e:	230d      	movs	r3, #13
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a76:	4619      	mov	r1, r3
 8003a78:	482f      	ldr	r0, [pc, #188]	; (8003b38 <HAL_DCMI_MspInit+0x1f8>)
 8003a7a:	f004 fd1f 	bl	80084bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003a7e:	23c0      	movs	r3, #192	; 0xc0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a82:	2302      	movs	r3, #2
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a8e:	230d      	movs	r3, #13
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a96:	4619      	mov	r1, r3
 8003a98:	4828      	ldr	r0, [pc, #160]	; (8003b3c <HAL_DCMI_MspInit+0x1fc>)
 8003a9a:	f004 fd0f 	bl	80084bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003a9e:	2350      	movs	r3, #80	; 0x50
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003aae:	230d      	movs	r3, #13
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4821      	ldr	r0, [pc, #132]	; (8003b40 <HAL_DCMI_MspInit+0x200>)
 8003aba:	f004 fcff 	bl	80084bc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8003abe:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003ac0:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <HAL_DCMI_MspInit+0x208>)
 8003ac2:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8003ac4:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003ac6:	224b      	movs	r2, #75	; 0x4b
 8003ac8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003adc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ae4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003ae8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aec:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003b02:	4810      	ldr	r0, [pc, #64]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003b04:	f000 ff1a 	bl	800493c <HAL_DMA_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8003b0e:	f7fd fa65 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003b16:	649a      	str	r2, [r3, #72]	; 0x48
 8003b18:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_DCMI_MspInit+0x204>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003b1e:	bf00      	nop
 8003b20:	3738      	adds	r7, #56	; 0x38
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	48020000 	.word	0x48020000
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	58020400 	.word	0x58020400
 8003b34:	58021800 	.word	0x58021800
 8003b38:	58021c00 	.word	0x58021c00
 8003b3c:	58020800 	.word	0x58020800
 8003b40:	58020000 	.word	0x58020000
 8003b44:	240000d4 	.word	0x240000d4
 8003b48:	40020428 	.word	0x40020428

08003b4c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <HAL_DMA2D_MspInit+0x48>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d116      	bne.n	8003b8c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_DMA2D_MspInit+0x4c>)
 8003b60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003b64:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <HAL_DMA2D_MspInit+0x4c>)
 8003b66:	f043 0310 	orr.w	r3, r3, #16
 8003b6a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_DMA2D_MspInit+0x4c>)
 8003b70:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2100      	movs	r1, #0
 8003b80:	205a      	movs	r0, #90	; 0x5a
 8003b82:	f000 fc4c 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003b86:	205a      	movs	r0, #90	; 0x5a
 8003b88:	f000 fc63 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	52001000 	.word	0x52001000
 8003b98:	58024400 	.word	0x58024400

08003b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b0ba      	sub	sp, #232	; 0xe8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bb4:	f107 0310 	add.w	r3, r7, #16
 8003bb8:	22c0      	movs	r2, #192	; 0xc0
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00b fb4b 	bl	800f258 <memset>
  if(hi2c->Instance==I2C4)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <HAL_I2C_MspInit+0xe8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d156      	bne.n	8003c7a <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003bcc:	f04f 0210 	mov.w	r2, #16
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bde:	f107 0310 	add.w	r3, r7, #16
 8003be2:	4618      	mov	r0, r3
 8003be4:	f007 fca8 	bl	800b538 <HAL_RCCEx_PeriphCLKConfig>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003bee:	f7fd f9f5 	bl	8000fdc <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bf2:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_I2C_MspInit+0xec>)
 8003bf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <HAL_I2C_MspInit+0xec>)
 8003bfa:	f043 0308 	orr.w	r3, r3, #8
 8003bfe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_I2C_MspInit+0xec>)
 8003c04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8003c10:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c18:	2312      	movs	r3, #18
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4815      	ldr	r0, [pc, #84]	; (8003c8c <HAL_I2C_MspInit+0xf0>)
 8003c38:	f004 fc40 	bl	80084bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_I2C_MspInit+0xec>)
 8003c3e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c42:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_I2C_MspInit+0xec>)
 8003c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c48:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_I2C_MspInit+0xec>)
 8003c4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	205f      	movs	r0, #95	; 0x5f
 8003c60:	f000 fbdd 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8003c64:	205f      	movs	r0, #95	; 0x5f
 8003c66:	f000 fbf4 	bl	8004452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	2060      	movs	r0, #96	; 0x60
 8003c70:	f000 fbd5 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8003c74:	2060      	movs	r0, #96	; 0x60
 8003c76:	f000 fbec 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003c7a:	bf00      	nop
 8003c7c:	37e8      	adds	r7, #232	; 0xe8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	58001c00 	.word	0x58001c00
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	58020c00 	.word	0x58020c00

08003c90 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0f      	ldr	r2, [pc, #60]	; (8003cdc <HAL_I2C_MspDeInit+0x4c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d117      	bne.n	8003cd2 <HAL_I2C_MspDeInit+0x42>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_I2C_MspDeInit+0x50>)
 8003ca4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <HAL_I2C_MspDeInit+0x50>)
 8003caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(I2C4_SDA_GPIO_Port, I2C4_SDA_Pin);
 8003cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cb6:	480b      	ldr	r0, [pc, #44]	; (8003ce4 <HAL_I2C_MspDeInit+0x54>)
 8003cb8:	f004 fdb0 	bl	800881c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C4_SCL_GPIO_Port, I2C4_SCL_Pin);
 8003cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cc0:	4808      	ldr	r0, [pc, #32]	; (8003ce4 <HAL_I2C_MspDeInit+0x54>)
 8003cc2:	f004 fdab 	bl	800881c <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8003cc6:	205f      	movs	r0, #95	; 0x5f
 8003cc8:	f000 fbd1 	bl	800446e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8003ccc:	2060      	movs	r0, #96	; 0x60
 8003cce:	f000 fbce 	bl	800446e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	58001c00 	.word	0x58001c00
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	58020c00 	.word	0x58020c00

08003ce8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b0b2      	sub	sp, #200	; 0xc8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	22c0      	movs	r2, #192	; 0xc0
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f00b faad 	bl	800f258 <memset>
  if(hrtc->Instance==RTC)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <HAL_RTC_MspInit+0x5c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d119      	bne.n	8003d3c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d1c:	f107 0308 	add.w	r3, r7, #8
 8003d20:	4618      	mov	r0, r3
 8003d22:	f007 fc09 	bl	800b538 <HAL_RCCEx_PeriphCLKConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003d2c:	f7fd f956 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RTC_MspInit+0x60>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_RTC_MspInit+0x60>)
 8003d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d3c:	bf00      	nop
 8003d3e:	37c8      	adds	r7, #200	; 0xc8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	58004000 	.word	0x58004000
 8003d48:	58024400 	.word	0x58024400

08003d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b0ba      	sub	sp, #232	; 0xe8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d64:	f107 0310 	add.w	r3, r7, #16
 8003d68:	22c0      	movs	r2, #192	; 0xc0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f00b fa73 	bl	800f258 <memset>
  if(huart->Instance==USART1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <HAL_UART_MspInit+0xd8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d14e      	bne.n	8003e1a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d7c:	f04f 0201 	mov.w	r2, #1
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	4618      	mov	r0, r3
 8003d94:	f007 fbd0 	bl	800b538 <HAL_RCCEx_PeriphCLKConfig>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003d9e:	f7fd f91d 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_UART_MspInit+0xdc>)
 8003da4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003da8:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_UART_MspInit+0xdc>)
 8003daa:	f043 0310 	orr.w	r3, r3, #16
 8003dae:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <HAL_UART_MspInit+0xdc>)
 8003db4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_UART_MspInit+0xdc>)
 8003dc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003dc6:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <HAL_UART_MspInit+0xdc>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003dd0:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <HAL_UART_MspInit+0xdc>)
 8003dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8003dde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de6:	2302      	movs	r3, #2
 8003de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003df8:	2307      	movs	r3, #7
 8003dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4809      	ldr	r0, [pc, #36]	; (8003e2c <HAL_UART_MspInit+0xe0>)
 8003e06:	f004 fb59 	bl	80084bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	2025      	movs	r0, #37	; 0x25
 8003e10:	f000 fb05 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e14:	2025      	movs	r0, #37	; 0x25
 8003e16:	f000 fb1c 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e1a:	bf00      	nop
 8003e1c:	37e8      	adds	r7, #232	; 0xe8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40011000 	.word	0x40011000
 8003e28:	58024400 	.word	0x58024400
 8003e2c:	58020000 	.word	0x58020000

08003e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e34:	e7fe      	b.n	8003e34 <NMI_Handler+0x4>

08003e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e3a:	e7fe      	b.n	8003e3a <HardFault_Handler+0x4>

08003e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e40:	e7fe      	b.n	8003e40 <MemManage_Handler+0x4>

08003e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e46:	e7fe      	b.n	8003e46 <BusFault_Handler+0x4>

08003e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e4c:	e7fe      	b.n	8003e4c <UsageFault_Handler+0x4>

08003e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e7c:	f000 f98c 	bl	8004198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e88:	4802      	ldr	r0, [pc, #8]	; (8003e94 <USART1_IRQHandler+0x10>)
 8003e8a:	f009 fbf9 	bl	800d680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	24000230 	.word	0x24000230

08003e98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003e9c:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <DMA2_Stream1_IRQHandler+0x10>)
 8003e9e:	f002 f8ab 	bl	8005ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	240000d4 	.word	0x240000d4

08003eac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003eb0:	4802      	ldr	r0, [pc, #8]	; (8003ebc <DMA2D_IRQHandler+0x10>)
 8003eb2:	f003 fc95 	bl	80077e0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	2400014c 	.word	0x2400014c

08003ec0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8003ec4:	4802      	ldr	r0, [pc, #8]	; (8003ed0 <I2C4_EV_IRQHandler+0x10>)
 8003ec6:	f005 f8bb 	bl	8009040 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	240001b4 	.word	0x240001b4

08003ed4 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8003ed8:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <I2C4_ER_IRQHandler+0x10>)
 8003eda:	f005 f8cb 	bl	8009074 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	240001b4 	.word	0x240001b4

08003ee8 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <_sbrk+0x5c>)
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <_sbrk+0x60>)
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <_sbrk+0x64>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <_sbrk+0x64>)
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <_sbrk+0x68>)
 8003f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <_sbrk+0x64>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d207      	bcs.n	8003f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f34:	f00b f966 	bl	800f204 <__errno>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f42:	e009      	b.n	8003f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <_sbrk+0x64>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <_sbrk+0x64>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <_sbrk+0x64>)
 8003f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	24100000 	.word	0x24100000
 8003f64:	00000400 	.word	0x00000400
 8003f68:	2404be54 	.word	0x2404be54
 8003f6c:	2404be70 	.word	0x2404be70

08003f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f74:	4b32      	ldr	r3, [pc, #200]	; (8004040 <SystemInit+0xd0>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	4a31      	ldr	r2, [pc, #196]	; (8004040 <SystemInit+0xd0>)
 8003f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <SystemInit+0xd4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d807      	bhi.n	8003fa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <SystemInit+0xd4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 030f 	bic.w	r3, r3, #15
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <SystemInit+0xd4>)
 8003f9a:	f043 0303 	orr.w	r3, r3, #3
 8003f9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <SystemInit+0xd8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <SystemInit+0xd8>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fac:	4b26      	ldr	r3, [pc, #152]	; (8004048 <SystemInit+0xd8>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fb2:	4b25      	ldr	r3, [pc, #148]	; (8004048 <SystemInit+0xd8>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4924      	ldr	r1, [pc, #144]	; (8004048 <SystemInit+0xd8>)
 8003fb8:	4b24      	ldr	r3, [pc, #144]	; (800404c <SystemInit+0xdc>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <SystemInit+0xd4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <SystemInit+0xd4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 030f 	bic.w	r3, r3, #15
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <SystemInit+0xd4>)
 8003fd4:	f043 0303 	orr.w	r3, r3, #3
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <SystemInit+0xd8>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <SystemInit+0xd8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <SystemInit+0xd8>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <SystemInit+0xd8>)
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <SystemInit+0xe0>)
 8003ff0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <SystemInit+0xd8>)
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <SystemInit+0xe4>)
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ff8:	4b13      	ldr	r3, [pc, #76]	; (8004048 <SystemInit+0xd8>)
 8003ffa:	4a17      	ldr	r2, [pc, #92]	; (8004058 <SystemInit+0xe8>)
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <SystemInit+0xd8>)
 8004000:	2200      	movs	r2, #0
 8004002:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <SystemInit+0xd8>)
 8004006:	4a14      	ldr	r2, [pc, #80]	; (8004058 <SystemInit+0xe8>)
 8004008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <SystemInit+0xd8>)
 800400c:	2200      	movs	r2, #0
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <SystemInit+0xd8>)
 8004012:	4a11      	ldr	r2, [pc, #68]	; (8004058 <SystemInit+0xe8>)
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <SystemInit+0xd8>)
 8004018:	2200      	movs	r2, #0
 800401a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <SystemInit+0xd8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a09      	ldr	r2, [pc, #36]	; (8004048 <SystemInit+0xd8>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <SystemInit+0xd8>)
 800402a:	2200      	movs	r2, #0
 800402c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <SystemInit+0xec>)
 8004030:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004034:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00
 8004044:	52002000 	.word	0x52002000
 8004048:	58024400 	.word	0x58024400
 800404c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004050:	02020200 	.word	0x02020200
 8004054:	01ff0000 	.word	0x01ff0000
 8004058:	01010280 	.word	0x01010280
 800405c:	52004000 	.word	0x52004000

08004060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004064:	f7ff ff84 	bl	8003f70 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004068:	480c      	ldr	r0, [pc, #48]	; (800409c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800406a:	490d      	ldr	r1, [pc, #52]	; (80040a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800406c:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800406e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004070:	e002      	b.n	8004078 <LoopCopyDataInit>

08004072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004076:	3304      	adds	r3, #4

08004078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800407a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800407c:	d3f9      	bcc.n	8004072 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407e:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004080:	4c0a      	ldr	r4, [pc, #40]	; (80040ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8004082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004084:	e001      	b.n	800408a <LoopFillZerobss>

08004086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004088:	3204      	adds	r2, #4

0800408a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800408a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800408c:	d3fb      	bcc.n	8004086 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800408e:	f00b f8bf 	bl	800f210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004092:	f7fc faff 	bl	8000694 <main>
  bx  lr
 8004096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004098:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800409c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040a0:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80040a4:	08010a38 	.word	0x08010a38
  ldr r2, =_sbss
 80040a8:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80040ac:	2404be6c 	.word	0x2404be6c

080040b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b0:	e7fe      	b.n	80040b0 <ADC_IRQHandler>
	...

080040b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ba:	2003      	movs	r0, #3
 80040bc:	f000 f9a4 	bl	8004408 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80040c0:	f007 f864 	bl	800b18c <HAL_RCC_GetSysClockFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_Init+0x68>)
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	4913      	ldr	r1, [pc, #76]	; (8004120 <HAL_Init+0x6c>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
 80040dc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_Init+0x68>)
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <HAL_Init+0x6c>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
 80040f4:	4a0b      	ldr	r2, [pc, #44]	; (8004124 <HAL_Init+0x70>)
 80040f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040f8:	4a0b      	ldr	r2, [pc, #44]	; (8004128 <HAL_Init+0x74>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040fe:	2000      	movs	r0, #0
 8004100:	f000 f814 	bl	800412c <HAL_InitTick>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e002      	b.n	8004114 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800410e:	f7ff fbfd 	bl	800390c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	58024400 	.word	0x58024400
 8004120:	08010950 	.word	0x08010950
 8004124:	24000048 	.word	0x24000048
 8004128:	24000044 	.word	0x24000044

0800412c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <HAL_InitTick+0x60>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e021      	b.n	8004184 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_InitTick+0x64>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_InitTick+0x60>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	4619      	mov	r1, r3
 800414a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800414e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f997 	bl	800448a <HAL_SYSTICK_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e00e      	b.n	8004184 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b0f      	cmp	r3, #15
 800416a:	d80a      	bhi.n	8004182 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800416c:	2200      	movs	r2, #0
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004174:	f000 f953 	bl	800441e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004178:	4a06      	ldr	r2, [pc, #24]	; (8004194 <HAL_InitTick+0x68>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	24000050 	.word	0x24000050
 8004190:	24000044 	.word	0x24000044
 8004194:	2400004c 	.word	0x2400004c

08004198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_IncTick+0x20>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_IncTick+0x24>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <HAL_IncTick+0x24>)
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	24000050 	.word	0x24000050
 80041bc:	2404be58 	.word	0x2404be58

080041c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return uwTick;
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_GetTick+0x14>)
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	2404be58 	.word	0x2404be58

080041d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff ffee 	bl	80041c0 <HAL_GetTick>
 80041e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f0:	d005      	beq.n	80041fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_Delay+0x44>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041fe:	bf00      	nop
 8004200:	f7ff ffde 	bl	80041c0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	429a      	cmp	r2, r3
 800420e:	d8f7      	bhi.n	8004200 <HAL_Delay+0x28>
  {
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	24000050 	.word	0x24000050

08004220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <__NVIC_SetPriorityGrouping+0x40>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424e:	4a04      	ldr	r2, [pc, #16]	; (8004260 <__NVIC_SetPriorityGrouping+0x40>)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	60d3      	str	r3, [r2, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00
 8004264:	05fa0000 	.word	0x05fa0000

08004268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <__NVIC_GetPriorityGrouping+0x18>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0307 	and.w	r3, r3, #7
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <__NVIC_EnableIRQ+0x38>)
 800429e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db12      	blt.n	80042f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	490a      	ldr	r1, [pc, #40]	; (8004304 <__NVIC_DisableIRQ+0x44>)
 80042da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2001      	movs	r0, #1
 80042e2:	fa00 f202 	lsl.w	r2, r0, r2
 80042e6:	3320      	adds	r3, #32
 80042e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042ec:	f3bf 8f4f 	dsb	sy
}
 80042f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042f2:	f3bf 8f6f 	isb	sy
}
 80042f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000e100 	.word	0xe000e100

08004308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	; (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	; 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	bf28      	it	cs
 800437a:	2304      	movcs	r3, #4
 800437c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3304      	adds	r3, #4
 8004382:	2b06      	cmp	r3, #6
 8004384:	d902      	bls.n	800438c <NVIC_EncodePriority+0x30>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3b03      	subs	r3, #3
 800438a:	e000      	b.n	800438e <NVIC_EncodePriority+0x32>
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	401a      	ands	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43d9      	mvns	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b4:	4313      	orrs	r3, r2
         );
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3724      	adds	r7, #36	; 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d4:	d301      	bcc.n	80043da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00f      	b.n	80043fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <SysTick_Config+0x40>)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043e2:	210f      	movs	r1, #15
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043e8:	f7ff ff8e 	bl	8004308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <SysTick_Config+0x40>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <SysTick_Config+0x40>)
 80043f4:	2207      	movs	r2, #7
 80043f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000e010 	.word	0xe000e010

08004408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff05 	bl	8004220 <__NVIC_SetPriorityGrouping>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff ff1c 	bl	8004268 <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff90 	bl	800435c <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff5f 	bl	8004308 <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff0f 	bl	8004284 <__NVIC_EnableIRQ>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff1f 	bl	80042c0 <__NVIC_DisableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ff96 	bl	80043c4 <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e069      	b.n	800458a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fa3c 	bl	8003940 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <HAL_DCMI_Init+0xf0>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004502:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800450e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800451a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004526:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004532:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b10      	cmp	r3, #16
 8004542:	d112      	bne.n	800456a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7f1b      	ldrb	r3, [r3, #28]
 8004548:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7f5b      	ldrb	r3, [r3, #29]
 800454e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004550:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	7f9b      	ldrb	r3, [r3, #30]
 8004556:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004558:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7fdb      	ldrb	r3, [r3, #31]
 8004560:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004566:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004568:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 021e 	orr.w	r2, r2, #30
 8004578:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	ffe0f007 	.word	0xffe0f007

08004598 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_DCMI_Start_DMA+0x1c>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e0ab      	b.n	800470c <HAL_DCMI_Start_DMA+0x174>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0202 	bic.w	r2, r2, #2
 80045e2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f8:	4a46      	ldr	r2, [pc, #280]	; (8004714 <HAL_DCMI_Start_DMA+0x17c>)
 80045fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004600:	4a45      	ldr	r2, [pc, #276]	; (8004718 <HAL_DCMI_Start_DMA+0x180>)
 8004602:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	2200      	movs	r2, #0
 800460a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462a:	d219      	bcs.n	8004660 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3328      	adds	r3, #40	; 0x28
 8004636:	4619      	mov	r1, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	f000 fd0e 	bl	800505c <HAL_DMA_Start_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d055      	beq.n	80046f2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e055      	b.n	800470c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004664:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <HAL_DCMI_Start_DMA+0x17c>)
 8004666:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800467a:	e009      	b.n	8004690 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	085a      	lsrs	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	005a      	lsls	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d2f0      	bcs.n	800467c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	1e9a      	subs	r2, r3, #2
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3328      	adds	r3, #40	; 0x28
 80046c2:	4619      	mov	r1, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	f003 fa45 	bl	8007b5c <HAL_DMAEx_MultiBufferStart_IT>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2240      	movs	r2, #64	; 0x40
 80046dc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e00c      	b.n	800470c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	080047dd 	.word	0x080047dd
 8004718:	08004903 	.word	0x08004903

0800471c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004724:	4b2b      	ldr	r3, [pc, #172]	; (80047d4 <HAL_DCMI_Stop+0xb8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <HAL_DCMI_Stop+0xbc>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	0a5b      	lsrs	r3, r3, #9
 8004730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_DCMI_Stop+0x30>
 8004748:	2302      	movs	r3, #2
 800474a:	e03f      	b.n	80047cc <HAL_DCMI_Stop+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3b01      	subs	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	72fb      	strb	r3, [r7, #11]
      break;
 8004788:	e006      	b.n	8004798 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e9      	bne.n	800476c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047a6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 febf 	bl	8005530 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80047ca:	7afb      	ldrb	r3, [r7, #11]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	24000044 	.word	0x24000044
 80047d8:	10624dd3 	.word	0x10624dd3

080047dc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d043      	beq.n	800487a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047fe:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d118      	bne.n	800483e <DCMI_DMAXferCplt+0x62>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d015      	beq.n	800483e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	00da      	lsls	r2, r3, #3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	2200      	movs	r2, #0
 800482c:	4619      	mov	r1, r3
 800482e:	f003 fcf3 	bl	8008218 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
 800483c:	e044      	b.n	80048c8 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d13c      	bne.n	80048c8 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	00da      	lsls	r2, r3, #3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4413      	add	r3, r2
 8004866:	2201      	movs	r2, #1
 8004868:	4619      	mov	r1, r3
 800486a:	f003 fcd5 	bl	8008218 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
 8004878:	e026      	b.n	80048c8 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	e017      	b.n	80048c8 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10f      	bne.n	80048c8 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	0099      	lsls	r1, r3, #2
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	440a      	add	r2, r1
 80048be:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d112      	bne.n	80048fa <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d103      	bne.n	80048fa <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	2b02      	cmp	r3, #2
 8004918:	d009      	beq.n	800492e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7fe fe06 	bl	8003540 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004944:	f7ff fc3c 	bl	80041c0 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e37f      	b.n	8005054 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a66      	ldr	r2, [pc, #408]	; (8004af4 <HAL_DMA_Init+0x1b8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04a      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a65      	ldr	r2, [pc, #404]	; (8004af8 <HAL_DMA_Init+0x1bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d045      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a63      	ldr	r2, [pc, #396]	; (8004afc <HAL_DMA_Init+0x1c0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d040      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a62      	ldr	r2, [pc, #392]	; (8004b00 <HAL_DMA_Init+0x1c4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d03b      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a60      	ldr	r2, [pc, #384]	; (8004b04 <HAL_DMA_Init+0x1c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d036      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <HAL_DMA_Init+0x1cc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d031      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5d      	ldr	r2, [pc, #372]	; (8004b0c <HAL_DMA_Init+0x1d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02c      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a5c      	ldr	r2, [pc, #368]	; (8004b10 <HAL_DMA_Init+0x1d4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d027      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5a      	ldr	r2, [pc, #360]	; (8004b14 <HAL_DMA_Init+0x1d8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d022      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a59      	ldr	r2, [pc, #356]	; (8004b18 <HAL_DMA_Init+0x1dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d01d      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a57      	ldr	r2, [pc, #348]	; (8004b1c <HAL_DMA_Init+0x1e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d018      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a56      	ldr	r2, [pc, #344]	; (8004b20 <HAL_DMA_Init+0x1e4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a54      	ldr	r2, [pc, #336]	; (8004b24 <HAL_DMA_Init+0x1e8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a53      	ldr	r2, [pc, #332]	; (8004b28 <HAL_DMA_Init+0x1ec>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a51      	ldr	r2, [pc, #324]	; (8004b2c <HAL_DMA_Init+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a50      	ldr	r2, [pc, #320]	; (8004b30 <HAL_DMA_Init+0x1f4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_DMA_Init+0xbc>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_DMA_Init+0xbe>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 813c 	beq.w	8004c78 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a37      	ldr	r2, [pc, #220]	; (8004af4 <HAL_DMA_Init+0x1b8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d04a      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a36      	ldr	r2, [pc, #216]	; (8004af8 <HAL_DMA_Init+0x1bc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d045      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a34      	ldr	r2, [pc, #208]	; (8004afc <HAL_DMA_Init+0x1c0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d040      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a33      	ldr	r2, [pc, #204]	; (8004b00 <HAL_DMA_Init+0x1c4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d03b      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a31      	ldr	r2, [pc, #196]	; (8004b04 <HAL_DMA_Init+0x1c8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d036      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <HAL_DMA_Init+0x1cc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d031      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <HAL_DMA_Init+0x1d0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02c      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <HAL_DMA_Init+0x1d4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d027      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <HAL_DMA_Init+0x1d8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <HAL_DMA_Init+0x1dc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <HAL_DMA_Init+0x1e0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <HAL_DMA_Init+0x1e4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <HAL_DMA_Init+0x1e8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <HAL_DMA_Init+0x1ec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <HAL_DMA_Init+0x1f0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <HAL_DMA_Init+0x1f4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <HAL_DMA_Init+0x186>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <HAL_DMA_Init+0x196>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ad2:	e02f      	b.n	8004b34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad4:	f7ff fb74 	bl	80041c0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d928      	bls.n	8004b34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2203      	movs	r2, #3
 8004aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e2af      	b.n	8005054 <HAL_DMA_Init+0x718>
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1c8      	bne.n	8004ad4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <HAL_DMA_Init+0x3e0>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d107      	bne.n	8004b98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4313      	orrs	r3, r2
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b28      	cmp	r3, #40	; 0x28
 8004b9e:	d903      	bls.n	8004ba8 <HAL_DMA_Init+0x26c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba6:	d91f      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b3e      	cmp	r3, #62	; 0x3e
 8004bae:	d903      	bls.n	8004bb8 <HAL_DMA_Init+0x27c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b42      	cmp	r3, #66	; 0x42
 8004bb6:	d917      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b46      	cmp	r3, #70	; 0x46
 8004bbe:	d903      	bls.n	8004bc8 <HAL_DMA_Init+0x28c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b48      	cmp	r3, #72	; 0x48
 8004bc6:	d90f      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b4e      	cmp	r3, #78	; 0x4e
 8004bce:	d903      	bls.n	8004bd8 <HAL_DMA_Init+0x29c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b52      	cmp	r3, #82	; 0x52
 8004bd6:	d907      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b73      	cmp	r3, #115	; 0x73
 8004bde:	d905      	bls.n	8004bec <HAL_DMA_Init+0x2b0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b77      	cmp	r3, #119	; 0x77
 8004be6:	d801      	bhi.n	8004bec <HAL_DMA_Init+0x2b0>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_DMA_Init+0x2b2>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 0307 	bic.w	r3, r3, #7
 8004c10:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d117      	bne.n	8004c54 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f002 fbe4 	bl	8007404 <DMA_CheckFifoParam>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2240      	movs	r2, #64	; 0x40
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e1ff      	b.n	8005054 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f002 fb1f 	bl	80072a0 <DMA_CalcBaseAndBitshift>
 8004c62:	4603      	mov	r3, r0
 8004c64:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	223f      	movs	r2, #63	; 0x3f
 8004c70:	409a      	lsls	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	609a      	str	r2, [r3, #8]
 8004c76:	e0fe      	b.n	8004e76 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <HAL_DMA_Init+0x3e4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d04a      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <HAL_DMA_Init+0x3e8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d045      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <HAL_DMA_Init+0x3ec>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d040      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a24      	ldr	r2, [pc, #144]	; (8004d2c <HAL_DMA_Init+0x3f0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d03b      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <HAL_DMA_Init+0x3f4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d036      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <HAL_DMA_Init+0x3f8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d031      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <HAL_DMA_Init+0x3fc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02c      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_DMA_Init+0x400>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d027      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <HAL_DMA_Init+0x404>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <HAL_DMA_Init+0x408>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d01d      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_DMA_Init+0x40c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <HAL_DMA_Init+0x410>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_DMA_Init+0x414>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <HAL_DMA_Init+0x418>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <HAL_DMA_Init+0x41c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_DMA_Init+0x3dc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <HAL_DMA_Init+0x420>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d123      	bne.n	8004d60 <HAL_DMA_Init+0x424>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e022      	b.n	8004d62 <HAL_DMA_Init+0x426>
 8004d1c:	fe10803f 	.word	0xfe10803f
 8004d20:	48022c08 	.word	0x48022c08
 8004d24:	48022c1c 	.word	0x48022c1c
 8004d28:	48022c30 	.word	0x48022c30
 8004d2c:	48022c44 	.word	0x48022c44
 8004d30:	48022c58 	.word	0x48022c58
 8004d34:	48022c6c 	.word	0x48022c6c
 8004d38:	48022c80 	.word	0x48022c80
 8004d3c:	48022c94 	.word	0x48022c94
 8004d40:	58025408 	.word	0x58025408
 8004d44:	5802541c 	.word	0x5802541c
 8004d48:	58025430 	.word	0x58025430
 8004d4c:	58025444 	.word	0x58025444
 8004d50:	58025458 	.word	0x58025458
 8004d54:	5802546c 	.word	0x5802546c
 8004d58:	58025480 	.word	0x58025480
 8004d5c:	58025494 	.word	0x58025494
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d07e      	beq.n	8004e64 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a80      	ldr	r2, [pc, #512]	; (8004f6c <HAL_DMA_Init+0x630>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d021      	beq.n	8004db4 <HAL_DMA_Init+0x478>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a7e      	ldr	r2, [pc, #504]	; (8004f70 <HAL_DMA_Init+0x634>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01c      	beq.n	8004db4 <HAL_DMA_Init+0x478>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a7d      	ldr	r2, [pc, #500]	; (8004f74 <HAL_DMA_Init+0x638>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d017      	beq.n	8004db4 <HAL_DMA_Init+0x478>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a7b      	ldr	r2, [pc, #492]	; (8004f78 <HAL_DMA_Init+0x63c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d012      	beq.n	8004db4 <HAL_DMA_Init+0x478>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a7a      	ldr	r2, [pc, #488]	; (8004f7c <HAL_DMA_Init+0x640>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00d      	beq.n	8004db4 <HAL_DMA_Init+0x478>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a78      	ldr	r2, [pc, #480]	; (8004f80 <HAL_DMA_Init+0x644>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d008      	beq.n	8004db4 <HAL_DMA_Init+0x478>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a77      	ldr	r2, [pc, #476]	; (8004f84 <HAL_DMA_Init+0x648>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <HAL_DMA_Init+0x478>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a75      	ldr	r2, [pc, #468]	; (8004f88 <HAL_DMA_Init+0x64c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <HAL_DMA_Init+0x650>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d008      	beq.n	8004df0 <HAL_DMA_Init+0x4b4>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b80      	cmp	r3, #128	; 0x80
 8004de4:	d102      	bne.n	8004dec <HAL_DMA_Init+0x4b0>
 8004de6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dea:	e002      	b.n	8004df2 <HAL_DMA_Init+0x4b6>
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <HAL_DMA_Init+0x4b6>
 8004df0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b56      	ldr	r3, [pc, #344]	; (8004f90 <HAL_DMA_Init+0x654>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	4a56      	ldr	r2, [pc, #344]	; (8004f94 <HAL_DMA_Init+0x658>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f002 fa29 	bl	80072a0 <DMA_CalcBaseAndBitshift>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	e008      	b.n	8004e76 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0ee      	b.n	8005054 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a47      	ldr	r2, [pc, #284]	; (8004f98 <HAL_DMA_Init+0x65c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d072      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a45      	ldr	r2, [pc, #276]	; (8004f9c <HAL_DMA_Init+0x660>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d06d      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a44      	ldr	r2, [pc, #272]	; (8004fa0 <HAL_DMA_Init+0x664>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d068      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a42      	ldr	r2, [pc, #264]	; (8004fa4 <HAL_DMA_Init+0x668>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d063      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a41      	ldr	r2, [pc, #260]	; (8004fa8 <HAL_DMA_Init+0x66c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d05e      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a3f      	ldr	r2, [pc, #252]	; (8004fac <HAL_DMA_Init+0x670>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d059      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a3e      	ldr	r2, [pc, #248]	; (8004fb0 <HAL_DMA_Init+0x674>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d054      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a3c      	ldr	r2, [pc, #240]	; (8004fb4 <HAL_DMA_Init+0x678>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d04f      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3b      	ldr	r2, [pc, #236]	; (8004fb8 <HAL_DMA_Init+0x67c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d04a      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a39      	ldr	r2, [pc, #228]	; (8004fbc <HAL_DMA_Init+0x680>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d045      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a38      	ldr	r2, [pc, #224]	; (8004fc0 <HAL_DMA_Init+0x684>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d040      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a36      	ldr	r2, [pc, #216]	; (8004fc4 <HAL_DMA_Init+0x688>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d03b      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a35      	ldr	r2, [pc, #212]	; (8004fc8 <HAL_DMA_Init+0x68c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d036      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <HAL_DMA_Init+0x690>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d031      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <HAL_DMA_Init+0x694>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d02c      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a30      	ldr	r2, [pc, #192]	; (8004fd4 <HAL_DMA_Init+0x698>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d027      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <HAL_DMA_Init+0x630>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <HAL_DMA_Init+0x634>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <HAL_DMA_Init+0x638>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0f      	ldr	r2, [pc, #60]	; (8004f78 <HAL_DMA_Init+0x63c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <HAL_DMA_Init+0x640>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <HAL_DMA_Init+0x644>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <HAL_DMA_Init+0x648>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_DMA_Init+0x62a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <HAL_DMA_Init+0x64c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d138      	bne.n	8004fd8 <HAL_DMA_Init+0x69c>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e037      	b.n	8004fda <HAL_DMA_Init+0x69e>
 8004f6a:	bf00      	nop
 8004f6c:	58025408 	.word	0x58025408
 8004f70:	5802541c 	.word	0x5802541c
 8004f74:	58025430 	.word	0x58025430
 8004f78:	58025444 	.word	0x58025444
 8004f7c:	58025458 	.word	0x58025458
 8004f80:	5802546c 	.word	0x5802546c
 8004f84:	58025480 	.word	0x58025480
 8004f88:	58025494 	.word	0x58025494
 8004f8c:	fffe000f 	.word	0xfffe000f
 8004f90:	a7fdabf8 	.word	0xa7fdabf8
 8004f94:	cccccccd 	.word	0xcccccccd
 8004f98:	40020010 	.word	0x40020010
 8004f9c:	40020028 	.word	0x40020028
 8004fa0:	40020040 	.word	0x40020040
 8004fa4:	40020058 	.word	0x40020058
 8004fa8:	40020070 	.word	0x40020070
 8004fac:	40020088 	.word	0x40020088
 8004fb0:	400200a0 	.word	0x400200a0
 8004fb4:	400200b8 	.word	0x400200b8
 8004fb8:	40020410 	.word	0x40020410
 8004fbc:	40020428 	.word	0x40020428
 8004fc0:	40020440 	.word	0x40020440
 8004fc4:	40020458 	.word	0x40020458
 8004fc8:	40020470 	.word	0x40020470
 8004fcc:	40020488 	.word	0x40020488
 8004fd0:	400204a0 	.word	0x400204a0
 8004fd4:	400204b8 	.word	0x400204b8
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d032      	beq.n	8005044 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f002 fa8c 	bl	80074fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b80      	cmp	r3, #128	; 0x80
 8004fea:	d102      	bne.n	8004ff2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005006:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d010      	beq.n	8005032 <HAL_DMA_Init+0x6f6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d80c      	bhi.n	8005032 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f002 fb09 	bl	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	e008      	b.n	8005044 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e226      	b.n	80054c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_DMA_Start_IT+0x2a>
 8005082:	2302      	movs	r3, #2
 8005084:	e21f      	b.n	80054c6 <HAL_DMA_Start_IT+0x46a>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	f040 820a 	bne.w	80054b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a68      	ldr	r2, [pc, #416]	; (8005250 <HAL_DMA_Start_IT+0x1f4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d04a      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a66      	ldr	r2, [pc, #408]	; (8005254 <HAL_DMA_Start_IT+0x1f8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d045      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a65      	ldr	r2, [pc, #404]	; (8005258 <HAL_DMA_Start_IT+0x1fc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d040      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a63      	ldr	r2, [pc, #396]	; (800525c <HAL_DMA_Start_IT+0x200>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03b      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a62      	ldr	r2, [pc, #392]	; (8005260 <HAL_DMA_Start_IT+0x204>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d036      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a60      	ldr	r2, [pc, #384]	; (8005264 <HAL_DMA_Start_IT+0x208>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d031      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5f      	ldr	r2, [pc, #380]	; (8005268 <HAL_DMA_Start_IT+0x20c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d02c      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5d      	ldr	r2, [pc, #372]	; (800526c <HAL_DMA_Start_IT+0x210>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d027      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a5c      	ldr	r2, [pc, #368]	; (8005270 <HAL_DMA_Start_IT+0x214>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5a      	ldr	r2, [pc, #360]	; (8005274 <HAL_DMA_Start_IT+0x218>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01d      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a59      	ldr	r2, [pc, #356]	; (8005278 <HAL_DMA_Start_IT+0x21c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a57      	ldr	r2, [pc, #348]	; (800527c <HAL_DMA_Start_IT+0x220>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a56      	ldr	r2, [pc, #344]	; (8005280 <HAL_DMA_Start_IT+0x224>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a54      	ldr	r2, [pc, #336]	; (8005284 <HAL_DMA_Start_IT+0x228>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a53      	ldr	r2, [pc, #332]	; (8005288 <HAL_DMA_Start_IT+0x22c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_DMA_Start_IT+0xee>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a51      	ldr	r2, [pc, #324]	; (800528c <HAL_DMA_Start_IT+0x230>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d108      	bne.n	800515c <HAL_DMA_Start_IT+0x100>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e007      	b.n	800516c <HAL_DMA_Start_IT+0x110>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f001 feb0 	bl	8006ed8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a34      	ldr	r2, [pc, #208]	; (8005250 <HAL_DMA_Start_IT+0x1f4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d04a      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a33      	ldr	r2, [pc, #204]	; (8005254 <HAL_DMA_Start_IT+0x1f8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d045      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a31      	ldr	r2, [pc, #196]	; (8005258 <HAL_DMA_Start_IT+0x1fc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d040      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a30      	ldr	r2, [pc, #192]	; (800525c <HAL_DMA_Start_IT+0x200>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d03b      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a2e      	ldr	r2, [pc, #184]	; (8005260 <HAL_DMA_Start_IT+0x204>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d036      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <HAL_DMA_Start_IT+0x208>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d031      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <HAL_DMA_Start_IT+0x20c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d02c      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2a      	ldr	r2, [pc, #168]	; (800526c <HAL_DMA_Start_IT+0x210>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d027      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a28      	ldr	r2, [pc, #160]	; (8005270 <HAL_DMA_Start_IT+0x214>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a27      	ldr	r2, [pc, #156]	; (8005274 <HAL_DMA_Start_IT+0x218>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01d      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a25      	ldr	r2, [pc, #148]	; (8005278 <HAL_DMA_Start_IT+0x21c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a24      	ldr	r2, [pc, #144]	; (800527c <HAL_DMA_Start_IT+0x220>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a22      	ldr	r2, [pc, #136]	; (8005280 <HAL_DMA_Start_IT+0x224>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a21      	ldr	r2, [pc, #132]	; (8005284 <HAL_DMA_Start_IT+0x228>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <HAL_DMA_Start_IT+0x22c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_DMA_Start_IT+0x1bc>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_DMA_Start_IT+0x230>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_DMA_Start_IT+0x1c0>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_DMA_Start_IT+0x1c2>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d036      	beq.n	8005290 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 021e 	bic.w	r2, r3, #30
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0216 	orr.w	r2, r2, #22
 8005234:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d03e      	beq.n	80052bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0208 	orr.w	r2, r2, #8
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e035      	b.n	80052bc <HAL_DMA_Start_IT+0x260>
 8005250:	40020010 	.word	0x40020010
 8005254:	40020028 	.word	0x40020028
 8005258:	40020040 	.word	0x40020040
 800525c:	40020058 	.word	0x40020058
 8005260:	40020070 	.word	0x40020070
 8005264:	40020088 	.word	0x40020088
 8005268:	400200a0 	.word	0x400200a0
 800526c:	400200b8 	.word	0x400200b8
 8005270:	40020410 	.word	0x40020410
 8005274:	40020428 	.word	0x40020428
 8005278:	40020440 	.word	0x40020440
 800527c:	40020458 	.word	0x40020458
 8005280:	40020470 	.word	0x40020470
 8005284:	40020488 	.word	0x40020488
 8005288:	400204a0 	.word	0x400204a0
 800528c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f023 020e 	bic.w	r2, r3, #14
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 020a 	orr.w	r2, r2, #10
 80052a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0204 	orr.w	r2, r2, #4
 80052ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a83      	ldr	r2, [pc, #524]	; (80054d0 <HAL_DMA_Start_IT+0x474>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d072      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a82      	ldr	r2, [pc, #520]	; (80054d4 <HAL_DMA_Start_IT+0x478>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d06d      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a80      	ldr	r2, [pc, #512]	; (80054d8 <HAL_DMA_Start_IT+0x47c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d068      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7f      	ldr	r2, [pc, #508]	; (80054dc <HAL_DMA_Start_IT+0x480>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d063      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a7d      	ldr	r2, [pc, #500]	; (80054e0 <HAL_DMA_Start_IT+0x484>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d05e      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a7c      	ldr	r2, [pc, #496]	; (80054e4 <HAL_DMA_Start_IT+0x488>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d059      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a7a      	ldr	r2, [pc, #488]	; (80054e8 <HAL_DMA_Start_IT+0x48c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d054      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a79      	ldr	r2, [pc, #484]	; (80054ec <HAL_DMA_Start_IT+0x490>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d04f      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a77      	ldr	r2, [pc, #476]	; (80054f0 <HAL_DMA_Start_IT+0x494>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d04a      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a76      	ldr	r2, [pc, #472]	; (80054f4 <HAL_DMA_Start_IT+0x498>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d045      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a74      	ldr	r2, [pc, #464]	; (80054f8 <HAL_DMA_Start_IT+0x49c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d040      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a73      	ldr	r2, [pc, #460]	; (80054fc <HAL_DMA_Start_IT+0x4a0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d03b      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a71      	ldr	r2, [pc, #452]	; (8005500 <HAL_DMA_Start_IT+0x4a4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d036      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a70      	ldr	r2, [pc, #448]	; (8005504 <HAL_DMA_Start_IT+0x4a8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d031      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a6e      	ldr	r2, [pc, #440]	; (8005508 <HAL_DMA_Start_IT+0x4ac>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d02c      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6d      	ldr	r2, [pc, #436]	; (800550c <HAL_DMA_Start_IT+0x4b0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d027      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a6b      	ldr	r2, [pc, #428]	; (8005510 <HAL_DMA_Start_IT+0x4b4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d022      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a6a      	ldr	r2, [pc, #424]	; (8005514 <HAL_DMA_Start_IT+0x4b8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d01d      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a68      	ldr	r2, [pc, #416]	; (8005518 <HAL_DMA_Start_IT+0x4bc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d018      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a67      	ldr	r2, [pc, #412]	; (800551c <HAL_DMA_Start_IT+0x4c0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a65      	ldr	r2, [pc, #404]	; (8005520 <HAL_DMA_Start_IT+0x4c4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00e      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a64      	ldr	r2, [pc, #400]	; (8005524 <HAL_DMA_Start_IT+0x4c8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d009      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a62      	ldr	r2, [pc, #392]	; (8005528 <HAL_DMA_Start_IT+0x4cc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_DMA_Start_IT+0x350>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a61      	ldr	r2, [pc, #388]	; (800552c <HAL_DMA_Start_IT+0x4d0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d101      	bne.n	80053b0 <HAL_DMA_Start_IT+0x354>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <HAL_DMA_Start_IT+0x356>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01a      	beq.n	80053ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a37      	ldr	r2, [pc, #220]	; (80054d0 <HAL_DMA_Start_IT+0x474>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04a      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a36      	ldr	r2, [pc, #216]	; (80054d4 <HAL_DMA_Start_IT+0x478>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d045      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a34      	ldr	r2, [pc, #208]	; (80054d8 <HAL_DMA_Start_IT+0x47c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d040      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a33      	ldr	r2, [pc, #204]	; (80054dc <HAL_DMA_Start_IT+0x480>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d03b      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a31      	ldr	r2, [pc, #196]	; (80054e0 <HAL_DMA_Start_IT+0x484>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d036      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <HAL_DMA_Start_IT+0x488>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d031      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <HAL_DMA_Start_IT+0x48c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d02c      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <HAL_DMA_Start_IT+0x490>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d027      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2b      	ldr	r2, [pc, #172]	; (80054f0 <HAL_DMA_Start_IT+0x494>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <HAL_DMA_Start_IT+0x498>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01d      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <HAL_DMA_Start_IT+0x49c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <HAL_DMA_Start_IT+0x4a0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a25      	ldr	r2, [pc, #148]	; (8005500 <HAL_DMA_Start_IT+0x4a4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a24      	ldr	r2, [pc, #144]	; (8005504 <HAL_DMA_Start_IT+0x4a8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a22      	ldr	r2, [pc, #136]	; (8005508 <HAL_DMA_Start_IT+0x4ac>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_DMA_Start_IT+0x430>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a21      	ldr	r2, [pc, #132]	; (800550c <HAL_DMA_Start_IT+0x4b0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d108      	bne.n	800549e <HAL_DMA_Start_IT+0x442>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e012      	b.n	80054c4 <HAL_DMA_Start_IT+0x468>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e009      	b.n	80054c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40020010 	.word	0x40020010
 80054d4:	40020028 	.word	0x40020028
 80054d8:	40020040 	.word	0x40020040
 80054dc:	40020058 	.word	0x40020058
 80054e0:	40020070 	.word	0x40020070
 80054e4:	40020088 	.word	0x40020088
 80054e8:	400200a0 	.word	0x400200a0
 80054ec:	400200b8 	.word	0x400200b8
 80054f0:	40020410 	.word	0x40020410
 80054f4:	40020428 	.word	0x40020428
 80054f8:	40020440 	.word	0x40020440
 80054fc:	40020458 	.word	0x40020458
 8005500:	40020470 	.word	0x40020470
 8005504:	40020488 	.word	0x40020488
 8005508:	400204a0 	.word	0x400204a0
 800550c:	400204b8 	.word	0x400204b8
 8005510:	58025408 	.word	0x58025408
 8005514:	5802541c 	.word	0x5802541c
 8005518:	58025430 	.word	0x58025430
 800551c:	58025444 	.word	0x58025444
 8005520:	58025458 	.word	0x58025458
 8005524:	5802546c 	.word	0x5802546c
 8005528:	58025480 	.word	0x58025480
 800552c:	58025494 	.word	0x58025494

08005530 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005538:	f7fe fe42 	bl	80041c0 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e2dc      	b.n	8005b02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d008      	beq.n	8005566 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2280      	movs	r2, #128	; 0x80
 8005558:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e2cd      	b.n	8005b02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a76      	ldr	r2, [pc, #472]	; (8005744 <HAL_DMA_Abort+0x214>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d04a      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a74      	ldr	r2, [pc, #464]	; (8005748 <HAL_DMA_Abort+0x218>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d045      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a73      	ldr	r2, [pc, #460]	; (800574c <HAL_DMA_Abort+0x21c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d040      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a71      	ldr	r2, [pc, #452]	; (8005750 <HAL_DMA_Abort+0x220>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d03b      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a70      	ldr	r2, [pc, #448]	; (8005754 <HAL_DMA_Abort+0x224>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d036      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a6e      	ldr	r2, [pc, #440]	; (8005758 <HAL_DMA_Abort+0x228>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d031      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a6d      	ldr	r2, [pc, #436]	; (800575c <HAL_DMA_Abort+0x22c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d02c      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6b      	ldr	r2, [pc, #428]	; (8005760 <HAL_DMA_Abort+0x230>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d027      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6a      	ldr	r2, [pc, #424]	; (8005764 <HAL_DMA_Abort+0x234>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a68      	ldr	r2, [pc, #416]	; (8005768 <HAL_DMA_Abort+0x238>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01d      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a67      	ldr	r2, [pc, #412]	; (800576c <HAL_DMA_Abort+0x23c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a65      	ldr	r2, [pc, #404]	; (8005770 <HAL_DMA_Abort+0x240>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a64      	ldr	r2, [pc, #400]	; (8005774 <HAL_DMA_Abort+0x244>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a62      	ldr	r2, [pc, #392]	; (8005778 <HAL_DMA_Abort+0x248>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a61      	ldr	r2, [pc, #388]	; (800577c <HAL_DMA_Abort+0x24c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_DMA_Abort+0xd6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a5f      	ldr	r2, [pc, #380]	; (8005780 <HAL_DMA_Abort+0x250>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_DMA_Abort+0xda>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_DMA_Abort+0xdc>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 021e 	bic.w	r2, r2, #30
 800561e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e00a      	b.n	800564e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 020e 	bic.w	r2, r2, #14
 8005646:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a3c      	ldr	r2, [pc, #240]	; (8005744 <HAL_DMA_Abort+0x214>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d072      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a3a      	ldr	r2, [pc, #232]	; (8005748 <HAL_DMA_Abort+0x218>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d06d      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a39      	ldr	r2, [pc, #228]	; (800574c <HAL_DMA_Abort+0x21c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d068      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a37      	ldr	r2, [pc, #220]	; (8005750 <HAL_DMA_Abort+0x220>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d063      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a36      	ldr	r2, [pc, #216]	; (8005754 <HAL_DMA_Abort+0x224>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d05e      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a34      	ldr	r2, [pc, #208]	; (8005758 <HAL_DMA_Abort+0x228>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d059      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a33      	ldr	r2, [pc, #204]	; (800575c <HAL_DMA_Abort+0x22c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d054      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a31      	ldr	r2, [pc, #196]	; (8005760 <HAL_DMA_Abort+0x230>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d04f      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a30      	ldr	r2, [pc, #192]	; (8005764 <HAL_DMA_Abort+0x234>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d04a      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2e      	ldr	r2, [pc, #184]	; (8005768 <HAL_DMA_Abort+0x238>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d045      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2d      	ldr	r2, [pc, #180]	; (800576c <HAL_DMA_Abort+0x23c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d040      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2b      	ldr	r2, [pc, #172]	; (8005770 <HAL_DMA_Abort+0x240>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d03b      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <HAL_DMA_Abort+0x244>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d036      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a28      	ldr	r2, [pc, #160]	; (8005778 <HAL_DMA_Abort+0x248>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d031      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a27      	ldr	r2, [pc, #156]	; (800577c <HAL_DMA_Abort+0x24c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d02c      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a25      	ldr	r2, [pc, #148]	; (8005780 <HAL_DMA_Abort+0x250>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d027      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a24      	ldr	r2, [pc, #144]	; (8005784 <HAL_DMA_Abort+0x254>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a22      	ldr	r2, [pc, #136]	; (8005788 <HAL_DMA_Abort+0x258>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01d      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a21      	ldr	r2, [pc, #132]	; (800578c <HAL_DMA_Abort+0x25c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <HAL_DMA_Abort+0x260>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <HAL_DMA_Abort+0x264>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <HAL_DMA_Abort+0x268>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_DMA_Abort+0x26c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_DMA_Abort+0x20e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <HAL_DMA_Abort+0x270>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d132      	bne.n	80057a4 <HAL_DMA_Abort+0x274>
 800573e:	2301      	movs	r3, #1
 8005740:	e031      	b.n	80057a6 <HAL_DMA_Abort+0x276>
 8005742:	bf00      	nop
 8005744:	40020010 	.word	0x40020010
 8005748:	40020028 	.word	0x40020028
 800574c:	40020040 	.word	0x40020040
 8005750:	40020058 	.word	0x40020058
 8005754:	40020070 	.word	0x40020070
 8005758:	40020088 	.word	0x40020088
 800575c:	400200a0 	.word	0x400200a0
 8005760:	400200b8 	.word	0x400200b8
 8005764:	40020410 	.word	0x40020410
 8005768:	40020428 	.word	0x40020428
 800576c:	40020440 	.word	0x40020440
 8005770:	40020458 	.word	0x40020458
 8005774:	40020470 	.word	0x40020470
 8005778:	40020488 	.word	0x40020488
 800577c:	400204a0 	.word	0x400204a0
 8005780:	400204b8 	.word	0x400204b8
 8005784:	58025408 	.word	0x58025408
 8005788:	5802541c 	.word	0x5802541c
 800578c:	58025430 	.word	0x58025430
 8005790:	58025444 	.word	0x58025444
 8005794:	58025458 	.word	0x58025458
 8005798:	5802546c 	.word	0x5802546c
 800579c:	58025480 	.word	0x58025480
 80057a0:	58025494 	.word	0x58025494
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a6d      	ldr	r2, [pc, #436]	; (8005974 <HAL_DMA_Abort+0x444>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d04a      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a6b      	ldr	r2, [pc, #428]	; (8005978 <HAL_DMA_Abort+0x448>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d045      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6a      	ldr	r2, [pc, #424]	; (800597c <HAL_DMA_Abort+0x44c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d040      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a68      	ldr	r2, [pc, #416]	; (8005980 <HAL_DMA_Abort+0x450>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d03b      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a67      	ldr	r2, [pc, #412]	; (8005984 <HAL_DMA_Abort+0x454>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d036      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a65      	ldr	r2, [pc, #404]	; (8005988 <HAL_DMA_Abort+0x458>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d031      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a64      	ldr	r2, [pc, #400]	; (800598c <HAL_DMA_Abort+0x45c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d02c      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a62      	ldr	r2, [pc, #392]	; (8005990 <HAL_DMA_Abort+0x460>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d027      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a61      	ldr	r2, [pc, #388]	; (8005994 <HAL_DMA_Abort+0x464>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d022      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a5f      	ldr	r2, [pc, #380]	; (8005998 <HAL_DMA_Abort+0x468>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01d      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a5e      	ldr	r2, [pc, #376]	; (800599c <HAL_DMA_Abort+0x46c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a5c      	ldr	r2, [pc, #368]	; (80059a0 <HAL_DMA_Abort+0x470>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a5b      	ldr	r2, [pc, #364]	; (80059a4 <HAL_DMA_Abort+0x474>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a59      	ldr	r2, [pc, #356]	; (80059a8 <HAL_DMA_Abort+0x478>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a58      	ldr	r2, [pc, #352]	; (80059ac <HAL_DMA_Abort+0x47c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_DMA_Abort+0x32a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a56      	ldr	r2, [pc, #344]	; (80059b0 <HAL_DMA_Abort+0x480>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <HAL_DMA_Abort+0x33c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e007      	b.n	800587c <HAL_DMA_Abort+0x34c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0201 	bic.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800587c:	e013      	b.n	80058a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800587e:	f7fe fc9f 	bl	80041c0 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b05      	cmp	r3, #5
 800588a:	d90c      	bls.n	80058a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e12d      	b.n	8005b02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <HAL_DMA_Abort+0x444>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d04a      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	; (8005978 <HAL_DMA_Abort+0x448>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d045      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2c      	ldr	r2, [pc, #176]	; (800597c <HAL_DMA_Abort+0x44c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d040      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <HAL_DMA_Abort+0x450>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d03b      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a29      	ldr	r2, [pc, #164]	; (8005984 <HAL_DMA_Abort+0x454>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d036      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <HAL_DMA_Abort+0x458>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d031      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a26      	ldr	r2, [pc, #152]	; (800598c <HAL_DMA_Abort+0x45c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d02c      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a24      	ldr	r2, [pc, #144]	; (8005990 <HAL_DMA_Abort+0x460>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d027      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a23      	ldr	r2, [pc, #140]	; (8005994 <HAL_DMA_Abort+0x464>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d022      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <HAL_DMA_Abort+0x468>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01d      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a20      	ldr	r2, [pc, #128]	; (800599c <HAL_DMA_Abort+0x46c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d018      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <HAL_DMA_Abort+0x470>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <HAL_DMA_Abort+0x474>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1b      	ldr	r2, [pc, #108]	; (80059a8 <HAL_DMA_Abort+0x478>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <HAL_DMA_Abort+0x47c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_DMA_Abort+0x422>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_DMA_Abort+0x480>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_DMA_Abort+0x426>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_DMA_Abort+0x428>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d02b      	beq.n	80059b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	223f      	movs	r2, #63	; 0x3f
 800596c:	409a      	lsls	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	e02a      	b.n	80059ca <HAL_DMA_Abort+0x49a>
 8005974:	40020010 	.word	0x40020010
 8005978:	40020028 	.word	0x40020028
 800597c:	40020040 	.word	0x40020040
 8005980:	40020058 	.word	0x40020058
 8005984:	40020070 	.word	0x40020070
 8005988:	40020088 	.word	0x40020088
 800598c:	400200a0 	.word	0x400200a0
 8005990:	400200b8 	.word	0x400200b8
 8005994:	40020410 	.word	0x40020410
 8005998:	40020428 	.word	0x40020428
 800599c:	40020440 	.word	0x40020440
 80059a0:	40020458 	.word	0x40020458
 80059a4:	40020470 	.word	0x40020470
 80059a8:	40020488 	.word	0x40020488
 80059ac:	400204a0 	.word	0x400204a0
 80059b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2201      	movs	r2, #1
 80059c4:	409a      	lsls	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4f      	ldr	r2, [pc, #316]	; (8005b0c <HAL_DMA_Abort+0x5dc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d072      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a4d      	ldr	r2, [pc, #308]	; (8005b10 <HAL_DMA_Abort+0x5e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d06d      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a4c      	ldr	r2, [pc, #304]	; (8005b14 <HAL_DMA_Abort+0x5e4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d068      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a4a      	ldr	r2, [pc, #296]	; (8005b18 <HAL_DMA_Abort+0x5e8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d063      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a49      	ldr	r2, [pc, #292]	; (8005b1c <HAL_DMA_Abort+0x5ec>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d05e      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a47      	ldr	r2, [pc, #284]	; (8005b20 <HAL_DMA_Abort+0x5f0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d059      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a46      	ldr	r2, [pc, #280]	; (8005b24 <HAL_DMA_Abort+0x5f4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d054      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a44      	ldr	r2, [pc, #272]	; (8005b28 <HAL_DMA_Abort+0x5f8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d04f      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a43      	ldr	r2, [pc, #268]	; (8005b2c <HAL_DMA_Abort+0x5fc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d04a      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a41      	ldr	r2, [pc, #260]	; (8005b30 <HAL_DMA_Abort+0x600>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d045      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a40      	ldr	r2, [pc, #256]	; (8005b34 <HAL_DMA_Abort+0x604>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d040      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3e      	ldr	r2, [pc, #248]	; (8005b38 <HAL_DMA_Abort+0x608>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d03b      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <HAL_DMA_Abort+0x60c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d036      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a3b      	ldr	r2, [pc, #236]	; (8005b40 <HAL_DMA_Abort+0x610>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d031      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3a      	ldr	r2, [pc, #232]	; (8005b44 <HAL_DMA_Abort+0x614>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d02c      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a38      	ldr	r2, [pc, #224]	; (8005b48 <HAL_DMA_Abort+0x618>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d027      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a37      	ldr	r2, [pc, #220]	; (8005b4c <HAL_DMA_Abort+0x61c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d022      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a35      	ldr	r2, [pc, #212]	; (8005b50 <HAL_DMA_Abort+0x620>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01d      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a34      	ldr	r2, [pc, #208]	; (8005b54 <HAL_DMA_Abort+0x624>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d018      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a32      	ldr	r2, [pc, #200]	; (8005b58 <HAL_DMA_Abort+0x628>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d013      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a31      	ldr	r2, [pc, #196]	; (8005b5c <HAL_DMA_Abort+0x62c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00e      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2f      	ldr	r2, [pc, #188]	; (8005b60 <HAL_DMA_Abort+0x630>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2e      	ldr	r2, [pc, #184]	; (8005b64 <HAL_DMA_Abort+0x634>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_DMA_Abort+0x58a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2c      	ldr	r2, [pc, #176]	; (8005b68 <HAL_DMA_Abort+0x638>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <HAL_DMA_Abort+0x58e>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_DMA_Abort+0x590>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d015      	beq.n	8005af0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005acc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00c      	beq.n	8005af0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8
 8005b4c:	58025408 	.word	0x58025408
 8005b50:	5802541c 	.word	0x5802541c
 8005b54:	58025430 	.word	0x58025430
 8005b58:	58025444 	.word	0x58025444
 8005b5c:	58025458 	.word	0x58025458
 8005b60:	5802546c 	.word	0x5802546c
 8005b64:	58025480 	.word	0x58025480
 8005b68:	58025494 	.word	0x58025494

08005b6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e237      	b.n	8005fee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d004      	beq.n	8005b94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e22c      	b.n	8005fee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5c      	ldr	r2, [pc, #368]	; (8005d0c <HAL_DMA_Abort_IT+0x1a0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d04a      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a5b      	ldr	r2, [pc, #364]	; (8005d10 <HAL_DMA_Abort_IT+0x1a4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d045      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a59      	ldr	r2, [pc, #356]	; (8005d14 <HAL_DMA_Abort_IT+0x1a8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d040      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a58      	ldr	r2, [pc, #352]	; (8005d18 <HAL_DMA_Abort_IT+0x1ac>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d03b      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a56      	ldr	r2, [pc, #344]	; (8005d1c <HAL_DMA_Abort_IT+0x1b0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d036      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a55      	ldr	r2, [pc, #340]	; (8005d20 <HAL_DMA_Abort_IT+0x1b4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d031      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a53      	ldr	r2, [pc, #332]	; (8005d24 <HAL_DMA_Abort_IT+0x1b8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02c      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a52      	ldr	r2, [pc, #328]	; (8005d28 <HAL_DMA_Abort_IT+0x1bc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d027      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a50      	ldr	r2, [pc, #320]	; (8005d2c <HAL_DMA_Abort_IT+0x1c0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d022      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4f      	ldr	r2, [pc, #316]	; (8005d30 <HAL_DMA_Abort_IT+0x1c4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d01d      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a4d      	ldr	r2, [pc, #308]	; (8005d34 <HAL_DMA_Abort_IT+0x1c8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d018      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a4c      	ldr	r2, [pc, #304]	; (8005d38 <HAL_DMA_Abort_IT+0x1cc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a4a      	ldr	r2, [pc, #296]	; (8005d3c <HAL_DMA_Abort_IT+0x1d0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a49      	ldr	r2, [pc, #292]	; (8005d40 <HAL_DMA_Abort_IT+0x1d4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a47      	ldr	r2, [pc, #284]	; (8005d44 <HAL_DMA_Abort_IT+0x1d8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_DMA_Abort_IT+0xc8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a46      	ldr	r2, [pc, #280]	; (8005d48 <HAL_DMA_Abort_IT+0x1dc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d101      	bne.n	8005c38 <HAL_DMA_Abort_IT+0xcc>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_DMA_Abort_IT+0xce>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8086 	beq.w	8005d4c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2204      	movs	r2, #4
 8005c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2f      	ldr	r2, [pc, #188]	; (8005d0c <HAL_DMA_Abort_IT+0x1a0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d04a      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2e      	ldr	r2, [pc, #184]	; (8005d10 <HAL_DMA_Abort_IT+0x1a4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d045      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a2c      	ldr	r2, [pc, #176]	; (8005d14 <HAL_DMA_Abort_IT+0x1a8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d040      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <HAL_DMA_Abort_IT+0x1ac>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d03b      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <HAL_DMA_Abort_IT+0x1b0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d036      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <HAL_DMA_Abort_IT+0x1b4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d031      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a26      	ldr	r2, [pc, #152]	; (8005d24 <HAL_DMA_Abort_IT+0x1b8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d02c      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <HAL_DMA_Abort_IT+0x1bc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d027      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <HAL_DMA_Abort_IT+0x1c0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d022      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <HAL_DMA_Abort_IT+0x1c4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d01d      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a20      	ldr	r2, [pc, #128]	; (8005d34 <HAL_DMA_Abort_IT+0x1c8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d018      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_DMA_Abort_IT+0x1cc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <HAL_DMA_Abort_IT+0x1d0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00e      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_DMA_Abort_IT+0x1d4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d009      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <HAL_DMA_Abort_IT+0x1d8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0x17c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <HAL_DMA_Abort_IT+0x1dc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <HAL_DMA_Abort_IT+0x18e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e178      	b.n	8005fec <HAL_DMA_Abort_IT+0x480>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e16f      	b.n	8005fec <HAL_DMA_Abort_IT+0x480>
 8005d0c:	40020010 	.word	0x40020010
 8005d10:	40020028 	.word	0x40020028
 8005d14:	40020040 	.word	0x40020040
 8005d18:	40020058 	.word	0x40020058
 8005d1c:	40020070 	.word	0x40020070
 8005d20:	40020088 	.word	0x40020088
 8005d24:	400200a0 	.word	0x400200a0
 8005d28:	400200b8 	.word	0x400200b8
 8005d2c:	40020410 	.word	0x40020410
 8005d30:	40020428 	.word	0x40020428
 8005d34:	40020440 	.word	0x40020440
 8005d38:	40020458 	.word	0x40020458
 8005d3c:	40020470 	.word	0x40020470
 8005d40:	40020488 	.word	0x40020488
 8005d44:	400204a0 	.word	0x400204a0
 8005d48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 020e 	bic.w	r2, r2, #14
 8005d5a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a6c      	ldr	r2, [pc, #432]	; (8005f14 <HAL_DMA_Abort_IT+0x3a8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04a      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a6b      	ldr	r2, [pc, #428]	; (8005f18 <HAL_DMA_Abort_IT+0x3ac>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d045      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a69      	ldr	r2, [pc, #420]	; (8005f1c <HAL_DMA_Abort_IT+0x3b0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d040      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a68      	ldr	r2, [pc, #416]	; (8005f20 <HAL_DMA_Abort_IT+0x3b4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d03b      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a66      	ldr	r2, [pc, #408]	; (8005f24 <HAL_DMA_Abort_IT+0x3b8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d036      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a65      	ldr	r2, [pc, #404]	; (8005f28 <HAL_DMA_Abort_IT+0x3bc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d031      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a63      	ldr	r2, [pc, #396]	; (8005f2c <HAL_DMA_Abort_IT+0x3c0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a62      	ldr	r2, [pc, #392]	; (8005f30 <HAL_DMA_Abort_IT+0x3c4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d027      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a60      	ldr	r2, [pc, #384]	; (8005f34 <HAL_DMA_Abort_IT+0x3c8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a5f      	ldr	r2, [pc, #380]	; (8005f38 <HAL_DMA_Abort_IT+0x3cc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a5d      	ldr	r2, [pc, #372]	; (8005f3c <HAL_DMA_Abort_IT+0x3d0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a5c      	ldr	r2, [pc, #368]	; (8005f40 <HAL_DMA_Abort_IT+0x3d4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a5a      	ldr	r2, [pc, #360]	; (8005f44 <HAL_DMA_Abort_IT+0x3d8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a59      	ldr	r2, [pc, #356]	; (8005f48 <HAL_DMA_Abort_IT+0x3dc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a57      	ldr	r2, [pc, #348]	; (8005f4c <HAL_DMA_Abort_IT+0x3e0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x290>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a56      	ldr	r2, [pc, #344]	; (8005f50 <HAL_DMA_Abort_IT+0x3e4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <HAL_DMA_Abort_IT+0x2a2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e007      	b.n	8005e1e <HAL_DMA_Abort_IT+0x2b2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3c      	ldr	r2, [pc, #240]	; (8005f14 <HAL_DMA_Abort_IT+0x3a8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d072      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3a      	ldr	r2, [pc, #232]	; (8005f18 <HAL_DMA_Abort_IT+0x3ac>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d06d      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a39      	ldr	r2, [pc, #228]	; (8005f1c <HAL_DMA_Abort_IT+0x3b0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d068      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a37      	ldr	r2, [pc, #220]	; (8005f20 <HAL_DMA_Abort_IT+0x3b4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d063      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a36      	ldr	r2, [pc, #216]	; (8005f24 <HAL_DMA_Abort_IT+0x3b8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d05e      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a34      	ldr	r2, [pc, #208]	; (8005f28 <HAL_DMA_Abort_IT+0x3bc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d059      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a33      	ldr	r2, [pc, #204]	; (8005f2c <HAL_DMA_Abort_IT+0x3c0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d054      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a31      	ldr	r2, [pc, #196]	; (8005f30 <HAL_DMA_Abort_IT+0x3c4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d04f      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a30      	ldr	r2, [pc, #192]	; (8005f34 <HAL_DMA_Abort_IT+0x3c8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d04a      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <HAL_DMA_Abort_IT+0x3cc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d045      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2d      	ldr	r2, [pc, #180]	; (8005f3c <HAL_DMA_Abort_IT+0x3d0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d040      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <HAL_DMA_Abort_IT+0x3d4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d03b      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <HAL_DMA_Abort_IT+0x3d8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d036      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a28      	ldr	r2, [pc, #160]	; (8005f48 <HAL_DMA_Abort_IT+0x3dc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d031      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a27      	ldr	r2, [pc, #156]	; (8005f4c <HAL_DMA_Abort_IT+0x3e0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d02c      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <HAL_DMA_Abort_IT+0x3e4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d027      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <HAL_DMA_Abort_IT+0x3e8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d022      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a22      	ldr	r2, [pc, #136]	; (8005f58 <HAL_DMA_Abort_IT+0x3ec>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01d      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <HAL_DMA_Abort_IT+0x3f0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d018      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <HAL_DMA_Abort_IT+0x3f4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <HAL_DMA_Abort_IT+0x3f8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <HAL_DMA_Abort_IT+0x3fc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <HAL_DMA_Abort_IT+0x400>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_DMA_Abort_IT+0x3a2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <HAL_DMA_Abort_IT+0x404>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d132      	bne.n	8005f74 <HAL_DMA_Abort_IT+0x408>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e031      	b.n	8005f76 <HAL_DMA_Abort_IT+0x40a>
 8005f12:	bf00      	nop
 8005f14:	40020010 	.word	0x40020010
 8005f18:	40020028 	.word	0x40020028
 8005f1c:	40020040 	.word	0x40020040
 8005f20:	40020058 	.word	0x40020058
 8005f24:	40020070 	.word	0x40020070
 8005f28:	40020088 	.word	0x40020088
 8005f2c:	400200a0 	.word	0x400200a0
 8005f30:	400200b8 	.word	0x400200b8
 8005f34:	40020410 	.word	0x40020410
 8005f38:	40020428 	.word	0x40020428
 8005f3c:	40020440 	.word	0x40020440
 8005f40:	40020458 	.word	0x40020458
 8005f44:	40020470 	.word	0x40020470
 8005f48:	40020488 	.word	0x40020488
 8005f4c:	400204a0 	.word	0x400204a0
 8005f50:	400204b8 	.word	0x400204b8
 8005f54:	58025408 	.word	0x58025408
 8005f58:	5802541c 	.word	0x5802541c
 8005f5c:	58025430 	.word	0x58025430
 8005f60:	58025444 	.word	0x58025444
 8005f64:	58025458 	.word	0x58025458
 8005f68:	5802546c 	.word	0x5802546c
 8005f6c:	58025480 	.word	0x58025480
 8005f70:	58025494 	.word	0x58025494
 8005f74:	2300      	movs	r3, #0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d028      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	2201      	movs	r2, #1
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fa8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00c      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop

08005ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006004:	4b67      	ldr	r3, [pc, #412]	; (80061a4 <HAL_DMA_IRQHandler+0x1ac>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a67      	ldr	r2, [pc, #412]	; (80061a8 <HAL_DMA_IRQHandler+0x1b0>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	0a9b      	lsrs	r3, r3, #10
 8006010:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006016:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a5f      	ldr	r2, [pc, #380]	; (80061ac <HAL_DMA_IRQHandler+0x1b4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d04a      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a5d      	ldr	r2, [pc, #372]	; (80061b0 <HAL_DMA_IRQHandler+0x1b8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d045      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5c      	ldr	r2, [pc, #368]	; (80061b4 <HAL_DMA_IRQHandler+0x1bc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d040      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a5a      	ldr	r2, [pc, #360]	; (80061b8 <HAL_DMA_IRQHandler+0x1c0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d03b      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a59      	ldr	r2, [pc, #356]	; (80061bc <HAL_DMA_IRQHandler+0x1c4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d036      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a57      	ldr	r2, [pc, #348]	; (80061c0 <HAL_DMA_IRQHandler+0x1c8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d031      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a56      	ldr	r2, [pc, #344]	; (80061c4 <HAL_DMA_IRQHandler+0x1cc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d02c      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a54      	ldr	r2, [pc, #336]	; (80061c8 <HAL_DMA_IRQHandler+0x1d0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d027      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a53      	ldr	r2, [pc, #332]	; (80061cc <HAL_DMA_IRQHandler+0x1d4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a51      	ldr	r2, [pc, #324]	; (80061d0 <HAL_DMA_IRQHandler+0x1d8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01d      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a50      	ldr	r2, [pc, #320]	; (80061d4 <HAL_DMA_IRQHandler+0x1dc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a4e      	ldr	r2, [pc, #312]	; (80061d8 <HAL_DMA_IRQHandler+0x1e0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a4d      	ldr	r2, [pc, #308]	; (80061dc <HAL_DMA_IRQHandler+0x1e4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a4b      	ldr	r2, [pc, #300]	; (80061e0 <HAL_DMA_IRQHandler+0x1e8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a4a      	ldr	r2, [pc, #296]	; (80061e4 <HAL_DMA_IRQHandler+0x1ec>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_DMA_IRQHandler+0xd2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a48      	ldr	r2, [pc, #288]	; (80061e8 <HAL_DMA_IRQHandler+0x1f0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d101      	bne.n	80060ce <HAL_DMA_IRQHandler+0xd6>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <HAL_DMA_IRQHandler+0xd8>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 842b 	beq.w	800692c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	2208      	movs	r2, #8
 80060e0:	409a      	lsls	r2, r3
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80a2 	beq.w	8006230 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2e      	ldr	r2, [pc, #184]	; (80061ac <HAL_DMA_IRQHandler+0x1b4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2d      	ldr	r2, [pc, #180]	; (80061b0 <HAL_DMA_IRQHandler+0x1b8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a2b      	ldr	r2, [pc, #172]	; (80061b4 <HAL_DMA_IRQHandler+0x1bc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2a      	ldr	r2, [pc, #168]	; (80061b8 <HAL_DMA_IRQHandler+0x1c0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a28      	ldr	r2, [pc, #160]	; (80061bc <HAL_DMA_IRQHandler+0x1c4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a27      	ldr	r2, [pc, #156]	; (80061c0 <HAL_DMA_IRQHandler+0x1c8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a25      	ldr	r2, [pc, #148]	; (80061c4 <HAL_DMA_IRQHandler+0x1cc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a24      	ldr	r2, [pc, #144]	; (80061c8 <HAL_DMA_IRQHandler+0x1d0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a22      	ldr	r2, [pc, #136]	; (80061cc <HAL_DMA_IRQHandler+0x1d4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <HAL_DMA_IRQHandler+0x1d8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <HAL_DMA_IRQHandler+0x1dc>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <HAL_DMA_IRQHandler+0x1e0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_DMA_IRQHandler+0x1e4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_DMA_IRQHandler+0x1e8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <HAL_DMA_IRQHandler+0x1ec>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_DMA_IRQHandler+0x194>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_DMA_IRQHandler+0x1f0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d12f      	bne.n	80061ec <HAL_DMA_IRQHandler+0x1f4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	bf14      	ite	ne
 800619a:	2301      	movne	r3, #1
 800619c:	2300      	moveq	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	e02e      	b.n	8006200 <HAL_DMA_IRQHandler+0x208>
 80061a2:	bf00      	nop
 80061a4:	24000044 	.word	0x24000044
 80061a8:	1b4e81b5 	.word	0x1b4e81b5
 80061ac:	40020010 	.word	0x40020010
 80061b0:	40020028 	.word	0x40020028
 80061b4:	40020040 	.word	0x40020040
 80061b8:	40020058 	.word	0x40020058
 80061bc:	40020070 	.word	0x40020070
 80061c0:	40020088 	.word	0x40020088
 80061c4:	400200a0 	.word	0x400200a0
 80061c8:	400200b8 	.word	0x400200b8
 80061cc:	40020410 	.word	0x40020410
 80061d0:	40020428 	.word	0x40020428
 80061d4:	40020440 	.word	0x40020440
 80061d8:	40020458 	.word	0x40020458
 80061dc:	40020470 	.word	0x40020470
 80061e0:	40020488 	.word	0x40020488
 80061e4:	400204a0 	.word	0x400204a0
 80061e8:	400204b8 	.word	0x400204b8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d015      	beq.n	8006230 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2208      	movs	r2, #8
 800621e:	409a      	lsls	r2, r3
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	fa22 f303 	lsr.w	r3, r2, r3
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d06e      	beq.n	8006324 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a69      	ldr	r2, [pc, #420]	; (80063f0 <HAL_DMA_IRQHandler+0x3f8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d04a      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a67      	ldr	r2, [pc, #412]	; (80063f4 <HAL_DMA_IRQHandler+0x3fc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d045      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a66      	ldr	r2, [pc, #408]	; (80063f8 <HAL_DMA_IRQHandler+0x400>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d040      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a64      	ldr	r2, [pc, #400]	; (80063fc <HAL_DMA_IRQHandler+0x404>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d03b      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a63      	ldr	r2, [pc, #396]	; (8006400 <HAL_DMA_IRQHandler+0x408>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d036      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a61      	ldr	r2, [pc, #388]	; (8006404 <HAL_DMA_IRQHandler+0x40c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d031      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a60      	ldr	r2, [pc, #384]	; (8006408 <HAL_DMA_IRQHandler+0x410>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d02c      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5e      	ldr	r2, [pc, #376]	; (800640c <HAL_DMA_IRQHandler+0x414>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d027      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a5d      	ldr	r2, [pc, #372]	; (8006410 <HAL_DMA_IRQHandler+0x418>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5b      	ldr	r2, [pc, #364]	; (8006414 <HAL_DMA_IRQHandler+0x41c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a5a      	ldr	r2, [pc, #360]	; (8006418 <HAL_DMA_IRQHandler+0x420>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a58      	ldr	r2, [pc, #352]	; (800641c <HAL_DMA_IRQHandler+0x424>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a57      	ldr	r2, [pc, #348]	; (8006420 <HAL_DMA_IRQHandler+0x428>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a55      	ldr	r2, [pc, #340]	; (8006424 <HAL_DMA_IRQHandler+0x42c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a54      	ldr	r2, [pc, #336]	; (8006428 <HAL_DMA_IRQHandler+0x430>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_DMA_IRQHandler+0x2ee>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a52      	ldr	r2, [pc, #328]	; (800642c <HAL_DMA_IRQHandler+0x434>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10a      	bne.n	80062fc <HAL_DMA_IRQHandler+0x304>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e003      	b.n	8006304 <HAL_DMA_IRQHandler+0x30c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00d      	beq.n	8006324 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631c:	f043 0202 	orr.w	r2, r3, #2
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2204      	movs	r2, #4
 800632e:	409a      	lsls	r2, r3
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 808f 	beq.w	8006458 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2c      	ldr	r2, [pc, #176]	; (80063f0 <HAL_DMA_IRQHandler+0x3f8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d04a      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a2a      	ldr	r2, [pc, #168]	; (80063f4 <HAL_DMA_IRQHandler+0x3fc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d045      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <HAL_DMA_IRQHandler+0x400>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d040      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a27      	ldr	r2, [pc, #156]	; (80063fc <HAL_DMA_IRQHandler+0x404>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d03b      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a26      	ldr	r2, [pc, #152]	; (8006400 <HAL_DMA_IRQHandler+0x408>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d036      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a24      	ldr	r2, [pc, #144]	; (8006404 <HAL_DMA_IRQHandler+0x40c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d031      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a23      	ldr	r2, [pc, #140]	; (8006408 <HAL_DMA_IRQHandler+0x410>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d02c      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a21      	ldr	r2, [pc, #132]	; (800640c <HAL_DMA_IRQHandler+0x414>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d027      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a20      	ldr	r2, [pc, #128]	; (8006410 <HAL_DMA_IRQHandler+0x418>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1e      	ldr	r2, [pc, #120]	; (8006414 <HAL_DMA_IRQHandler+0x41c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01d      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <HAL_DMA_IRQHandler+0x420>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d018      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1b      	ldr	r2, [pc, #108]	; (800641c <HAL_DMA_IRQHandler+0x424>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <HAL_DMA_IRQHandler+0x428>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a18      	ldr	r2, [pc, #96]	; (8006424 <HAL_DMA_IRQHandler+0x42c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <HAL_DMA_IRQHandler+0x430>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_DMA_IRQHandler+0x3e2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <HAL_DMA_IRQHandler+0x434>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d12a      	bne.n	8006430 <HAL_DMA_IRQHandler+0x438>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e023      	b.n	8006438 <HAL_DMA_IRQHandler+0x440>
 80063f0:	40020010 	.word	0x40020010
 80063f4:	40020028 	.word	0x40020028
 80063f8:	40020040 	.word	0x40020040
 80063fc:	40020058 	.word	0x40020058
 8006400:	40020070 	.word	0x40020070
 8006404:	40020088 	.word	0x40020088
 8006408:	400200a0 	.word	0x400200a0
 800640c:	400200b8 	.word	0x400200b8
 8006410:	40020410 	.word	0x40020410
 8006414:	40020428 	.word	0x40020428
 8006418:	40020440 	.word	0x40020440
 800641c:	40020458 	.word	0x40020458
 8006420:	40020470 	.word	0x40020470
 8006424:	40020488 	.word	0x40020488
 8006428:	400204a0 	.word	0x400204a0
 800642c:	400204b8 	.word	0x400204b8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00d      	beq.n	8006458 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2204      	movs	r2, #4
 8006446:	409a      	lsls	r2, r3
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006450:	f043 0204 	orr.w	r2, r3, #4
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	2210      	movs	r2, #16
 8006462:	409a      	lsls	r2, r3
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80a6 	beq.w	80065ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a85      	ldr	r2, [pc, #532]	; (8006688 <HAL_DMA_IRQHandler+0x690>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d04a      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a83      	ldr	r2, [pc, #524]	; (800668c <HAL_DMA_IRQHandler+0x694>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d045      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a82      	ldr	r2, [pc, #520]	; (8006690 <HAL_DMA_IRQHandler+0x698>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d040      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a80      	ldr	r2, [pc, #512]	; (8006694 <HAL_DMA_IRQHandler+0x69c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d03b      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a7f      	ldr	r2, [pc, #508]	; (8006698 <HAL_DMA_IRQHandler+0x6a0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d036      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a7d      	ldr	r2, [pc, #500]	; (800669c <HAL_DMA_IRQHandler+0x6a4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d031      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a7c      	ldr	r2, [pc, #496]	; (80066a0 <HAL_DMA_IRQHandler+0x6a8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d02c      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a7a      	ldr	r2, [pc, #488]	; (80066a4 <HAL_DMA_IRQHandler+0x6ac>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d027      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a79      	ldr	r2, [pc, #484]	; (80066a8 <HAL_DMA_IRQHandler+0x6b0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a77      	ldr	r2, [pc, #476]	; (80066ac <HAL_DMA_IRQHandler+0x6b4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01d      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a76      	ldr	r2, [pc, #472]	; (80066b0 <HAL_DMA_IRQHandler+0x6b8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a74      	ldr	r2, [pc, #464]	; (80066b4 <HAL_DMA_IRQHandler+0x6bc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a73      	ldr	r2, [pc, #460]	; (80066b8 <HAL_DMA_IRQHandler+0x6c0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a71      	ldr	r2, [pc, #452]	; (80066bc <HAL_DMA_IRQHandler+0x6c4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a70      	ldr	r2, [pc, #448]	; (80066c0 <HAL_DMA_IRQHandler+0x6c8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_DMA_IRQHandler+0x516>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a6e      	ldr	r2, [pc, #440]	; (80066c4 <HAL_DMA_IRQHandler+0x6cc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10a      	bne.n	8006524 <HAL_DMA_IRQHandler+0x52c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	e009      	b.n	8006538 <HAL_DMA_IRQHandler+0x540>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf14      	ite	ne
 8006532:	2301      	movne	r3, #1
 8006534:	2300      	moveq	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d03e      	beq.n	80065ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2210      	movs	r2, #16
 8006546:	409a      	lsls	r2, r3
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d018      	beq.n	800658c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d024      	beq.n	80065ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
 8006578:	e01f      	b.n	80065ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800657e:	2b00      	cmp	r3, #0
 8006580:	d01b      	beq.n	80065ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	e016      	b.n	80065ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d107      	bne.n	80065aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0208 	bic.w	r2, r2, #8
 80065a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2220      	movs	r2, #32
 80065c4:	409a      	lsls	r2, r3
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8110 	beq.w	80067f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a2c      	ldr	r2, [pc, #176]	; (8006688 <HAL_DMA_IRQHandler+0x690>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d04a      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a2b      	ldr	r2, [pc, #172]	; (800668c <HAL_DMA_IRQHandler+0x694>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d045      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a29      	ldr	r2, [pc, #164]	; (8006690 <HAL_DMA_IRQHandler+0x698>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d040      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a28      	ldr	r2, [pc, #160]	; (8006694 <HAL_DMA_IRQHandler+0x69c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d03b      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a26      	ldr	r2, [pc, #152]	; (8006698 <HAL_DMA_IRQHandler+0x6a0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d036      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a25      	ldr	r2, [pc, #148]	; (800669c <HAL_DMA_IRQHandler+0x6a4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d031      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a23      	ldr	r2, [pc, #140]	; (80066a0 <HAL_DMA_IRQHandler+0x6a8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d02c      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a22      	ldr	r2, [pc, #136]	; (80066a4 <HAL_DMA_IRQHandler+0x6ac>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d027      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a20      	ldr	r2, [pc, #128]	; (80066a8 <HAL_DMA_IRQHandler+0x6b0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d022      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1f      	ldr	r2, [pc, #124]	; (80066ac <HAL_DMA_IRQHandler+0x6b4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d01d      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <HAL_DMA_IRQHandler+0x6b8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1c      	ldr	r2, [pc, #112]	; (80066b4 <HAL_DMA_IRQHandler+0x6bc>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1a      	ldr	r2, [pc, #104]	; (80066b8 <HAL_DMA_IRQHandler+0x6c0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a19      	ldr	r2, [pc, #100]	; (80066bc <HAL_DMA_IRQHandler+0x6c4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <HAL_DMA_IRQHandler+0x6c8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_DMA_IRQHandler+0x678>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <HAL_DMA_IRQHandler+0x6cc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d12b      	bne.n	80066c8 <HAL_DMA_IRQHandler+0x6d0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b00      	cmp	r3, #0
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	e02a      	b.n	80066dc <HAL_DMA_IRQHandler+0x6e4>
 8006686:	bf00      	nop
 8006688:	40020010 	.word	0x40020010
 800668c:	40020028 	.word	0x40020028
 8006690:	40020040 	.word	0x40020040
 8006694:	40020058 	.word	0x40020058
 8006698:	40020070 	.word	0x40020070
 800669c:	40020088 	.word	0x40020088
 80066a0:	400200a0 	.word	0x400200a0
 80066a4:	400200b8 	.word	0x400200b8
 80066a8:	40020410 	.word	0x40020410
 80066ac:	40020428 	.word	0x40020428
 80066b0:	40020440 	.word	0x40020440
 80066b4:	40020458 	.word	0x40020458
 80066b8:	40020470 	.word	0x40020470
 80066bc:	40020488 	.word	0x40020488
 80066c0:	400204a0 	.word	0x400204a0
 80066c4:	400204b8 	.word	0x400204b8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bf14      	ite	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	2300      	moveq	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8087 	beq.w	80067f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2220      	movs	r2, #32
 80066ec:	409a      	lsls	r2, r3
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d139      	bne.n	8006772 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0216 	bic.w	r2, r2, #22
 800670c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695a      	ldr	r2, [r3, #20]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800671c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d103      	bne.n	800672e <HAL_DMA_IRQHandler+0x736>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0208 	bic.w	r2, r2, #8
 800673c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	223f      	movs	r2, #63	; 0x3f
 8006748:	409a      	lsls	r2, r3
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8382 	beq.w	8006e6c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
          }
          return;
 8006770:	e37c      	b.n	8006e6c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d018      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d108      	bne.n	80067a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	2b00      	cmp	r3, #0
 8006794:	d02c      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
 800679e:	e027      	b.n	80067f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d023      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
 80067b0:	e01e      	b.n	80067f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10f      	bne.n	80067e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0210 	bic.w	r2, r2, #16
 80067ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 833e 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8088 	beq.w	8006918 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2204      	movs	r2, #4
 800680c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a89      	ldr	r2, [pc, #548]	; (8006a3c <HAL_DMA_IRQHandler+0xa44>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d04a      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a88      	ldr	r2, [pc, #544]	; (8006a40 <HAL_DMA_IRQHandler+0xa48>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d045      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a86      	ldr	r2, [pc, #536]	; (8006a44 <HAL_DMA_IRQHandler+0xa4c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d040      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a85      	ldr	r2, [pc, #532]	; (8006a48 <HAL_DMA_IRQHandler+0xa50>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d03b      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a83      	ldr	r2, [pc, #524]	; (8006a4c <HAL_DMA_IRQHandler+0xa54>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d036      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a82      	ldr	r2, [pc, #520]	; (8006a50 <HAL_DMA_IRQHandler+0xa58>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d031      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a80      	ldr	r2, [pc, #512]	; (8006a54 <HAL_DMA_IRQHandler+0xa5c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d02c      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a7f      	ldr	r2, [pc, #508]	; (8006a58 <HAL_DMA_IRQHandler+0xa60>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d027      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7d      	ldr	r2, [pc, #500]	; (8006a5c <HAL_DMA_IRQHandler+0xa64>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d022      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a7c      	ldr	r2, [pc, #496]	; (8006a60 <HAL_DMA_IRQHandler+0xa68>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d01d      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a7a      	ldr	r2, [pc, #488]	; (8006a64 <HAL_DMA_IRQHandler+0xa6c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d018      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a79      	ldr	r2, [pc, #484]	; (8006a68 <HAL_DMA_IRQHandler+0xa70>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a77      	ldr	r2, [pc, #476]	; (8006a6c <HAL_DMA_IRQHandler+0xa74>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00e      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a76      	ldr	r2, [pc, #472]	; (8006a70 <HAL_DMA_IRQHandler+0xa78>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a74      	ldr	r2, [pc, #464]	; (8006a74 <HAL_DMA_IRQHandler+0xa7c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d004      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x8b8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a73      	ldr	r2, [pc, #460]	; (8006a78 <HAL_DMA_IRQHandler+0xa80>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d108      	bne.n	80068c2 <HAL_DMA_IRQHandler+0x8ca>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0201 	bic.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e007      	b.n	80068d2 <HAL_DMA_IRQHandler+0x8da>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0201 	bic.w	r2, r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	429a      	cmp	r2, r3
 80068dc:	d307      	bcc.n	80068ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1f2      	bne.n	80068d2 <HAL_DMA_IRQHandler+0x8da>
 80068ec:	e000      	b.n	80068f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80068ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2203      	movs	r2, #3
 8006902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006906:	e003      	b.n	8006910 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 82aa 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	e2a4      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a52      	ldr	r2, [pc, #328]	; (8006a7c <HAL_DMA_IRQHandler+0xa84>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d04a      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a51      	ldr	r2, [pc, #324]	; (8006a80 <HAL_DMA_IRQHandler+0xa88>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d045      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a4f      	ldr	r2, [pc, #316]	; (8006a84 <HAL_DMA_IRQHandler+0xa8c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d040      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a4e      	ldr	r2, [pc, #312]	; (8006a88 <HAL_DMA_IRQHandler+0xa90>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d03b      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a4c      	ldr	r2, [pc, #304]	; (8006a8c <HAL_DMA_IRQHandler+0xa94>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d036      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a4b      	ldr	r2, [pc, #300]	; (8006a90 <HAL_DMA_IRQHandler+0xa98>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d031      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a49      	ldr	r2, [pc, #292]	; (8006a94 <HAL_DMA_IRQHandler+0xa9c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d02c      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a48      	ldr	r2, [pc, #288]	; (8006a98 <HAL_DMA_IRQHandler+0xaa0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d027      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a46      	ldr	r2, [pc, #280]	; (8006a9c <HAL_DMA_IRQHandler+0xaa4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d022      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a45      	ldr	r2, [pc, #276]	; (8006aa0 <HAL_DMA_IRQHandler+0xaa8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d01d      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a43      	ldr	r2, [pc, #268]	; (8006aa4 <HAL_DMA_IRQHandler+0xaac>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d018      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a42      	ldr	r2, [pc, #264]	; (8006aa8 <HAL_DMA_IRQHandler+0xab0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a40      	ldr	r2, [pc, #256]	; (8006aac <HAL_DMA_IRQHandler+0xab4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00e      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3f      	ldr	r2, [pc, #252]	; (8006ab0 <HAL_DMA_IRQHandler+0xab8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a3d      	ldr	r2, [pc, #244]	; (8006ab4 <HAL_DMA_IRQHandler+0xabc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_DMA_IRQHandler+0x9d4>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a3c      	ldr	r2, [pc, #240]	; (8006ab8 <HAL_DMA_IRQHandler+0xac0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d101      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x9d8>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <HAL_DMA_IRQHandler+0x9da>
 80069d0:	2300      	movs	r3, #0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 824f 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2204      	movs	r2, #4
 80069ea:	409a      	lsls	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80dd 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xbb8>
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80d7 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d059      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d14a      	bne.n	8006abc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8220 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a38:	e21a      	b.n	8006e70 <HAL_DMA_IRQHandler+0xe78>
 8006a3a:	bf00      	nop
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	48022c08 	.word	0x48022c08
 8006a80:	48022c1c 	.word	0x48022c1c
 8006a84:	48022c30 	.word	0x48022c30
 8006a88:	48022c44 	.word	0x48022c44
 8006a8c:	48022c58 	.word	0x48022c58
 8006a90:	48022c6c 	.word	0x48022c6c
 8006a94:	48022c80 	.word	0x48022c80
 8006a98:	48022c94 	.word	0x48022c94
 8006a9c:	58025408 	.word	0x58025408
 8006aa0:	5802541c 	.word	0x5802541c
 8006aa4:	58025430 	.word	0x58025430
 8006aa8:	58025444 	.word	0x58025444
 8006aac:	58025458 	.word	0x58025458
 8006ab0:	5802546c 	.word	0x5802546c
 8006ab4:	58025480 	.word	0x58025480
 8006ab8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 81d5 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ace:	e1cf      	b.n	8006e70 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d160      	bne.n	8006b9c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a7f      	ldr	r2, [pc, #508]	; (8006cdc <HAL_DMA_IRQHandler+0xce4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04a      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7d      	ldr	r2, [pc, #500]	; (8006ce0 <HAL_DMA_IRQHandler+0xce8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d045      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a7c      	ldr	r2, [pc, #496]	; (8006ce4 <HAL_DMA_IRQHandler+0xcec>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d040      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a7a      	ldr	r2, [pc, #488]	; (8006ce8 <HAL_DMA_IRQHandler+0xcf0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d03b      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a79      	ldr	r2, [pc, #484]	; (8006cec <HAL_DMA_IRQHandler+0xcf4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d036      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a77      	ldr	r2, [pc, #476]	; (8006cf0 <HAL_DMA_IRQHandler+0xcf8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d031      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a76      	ldr	r2, [pc, #472]	; (8006cf4 <HAL_DMA_IRQHandler+0xcfc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d02c      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a74      	ldr	r2, [pc, #464]	; (8006cf8 <HAL_DMA_IRQHandler+0xd00>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d027      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a73      	ldr	r2, [pc, #460]	; (8006cfc <HAL_DMA_IRQHandler+0xd04>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d022      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a71      	ldr	r2, [pc, #452]	; (8006d00 <HAL_DMA_IRQHandler+0xd08>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a70      	ldr	r2, [pc, #448]	; (8006d04 <HAL_DMA_IRQHandler+0xd0c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d018      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a6e      	ldr	r2, [pc, #440]	; (8006d08 <HAL_DMA_IRQHandler+0xd10>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6d      	ldr	r2, [pc, #436]	; (8006d0c <HAL_DMA_IRQHandler+0xd14>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a6b      	ldr	r2, [pc, #428]	; (8006d10 <HAL_DMA_IRQHandler+0xd18>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6a      	ldr	r2, [pc, #424]	; (8006d14 <HAL_DMA_IRQHandler+0xd1c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_DMA_IRQHandler+0xb82>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a68      	ldr	r2, [pc, #416]	; (8006d18 <HAL_DMA_IRQHandler+0xd20>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d108      	bne.n	8006b8c <HAL_DMA_IRQHandler+0xb94>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0208 	bic.w	r2, r2, #8
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e007      	b.n	8006b9c <HAL_DMA_IRQHandler+0xba4>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0204 	bic.w	r2, r2, #4
 8006b9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8165 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bae:	e15f      	b.n	8006e70 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2202      	movs	r2, #2
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80c5 	beq.w	8006d50 <HAL_DMA_IRQHandler+0xd58>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80bf 	beq.w	8006d50 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2202      	movs	r2, #2
 8006bdc:	409a      	lsls	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d018      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 813a 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c08:	e134      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8130 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1c:	e12a      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 8089 	bne.w	8006d3c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2b      	ldr	r2, [pc, #172]	; (8006cdc <HAL_DMA_IRQHandler+0xce4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d04a      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a29      	ldr	r2, [pc, #164]	; (8006ce0 <HAL_DMA_IRQHandler+0xce8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d045      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a28      	ldr	r2, [pc, #160]	; (8006ce4 <HAL_DMA_IRQHandler+0xcec>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d040      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a26      	ldr	r2, [pc, #152]	; (8006ce8 <HAL_DMA_IRQHandler+0xcf0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d03b      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a25      	ldr	r2, [pc, #148]	; (8006cec <HAL_DMA_IRQHandler+0xcf4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d036      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a23      	ldr	r2, [pc, #140]	; (8006cf0 <HAL_DMA_IRQHandler+0xcf8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d031      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a22      	ldr	r2, [pc, #136]	; (8006cf4 <HAL_DMA_IRQHandler+0xcfc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d02c      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a20      	ldr	r2, [pc, #128]	; (8006cf8 <HAL_DMA_IRQHandler+0xd00>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d027      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <HAL_DMA_IRQHandler+0xd04>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d022      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <HAL_DMA_IRQHandler+0xd08>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d01d      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a1c      	ldr	r2, [pc, #112]	; (8006d04 <HAL_DMA_IRQHandler+0xd0c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d018      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1a      	ldr	r2, [pc, #104]	; (8006d08 <HAL_DMA_IRQHandler+0xd10>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <HAL_DMA_IRQHandler+0xd14>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00e      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <HAL_DMA_IRQHandler+0xd18>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <HAL_DMA_IRQHandler+0xd1c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_DMA_IRQHandler+0xcd2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <HAL_DMA_IRQHandler+0xd20>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d128      	bne.n	8006d1c <HAL_DMA_IRQHandler+0xd24>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0214 	bic.w	r2, r2, #20
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e027      	b.n	8006d2c <HAL_DMA_IRQHandler+0xd34>
 8006cdc:	40020010 	.word	0x40020010
 8006ce0:	40020028 	.word	0x40020028
 8006ce4:	40020040 	.word	0x40020040
 8006ce8:	40020058 	.word	0x40020058
 8006cec:	40020070 	.word	0x40020070
 8006cf0:	40020088 	.word	0x40020088
 8006cf4:	400200a0 	.word	0x400200a0
 8006cf8:	400200b8 	.word	0x400200b8
 8006cfc:	40020410 	.word	0x40020410
 8006d00:	40020428 	.word	0x40020428
 8006d04:	40020440 	.word	0x40020440
 8006d08:	40020458 	.word	0x40020458
 8006d0c:	40020470 	.word	0x40020470
 8006d10:	40020488 	.word	0x40020488
 8006d14:	400204a0 	.word	0x400204a0
 8006d18:	400204b8 	.word	0x400204b8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 020a 	bic.w	r2, r2, #10
 8006d2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8097 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d4e:	e091      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2208      	movs	r2, #8
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8088 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe7e>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8082 	beq.w	8006e76 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a41      	ldr	r2, [pc, #260]	; (8006e7c <HAL_DMA_IRQHandler+0xe84>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d04a      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3f      	ldr	r2, [pc, #252]	; (8006e80 <HAL_DMA_IRQHandler+0xe88>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d045      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3e      	ldr	r2, [pc, #248]	; (8006e84 <HAL_DMA_IRQHandler+0xe8c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d040      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a3c      	ldr	r2, [pc, #240]	; (8006e88 <HAL_DMA_IRQHandler+0xe90>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d03b      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a3b      	ldr	r2, [pc, #236]	; (8006e8c <HAL_DMA_IRQHandler+0xe94>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d036      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a39      	ldr	r2, [pc, #228]	; (8006e90 <HAL_DMA_IRQHandler+0xe98>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d031      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a38      	ldr	r2, [pc, #224]	; (8006e94 <HAL_DMA_IRQHandler+0xe9c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d02c      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a36      	ldr	r2, [pc, #216]	; (8006e98 <HAL_DMA_IRQHandler+0xea0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d027      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a35      	ldr	r2, [pc, #212]	; (8006e9c <HAL_DMA_IRQHandler+0xea4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d022      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a33      	ldr	r2, [pc, #204]	; (8006ea0 <HAL_DMA_IRQHandler+0xea8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d01d      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a32      	ldr	r2, [pc, #200]	; (8006ea4 <HAL_DMA_IRQHandler+0xeac>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d018      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a30      	ldr	r2, [pc, #192]	; (8006ea8 <HAL_DMA_IRQHandler+0xeb0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2f      	ldr	r2, [pc, #188]	; (8006eac <HAL_DMA_IRQHandler+0xeb4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00e      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2d      	ldr	r2, [pc, #180]	; (8006eb0 <HAL_DMA_IRQHandler+0xeb8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <HAL_DMA_IRQHandler+0xebc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_DMA_IRQHandler+0xe1a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <HAL_DMA_IRQHandler+0xec0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d108      	bne.n	8006e24 <HAL_DMA_IRQHandler+0xe2c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 021c 	bic.w	r2, r2, #28
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e007      	b.n	8006e34 <HAL_DMA_IRQHandler+0xe3c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 020e 	bic.w	r2, r2, #14
 8006e32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	409a      	lsls	r2, r3
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
 8006e6a:	e004      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006e6c:	bf00      	nop
 8006e6e:	e002      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e70:	bf00      	nop
 8006e72:	e000      	b.n	8006e76 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e76:	3728      	adds	r7, #40	; 0x28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40020010 	.word	0x40020010
 8006e80:	40020028 	.word	0x40020028
 8006e84:	40020040 	.word	0x40020040
 8006e88:	40020058 	.word	0x40020058
 8006e8c:	40020070 	.word	0x40020070
 8006e90:	40020088 	.word	0x40020088
 8006e94:	400200a0 	.word	0x400200a0
 8006e98:	400200b8 	.word	0x400200b8
 8006e9c:	40020410 	.word	0x40020410
 8006ea0:	40020428 	.word	0x40020428
 8006ea4:	40020440 	.word	0x40020440
 8006ea8:	40020458 	.word	0x40020458
 8006eac:	40020470 	.word	0x40020470
 8006eb0:	40020488 	.word	0x40020488
 8006eb4:	400204a0 	.word	0x400204a0
 8006eb8:	400204b8 	.word	0x400204b8

08006ebc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eca:	b2db      	uxtb	r3, r3
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a7f      	ldr	r2, [pc, #508]	; (80070f4 <DMA_SetConfig+0x21c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d072      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a7d      	ldr	r2, [pc, #500]	; (80070f8 <DMA_SetConfig+0x220>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d06d      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a7c      	ldr	r2, [pc, #496]	; (80070fc <DMA_SetConfig+0x224>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d068      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a7a      	ldr	r2, [pc, #488]	; (8007100 <DMA_SetConfig+0x228>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d063      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a79      	ldr	r2, [pc, #484]	; (8007104 <DMA_SetConfig+0x22c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d05e      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a77      	ldr	r2, [pc, #476]	; (8007108 <DMA_SetConfig+0x230>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d059      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a76      	ldr	r2, [pc, #472]	; (800710c <DMA_SetConfig+0x234>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d054      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a74      	ldr	r2, [pc, #464]	; (8007110 <DMA_SetConfig+0x238>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d04f      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a73      	ldr	r2, [pc, #460]	; (8007114 <DMA_SetConfig+0x23c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d04a      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a71      	ldr	r2, [pc, #452]	; (8007118 <DMA_SetConfig+0x240>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d045      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a70      	ldr	r2, [pc, #448]	; (800711c <DMA_SetConfig+0x244>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d040      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a6e      	ldr	r2, [pc, #440]	; (8007120 <DMA_SetConfig+0x248>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d03b      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a6d      	ldr	r2, [pc, #436]	; (8007124 <DMA_SetConfig+0x24c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d036      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6b      	ldr	r2, [pc, #428]	; (8007128 <DMA_SetConfig+0x250>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d031      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6a      	ldr	r2, [pc, #424]	; (800712c <DMA_SetConfig+0x254>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d02c      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a68      	ldr	r2, [pc, #416]	; (8007130 <DMA_SetConfig+0x258>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d027      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a67      	ldr	r2, [pc, #412]	; (8007134 <DMA_SetConfig+0x25c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d022      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a65      	ldr	r2, [pc, #404]	; (8007138 <DMA_SetConfig+0x260>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01d      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a64      	ldr	r2, [pc, #400]	; (800713c <DMA_SetConfig+0x264>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d018      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a62      	ldr	r2, [pc, #392]	; (8007140 <DMA_SetConfig+0x268>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a61      	ldr	r2, [pc, #388]	; (8007144 <DMA_SetConfig+0x26c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00e      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5f      	ldr	r2, [pc, #380]	; (8007148 <DMA_SetConfig+0x270>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a5e      	ldr	r2, [pc, #376]	; (800714c <DMA_SetConfig+0x274>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d004      	beq.n	8006fe2 <DMA_SetConfig+0x10a>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a5c      	ldr	r2, [pc, #368]	; (8007150 <DMA_SetConfig+0x278>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d101      	bne.n	8006fe6 <DMA_SetConfig+0x10e>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <DMA_SetConfig+0x110>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00d      	beq.n	8007008 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ff4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007006:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a39      	ldr	r2, [pc, #228]	; (80070f4 <DMA_SetConfig+0x21c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d04a      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a38      	ldr	r2, [pc, #224]	; (80070f8 <DMA_SetConfig+0x220>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d045      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a36      	ldr	r2, [pc, #216]	; (80070fc <DMA_SetConfig+0x224>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d040      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a35      	ldr	r2, [pc, #212]	; (8007100 <DMA_SetConfig+0x228>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d03b      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a33      	ldr	r2, [pc, #204]	; (8007104 <DMA_SetConfig+0x22c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d036      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a32      	ldr	r2, [pc, #200]	; (8007108 <DMA_SetConfig+0x230>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d031      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a30      	ldr	r2, [pc, #192]	; (800710c <DMA_SetConfig+0x234>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d02c      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2f      	ldr	r2, [pc, #188]	; (8007110 <DMA_SetConfig+0x238>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d027      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <DMA_SetConfig+0x23c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d022      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2c      	ldr	r2, [pc, #176]	; (8007118 <DMA_SetConfig+0x240>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d01d      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2a      	ldr	r2, [pc, #168]	; (800711c <DMA_SetConfig+0x244>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d018      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a29      	ldr	r2, [pc, #164]	; (8007120 <DMA_SetConfig+0x248>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a27      	ldr	r2, [pc, #156]	; (8007124 <DMA_SetConfig+0x24c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a26      	ldr	r2, [pc, #152]	; (8007128 <DMA_SetConfig+0x250>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <DMA_SetConfig+0x254>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <DMA_SetConfig+0x1d0>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a23      	ldr	r2, [pc, #140]	; (8007130 <DMA_SetConfig+0x258>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d101      	bne.n	80070ac <DMA_SetConfig+0x1d4>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <DMA_SetConfig+0x1d6>
 80070ac:	2300      	movs	r3, #0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d059      	beq.n	8007166 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	223f      	movs	r2, #63	; 0x3f
 80070bc:	409a      	lsls	r2, r3
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b40      	cmp	r3, #64	; 0x40
 80070e0:	d138      	bne.n	8007154 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070f2:	e0ae      	b.n	8007252 <DMA_SetConfig+0x37a>
 80070f4:	40020010 	.word	0x40020010
 80070f8:	40020028 	.word	0x40020028
 80070fc:	40020040 	.word	0x40020040
 8007100:	40020058 	.word	0x40020058
 8007104:	40020070 	.word	0x40020070
 8007108:	40020088 	.word	0x40020088
 800710c:	400200a0 	.word	0x400200a0
 8007110:	400200b8 	.word	0x400200b8
 8007114:	40020410 	.word	0x40020410
 8007118:	40020428 	.word	0x40020428
 800711c:	40020440 	.word	0x40020440
 8007120:	40020458 	.word	0x40020458
 8007124:	40020470 	.word	0x40020470
 8007128:	40020488 	.word	0x40020488
 800712c:	400204a0 	.word	0x400204a0
 8007130:	400204b8 	.word	0x400204b8
 8007134:	58025408 	.word	0x58025408
 8007138:	5802541c 	.word	0x5802541c
 800713c:	58025430 	.word	0x58025430
 8007140:	58025444 	.word	0x58025444
 8007144:	58025458 	.word	0x58025458
 8007148:	5802546c 	.word	0x5802546c
 800714c:	58025480 	.word	0x58025480
 8007150:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]
}
 8007164:	e075      	b.n	8007252 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3d      	ldr	r2, [pc, #244]	; (8007260 <DMA_SetConfig+0x388>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d04a      	beq.n	8007206 <DMA_SetConfig+0x32e>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3b      	ldr	r2, [pc, #236]	; (8007264 <DMA_SetConfig+0x38c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d045      	beq.n	8007206 <DMA_SetConfig+0x32e>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3a      	ldr	r2, [pc, #232]	; (8007268 <DMA_SetConfig+0x390>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d040      	beq.n	8007206 <DMA_SetConfig+0x32e>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a38      	ldr	r2, [pc, #224]	; (800726c <DMA_SetConfig+0x394>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d03b      	beq.n	8007206 <DMA_SetConfig+0x32e>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a37      	ldr	r2, [pc, #220]	; (8007270 <DMA_SetConfig+0x398>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d036      	beq.n	8007206 <DMA_SetConfig+0x32e>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a35      	ldr	r2, [pc, #212]	; (8007274 <DMA_SetConfig+0x39c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d031      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a34      	ldr	r2, [pc, #208]	; (8007278 <DMA_SetConfig+0x3a0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d02c      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a32      	ldr	r2, [pc, #200]	; (800727c <DMA_SetConfig+0x3a4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d027      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a31      	ldr	r2, [pc, #196]	; (8007280 <DMA_SetConfig+0x3a8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d022      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a2f      	ldr	r2, [pc, #188]	; (8007284 <DMA_SetConfig+0x3ac>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01d      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2e      	ldr	r2, [pc, #184]	; (8007288 <DMA_SetConfig+0x3b0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d018      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2c      	ldr	r2, [pc, #176]	; (800728c <DMA_SetConfig+0x3b4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2b      	ldr	r2, [pc, #172]	; (8007290 <DMA_SetConfig+0x3b8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a29      	ldr	r2, [pc, #164]	; (8007294 <DMA_SetConfig+0x3bc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a28      	ldr	r2, [pc, #160]	; (8007298 <DMA_SetConfig+0x3c0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <DMA_SetConfig+0x32e>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a26      	ldr	r2, [pc, #152]	; (800729c <DMA_SetConfig+0x3c4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d101      	bne.n	800720a <DMA_SetConfig+0x332>
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <DMA_SetConfig+0x334>
 800720a:	2300      	movs	r3, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d020      	beq.n	8007252 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	2201      	movs	r2, #1
 800721a:	409a      	lsls	r2, r3
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b40      	cmp	r3, #64	; 0x40
 800722e:	d108      	bne.n	8007242 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	60da      	str	r2, [r3, #12]
}
 8007240:	e007      	b.n	8007252 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	48022c08 	.word	0x48022c08
 8007264:	48022c1c 	.word	0x48022c1c
 8007268:	48022c30 	.word	0x48022c30
 800726c:	48022c44 	.word	0x48022c44
 8007270:	48022c58 	.word	0x48022c58
 8007274:	48022c6c 	.word	0x48022c6c
 8007278:	48022c80 	.word	0x48022c80
 800727c:	48022c94 	.word	0x48022c94
 8007280:	58025408 	.word	0x58025408
 8007284:	5802541c 	.word	0x5802541c
 8007288:	58025430 	.word	0x58025430
 800728c:	58025444 	.word	0x58025444
 8007290:	58025458 	.word	0x58025458
 8007294:	5802546c 	.word	0x5802546c
 8007298:	58025480 	.word	0x58025480
 800729c:	58025494 	.word	0x58025494

080072a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a42      	ldr	r2, [pc, #264]	; (80073b8 <DMA_CalcBaseAndBitshift+0x118>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d04a      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a41      	ldr	r2, [pc, #260]	; (80073bc <DMA_CalcBaseAndBitshift+0x11c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d045      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a3f      	ldr	r2, [pc, #252]	; (80073c0 <DMA_CalcBaseAndBitshift+0x120>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d040      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a3e      	ldr	r2, [pc, #248]	; (80073c4 <DMA_CalcBaseAndBitshift+0x124>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d03b      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a3c      	ldr	r2, [pc, #240]	; (80073c8 <DMA_CalcBaseAndBitshift+0x128>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d036      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a3b      	ldr	r2, [pc, #236]	; (80073cc <DMA_CalcBaseAndBitshift+0x12c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d031      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a39      	ldr	r2, [pc, #228]	; (80073d0 <DMA_CalcBaseAndBitshift+0x130>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d02c      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a38      	ldr	r2, [pc, #224]	; (80073d4 <DMA_CalcBaseAndBitshift+0x134>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d027      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a36      	ldr	r2, [pc, #216]	; (80073d8 <DMA_CalcBaseAndBitshift+0x138>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d022      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a35      	ldr	r2, [pc, #212]	; (80073dc <DMA_CalcBaseAndBitshift+0x13c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d01d      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a33      	ldr	r2, [pc, #204]	; (80073e0 <DMA_CalcBaseAndBitshift+0x140>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d018      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a32      	ldr	r2, [pc, #200]	; (80073e4 <DMA_CalcBaseAndBitshift+0x144>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d013      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a30      	ldr	r2, [pc, #192]	; (80073e8 <DMA_CalcBaseAndBitshift+0x148>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00e      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a2f      	ldr	r2, [pc, #188]	; (80073ec <DMA_CalcBaseAndBitshift+0x14c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d009      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a2d      	ldr	r2, [pc, #180]	; (80073f0 <DMA_CalcBaseAndBitshift+0x150>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d004      	beq.n	8007348 <DMA_CalcBaseAndBitshift+0xa8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2c      	ldr	r2, [pc, #176]	; (80073f4 <DMA_CalcBaseAndBitshift+0x154>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d101      	bne.n	800734c <DMA_CalcBaseAndBitshift+0xac>
 8007348:	2301      	movs	r3, #1
 800734a:	e000      	b.n	800734e <DMA_CalcBaseAndBitshift+0xae>
 800734c:	2300      	movs	r3, #0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d024      	beq.n	800739c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	3b10      	subs	r3, #16
 800735a:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <DMA_CalcBaseAndBitshift+0x158>)
 800735c:	fba2 2303 	umull	r2, r3, r2, r3
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	4a24      	ldr	r2, [pc, #144]	; (80073fc <DMA_CalcBaseAndBitshift+0x15c>)
 800736c:	5cd3      	ldrb	r3, [r2, r3]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b03      	cmp	r3, #3
 8007378:	d908      	bls.n	800738c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	4b1f      	ldr	r3, [pc, #124]	; (8007400 <DMA_CalcBaseAndBitshift+0x160>)
 8007382:	4013      	ands	r3, r2
 8007384:	1d1a      	adds	r2, r3, #4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	659a      	str	r2, [r3, #88]	; 0x58
 800738a:	e00d      	b.n	80073a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <DMA_CalcBaseAndBitshift+0x160>)
 8007394:	4013      	ands	r3, r2
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6593      	str	r3, [r2, #88]	; 0x58
 800739a:	e005      	b.n	80073a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	40020010 	.word	0x40020010
 80073bc:	40020028 	.word	0x40020028
 80073c0:	40020040 	.word	0x40020040
 80073c4:	40020058 	.word	0x40020058
 80073c8:	40020070 	.word	0x40020070
 80073cc:	40020088 	.word	0x40020088
 80073d0:	400200a0 	.word	0x400200a0
 80073d4:	400200b8 	.word	0x400200b8
 80073d8:	40020410 	.word	0x40020410
 80073dc:	40020428 	.word	0x40020428
 80073e0:	40020440 	.word	0x40020440
 80073e4:	40020458 	.word	0x40020458
 80073e8:	40020470 	.word	0x40020470
 80073ec:	40020488 	.word	0x40020488
 80073f0:	400204a0 	.word	0x400204a0
 80073f4:	400204b8 	.word	0x400204b8
 80073f8:	aaaaaaab 	.word	0xaaaaaaab
 80073fc:	08010960 	.word	0x08010960
 8007400:	fffffc00 	.word	0xfffffc00

08007404 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d120      	bne.n	800745a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	2b03      	cmp	r3, #3
 800741e:	d858      	bhi.n	80074d2 <DMA_CheckFifoParam+0xce>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <DMA_CheckFifoParam+0x24>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	08007439 	.word	0x08007439
 800742c:	0800744b 	.word	0x0800744b
 8007430:	08007439 	.word	0x08007439
 8007434:	080074d3 	.word	0x080074d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d048      	beq.n	80074d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007448:	e045      	b.n	80074d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007452:	d142      	bne.n	80074da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007458:	e03f      	b.n	80074da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007462:	d123      	bne.n	80074ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	2b03      	cmp	r3, #3
 800746a:	d838      	bhi.n	80074de <DMA_CheckFifoParam+0xda>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <DMA_CheckFifoParam+0x70>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007485 	.word	0x08007485
 8007478:	0800748b 	.word	0x0800748b
 800747c:	08007485 	.word	0x08007485
 8007480:	0800749d 	.word	0x0800749d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
        break;
 8007488:	e030      	b.n	80074ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d025      	beq.n	80074e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800749a:	e022      	b.n	80074e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074a4:	d11f      	bne.n	80074e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074aa:	e01c      	b.n	80074e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d902      	bls.n	80074ba <DMA_CheckFifoParam+0xb6>
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d003      	beq.n	80074c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80074b8:	e018      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	73fb      	strb	r3, [r7, #15]
        break;
 80074be:	e015      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
    break;
 80074d0:	e00b      	b.n	80074ea <DMA_CheckFifoParam+0xe6>
        break;
 80074d2:	bf00      	nop
 80074d4:	e00a      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
        break;
 80074d6:	bf00      	nop
 80074d8:	e008      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
        break;
 80074da:	bf00      	nop
 80074dc:	e006      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
        break;
 80074de:	bf00      	nop
 80074e0:	e004      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
        break;
 80074e2:	bf00      	nop
 80074e4:	e002      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
        break;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <DMA_CheckFifoParam+0xe8>
    break;
 80074ea:	bf00      	nop
    }
  }

  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop

080074fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d022      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a36      	ldr	r2, [pc, #216]	; (80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01d      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a35      	ldr	r2, [pc, #212]	; (80075f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d018      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a33      	ldr	r2, [pc, #204]	; (80075fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a32      	ldr	r2, [pc, #200]	; (8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00e      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a30      	ldr	r2, [pc, #192]	; (8007604 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a2f      	ldr	r2, [pc, #188]	; (8007608 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d004      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2d      	ldr	r2, [pc, #180]	; (800760c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d101      	bne.n	800755e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01a      	beq.n	800759a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	3b08      	subs	r3, #8
 800756c:	4a28      	ldr	r2, [pc, #160]	; (8007610 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800756e:	fba2 2303 	umull	r2, r3, r2, r3
 8007572:	091b      	lsrs	r3, r3, #4
 8007574:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4b26      	ldr	r3, [pc, #152]	; (8007614 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	461a      	mov	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a24      	ldr	r2, [pc, #144]	; (8007618 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007588:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	2201      	movs	r2, #1
 8007592:	409a      	lsls	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007598:	e024      	b.n	80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	3b10      	subs	r3, #16
 80075a2:	4a1e      	ldr	r2, [pc, #120]	; (800761c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	091b      	lsrs	r3, r3, #4
 80075aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d806      	bhi.n	80075c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d902      	bls.n	80075c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3308      	adds	r3, #8
 80075c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4b18      	ldr	r3, [pc, #96]	; (8007628 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a16      	ldr	r2, [pc, #88]	; (800762c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	2201      	movs	r2, #1
 80075de:	409a      	lsls	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	58025408 	.word	0x58025408
 80075f4:	5802541c 	.word	0x5802541c
 80075f8:	58025430 	.word	0x58025430
 80075fc:	58025444 	.word	0x58025444
 8007600:	58025458 	.word	0x58025458
 8007604:	5802546c 	.word	0x5802546c
 8007608:	58025480 	.word	0x58025480
 800760c:	58025494 	.word	0x58025494
 8007610:	cccccccd 	.word	0xcccccccd
 8007614:	16009600 	.word	0x16009600
 8007618:	58025880 	.word	0x58025880
 800761c:	aaaaaaab 	.word	0xaaaaaaab
 8007620:	400204b8 	.word	0x400204b8
 8007624:	4002040f 	.word	0x4002040f
 8007628:	10008200 	.word	0x10008200
 800762c:	40020880 	.word	0x40020880

08007630 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d04a      	beq.n	80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d847      	bhi.n	80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a25      	ldr	r2, [pc, #148]	; (80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d022      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a24      	ldr	r2, [pc, #144]	; (80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01d      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a22      	ldr	r2, [pc, #136]	; (80076f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d018      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a21      	ldr	r2, [pc, #132]	; (80076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d013      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1f      	ldr	r2, [pc, #124]	; (80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00e      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1e      	ldr	r2, [pc, #120]	; (80076fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d009      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1c      	ldr	r2, [pc, #112]	; (8007700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d101      	bne.n	80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4b17      	ldr	r3, [pc, #92]	; (8007708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a15      	ldr	r2, [pc, #84]	; (800770c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80076b8:	671a      	str	r2, [r3, #112]	; 0x70
 80076ba:	e009      	b.n	80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4b14      	ldr	r3, [pc, #80]	; (8007710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a11      	ldr	r2, [pc, #68]	; (8007714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80076ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	2201      	movs	r2, #1
 80076d6:	409a      	lsls	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	58025408 	.word	0x58025408
 80076ec:	5802541c 	.word	0x5802541c
 80076f0:	58025430 	.word	0x58025430
 80076f4:	58025444 	.word	0x58025444
 80076f8:	58025458 	.word	0x58025458
 80076fc:	5802546c 	.word	0x5802546c
 8007700:	58025480 	.word	0x58025480
 8007704:	58025494 	.word	0x58025494
 8007708:	1600963f 	.word	0x1600963f
 800770c:	58025940 	.word	0x58025940
 8007710:	1000823f 	.word	0x1000823f
 8007714:	40020940 	.word	0x40020940

08007718 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e04f      	b.n	80077ca <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fc fa04 	bl	8003b4c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b20      	ldr	r3, [pc, #128]	; (80077d4 <HAL_DMA2D_Init+0xbc>)
 8007754:	4013      	ands	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6851      	ldr	r1, [r2, #4]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	69d2      	ldr	r2, [r2, #28]
 800775e:	4311      	orrs	r1, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	430b      	orrs	r3, r1
 8007766:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800776e:	4b1a      	ldr	r3, [pc, #104]	; (80077d8 <HAL_DMA2D_Init+0xc0>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6891      	ldr	r1, [r2, #8]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6992      	ldr	r2, [r2, #24]
 800777a:	4311      	orrs	r1, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	430b      	orrs	r3, r1
 8007782:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800778a:	4b14      	ldr	r3, [pc, #80]	; (80077dc <HAL_DMA2D_Init+0xc4>)
 800778c:	4013      	ands	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	68d1      	ldr	r1, [r2, #12]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	430b      	orrs	r3, r1
 8007798:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	051a      	lsls	r2, r3, #20
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	055b      	lsls	r3, r3, #21
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	fff8ffbf 	.word	0xfff8ffbf
 80077d8:	fffffef8 	.word	0xfffffef8
 80077dc:	ffff0000 	.word	0xffff0000

080077e0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d026      	beq.n	8007850 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d021      	beq.n	8007850 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800781a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007820:	f043 0201 	orr.w	r2, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2201      	movs	r2, #1
 800782e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2204      	movs	r2, #4
 8007834:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d026      	beq.n	80078a8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d021      	beq.n	80078a8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007872:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2220      	movs	r2, #32
 800787a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007880:	f043 0202 	orr.w	r2, r3, #2
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2204      	movs	r2, #4
 800788c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d026      	beq.n	8007900 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d021      	beq.n	8007900 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2208      	movs	r2, #8
 80078d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d8:	f043 0204 	orr.w	r2, r3, #4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2204      	movs	r2, #4
 80078e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d013      	beq.n	8007932 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00e      	beq.n	8007932 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007922:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2204      	movs	r2, #4
 800792a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f853 	bl	80079d8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d024      	beq.n	8007986 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01f      	beq.n	8007986 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007954:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2202      	movs	r2, #2
 800795c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01f      	beq.n	80079d0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01a      	beq.n	80079d0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2210      	movs	r2, #16
 80079b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f80e 	bl	80079ec <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80079d0:	bf00      	nop
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_DMA2D_ConfigLayer+0x24>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e092      	b.n	8007b4a <HAL_DMA2D_ConfigLayer+0x14a>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	4613      	mov	r3, r2
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	3328      	adds	r3, #40	; 0x28
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	4413      	add	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	041b      	lsls	r3, r3, #16
 8007a50:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007a58:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007a64:	4b3c      	ldr	r3, [pc, #240]	; (8007b58 <HAL_DMA2D_ConfigLayer+0x158>)
 8007a66:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b0a      	cmp	r3, #10
 8007a6e:	d003      	beq.n	8007a78 <HAL_DMA2D_ConfigLayer+0x78>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b09      	cmp	r3, #9
 8007a76:	d107      	bne.n	8007a88 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	e005      	b.n	8007a94 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d120      	bne.n	8007adc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	ea02 0103 	and.w	r1, r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b0a      	cmp	r3, #10
 8007ac2:	d003      	beq.n	8007acc <HAL_DMA2D_ConfigLayer+0xcc>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d135      	bne.n	8007b38 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8007ada:	e02d      	b.n	8007b38 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b0b      	cmp	r3, #11
 8007ae2:	d109      	bne.n	8007af8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	049b      	lsls	r3, r3, #18
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007af6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69da      	ldr	r2, [r3, #28]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	43db      	mvns	r3, r3
 8007b02:	ea02 0103 	and.w	r1, r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b0a      	cmp	r3, #10
 8007b20:	d003      	beq.n	8007b2a <HAL_DMA2D_ConfigLayer+0x12a>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b09      	cmp	r3, #9
 8007b28:	d106      	bne.n	8007b38 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007b36:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	ff33000f 	.word	0xff33000f

08007b5c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d105      	bne.n	8007b82 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e315      	b.n	80081ae <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d101      	bne.n	8007b90 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e30e      	b.n	80081ae <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	f040 82fd 	bne.w	80081a0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a82      	ldr	r2, [pc, #520]	; (8007dc4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04a      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a81      	ldr	r2, [pc, #516]	; (8007dc8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d045      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a7f      	ldr	r2, [pc, #508]	; (8007dcc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d040      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a7e      	ldr	r2, [pc, #504]	; (8007dd0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d03b      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a7c      	ldr	r2, [pc, #496]	; (8007dd4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d036      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a7b      	ldr	r2, [pc, #492]	; (8007dd8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d031      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a79      	ldr	r2, [pc, #484]	; (8007ddc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02c      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a78      	ldr	r2, [pc, #480]	; (8007de0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d027      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a76      	ldr	r2, [pc, #472]	; (8007de4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a75      	ldr	r2, [pc, #468]	; (8007de8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a73      	ldr	r2, [pc, #460]	; (8007dec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d018      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a72      	ldr	r2, [pc, #456]	; (8007df0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a70      	ldr	r2, [pc, #448]	; (8007df4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a6f      	ldr	r2, [pc, #444]	; (8007df8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a6d      	ldr	r2, [pc, #436]	; (8007dfc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a6c      	ldr	r2, [pc, #432]	; (8007e00 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d101      	bne.n	8007c58 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d018      	beq.n	8007c90 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007c6c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c82:	f003 031f 	and.w	r3, r3, #31
 8007c86:	223f      	movs	r2, #63	; 0x3f
 8007c88:	409a      	lsls	r2, r3
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e018      	b.n	8007cc2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6819      	ldr	r1, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	f248 0320 	movw	r3, #32800	; 0x8020
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cae:	3304      	adds	r3, #4
 8007cb0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	2201      	movs	r2, #1
 8007cbc:	409a      	lsls	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fb41 	bl	8008350 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a3c      	ldr	r2, [pc, #240]	; (8007dc4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d072      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a3a      	ldr	r2, [pc, #232]	; (8007dc8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d06d      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a39      	ldr	r2, [pc, #228]	; (8007dcc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d068      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a37      	ldr	r2, [pc, #220]	; (8007dd0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d063      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a36      	ldr	r2, [pc, #216]	; (8007dd4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d05e      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a34      	ldr	r2, [pc, #208]	; (8007dd8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d059      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a33      	ldr	r2, [pc, #204]	; (8007ddc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d054      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a31      	ldr	r2, [pc, #196]	; (8007de0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d04f      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a30      	ldr	r2, [pc, #192]	; (8007de4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d04a      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a2e      	ldr	r2, [pc, #184]	; (8007de8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d045      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a2d      	ldr	r2, [pc, #180]	; (8007dec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d040      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d03b      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d036      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a28      	ldr	r2, [pc, #160]	; (8007df8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d031      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a27      	ldr	r2, [pc, #156]	; (8007dfc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d02c      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a25      	ldr	r2, [pc, #148]	; (8007e00 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d027      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a24      	ldr	r2, [pc, #144]	; (8007e04 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d022      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a22      	ldr	r2, [pc, #136]	; (8007e08 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d01d      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a21      	ldr	r2, [pc, #132]	; (8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d018      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d013      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d00e      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1c      	ldr	r2, [pc, #112]	; (8007e18 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d009      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1b      	ldr	r2, [pc, #108]	; (8007e1c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d004      	beq.n	8007dbe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a19      	ldr	r2, [pc, #100]	; (8007e20 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d132      	bne.n	8007e24 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e031      	b.n	8007e26 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8007dc2:	bf00      	nop
 8007dc4:	40020010 	.word	0x40020010
 8007dc8:	40020028 	.word	0x40020028
 8007dcc:	40020040 	.word	0x40020040
 8007dd0:	40020058 	.word	0x40020058
 8007dd4:	40020070 	.word	0x40020070
 8007dd8:	40020088 	.word	0x40020088
 8007ddc:	400200a0 	.word	0x400200a0
 8007de0:	400200b8 	.word	0x400200b8
 8007de4:	40020410 	.word	0x40020410
 8007de8:	40020428 	.word	0x40020428
 8007dec:	40020440 	.word	0x40020440
 8007df0:	40020458 	.word	0x40020458
 8007df4:	40020470 	.word	0x40020470
 8007df8:	40020488 	.word	0x40020488
 8007dfc:	400204a0 	.word	0x400204a0
 8007e00:	400204b8 	.word	0x400204b8
 8007e04:	58025408 	.word	0x58025408
 8007e08:	5802541c 	.word	0x5802541c
 8007e0c:	58025430 	.word	0x58025430
 8007e10:	58025444 	.word	0x58025444
 8007e14:	58025458 	.word	0x58025458
 8007e18:	5802546c 	.word	0x5802546c
 8007e1c:	58025480 	.word	0x58025480
 8007e20:	58025494 	.word	0x58025494
 8007e24:	2300      	movs	r3, #0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007e32:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e44:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a3b      	ldr	r2, [pc, #236]	; (8007f38 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d04a      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a39      	ldr	r2, [pc, #228]	; (8007f3c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d045      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a38      	ldr	r2, [pc, #224]	; (8007f40 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d040      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a36      	ldr	r2, [pc, #216]	; (8007f44 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d03b      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a35      	ldr	r2, [pc, #212]	; (8007f48 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d036      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a33      	ldr	r2, [pc, #204]	; (8007f4c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d031      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a32      	ldr	r2, [pc, #200]	; (8007f50 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d02c      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a30      	ldr	r2, [pc, #192]	; (8007f54 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d027      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a2f      	ldr	r2, [pc, #188]	; (8007f58 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a2d      	ldr	r2, [pc, #180]	; (8007f5c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a2c      	ldr	r2, [pc, #176]	; (8007f60 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a2a      	ldr	r2, [pc, #168]	; (8007f64 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a29      	ldr	r2, [pc, #164]	; (8007f68 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a27      	ldr	r2, [pc, #156]	; (8007f6c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a26      	ldr	r2, [pc, #152]	; (8007f70 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a24      	ldr	r2, [pc, #144]	; (8007f74 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d101      	bne.n	8007eea <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d043      	beq.n	8007f78 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f023 021e 	bic.w	r2, r3, #30
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0216 	orr.w	r2, r2, #22
 8007f02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	695a      	ldr	r2, [r3, #20]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f12:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d043      	beq.n	8007fac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0208 	orr.w	r2, r2, #8
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e03a      	b.n	8007fac <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8007f36:	bf00      	nop
 8007f38:	40020010 	.word	0x40020010
 8007f3c:	40020028 	.word	0x40020028
 8007f40:	40020040 	.word	0x40020040
 8007f44:	40020058 	.word	0x40020058
 8007f48:	40020070 	.word	0x40020070
 8007f4c:	40020088 	.word	0x40020088
 8007f50:	400200a0 	.word	0x400200a0
 8007f54:	400200b8 	.word	0x400200b8
 8007f58:	40020410 	.word	0x40020410
 8007f5c:	40020428 	.word	0x40020428
 8007f60:	40020440 	.word	0x40020440
 8007f64:	40020458 	.word	0x40020458
 8007f68:	40020470 	.word	0x40020470
 8007f6c:	40020488 	.word	0x40020488
 8007f70:	400204a0 	.word	0x400204a0
 8007f74:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f023 020e 	bic.w	r2, r3, #14
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 020a 	orr.w	r2, r2, #10
 8007f8a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0204 	orr.w	r2, r2, #4
 8007faa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a81      	ldr	r2, [pc, #516]	; (80081b8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d072      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a80      	ldr	r2, [pc, #512]	; (80081bc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d06d      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a7e      	ldr	r2, [pc, #504]	; (80081c0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d068      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a7d      	ldr	r2, [pc, #500]	; (80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d063      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a7b      	ldr	r2, [pc, #492]	; (80081c8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d05e      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a7a      	ldr	r2, [pc, #488]	; (80081cc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d059      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a78      	ldr	r2, [pc, #480]	; (80081d0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d054      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a77      	ldr	r2, [pc, #476]	; (80081d4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d04f      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a75      	ldr	r2, [pc, #468]	; (80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d04a      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a74      	ldr	r2, [pc, #464]	; (80081dc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d045      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a72      	ldr	r2, [pc, #456]	; (80081e0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d040      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a71      	ldr	r2, [pc, #452]	; (80081e4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d03b      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a6f      	ldr	r2, [pc, #444]	; (80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d036      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a6e      	ldr	r2, [pc, #440]	; (80081ec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d031      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a6c      	ldr	r2, [pc, #432]	; (80081f0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d02c      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a6b      	ldr	r2, [pc, #428]	; (80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d027      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a69      	ldr	r2, [pc, #420]	; (80081f8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d022      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a68      	ldr	r2, [pc, #416]	; (80081fc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d01d      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a66      	ldr	r2, [pc, #408]	; (8008200 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d018      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a65      	ldr	r2, [pc, #404]	; (8008204 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d013      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a63      	ldr	r2, [pc, #396]	; (8008208 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d00e      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a62      	ldr	r2, [pc, #392]	; (800820c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d009      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a60      	ldr	r2, [pc, #384]	; (8008210 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d004      	beq.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a5f      	ldr	r2, [pc, #380]	; (8008214 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d101      	bne.n	80080a0 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80080a0:	2300      	movs	r3, #0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01a      	beq.n	80080dc <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a35      	ldr	r2, [pc, #212]	; (80081b8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d04a      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a34      	ldr	r2, [pc, #208]	; (80081bc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d045      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a32      	ldr	r2, [pc, #200]	; (80081c0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d040      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a31      	ldr	r2, [pc, #196]	; (80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d03b      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a2f      	ldr	r2, [pc, #188]	; (80081c8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d036      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a2e      	ldr	r2, [pc, #184]	; (80081cc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d031      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a2c      	ldr	r2, [pc, #176]	; (80081d0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d02c      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a2b      	ldr	r2, [pc, #172]	; (80081d4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d027      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a29      	ldr	r2, [pc, #164]	; (80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d022      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a28      	ldr	r2, [pc, #160]	; (80081dc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d01d      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a26      	ldr	r2, [pc, #152]	; (80081e0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d018      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a25      	ldr	r2, [pc, #148]	; (80081e4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d013      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a23      	ldr	r2, [pc, #140]	; (80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00e      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a22      	ldr	r2, [pc, #136]	; (80081ec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d009      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a20      	ldr	r2, [pc, #128]	; (80081f0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1f      	ldr	r2, [pc, #124]	; (80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d108      	bne.n	800818e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	e00e      	b.n	80081ac <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0201 	orr.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e005      	b.n	80081ac <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40020010 	.word	0x40020010
 80081bc:	40020028 	.word	0x40020028
 80081c0:	40020040 	.word	0x40020040
 80081c4:	40020058 	.word	0x40020058
 80081c8:	40020070 	.word	0x40020070
 80081cc:	40020088 	.word	0x40020088
 80081d0:	400200a0 	.word	0x400200a0
 80081d4:	400200b8 	.word	0x400200b8
 80081d8:	40020410 	.word	0x40020410
 80081dc:	40020428 	.word	0x40020428
 80081e0:	40020440 	.word	0x40020440
 80081e4:	40020458 	.word	0x40020458
 80081e8:	40020470 	.word	0x40020470
 80081ec:	40020488 	.word	0x40020488
 80081f0:	400204a0 	.word	0x400204a0
 80081f4:	400204b8 	.word	0x400204b8
 80081f8:	58025408 	.word	0x58025408
 80081fc:	5802541c 	.word	0x5802541c
 8008200:	58025430 	.word	0x58025430
 8008204:	58025444 	.word	0x58025444
 8008208:	58025458 	.word	0x58025458
 800820c:	5802546c 	.word	0x5802546c
 8008210:	58025480 	.word	0x58025480
 8008214:	58025494 	.word	0x58025494

08008218 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a39      	ldr	r2, [pc, #228]	; (8008310 <HAL_DMAEx_ChangeMemory+0xf8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d04a      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a37      	ldr	r2, [pc, #220]	; (8008314 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d045      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a36      	ldr	r2, [pc, #216]	; (8008318 <HAL_DMAEx_ChangeMemory+0x100>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d040      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a34      	ldr	r2, [pc, #208]	; (800831c <HAL_DMAEx_ChangeMemory+0x104>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d03b      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a33      	ldr	r2, [pc, #204]	; (8008320 <HAL_DMAEx_ChangeMemory+0x108>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d036      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a31      	ldr	r2, [pc, #196]	; (8008324 <HAL_DMAEx_ChangeMemory+0x10c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d031      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a30      	ldr	r2, [pc, #192]	; (8008328 <HAL_DMAEx_ChangeMemory+0x110>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d02c      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a2e      	ldr	r2, [pc, #184]	; (800832c <HAL_DMAEx_ChangeMemory+0x114>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d027      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a2d      	ldr	r2, [pc, #180]	; (8008330 <HAL_DMAEx_ChangeMemory+0x118>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d022      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2b      	ldr	r2, [pc, #172]	; (8008334 <HAL_DMAEx_ChangeMemory+0x11c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d01d      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2a      	ldr	r2, [pc, #168]	; (8008338 <HAL_DMAEx_ChangeMemory+0x120>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d018      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a28      	ldr	r2, [pc, #160]	; (800833c <HAL_DMAEx_ChangeMemory+0x124>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a27      	ldr	r2, [pc, #156]	; (8008340 <HAL_DMAEx_ChangeMemory+0x128>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00e      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a25      	ldr	r2, [pc, #148]	; (8008344 <HAL_DMAEx_ChangeMemory+0x12c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d009      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a24      	ldr	r2, [pc, #144]	; (8008348 <HAL_DMAEx_ChangeMemory+0x130>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <HAL_DMAEx_ChangeMemory+0xae>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a22      	ldr	r2, [pc, #136]	; (800834c <HAL_DMAEx_ChangeMemory+0x134>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d101      	bne.n	80082ca <HAL_DMAEx_ChangeMemory+0xb2>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <HAL_DMAEx_ChangeMemory+0xb4>
 80082ca:	2300      	movs	r3, #0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	e010      	b.n	8008302 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	611a      	str	r2, [r3, #16]
 80082e8:	e00b      	b.n	8008302 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	e003      	b.n	8008302 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	40020010 	.word	0x40020010
 8008314:	40020028 	.word	0x40020028
 8008318:	40020040 	.word	0x40020040
 800831c:	40020058 	.word	0x40020058
 8008320:	40020070 	.word	0x40020070
 8008324:	40020088 	.word	0x40020088
 8008328:	400200a0 	.word	0x400200a0
 800832c:	400200b8 	.word	0x400200b8
 8008330:	40020410 	.word	0x40020410
 8008334:	40020428 	.word	0x40020428
 8008338:	40020440 	.word	0x40020440
 800833c:	40020458 	.word	0x40020458
 8008340:	40020470 	.word	0x40020470
 8008344:	40020488 	.word	0x40020488
 8008348:	400204a0 	.word	0x400204a0
 800834c:	400204b8 	.word	0x400204b8

08008350 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a46      	ldr	r2, [pc, #280]	; (800847c <DMA_MultiBufferSetConfig+0x12c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d04a      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a44      	ldr	r2, [pc, #272]	; (8008480 <DMA_MultiBufferSetConfig+0x130>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d045      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a43      	ldr	r2, [pc, #268]	; (8008484 <DMA_MultiBufferSetConfig+0x134>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d040      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a41      	ldr	r2, [pc, #260]	; (8008488 <DMA_MultiBufferSetConfig+0x138>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d03b      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a40      	ldr	r2, [pc, #256]	; (800848c <DMA_MultiBufferSetConfig+0x13c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d036      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a3e      	ldr	r2, [pc, #248]	; (8008490 <DMA_MultiBufferSetConfig+0x140>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d031      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a3d      	ldr	r2, [pc, #244]	; (8008494 <DMA_MultiBufferSetConfig+0x144>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d02c      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a3b      	ldr	r2, [pc, #236]	; (8008498 <DMA_MultiBufferSetConfig+0x148>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d027      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a3a      	ldr	r2, [pc, #232]	; (800849c <DMA_MultiBufferSetConfig+0x14c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d022      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a38      	ldr	r2, [pc, #224]	; (80084a0 <DMA_MultiBufferSetConfig+0x150>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d01d      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a37      	ldr	r2, [pc, #220]	; (80084a4 <DMA_MultiBufferSetConfig+0x154>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d018      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a35      	ldr	r2, [pc, #212]	; (80084a8 <DMA_MultiBufferSetConfig+0x158>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d013      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a34      	ldr	r2, [pc, #208]	; (80084ac <DMA_MultiBufferSetConfig+0x15c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00e      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a32      	ldr	r2, [pc, #200]	; (80084b0 <DMA_MultiBufferSetConfig+0x160>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d009      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a31      	ldr	r2, [pc, #196]	; (80084b4 <DMA_MultiBufferSetConfig+0x164>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d004      	beq.n	80083fe <DMA_MultiBufferSetConfig+0xae>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a2f      	ldr	r2, [pc, #188]	; (80084b8 <DMA_MultiBufferSetConfig+0x168>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d101      	bne.n	8008402 <DMA_MultiBufferSetConfig+0xb2>
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <DMA_MultiBufferSetConfig+0xb4>
 8008402:	2300      	movs	r3, #0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d019      	beq.n	800843c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b40      	cmp	r3, #64	; 0x40
 8008416:	d108      	bne.n	800842a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008428:	e021      	b.n	800846e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	60da      	str	r2, [r3, #12]
}
 800843a:	e018      	b.n	800846e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d108      	bne.n	800845e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	60da      	str	r2, [r3, #12]
}
 800845c:	e007      	b.n	800846e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40020010 	.word	0x40020010
 8008480:	40020028 	.word	0x40020028
 8008484:	40020040 	.word	0x40020040
 8008488:	40020058 	.word	0x40020058
 800848c:	40020070 	.word	0x40020070
 8008490:	40020088 	.word	0x40020088
 8008494:	400200a0 	.word	0x400200a0
 8008498:	400200b8 	.word	0x400200b8
 800849c:	40020410 	.word	0x40020410
 80084a0:	40020428 	.word	0x40020428
 80084a4:	40020440 	.word	0x40020440
 80084a8:	40020458 	.word	0x40020458
 80084ac:	40020470 	.word	0x40020470
 80084b0:	40020488 	.word	0x40020488
 80084b4:	400204a0 	.word	0x400204a0
 80084b8:	400204b8 	.word	0x400204b8

080084bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084bc:	b480      	push	{r7}
 80084be:	b089      	sub	sp, #36	; 0x24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084ca:	4b89      	ldr	r3, [pc, #548]	; (80086f0 <HAL_GPIO_Init+0x234>)
 80084cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084ce:	e194      	b.n	80087fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	2101      	movs	r1, #1
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	fa01 f303 	lsl.w	r3, r1, r3
 80084dc:	4013      	ands	r3, r2
 80084de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8186 	beq.w	80087f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d005      	beq.n	8008500 <HAL_GPIO_Init+0x44>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d130      	bne.n	8008562 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	2203      	movs	r2, #3
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	43db      	mvns	r3, r3
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4013      	ands	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	4313      	orrs	r3, r2
 8008528:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008536:	2201      	movs	r2, #1
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	43db      	mvns	r3, r3
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	4013      	ands	r3, r2
 8008544:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	091b      	lsrs	r3, r3, #4
 800854c:	f003 0201 	and.w	r2, r3, #1
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	4313      	orrs	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b03      	cmp	r3, #3
 800856c:	d017      	beq.n	800859e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	2203      	movs	r2, #3
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	43db      	mvns	r3, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4013      	ands	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	4313      	orrs	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d123      	bne.n	80085f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	08da      	lsrs	r2, r3, #3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3208      	adds	r2, #8
 80085b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	220f      	movs	r2, #15
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	43db      	mvns	r3, r3
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	4013      	ands	r3, r2
 80085cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	691a      	ldr	r2, [r3, #16]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	fa02 f303 	lsl.w	r3, r2, r3
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	08da      	lsrs	r2, r3, #3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3208      	adds	r2, #8
 80085ec:	69b9      	ldr	r1, [r7, #24]
 80085ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	2203      	movs	r2, #3
 80085fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008602:	43db      	mvns	r3, r3
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	4013      	ands	r3, r2
 8008608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f003 0203 	and.w	r2, r3, #3
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	4313      	orrs	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80e0 	beq.w	80087f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008634:	4b2f      	ldr	r3, [pc, #188]	; (80086f4 <HAL_GPIO_Init+0x238>)
 8008636:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800863a:	4a2e      	ldr	r2, [pc, #184]	; (80086f4 <HAL_GPIO_Init+0x238>)
 800863c:	f043 0302 	orr.w	r3, r3, #2
 8008640:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008644:	4b2b      	ldr	r3, [pc, #172]	; (80086f4 <HAL_GPIO_Init+0x238>)
 8008646:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008652:	4a29      	ldr	r2, [pc, #164]	; (80086f8 <HAL_GPIO_Init+0x23c>)
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	3302      	adds	r3, #2
 800865a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800865e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	220f      	movs	r2, #15
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	43db      	mvns	r3, r3
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	4013      	ands	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <HAL_GPIO_Init+0x240>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d052      	beq.n	8008724 <HAL_GPIO_Init+0x268>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a1f      	ldr	r2, [pc, #124]	; (8008700 <HAL_GPIO_Init+0x244>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d031      	beq.n	80086ea <HAL_GPIO_Init+0x22e>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a1e      	ldr	r2, [pc, #120]	; (8008704 <HAL_GPIO_Init+0x248>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d02b      	beq.n	80086e6 <HAL_GPIO_Init+0x22a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a1d      	ldr	r2, [pc, #116]	; (8008708 <HAL_GPIO_Init+0x24c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d025      	beq.n	80086e2 <HAL_GPIO_Init+0x226>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1c      	ldr	r2, [pc, #112]	; (800870c <HAL_GPIO_Init+0x250>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d01f      	beq.n	80086de <HAL_GPIO_Init+0x222>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a1b      	ldr	r2, [pc, #108]	; (8008710 <HAL_GPIO_Init+0x254>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d019      	beq.n	80086da <HAL_GPIO_Init+0x21e>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a1a      	ldr	r2, [pc, #104]	; (8008714 <HAL_GPIO_Init+0x258>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d013      	beq.n	80086d6 <HAL_GPIO_Init+0x21a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a19      	ldr	r2, [pc, #100]	; (8008718 <HAL_GPIO_Init+0x25c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00d      	beq.n	80086d2 <HAL_GPIO_Init+0x216>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a18      	ldr	r2, [pc, #96]	; (800871c <HAL_GPIO_Init+0x260>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d007      	beq.n	80086ce <HAL_GPIO_Init+0x212>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a17      	ldr	r2, [pc, #92]	; (8008720 <HAL_GPIO_Init+0x264>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d101      	bne.n	80086ca <HAL_GPIO_Init+0x20e>
 80086c6:	2309      	movs	r3, #9
 80086c8:	e02d      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086ca:	230a      	movs	r3, #10
 80086cc:	e02b      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086ce:	2308      	movs	r3, #8
 80086d0:	e029      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086d2:	2307      	movs	r3, #7
 80086d4:	e027      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086d6:	2306      	movs	r3, #6
 80086d8:	e025      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086da:	2305      	movs	r3, #5
 80086dc:	e023      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086de:	2304      	movs	r3, #4
 80086e0:	e021      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086e2:	2303      	movs	r3, #3
 80086e4:	e01f      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086e6:	2302      	movs	r3, #2
 80086e8:	e01d      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e01b      	b.n	8008726 <HAL_GPIO_Init+0x26a>
 80086ee:	bf00      	nop
 80086f0:	58000080 	.word	0x58000080
 80086f4:	58024400 	.word	0x58024400
 80086f8:	58000400 	.word	0x58000400
 80086fc:	58020000 	.word	0x58020000
 8008700:	58020400 	.word	0x58020400
 8008704:	58020800 	.word	0x58020800
 8008708:	58020c00 	.word	0x58020c00
 800870c:	58021000 	.word	0x58021000
 8008710:	58021400 	.word	0x58021400
 8008714:	58021800 	.word	0x58021800
 8008718:	58021c00 	.word	0x58021c00
 800871c:	58022000 	.word	0x58022000
 8008720:	58022400 	.word	0x58022400
 8008724:	2300      	movs	r3, #0
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	f002 0203 	and.w	r2, r2, #3
 800872c:	0092      	lsls	r2, r2, #2
 800872e:	4093      	lsls	r3, r2
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	4313      	orrs	r3, r2
 8008734:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008736:	4938      	ldr	r1, [pc, #224]	; (8008818 <HAL_GPIO_Init+0x35c>)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	089b      	lsrs	r3, r3, #2
 800873c:	3302      	adds	r3, #2
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	43db      	mvns	r3, r3
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	4013      	ands	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800876a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	43db      	mvns	r3, r3
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	4013      	ands	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	4313      	orrs	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	43db      	mvns	r3, r3
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	4013      	ands	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	43db      	mvns	r3, r3
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	4013      	ands	r3, r2
 80087d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	3301      	adds	r3, #1
 80087f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	f47f ae63 	bne.w	80084d0 <HAL_GPIO_Init+0x14>
  }
}
 800880a:	bf00      	nop
 800880c:	bf00      	nop
 800880e:	3724      	adds	r7, #36	; 0x24
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	58000400 	.word	0x58000400

0800881c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800882a:	4b75      	ldr	r3, [pc, #468]	; (8008a00 <HAL_GPIO_DeInit+0x1e4>)
 800882c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800882e:	e0d9      	b.n	80089e4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008830:	2201      	movs	r2, #1
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	4013      	ands	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 80cc 	beq.w	80089de <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008846:	4a6f      	ldr	r2, [pc, #444]	; (8008a04 <HAL_GPIO_DeInit+0x1e8>)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	3302      	adds	r3, #2
 800884e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008852:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	220f      	movs	r2, #15
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	4013      	ands	r3, r2
 8008866:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a67      	ldr	r2, [pc, #412]	; (8008a08 <HAL_GPIO_DeInit+0x1ec>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d037      	beq.n	80088e0 <HAL_GPIO_DeInit+0xc4>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a66      	ldr	r2, [pc, #408]	; (8008a0c <HAL_GPIO_DeInit+0x1f0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d031      	beq.n	80088dc <HAL_GPIO_DeInit+0xc0>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a65      	ldr	r2, [pc, #404]	; (8008a10 <HAL_GPIO_DeInit+0x1f4>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d02b      	beq.n	80088d8 <HAL_GPIO_DeInit+0xbc>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a64      	ldr	r2, [pc, #400]	; (8008a14 <HAL_GPIO_DeInit+0x1f8>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d025      	beq.n	80088d4 <HAL_GPIO_DeInit+0xb8>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a63      	ldr	r2, [pc, #396]	; (8008a18 <HAL_GPIO_DeInit+0x1fc>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d01f      	beq.n	80088d0 <HAL_GPIO_DeInit+0xb4>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a62      	ldr	r2, [pc, #392]	; (8008a1c <HAL_GPIO_DeInit+0x200>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d019      	beq.n	80088cc <HAL_GPIO_DeInit+0xb0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a61      	ldr	r2, [pc, #388]	; (8008a20 <HAL_GPIO_DeInit+0x204>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d013      	beq.n	80088c8 <HAL_GPIO_DeInit+0xac>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a60      	ldr	r2, [pc, #384]	; (8008a24 <HAL_GPIO_DeInit+0x208>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00d      	beq.n	80088c4 <HAL_GPIO_DeInit+0xa8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a5f      	ldr	r2, [pc, #380]	; (8008a28 <HAL_GPIO_DeInit+0x20c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <HAL_GPIO_DeInit+0xa4>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a5e      	ldr	r2, [pc, #376]	; (8008a2c <HAL_GPIO_DeInit+0x210>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d101      	bne.n	80088bc <HAL_GPIO_DeInit+0xa0>
 80088b8:	2309      	movs	r3, #9
 80088ba:	e012      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088bc:	230a      	movs	r3, #10
 80088be:	e010      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088c0:	2308      	movs	r3, #8
 80088c2:	e00e      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088c4:	2307      	movs	r3, #7
 80088c6:	e00c      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088c8:	2306      	movs	r3, #6
 80088ca:	e00a      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088cc:	2305      	movs	r3, #5
 80088ce:	e008      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088d0:	2304      	movs	r3, #4
 80088d2:	e006      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088d4:	2303      	movs	r3, #3
 80088d6:	e004      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088d8:	2302      	movs	r3, #2
 80088da:	e002      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088dc:	2301      	movs	r3, #1
 80088de:	e000      	b.n	80088e2 <HAL_GPIO_DeInit+0xc6>
 80088e0:	2300      	movs	r3, #0
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	f002 0203 	and.w	r2, r2, #3
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	4093      	lsls	r3, r2
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d136      	bne.n	8008960 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	43db      	mvns	r3, r3
 80088fa:	401a      	ands	r2, r3
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	43db      	mvns	r3, r3
 8008908:	401a      	ands	r2, r3
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800890e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	43db      	mvns	r3, r3
 8008918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800891c:	4013      	ands	r3, r2
 800891e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	43db      	mvns	r3, r3
 800892a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800892e:	4013      	ands	r3, r2
 8008930:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	220f      	movs	r2, #15
 800893c:	fa02 f303 	lsl.w	r3, r2, r3
 8008940:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008942:	4a30      	ldr	r2, [pc, #192]	; (8008a04 <HAL_GPIO_DeInit+0x1e8>)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	089b      	lsrs	r3, r3, #2
 8008948:	3302      	adds	r3, #2
 800894a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	43da      	mvns	r2, r3
 8008952:	482c      	ldr	r0, [pc, #176]	; (8008a04 <HAL_GPIO_DeInit+0x1e8>)
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	400a      	ands	r2, r1
 800895a:	3302      	adds	r3, #2
 800895c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	2103      	movs	r1, #3
 800896a:	fa01 f303 	lsl.w	r3, r1, r3
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	08da      	lsrs	r2, r3, #3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3208      	adds	r2, #8
 800897c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	220f      	movs	r2, #15
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	43db      	mvns	r3, r3
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	08d2      	lsrs	r2, r2, #3
 8008994:	4019      	ands	r1, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3208      	adds	r2, #8
 800899a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	2103      	movs	r1, #3
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	43db      	mvns	r3, r3
 80089ae:	401a      	ands	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	2101      	movs	r1, #1
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	fa01 f303 	lsl.w	r3, r1, r3
 80089c0:	43db      	mvns	r3, r3
 80089c2:	401a      	ands	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	2103      	movs	r1, #3
 80089d2:	fa01 f303 	lsl.w	r3, r1, r3
 80089d6:	43db      	mvns	r3, r3
 80089d8:	401a      	ands	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	3301      	adds	r3, #1
 80089e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f47f af1f 	bne.w	8008830 <HAL_GPIO_DeInit+0x14>
  }
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	58000080 	.word	0x58000080
 8008a04:	58000400 	.word	0x58000400
 8008a08:	58020000 	.word	0x58020000
 8008a0c:	58020400 	.word	0x58020400
 8008a10:	58020800 	.word	0x58020800
 8008a14:	58020c00 	.word	0x58020c00
 8008a18:	58021000 	.word	0x58021000
 8008a1c:	58021400 	.word	0x58021400
 8008a20:	58021800 	.word	0x58021800
 8008a24:	58021c00 	.word	0x58021c00
 8008a28:	58022000 	.word	0x58022000
 8008a2c:	58022400 	.word	0x58022400

08008a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	807b      	strh	r3, [r7, #2]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a40:	787b      	ldrb	r3, [r7, #1]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a46:	887a      	ldrh	r2, [r7, #2]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a4c:	e003      	b.n	8008a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a4e:	887b      	ldrh	r3, [r7, #2]
 8008a50:	041a      	lsls	r2, r3, #16
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	619a      	str	r2, [r3, #24]
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e07f      	b.n	8008b76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fb f886 	bl	8003b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2224      	movs	r2, #36	; 0x24
 8008a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ab4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ac4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d107      	bne.n	8008ade <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ada:	609a      	str	r2, [r3, #8]
 8008adc:	e006      	b.n	8008aec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008aea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d104      	bne.n	8008afe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008afc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6859      	ldr	r1, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4b1d      	ldr	r3, [pc, #116]	; (8008b80 <HAL_I2C_Init+0x11c>)
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691a      	ldr	r2, [r3, #16]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	69d9      	ldr	r1, [r3, #28]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1a      	ldr	r2, [r3, #32]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0201 	orr.w	r2, r2, #1
 8008b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	02008000 	.word	0x02008000

08008b84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e021      	b.n	8008bda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2224      	movs	r2, #36	; 0x24
 8008b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fb f86e 	bl	8003c90 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	4608      	mov	r0, r1
 8008bee:	4611      	mov	r1, r2
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	817b      	strh	r3, [r7, #10]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	813b      	strh	r3, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	f040 80f9 	bne.w	8008dfe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <HAL_I2C_Mem_Write+0x34>
 8008c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0ed      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d101      	bne.n	8008c32 <HAL_I2C_Mem_Write+0x4e>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e0e6      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c3a:	f7fb fac1 	bl	80041c0 <HAL_GetTick>
 8008c3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	2319      	movs	r3, #25
 8008c46:	2201      	movs	r2, #1
 8008c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f001 f900 	bl	8009e52 <I2C_WaitOnFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e0d1      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2221      	movs	r2, #33	; 0x21
 8008c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2240      	movs	r2, #64	; 0x40
 8008c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a3a      	ldr	r2, [r7, #32]
 8008c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c84:	88f8      	ldrh	r0, [r7, #6]
 8008c86:	893a      	ldrh	r2, [r7, #8]
 8008c88:	8979      	ldrh	r1, [r7, #10]
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	4603      	mov	r3, r0
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 fbab 	bl	80093f0 <I2C_RequestMemoryWrite>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e0a9      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2bff      	cmp	r3, #255	; 0xff
 8008cb4:	d90e      	bls.n	8008cd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	22ff      	movs	r2, #255	; 0xff
 8008cba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	8979      	ldrh	r1, [r7, #10]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f001 fa79 	bl	800a1c4 <I2C_TransferConfig>
 8008cd2:	e00f      	b.n	8008cf4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	8979      	ldrh	r1, [r7, #10]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f001 fa68 	bl	800a1c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f001 f8f9 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e07b      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	781a      	ldrb	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d30:	3b01      	subs	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d034      	beq.n	8008dac <HAL_I2C_Mem_Write+0x1c8>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d130      	bne.n	8008dac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	2200      	movs	r2, #0
 8008d52:	2180      	movs	r1, #128	; 0x80
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f001 f87c 	bl	8009e52 <I2C_WaitOnFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e04d      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2bff      	cmp	r3, #255	; 0xff
 8008d6c:	d90e      	bls.n	8008d8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	22ff      	movs	r2, #255	; 0xff
 8008d72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	8979      	ldrh	r1, [r7, #10]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f001 fa1d 	bl	800a1c4 <I2C_TransferConfig>
 8008d8a:	e00f      	b.n	8008dac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	8979      	ldrh	r1, [r7, #10]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f001 fa0c 	bl	800a1c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d19e      	bne.n	8008cf4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f001 f8df 	bl	8009f7e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e01a      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6859      	ldr	r1, [r3, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <HAL_I2C_Mem_Write+0x224>)
 8008dde:	400b      	ands	r3, r1
 8008de0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e000      	b.n	8008e00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008dfe:	2302      	movs	r3, #2
  }
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	fe00e800 	.word	0xfe00e800

08008e0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	4608      	mov	r0, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	817b      	strh	r3, [r7, #10]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	813b      	strh	r3, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	f040 80fd 	bne.w	800902e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <HAL_I2C_Mem_Read+0x34>
 8008e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d105      	bne.n	8008e4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e0f1      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <HAL_I2C_Mem_Read+0x4e>
 8008e56:	2302      	movs	r3, #2
 8008e58:	e0ea      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e62:	f7fb f9ad 	bl	80041c0 <HAL_GetTick>
 8008e66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	2319      	movs	r3, #25
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 ffec 	bl	8009e52 <I2C_WaitOnFlagUntilTimeout>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e0d5      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2222      	movs	r2, #34	; 0x22
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2240      	movs	r2, #64	; 0x40
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a3a      	ldr	r2, [r7, #32]
 8008e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008eac:	88f8      	ldrh	r0, [r7, #6]
 8008eae:	893a      	ldrh	r2, [r7, #8]
 8008eb0:	8979      	ldrh	r1, [r7, #10]
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	4603      	mov	r3, r0
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 faeb 	bl	8009498 <I2C_RequestMemoryRead>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e0ad      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2bff      	cmp	r3, #255	; 0xff
 8008edc:	d90e      	bls.n	8008efc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	22ff      	movs	r2, #255	; 0xff
 8008ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	8979      	ldrh	r1, [r7, #10]
 8008eec:	4b52      	ldr	r3, [pc, #328]	; (8009038 <HAL_I2C_Mem_Read+0x22c>)
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f001 f965 	bl	800a1c4 <I2C_TransferConfig>
 8008efa:	e00f      	b.n	8008f1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	8979      	ldrh	r1, [r7, #10]
 8008f0e:	4b4a      	ldr	r3, [pc, #296]	; (8009038 <HAL_I2C_Mem_Read+0x22c>)
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f001 f954 	bl	800a1c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	2200      	movs	r2, #0
 8008f24:	2104      	movs	r1, #4
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 ff93 	bl	8009e52 <I2C_WaitOnFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e07c      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f52:	3b01      	subs	r3, #1
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d034      	beq.n	8008fdc <HAL_I2C_Mem_Read+0x1d0>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d130      	bne.n	8008fdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	2200      	movs	r2, #0
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 ff64 	bl	8009e52 <I2C_WaitOnFlagUntilTimeout>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e04d      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2bff      	cmp	r3, #255	; 0xff
 8008f9c:	d90e      	bls.n	8008fbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	22ff      	movs	r2, #255	; 0xff
 8008fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	8979      	ldrh	r1, [r7, #10]
 8008fac:	2300      	movs	r3, #0
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f001 f905 	bl	800a1c4 <I2C_TransferConfig>
 8008fba:	e00f      	b.n	8008fdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	8979      	ldrh	r1, [r7, #10]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f001 f8f4 	bl	800a1c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d19a      	bne.n	8008f1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 ffc7 	bl	8009f7e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e01a      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2220      	movs	r2, #32
 8009000:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6859      	ldr	r1, [r3, #4]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	4b0b      	ldr	r3, [pc, #44]	; (800903c <HAL_I2C_Mem_Read+0x230>)
 800900e:	400b      	ands	r3, r1
 8009010:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2220      	movs	r2, #32
 8009016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e000      	b.n	8009030 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800902e:	2302      	movs	r3, #2
  }
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	80002400 	.word	0x80002400
 800903c:	fe00e800 	.word	0xfe00e800

08009040 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
  }
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	0a1b      	lsrs	r3, r3, #8
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d010      	beq.n	80090ba <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	09db      	lsrs	r3, r3, #7
 800909c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a8:	f043 0201 	orr.w	r2, r3, #1
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	0a9b      	lsrs	r3, r3, #10
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d010      	beq.n	80090e8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	09db      	lsrs	r3, r3, #7
 80090ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d6:	f043 0208 	orr.w	r2, r3, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	0a5b      	lsrs	r3, r3, #9
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	09db      	lsrs	r3, r3, #7
 80090f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009104:	f043 0202 	orr.w	r2, r3, #2
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009114:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f003 030b 	and.w	r3, r3, #11
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fd39 	bl	8009ba0 <I2C_ITError>
  }
}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	70fb      	strb	r3, [r7, #3]
 800916a:	4613      	mov	r3, r2
 800916c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091c4:	b2db      	uxtb	r3, r3
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80091de:	4618      	mov	r0, r3
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <I2C_Slave_ISR_IT+0x24>
 800920a:	2302      	movs	r3, #2
 800920c:	e0ec      	b.n	80093e8 <I2C_Slave_ISR_IT+0x1fe>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	095b      	lsrs	r3, r3, #5
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	095b      	lsrs	r3, r3, #5
 8009226:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800922e:	6939      	ldr	r1, [r7, #16]
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fa67 	bl	8009704 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	091b      	lsrs	r3, r3, #4
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d04d      	beq.n	80092de <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	091b      	lsrs	r3, r3, #4
 8009246:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800924a:	2b00      	cmp	r3, #0
 800924c:	d047      	beq.n	80092de <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d128      	bne.n	80092aa <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b28      	cmp	r3, #40	; 0x28
 8009262:	d108      	bne.n	8009276 <I2C_Slave_ISR_IT+0x8c>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800926a:	d104      	bne.n	8009276 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800926c:	6939      	ldr	r1, [r7, #16]
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 fc40 	bl	8009af4 <I2C_ITListenCplt>
 8009274:	e032      	b.n	80092dc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b29      	cmp	r3, #41	; 0x29
 8009280:	d10e      	bne.n	80092a0 <I2C_Slave_ISR_IT+0xb6>
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009288:	d00a      	beq.n	80092a0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2210      	movs	r2, #16
 8009290:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 fd9b 	bl	8009dce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f9d5 	bl	8009648 <I2C_ITSlaveSeqCplt>
 800929e:	e01d      	b.n	80092dc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2210      	movs	r2, #16
 80092a6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80092a8:	e096      	b.n	80093d8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2210      	movs	r2, #16
 80092b0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b6:	f043 0204 	orr.w	r2, r3, #4
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <I2C_Slave_ISR_IT+0xe4>
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092ca:	f040 8085 	bne.w	80093d8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d2:	4619      	mov	r1, r3
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 fc63 	bl	8009ba0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80092da:	e07d      	b.n	80093d8 <I2C_Slave_ISR_IT+0x1ee>
 80092dc:	e07c      	b.n	80093d8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	089b      	lsrs	r3, r3, #2
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d030      	beq.n	800934c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	089b      	lsrs	r3, r3, #2
 80092ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d02a      	beq.n	800934c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d018      	beq.n	8009332 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009336:	b29b      	uxth	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d14f      	bne.n	80093dc <I2C_Slave_ISR_IT+0x1f2>
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009342:	d04b      	beq.n	80093dc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 f97f 	bl	8009648 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800934a:	e047      	b.n	80093dc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	08db      	lsrs	r3, r3, #3
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	08db      	lsrs	r3, r3, #3
 800935c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009364:	6939      	ldr	r1, [r7, #16]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f8ea 	bl	8009540 <I2C_ITAddrCplt>
 800936c:	e037      	b.n	80093de <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	085b      	lsrs	r3, r3, #1
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d031      	beq.n	80093de <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	085b      	lsrs	r3, r3, #1
 800937e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009382:	2b00      	cmp	r3, #0
 8009384:	d02b      	beq.n	80093de <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800938a:	b29b      	uxth	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	d018      	beq.n	80093c2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	781a      	ldrb	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	851a      	strh	r2, [r3, #40]	; 0x28
 80093c0:	e00d      	b.n	80093de <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093c8:	d002      	beq.n	80093d0 <I2C_Slave_ISR_IT+0x1e6>
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d106      	bne.n	80093de <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f939 	bl	8009648 <I2C_ITSlaveSeqCplt>
 80093d6:	e002      	b.n	80093de <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80093d8:	bf00      	nop
 80093da:	e000      	b.n	80093de <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80093dc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	4608      	mov	r0, r1
 80093fa:	4611      	mov	r1, r2
 80093fc:	461a      	mov	r2, r3
 80093fe:	4603      	mov	r3, r0
 8009400:	817b      	strh	r3, [r7, #10]
 8009402:	460b      	mov	r3, r1
 8009404:	813b      	strh	r3, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800940a:	88fb      	ldrh	r3, [r7, #6]
 800940c:	b2da      	uxtb	r2, r3
 800940e:	8979      	ldrh	r1, [r7, #10]
 8009410:	4b20      	ldr	r3, [pc, #128]	; (8009494 <I2C_RequestMemoryWrite+0xa4>)
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fed3 	bl	800a1c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	69b9      	ldr	r1, [r7, #24]
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fd64 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e02c      	b.n	800948c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d105      	bne.n	8009444 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009438:	893b      	ldrh	r3, [r7, #8]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	629a      	str	r2, [r3, #40]	; 0x28
 8009442:	e015      	b.n	8009470 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009444:	893b      	ldrh	r3, [r7, #8]
 8009446:	0a1b      	lsrs	r3, r3, #8
 8009448:	b29b      	uxth	r3, r3
 800944a:	b2da      	uxtb	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	69b9      	ldr	r1, [r7, #24]
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fd4a 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e012      	b.n	800948c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009466:	893b      	ldrh	r3, [r7, #8]
 8009468:	b2da      	uxtb	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	2200      	movs	r2, #0
 8009478:	2180      	movs	r1, #128	; 0x80
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 fce9 	bl	8009e52 <I2C_WaitOnFlagUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	80002000 	.word	0x80002000

08009498 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af02      	add	r7, sp, #8
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	4608      	mov	r0, r1
 80094a2:	4611      	mov	r1, r2
 80094a4:	461a      	mov	r2, r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	817b      	strh	r3, [r7, #10]
 80094aa:	460b      	mov	r3, r1
 80094ac:	813b      	strh	r3, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	8979      	ldrh	r1, [r7, #10]
 80094b8:	4b20      	ldr	r3, [pc, #128]	; (800953c <I2C_RequestMemoryRead+0xa4>)
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	2300      	movs	r3, #0
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fe80 	bl	800a1c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094c4:	69fa      	ldr	r2, [r7, #28]
 80094c6:	69b9      	ldr	r1, [r7, #24]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fd11 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e02c      	b.n	8009532 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094d8:	88fb      	ldrh	r3, [r7, #6]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d105      	bne.n	80094ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094de:	893b      	ldrh	r3, [r7, #8]
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	629a      	str	r2, [r3, #40]	; 0x28
 80094e8:	e015      	b.n	8009516 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094ea:	893b      	ldrh	r3, [r7, #8]
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094f8:	69fa      	ldr	r2, [r7, #28]
 80094fa:	69b9      	ldr	r1, [r7, #24]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 fcf7 	bl	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e012      	b.n	8009532 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800950c:	893b      	ldrh	r3, [r7, #8]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2200      	movs	r2, #0
 800951e:	2140      	movs	r1, #64	; 0x40
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fc96 	bl	8009e52 <I2C_WaitOnFlagUntilTimeout>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	80002000 	.word	0x80002000

08009540 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009550:	b2db      	uxtb	r3, r3
 8009552:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009556:	2b28      	cmp	r3, #40	; 0x28
 8009558:	d16a      	bne.n	8009630 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	0c1b      	lsrs	r3, r3, #16
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	0c1b      	lsrs	r3, r3, #16
 8009572:	b29b      	uxth	r3, r3
 8009574:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009578:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	b29b      	uxth	r3, r3
 8009582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009586:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009594:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2b02      	cmp	r3, #2
 800959c:	d138      	bne.n	8009610 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800959e:	897b      	ldrh	r3, [r7, #10]
 80095a0:	09db      	lsrs	r3, r3, #7
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	89bb      	ldrh	r3, [r7, #12]
 80095a6:	4053      	eors	r3, r2
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f003 0306 	and.w	r3, r3, #6
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d11c      	bne.n	80095ec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80095b2:	897b      	ldrh	r3, [r7, #10]
 80095b4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d13b      	bne.n	8009640 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2208      	movs	r2, #8
 80095d4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80095de:	89ba      	ldrh	r2, [r7, #12]
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff fdba 	bl	800915e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80095ea:	e029      	b.n	8009640 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80095ec:	893b      	ldrh	r3, [r7, #8]
 80095ee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80095f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fe17 	bl	800a228 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009602:	89ba      	ldrh	r2, [r7, #12]
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff fda8 	bl	800915e <HAL_I2C_AddrCallback>
}
 800960e:	e017      	b.n	8009640 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fe07 	bl	800a228 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009622:	89ba      	ldrh	r2, [r7, #12]
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff fd98 	bl	800915e <HAL_I2C_AddrCallback>
}
 800962e:	e007      	b.n	8009640 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2208      	movs	r2, #8
 8009636:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	0b9b      	lsrs	r3, r3, #14
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d008      	beq.n	800967e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	e00d      	b.n	800969a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	0bdb      	lsrs	r3, r3, #15
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d007      	beq.n	800969a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009698:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b29      	cmp	r3, #41	; 0x29
 80096a4:	d112      	bne.n	80096cc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2228      	movs	r2, #40	; 0x28
 80096aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2221      	movs	r2, #33	; 0x21
 80096b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80096b4:	2101      	movs	r1, #1
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fdb6 	bl	800a228 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff fd36 	bl	8009136 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80096ca:	e017      	b.n	80096fc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b2a      	cmp	r3, #42	; 0x2a
 80096d6:	d111      	bne.n	80096fc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2228      	movs	r2, #40	; 0x28
 80096dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2222      	movs	r2, #34	; 0x22
 80096e4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80096e6:	2102      	movs	r1, #2
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fd9d 	bl	800a228 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff fd27 	bl	800914a <HAL_I2C_SlaveRxCpltCallback>
}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009720:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2220      	movs	r2, #32
 8009728:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	2b21      	cmp	r3, #33	; 0x21
 800972e:	d002      	beq.n	8009736 <I2C_ITSlaveCplt+0x32>
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	2b29      	cmp	r3, #41	; 0x29
 8009734:	d108      	bne.n	8009748 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009736:	f248 0101 	movw	r1, #32769	; 0x8001
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fd74 	bl	800a228 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2221      	movs	r2, #33	; 0x21
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
 8009746:	e00d      	b.n	8009764 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	2b22      	cmp	r3, #34	; 0x22
 800974c:	d002      	beq.n	8009754 <I2C_ITSlaveCplt+0x50>
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	2b2a      	cmp	r3, #42	; 0x2a
 8009752:	d107      	bne.n	8009764 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009754:	f248 0102 	movw	r1, #32770	; 0x8002
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fd65 	bl	800a228 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2222      	movs	r2, #34	; 0x22
 8009762:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009772:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6859      	ldr	r1, [r3, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4b80      	ldr	r3, [pc, #512]	; (8009980 <I2C_ITSlaveCplt+0x27c>)
 8009780:	400b      	ands	r3, r1
 8009782:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fb22 	bl	8009dce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	0b9b      	lsrs	r3, r3, #14
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d07a      	beq.n	800988c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 8111 	beq.w	80099d2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a73      	ldr	r2, [pc, #460]	; (8009984 <I2C_ITSlaveCplt+0x280>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d059      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a71      	ldr	r2, [pc, #452]	; (8009988 <I2C_ITSlaveCplt+0x284>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d053      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a6f      	ldr	r2, [pc, #444]	; (800998c <I2C_ITSlaveCplt+0x288>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d04d      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a6d      	ldr	r2, [pc, #436]	; (8009990 <I2C_ITSlaveCplt+0x28c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d047      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a6b      	ldr	r2, [pc, #428]	; (8009994 <I2C_ITSlaveCplt+0x290>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d041      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a69      	ldr	r2, [pc, #420]	; (8009998 <I2C_ITSlaveCplt+0x294>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d03b      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a67      	ldr	r2, [pc, #412]	; (800999c <I2C_ITSlaveCplt+0x298>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d035      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a65      	ldr	r2, [pc, #404]	; (80099a0 <I2C_ITSlaveCplt+0x29c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d02f      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a63      	ldr	r2, [pc, #396]	; (80099a4 <I2C_ITSlaveCplt+0x2a0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d029      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a61      	ldr	r2, [pc, #388]	; (80099a8 <I2C_ITSlaveCplt+0x2a4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d023      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a5f      	ldr	r2, [pc, #380]	; (80099ac <I2C_ITSlaveCplt+0x2a8>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d01d      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a5d      	ldr	r2, [pc, #372]	; (80099b0 <I2C_ITSlaveCplt+0x2ac>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d017      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a5b      	ldr	r2, [pc, #364]	; (80099b4 <I2C_ITSlaveCplt+0x2b0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d011      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a59      	ldr	r2, [pc, #356]	; (80099b8 <I2C_ITSlaveCplt+0x2b4>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00b      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a57      	ldr	r2, [pc, #348]	; (80099bc <I2C_ITSlaveCplt+0x2b8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d005      	beq.n	8009870 <I2C_ITSlaveCplt+0x16c>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a55      	ldr	r2, [pc, #340]	; (80099c0 <I2C_ITSlaveCplt+0x2bc>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d105      	bne.n	800987c <I2C_ITSlaveCplt+0x178>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	b29b      	uxth	r3, r3
 800987a:	e004      	b.n	8009886 <I2C_ITSlaveCplt+0x182>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	b29b      	uxth	r3, r3
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	8553      	strh	r3, [r2, #42]	; 0x2a
 800988a:	e0a2      	b.n	80099d2 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	0bdb      	lsrs	r3, r3, #15
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 809c 	beq.w	80099d2 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 808f 	beq.w	80099d2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a32      	ldr	r2, [pc, #200]	; (8009984 <I2C_ITSlaveCplt+0x280>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d059      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a30      	ldr	r2, [pc, #192]	; (8009988 <I2C_ITSlaveCplt+0x284>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d053      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a2e      	ldr	r2, [pc, #184]	; (800998c <I2C_ITSlaveCplt+0x288>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d04d      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a2c      	ldr	r2, [pc, #176]	; (8009990 <I2C_ITSlaveCplt+0x28c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d047      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a2a      	ldr	r2, [pc, #168]	; (8009994 <I2C_ITSlaveCplt+0x290>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d041      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a28      	ldr	r2, [pc, #160]	; (8009998 <I2C_ITSlaveCplt+0x294>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d03b      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a26      	ldr	r2, [pc, #152]	; (800999c <I2C_ITSlaveCplt+0x298>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d035      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a24      	ldr	r2, [pc, #144]	; (80099a0 <I2C_ITSlaveCplt+0x29c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d02f      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a22      	ldr	r2, [pc, #136]	; (80099a4 <I2C_ITSlaveCplt+0x2a0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d029      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a20      	ldr	r2, [pc, #128]	; (80099a8 <I2C_ITSlaveCplt+0x2a4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d023      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a1e      	ldr	r2, [pc, #120]	; (80099ac <I2C_ITSlaveCplt+0x2a8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d01d      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1c      	ldr	r2, [pc, #112]	; (80099b0 <I2C_ITSlaveCplt+0x2ac>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d017      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a1a      	ldr	r2, [pc, #104]	; (80099b4 <I2C_ITSlaveCplt+0x2b0>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d011      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a18      	ldr	r2, [pc, #96]	; (80099b8 <I2C_ITSlaveCplt+0x2b4>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00b      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a16      	ldr	r2, [pc, #88]	; (80099bc <I2C_ITSlaveCplt+0x2b8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d005      	beq.n	8009974 <I2C_ITSlaveCplt+0x270>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a14      	ldr	r2, [pc, #80]	; (80099c0 <I2C_ITSlaveCplt+0x2bc>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d127      	bne.n	80099c4 <I2C_ITSlaveCplt+0x2c0>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	b29b      	uxth	r3, r3
 800997e:	e026      	b.n	80099ce <I2C_ITSlaveCplt+0x2ca>
 8009980:	fe00e800 	.word	0xfe00e800
 8009984:	40020010 	.word	0x40020010
 8009988:	40020028 	.word	0x40020028
 800998c:	40020040 	.word	0x40020040
 8009990:	40020058 	.word	0x40020058
 8009994:	40020070 	.word	0x40020070
 8009998:	40020088 	.word	0x40020088
 800999c:	400200a0 	.word	0x400200a0
 80099a0:	400200b8 	.word	0x400200b8
 80099a4:	40020410 	.word	0x40020410
 80099a8:	40020428 	.word	0x40020428
 80099ac:	40020440 	.word	0x40020440
 80099b0:	40020458 	.word	0x40020458
 80099b4:	40020470 	.word	0x40020470
 80099b8:	40020488 	.word	0x40020488
 80099bc:	400204a0 	.word	0x400204a0
 80099c0:	400204b8 	.word	0x400204b8
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	089b      	lsrs	r3, r3, #2
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d020      	beq.n	8009a20 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f023 0304 	bic.w	r3, r3, #4
 80099e4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00c      	beq.n	8009a20 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d005      	beq.n	8009a36 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2e:	f043 0204 	orr.w	r2, r3, #4
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d010      	beq.n	8009a6e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f8a4 	bl	8009ba0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b28      	cmp	r3, #40	; 0x28
 8009a62:	d141      	bne.n	8009ae8 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009a64:	6979      	ldr	r1, [r7, #20]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f844 	bl	8009af4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009a6c:	e03c      	b.n	8009ae8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a76:	d014      	beq.n	8009aa2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fde5 	bl	8009648 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a1b      	ldr	r2, [pc, #108]	; (8009af0 <I2C_ITSlaveCplt+0x3ec>)
 8009a82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff fb6d 	bl	800917a <HAL_I2C_ListenCpltCallback>
}
 8009aa0:	e022      	b.n	8009ae8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b22      	cmp	r3, #34	; 0x22
 8009aac:	d10e      	bne.n	8009acc <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fb40 	bl	800914a <HAL_I2C_SlaveRxCpltCallback>
}
 8009aca:	e00d      	b.n	8009ae8 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff fb27 	bl	8009136 <HAL_I2C_SlaveTxCpltCallback>
}
 8009ae8:	bf00      	nop
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	ffff0000 	.word	0xffff0000

08009af4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a26      	ldr	r2, [pc, #152]	; (8009b9c <I2C_ITListenCplt+0xa8>)
 8009b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	089b      	lsrs	r3, r3, #2
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d022      	beq.n	8009b72 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d012      	beq.n	8009b72 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6a:	f043 0204 	orr.w	r2, r3, #4
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009b72:	f248 0103 	movw	r1, #32771	; 0x8003
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb56 	bl	800a228 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2210      	movs	r2, #16
 8009b82:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff faf4 	bl	800917a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	ffff0000 	.word	0xffff0000

08009ba0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a6d      	ldr	r2, [pc, #436]	; (8009d74 <I2C_ITError+0x1d4>)
 8009bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	2b28      	cmp	r3, #40	; 0x28
 8009bd6:	d005      	beq.n	8009be4 <I2C_ITError+0x44>
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	2b29      	cmp	r3, #41	; 0x29
 8009bdc:	d002      	beq.n	8009be4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
 8009be0:	2b2a      	cmp	r3, #42	; 0x2a
 8009be2:	d10b      	bne.n	8009bfc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009be4:	2103      	movs	r1, #3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fb1e 	bl	800a228 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2228      	movs	r2, #40	; 0x28
 8009bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a60      	ldr	r2, [pc, #384]	; (8009d78 <I2C_ITError+0x1d8>)
 8009bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8009bfa:	e030      	b.n	8009c5e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009bfc:	f248 0103 	movw	r1, #32771	; 0x8003
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fb11 	bl	800a228 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f8e1 	bl	8009dce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b60      	cmp	r3, #96	; 0x60
 8009c16:	d01f      	beq.n	8009c58 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	f003 0320 	and.w	r3, r3, #32
 8009c2a:	2b20      	cmp	r3, #32
 8009c2c:	d114      	bne.n	8009c58 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	2b10      	cmp	r3, #16
 8009c3a:	d109      	bne.n	8009c50 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2210      	movs	r2, #16
 8009c42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c48:	f043 0204 	orr.w	r2, r3, #4
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2220      	movs	r2, #32
 8009c56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d039      	beq.n	8009ce0 <I2C_ITError+0x140>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b11      	cmp	r3, #17
 8009c70:	d002      	beq.n	8009c78 <I2C_ITError+0xd8>
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2b21      	cmp	r3, #33	; 0x21
 8009c76:	d133      	bne.n	8009ce0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c86:	d107      	bne.n	8009c98 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fd f90d 	bl	8006ebc <HAL_DMA_GetState>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d017      	beq.n	8009cd8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	4a33      	ldr	r2, [pc, #204]	; (8009d7c <I2C_ITError+0x1dc>)
 8009cae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fb ff55 	bl	8005b6c <HAL_DMA_Abort_IT>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d04d      	beq.n	8009d64 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009cd6:	e045      	b.n	8009d64 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f851 	bl	8009d80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009cde:	e041      	b.n	8009d64 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d039      	beq.n	8009d5c <I2C_ITError+0x1bc>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b12      	cmp	r3, #18
 8009cec:	d002      	beq.n	8009cf4 <I2C_ITError+0x154>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b22      	cmp	r3, #34	; 0x22
 8009cf2:	d133      	bne.n	8009d5c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d02:	d107      	bne.n	8009d14 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fd f8cf 	bl	8006ebc <HAL_DMA_GetState>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d017      	beq.n	8009d54 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d28:	4a14      	ldr	r2, [pc, #80]	; (8009d7c <I2C_ITError+0x1dc>)
 8009d2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fb ff17 	bl	8005b6c <HAL_DMA_Abort_IT>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d011      	beq.n	8009d68 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d52:	e009      	b.n	8009d68 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f813 	bl	8009d80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d5a:	e005      	b.n	8009d68 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f80f 	bl	8009d80 <I2C_TreatErrorCallback>
  }
}
 8009d62:	e002      	b.n	8009d6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d64:	bf00      	nop
 8009d66:	e000      	b.n	8009d6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d68:	bf00      	nop
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	ffff0000 	.word	0xffff0000
 8009d78:	080091eb 	.word	0x080091eb
 8009d7c:	08009e17 	.word	0x08009e17

08009d80 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b60      	cmp	r3, #96	; 0x60
 8009d92:	d10e      	bne.n	8009db2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff f9f9 	bl	80091a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009db0:	e009      	b.n	8009dc6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff f9e4 	bl	800918e <HAL_I2C_ErrorCallback>
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d103      	bne.n	8009dec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2200      	movs	r2, #0
 8009dea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d007      	beq.n	8009e0a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	699a      	ldr	r2, [r3, #24]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0201 	orr.w	r2, r2, #1
 8009e08:	619a      	str	r2, [r3, #24]
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	2200      	movs	r2, #0
 8009e32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e40:	2200      	movs	r2, #0
 8009e42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff ff9b 	bl	8009d80 <I2C_TreatErrorCallback>
}
 8009e4a:	bf00      	nop
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	603b      	str	r3, [r7, #0]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e62:	e031      	b.n	8009ec8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e6a:	d02d      	beq.n	8009ec8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e6c:	f7fa f9a8 	bl	80041c0 <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d302      	bcc.n	8009e82 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d122      	bne.n	8009ec8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	bf0c      	ite	eq
 8009e92:	2301      	moveq	r3, #1
 8009e94:	2300      	movne	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	461a      	mov	r2, r3
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d113      	bne.n	8009ec8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea4:	f043 0220 	orr.w	r2, r3, #32
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2220      	movs	r2, #32
 8009eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e00f      	b.n	8009ee8 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	699a      	ldr	r2, [r3, #24]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	bf0c      	ite	eq
 8009ed8:	2301      	moveq	r3, #1
 8009eda:	2300      	movne	r3, #0
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d0be      	beq.n	8009e64 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009efc:	e033      	b.n	8009f66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	68b9      	ldr	r1, [r7, #8]
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 f87e 	bl	800a004 <I2C_IsErrorOccurred>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e031      	b.n	8009f76 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f18:	d025      	beq.n	8009f66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f1a:	f7fa f951 	bl	80041c0 <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d302      	bcc.n	8009f30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d11a      	bne.n	8009f66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d013      	beq.n	8009f66 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f42:	f043 0220 	orr.w	r2, r3, #32
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e007      	b.n	8009f76 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d1c4      	bne.n	8009efe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f8a:	e02f      	b.n	8009fec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	68b9      	ldr	r1, [r7, #8]
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 f837 	bl	800a004 <I2C_IsErrorOccurred>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e02d      	b.n	8009ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fa0:	f7fa f90e 	bl	80041c0 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d302      	bcc.n	8009fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d11a      	bne.n	8009fec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	f003 0320 	and.w	r3, r3, #32
 8009fc0:	2b20      	cmp	r3, #32
 8009fc2:	d013      	beq.n	8009fec <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc8:	f043 0220 	orr.w	r2, r3, #32
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e007      	b.n	8009ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d1c8      	bne.n	8009f8c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08a      	sub	sp, #40	; 0x28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	f003 0310 	and.w	r3, r3, #16
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d068      	beq.n	800a102 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2210      	movs	r2, #16
 800a036:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a038:	e049      	b.n	800a0ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a040:	d045      	beq.n	800a0ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a042:	f7fa f8bd 	bl	80041c0 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d302      	bcc.n	800a058 <I2C_IsErrorOccurred+0x54>
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d13a      	bne.n	800a0ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a062:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a06a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a07a:	d121      	bne.n	800a0c0 <I2C_IsErrorOccurred+0xbc>
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a082:	d01d      	beq.n	800a0c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a084:	7cfb      	ldrb	r3, [r7, #19]
 800a086:	2b20      	cmp	r3, #32
 800a088:	d01a      	beq.n	800a0c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a098:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a09a:	f7fa f891 	bl	80041c0 <HAL_GetTick>
 800a09e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0a0:	e00e      	b.n	800a0c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a0a2:	f7fa f88d 	bl	80041c0 <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b19      	cmp	r3, #25
 800a0ae:	d907      	bls.n	800a0c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	f043 0320 	orr.w	r3, r3, #32
 800a0b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a0be:	e006      	b.n	800a0ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f003 0320 	and.w	r3, r3, #32
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d1e9      	bne.n	800a0a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b20      	cmp	r3, #32
 800a0da:	d003      	beq.n	800a0e4 <I2C_IsErrorOccurred+0xe0>
 800a0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0aa      	beq.n	800a03a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	f043 0304 	orr.w	r3, r3, #4
 800a0fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00b      	beq.n	800a14e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	f043 0308 	orr.w	r3, r3, #8
 800a13c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a146:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00b      	beq.n	800a170 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	f043 0302 	orr.w	r3, r3, #2
 800a15e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a168:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01c      	beq.n	800a1b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fe28 	bl	8009dce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6859      	ldr	r1, [r3, #4]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <I2C_IsErrorOccurred+0x1bc>)
 800a18a:	400b      	ands	r3, r1
 800a18c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	431a      	orrs	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2220      	movs	r2, #32
 800a19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3728      	adds	r7, #40	; 0x28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	fe00e800 	.word	0xfe00e800

0800a1c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	607b      	str	r3, [r7, #4]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	817b      	strh	r3, [r7, #10]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1d6:	897b      	ldrh	r3, [r7, #10]
 800a1d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a1dc:	7a7b      	ldrb	r3, [r7, #9]
 800a1de:	041b      	lsls	r3, r3, #16
 800a1e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	0d5b      	lsrs	r3, r3, #21
 800a1fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <I2C_TransferConfig+0x60>)
 800a204:	430b      	orrs	r3, r1
 800a206:	43db      	mvns	r3, r3
 800a208:	ea02 0103 	and.w	r1, r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	430a      	orrs	r2, r1
 800a214:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	03ff63ff 	.word	0x03ff63ff

0800a228 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a238:	887b      	ldrh	r3, [r7, #2]
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00f      	beq.n	800a262 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a248:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a250:	b2db      	uxtb	r3, r3
 800a252:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a256:	2b28      	cmp	r3, #40	; 0x28
 800a258:	d003      	beq.n	800a262 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a260:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a262:	887b      	ldrh	r3, [r7, #2]
 800a264:	f003 0302 	and.w	r3, r3, #2
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00f      	beq.n	800a28c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a272:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a280:	2b28      	cmp	r3, #40	; 0x28
 800a282:	d003      	beq.n	800a28c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a28a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a28c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a290:	2b00      	cmp	r3, #0
 800a292:	da03      	bge.n	800a29c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a29a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a29c:	887b      	ldrh	r3, [r7, #2]
 800a29e:	2b10      	cmp	r3, #16
 800a2a0:	d103      	bne.n	800a2aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a2a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a2aa:	887b      	ldrh	r3, [r7, #2]
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	d103      	bne.n	800a2b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f043 0320 	orr.w	r3, r3, #32
 800a2b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a2b8:	887b      	ldrh	r3, [r7, #2]
 800a2ba:	2b40      	cmp	r3, #64	; 0x40
 800a2bc:	d103      	bne.n	800a2c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6819      	ldr	r1, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	43da      	mvns	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	400a      	ands	r2, r1
 800a2d6:	601a      	str	r2, [r3, #0]
}
 800a2d8:	bf00      	nop
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b20      	cmp	r3, #32
 800a2f8:	d138      	bne.n	800a36c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a304:	2302      	movs	r3, #2
 800a306:	e032      	b.n	800a36e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2224      	movs	r2, #36	; 0x24
 800a314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0201 	bic.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a336:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6819      	ldr	r1, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f042 0201 	orr.w	r2, r2, #1
 800a356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	e000      	b.n	800a36e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a36c:	2302      	movs	r3, #2
  }
}
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b20      	cmp	r3, #32
 800a38e:	d139      	bne.n	800a404 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a39a:	2302      	movs	r3, #2
 800a39c:	e033      	b.n	800a406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2224      	movs	r2, #36	; 0x24
 800a3aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 0201 	bic.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a3cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	021b      	lsls	r3, r3, #8
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f042 0201 	orr.w	r2, r2, #1
 800a3ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e000      	b.n	800a406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a404:	2302      	movs	r3, #2
  }
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
	...

0800a414 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a414:	b480      	push	{r7}
 800a416:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a04      	ldr	r2, [pc, #16]	; (800a430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a41e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a422:	6013      	str	r3, [r2, #0]
}
 800a424:	bf00      	nop
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	58024800 	.word	0x58024800

0800a434 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a43c:	4b29      	ldr	r3, [pc, #164]	; (800a4e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f003 0307 	and.w	r3, r3, #7
 800a444:	2b06      	cmp	r3, #6
 800a446:	d00a      	beq.n	800a45e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a448:	4b26      	ldr	r3, [pc, #152]	; (800a4e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d001      	beq.n	800a45a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e040      	b.n	800a4dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e03e      	b.n	800a4dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a45e:	4b21      	ldr	r3, [pc, #132]	; (800a4e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a466:	491f      	ldr	r1, [pc, #124]	; (800a4e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a46e:	f7f9 fea7 	bl	80041c0 <HAL_GetTick>
 800a472:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a474:	e009      	b.n	800a48a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a476:	f7f9 fea3 	bl	80041c0 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a484:	d901      	bls.n	800a48a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e028      	b.n	800a4dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a48a:	4b16      	ldr	r3, [pc, #88]	; (800a4e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a496:	d1ee      	bne.n	800a476 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b1e      	cmp	r3, #30
 800a49c:	d008      	beq.n	800a4b0 <HAL_PWREx_ConfigSupply+0x7c>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4a2:	d005      	beq.n	800a4b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b1d      	cmp	r3, #29
 800a4a8:	d002      	beq.n	800a4b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b2d      	cmp	r3, #45	; 0x2d
 800a4ae:	d114      	bne.n	800a4da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a4b0:	f7f9 fe86 	bl	80041c0 <HAL_GetTick>
 800a4b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a4b6:	e009      	b.n	800a4cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a4b8:	f7f9 fe82 	bl	80041c0 <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4c6:	d901      	bls.n	800a4cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e007      	b.n	800a4dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a4cc:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4d8:	d1ee      	bne.n	800a4b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	58024800 	.word	0x58024800

0800a4e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08c      	sub	sp, #48	; 0x30
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d102      	bne.n	800a4fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	f000 bc1f 	b.w	800ad3a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 80b3 	beq.w	800a670 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a50a:	4b95      	ldr	r3, [pc, #596]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a512:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a514:	4b92      	ldr	r3, [pc, #584]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a518:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	2b10      	cmp	r3, #16
 800a51e:	d007      	beq.n	800a530 <HAL_RCC_OscConfig+0x48>
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	2b18      	cmp	r3, #24
 800a524:	d112      	bne.n	800a54c <HAL_RCC_OscConfig+0x64>
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	f003 0303 	and.w	r3, r3, #3
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d10d      	bne.n	800a54c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a530:	4b8b      	ldr	r3, [pc, #556]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 8098 	beq.w	800a66e <HAL_RCC_OscConfig+0x186>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f040 8093 	bne.w	800a66e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e3f6      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a554:	d106      	bne.n	800a564 <HAL_RCC_OscConfig+0x7c>
 800a556:	4b82      	ldr	r3, [pc, #520]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a81      	ldr	r2, [pc, #516]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a55c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	e058      	b.n	800a616 <HAL_RCC_OscConfig+0x12e>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d112      	bne.n	800a592 <HAL_RCC_OscConfig+0xaa>
 800a56c:	4b7c      	ldr	r3, [pc, #496]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a7b      	ldr	r2, [pc, #492]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	4b79      	ldr	r3, [pc, #484]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a78      	ldr	r2, [pc, #480]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a57e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	4b76      	ldr	r3, [pc, #472]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a75      	ldr	r2, [pc, #468]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a58a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	e041      	b.n	800a616 <HAL_RCC_OscConfig+0x12e>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a59a:	d112      	bne.n	800a5c2 <HAL_RCC_OscConfig+0xda>
 800a59c:	4b70      	ldr	r3, [pc, #448]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a6f      	ldr	r2, [pc, #444]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	4b6d      	ldr	r3, [pc, #436]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a6c      	ldr	r2, [pc, #432]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	4b6a      	ldr	r3, [pc, #424]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a69      	ldr	r2, [pc, #420]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	e029      	b.n	800a616 <HAL_RCC_OscConfig+0x12e>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a5ca:	d112      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x10a>
 800a5cc:	4b64      	ldr	r3, [pc, #400]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a63      	ldr	r2, [pc, #396]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	4b61      	ldr	r3, [pc, #388]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a60      	ldr	r2, [pc, #384]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	4b5e      	ldr	r3, [pc, #376]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a5d      	ldr	r2, [pc, #372]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	e011      	b.n	800a616 <HAL_RCC_OscConfig+0x12e>
 800a5f2:	4b5b      	ldr	r3, [pc, #364]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a5a      	ldr	r2, [pc, #360]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a5f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	4b58      	ldr	r3, [pc, #352]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a57      	ldr	r2, [pc, #348]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	4b55      	ldr	r3, [pc, #340]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a54      	ldr	r2, [pc, #336]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a610:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a614:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d013      	beq.n	800a646 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a61e:	f7f9 fdcf 	bl	80041c0 <HAL_GetTick>
 800a622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a624:	e008      	b.n	800a638 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a626:	f7f9 fdcb 	bl	80041c0 <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	2b64      	cmp	r3, #100	; 0x64
 800a632:	d901      	bls.n	800a638 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e380      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a638:	4b49      	ldr	r3, [pc, #292]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0f0      	beq.n	800a626 <HAL_RCC_OscConfig+0x13e>
 800a644:	e014      	b.n	800a670 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a646:	f7f9 fdbb 	bl	80041c0 <HAL_GetTick>
 800a64a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a64c:	e008      	b.n	800a660 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a64e:	f7f9 fdb7 	bl	80041c0 <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	2b64      	cmp	r3, #100	; 0x64
 800a65a:	d901      	bls.n	800a660 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e36c      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a660:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1f0      	bne.n	800a64e <HAL_RCC_OscConfig+0x166>
 800a66c:	e000      	b.n	800a670 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a66e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0302 	and.w	r3, r3, #2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 808c 	beq.w	800a796 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a67e:	4b38      	ldr	r3, [pc, #224]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a686:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a688:	4b35      	ldr	r3, [pc, #212]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d007      	beq.n	800a6a4 <HAL_RCC_OscConfig+0x1bc>
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	2b18      	cmp	r3, #24
 800a698:	d137      	bne.n	800a70a <HAL_RCC_OscConfig+0x222>
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d132      	bne.n	800a70a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6a4:	4b2e      	ldr	r3, [pc, #184]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d005      	beq.n	800a6bc <HAL_RCC_OscConfig+0x1d4>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e33e      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a6bc:	4b28      	ldr	r3, [pc, #160]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f023 0219 	bic.w	r2, r3, #25
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	4925      	ldr	r1, [pc, #148]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ce:	f7f9 fd77 	bl	80041c0 <HAL_GetTick>
 800a6d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6d4:	e008      	b.n	800a6e8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6d6:	f7f9 fd73 	bl	80041c0 <HAL_GetTick>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d901      	bls.n	800a6e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e328      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6e8:	4b1d      	ldr	r3, [pc, #116]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d0f0      	beq.n	800a6d6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	061b      	lsls	r3, r3, #24
 800a702:	4917      	ldr	r1, [pc, #92]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a704:	4313      	orrs	r3, r2
 800a706:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a708:	e045      	b.n	800a796 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d028      	beq.n	800a764 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a712:	4b13      	ldr	r3, [pc, #76]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f023 0219 	bic.w	r2, r3, #25
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	4910      	ldr	r1, [pc, #64]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a720:	4313      	orrs	r3, r2
 800a722:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a724:	f7f9 fd4c 	bl	80041c0 <HAL_GetTick>
 800a728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a72a:	e008      	b.n	800a73e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a72c:	f7f9 fd48 	bl	80041c0 <HAL_GetTick>
 800a730:	4602      	mov	r2, r0
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	2b02      	cmp	r3, #2
 800a738:	d901      	bls.n	800a73e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e2fd      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a73e:	4b08      	ldr	r3, [pc, #32]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 0304 	and.w	r3, r3, #4
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0f0      	beq.n	800a72c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	061b      	lsls	r3, r3, #24
 800a758:	4901      	ldr	r1, [pc, #4]	; (800a760 <HAL_RCC_OscConfig+0x278>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	604b      	str	r3, [r1, #4]
 800a75e:	e01a      	b.n	800a796 <HAL_RCC_OscConfig+0x2ae>
 800a760:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a764:	4b97      	ldr	r3, [pc, #604]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a96      	ldr	r2, [pc, #600]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a76a:	f023 0301 	bic.w	r3, r3, #1
 800a76e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a770:	f7f9 fd26 	bl	80041c0 <HAL_GetTick>
 800a774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a776:	e008      	b.n	800a78a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a778:	f7f9 fd22 	bl	80041c0 <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d901      	bls.n	800a78a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e2d7      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a78a:	4b8e      	ldr	r3, [pc, #568]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0304 	and.w	r3, r3, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1f0      	bne.n	800a778 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0310 	and.w	r3, r3, #16
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d06a      	beq.n	800a878 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7a2:	4b88      	ldr	r3, [pc, #544]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7ac:	4b85      	ldr	r3, [pc, #532]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d007      	beq.n	800a7c8 <HAL_RCC_OscConfig+0x2e0>
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	2b18      	cmp	r3, #24
 800a7bc:	d11b      	bne.n	800a7f6 <HAL_RCC_OscConfig+0x30e>
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d116      	bne.n	800a7f6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a7c8:	4b7e      	ldr	r3, [pc, #504]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d005      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x2f8>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	69db      	ldr	r3, [r3, #28]
 800a7d8:	2b80      	cmp	r3, #128	; 0x80
 800a7da:	d001      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e2ac      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a7e0:	4b78      	ldr	r3, [pc, #480]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a1b      	ldr	r3, [r3, #32]
 800a7ec:	061b      	lsls	r3, r3, #24
 800a7ee:	4975      	ldr	r1, [pc, #468]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a7f4:	e040      	b.n	800a878 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d023      	beq.n	800a846 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a7fe:	4b71      	ldr	r3, [pc, #452]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a70      	ldr	r2, [pc, #448]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80a:	f7f9 fcd9 	bl	80041c0 <HAL_GetTick>
 800a80e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a810:	e008      	b.n	800a824 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a812:	f7f9 fcd5 	bl	80041c0 <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d901      	bls.n	800a824 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e28a      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a824:	4b67      	ldr	r3, [pc, #412]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0f0      	beq.n	800a812 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a830:	4b64      	ldr	r3, [pc, #400]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	061b      	lsls	r3, r3, #24
 800a83e:	4961      	ldr	r1, [pc, #388]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a840:	4313      	orrs	r3, r2
 800a842:	60cb      	str	r3, [r1, #12]
 800a844:	e018      	b.n	800a878 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a846:	4b5f      	ldr	r3, [pc, #380]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a5e      	ldr	r2, [pc, #376]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a852:	f7f9 fcb5 	bl	80041c0 <HAL_GetTick>
 800a856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a858:	e008      	b.n	800a86c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a85a:	f7f9 fcb1 	bl	80041c0 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	2b02      	cmp	r3, #2
 800a866:	d901      	bls.n	800a86c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e266      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a86c:	4b55      	ldr	r3, [pc, #340]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1f0      	bne.n	800a85a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0308 	and.w	r3, r3, #8
 800a880:	2b00      	cmp	r3, #0
 800a882:	d036      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d019      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a88c:	4b4d      	ldr	r3, [pc, #308]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a890:	4a4c      	ldr	r2, [pc, #304]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a898:	f7f9 fc92 	bl	80041c0 <HAL_GetTick>
 800a89c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a89e:	e008      	b.n	800a8b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8a0:	f7f9 fc8e 	bl	80041c0 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e243      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a8b2:	4b44      	ldr	r3, [pc, #272]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0f0      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x3b8>
 800a8be:	e018      	b.n	800a8f2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8c0:	4b40      	ldr	r3, [pc, #256]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a8c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c4:	4a3f      	ldr	r2, [pc, #252]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a8c6:	f023 0301 	bic.w	r3, r3, #1
 800a8ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8cc:	f7f9 fc78 	bl	80041c0 <HAL_GetTick>
 800a8d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a8d2:	e008      	b.n	800a8e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8d4:	f7f9 fc74 	bl	80041c0 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d901      	bls.n	800a8e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e229      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a8e6:	4b37      	ldr	r3, [pc, #220]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1f0      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d036      	beq.n	800a96c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d019      	beq.n	800a93a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a906:	4b2f      	ldr	r3, [pc, #188]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a2e      	ldr	r2, [pc, #184]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a90c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a910:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a912:	f7f9 fc55 	bl	80041c0 <HAL_GetTick>
 800a916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a918:	e008      	b.n	800a92c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a91a:	f7f9 fc51 	bl	80041c0 <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d901      	bls.n	800a92c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e206      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a92c:	4b25      	ldr	r3, [pc, #148]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0f0      	beq.n	800a91a <HAL_RCC_OscConfig+0x432>
 800a938:	e018      	b.n	800a96c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a93a:	4b22      	ldr	r3, [pc, #136]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a21      	ldr	r2, [pc, #132]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a944:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a946:	f7f9 fc3b 	bl	80041c0 <HAL_GetTick>
 800a94a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a94c:	e008      	b.n	800a960 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a94e:	f7f9 fc37 	bl	80041c0 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e1ec      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a960:	4b18      	ldr	r3, [pc, #96]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f0      	bne.n	800a94e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 80af 	beq.w	800aad8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a97a:	4b13      	ldr	r3, [pc, #76]	; (800a9c8 <HAL_RCC_OscConfig+0x4e0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a12      	ldr	r2, [pc, #72]	; (800a9c8 <HAL_RCC_OscConfig+0x4e0>)
 800a980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a986:	f7f9 fc1b 	bl	80041c0 <HAL_GetTick>
 800a98a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a98c:	e008      	b.n	800a9a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a98e:	f7f9 fc17 	bl	80041c0 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	2b64      	cmp	r3, #100	; 0x64
 800a99a:	d901      	bls.n	800a9a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e1cc      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9a0:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <HAL_RCC_OscConfig+0x4e0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0f0      	beq.n	800a98e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d10b      	bne.n	800a9cc <HAL_RCC_OscConfig+0x4e4>
 800a9b4:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b8:	4a02      	ldr	r2, [pc, #8]	; (800a9c4 <HAL_RCC_OscConfig+0x4dc>)
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	6713      	str	r3, [r2, #112]	; 0x70
 800a9c0:	e05b      	b.n	800aa7a <HAL_RCC_OscConfig+0x592>
 800a9c2:	bf00      	nop
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	58024800 	.word	0x58024800
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d112      	bne.n	800a9fa <HAL_RCC_OscConfig+0x512>
 800a9d4:	4b9d      	ldr	r3, [pc, #628]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800a9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d8:	4a9c      	ldr	r2, [pc, #624]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800a9da:	f023 0301 	bic.w	r3, r3, #1
 800a9de:	6713      	str	r3, [r2, #112]	; 0x70
 800a9e0:	4b9a      	ldr	r3, [pc, #616]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800a9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e4:	4a99      	ldr	r2, [pc, #612]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800a9e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a9ec:	4b97      	ldr	r3, [pc, #604]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800a9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f0:	4a96      	ldr	r2, [pc, #600]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800a9f2:	f023 0304 	bic.w	r3, r3, #4
 800a9f6:	6713      	str	r3, [r2, #112]	; 0x70
 800a9f8:	e03f      	b.n	800aa7a <HAL_RCC_OscConfig+0x592>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	2b05      	cmp	r3, #5
 800aa00:	d112      	bne.n	800aa28 <HAL_RCC_OscConfig+0x540>
 800aa02:	4b92      	ldr	r3, [pc, #584]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa06:	4a91      	ldr	r2, [pc, #580]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa08:	f043 0304 	orr.w	r3, r3, #4
 800aa0c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa0e:	4b8f      	ldr	r3, [pc, #572]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa12:	4a8e      	ldr	r2, [pc, #568]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa18:	6713      	str	r3, [r2, #112]	; 0x70
 800aa1a:	4b8c      	ldr	r3, [pc, #560]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1e:	4a8b      	ldr	r2, [pc, #556]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa20:	f043 0301 	orr.w	r3, r3, #1
 800aa24:	6713      	str	r3, [r2, #112]	; 0x70
 800aa26:	e028      	b.n	800aa7a <HAL_RCC_OscConfig+0x592>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	2b85      	cmp	r3, #133	; 0x85
 800aa2e:	d112      	bne.n	800aa56 <HAL_RCC_OscConfig+0x56e>
 800aa30:	4b86      	ldr	r3, [pc, #536]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa34:	4a85      	ldr	r2, [pc, #532]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa36:	f043 0304 	orr.w	r3, r3, #4
 800aa3a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa3c:	4b83      	ldr	r3, [pc, #524]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa40:	4a82      	ldr	r2, [pc, #520]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa46:	6713      	str	r3, [r2, #112]	; 0x70
 800aa48:	4b80      	ldr	r3, [pc, #512]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4c:	4a7f      	ldr	r2, [pc, #508]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa4e:	f043 0301 	orr.w	r3, r3, #1
 800aa52:	6713      	str	r3, [r2, #112]	; 0x70
 800aa54:	e011      	b.n	800aa7a <HAL_RCC_OscConfig+0x592>
 800aa56:	4b7d      	ldr	r3, [pc, #500]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5a:	4a7c      	ldr	r2, [pc, #496]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa5c:	f023 0301 	bic.w	r3, r3, #1
 800aa60:	6713      	str	r3, [r2, #112]	; 0x70
 800aa62:	4b7a      	ldr	r3, [pc, #488]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa66:	4a79      	ldr	r2, [pc, #484]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa68:	f023 0304 	bic.w	r3, r3, #4
 800aa6c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa6e:	4b77      	ldr	r3, [pc, #476]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa72:	4a76      	ldr	r2, [pc, #472]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aa74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d015      	beq.n	800aaae <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa82:	f7f9 fb9d 	bl	80041c0 <HAL_GetTick>
 800aa86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa88:	e00a      	b.n	800aaa0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa8a:	f7f9 fb99 	bl	80041c0 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d901      	bls.n	800aaa0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e14c      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aaa0:	4b6a      	ldr	r3, [pc, #424]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aaa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0ee      	beq.n	800aa8a <HAL_RCC_OscConfig+0x5a2>
 800aaac:	e014      	b.n	800aad8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaae:	f7f9 fb87 	bl	80041c0 <HAL_GetTick>
 800aab2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aab4:	e00a      	b.n	800aacc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aab6:	f7f9 fb83 	bl	80041c0 <HAL_GetTick>
 800aaba:	4602      	mov	r2, r0
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d901      	bls.n	800aacc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e136      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aacc:	4b5f      	ldr	r3, [pc, #380]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1ee      	bne.n	800aab6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 812b 	beq.w	800ad38 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aae2:	4b5a      	ldr	r3, [pc, #360]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaea:	2b18      	cmp	r3, #24
 800aaec:	f000 80bb 	beq.w	800ac66 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	f040 8095 	bne.w	800ac24 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aafa:	4b54      	ldr	r3, [pc, #336]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a53      	ldr	r2, [pc, #332]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab06:	f7f9 fb5b 	bl	80041c0 <HAL_GetTick>
 800ab0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab0c:	e008      	b.n	800ab20 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab0e:	f7f9 fb57 	bl	80041c0 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e10c      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab20:	4b4a      	ldr	r3, [pc, #296]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1f0      	bne.n	800ab0e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab2c:	4b47      	ldr	r3, [pc, #284]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab30:	4b47      	ldr	r3, [pc, #284]	; (800ac50 <HAL_RCC_OscConfig+0x768>)
 800ab32:	4013      	ands	r3, r2
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab3c:	0112      	lsls	r2, r2, #4
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	4942      	ldr	r1, [pc, #264]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	628b      	str	r3, [r1, #40]	; 0x28
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab54:	3b01      	subs	r3, #1
 800ab56:	025b      	lsls	r3, r3, #9
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab60:	3b01      	subs	r3, #1
 800ab62:	041b      	lsls	r3, r3, #16
 800ab64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	061b      	lsls	r3, r3, #24
 800ab72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab76:	4935      	ldr	r1, [pc, #212]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ab7c:	4b33      	ldr	r3, [pc, #204]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	4a32      	ldr	r2, [pc, #200]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab82:	f023 0301 	bic.w	r3, r3, #1
 800ab86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab88:	4b30      	ldr	r3, [pc, #192]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab8c:	4b31      	ldr	r3, [pc, #196]	; (800ac54 <HAL_RCC_OscConfig+0x76c>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab94:	00d2      	lsls	r2, r2, #3
 800ab96:	492d      	ldr	r1, [pc, #180]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ab9c:	4b2b      	ldr	r3, [pc, #172]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	f023 020c 	bic.w	r2, r3, #12
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	4928      	ldr	r1, [pc, #160]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800abae:	4b27      	ldr	r3, [pc, #156]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb2:	f023 0202 	bic.w	r2, r3, #2
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abba:	4924      	ldr	r1, [pc, #144]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800abc0:	4b22      	ldr	r3, [pc, #136]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc4:	4a21      	ldr	r2, [pc, #132]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abcc:	4b1f      	ldr	r3, [pc, #124]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	4a1e      	ldr	r2, [pc, #120]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800abd8:	4b1c      	ldr	r3, [pc, #112]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abdc:	4a1b      	ldr	r2, [pc, #108]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800abe4:	4b19      	ldr	r3, [pc, #100]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	4a18      	ldr	r2, [pc, #96]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abea:	f043 0301 	orr.w	r3, r3, #1
 800abee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800abf0:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a15      	ldr	r2, [pc, #84]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800abf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abfc:	f7f9 fae0 	bl	80041c0 <HAL_GetTick>
 800ac00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac02:	e008      	b.n	800ac16 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac04:	f7f9 fadc 	bl	80041c0 <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d901      	bls.n	800ac16 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e091      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac16:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0f0      	beq.n	800ac04 <HAL_RCC_OscConfig+0x71c>
 800ac22:	e089      	b.n	800ad38 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac24:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a08      	ldr	r2, [pc, #32]	; (800ac4c <HAL_RCC_OscConfig+0x764>)
 800ac2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac30:	f7f9 fac6 	bl	80041c0 <HAL_GetTick>
 800ac34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac36:	e00f      	b.n	800ac58 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac38:	f7f9 fac2 	bl	80041c0 <HAL_GetTick>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d908      	bls.n	800ac58 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e077      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
 800ac4a:	bf00      	nop
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	fffffc0c 	.word	0xfffffc0c
 800ac54:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac58:	4b3a      	ldr	r3, [pc, #232]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e9      	bne.n	800ac38 <HAL_RCC_OscConfig+0x750>
 800ac64:	e068      	b.n	800ad38 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ac66:	4b37      	ldr	r3, [pc, #220]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ac68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ac6c:	4b35      	ldr	r3, [pc, #212]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ac6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac70:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d031      	beq.n	800acde <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f003 0203 	and.w	r2, r3, #3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d12a      	bne.n	800acde <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	091b      	lsrs	r3, r3, #4
 800ac8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d122      	bne.n	800acde <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d11a      	bne.n	800acde <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	0a5b      	lsrs	r3, r3, #9
 800acac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d111      	bne.n	800acde <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	0c1b      	lsrs	r3, r3, #16
 800acbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acc8:	429a      	cmp	r2, r3
 800acca:	d108      	bne.n	800acde <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	0e1b      	lsrs	r3, r3, #24
 800acd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800acda:	429a      	cmp	r2, r3
 800acdc:	d001      	beq.n	800ace2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e02b      	b.n	800ad3a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ace2:	4b18      	ldr	r3, [pc, #96]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ace4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acec:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d01f      	beq.n	800ad38 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800acf8:	4b12      	ldr	r3, [pc, #72]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	4a11      	ldr	r2, [pc, #68]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800acfe:	f023 0301 	bic.w	r3, r3, #1
 800ad02:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad04:	f7f9 fa5c 	bl	80041c0 <HAL_GetTick>
 800ad08:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad0a:	bf00      	nop
 800ad0c:	f7f9 fa58 	bl	80041c0 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d0f9      	beq.n	800ad0c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad18:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ad1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <HAL_RCC_OscConfig+0x860>)
 800ad1e:	4013      	ands	r3, r2
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad24:	00d2      	lsls	r2, r2, #3
 800ad26:	4907      	ldr	r1, [pc, #28]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ad2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad30:	4a04      	ldr	r2, [pc, #16]	; (800ad44 <HAL_RCC_OscConfig+0x85c>)
 800ad32:	f043 0301 	orr.w	r3, r3, #1
 800ad36:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3730      	adds	r7, #48	; 0x30
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	58024400 	.word	0x58024400
 800ad48:	ffff0007 	.word	0xffff0007

0800ad4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e19c      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad60:	4b8a      	ldr	r3, [pc, #552]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d910      	bls.n	800ad90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad6e:	4b87      	ldr	r3, [pc, #540]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f023 020f 	bic.w	r2, r3, #15
 800ad76:	4985      	ldr	r1, [pc, #532]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad7e:	4b83      	ldr	r3, [pc, #524]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 030f 	and.w	r3, r3, #15
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d001      	beq.n	800ad90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e184      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d010      	beq.n	800adbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	691a      	ldr	r2, [r3, #16]
 800ada0:	4b7b      	ldr	r3, [pc, #492]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d908      	bls.n	800adbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800adac:	4b78      	ldr	r3, [pc, #480]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	4975      	ldr	r1, [pc, #468]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d010      	beq.n	800adec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	695a      	ldr	r2, [r3, #20]
 800adce:	4b70      	ldr	r3, [pc, #448]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800add6:	429a      	cmp	r2, r3
 800add8:	d908      	bls.n	800adec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adda:	4b6d      	ldr	r3, [pc, #436]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800addc:	69db      	ldr	r3, [r3, #28]
 800adde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	496a      	ldr	r1, [pc, #424]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ade8:	4313      	orrs	r3, r2
 800adea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0310 	and.w	r3, r3, #16
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d010      	beq.n	800ae1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	699a      	ldr	r2, [r3, #24]
 800adfc:	4b64      	ldr	r3, [pc, #400]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d908      	bls.n	800ae1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae08:	4b61      	ldr	r3, [pc, #388]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	495e      	ldr	r1, [pc, #376]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0320 	and.w	r3, r3, #32
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d010      	beq.n	800ae48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	69da      	ldr	r2, [r3, #28]
 800ae2a:	4b59      	ldr	r3, [pc, #356]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d908      	bls.n	800ae48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae36:	4b56      	ldr	r3, [pc, #344]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	4953      	ldr	r1, [pc, #332]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d010      	beq.n	800ae76 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68da      	ldr	r2, [r3, #12]
 800ae58:	4b4d      	ldr	r3, [pc, #308]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	f003 030f 	and.w	r3, r3, #15
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d908      	bls.n	800ae76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae64:	4b4a      	ldr	r3, [pc, #296]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	f023 020f 	bic.w	r2, r3, #15
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	4947      	ldr	r1, [pc, #284]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d055      	beq.n	800af2e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ae82:	4b43      	ldr	r3, [pc, #268]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	4940      	ldr	r1, [pc, #256]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae90:	4313      	orrs	r3, r2
 800ae92:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d107      	bne.n	800aeac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae9c:	4b3c      	ldr	r3, [pc, #240]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d121      	bne.n	800aeec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e0f6      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d107      	bne.n	800aec4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aeb4:	4b36      	ldr	r3, [pc, #216]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d115      	bne.n	800aeec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e0ea      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d107      	bne.n	800aedc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aecc:	4b30      	ldr	r3, [pc, #192]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d109      	bne.n	800aeec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e0de      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aedc:	4b2c      	ldr	r3, [pc, #176]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e0d6      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aeec:	4b28      	ldr	r3, [pc, #160]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	f023 0207 	bic.w	r2, r3, #7
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	4925      	ldr	r1, [pc, #148]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aefe:	f7f9 f95f 	bl	80041c0 <HAL_GetTick>
 800af02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af04:	e00a      	b.n	800af1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af06:	f7f9 f95b 	bl	80041c0 <HAL_GetTick>
 800af0a:	4602      	mov	r2, r0
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	f241 3288 	movw	r2, #5000	; 0x1388
 800af14:	4293      	cmp	r3, r2
 800af16:	d901      	bls.n	800af1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e0be      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af1c:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d1eb      	bne.n	800af06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d010      	beq.n	800af5c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	4b14      	ldr	r3, [pc, #80]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	f003 030f 	and.w	r3, r3, #15
 800af46:	429a      	cmp	r2, r3
 800af48:	d208      	bcs.n	800af5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af4a:	4b11      	ldr	r3, [pc, #68]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	f023 020f 	bic.w	r2, r3, #15
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	490e      	ldr	r1, [pc, #56]	; (800af90 <HAL_RCC_ClockConfig+0x244>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af5c:	4b0b      	ldr	r3, [pc, #44]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 030f 	and.w	r3, r3, #15
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	429a      	cmp	r2, r3
 800af68:	d214      	bcs.n	800af94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af6a:	4b08      	ldr	r3, [pc, #32]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f023 020f 	bic.w	r2, r3, #15
 800af72:	4906      	ldr	r1, [pc, #24]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	4313      	orrs	r3, r2
 800af78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af7a:	4b04      	ldr	r3, [pc, #16]	; (800af8c <HAL_RCC_ClockConfig+0x240>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d005      	beq.n	800af94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e086      	b.n	800b09a <HAL_RCC_ClockConfig+0x34e>
 800af8c:	52002000 	.word	0x52002000
 800af90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d010      	beq.n	800afc2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	4b3f      	ldr	r3, [pc, #252]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afac:	429a      	cmp	r2, r3
 800afae:	d208      	bcs.n	800afc2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800afb0:	4b3c      	ldr	r3, [pc, #240]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	4939      	ldr	r1, [pc, #228]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800afbe:	4313      	orrs	r3, r2
 800afc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d010      	beq.n	800aff0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	695a      	ldr	r2, [r3, #20]
 800afd2:	4b34      	ldr	r3, [pc, #208]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afda:	429a      	cmp	r2, r3
 800afdc:	d208      	bcs.n	800aff0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800afde:	4b31      	ldr	r3, [pc, #196]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	492e      	ldr	r1, [pc, #184]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800afec:	4313      	orrs	r3, r2
 800afee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d010      	beq.n	800b01e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	699a      	ldr	r2, [r3, #24]
 800b000:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b008:	429a      	cmp	r2, r3
 800b00a:	d208      	bcs.n	800b01e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b00c:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	4922      	ldr	r1, [pc, #136]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	69da      	ldr	r2, [r3, #28]
 800b02e:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b036:	429a      	cmp	r2, r3
 800b038:	d208      	bcs.n	800b04c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b03a:	4b1a      	ldr	r3, [pc, #104]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	4917      	ldr	r1, [pc, #92]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b04c:	f000 f89e 	bl	800b18c <HAL_RCC_GetSysClockFreq>
 800b050:	4602      	mov	r2, r0
 800b052:	4b14      	ldr	r3, [pc, #80]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	0a1b      	lsrs	r3, r3, #8
 800b058:	f003 030f 	and.w	r3, r3, #15
 800b05c:	4912      	ldr	r1, [pc, #72]	; (800b0a8 <HAL_RCC_ClockConfig+0x35c>)
 800b05e:	5ccb      	ldrb	r3, [r1, r3]
 800b060:	f003 031f 	and.w	r3, r3, #31
 800b064:	fa22 f303 	lsr.w	r3, r2, r3
 800b068:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b06a:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <HAL_RCC_ClockConfig+0x358>)
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	f003 030f 	and.w	r3, r3, #15
 800b072:	4a0d      	ldr	r2, [pc, #52]	; (800b0a8 <HAL_RCC_ClockConfig+0x35c>)
 800b074:	5cd3      	ldrb	r3, [r2, r3]
 800b076:	f003 031f 	and.w	r3, r3, #31
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	fa22 f303 	lsr.w	r3, r2, r3
 800b080:	4a0a      	ldr	r2, [pc, #40]	; (800b0ac <HAL_RCC_ClockConfig+0x360>)
 800b082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b084:	4a0a      	ldr	r2, [pc, #40]	; (800b0b0 <HAL_RCC_ClockConfig+0x364>)
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b08a:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <HAL_RCC_ClockConfig+0x368>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f9 f84c 	bl	800412c <HAL_InitTick>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b098:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	08010950 	.word	0x08010950
 800b0ac:	24000048 	.word	0x24000048
 800b0b0:	24000044 	.word	0x24000044
 800b0b4:	2400004c 	.word	0x2400004c

0800b0b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08c      	sub	sp, #48	; 0x30
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d12a      	bne.n	800b120 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b0ca:	4b2d      	ldr	r3, [pc, #180]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b0cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b0d0:	4a2b      	ldr	r2, [pc, #172]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b0d2:	f043 0301 	orr.w	r3, r3, #1
 800b0d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b0da:	4b29      	ldr	r3, [pc, #164]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b0dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	61bb      	str	r3, [r7, #24]
 800b0e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b0e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b0fe:	f107 031c 	add.w	r3, r7, #28
 800b102:	4619      	mov	r1, r3
 800b104:	481f      	ldr	r0, [pc, #124]	; (800b184 <HAL_RCC_MCOConfig+0xcc>)
 800b106:	f7fd f9d9 	bl	80084bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b10a:	4b1d      	ldr	r3, [pc, #116]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	430b      	orrs	r3, r1
 800b118:	4919      	ldr	r1, [pc, #100]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b11e:	e02a      	b.n	800b176 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b120:	4b17      	ldr	r3, [pc, #92]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b122:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b126:	4a16      	ldr	r2, [pc, #88]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b128:	f043 0304 	orr.w	r3, r3, #4
 800b12c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b130:	4b13      	ldr	r3, [pc, #76]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b132:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b13e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b144:	2302      	movs	r3, #2
 800b146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b148:	2303      	movs	r3, #3
 800b14a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b150:	2300      	movs	r3, #0
 800b152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b154:	f107 031c 	add.w	r3, r7, #28
 800b158:	4619      	mov	r1, r3
 800b15a:	480b      	ldr	r0, [pc, #44]	; (800b188 <HAL_RCC_MCOConfig+0xd0>)
 800b15c:	f7fd f9ae 	bl	80084bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	01d9      	lsls	r1, r3, #7
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	430b      	orrs	r3, r1
 800b170:	4903      	ldr	r1, [pc, #12]	; (800b180 <HAL_RCC_MCOConfig+0xc8>)
 800b172:	4313      	orrs	r3, r2
 800b174:	610b      	str	r3, [r1, #16]
}
 800b176:	bf00      	nop
 800b178:	3730      	adds	r7, #48	; 0x30
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	58024400 	.word	0x58024400
 800b184:	58020000 	.word	0x58020000
 800b188:	58020800 	.word	0x58020800

0800b18c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b089      	sub	sp, #36	; 0x24
 800b190:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b192:	4bb3      	ldr	r3, [pc, #716]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b19a:	2b18      	cmp	r3, #24
 800b19c:	f200 8155 	bhi.w	800b44a <HAL_RCC_GetSysClockFreq+0x2be>
 800b1a0:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b20d 	.word	0x0800b20d
 800b1ac:	0800b44b 	.word	0x0800b44b
 800b1b0:	0800b44b 	.word	0x0800b44b
 800b1b4:	0800b44b 	.word	0x0800b44b
 800b1b8:	0800b44b 	.word	0x0800b44b
 800b1bc:	0800b44b 	.word	0x0800b44b
 800b1c0:	0800b44b 	.word	0x0800b44b
 800b1c4:	0800b44b 	.word	0x0800b44b
 800b1c8:	0800b233 	.word	0x0800b233
 800b1cc:	0800b44b 	.word	0x0800b44b
 800b1d0:	0800b44b 	.word	0x0800b44b
 800b1d4:	0800b44b 	.word	0x0800b44b
 800b1d8:	0800b44b 	.word	0x0800b44b
 800b1dc:	0800b44b 	.word	0x0800b44b
 800b1e0:	0800b44b 	.word	0x0800b44b
 800b1e4:	0800b44b 	.word	0x0800b44b
 800b1e8:	0800b239 	.word	0x0800b239
 800b1ec:	0800b44b 	.word	0x0800b44b
 800b1f0:	0800b44b 	.word	0x0800b44b
 800b1f4:	0800b44b 	.word	0x0800b44b
 800b1f8:	0800b44b 	.word	0x0800b44b
 800b1fc:	0800b44b 	.word	0x0800b44b
 800b200:	0800b44b 	.word	0x0800b44b
 800b204:	0800b44b 	.word	0x0800b44b
 800b208:	0800b23f 	.word	0x0800b23f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b20c:	4b94      	ldr	r3, [pc, #592]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b218:	4b91      	ldr	r3, [pc, #580]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	08db      	lsrs	r3, r3, #3
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	4a90      	ldr	r2, [pc, #576]	; (800b464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b224:	fa22 f303 	lsr.w	r3, r2, r3
 800b228:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b22a:	e111      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b22c:	4b8d      	ldr	r3, [pc, #564]	; (800b464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b22e:	61bb      	str	r3, [r7, #24]
      break;
 800b230:	e10e      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b232:	4b8d      	ldr	r3, [pc, #564]	; (800b468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b234:	61bb      	str	r3, [r7, #24]
      break;
 800b236:	e10b      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b238:	4b8c      	ldr	r3, [pc, #560]	; (800b46c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b23a:	61bb      	str	r3, [r7, #24]
      break;
 800b23c:	e108      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b23e:	4b88      	ldr	r3, [pc, #544]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b248:	4b85      	ldr	r3, [pc, #532]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24c:	091b      	lsrs	r3, r3, #4
 800b24e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b252:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b254:	4b82      	ldr	r3, [pc, #520]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b25e:	4b80      	ldr	r3, [pc, #512]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b262:	08db      	lsrs	r3, r3, #3
 800b264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	fb02 f303 	mul.w	r3, r2, r3
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b276:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80e1 	beq.w	800b444 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b02      	cmp	r3, #2
 800b286:	f000 8083 	beq.w	800b390 <HAL_RCC_GetSysClockFreq+0x204>
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	f200 80a1 	bhi.w	800b3d4 <HAL_RCC_GetSysClockFreq+0x248>
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d003      	beq.n	800b2a0 <HAL_RCC_GetSysClockFreq+0x114>
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d056      	beq.n	800b34c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b29e:	e099      	b.n	800b3d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2a0:	4b6f      	ldr	r3, [pc, #444]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d02d      	beq.n	800b308 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ac:	4b6c      	ldr	r3, [pc, #432]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	08db      	lsrs	r3, r3, #3
 800b2b2:	f003 0303 	and.w	r3, r3, #3
 800b2b6:	4a6b      	ldr	r2, [pc, #428]	; (800b464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d6:	4b62      	ldr	r3, [pc, #392]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b470 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b302:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b306:	e087      	b.n	800b418 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b312:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b474 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31a:	4b51      	ldr	r3, [pc, #324]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b32e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b470 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b34a:	e065      	b.n	800b418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b478 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35e:	4b40      	ldr	r3, [pc, #256]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b372:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b470 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b38e:	e043      	b.n	800b418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b47c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a2:	4b2f      	ldr	r3, [pc, #188]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3aa:	ee07 3a90 	vmov	s15, r3
 800b3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b470 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3d2:	e021      	b.n	800b418 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3de:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b478 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e6:	4b1e      	ldr	r3, [pc, #120]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ee:	ee07 3a90 	vmov	s15, r3
 800b3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b470 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b416:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b418:	4b11      	ldr	r3, [pc, #68]	; (800b460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41c:	0a5b      	lsrs	r3, r3, #9
 800b41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b422:	3301      	adds	r3, #1
 800b424:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b430:	edd7 6a07 	vldr	s13, [r7, #28]
 800b434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43c:	ee17 3a90 	vmov	r3, s15
 800b440:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b442:	e005      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b444:	2300      	movs	r3, #0
 800b446:	61bb      	str	r3, [r7, #24]
      break;
 800b448:	e002      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b44a:	4b07      	ldr	r3, [pc, #28]	; (800b468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b44c:	61bb      	str	r3, [r7, #24]
      break;
 800b44e:	bf00      	nop
  }

  return sysclockfreq;
 800b450:	69bb      	ldr	r3, [r7, #24]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3724      	adds	r7, #36	; 0x24
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	58024400 	.word	0x58024400
 800b464:	03d09000 	.word	0x03d09000
 800b468:	003d0900 	.word	0x003d0900
 800b46c:	016e3600 	.word	0x016e3600
 800b470:	46000000 	.word	0x46000000
 800b474:	4c742400 	.word	0x4c742400
 800b478:	4a742400 	.word	0x4a742400
 800b47c:	4bb71b00 	.word	0x4bb71b00

0800b480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b486:	f7ff fe81 	bl	800b18c <HAL_RCC_GetSysClockFreq>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b10      	ldr	r3, [pc, #64]	; (800b4d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	0a1b      	lsrs	r3, r3, #8
 800b492:	f003 030f 	and.w	r3, r3, #15
 800b496:	490f      	ldr	r1, [pc, #60]	; (800b4d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b498:	5ccb      	ldrb	r3, [r1, r3]
 800b49a:	f003 031f 	and.w	r3, r3, #31
 800b49e:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b4a4:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	f003 030f 	and.w	r3, r3, #15
 800b4ac:	4a09      	ldr	r2, [pc, #36]	; (800b4d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4ae:	5cd3      	ldrb	r3, [r2, r3]
 800b4b0:	f003 031f 	and.w	r3, r3, #31
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ba:	4a07      	ldr	r2, [pc, #28]	; (800b4d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4be:	4a07      	ldr	r2, [pc, #28]	; (800b4dc <HAL_RCC_GetHCLKFreq+0x5c>)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b4c4:	4b04      	ldr	r3, [pc, #16]	; (800b4d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	58024400 	.word	0x58024400
 800b4d4:	08010950 	.word	0x08010950
 800b4d8:	24000048 	.word	0x24000048
 800b4dc:	24000044 	.word	0x24000044

0800b4e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b4e4:	f7ff ffcc 	bl	800b480 <HAL_RCC_GetHCLKFreq>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	4b06      	ldr	r3, [pc, #24]	; (800b504 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4ec:	69db      	ldr	r3, [r3, #28]
 800b4ee:	091b      	lsrs	r3, r3, #4
 800b4f0:	f003 0307 	and.w	r3, r3, #7
 800b4f4:	4904      	ldr	r1, [pc, #16]	; (800b508 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b4f6:	5ccb      	ldrb	r3, [r1, r3]
 800b4f8:	f003 031f 	and.w	r3, r3, #31
 800b4fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b500:	4618      	mov	r0, r3
 800b502:	bd80      	pop	{r7, pc}
 800b504:	58024400 	.word	0x58024400
 800b508:	08010950 	.word	0x08010950

0800b50c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b510:	f7ff ffb6 	bl	800b480 <HAL_RCC_GetHCLKFreq>
 800b514:	4602      	mov	r2, r0
 800b516:	4b06      	ldr	r3, [pc, #24]	; (800b530 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	0a1b      	lsrs	r3, r3, #8
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	4904      	ldr	r1, [pc, #16]	; (800b534 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b522:	5ccb      	ldrb	r3, [r1, r3]
 800b524:	f003 031f 	and.w	r3, r3, #31
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	58024400 	.word	0x58024400
 800b534:	08010950 	.word	0x08010950

0800b538 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b53c:	b0c8      	sub	sp, #288	; 0x120
 800b53e:	af00      	add	r7, sp, #0
 800b540:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b544:	2300      	movs	r3, #0
 800b546:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b54a:	2300      	movs	r3, #0
 800b54c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b55c:	2500      	movs	r5, #0
 800b55e:	ea54 0305 	orrs.w	r3, r4, r5
 800b562:	d049      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b56a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b56e:	d02f      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b570:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b574:	d828      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b57a:	d01a      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b57c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b580:	d822      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b58a:	d007      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b58c:	e01c      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b58e:	4ba7      	ldr	r3, [pc, #668]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	4aa6      	ldr	r2, [pc, #664]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b59a:	e01a      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fc43 	bl	800ce30 <RCCEx_PLL2_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5b0:	e00f      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5b6:	3328      	adds	r3, #40	; 0x28
 800b5b8:	2102      	movs	r1, #2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f001 fcea 	bl	800cf94 <RCCEx_PLL3_Config>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5c6:	e004      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b5ce:	e000      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10a      	bne.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b5da:	4b94      	ldr	r3, [pc, #592]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e8:	4a90      	ldr	r2, [pc, #576]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	6513      	str	r3, [r2, #80]	; 0x50
 800b5ee:	e003      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b5f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b604:	f04f 0900 	mov.w	r9, #0
 800b608:	ea58 0309 	orrs.w	r3, r8, r9
 800b60c:	d047      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b60e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b614:	2b04      	cmp	r3, #4
 800b616:	d82a      	bhi.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b618:	a201      	add	r2, pc, #4	; (adr r2, 800b620 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61e:	bf00      	nop
 800b620:	0800b635 	.word	0x0800b635
 800b624:	0800b643 	.word	0x0800b643
 800b628:	0800b659 	.word	0x0800b659
 800b62c:	0800b677 	.word	0x0800b677
 800b630:	0800b677 	.word	0x0800b677
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b634:	4b7d      	ldr	r3, [pc, #500]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	4a7c      	ldr	r2, [pc, #496]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b63a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b63e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b640:	e01a      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b646:	3308      	adds	r3, #8
 800b648:	2100      	movs	r1, #0
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 fbf0 	bl	800ce30 <RCCEx_PLL2_Config>
 800b650:	4603      	mov	r3, r0
 800b652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b656:	e00f      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b65c:	3328      	adds	r3, #40	; 0x28
 800b65e:	2100      	movs	r1, #0
 800b660:	4618      	mov	r0, r3
 800b662:	f001 fc97 	bl	800cf94 <RCCEx_PLL3_Config>
 800b666:	4603      	mov	r3, r0
 800b668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b66c:	e004      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b674:	e000      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b676:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b678:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10a      	bne.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b680:	4b6a      	ldr	r3, [pc, #424]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b684:	f023 0107 	bic.w	r1, r3, #7
 800b688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68e:	4a67      	ldr	r2, [pc, #412]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b690:	430b      	orrs	r3, r1
 800b692:	6513      	str	r3, [r2, #80]	; 0x50
 800b694:	e003      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b696:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b69a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b6aa:	f04f 0b00 	mov.w	fp, #0
 800b6ae:	ea5a 030b 	orrs.w	r3, sl, fp
 800b6b2:	d054      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b6be:	d036      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b6c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b6c4:	d82f      	bhi.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ca:	d032      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d0:	d829      	bhi.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b6d2:	2bc0      	cmp	r3, #192	; 0xc0
 800b6d4:	d02f      	beq.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b6d6:	2bc0      	cmp	r3, #192	; 0xc0
 800b6d8:	d825      	bhi.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b6da:	2b80      	cmp	r3, #128	; 0x80
 800b6dc:	d018      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b6de:	2b80      	cmp	r3, #128	; 0x80
 800b6e0:	d821      	bhi.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b6e6:	2b40      	cmp	r3, #64	; 0x40
 800b6e8:	d007      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b6ea:	e01c      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ec:	4b4f      	ldr	r3, [pc, #316]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a4e      	ldr	r2, [pc, #312]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b6f8:	e01e      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6fe:	3308      	adds	r3, #8
 800b700:	2100      	movs	r1, #0
 800b702:	4618      	mov	r0, r3
 800b704:	f001 fb94 	bl	800ce30 <RCCEx_PLL2_Config>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b70e:	e013      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b714:	3328      	adds	r3, #40	; 0x28
 800b716:	2100      	movs	r1, #0
 800b718:	4618      	mov	r0, r3
 800b71a:	f001 fc3b 	bl	800cf94 <RCCEx_PLL3_Config>
 800b71e:	4603      	mov	r3, r0
 800b720:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b724:	e008      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b72c:	e004      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b72e:	bf00      	nop
 800b730:	e002      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b732:	bf00      	nop
 800b734:	e000      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b736:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10a      	bne.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b740:	4b3a      	ldr	r3, [pc, #232]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b744:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74e:	4a37      	ldr	r2, [pc, #220]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b750:	430b      	orrs	r3, r1
 800b752:	6513      	str	r3, [r2, #80]	; 0x50
 800b754:	e003      	b.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b756:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b75a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b76a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b76e:	2300      	movs	r3, #0
 800b770:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b774:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b778:	460b      	mov	r3, r1
 800b77a:	4313      	orrs	r3, r2
 800b77c:	d05c      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b77e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b784:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b788:	d03b      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b78a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b78e:	d834      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b794:	d037      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b79a:	d82e      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b79c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b7a0:	d033      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b7a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b7a6:	d828      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b7a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ac:	d01a      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b7ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7b2:	d822      	bhi.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7bc:	d007      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b7be:	e01c      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7c0:	4b1a      	ldr	r3, [pc, #104]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	4a19      	ldr	r2, [pc, #100]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b7cc:	e01e      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 fb2a 	bl	800ce30 <RCCEx_PLL2_Config>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b7e2:	e013      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7e8:	3328      	adds	r3, #40	; 0x28
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f001 fbd1 	bl	800cf94 <RCCEx_PLL3_Config>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b7f8:	e008      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b800:	e004      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b802:	bf00      	nop
 800b804:	e002      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b806:	bf00      	nop
 800b808:	e000      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b80c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10d      	bne.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b818:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b822:	4a02      	ldr	r2, [pc, #8]	; (800b82c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b824:	430b      	orrs	r3, r1
 800b826:	6513      	str	r3, [r2, #80]	; 0x50
 800b828:	e006      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b82a:	bf00      	nop
 800b82c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b834:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b848:	2300      	movs	r3, #0
 800b84a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b84e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b852:	460b      	mov	r3, r1
 800b854:	4313      	orrs	r3, r2
 800b856:	d03a      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85e:	2b30      	cmp	r3, #48	; 0x30
 800b860:	d01f      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b862:	2b30      	cmp	r3, #48	; 0x30
 800b864:	d819      	bhi.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b866:	2b20      	cmp	r3, #32
 800b868:	d00c      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b86a:	2b20      	cmp	r3, #32
 800b86c:	d815      	bhi.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d019      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b872:	2b10      	cmp	r3, #16
 800b874:	d111      	bne.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b876:	4bae      	ldr	r3, [pc, #696]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87a:	4aad      	ldr	r2, [pc, #692]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b87c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b882:	e011      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b888:	3308      	adds	r3, #8
 800b88a:	2102      	movs	r1, #2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f001 facf 	bl	800ce30 <RCCEx_PLL2_Config>
 800b892:	4603      	mov	r3, r0
 800b894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b898:	e006      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b8a0:	e002      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b8a2:	bf00      	nop
 800b8a4:	e000      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b8a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b8b0:	4b9f      	ldr	r3, [pc, #636]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b8b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8be:	4a9c      	ldr	r2, [pc, #624]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8c4:	e003      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b8da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d051      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8f8:	d035      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b8fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8fe:	d82e      	bhi.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b900:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b904:	d031      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b90a:	d828      	bhi.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b90c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b910:	d01a      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b916:	d822      	bhi.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b91c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b920:	d007      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b922:	e01c      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b924:	4b82      	ldr	r3, [pc, #520]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	4a81      	ldr	r2, [pc, #516]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b92a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b92e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b930:	e01c      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b936:	3308      	adds	r3, #8
 800b938:	2100      	movs	r1, #0
 800b93a:	4618      	mov	r0, r3
 800b93c:	f001 fa78 	bl	800ce30 <RCCEx_PLL2_Config>
 800b940:	4603      	mov	r3, r0
 800b942:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b946:	e011      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b94c:	3328      	adds	r3, #40	; 0x28
 800b94e:	2100      	movs	r1, #0
 800b950:	4618      	mov	r0, r3
 800b952:	f001 fb1f 	bl	800cf94 <RCCEx_PLL3_Config>
 800b956:	4603      	mov	r3, r0
 800b958:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b95c:	e006      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b964:	e002      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b966:	bf00      	nop
 800b968:	e000      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b96c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b974:	4b6e      	ldr	r3, [pc, #440]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b978:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b97c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b982:	4a6b      	ldr	r2, [pc, #428]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b984:	430b      	orrs	r3, r1
 800b986:	6513      	str	r3, [r2, #80]	; 0x50
 800b988:	e003      	b.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b98e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b99e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	d053      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b9b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9bc:	d033      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b9be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9c2:	d82c      	bhi.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b9c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9c8:	d02f      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b9ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9ce:	d826      	bhi.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b9d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9d4:	d02b      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b9d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9da:	d820      	bhi.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b9dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9e0:	d012      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b9e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9e6:	d81a      	bhi.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d022      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f0:	d115      	bne.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f001 fa18 	bl	800ce30 <RCCEx_PLL2_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba06:	e015      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba0c:	3328      	adds	r3, #40	; 0x28
 800ba0e:	2101      	movs	r1, #1
 800ba10:	4618      	mov	r0, r3
 800ba12:	f001 fabf 	bl	800cf94 <RCCEx_PLL3_Config>
 800ba16:	4603      	mov	r3, r0
 800ba18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba1c:	e00a      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba24:	e006      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba26:	bf00      	nop
 800ba28:	e004      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba2a:	bf00      	nop
 800ba2c:	e002      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba2e:	bf00      	nop
 800ba30:	e000      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10a      	bne.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ba3c:	4b3c      	ldr	r3, [pc, #240]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ba44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba4a:	4a39      	ldr	r2, [pc, #228]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba4c:	430b      	orrs	r3, r1
 800ba4e:	6513      	str	r3, [r2, #80]	; 0x50
 800ba50:	e003      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ba66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba70:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4313      	orrs	r3, r2
 800ba78:	d060      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ba7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba82:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ba86:	d039      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800ba88:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ba8c:	d832      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ba8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba92:	d035      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ba94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba98:	d82c      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ba9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba9e:	d031      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800baa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa4:	d826      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800baa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baaa:	d02d      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800baac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bab0:	d820      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bab6:	d012      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800babc:	d81a      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d024      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bac6:	d115      	bne.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bacc:	3308      	adds	r3, #8
 800bace:	2101      	movs	r1, #1
 800bad0:	4618      	mov	r0, r3
 800bad2:	f001 f9ad 	bl	800ce30 <RCCEx_PLL2_Config>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800badc:	e017      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bae2:	3328      	adds	r3, #40	; 0x28
 800bae4:	2101      	movs	r1, #1
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 fa54 	bl	800cf94 <RCCEx_PLL3_Config>
 800baec:	4603      	mov	r3, r0
 800baee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800baf2:	e00c      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bafa:	e008      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bafc:	bf00      	nop
 800bafe:	e006      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb00:	bf00      	nop
 800bb02:	e004      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb04:	bf00      	nop
 800bb06:	e002      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb08:	bf00      	nop
 800bb0a:	e000      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10e      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bb16:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb26:	4a02      	ldr	r2, [pc, #8]	; (800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb2c:	e006      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bb2e:	bf00      	nop
 800bb30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bb48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bb52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb56:	460b      	mov	r3, r1
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	d037      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bb5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb66:	d00e      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bb68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb6c:	d816      	bhi.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d018      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bb72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb76:	d111      	bne.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb78:	4bc4      	ldr	r3, [pc, #784]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	4ac3      	ldr	r2, [pc, #780]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb84:	e00f      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 f94e 	bl	800ce30 <RCCEx_PLL2_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb9a:	e004      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bba2:	e000      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10a      	bne.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bbae:	4bb7      	ldr	r3, [pc, #732]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bbb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbbc:	4ab3      	ldr	r2, [pc, #716]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbbe:	430b      	orrs	r3, r1
 800bbc0:	6513      	str	r3, [r2, #80]	; 0x50
 800bbc2:	e003      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bbd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bbe2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	d039      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bbec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d81c      	bhi.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bbf6:	a201      	add	r2, pc, #4	; (adr r2, 800bbfc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc39 	.word	0x0800bc39
 800bc00:	0800bc0d 	.word	0x0800bc0d
 800bc04:	0800bc1b 	.word	0x0800bc1b
 800bc08:	0800bc39 	.word	0x0800bc39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc0c:	4b9f      	ldr	r3, [pc, #636]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	4a9e      	ldr	r2, [pc, #632]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc18:	e00f      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc1e:	3308      	adds	r3, #8
 800bc20:	2102      	movs	r1, #2
 800bc22:	4618      	mov	r0, r3
 800bc24:	f001 f904 	bl	800ce30 <RCCEx_PLL2_Config>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc2e:	e004      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc36:	e000      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bc42:	4b92      	ldr	r3, [pc, #584]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc46:	f023 0103 	bic.w	r1, r3, #3
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc50:	4a8e      	ldr	r2, [pc, #568]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc52:	430b      	orrs	r3, r1
 800bc54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc56:	e003      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bc6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	f000 8099 	beq.w	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc82:	4b83      	ldr	r3, [pc, #524]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a82      	ldr	r2, [pc, #520]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bc88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc8e:	f7f8 fa97 	bl	80041c0 <HAL_GetTick>
 800bc92:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc96:	e00b      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc98:	f7f8 fa92 	bl	80041c0 <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	2b64      	cmp	r3, #100	; 0x64
 800bca6:	d903      	bls.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bcae:	e005      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcb0:	4b77      	ldr	r3, [pc, #476]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d0ed      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bcbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d173      	bne.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bcc4:	4b71      	ldr	r3, [pc, #452]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcd0:	4053      	eors	r3, r2
 800bcd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d015      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bcda:	4b6c      	ldr	r3, [pc, #432]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bce2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bce6:	4b69      	ldr	r3, [pc, #420]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcea:	4a68      	ldr	r2, [pc, #416]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcf0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bcf2:	4b66      	ldr	r3, [pc, #408]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf6:	4a65      	ldr	r2, [pc, #404]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcfc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bcfe:	4a63      	ldr	r2, [pc, #396]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd12:	d118      	bne.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd14:	f7f8 fa54 	bl	80041c0 <HAL_GetTick>
 800bd18:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd1c:	e00d      	b.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd1e:	f7f8 fa4f 	bl	80041c0 <HAL_GetTick>
 800bd22:	4602      	mov	r2, r0
 800bd24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd28:	1ad2      	subs	r2, r2, r3
 800bd2a:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d903      	bls.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bd32:	2303      	movs	r3, #3
 800bd34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bd38:	e005      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd3a:	4b54      	ldr	r3, [pc, #336]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3e:	f003 0302 	and.w	r3, r3, #2
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0eb      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bd46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d129      	bne.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd5e:	d10e      	bne.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bd60:	4b4a      	ldr	r3, [pc, #296]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bd68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd70:	091a      	lsrs	r2, r3, #4
 800bd72:	4b48      	ldr	r3, [pc, #288]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	4a45      	ldr	r2, [pc, #276]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	6113      	str	r3, [r2, #16]
 800bd7c:	e005      	b.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bd7e:	4b43      	ldr	r3, [pc, #268]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	4a42      	ldr	r2, [pc, #264]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd88:	6113      	str	r3, [r2, #16]
 800bd8a:	4b40      	ldr	r3, [pc, #256]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bd8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd9a:	4a3c      	ldr	r2, [pc, #240]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	6713      	str	r3, [r2, #112]	; 0x70
 800bda0:	e008      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bda2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bda6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bdaa:	e003      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bdb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f002 0301 	and.w	r3, r2, #1
 800bdc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	f000 8090 	beq.w	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bdd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdde:	2b28      	cmp	r3, #40	; 0x28
 800bde0:	d870      	bhi.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bde2:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800becd 	.word	0x0800becd
 800bdec:	0800bec5 	.word	0x0800bec5
 800bdf0:	0800bec5 	.word	0x0800bec5
 800bdf4:	0800bec5 	.word	0x0800bec5
 800bdf8:	0800bec5 	.word	0x0800bec5
 800bdfc:	0800bec5 	.word	0x0800bec5
 800be00:	0800bec5 	.word	0x0800bec5
 800be04:	0800bec5 	.word	0x0800bec5
 800be08:	0800be99 	.word	0x0800be99
 800be0c:	0800bec5 	.word	0x0800bec5
 800be10:	0800bec5 	.word	0x0800bec5
 800be14:	0800bec5 	.word	0x0800bec5
 800be18:	0800bec5 	.word	0x0800bec5
 800be1c:	0800bec5 	.word	0x0800bec5
 800be20:	0800bec5 	.word	0x0800bec5
 800be24:	0800bec5 	.word	0x0800bec5
 800be28:	0800beaf 	.word	0x0800beaf
 800be2c:	0800bec5 	.word	0x0800bec5
 800be30:	0800bec5 	.word	0x0800bec5
 800be34:	0800bec5 	.word	0x0800bec5
 800be38:	0800bec5 	.word	0x0800bec5
 800be3c:	0800bec5 	.word	0x0800bec5
 800be40:	0800bec5 	.word	0x0800bec5
 800be44:	0800bec5 	.word	0x0800bec5
 800be48:	0800becd 	.word	0x0800becd
 800be4c:	0800bec5 	.word	0x0800bec5
 800be50:	0800bec5 	.word	0x0800bec5
 800be54:	0800bec5 	.word	0x0800bec5
 800be58:	0800bec5 	.word	0x0800bec5
 800be5c:	0800bec5 	.word	0x0800bec5
 800be60:	0800bec5 	.word	0x0800bec5
 800be64:	0800bec5 	.word	0x0800bec5
 800be68:	0800becd 	.word	0x0800becd
 800be6c:	0800bec5 	.word	0x0800bec5
 800be70:	0800bec5 	.word	0x0800bec5
 800be74:	0800bec5 	.word	0x0800bec5
 800be78:	0800bec5 	.word	0x0800bec5
 800be7c:	0800bec5 	.word	0x0800bec5
 800be80:	0800bec5 	.word	0x0800bec5
 800be84:	0800bec5 	.word	0x0800bec5
 800be88:	0800becd 	.word	0x0800becd
 800be8c:	58024400 	.word	0x58024400
 800be90:	58024800 	.word	0x58024800
 800be94:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be9c:	3308      	adds	r3, #8
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 ffc5 	bl	800ce30 <RCCEx_PLL2_Config>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800beac:	e00f      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800beae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800beb2:	3328      	adds	r3, #40	; 0x28
 800beb4:	2101      	movs	r1, #1
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 f86c 	bl	800cf94 <RCCEx_PLL3_Config>
 800bebc:	4603      	mov	r3, r0
 800bebe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bec2:	e004      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800beca:	e000      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800becc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bece:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bed6:	4bc0      	ldr	r3, [pc, #768]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beda:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee6:	4abc      	ldr	r2, [pc, #752]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bee8:	430b      	orrs	r3, r1
 800beea:	6553      	str	r3, [r2, #84]	; 0x54
 800beec:	e003      	b.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bef2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f002 0302 	and.w	r3, r2, #2
 800bf02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf06:	2300      	movs	r3, #0
 800bf08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bf0c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bf10:	460b      	mov	r3, r1
 800bf12:	4313      	orrs	r3, r2
 800bf14:	d043      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bf16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf1e:	2b05      	cmp	r3, #5
 800bf20:	d824      	bhi.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bf22:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf75 	.word	0x0800bf75
 800bf2c:	0800bf41 	.word	0x0800bf41
 800bf30:	0800bf57 	.word	0x0800bf57
 800bf34:	0800bf75 	.word	0x0800bf75
 800bf38:	0800bf75 	.word	0x0800bf75
 800bf3c:	0800bf75 	.word	0x0800bf75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf44:	3308      	adds	r3, #8
 800bf46:	2101      	movs	r1, #1
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 ff71 	bl	800ce30 <RCCEx_PLL2_Config>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf54:	e00f      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf5a:	3328      	adds	r3, #40	; 0x28
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f001 f818 	bl	800cf94 <RCCEx_PLL3_Config>
 800bf64:	4603      	mov	r3, r0
 800bf66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf6a:	e004      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf72:	e000      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bf74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10b      	bne.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bf7e:	4b96      	ldr	r3, [pc, #600]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf82:	f023 0107 	bic.w	r1, r3, #7
 800bf86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf8e:	4a92      	ldr	r2, [pc, #584]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf90:	430b      	orrs	r3, r1
 800bf92:	6553      	str	r3, [r2, #84]	; 0x54
 800bf94:	e003      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f002 0304 	and.w	r3, r2, #4
 800bfaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfb4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	d043      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bfbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfc6:	2b05      	cmp	r3, #5
 800bfc8:	d824      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bfca:	a201      	add	r2, pc, #4	; (adr r2, 800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd0:	0800c01d 	.word	0x0800c01d
 800bfd4:	0800bfe9 	.word	0x0800bfe9
 800bfd8:	0800bfff 	.word	0x0800bfff
 800bfdc:	0800c01d 	.word	0x0800c01d
 800bfe0:	0800c01d 	.word	0x0800c01d
 800bfe4:	0800c01d 	.word	0x0800c01d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfec:	3308      	adds	r3, #8
 800bfee:	2101      	movs	r1, #1
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 ff1d 	bl	800ce30 <RCCEx_PLL2_Config>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bffc:	e00f      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c002:	3328      	adds	r3, #40	; 0x28
 800c004:	2101      	movs	r1, #1
 800c006:	4618      	mov	r0, r3
 800c008:	f000 ffc4 	bl	800cf94 <RCCEx_PLL3_Config>
 800c00c:	4603      	mov	r3, r0
 800c00e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c012:	e004      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c01a:	e000      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c01e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10b      	bne.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c026:	4b6c      	ldr	r3, [pc, #432]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c02a:	f023 0107 	bic.w	r1, r3, #7
 800c02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c036:	4a68      	ldr	r2, [pc, #416]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c038:	430b      	orrs	r3, r1
 800c03a:	6593      	str	r3, [r2, #88]	; 0x58
 800c03c:	e003      	b.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c03e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c042:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f002 0320 	and.w	r3, r2, #32
 800c052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c056:	2300      	movs	r3, #0
 800c058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c05c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c060:	460b      	mov	r3, r1
 800c062:	4313      	orrs	r3, r2
 800c064:	d055      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c06a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c06e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c072:	d033      	beq.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c078:	d82c      	bhi.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c07e:	d02f      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c084:	d826      	bhi.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c086:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c08a:	d02b      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c08c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c090:	d820      	bhi.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c096:	d012      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c09c:	d81a      	bhi.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d022      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c0a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0a6:	d115      	bne.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 febd 	bl	800ce30 <RCCEx_PLL2_Config>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c0bc:	e015      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0c2:	3328      	adds	r3, #40	; 0x28
 800c0c4:	2102      	movs	r1, #2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 ff64 	bl	800cf94 <RCCEx_PLL3_Config>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c0d2:	e00a      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0da:	e006      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c0dc:	bf00      	nop
 800c0de:	e004      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c0e0:	bf00      	nop
 800c0e2:	e002      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c0e4:	bf00      	nop
 800c0e6:	e000      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c0e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10b      	bne.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0f2:	4b39      	ldr	r3, [pc, #228]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c102:	4a35      	ldr	r2, [pc, #212]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c104:	430b      	orrs	r3, r1
 800c106:	6553      	str	r3, [r2, #84]	; 0x54
 800c108:	e003      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c10a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c10e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c11e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c122:	2300      	movs	r3, #0
 800c124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c128:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c12c:	460b      	mov	r3, r1
 800c12e:	4313      	orrs	r3, r2
 800c130:	d058      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c13a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c13e:	d033      	beq.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c140:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c144:	d82c      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c14a:	d02f      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c150:	d826      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c156:	d02b      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c15c:	d820      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c15e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c162:	d012      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c168:	d81a      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d022      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c16e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c172:	d115      	bne.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c178:	3308      	adds	r3, #8
 800c17a:	2100      	movs	r1, #0
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fe57 	bl	800ce30 <RCCEx_PLL2_Config>
 800c182:	4603      	mov	r3, r0
 800c184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c188:	e015      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c18e:	3328      	adds	r3, #40	; 0x28
 800c190:	2102      	movs	r1, #2
 800c192:	4618      	mov	r0, r3
 800c194:	f000 fefe 	bl	800cf94 <RCCEx_PLL3_Config>
 800c198:	4603      	mov	r3, r0
 800c19a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c19e:	e00a      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c1a6:	e006      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1a8:	bf00      	nop
 800c1aa:	e004      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1ac:	bf00      	nop
 800c1ae:	e002      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1b0:	bf00      	nop
 800c1b2:	e000      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10e      	bne.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1be:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1c2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1ce:	4a02      	ldr	r2, [pc, #8]	; (800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1d0:	430b      	orrs	r3, r1
 800c1d2:	6593      	str	r3, [r2, #88]	; 0x58
 800c1d4:	e006      	b.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c1d6:	bf00      	nop
 800c1d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c1fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c1fe:	460b      	mov	r3, r1
 800c200:	4313      	orrs	r3, r2
 800c202:	d055      	beq.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c208:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c20c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c210:	d033      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c212:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c216:	d82c      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c21c:	d02f      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c21e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c222:	d826      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c224:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c228:	d02b      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c22a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c22e:	d820      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c234:	d012      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c23a:	d81a      	bhi.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d022      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c244:	d115      	bne.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c24a:	3308      	adds	r3, #8
 800c24c:	2100      	movs	r1, #0
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fdee 	bl	800ce30 <RCCEx_PLL2_Config>
 800c254:	4603      	mov	r3, r0
 800c256:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c25a:	e015      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c25c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c260:	3328      	adds	r3, #40	; 0x28
 800c262:	2102      	movs	r1, #2
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fe95 	bl	800cf94 <RCCEx_PLL3_Config>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c270:	e00a      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c278:	e006      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c27a:	bf00      	nop
 800c27c:	e004      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c27e:	bf00      	nop
 800c280:	e002      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c282:	bf00      	nop
 800c284:	e000      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c286:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c288:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10b      	bne.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c290:	4ba1      	ldr	r3, [pc, #644]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c294:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c2a0:	4a9d      	ldr	r2, [pc, #628]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2a2:	430b      	orrs	r3, r1
 800c2a4:	6593      	str	r3, [r2, #88]	; 0x58
 800c2a6:	e003      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	f002 0308 	and.w	r3, r2, #8
 800c2bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	d01e      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2dc:	d10c      	bne.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2e2:	3328      	adds	r3, #40	; 0x28
 800c2e4:	2102      	movs	r1, #2
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 fe54 	bl	800cf94 <RCCEx_PLL3_Config>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c2f8:	4b87      	ldr	r3, [pc, #540]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c308:	4a83      	ldr	r2, [pc, #524]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c30a:	430b      	orrs	r3, r1
 800c30c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c316:	f002 0310 	and.w	r3, r2, #16
 800c31a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c31e:	2300      	movs	r3, #0
 800c320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c324:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c328:	460b      	mov	r3, r1
 800c32a:	4313      	orrs	r3, r2
 800c32c:	d01e      	beq.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c33a:	d10c      	bne.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c340:	3328      	adds	r3, #40	; 0x28
 800c342:	2102      	movs	r1, #2
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fe25 	bl	800cf94 <RCCEx_PLL3_Config>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c356:	4b70      	ldr	r3, [pc, #448]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c366:	4a6c      	ldr	r2, [pc, #432]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c368:	430b      	orrs	r3, r1
 800c36a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c374:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c37c:	2300      	movs	r3, #0
 800c37e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c382:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c386:	460b      	mov	r3, r1
 800c388:	4313      	orrs	r3, r2
 800c38a:	d03e      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c38c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c390:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c398:	d022      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c39a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c39e:	d81b      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3a8:	d00b      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c3aa:	e015      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 fd3b 	bl	800ce30 <RCCEx_PLL2_Config>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c3c0:	e00f      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c6:	3328      	adds	r3, #40	; 0x28
 800c3c8:	2102      	movs	r1, #2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fde2 	bl	800cf94 <RCCEx_PLL3_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c3d6:	e004      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3de:	e000      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c3e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10b      	bne.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c3ea:	4b4b      	ldr	r3, [pc, #300]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c3fa:	4a47      	ldr	r2, [pc, #284]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6593      	str	r3, [r2, #88]	; 0x58
 800c400:	e003      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c402:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c406:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c416:	67bb      	str	r3, [r7, #120]	; 0x78
 800c418:	2300      	movs	r3, #0
 800c41a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c41c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c420:	460b      	mov	r3, r1
 800c422:	4313      	orrs	r3, r2
 800c424:	d03b      	beq.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c42e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c432:	d01f      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c438:	d818      	bhi.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c43a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c43e:	d003      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c444:	d007      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c446:	e011      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c448:	4b33      	ldr	r3, [pc, #204]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44c:	4a32      	ldr	r2, [pc, #200]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c44e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c454:	e00f      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c45a:	3328      	adds	r3, #40	; 0x28
 800c45c:	2101      	movs	r1, #1
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fd98 	bl	800cf94 <RCCEx_PLL3_Config>
 800c464:	4603      	mov	r3, r0
 800c466:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c46a:	e004      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c472:	e000      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c476:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10b      	bne.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c47e:	4b26      	ldr	r3, [pc, #152]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c482:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c48e:	4a22      	ldr	r2, [pc, #136]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c490:	430b      	orrs	r3, r1
 800c492:	6553      	str	r3, [r2, #84]	; 0x54
 800c494:	e003      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c496:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c49a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c4aa:	673b      	str	r3, [r7, #112]	; 0x70
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	677b      	str	r3, [r7, #116]	; 0x74
 800c4b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	d034      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c4c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c8:	d007      	beq.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c4ca:	e011      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4cc:	4b12      	ldr	r3, [pc, #72]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	4a11      	ldr	r2, [pc, #68]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c4d8:	e00e      	b.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4de:	3308      	adds	r3, #8
 800c4e0:	2102      	movs	r1, #2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 fca4 	bl	800ce30 <RCCEx_PLL2_Config>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c4ee:	e003      	b.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c4f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10d      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c500:	4b05      	ldr	r3, [pc, #20]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c504:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50e:	4a02      	ldr	r2, [pc, #8]	; (800c518 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c510:	430b      	orrs	r3, r1
 800c512:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c514:	e006      	b.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c516:	bf00      	nop
 800c518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c51c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c520:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c530:	66bb      	str	r3, [r7, #104]	; 0x68
 800c532:	2300      	movs	r3, #0
 800c534:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c536:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c53a:	460b      	mov	r3, r1
 800c53c:	4313      	orrs	r3, r2
 800c53e:	d00c      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c544:	3328      	adds	r3, #40	; 0x28
 800c546:	2102      	movs	r1, #2
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 fd23 	bl	800cf94 <RCCEx_PLL3_Config>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d002      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c562:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c566:	663b      	str	r3, [r7, #96]	; 0x60
 800c568:	2300      	movs	r3, #0
 800c56a:	667b      	str	r3, [r7, #100]	; 0x64
 800c56c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c570:	460b      	mov	r3, r1
 800c572:	4313      	orrs	r3, r2
 800c574:	d038      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c57e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c582:	d018      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c588:	d811      	bhi.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c58e:	d014      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c594:	d80b      	bhi.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d011      	beq.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59e:	d106      	bne.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5a0:	4bc3      	ldr	r3, [pc, #780]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a4:	4ac2      	ldr	r2, [pc, #776]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c5ac:	e008      	b.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5b4:	e004      	b.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c5b6:	bf00      	nop
 800c5b8:	e002      	b.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c5ba:	bf00      	nop
 800c5bc:	e000      	b.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c5be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10b      	bne.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c5c8:	4bb9      	ldr	r3, [pc, #740]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d8:	4ab5      	ldr	r2, [pc, #724]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5da:	430b      	orrs	r3, r1
 800c5dc:	6553      	str	r3, [r2, #84]	; 0x54
 800c5de:	e003      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c5e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c5f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c5fe:	460b      	mov	r3, r1
 800c600:	4313      	orrs	r3, r2
 800c602:	d009      	beq.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c604:	4baa      	ldr	r3, [pc, #680]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c608:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c612:	4aa7      	ldr	r2, [pc, #668]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c614:	430b      	orrs	r3, r1
 800c616:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c624:	653b      	str	r3, [r7, #80]	; 0x50
 800c626:	2300      	movs	r3, #0
 800c628:	657b      	str	r3, [r7, #84]	; 0x54
 800c62a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c62e:	460b      	mov	r3, r1
 800c630:	4313      	orrs	r3, r2
 800c632:	d009      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c634:	4b9e      	ldr	r3, [pc, #632]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c638:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c642:	4a9b      	ldr	r2, [pc, #620]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c644:	430b      	orrs	r3, r1
 800c646:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c654:	64bb      	str	r3, [r7, #72]	; 0x48
 800c656:	2300      	movs	r3, #0
 800c658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c65a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c65e:	460b      	mov	r3, r1
 800c660:	4313      	orrs	r3, r2
 800c662:	d009      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c664:	4b92      	ldr	r3, [pc, #584]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c668:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c672:	4a8f      	ldr	r2, [pc, #572]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c674:	430b      	orrs	r3, r1
 800c676:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c684:	643b      	str	r3, [r7, #64]	; 0x40
 800c686:	2300      	movs	r3, #0
 800c688:	647b      	str	r3, [r7, #68]	; 0x44
 800c68a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c68e:	460b      	mov	r3, r1
 800c690:	4313      	orrs	r3, r2
 800c692:	d00e      	beq.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c694:	4b86      	ldr	r3, [pc, #536]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	4a85      	ldr	r2, [pc, #532]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c69a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c69e:	6113      	str	r3, [r2, #16]
 800c6a0:	4b83      	ldr	r3, [pc, #524]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6a2:	6919      	ldr	r1, [r3, #16]
 800c6a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c6ac:	4a80      	ldr	r2, [pc, #512]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6ae:	430b      	orrs	r3, r1
 800c6b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c6b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c6be:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	d009      	beq.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c6ce:	4b78      	ldr	r3, [pc, #480]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6dc:	4a74      	ldr	r2, [pc, #464]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6de:	430b      	orrs	r3, r1
 800c6e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c6ee:	633b      	str	r3, [r7, #48]	; 0x30
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	d00a      	beq.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c6fe:	4b6c      	ldr	r3, [pc, #432]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c702:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c70a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c70e:	4a68      	ldr	r2, [pc, #416]	; (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c710:	430b      	orrs	r3, r1
 800c712:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	2100      	movs	r1, #0
 800c71e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c726:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c72a:	460b      	mov	r3, r1
 800c72c:	4313      	orrs	r3, r2
 800c72e:	d011      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c734:	3308      	adds	r3, #8
 800c736:	2100      	movs	r1, #0
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 fb79 	bl	800ce30 <RCCEx_PLL2_Config>
 800c73e:	4603      	mov	r3, r0
 800c740:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c744:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c750:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	2100      	movs	r1, #0
 800c75e:	6239      	str	r1, [r7, #32]
 800c760:	f003 0302 	and.w	r3, r3, #2
 800c764:	627b      	str	r3, [r7, #36]	; 0x24
 800c766:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c76a:	460b      	mov	r3, r1
 800c76c:	4313      	orrs	r3, r2
 800c76e:	d011      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c774:	3308      	adds	r3, #8
 800c776:	2101      	movs	r1, #1
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 fb59 	bl	800ce30 <RCCEx_PLL2_Config>
 800c77e:	4603      	mov	r3, r0
 800c780:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c784:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c78c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c790:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	2100      	movs	r1, #0
 800c79e:	61b9      	str	r1, [r7, #24]
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	61fb      	str	r3, [r7, #28]
 800c7a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	d011      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	2102      	movs	r1, #2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 fb39 	bl	800ce30 <RCCEx_PLL2_Config>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	2100      	movs	r1, #0
 800c7de:	6139      	str	r1, [r7, #16]
 800c7e0:	f003 0308 	and.w	r3, r3, #8
 800c7e4:	617b      	str	r3, [r7, #20]
 800c7e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	d011      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7f4:	3328      	adds	r3, #40	; 0x28
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 fbcb 	bl	800cf94 <RCCEx_PLL3_Config>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c804:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c80c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c810:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	2100      	movs	r1, #0
 800c81e:	60b9      	str	r1, [r7, #8]
 800c820:	f003 0310 	and.w	r3, r3, #16
 800c824:	60fb      	str	r3, [r7, #12]
 800c826:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c82a:	460b      	mov	r3, r1
 800c82c:	4313      	orrs	r3, r2
 800c82e:	d011      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c834:	3328      	adds	r3, #40	; 0x28
 800c836:	2101      	movs	r1, #1
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 fbab 	bl	800cf94 <RCCEx_PLL3_Config>
 800c83e:	4603      	mov	r3, r0
 800c840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c844:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d003      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c84c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c850:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	2100      	movs	r1, #0
 800c85e:	6039      	str	r1, [r7, #0]
 800c860:	f003 0320 	and.w	r3, r3, #32
 800c864:	607b      	str	r3, [r7, #4]
 800c866:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c86a:	460b      	mov	r3, r1
 800c86c:	4313      	orrs	r3, r2
 800c86e:	d011      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c874:	3328      	adds	r3, #40	; 0x28
 800c876:	2102      	movs	r1, #2
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fb8b 	bl	800cf94 <RCCEx_PLL3_Config>
 800c87e:	4603      	mov	r3, r0
 800c880:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c884:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d003      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c88c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c894:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	e000      	b.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8ae:	bf00      	nop
 800c8b0:	58024400 	.word	0x58024400

0800c8b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c8b8:	f7fe fde2 	bl	800b480 <HAL_RCC_GetHCLKFreq>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	4b06      	ldr	r3, [pc, #24]	; (800c8d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	091b      	lsrs	r3, r3, #4
 800c8c4:	f003 0307 	and.w	r3, r3, #7
 800c8c8:	4904      	ldr	r1, [pc, #16]	; (800c8dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c8ca:	5ccb      	ldrb	r3, [r1, r3]
 800c8cc:	f003 031f 	and.w	r3, r3, #31
 800c8d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	58024400 	.word	0x58024400
 800c8dc:	08010950 	.word	0x08010950

0800c8e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b089      	sub	sp, #36	; 0x24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8e8:	4ba1      	ldr	r3, [pc, #644]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ec:	f003 0303 	and.w	r3, r3, #3
 800c8f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c8f2:	4b9f      	ldr	r3, [pc, #636]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f6:	0b1b      	lsrs	r3, r3, #12
 800c8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c8fe:	4b9c      	ldr	r3, [pc, #624]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c902:	091b      	lsrs	r3, r3, #4
 800c904:	f003 0301 	and.w	r3, r3, #1
 800c908:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c90a:	4b99      	ldr	r3, [pc, #612]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90e:	08db      	lsrs	r3, r3, #3
 800c910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	fb02 f303 	mul.w	r3, r2, r3
 800c91a:	ee07 3a90 	vmov	s15, r3
 800c91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c922:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 8111 	beq.w	800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	2b02      	cmp	r3, #2
 800c932:	f000 8083 	beq.w	800ca3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	f200 80a1 	bhi.w	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d056      	beq.n	800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c94a:	e099      	b.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c94c:	4b88      	ldr	r3, [pc, #544]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 0320 	and.w	r3, r3, #32
 800c954:	2b00      	cmp	r3, #0
 800c956:	d02d      	beq.n	800c9b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c958:	4b85      	ldr	r3, [pc, #532]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	08db      	lsrs	r3, r3, #3
 800c95e:	f003 0303 	and.w	r3, r3, #3
 800c962:	4a84      	ldr	r2, [pc, #528]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c964:	fa22 f303 	lsr.w	r3, r2, r3
 800c968:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	ee07 3a90 	vmov	s15, r3
 800c970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	ee07 3a90 	vmov	s15, r3
 800c97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c982:	4b7b      	ldr	r3, [pc, #492]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98a:	ee07 3a90 	vmov	s15, r3
 800c98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c992:	ed97 6a03 	vldr	s12, [r7, #12]
 800c996:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9b2:	e087      	b.n	800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9c6:	4b6a      	ldr	r3, [pc, #424]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9f6:	e065      	b.n	800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	ee07 3a90 	vmov	s15, r3
 800c9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0a:	4b59      	ldr	r3, [pc, #356]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca12:	ee07 3a90 	vmov	s15, r3
 800ca16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca3a:	e043      	b.n	800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	ee07 3a90 	vmov	s15, r3
 800ca42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4e:	4b48      	ldr	r3, [pc, #288]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca62:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca7e:	e021      	b.n	800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	ee07 3a90 	vmov	s15, r3
 800ca86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca92:	4b37      	ldr	r3, [pc, #220]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800caa6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cac2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cac4:	4b2a      	ldr	r3, [pc, #168]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac8:	0a5b      	lsrs	r3, r3, #9
 800caca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cace:	ee07 3a90 	vmov	s15, r3
 800cad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cada:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cade:	edd7 6a07 	vldr	s13, [r7, #28]
 800cae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caea:	ee17 2a90 	vmov	r2, s15
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800caf2:	4b1f      	ldr	r3, [pc, #124]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf6:	0c1b      	lsrs	r3, r3, #16
 800caf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb18:	ee17 2a90 	vmov	r2, s15
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cb20:	4b13      	ldr	r3, [pc, #76]	; (800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb24:	0e1b      	lsrs	r3, r3, #24
 800cb26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb2a:	ee07 3a90 	vmov	s15, r3
 800cb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb46:	ee17 2a90 	vmov	r2, s15
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb4e:	e008      	b.n	800cb62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	609a      	str	r2, [r3, #8]
}
 800cb62:	bf00      	nop
 800cb64:	3724      	adds	r7, #36	; 0x24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	58024400 	.word	0x58024400
 800cb74:	03d09000 	.word	0x03d09000
 800cb78:	46000000 	.word	0x46000000
 800cb7c:	4c742400 	.word	0x4c742400
 800cb80:	4a742400 	.word	0x4a742400
 800cb84:	4bb71b00 	.word	0x4bb71b00

0800cb88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b089      	sub	sp, #36	; 0x24
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb90:	4ba1      	ldr	r3, [pc, #644]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb94:	f003 0303 	and.w	r3, r3, #3
 800cb98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb9a:	4b9f      	ldr	r3, [pc, #636]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9e:	0d1b      	lsrs	r3, r3, #20
 800cba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cba4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cba6:	4b9c      	ldr	r3, [pc, #624]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbaa:	0a1b      	lsrs	r3, r3, #8
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cbb2:	4b99      	ldr	r3, [pc, #612]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbb6:	08db      	lsrs	r3, r3, #3
 800cbb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	fb02 f303 	mul.w	r3, r2, r3
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 8111 	beq.w	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	f000 8083 	beq.w	800cce4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	f200 80a1 	bhi.w	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d003      	beq.n	800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d056      	beq.n	800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cbf2:	e099      	b.n	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbf4:	4b88      	ldr	r3, [pc, #544]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0320 	and.w	r3, r3, #32
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d02d      	beq.n	800cc5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc00:	4b85      	ldr	r3, [pc, #532]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	08db      	lsrs	r3, r3, #3
 800cc06:	f003 0303 	and.w	r3, r3, #3
 800cc0a:	4a84      	ldr	r2, [pc, #528]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc0c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	ee07 3a90 	vmov	s15, r3
 800cc18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	ee07 3a90 	vmov	s15, r3
 800cc22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc2a:	4b7b      	ldr	r3, [pc, #492]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc32:	ee07 3a90 	vmov	s15, r3
 800cc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc5a:	e087      	b.n	800cd6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	ee07 3a90 	vmov	s15, r3
 800cc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc6e:	4b6a      	ldr	r3, [pc, #424]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc82:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc9e:	e065      	b.n	800cd6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccaa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccb2:	4b59      	ldr	r3, [pc, #356]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccba:	ee07 3a90 	vmov	s15, r3
 800ccbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cce2:	e043      	b.n	800cd6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	ee07 3a90 	vmov	s15, r3
 800ccea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ccf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccf6:	4b48      	ldr	r3, [pc, #288]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd26:	e021      	b.n	800cd6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	ee07 3a90 	vmov	s15, r3
 800cd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3a:	4b37      	ldr	r3, [pc, #220]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd42:	ee07 3a90 	vmov	s15, r3
 800cd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cd6c:	4b2a      	ldr	r3, [pc, #168]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd70:	0a5b      	lsrs	r3, r3, #9
 800cd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd76:	ee07 3a90 	vmov	s15, r3
 800cd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd86:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd92:	ee17 2a90 	vmov	r2, s15
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd9a:	4b1f      	ldr	r3, [pc, #124]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9e:	0c1b      	lsrs	r3, r3, #16
 800cda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cda4:	ee07 3a90 	vmov	s15, r3
 800cda8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdc0:	ee17 2a90 	vmov	r2, s15
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cdc8:	4b13      	ldr	r3, [pc, #76]	; (800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdcc:	0e1b      	lsrs	r3, r3, #24
 800cdce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cde2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cde6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdee:	ee17 2a90 	vmov	r2, s15
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cdf6:	e008      	b.n	800ce0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	609a      	str	r2, [r3, #8]
}
 800ce0a:	bf00      	nop
 800ce0c:	3724      	adds	r7, #36	; 0x24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	58024400 	.word	0x58024400
 800ce1c:	03d09000 	.word	0x03d09000
 800ce20:	46000000 	.word	0x46000000
 800ce24:	4c742400 	.word	0x4c742400
 800ce28:	4a742400 	.word	0x4a742400
 800ce2c:	4bb71b00 	.word	0x4bb71b00

0800ce30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce3e:	4b53      	ldr	r3, [pc, #332]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ce40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce42:	f003 0303 	and.w	r3, r3, #3
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d101      	bne.n	800ce4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e099      	b.n	800cf82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce4e:	4b4f      	ldr	r3, [pc, #316]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a4e      	ldr	r2, [pc, #312]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ce54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce5a:	f7f7 f9b1 	bl	80041c0 <HAL_GetTick>
 800ce5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce60:	e008      	b.n	800ce74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce62:	f7f7 f9ad 	bl	80041c0 <HAL_GetTick>
 800ce66:	4602      	mov	r2, r0
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d901      	bls.n	800ce74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e086      	b.n	800cf82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce74:	4b45      	ldr	r3, [pc, #276]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f0      	bne.n	800ce62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce80:	4b42      	ldr	r3, [pc, #264]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ce82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	031b      	lsls	r3, r3, #12
 800ce8e:	493f      	ldr	r1, [pc, #252]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ce90:	4313      	orrs	r3, r2
 800ce92:	628b      	str	r3, [r1, #40]	; 0x28
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	025b      	lsls	r3, r3, #9
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	431a      	orrs	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	041b      	lsls	r3, r3, #16
 800ceb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	061b      	lsls	r3, r3, #24
 800cec0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cec4:	4931      	ldr	r1, [pc, #196]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ceca:	4b30      	ldr	r3, [pc, #192]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	695b      	ldr	r3, [r3, #20]
 800ced6:	492d      	ldr	r1, [pc, #180]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cedc:	4b2b      	ldr	r3, [pc, #172]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	f023 0220 	bic.w	r2, r3, #32
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	4928      	ldr	r1, [pc, #160]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800ceea:	4313      	orrs	r3, r2
 800ceec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ceee:	4b27      	ldr	r3, [pc, #156]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef2:	4a26      	ldr	r2, [pc, #152]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cef4:	f023 0310 	bic.w	r3, r3, #16
 800cef8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cefa:	4b24      	ldr	r3, [pc, #144]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cefc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cefe:	4b24      	ldr	r3, [pc, #144]	; (800cf90 <RCCEx_PLL2_Config+0x160>)
 800cf00:	4013      	ands	r3, r2
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	69d2      	ldr	r2, [r2, #28]
 800cf06:	00d2      	lsls	r2, r2, #3
 800cf08:	4920      	ldr	r1, [pc, #128]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf0e:	4b1f      	ldr	r3, [pc, #124]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	4a1e      	ldr	r2, [pc, #120]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf14:	f043 0310 	orr.w	r3, r3, #16
 800cf18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d106      	bne.n	800cf2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf20:	4b1a      	ldr	r3, [pc, #104]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf24:	4a19      	ldr	r2, [pc, #100]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf2c:	e00f      	b.n	800cf4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d106      	bne.n	800cf42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf34:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	4a14      	ldr	r2, [pc, #80]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf40:	e005      	b.n	800cf4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf42:	4b12      	ldr	r3, [pc, #72]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	4a11      	ldr	r2, [pc, #68]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf4e:	4b0f      	ldr	r3, [pc, #60]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a0e      	ldr	r2, [pc, #56]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf5a:	f7f7 f931 	bl	80041c0 <HAL_GetTick>
 800cf5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf60:	e008      	b.n	800cf74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf62:	f7f7 f92d 	bl	80041c0 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d901      	bls.n	800cf74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e006      	b.n	800cf82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf74:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <RCCEx_PLL2_Config+0x15c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d0f0      	beq.n	800cf62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	58024400 	.word	0x58024400
 800cf90:	ffff0007 	.word	0xffff0007

0800cf94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfa2:	4b53      	ldr	r3, [pc, #332]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800cfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa6:	f003 0303 	and.w	r3, r3, #3
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	d101      	bne.n	800cfb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e099      	b.n	800d0e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cfb2:	4b4f      	ldr	r3, [pc, #316]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a4e      	ldr	r2, [pc, #312]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800cfb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfbe:	f7f7 f8ff 	bl	80041c0 <HAL_GetTick>
 800cfc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfc4:	e008      	b.n	800cfd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfc6:	f7f7 f8fb 	bl	80041c0 <HAL_GetTick>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d901      	bls.n	800cfd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e086      	b.n	800d0e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfd8:	4b45      	ldr	r3, [pc, #276]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1f0      	bne.n	800cfc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cfe4:	4b42      	ldr	r3, [pc, #264]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800cfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	051b      	lsls	r3, r3, #20
 800cff2:	493f      	ldr	r1, [pc, #252]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800cff4:	4313      	orrs	r3, r2
 800cff6:	628b      	str	r3, [r1, #40]	; 0x28
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	3b01      	subs	r3, #1
 800d008:	025b      	lsls	r3, r3, #9
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	431a      	orrs	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	3b01      	subs	r3, #1
 800d014:	041b      	lsls	r3, r3, #16
 800d016:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d01a:	431a      	orrs	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	3b01      	subs	r3, #1
 800d022:	061b      	lsls	r3, r3, #24
 800d024:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d028:	4931      	ldr	r1, [pc, #196]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d02e:	4b30      	ldr	r3, [pc, #192]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d032:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	492d      	ldr	r1, [pc, #180]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d03c:	4313      	orrs	r3, r2
 800d03e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d040:	4b2b      	ldr	r3, [pc, #172]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d044:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	4928      	ldr	r1, [pc, #160]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d04e:	4313      	orrs	r3, r2
 800d050:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d052:	4b27      	ldr	r3, [pc, #156]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d056:	4a26      	ldr	r2, [pc, #152]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d05c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d05e:	4b24      	ldr	r3, [pc, #144]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d062:	4b24      	ldr	r3, [pc, #144]	; (800d0f4 <RCCEx_PLL3_Config+0x160>)
 800d064:	4013      	ands	r3, r2
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	69d2      	ldr	r2, [r2, #28]
 800d06a:	00d2      	lsls	r2, r2, #3
 800d06c:	4920      	ldr	r1, [pc, #128]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d06e:	4313      	orrs	r3, r2
 800d070:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d072:	4b1f      	ldr	r3, [pc, #124]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d076:	4a1e      	ldr	r2, [pc, #120]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d07c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d106      	bne.n	800d092 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d084:	4b1a      	ldr	r3, [pc, #104]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	4a19      	ldr	r2, [pc, #100]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d08a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d08e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d090:	e00f      	b.n	800d0b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d106      	bne.n	800d0a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d098:	4b15      	ldr	r3, [pc, #84]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09c:	4a14      	ldr	r2, [pc, #80]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d09e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0a4:	e005      	b.n	800d0b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0aa:	4a11      	ldr	r2, [pc, #68]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d0ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0b2:	4b0f      	ldr	r3, [pc, #60]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a0e      	ldr	r2, [pc, #56]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d0b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0be:	f7f7 f87f 	bl	80041c0 <HAL_GetTick>
 800d0c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0c4:	e008      	b.n	800d0d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0c6:	f7f7 f87b 	bl	80041c0 <HAL_GetTick>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d901      	bls.n	800d0d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e006      	b.n	800d0e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0d8:	4b05      	ldr	r3, [pc, #20]	; (800d0f0 <RCCEx_PLL3_Config+0x15c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d0f0      	beq.n	800d0c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	58024400 	.word	0x58024400
 800d0f4:	ffff0007 	.word	0xffff0007

0800d0f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d074      	beq.n	800d1f4 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d110:	b2db      	uxtb	r3, r3
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7f6 fde2 	bl	8003ce8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	f003 0310 	and.w	r3, r3, #16
 800d136:	2b10      	cmp	r3, #16
 800d138:	d053      	beq.n	800d1e2 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	22ca      	movs	r2, #202	; 0xca
 800d140:	625a      	str	r2, [r3, #36]	; 0x24
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2253      	movs	r2, #83	; 0x53
 800d148:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 f87e 	bl	800d24c <RTC_EnterInitMode>
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d124      	bne.n	800d1a4 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6999      	ldr	r1, [r3, #24]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	4b26      	ldr	r3, [pc, #152]	; (800d200 <HAL_RTC_Init+0x108>)
 800d166:	400b      	ands	r3, r1
 800d168:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6999      	ldr	r1, [r3, #24]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685a      	ldr	r2, [r3, #4]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	431a      	orrs	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	431a      	orrs	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	0419      	lsls	r1, r3, #16
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	68da      	ldr	r2, [r3, #12]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	430a      	orrs	r2, r1
 800d198:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f88c 	bl	800d2b8 <RTC_ExitInitMode>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d116      	bne.n	800d1d8 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	699a      	ldr	r2, [r3, #24]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d1b8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6999      	ldr	r1, [r3, #24]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a1a      	ldr	r2, [r3, #32]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	69db      	ldr	r3, [r3, #28]
 800d1c8:	431a      	orrs	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	695b      	ldr	r3, [r3, #20]
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	22ff      	movs	r2, #255	; 0xff
 800d1de:	625a      	str	r2, [r3, #36]	; 0x24
 800d1e0:	e001      	b.n	800d1e6 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d103      	bne.n	800d1f4 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	fb8fffbf 	.word	0xfb8fffbf

0800d204 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a0d      	ldr	r2, [pc, #52]	; (800d248 <HAL_RTC_WaitForSynchro+0x44>)
 800d212:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d214:	f7f6 ffd4 	bl	80041c0 <HAL_GetTick>
 800d218:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d21a:	e009      	b.n	800d230 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d21c:	f7f6 ffd0 	bl	80041c0 <HAL_GetTick>
 800d220:	4602      	mov	r2, r0
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d22a:	d901      	bls.n	800d230 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d22c:	2303      	movs	r3, #3
 800d22e:	e007      	b.n	800d240 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	f003 0320 	and.w	r3, r3, #32
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d0ee      	beq.n	800d21c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	0001005f 	.word	0x0001005f

0800d24c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d262:	2b00      	cmp	r3, #0
 800d264:	d123      	bne.n	800d2ae <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68da      	ldr	r2, [r3, #12]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d274:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d276:	f7f6 ffa3 	bl	80041c0 <HAL_GetTick>
 800d27a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d27c:	e00d      	b.n	800d29a <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d27e:	f7f6 ff9f 	bl	80041c0 <HAL_GetTick>
 800d282:	4602      	mov	r2, r0
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d28c:	d905      	bls.n	800d29a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2203      	movs	r2, #3
 800d296:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <RTC_EnterInitMode+0x62>
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	d1e7      	bne.n	800d27e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d2c4:	4b1a      	ldr	r3, [pc, #104]	; (800d330 <RTC_ExitInitMode+0x78>)
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	4a19      	ldr	r2, [pc, #100]	; (800d330 <RTC_ExitInitMode+0x78>)
 800d2ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2ce:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d2d0:	4b17      	ldr	r3, [pc, #92]	; (800d330 <RTC_ExitInitMode+0x78>)
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	f003 0320 	and.w	r3, r3, #32
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10c      	bne.n	800d2f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff ff91 	bl	800d204 <HAL_RTC_WaitForSynchro>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d01e      	beq.n	800d326 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2203      	movs	r2, #3
 800d2ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	73fb      	strb	r3, [r7, #15]
 800d2f4:	e017      	b.n	800d326 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d2f6:	4b0e      	ldr	r3, [pc, #56]	; (800d330 <RTC_ExitInitMode+0x78>)
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	4a0d      	ldr	r2, [pc, #52]	; (800d330 <RTC_ExitInitMode+0x78>)
 800d2fc:	f023 0320 	bic.w	r3, r3, #32
 800d300:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff ff7e 	bl	800d204 <HAL_RTC_WaitForSynchro>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d005      	beq.n	800d31a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2203      	movs	r2, #3
 800d312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d316:	2303      	movs	r3, #3
 800d318:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d31a:	4b05      	ldr	r3, [pc, #20]	; (800d330 <RTC_ExitInitMode+0x78>)
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	4a04      	ldr	r2, [pc, #16]	; (800d330 <RTC_ExitInitMode+0x78>)
 800d320:	f043 0320 	orr.w	r3, r3, #32
 800d324:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	58004000 	.word	0x58004000

0800d334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
 800d344:	e042      	b.n	800d3cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d106      	bne.n	800d35e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7f6 fcf7 	bl	8003d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2224      	movs	r2, #36	; 0x24
 800d362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f022 0201 	bic.w	r2, r2, #1
 800d374:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 fd5c 	bl	800de34 <UART_SetConfig>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d101      	bne.n	800d386 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	e022      	b.n	800d3cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f001 fbbc 	bl	800eb0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d3a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	689a      	ldr	r2, [r3, #8]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f042 0201 	orr.w	r2, r2, #1
 800d3c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f001 fc43 	bl	800ec50 <UART_CheckIdleState>
 800d3ca:	4603      	mov	r3, r0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08a      	sub	sp, #40	; 0x28
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	603b      	str	r3, [r7, #0]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ea:	2b20      	cmp	r3, #32
 800d3ec:	d17b      	bne.n	800d4e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <HAL_UART_Transmit+0x26>
 800d3f4:	88fb      	ldrh	r3, [r7, #6]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e074      	b.n	800d4e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2221      	movs	r2, #33	; 0x21
 800d40a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d40e:	f7f6 fed7 	bl	80041c0 <HAL_GetTick>
 800d412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	88fa      	ldrh	r2, [r7, #6]
 800d418:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	88fa      	ldrh	r2, [r7, #6]
 800d420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d42c:	d108      	bne.n	800d440 <HAL_UART_Transmit+0x6c>
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d104      	bne.n	800d440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d436:	2300      	movs	r3, #0
 800d438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	61bb      	str	r3, [r7, #24]
 800d43e:	e003      	b.n	800d448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d444:	2300      	movs	r3, #0
 800d446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d448:	e030      	b.n	800d4ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2200      	movs	r2, #0
 800d452:	2180      	movs	r1, #128	; 0x80
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f001 fca5 	bl	800eda4 <UART_WaitOnFlagUntilTimeout>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d005      	beq.n	800d46c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2220      	movs	r2, #32
 800d464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d468:	2303      	movs	r3, #3
 800d46a:	e03d      	b.n	800d4e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10b      	bne.n	800d48a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	461a      	mov	r2, r3
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d480:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	3302      	adds	r3, #2
 800d486:	61bb      	str	r3, [r7, #24]
 800d488:	e007      	b.n	800d49a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	781a      	ldrb	r2, [r3, #0]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	3301      	adds	r3, #1
 800d498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1c8      	bne.n	800d44a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2140      	movs	r1, #64	; 0x40
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f001 fc6e 	bl	800eda4 <UART_WaitOnFlagUntilTimeout>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d005      	beq.n	800d4da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2220      	movs	r2, #32
 800d4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	e006      	b.n	800d4e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2220      	movs	r2, #32
 800d4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e000      	b.n	800d4e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d4e6:	2302      	movs	r3, #2
  }
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3720      	adds	r7, #32
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b08a      	sub	sp, #40	; 0x28
 800d4f4:	af02      	add	r7, sp, #8
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d506:	2b20      	cmp	r3, #32
 800d508:	f040 80b5 	bne.w	800d676 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <HAL_UART_Receive+0x28>
 800d512:	88fb      	ldrh	r3, [r7, #6]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	e0ad      	b.n	800d678 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2200      	movs	r2, #0
 800d520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2222      	movs	r2, #34	; 0x22
 800d528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d532:	f7f6 fe45 	bl	80041c0 <HAL_GetTick>
 800d536:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	88fa      	ldrh	r2, [r7, #6]
 800d53c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	88fa      	ldrh	r2, [r7, #6]
 800d544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d550:	d10e      	bne.n	800d570 <HAL_UART_Receive+0x80>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d105      	bne.n	800d566 <HAL_UART_Receive+0x76>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d564:	e02d      	b.n	800d5c2 <HAL_UART_Receive+0xd2>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	22ff      	movs	r2, #255	; 0xff
 800d56a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d56e:	e028      	b.n	800d5c2 <HAL_UART_Receive+0xd2>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10d      	bne.n	800d594 <HAL_UART_Receive+0xa4>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d104      	bne.n	800d58a <HAL_UART_Receive+0x9a>
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	22ff      	movs	r2, #255	; 0xff
 800d584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d588:	e01b      	b.n	800d5c2 <HAL_UART_Receive+0xd2>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	227f      	movs	r2, #127	; 0x7f
 800d58e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d592:	e016      	b.n	800d5c2 <HAL_UART_Receive+0xd2>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d59c:	d10d      	bne.n	800d5ba <HAL_UART_Receive+0xca>
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d104      	bne.n	800d5b0 <HAL_UART_Receive+0xc0>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	227f      	movs	r2, #127	; 0x7f
 800d5aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5ae:	e008      	b.n	800d5c2 <HAL_UART_Receive+0xd2>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	223f      	movs	r2, #63	; 0x3f
 800d5b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5b8:	e003      	b.n	800d5c2 <HAL_UART_Receive+0xd2>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5d2:	d108      	bne.n	800d5e6 <HAL_UART_Receive+0xf6>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d104      	bne.n	800d5e6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	61bb      	str	r3, [r7, #24]
 800d5e4:	e003      	b.n	800d5ee <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d5ee:	e036      	b.n	800d65e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2120      	movs	r1, #32
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f001 fbd2 	bl	800eda4 <UART_WaitOnFlagUntilTimeout>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d005      	beq.n	800d612 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2220      	movs	r2, #32
 800d60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d60e:	2303      	movs	r3, #3
 800d610:	e032      	b.n	800d678 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10c      	bne.n	800d632 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61e:	b29a      	uxth	r2, r3
 800d620:	8a7b      	ldrh	r3, [r7, #18]
 800d622:	4013      	ands	r3, r2
 800d624:	b29a      	uxth	r2, r3
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	3302      	adds	r3, #2
 800d62e:	61bb      	str	r3, [r7, #24]
 800d630:	e00c      	b.n	800d64c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	8a7b      	ldrh	r3, [r7, #18]
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	4013      	ands	r3, r2
 800d640:	b2da      	uxtb	r2, r3
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	3301      	adds	r3, #1
 800d64a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d652:	b29b      	uxth	r3, r3
 800d654:	3b01      	subs	r3, #1
 800d656:	b29a      	uxth	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d664:	b29b      	uxth	r3, r3
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1c2      	bne.n	800d5f0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2220      	movs	r2, #32
 800d66e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	e000      	b.n	800d678 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d676:	2302      	movs	r3, #2
  }
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b0ba      	sub	sp, #232	; 0xe8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d6a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d6aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d6b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d11b      	bne.n	800d6f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6c0:	f003 0320 	and.w	r3, r3, #32
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d015      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6cc:	f003 0320 	and.w	r3, r3, #32
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d105      	bne.n	800d6e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d009      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 8377 	beq.w	800ddd8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	4798      	blx	r3
      }
      return;
 800d6f2:	e371      	b.n	800ddd8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d6f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f000 8123 	beq.w	800d944 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d6fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d702:	4b8d      	ldr	r3, [pc, #564]	; (800d938 <HAL_UART_IRQHandler+0x2b8>)
 800d704:	4013      	ands	r3, r2
 800d706:	2b00      	cmp	r3, #0
 800d708:	d106      	bne.n	800d718 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d70a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d70e:	4b8b      	ldr	r3, [pc, #556]	; (800d93c <HAL_UART_IRQHandler+0x2bc>)
 800d710:	4013      	ands	r3, r2
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 8116 	beq.w	800d944 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d71c:	f003 0301 	and.w	r3, r3, #1
 800d720:	2b00      	cmp	r3, #0
 800d722:	d011      	beq.n	800d748 <HAL_UART_IRQHandler+0xc8>
 800d724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00b      	beq.n	800d748 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2201      	movs	r2, #1
 800d736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d73e:	f043 0201 	orr.w	r2, r3, #1
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d74c:	f003 0302 	and.w	r3, r3, #2
 800d750:	2b00      	cmp	r3, #0
 800d752:	d011      	beq.n	800d778 <HAL_UART_IRQHandler+0xf8>
 800d754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d758:	f003 0301 	and.w	r3, r3, #1
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00b      	beq.n	800d778 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2202      	movs	r2, #2
 800d766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d76e:	f043 0204 	orr.w	r2, r3, #4
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d77c:	f003 0304 	and.w	r3, r3, #4
 800d780:	2b00      	cmp	r3, #0
 800d782:	d011      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x128>
 800d784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d788:	f003 0301 	and.w	r3, r3, #1
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00b      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2204      	movs	r2, #4
 800d796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d79e:	f043 0202 	orr.w	r2, r3, #2
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ac:	f003 0308 	and.w	r3, r3, #8
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d017      	beq.n	800d7e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7b8:	f003 0320 	and.w	r3, r3, #32
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d105      	bne.n	800d7cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d7c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7c4:	4b5c      	ldr	r3, [pc, #368]	; (800d938 <HAL_UART_IRQHandler+0x2b8>)
 800d7c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00b      	beq.n	800d7e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2208      	movs	r2, #8
 800d7d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7da:	f043 0208 	orr.w	r2, r3, #8
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d012      	beq.n	800d816 <HAL_UART_IRQHandler+0x196>
 800d7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00c      	beq.n	800d816 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80c:	f043 0220 	orr.w	r2, r3, #32
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f000 82dd 	beq.w	800dddc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d826:	f003 0320 	and.w	r3, r3, #32
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d013      	beq.n	800d856 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d832:	f003 0320 	and.w	r3, r3, #32
 800d836:	2b00      	cmp	r3, #0
 800d838:	d105      	bne.n	800d846 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d83e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d007      	beq.n	800d856 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d003      	beq.n	800d856 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d85c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86a:	2b40      	cmp	r3, #64	; 0x40
 800d86c:	d005      	beq.n	800d87a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d872:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d876:	2b00      	cmp	r3, #0
 800d878:	d054      	beq.n	800d924 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 fafa 	bl	800ee74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d88a:	2b40      	cmp	r3, #64	; 0x40
 800d88c:	d146      	bne.n	800d91c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3308      	adds	r3, #8
 800d894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d89c:	e853 3f00 	ldrex	r3, [r3]
 800d8a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d8a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3308      	adds	r3, #8
 800d8b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d8ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d8be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d8c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d8ca:	e841 2300 	strex	r3, r2, [r1]
 800d8ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d8d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1d9      	bne.n	800d88e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d017      	beq.n	800d914 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ea:	4a15      	ldr	r2, [pc, #84]	; (800d940 <HAL_UART_IRQHandler+0x2c0>)
 800d8ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7f8 f939 	bl	8005b6c <HAL_DMA_Abort_IT>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d019      	beq.n	800d934 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d90e:	4610      	mov	r0, r2
 800d910:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d912:	e00f      	b.n	800d934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fa77 	bl	800de08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d91a:	e00b      	b.n	800d934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 fa73 	bl	800de08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d922:	e007      	b.n	800d934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fa6f 	bl	800de08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d932:	e253      	b.n	800dddc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d934:	bf00      	nop
    return;
 800d936:	e251      	b.n	800dddc <HAL_UART_IRQHandler+0x75c>
 800d938:	10000001 	.word	0x10000001
 800d93c:	04000120 	.word	0x04000120
 800d940:	0800ef41 	.word	0x0800ef41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d948:	2b01      	cmp	r3, #1
 800d94a:	f040 81e7 	bne.w	800dd1c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d94e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d952:	f003 0310 	and.w	r3, r3, #16
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 81e0 	beq.w	800dd1c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d960:	f003 0310 	and.w	r3, r3, #16
 800d964:	2b00      	cmp	r3, #0
 800d966:	f000 81d9 	beq.w	800dd1c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2210      	movs	r2, #16
 800d970:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d97c:	2b40      	cmp	r3, #64	; 0x40
 800d97e:	f040 8151 	bne.w	800dc24 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a96      	ldr	r2, [pc, #600]	; (800dbe4 <HAL_UART_IRQHandler+0x564>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d068      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a93      	ldr	r2, [pc, #588]	; (800dbe8 <HAL_UART_IRQHandler+0x568>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d061      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a91      	ldr	r2, [pc, #580]	; (800dbec <HAL_UART_IRQHandler+0x56c>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d05a      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a8e      	ldr	r2, [pc, #568]	; (800dbf0 <HAL_UART_IRQHandler+0x570>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d053      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a8c      	ldr	r2, [pc, #560]	; (800dbf4 <HAL_UART_IRQHandler+0x574>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d04c      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a89      	ldr	r2, [pc, #548]	; (800dbf8 <HAL_UART_IRQHandler+0x578>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d045      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a87      	ldr	r2, [pc, #540]	; (800dbfc <HAL_UART_IRQHandler+0x57c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d03e      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a84      	ldr	r2, [pc, #528]	; (800dc00 <HAL_UART_IRQHandler+0x580>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d037      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a82      	ldr	r2, [pc, #520]	; (800dc04 <HAL_UART_IRQHandler+0x584>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d030      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a7f      	ldr	r2, [pc, #508]	; (800dc08 <HAL_UART_IRQHandler+0x588>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d029      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a7d      	ldr	r2, [pc, #500]	; (800dc0c <HAL_UART_IRQHandler+0x58c>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d022      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a7a      	ldr	r2, [pc, #488]	; (800dc10 <HAL_UART_IRQHandler+0x590>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d01b      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a78      	ldr	r2, [pc, #480]	; (800dc14 <HAL_UART_IRQHandler+0x594>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d014      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a75      	ldr	r2, [pc, #468]	; (800dc18 <HAL_UART_IRQHandler+0x598>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d00d      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a73      	ldr	r2, [pc, #460]	; (800dc1c <HAL_UART_IRQHandler+0x59c>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d006      	beq.n	800da62 <HAL_UART_IRQHandler+0x3e2>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a70      	ldr	r2, [pc, #448]	; (800dc20 <HAL_UART_IRQHandler+0x5a0>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d106      	bne.n	800da70 <HAL_UART_IRQHandler+0x3f0>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	e005      	b.n	800da7c <HAL_UART_IRQHandler+0x3fc>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800da84:	2b00      	cmp	r3, #0
 800da86:	f000 81ab 	beq.w	800dde0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da94:	429a      	cmp	r2, r3
 800da96:	f080 81a3 	bcs.w	800dde0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800daa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daaa:	69db      	ldr	r3, [r3, #28]
 800daac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dab0:	f000 8087 	beq.w	800dbc2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dabc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dac0:	e853 3f00 	ldrex	r3, [r3]
 800dac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dacc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	461a      	mov	r2, r3
 800dada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dade:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dae2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800daea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800daee:	e841 2300 	strex	r3, r2, [r1]
 800daf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800daf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d1da      	bne.n	800dab4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	3308      	adds	r3, #8
 800db04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db08:	e853 3f00 	ldrex	r3, [r3]
 800db0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800db0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db10:	f023 0301 	bic.w	r3, r3, #1
 800db14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	3308      	adds	r3, #8
 800db1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800db22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800db26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800db2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db2e:	e841 2300 	strex	r3, r2, [r1]
 800db32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800db34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1e1      	bne.n	800dafe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	3308      	adds	r3, #8
 800db40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db44:	e853 3f00 	ldrex	r3, [r3]
 800db48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800db4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3308      	adds	r3, #8
 800db5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db66:	e841 2300 	strex	r3, r2, [r1]
 800db6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1e3      	bne.n	800db3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2220      	movs	r2, #32
 800db76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db88:	e853 3f00 	ldrex	r3, [r3]
 800db8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db90:	f023 0310 	bic.w	r3, r3, #16
 800db94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	461a      	mov	r2, r3
 800db9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dba2:	65bb      	str	r3, [r7, #88]	; 0x58
 800dba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbaa:	e841 2300 	strex	r3, r2, [r1]
 800dbae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dbb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1e4      	bne.n	800db80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7f7 fcb7 	bl	8005530 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	4619      	mov	r1, r3
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f91d 	bl	800de1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dbe2:	e0fd      	b.n	800dde0 <HAL_UART_IRQHandler+0x760>
 800dbe4:	40020010 	.word	0x40020010
 800dbe8:	40020028 	.word	0x40020028
 800dbec:	40020040 	.word	0x40020040
 800dbf0:	40020058 	.word	0x40020058
 800dbf4:	40020070 	.word	0x40020070
 800dbf8:	40020088 	.word	0x40020088
 800dbfc:	400200a0 	.word	0x400200a0
 800dc00:	400200b8 	.word	0x400200b8
 800dc04:	40020410 	.word	0x40020410
 800dc08:	40020428 	.word	0x40020428
 800dc0c:	40020440 	.word	0x40020440
 800dc10:	40020458 	.word	0x40020458
 800dc14:	40020470 	.word	0x40020470
 800dc18:	40020488 	.word	0x40020488
 800dc1c:	400204a0 	.word	0x400204a0
 800dc20:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f000 80cf 	beq.w	800dde4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dc46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f000 80ca 	beq.w	800dde4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	e853 3f00 	ldrex	r3, [r3]
 800dc5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dc72:	647b      	str	r3, [r7, #68]	; 0x44
 800dc74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc7a:	e841 2300 	strex	r3, r2, [r1]
 800dc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e4      	bne.n	800dc50 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	e853 3f00 	ldrex	r3, [r3]
 800dc94:	623b      	str	r3, [r7, #32]
   return(result);
 800dc96:	6a3a      	ldr	r2, [r7, #32]
 800dc98:	4b55      	ldr	r3, [pc, #340]	; (800ddf0 <HAL_UART_IRQHandler+0x770>)
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3308      	adds	r3, #8
 800dca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dcaa:	633a      	str	r2, [r7, #48]	; 0x30
 800dcac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcb2:	e841 2300 	strex	r3, r2, [r1]
 800dcb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1e3      	bne.n	800dc86 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2220      	movs	r2, #32
 800dcc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	e853 3f00 	ldrex	r3, [r3]
 800dcde:	60fb      	str	r3, [r7, #12]
   return(result);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f023 0310 	bic.w	r3, r3, #16
 800dce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	461a      	mov	r2, r3
 800dcf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dcf4:	61fb      	str	r3, [r7, #28]
 800dcf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf8:	69b9      	ldr	r1, [r7, #24]
 800dcfa:	69fa      	ldr	r2, [r7, #28]
 800dcfc:	e841 2300 	strex	r3, r2, [r1]
 800dd00:	617b      	str	r3, [r7, #20]
   return(result);
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1e4      	bne.n	800dcd2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd12:	4619      	mov	r1, r3
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f881 	bl	800de1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd1a:	e063      	b.n	800dde4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00e      	beq.n	800dd46 <HAL_UART_IRQHandler+0x6c6>
 800dd28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d008      	beq.n	800dd46 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dd3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f001 f93f 	bl	800efc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd44:	e051      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dd46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d014      	beq.n	800dd7c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dd52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d105      	bne.n	800dd6a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dd5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d008      	beq.n	800dd7c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d03a      	beq.n	800dde8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	4798      	blx	r3
    }
    return;
 800dd7a:	e035      	b.n	800dde8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d009      	beq.n	800dd9c <HAL_UART_IRQHandler+0x71c>
 800dd88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d003      	beq.n	800dd9c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f001 f8e9 	bl	800ef6c <UART_EndTransmit_IT>
    return;
 800dd9a:	e026      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dda0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d009      	beq.n	800ddbc <HAL_UART_IRQHandler+0x73c>
 800dda8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d003      	beq.n	800ddbc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f001 f918 	bl	800efea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddba:	e016      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ddbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d010      	beq.n	800ddea <HAL_UART_IRQHandler+0x76a>
 800ddc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	da0c      	bge.n	800ddea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f001 f900 	bl	800efd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddd6:	e008      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
      return;
 800ddd8:	bf00      	nop
 800ddda:	e006      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
    return;
 800dddc:	bf00      	nop
 800ddde:	e004      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
      return;
 800dde0:	bf00      	nop
 800dde2:	e002      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
      return;
 800dde4:	bf00      	nop
 800dde6:	e000      	b.n	800ddea <HAL_UART_IRQHandler+0x76a>
    return;
 800dde8:	bf00      	nop
  }
}
 800ddea:	37e8      	adds	r7, #232	; 0xe8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	effffffe 	.word	0xeffffffe

0800ddf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ddfc:	bf00      	nop
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de10:	bf00      	nop
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800de28:	bf00      	nop
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de38:	b092      	sub	sp, #72	; 0x48
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800de3e:	2300      	movs	r3, #0
 800de40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	689a      	ldr	r2, [r3, #8]
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	431a      	orrs	r2, r3
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	695b      	ldr	r3, [r3, #20]
 800de52:	431a      	orrs	r2, r3
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	69db      	ldr	r3, [r3, #28]
 800de58:	4313      	orrs	r3, r2
 800de5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	4bbe      	ldr	r3, [pc, #760]	; (800e15c <UART_SetConfig+0x328>)
 800de64:	4013      	ands	r3, r2
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	6812      	ldr	r2, [r2, #0]
 800de6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de6c:	430b      	orrs	r3, r1
 800de6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	68da      	ldr	r2, [r3, #12]
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	430a      	orrs	r2, r1
 800de84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4ab3      	ldr	r2, [pc, #716]	; (800e160 <UART_SetConfig+0x32c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d004      	beq.n	800dea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de9c:	4313      	orrs	r3, r2
 800de9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	689a      	ldr	r2, [r3, #8]
 800dea6:	4baf      	ldr	r3, [pc, #700]	; (800e164 <UART_SetConfig+0x330>)
 800dea8:	4013      	ands	r3, r2
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	6812      	ldr	r2, [r2, #0]
 800deae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800deb0:	430b      	orrs	r3, r1
 800deb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deba:	f023 010f 	bic.w	r1, r3, #15
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4aa6      	ldr	r2, [pc, #664]	; (800e168 <UART_SetConfig+0x334>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d177      	bne.n	800dfc4 <UART_SetConfig+0x190>
 800ded4:	4ba5      	ldr	r3, [pc, #660]	; (800e16c <UART_SetConfig+0x338>)
 800ded6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dedc:	2b28      	cmp	r3, #40	; 0x28
 800dede:	d86d      	bhi.n	800dfbc <UART_SetConfig+0x188>
 800dee0:	a201      	add	r2, pc, #4	; (adr r2, 800dee8 <UART_SetConfig+0xb4>)
 800dee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee6:	bf00      	nop
 800dee8:	0800df8d 	.word	0x0800df8d
 800deec:	0800dfbd 	.word	0x0800dfbd
 800def0:	0800dfbd 	.word	0x0800dfbd
 800def4:	0800dfbd 	.word	0x0800dfbd
 800def8:	0800dfbd 	.word	0x0800dfbd
 800defc:	0800dfbd 	.word	0x0800dfbd
 800df00:	0800dfbd 	.word	0x0800dfbd
 800df04:	0800dfbd 	.word	0x0800dfbd
 800df08:	0800df95 	.word	0x0800df95
 800df0c:	0800dfbd 	.word	0x0800dfbd
 800df10:	0800dfbd 	.word	0x0800dfbd
 800df14:	0800dfbd 	.word	0x0800dfbd
 800df18:	0800dfbd 	.word	0x0800dfbd
 800df1c:	0800dfbd 	.word	0x0800dfbd
 800df20:	0800dfbd 	.word	0x0800dfbd
 800df24:	0800dfbd 	.word	0x0800dfbd
 800df28:	0800df9d 	.word	0x0800df9d
 800df2c:	0800dfbd 	.word	0x0800dfbd
 800df30:	0800dfbd 	.word	0x0800dfbd
 800df34:	0800dfbd 	.word	0x0800dfbd
 800df38:	0800dfbd 	.word	0x0800dfbd
 800df3c:	0800dfbd 	.word	0x0800dfbd
 800df40:	0800dfbd 	.word	0x0800dfbd
 800df44:	0800dfbd 	.word	0x0800dfbd
 800df48:	0800dfa5 	.word	0x0800dfa5
 800df4c:	0800dfbd 	.word	0x0800dfbd
 800df50:	0800dfbd 	.word	0x0800dfbd
 800df54:	0800dfbd 	.word	0x0800dfbd
 800df58:	0800dfbd 	.word	0x0800dfbd
 800df5c:	0800dfbd 	.word	0x0800dfbd
 800df60:	0800dfbd 	.word	0x0800dfbd
 800df64:	0800dfbd 	.word	0x0800dfbd
 800df68:	0800dfad 	.word	0x0800dfad
 800df6c:	0800dfbd 	.word	0x0800dfbd
 800df70:	0800dfbd 	.word	0x0800dfbd
 800df74:	0800dfbd 	.word	0x0800dfbd
 800df78:	0800dfbd 	.word	0x0800dfbd
 800df7c:	0800dfbd 	.word	0x0800dfbd
 800df80:	0800dfbd 	.word	0x0800dfbd
 800df84:	0800dfbd 	.word	0x0800dfbd
 800df88:	0800dfb5 	.word	0x0800dfb5
 800df8c:	2301      	movs	r3, #1
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e326      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800df94:	2304      	movs	r3, #4
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e322      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800df9c:	2308      	movs	r3, #8
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e31e      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800dfa4:	2310      	movs	r3, #16
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e31a      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800dfac:	2320      	movs	r3, #32
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e316      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800dfb4:	2340      	movs	r3, #64	; 0x40
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfba:	e312      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800dfbc:	2380      	movs	r3, #128	; 0x80
 800dfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc2:	e30e      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a69      	ldr	r2, [pc, #420]	; (800e170 <UART_SetConfig+0x33c>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d130      	bne.n	800e030 <UART_SetConfig+0x1fc>
 800dfce:	4b67      	ldr	r3, [pc, #412]	; (800e16c <UART_SetConfig+0x338>)
 800dfd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfd2:	f003 0307 	and.w	r3, r3, #7
 800dfd6:	2b05      	cmp	r3, #5
 800dfd8:	d826      	bhi.n	800e028 <UART_SetConfig+0x1f4>
 800dfda:	a201      	add	r2, pc, #4	; (adr r2, 800dfe0 <UART_SetConfig+0x1ac>)
 800dfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe0:	0800dff9 	.word	0x0800dff9
 800dfe4:	0800e001 	.word	0x0800e001
 800dfe8:	0800e009 	.word	0x0800e009
 800dfec:	0800e011 	.word	0x0800e011
 800dff0:	0800e019 	.word	0x0800e019
 800dff4:	0800e021 	.word	0x0800e021
 800dff8:	2300      	movs	r3, #0
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e2f0      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e000:	2304      	movs	r3, #4
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e2ec      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e008:	2308      	movs	r3, #8
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e2e8      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e010:	2310      	movs	r3, #16
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e2e4      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e018:	2320      	movs	r3, #32
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01e:	e2e0      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e020:	2340      	movs	r3, #64	; 0x40
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e026:	e2dc      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e028:	2380      	movs	r3, #128	; 0x80
 800e02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02e:	e2d8      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a4f      	ldr	r2, [pc, #316]	; (800e174 <UART_SetConfig+0x340>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d130      	bne.n	800e09c <UART_SetConfig+0x268>
 800e03a:	4b4c      	ldr	r3, [pc, #304]	; (800e16c <UART_SetConfig+0x338>)
 800e03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e03e:	f003 0307 	and.w	r3, r3, #7
 800e042:	2b05      	cmp	r3, #5
 800e044:	d826      	bhi.n	800e094 <UART_SetConfig+0x260>
 800e046:	a201      	add	r2, pc, #4	; (adr r2, 800e04c <UART_SetConfig+0x218>)
 800e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04c:	0800e065 	.word	0x0800e065
 800e050:	0800e06d 	.word	0x0800e06d
 800e054:	0800e075 	.word	0x0800e075
 800e058:	0800e07d 	.word	0x0800e07d
 800e05c:	0800e085 	.word	0x0800e085
 800e060:	0800e08d 	.word	0x0800e08d
 800e064:	2300      	movs	r3, #0
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e2ba      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e06c:	2304      	movs	r3, #4
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e2b6      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e074:	2308      	movs	r3, #8
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e2b2      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e07c:	2310      	movs	r3, #16
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e2ae      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e084:	2320      	movs	r3, #32
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e2aa      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e08c:	2340      	movs	r3, #64	; 0x40
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e092:	e2a6      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e094:	2380      	movs	r3, #128	; 0x80
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09a:	e2a2      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a35      	ldr	r2, [pc, #212]	; (800e178 <UART_SetConfig+0x344>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d130      	bne.n	800e108 <UART_SetConfig+0x2d4>
 800e0a6:	4b31      	ldr	r3, [pc, #196]	; (800e16c <UART_SetConfig+0x338>)
 800e0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0aa:	f003 0307 	and.w	r3, r3, #7
 800e0ae:	2b05      	cmp	r3, #5
 800e0b0:	d826      	bhi.n	800e100 <UART_SetConfig+0x2cc>
 800e0b2:	a201      	add	r2, pc, #4	; (adr r2, 800e0b8 <UART_SetConfig+0x284>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0d1 	.word	0x0800e0d1
 800e0bc:	0800e0d9 	.word	0x0800e0d9
 800e0c0:	0800e0e1 	.word	0x0800e0e1
 800e0c4:	0800e0e9 	.word	0x0800e0e9
 800e0c8:	0800e0f1 	.word	0x0800e0f1
 800e0cc:	0800e0f9 	.word	0x0800e0f9
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d6:	e284      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e0d8:	2304      	movs	r3, #4
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0de:	e280      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e0e0:	2308      	movs	r3, #8
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e27c      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e0e8:	2310      	movs	r3, #16
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e278      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e0f0:	2320      	movs	r3, #32
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e274      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e0f8:	2340      	movs	r3, #64	; 0x40
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e270      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e100:	2380      	movs	r3, #128	; 0x80
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e26c      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a1b      	ldr	r2, [pc, #108]	; (800e17c <UART_SetConfig+0x348>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d142      	bne.n	800e198 <UART_SetConfig+0x364>
 800e112:	4b16      	ldr	r3, [pc, #88]	; (800e16c <UART_SetConfig+0x338>)
 800e114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e116:	f003 0307 	and.w	r3, r3, #7
 800e11a:	2b05      	cmp	r3, #5
 800e11c:	d838      	bhi.n	800e190 <UART_SetConfig+0x35c>
 800e11e:	a201      	add	r2, pc, #4	; (adr r2, 800e124 <UART_SetConfig+0x2f0>)
 800e120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e124:	0800e13d 	.word	0x0800e13d
 800e128:	0800e145 	.word	0x0800e145
 800e12c:	0800e14d 	.word	0x0800e14d
 800e130:	0800e155 	.word	0x0800e155
 800e134:	0800e181 	.word	0x0800e181
 800e138:	0800e189 	.word	0x0800e189
 800e13c:	2300      	movs	r3, #0
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e142:	e24e      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e144:	2304      	movs	r3, #4
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14a:	e24a      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e14c:	2308      	movs	r3, #8
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e246      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e154:	2310      	movs	r3, #16
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e242      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e15c:	cfff69f3 	.word	0xcfff69f3
 800e160:	58000c00 	.word	0x58000c00
 800e164:	11fff4ff 	.word	0x11fff4ff
 800e168:	40011000 	.word	0x40011000
 800e16c:	58024400 	.word	0x58024400
 800e170:	40004400 	.word	0x40004400
 800e174:	40004800 	.word	0x40004800
 800e178:	40004c00 	.word	0x40004c00
 800e17c:	40005000 	.word	0x40005000
 800e180:	2320      	movs	r3, #32
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e22c      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e188:	2340      	movs	r3, #64	; 0x40
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e228      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e190:	2380      	movs	r3, #128	; 0x80
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e224      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4ab1      	ldr	r2, [pc, #708]	; (800e464 <UART_SetConfig+0x630>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d176      	bne.n	800e290 <UART_SetConfig+0x45c>
 800e1a2:	4bb1      	ldr	r3, [pc, #708]	; (800e468 <UART_SetConfig+0x634>)
 800e1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1aa:	2b28      	cmp	r3, #40	; 0x28
 800e1ac:	d86c      	bhi.n	800e288 <UART_SetConfig+0x454>
 800e1ae:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <UART_SetConfig+0x380>)
 800e1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b4:	0800e259 	.word	0x0800e259
 800e1b8:	0800e289 	.word	0x0800e289
 800e1bc:	0800e289 	.word	0x0800e289
 800e1c0:	0800e289 	.word	0x0800e289
 800e1c4:	0800e289 	.word	0x0800e289
 800e1c8:	0800e289 	.word	0x0800e289
 800e1cc:	0800e289 	.word	0x0800e289
 800e1d0:	0800e289 	.word	0x0800e289
 800e1d4:	0800e261 	.word	0x0800e261
 800e1d8:	0800e289 	.word	0x0800e289
 800e1dc:	0800e289 	.word	0x0800e289
 800e1e0:	0800e289 	.word	0x0800e289
 800e1e4:	0800e289 	.word	0x0800e289
 800e1e8:	0800e289 	.word	0x0800e289
 800e1ec:	0800e289 	.word	0x0800e289
 800e1f0:	0800e289 	.word	0x0800e289
 800e1f4:	0800e269 	.word	0x0800e269
 800e1f8:	0800e289 	.word	0x0800e289
 800e1fc:	0800e289 	.word	0x0800e289
 800e200:	0800e289 	.word	0x0800e289
 800e204:	0800e289 	.word	0x0800e289
 800e208:	0800e289 	.word	0x0800e289
 800e20c:	0800e289 	.word	0x0800e289
 800e210:	0800e289 	.word	0x0800e289
 800e214:	0800e271 	.word	0x0800e271
 800e218:	0800e289 	.word	0x0800e289
 800e21c:	0800e289 	.word	0x0800e289
 800e220:	0800e289 	.word	0x0800e289
 800e224:	0800e289 	.word	0x0800e289
 800e228:	0800e289 	.word	0x0800e289
 800e22c:	0800e289 	.word	0x0800e289
 800e230:	0800e289 	.word	0x0800e289
 800e234:	0800e279 	.word	0x0800e279
 800e238:	0800e289 	.word	0x0800e289
 800e23c:	0800e289 	.word	0x0800e289
 800e240:	0800e289 	.word	0x0800e289
 800e244:	0800e289 	.word	0x0800e289
 800e248:	0800e289 	.word	0x0800e289
 800e24c:	0800e289 	.word	0x0800e289
 800e250:	0800e289 	.word	0x0800e289
 800e254:	0800e281 	.word	0x0800e281
 800e258:	2301      	movs	r3, #1
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e1c0      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e260:	2304      	movs	r3, #4
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e1bc      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e268:	2308      	movs	r3, #8
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e1b8      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e270:	2310      	movs	r3, #16
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e1b4      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e278:	2320      	movs	r3, #32
 800e27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27e:	e1b0      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e280:	2340      	movs	r3, #64	; 0x40
 800e282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e286:	e1ac      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e288:	2380      	movs	r3, #128	; 0x80
 800e28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28e:	e1a8      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a75      	ldr	r2, [pc, #468]	; (800e46c <UART_SetConfig+0x638>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d130      	bne.n	800e2fc <UART_SetConfig+0x4c8>
 800e29a:	4b73      	ldr	r3, [pc, #460]	; (800e468 <UART_SetConfig+0x634>)
 800e29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e29e:	f003 0307 	and.w	r3, r3, #7
 800e2a2:	2b05      	cmp	r3, #5
 800e2a4:	d826      	bhi.n	800e2f4 <UART_SetConfig+0x4c0>
 800e2a6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ac <UART_SetConfig+0x478>)
 800e2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ac:	0800e2c5 	.word	0x0800e2c5
 800e2b0:	0800e2cd 	.word	0x0800e2cd
 800e2b4:	0800e2d5 	.word	0x0800e2d5
 800e2b8:	0800e2dd 	.word	0x0800e2dd
 800e2bc:	0800e2e5 	.word	0x0800e2e5
 800e2c0:	0800e2ed 	.word	0x0800e2ed
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ca:	e18a      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e2cc:	2304      	movs	r3, #4
 800e2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d2:	e186      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e2d4:	2308      	movs	r3, #8
 800e2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2da:	e182      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e2dc:	2310      	movs	r3, #16
 800e2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e2:	e17e      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e2e4:	2320      	movs	r3, #32
 800e2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ea:	e17a      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e176      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e2f4:	2380      	movs	r3, #128	; 0x80
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e172      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a5b      	ldr	r2, [pc, #364]	; (800e470 <UART_SetConfig+0x63c>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d130      	bne.n	800e368 <UART_SetConfig+0x534>
 800e306:	4b58      	ldr	r3, [pc, #352]	; (800e468 <UART_SetConfig+0x634>)
 800e308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30a:	f003 0307 	and.w	r3, r3, #7
 800e30e:	2b05      	cmp	r3, #5
 800e310:	d826      	bhi.n	800e360 <UART_SetConfig+0x52c>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <UART_SetConfig+0x4e4>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e331 	.word	0x0800e331
 800e31c:	0800e339 	.word	0x0800e339
 800e320:	0800e341 	.word	0x0800e341
 800e324:	0800e349 	.word	0x0800e349
 800e328:	0800e351 	.word	0x0800e351
 800e32c:	0800e359 	.word	0x0800e359
 800e330:	2300      	movs	r3, #0
 800e332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e336:	e154      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e338:	2304      	movs	r3, #4
 800e33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33e:	e150      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e340:	2308      	movs	r3, #8
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e14c      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e348:	2310      	movs	r3, #16
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e148      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e350:	2320      	movs	r3, #32
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e144      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e358:	2340      	movs	r3, #64	; 0x40
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e140      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e360:	2380      	movs	r3, #128	; 0x80
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e13c      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a41      	ldr	r2, [pc, #260]	; (800e474 <UART_SetConfig+0x640>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	f040 8082 	bne.w	800e478 <UART_SetConfig+0x644>
 800e374:	4b3c      	ldr	r3, [pc, #240]	; (800e468 <UART_SetConfig+0x634>)
 800e376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e37c:	2b28      	cmp	r3, #40	; 0x28
 800e37e:	d86d      	bhi.n	800e45c <UART_SetConfig+0x628>
 800e380:	a201      	add	r2, pc, #4	; (adr r2, 800e388 <UART_SetConfig+0x554>)
 800e382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e386:	bf00      	nop
 800e388:	0800e42d 	.word	0x0800e42d
 800e38c:	0800e45d 	.word	0x0800e45d
 800e390:	0800e45d 	.word	0x0800e45d
 800e394:	0800e45d 	.word	0x0800e45d
 800e398:	0800e45d 	.word	0x0800e45d
 800e39c:	0800e45d 	.word	0x0800e45d
 800e3a0:	0800e45d 	.word	0x0800e45d
 800e3a4:	0800e45d 	.word	0x0800e45d
 800e3a8:	0800e435 	.word	0x0800e435
 800e3ac:	0800e45d 	.word	0x0800e45d
 800e3b0:	0800e45d 	.word	0x0800e45d
 800e3b4:	0800e45d 	.word	0x0800e45d
 800e3b8:	0800e45d 	.word	0x0800e45d
 800e3bc:	0800e45d 	.word	0x0800e45d
 800e3c0:	0800e45d 	.word	0x0800e45d
 800e3c4:	0800e45d 	.word	0x0800e45d
 800e3c8:	0800e43d 	.word	0x0800e43d
 800e3cc:	0800e45d 	.word	0x0800e45d
 800e3d0:	0800e45d 	.word	0x0800e45d
 800e3d4:	0800e45d 	.word	0x0800e45d
 800e3d8:	0800e45d 	.word	0x0800e45d
 800e3dc:	0800e45d 	.word	0x0800e45d
 800e3e0:	0800e45d 	.word	0x0800e45d
 800e3e4:	0800e45d 	.word	0x0800e45d
 800e3e8:	0800e445 	.word	0x0800e445
 800e3ec:	0800e45d 	.word	0x0800e45d
 800e3f0:	0800e45d 	.word	0x0800e45d
 800e3f4:	0800e45d 	.word	0x0800e45d
 800e3f8:	0800e45d 	.word	0x0800e45d
 800e3fc:	0800e45d 	.word	0x0800e45d
 800e400:	0800e45d 	.word	0x0800e45d
 800e404:	0800e45d 	.word	0x0800e45d
 800e408:	0800e44d 	.word	0x0800e44d
 800e40c:	0800e45d 	.word	0x0800e45d
 800e410:	0800e45d 	.word	0x0800e45d
 800e414:	0800e45d 	.word	0x0800e45d
 800e418:	0800e45d 	.word	0x0800e45d
 800e41c:	0800e45d 	.word	0x0800e45d
 800e420:	0800e45d 	.word	0x0800e45d
 800e424:	0800e45d 	.word	0x0800e45d
 800e428:	0800e455 	.word	0x0800e455
 800e42c:	2301      	movs	r3, #1
 800e42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e432:	e0d6      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e434:	2304      	movs	r3, #4
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43a:	e0d2      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e43c:	2308      	movs	r3, #8
 800e43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e442:	e0ce      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e444:	2310      	movs	r3, #16
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44a:	e0ca      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e44c:	2320      	movs	r3, #32
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e452:	e0c6      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e454:	2340      	movs	r3, #64	; 0x40
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45a:	e0c2      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e45c:	2380      	movs	r3, #128	; 0x80
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e462:	e0be      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e464:	40011400 	.word	0x40011400
 800e468:	58024400 	.word	0x58024400
 800e46c:	40007800 	.word	0x40007800
 800e470:	40007c00 	.word	0x40007c00
 800e474:	40011800 	.word	0x40011800
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4aad      	ldr	r2, [pc, #692]	; (800e734 <UART_SetConfig+0x900>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d176      	bne.n	800e570 <UART_SetConfig+0x73c>
 800e482:	4bad      	ldr	r3, [pc, #692]	; (800e738 <UART_SetConfig+0x904>)
 800e484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e48a:	2b28      	cmp	r3, #40	; 0x28
 800e48c:	d86c      	bhi.n	800e568 <UART_SetConfig+0x734>
 800e48e:	a201      	add	r2, pc, #4	; (adr r2, 800e494 <UART_SetConfig+0x660>)
 800e490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e494:	0800e539 	.word	0x0800e539
 800e498:	0800e569 	.word	0x0800e569
 800e49c:	0800e569 	.word	0x0800e569
 800e4a0:	0800e569 	.word	0x0800e569
 800e4a4:	0800e569 	.word	0x0800e569
 800e4a8:	0800e569 	.word	0x0800e569
 800e4ac:	0800e569 	.word	0x0800e569
 800e4b0:	0800e569 	.word	0x0800e569
 800e4b4:	0800e541 	.word	0x0800e541
 800e4b8:	0800e569 	.word	0x0800e569
 800e4bc:	0800e569 	.word	0x0800e569
 800e4c0:	0800e569 	.word	0x0800e569
 800e4c4:	0800e569 	.word	0x0800e569
 800e4c8:	0800e569 	.word	0x0800e569
 800e4cc:	0800e569 	.word	0x0800e569
 800e4d0:	0800e569 	.word	0x0800e569
 800e4d4:	0800e549 	.word	0x0800e549
 800e4d8:	0800e569 	.word	0x0800e569
 800e4dc:	0800e569 	.word	0x0800e569
 800e4e0:	0800e569 	.word	0x0800e569
 800e4e4:	0800e569 	.word	0x0800e569
 800e4e8:	0800e569 	.word	0x0800e569
 800e4ec:	0800e569 	.word	0x0800e569
 800e4f0:	0800e569 	.word	0x0800e569
 800e4f4:	0800e551 	.word	0x0800e551
 800e4f8:	0800e569 	.word	0x0800e569
 800e4fc:	0800e569 	.word	0x0800e569
 800e500:	0800e569 	.word	0x0800e569
 800e504:	0800e569 	.word	0x0800e569
 800e508:	0800e569 	.word	0x0800e569
 800e50c:	0800e569 	.word	0x0800e569
 800e510:	0800e569 	.word	0x0800e569
 800e514:	0800e559 	.word	0x0800e559
 800e518:	0800e569 	.word	0x0800e569
 800e51c:	0800e569 	.word	0x0800e569
 800e520:	0800e569 	.word	0x0800e569
 800e524:	0800e569 	.word	0x0800e569
 800e528:	0800e569 	.word	0x0800e569
 800e52c:	0800e569 	.word	0x0800e569
 800e530:	0800e569 	.word	0x0800e569
 800e534:	0800e561 	.word	0x0800e561
 800e538:	2301      	movs	r3, #1
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53e:	e050      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e540:	2304      	movs	r3, #4
 800e542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e546:	e04c      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e548:	2308      	movs	r3, #8
 800e54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54e:	e048      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e550:	2310      	movs	r3, #16
 800e552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e556:	e044      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e558:	2320      	movs	r3, #32
 800e55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55e:	e040      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e560:	2340      	movs	r3, #64	; 0x40
 800e562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e566:	e03c      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e568:	2380      	movs	r3, #128	; 0x80
 800e56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56e:	e038      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a71      	ldr	r2, [pc, #452]	; (800e73c <UART_SetConfig+0x908>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d130      	bne.n	800e5dc <UART_SetConfig+0x7a8>
 800e57a:	4b6f      	ldr	r3, [pc, #444]	; (800e738 <UART_SetConfig+0x904>)
 800e57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e57e:	f003 0307 	and.w	r3, r3, #7
 800e582:	2b05      	cmp	r3, #5
 800e584:	d826      	bhi.n	800e5d4 <UART_SetConfig+0x7a0>
 800e586:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <UART_SetConfig+0x758>)
 800e588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58c:	0800e5a5 	.word	0x0800e5a5
 800e590:	0800e5ad 	.word	0x0800e5ad
 800e594:	0800e5b5 	.word	0x0800e5b5
 800e598:	0800e5bd 	.word	0x0800e5bd
 800e59c:	0800e5c5 	.word	0x0800e5c5
 800e5a0:	0800e5cd 	.word	0x0800e5cd
 800e5a4:	2302      	movs	r3, #2
 800e5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5aa:	e01a      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e5ac:	2304      	movs	r3, #4
 800e5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b2:	e016      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e5b4:	2308      	movs	r3, #8
 800e5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ba:	e012      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e5bc:	2310      	movs	r3, #16
 800e5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c2:	e00e      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e5c4:	2320      	movs	r3, #32
 800e5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ca:	e00a      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e5cc:	2340      	movs	r3, #64	; 0x40
 800e5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d2:	e006      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e5d4:	2380      	movs	r3, #128	; 0x80
 800e5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5da:	e002      	b.n	800e5e2 <UART_SetConfig+0x7ae>
 800e5dc:	2380      	movs	r3, #128	; 0x80
 800e5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a55      	ldr	r2, [pc, #340]	; (800e73c <UART_SetConfig+0x908>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	f040 80f8 	bne.w	800e7de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e5ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e5f2:	2b20      	cmp	r3, #32
 800e5f4:	dc46      	bgt.n	800e684 <UART_SetConfig+0x850>
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	db75      	blt.n	800e6e6 <UART_SetConfig+0x8b2>
 800e5fa:	3b02      	subs	r3, #2
 800e5fc:	2b1e      	cmp	r3, #30
 800e5fe:	d872      	bhi.n	800e6e6 <UART_SetConfig+0x8b2>
 800e600:	a201      	add	r2, pc, #4	; (adr r2, 800e608 <UART_SetConfig+0x7d4>)
 800e602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e606:	bf00      	nop
 800e608:	0800e68b 	.word	0x0800e68b
 800e60c:	0800e6e7 	.word	0x0800e6e7
 800e610:	0800e693 	.word	0x0800e693
 800e614:	0800e6e7 	.word	0x0800e6e7
 800e618:	0800e6e7 	.word	0x0800e6e7
 800e61c:	0800e6e7 	.word	0x0800e6e7
 800e620:	0800e6a3 	.word	0x0800e6a3
 800e624:	0800e6e7 	.word	0x0800e6e7
 800e628:	0800e6e7 	.word	0x0800e6e7
 800e62c:	0800e6e7 	.word	0x0800e6e7
 800e630:	0800e6e7 	.word	0x0800e6e7
 800e634:	0800e6e7 	.word	0x0800e6e7
 800e638:	0800e6e7 	.word	0x0800e6e7
 800e63c:	0800e6e7 	.word	0x0800e6e7
 800e640:	0800e6b3 	.word	0x0800e6b3
 800e644:	0800e6e7 	.word	0x0800e6e7
 800e648:	0800e6e7 	.word	0x0800e6e7
 800e64c:	0800e6e7 	.word	0x0800e6e7
 800e650:	0800e6e7 	.word	0x0800e6e7
 800e654:	0800e6e7 	.word	0x0800e6e7
 800e658:	0800e6e7 	.word	0x0800e6e7
 800e65c:	0800e6e7 	.word	0x0800e6e7
 800e660:	0800e6e7 	.word	0x0800e6e7
 800e664:	0800e6e7 	.word	0x0800e6e7
 800e668:	0800e6e7 	.word	0x0800e6e7
 800e66c:	0800e6e7 	.word	0x0800e6e7
 800e670:	0800e6e7 	.word	0x0800e6e7
 800e674:	0800e6e7 	.word	0x0800e6e7
 800e678:	0800e6e7 	.word	0x0800e6e7
 800e67c:	0800e6e7 	.word	0x0800e6e7
 800e680:	0800e6d9 	.word	0x0800e6d9
 800e684:	2b40      	cmp	r3, #64	; 0x40
 800e686:	d02a      	beq.n	800e6de <UART_SetConfig+0x8aa>
 800e688:	e02d      	b.n	800e6e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e68a:	f7fe f913 	bl	800c8b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e68e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e690:	e02f      	b.n	800e6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe f922 	bl	800c8e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6a0:	e027      	b.n	800e6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6a2:	f107 0318 	add.w	r3, r7, #24
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe fa6e 	bl	800cb88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6b0:	e01f      	b.n	800e6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6b2:	4b21      	ldr	r3, [pc, #132]	; (800e738 <UART_SetConfig+0x904>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f003 0320 	and.w	r3, r3, #32
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d009      	beq.n	800e6d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6be:	4b1e      	ldr	r3, [pc, #120]	; (800e738 <UART_SetConfig+0x904>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	08db      	lsrs	r3, r3, #3
 800e6c4:	f003 0303 	and.w	r3, r3, #3
 800e6c8:	4a1d      	ldr	r2, [pc, #116]	; (800e740 <UART_SetConfig+0x90c>)
 800e6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e6d0:	e00f      	b.n	800e6f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e6d2:	4b1b      	ldr	r3, [pc, #108]	; (800e740 <UART_SetConfig+0x90c>)
 800e6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6d6:	e00c      	b.n	800e6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e6d8:	4b1a      	ldr	r3, [pc, #104]	; (800e744 <UART_SetConfig+0x910>)
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6dc:	e009      	b.n	800e6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6e4:	e005      	b.n	800e6f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e6f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f000 81ee 	beq.w	800ead6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fe:	4a12      	ldr	r2, [pc, #72]	; (800e748 <UART_SetConfig+0x914>)
 800e700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e704:	461a      	mov	r2, r3
 800e706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e708:	fbb3 f3f2 	udiv	r3, r3, r2
 800e70c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	4613      	mov	r3, r2
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	4413      	add	r3, r2
 800e718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d305      	bcc.n	800e72a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e726:	429a      	cmp	r2, r3
 800e728:	d910      	bls.n	800e74c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e72a:	2301      	movs	r3, #1
 800e72c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e730:	e1d1      	b.n	800ead6 <UART_SetConfig+0xca2>
 800e732:	bf00      	nop
 800e734:	40011c00 	.word	0x40011c00
 800e738:	58024400 	.word	0x58024400
 800e73c:	58000c00 	.word	0x58000c00
 800e740:	03d09000 	.word	0x03d09000
 800e744:	003d0900 	.word	0x003d0900
 800e748:	08010968 	.word	0x08010968
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e74e:	2200      	movs	r2, #0
 800e750:	60bb      	str	r3, [r7, #8]
 800e752:	60fa      	str	r2, [r7, #12]
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	4ac0      	ldr	r2, [pc, #768]	; (800ea5c <UART_SetConfig+0xc28>)
 800e75a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e75e:	b29b      	uxth	r3, r3
 800e760:	2200      	movs	r2, #0
 800e762:	603b      	str	r3, [r7, #0]
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e76a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e76e:	f7f1 fe0f 	bl	8000390 <__aeabi_uldivmod>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	4610      	mov	r0, r2
 800e778:	4619      	mov	r1, r3
 800e77a:	f04f 0200 	mov.w	r2, #0
 800e77e:	f04f 0300 	mov.w	r3, #0
 800e782:	020b      	lsls	r3, r1, #8
 800e784:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e788:	0202      	lsls	r2, r0, #8
 800e78a:	6979      	ldr	r1, [r7, #20]
 800e78c:	6849      	ldr	r1, [r1, #4]
 800e78e:	0849      	lsrs	r1, r1, #1
 800e790:	2000      	movs	r0, #0
 800e792:	460c      	mov	r4, r1
 800e794:	4605      	mov	r5, r0
 800e796:	eb12 0804 	adds.w	r8, r2, r4
 800e79a:	eb43 0905 	adc.w	r9, r3, r5
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	469a      	mov	sl, r3
 800e7a6:	4693      	mov	fp, r2
 800e7a8:	4652      	mov	r2, sl
 800e7aa:	465b      	mov	r3, fp
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	4649      	mov	r1, r9
 800e7b0:	f7f1 fdee 	bl	8000390 <__aeabi_uldivmod>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7c2:	d308      	bcc.n	800e7d6 <UART_SetConfig+0x9a2>
 800e7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7ca:	d204      	bcs.n	800e7d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7d2:	60da      	str	r2, [r3, #12]
 800e7d4:	e17f      	b.n	800ead6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7dc:	e17b      	b.n	800ead6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	69db      	ldr	r3, [r3, #28]
 800e7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7e6:	f040 80bd 	bne.w	800e964 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e7ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7ee:	2b20      	cmp	r3, #32
 800e7f0:	dc48      	bgt.n	800e884 <UART_SetConfig+0xa50>
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	db7b      	blt.n	800e8ee <UART_SetConfig+0xaba>
 800e7f6:	2b20      	cmp	r3, #32
 800e7f8:	d879      	bhi.n	800e8ee <UART_SetConfig+0xaba>
 800e7fa:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <UART_SetConfig+0x9cc>)
 800e7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e800:	0800e88b 	.word	0x0800e88b
 800e804:	0800e893 	.word	0x0800e893
 800e808:	0800e8ef 	.word	0x0800e8ef
 800e80c:	0800e8ef 	.word	0x0800e8ef
 800e810:	0800e89b 	.word	0x0800e89b
 800e814:	0800e8ef 	.word	0x0800e8ef
 800e818:	0800e8ef 	.word	0x0800e8ef
 800e81c:	0800e8ef 	.word	0x0800e8ef
 800e820:	0800e8ab 	.word	0x0800e8ab
 800e824:	0800e8ef 	.word	0x0800e8ef
 800e828:	0800e8ef 	.word	0x0800e8ef
 800e82c:	0800e8ef 	.word	0x0800e8ef
 800e830:	0800e8ef 	.word	0x0800e8ef
 800e834:	0800e8ef 	.word	0x0800e8ef
 800e838:	0800e8ef 	.word	0x0800e8ef
 800e83c:	0800e8ef 	.word	0x0800e8ef
 800e840:	0800e8bb 	.word	0x0800e8bb
 800e844:	0800e8ef 	.word	0x0800e8ef
 800e848:	0800e8ef 	.word	0x0800e8ef
 800e84c:	0800e8ef 	.word	0x0800e8ef
 800e850:	0800e8ef 	.word	0x0800e8ef
 800e854:	0800e8ef 	.word	0x0800e8ef
 800e858:	0800e8ef 	.word	0x0800e8ef
 800e85c:	0800e8ef 	.word	0x0800e8ef
 800e860:	0800e8ef 	.word	0x0800e8ef
 800e864:	0800e8ef 	.word	0x0800e8ef
 800e868:	0800e8ef 	.word	0x0800e8ef
 800e86c:	0800e8ef 	.word	0x0800e8ef
 800e870:	0800e8ef 	.word	0x0800e8ef
 800e874:	0800e8ef 	.word	0x0800e8ef
 800e878:	0800e8ef 	.word	0x0800e8ef
 800e87c:	0800e8ef 	.word	0x0800e8ef
 800e880:	0800e8e1 	.word	0x0800e8e1
 800e884:	2b40      	cmp	r3, #64	; 0x40
 800e886:	d02e      	beq.n	800e8e6 <UART_SetConfig+0xab2>
 800e888:	e031      	b.n	800e8ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e88a:	f7fc fe29 	bl	800b4e0 <HAL_RCC_GetPCLK1Freq>
 800e88e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e890:	e033      	b.n	800e8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e892:	f7fc fe3b 	bl	800b50c <HAL_RCC_GetPCLK2Freq>
 800e896:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e898:	e02f      	b.n	800e8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fe f81e 	bl	800c8e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a8:	e027      	b.n	800e8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8aa:	f107 0318 	add.w	r3, r7, #24
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fe f96a 	bl	800cb88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8b8:	e01f      	b.n	800e8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8ba:	4b69      	ldr	r3, [pc, #420]	; (800ea60 <UART_SetConfig+0xc2c>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f003 0320 	and.w	r3, r3, #32
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d009      	beq.n	800e8da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8c6:	4b66      	ldr	r3, [pc, #408]	; (800ea60 <UART_SetConfig+0xc2c>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	08db      	lsrs	r3, r3, #3
 800e8cc:	f003 0303 	and.w	r3, r3, #3
 800e8d0:	4a64      	ldr	r2, [pc, #400]	; (800ea64 <UART_SetConfig+0xc30>)
 800e8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8d8:	e00f      	b.n	800e8fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e8da:	4b62      	ldr	r3, [pc, #392]	; (800ea64 <UART_SetConfig+0xc30>)
 800e8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8de:	e00c      	b.n	800e8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8e0:	4b61      	ldr	r3, [pc, #388]	; (800ea68 <UART_SetConfig+0xc34>)
 800e8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8e4:	e009      	b.n	800e8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ec:	e005      	b.n	800e8fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f000 80ea 	beq.w	800ead6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e906:	4a55      	ldr	r2, [pc, #340]	; (800ea5c <UART_SetConfig+0xc28>)
 800e908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e90c:	461a      	mov	r2, r3
 800e90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e910:	fbb3 f3f2 	udiv	r3, r3, r2
 800e914:	005a      	lsls	r2, r3, #1
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	085b      	lsrs	r3, r3, #1
 800e91c:	441a      	add	r2, r3
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	fbb2 f3f3 	udiv	r3, r2, r3
 800e926:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92a:	2b0f      	cmp	r3, #15
 800e92c:	d916      	bls.n	800e95c <UART_SetConfig+0xb28>
 800e92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e934:	d212      	bcs.n	800e95c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e938:	b29b      	uxth	r3, r3
 800e93a:	f023 030f 	bic.w	r3, r3, #15
 800e93e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e942:	085b      	lsrs	r3, r3, #1
 800e944:	b29b      	uxth	r3, r3
 800e946:	f003 0307 	and.w	r3, r3, #7
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e94e:	4313      	orrs	r3, r2
 800e950:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e958:	60da      	str	r2, [r3, #12]
 800e95a:	e0bc      	b.n	800ead6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e962:	e0b8      	b.n	800ead6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e968:	2b20      	cmp	r3, #32
 800e96a:	dc4b      	bgt.n	800ea04 <UART_SetConfig+0xbd0>
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f2c0 8087 	blt.w	800ea80 <UART_SetConfig+0xc4c>
 800e972:	2b20      	cmp	r3, #32
 800e974:	f200 8084 	bhi.w	800ea80 <UART_SetConfig+0xc4c>
 800e978:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <UART_SetConfig+0xb4c>)
 800e97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97e:	bf00      	nop
 800e980:	0800ea0b 	.word	0x0800ea0b
 800e984:	0800ea13 	.word	0x0800ea13
 800e988:	0800ea81 	.word	0x0800ea81
 800e98c:	0800ea81 	.word	0x0800ea81
 800e990:	0800ea1b 	.word	0x0800ea1b
 800e994:	0800ea81 	.word	0x0800ea81
 800e998:	0800ea81 	.word	0x0800ea81
 800e99c:	0800ea81 	.word	0x0800ea81
 800e9a0:	0800ea2b 	.word	0x0800ea2b
 800e9a4:	0800ea81 	.word	0x0800ea81
 800e9a8:	0800ea81 	.word	0x0800ea81
 800e9ac:	0800ea81 	.word	0x0800ea81
 800e9b0:	0800ea81 	.word	0x0800ea81
 800e9b4:	0800ea81 	.word	0x0800ea81
 800e9b8:	0800ea81 	.word	0x0800ea81
 800e9bc:	0800ea81 	.word	0x0800ea81
 800e9c0:	0800ea3b 	.word	0x0800ea3b
 800e9c4:	0800ea81 	.word	0x0800ea81
 800e9c8:	0800ea81 	.word	0x0800ea81
 800e9cc:	0800ea81 	.word	0x0800ea81
 800e9d0:	0800ea81 	.word	0x0800ea81
 800e9d4:	0800ea81 	.word	0x0800ea81
 800e9d8:	0800ea81 	.word	0x0800ea81
 800e9dc:	0800ea81 	.word	0x0800ea81
 800e9e0:	0800ea81 	.word	0x0800ea81
 800e9e4:	0800ea81 	.word	0x0800ea81
 800e9e8:	0800ea81 	.word	0x0800ea81
 800e9ec:	0800ea81 	.word	0x0800ea81
 800e9f0:	0800ea81 	.word	0x0800ea81
 800e9f4:	0800ea81 	.word	0x0800ea81
 800e9f8:	0800ea81 	.word	0x0800ea81
 800e9fc:	0800ea81 	.word	0x0800ea81
 800ea00:	0800ea73 	.word	0x0800ea73
 800ea04:	2b40      	cmp	r3, #64	; 0x40
 800ea06:	d037      	beq.n	800ea78 <UART_SetConfig+0xc44>
 800ea08:	e03a      	b.n	800ea80 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea0a:	f7fc fd69 	bl	800b4e0 <HAL_RCC_GetPCLK1Freq>
 800ea0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea10:	e03c      	b.n	800ea8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea12:	f7fc fd7b 	bl	800b50c <HAL_RCC_GetPCLK2Freq>
 800ea16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea18:	e038      	b.n	800ea8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fd ff5e 	bl	800c8e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea28:	e030      	b.n	800ea8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea2a:	f107 0318 	add.w	r3, r7, #24
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fe f8aa 	bl	800cb88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea38:	e028      	b.n	800ea8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea3a:	4b09      	ldr	r3, [pc, #36]	; (800ea60 <UART_SetConfig+0xc2c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 0320 	and.w	r3, r3, #32
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d012      	beq.n	800ea6c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea46:	4b06      	ldr	r3, [pc, #24]	; (800ea60 <UART_SetConfig+0xc2c>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	08db      	lsrs	r3, r3, #3
 800ea4c:	f003 0303 	and.w	r3, r3, #3
 800ea50:	4a04      	ldr	r2, [pc, #16]	; (800ea64 <UART_SetConfig+0xc30>)
 800ea52:	fa22 f303 	lsr.w	r3, r2, r3
 800ea56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea58:	e018      	b.n	800ea8c <UART_SetConfig+0xc58>
 800ea5a:	bf00      	nop
 800ea5c:	08010968 	.word	0x08010968
 800ea60:	58024400 	.word	0x58024400
 800ea64:	03d09000 	.word	0x03d09000
 800ea68:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ea6c:	4b24      	ldr	r3, [pc, #144]	; (800eb00 <UART_SetConfig+0xccc>)
 800ea6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea70:	e00c      	b.n	800ea8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea72:	4b24      	ldr	r3, [pc, #144]	; (800eb04 <UART_SetConfig+0xcd0>)
 800ea74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea76:	e009      	b.n	800ea8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea7e:	e005      	b.n	800ea8c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ea80:	2300      	movs	r3, #0
 800ea82:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea84:	2301      	movs	r3, #1
 800ea86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea8a:	bf00      	nop
    }

    if (pclk != 0U)
 800ea8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d021      	beq.n	800ead6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea96:	4a1c      	ldr	r2, [pc, #112]	; (800eb08 <UART_SetConfig+0xcd4>)
 800ea98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaa0:	fbb3 f2f2 	udiv	r2, r3, r2
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	085b      	lsrs	r3, r3, #1
 800eaaa:	441a      	add	r2, r3
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eab4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab8:	2b0f      	cmp	r3, #15
 800eaba:	d909      	bls.n	800ead0 <UART_SetConfig+0xc9c>
 800eabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eabe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eac2:	d205      	bcs.n	800ead0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac6:	b29a      	uxth	r2, r3
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	60da      	str	r2, [r3, #12]
 800eace:	e002      	b.n	800ead6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2201      	movs	r2, #1
 800eada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	2201      	movs	r2, #1
 800eae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	2200      	movs	r2, #0
 800eaea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800eaf2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3748      	adds	r7, #72	; 0x48
 800eafa:	46bd      	mov	sp, r7
 800eafc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb00:	03d09000 	.word	0x03d09000
 800eb04:	003d0900 	.word	0x003d0900
 800eb08:	08010968 	.word	0x08010968

0800eb0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb18:	f003 0301 	and.w	r3, r3, #1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00a      	beq.n	800eb36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	430a      	orrs	r2, r1
 800eb34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3a:	f003 0302 	and.w	r3, r3, #2
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00a      	beq.n	800eb58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	430a      	orrs	r2, r1
 800eb56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5c:	f003 0304 	and.w	r3, r3, #4
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00a      	beq.n	800eb7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb7e:	f003 0308 	and.w	r3, r3, #8
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00a      	beq.n	800eb9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba0:	f003 0310 	and.w	r3, r3, #16
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00a      	beq.n	800ebbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	430a      	orrs	r2, r1
 800ebbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	f003 0320 	and.w	r3, r3, #32
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00a      	beq.n	800ebe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	430a      	orrs	r2, r1
 800ebde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d01a      	beq.n	800ec22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec0a:	d10a      	bne.n	800ec22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00a      	beq.n	800ec44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	430a      	orrs	r2, r1
 800ec42:	605a      	str	r2, [r3, #4]
  }
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b098      	sub	sp, #96	; 0x60
 800ec54:	af02      	add	r7, sp, #8
 800ec56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec60:	f7f5 faae 	bl	80041c0 <HAL_GetTick>
 800ec64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f003 0308 	and.w	r3, r3, #8
 800ec70:	2b08      	cmp	r3, #8
 800ec72:	d12f      	bne.n	800ecd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f88e 	bl	800eda4 <UART_WaitOnFlagUntilTimeout>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d022      	beq.n	800ecd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	e853 3f00 	ldrex	r3, [r3]
 800ec9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eca2:	653b      	str	r3, [r7, #80]	; 0x50
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecac:	647b      	str	r3, [r7, #68]	; 0x44
 800ecae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ecb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecb4:	e841 2300 	strex	r3, r2, [r1]
 800ecb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ecba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1e6      	bne.n	800ec8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2220      	movs	r2, #32
 800ecc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	e063      	b.n	800ed9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f003 0304 	and.w	r3, r3, #4
 800ecde:	2b04      	cmp	r3, #4
 800ece0:	d149      	bne.n	800ed76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ece2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecea:	2200      	movs	r2, #0
 800ecec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 f857 	bl	800eda4 <UART_WaitOnFlagUntilTimeout>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d03c      	beq.n	800ed76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed04:	e853 3f00 	ldrex	r3, [r3]
 800ed08:	623b      	str	r3, [r7, #32]
   return(result);
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	461a      	mov	r2, r3
 800ed18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ed1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed22:	e841 2300 	strex	r3, r2, [r1]
 800ed26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d1e6      	bne.n	800ecfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3308      	adds	r3, #8
 800ed34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	e853 3f00 	ldrex	r3, [r3]
 800ed3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f023 0301 	bic.w	r3, r3, #1
 800ed44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3308      	adds	r3, #8
 800ed4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed4e:	61fa      	str	r2, [r7, #28]
 800ed50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed52:	69b9      	ldr	r1, [r7, #24]
 800ed54:	69fa      	ldr	r2, [r7, #28]
 800ed56:	e841 2300 	strex	r3, r2, [r1]
 800ed5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1e5      	bne.n	800ed2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2220      	movs	r2, #32
 800ed66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed72:	2303      	movs	r3, #3
 800ed74:	e012      	b.n	800ed9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2220      	movs	r2, #32
 800ed7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2220      	movs	r2, #32
 800ed82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3758      	adds	r7, #88	; 0x58
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	603b      	str	r3, [r7, #0]
 800edb0:	4613      	mov	r3, r2
 800edb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edb4:	e049      	b.n	800ee4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edbc:	d045      	beq.n	800ee4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edbe:	f7f5 f9ff 	bl	80041c0 <HAL_GetTick>
 800edc2:	4602      	mov	r2, r0
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d302      	bcc.n	800edd4 <UART_WaitOnFlagUntilTimeout+0x30>
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d101      	bne.n	800edd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800edd4:	2303      	movs	r3, #3
 800edd6:	e048      	b.n	800ee6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f003 0304 	and.w	r3, r3, #4
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d031      	beq.n	800ee4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	69db      	ldr	r3, [r3, #28]
 800edec:	f003 0308 	and.w	r3, r3, #8
 800edf0:	2b08      	cmp	r3, #8
 800edf2:	d110      	bne.n	800ee16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2208      	movs	r2, #8
 800edfa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 f839 	bl	800ee74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2208      	movs	r2, #8
 800ee06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e029      	b.n	800ee6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	69db      	ldr	r3, [r3, #28]
 800ee1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee24:	d111      	bne.n	800ee4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f000 f81f 	bl	800ee74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2220      	movs	r2, #32
 800ee3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ee46:	2303      	movs	r3, #3
 800ee48:	e00f      	b.n	800ee6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	69da      	ldr	r2, [r3, #28]
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	4013      	ands	r3, r2
 800ee54:	68ba      	ldr	r2, [r7, #8]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	bf0c      	ite	eq
 800ee5a:	2301      	moveq	r3, #1
 800ee5c:	2300      	movne	r3, #0
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	461a      	mov	r2, r3
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d0a6      	beq.n	800edb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b095      	sub	sp, #84	; 0x54
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee84:	e853 3f00 	ldrex	r3, [r3]
 800ee88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	461a      	mov	r2, r3
 800ee98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee9a:	643b      	str	r3, [r7, #64]	; 0x40
 800ee9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eea2:	e841 2300 	strex	r3, r2, [r1]
 800eea6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1e6      	bne.n	800ee7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	3308      	adds	r3, #8
 800eeb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	e853 3f00 	ldrex	r3, [r3]
 800eebc:	61fb      	str	r3, [r7, #28]
   return(result);
 800eebe:	69fa      	ldr	r2, [r7, #28]
 800eec0:	4b1e      	ldr	r3, [pc, #120]	; (800ef3c <UART_EndRxTransfer+0xc8>)
 800eec2:	4013      	ands	r3, r2
 800eec4:	64bb      	str	r3, [r7, #72]	; 0x48
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	3308      	adds	r3, #8
 800eecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eece:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eed6:	e841 2300 	strex	r3, r2, [r1]
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1e5      	bne.n	800eeae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d118      	bne.n	800ef1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	e853 3f00 	ldrex	r3, [r3]
 800eef6:	60bb      	str	r3, [r7, #8]
   return(result);
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	f023 0310 	bic.w	r3, r3, #16
 800eefe:	647b      	str	r3, [r7, #68]	; 0x44
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	461a      	mov	r2, r3
 800ef06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef08:	61bb      	str	r3, [r7, #24]
 800ef0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0c:	6979      	ldr	r1, [r7, #20]
 800ef0e:	69ba      	ldr	r2, [r7, #24]
 800ef10:	e841 2300 	strex	r3, r2, [r1]
 800ef14:	613b      	str	r3, [r7, #16]
   return(result);
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1e6      	bne.n	800eeea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2220      	movs	r2, #32
 800ef20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ef30:	bf00      	nop
 800ef32:	3754      	adds	r7, #84	; 0x54
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr
 800ef3c:	effffffe 	.word	0xeffffffe

0800ef40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f7fe ff52 	bl	800de08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef64:	bf00      	nop
 800ef66:	3710      	adds	r7, #16
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b088      	sub	sp, #32
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	e853 3f00 	ldrex	r3, [r3]
 800ef80:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef88:	61fb      	str	r3, [r7, #28]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	61bb      	str	r3, [r7, #24]
 800ef94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef96:	6979      	ldr	r1, [r7, #20]
 800ef98:	69ba      	ldr	r2, [r7, #24]
 800ef9a:	e841 2300 	strex	r3, r2, [r1]
 800ef9e:	613b      	str	r3, [r7, #16]
   return(result);
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1e6      	bne.n	800ef74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2220      	movs	r2, #32
 800efaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7fe ff1d 	bl	800ddf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800efba:	bf00      	nop
 800efbc:	3720      	adds	r7, #32
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800efc2:	b480      	push	{r7}
 800efc4:	b083      	sub	sp, #12
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800efca:	bf00      	nop
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800efde:	bf00      	nop
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr

0800efea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800efea:	b480      	push	{r7}
 800efec:	b083      	sub	sp, #12
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eff2:	bf00      	nop
 800eff4:	370c      	adds	r7, #12
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr

0800effe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800effe:	b480      	push	{r7}
 800f000:	b085      	sub	sp, #20
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d101      	bne.n	800f014 <HAL_UARTEx_DisableFifoMode+0x16>
 800f010:	2302      	movs	r3, #2
 800f012:	e027      	b.n	800f064 <HAL_UARTEx_DisableFifoMode+0x66>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2224      	movs	r2, #36	; 0x24
 800f020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f022 0201 	bic.w	r2, r2, #1
 800f03a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f042:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2220      	movs	r2, #32
 800f056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3714      	adds	r7, #20
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f080:	2b01      	cmp	r3, #1
 800f082:	d101      	bne.n	800f088 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f084:	2302      	movs	r3, #2
 800f086:	e02d      	b.n	800f0e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2201      	movs	r2, #1
 800f08c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2224      	movs	r2, #36	; 0x24
 800f094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f022 0201 	bic.w	r2, r2, #1
 800f0ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	430a      	orrs	r2, r1
 800f0c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f000 f84f 	bl	800f168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2220      	movs	r2, #32
 800f0d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d101      	bne.n	800f104 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f100:	2302      	movs	r3, #2
 800f102:	e02d      	b.n	800f160 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2224      	movs	r2, #36	; 0x24
 800f110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f022 0201 	bic.w	r2, r2, #1
 800f12a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	430a      	orrs	r2, r1
 800f13e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 f811 	bl	800f168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2220      	movs	r2, #32
 800f152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2200      	movs	r2, #0
 800f15a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f15e:	2300      	movs	r3, #0
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f174:	2b00      	cmp	r3, #0
 800f176:	d108      	bne.n	800f18a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f188:	e031      	b.n	800f1ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f18a:	2310      	movs	r3, #16
 800f18c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f18e:	2310      	movs	r3, #16
 800f190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	0e5b      	lsrs	r3, r3, #25
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	f003 0307 	and.w	r3, r3, #7
 800f1a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	0f5b      	lsrs	r3, r3, #29
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	f003 0307 	and.w	r3, r3, #7
 800f1b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f1b2:	7bbb      	ldrb	r3, [r7, #14]
 800f1b4:	7b3a      	ldrb	r2, [r7, #12]
 800f1b6:	4911      	ldr	r1, [pc, #68]	; (800f1fc <UARTEx_SetNbDataToProcess+0x94>)
 800f1b8:	5c8a      	ldrb	r2, [r1, r2]
 800f1ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f1be:	7b3a      	ldrb	r2, [r7, #12]
 800f1c0:	490f      	ldr	r1, [pc, #60]	; (800f200 <UARTEx_SetNbDataToProcess+0x98>)
 800f1c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f1c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1d0:	7bfb      	ldrb	r3, [r7, #15]
 800f1d2:	7b7a      	ldrb	r2, [r7, #13]
 800f1d4:	4909      	ldr	r1, [pc, #36]	; (800f1fc <UARTEx_SetNbDataToProcess+0x94>)
 800f1d6:	5c8a      	ldrb	r2, [r1, r2]
 800f1d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f1dc:	7b7a      	ldrb	r2, [r7, #13]
 800f1de:	4908      	ldr	r1, [pc, #32]	; (800f200 <UARTEx_SetNbDataToProcess+0x98>)
 800f1e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f1ee:	bf00      	nop
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	08010980 	.word	0x08010980
 800f200:	08010988 	.word	0x08010988

0800f204 <__errno>:
 800f204:	4b01      	ldr	r3, [pc, #4]	; (800f20c <__errno+0x8>)
 800f206:	6818      	ldr	r0, [r3, #0]
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	24000054 	.word	0x24000054

0800f210 <__libc_init_array>:
 800f210:	b570      	push	{r4, r5, r6, lr}
 800f212:	4d0d      	ldr	r5, [pc, #52]	; (800f248 <__libc_init_array+0x38>)
 800f214:	4c0d      	ldr	r4, [pc, #52]	; (800f24c <__libc_init_array+0x3c>)
 800f216:	1b64      	subs	r4, r4, r5
 800f218:	10a4      	asrs	r4, r4, #2
 800f21a:	2600      	movs	r6, #0
 800f21c:	42a6      	cmp	r6, r4
 800f21e:	d109      	bne.n	800f234 <__libc_init_array+0x24>
 800f220:	4d0b      	ldr	r5, [pc, #44]	; (800f250 <__libc_init_array+0x40>)
 800f222:	4c0c      	ldr	r4, [pc, #48]	; (800f254 <__libc_init_array+0x44>)
 800f224:	f001 f87c 	bl	8010320 <_init>
 800f228:	1b64      	subs	r4, r4, r5
 800f22a:	10a4      	asrs	r4, r4, #2
 800f22c:	2600      	movs	r6, #0
 800f22e:	42a6      	cmp	r6, r4
 800f230:	d105      	bne.n	800f23e <__libc_init_array+0x2e>
 800f232:	bd70      	pop	{r4, r5, r6, pc}
 800f234:	f855 3b04 	ldr.w	r3, [r5], #4
 800f238:	4798      	blx	r3
 800f23a:	3601      	adds	r6, #1
 800f23c:	e7ee      	b.n	800f21c <__libc_init_array+0xc>
 800f23e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f242:	4798      	blx	r3
 800f244:	3601      	adds	r6, #1
 800f246:	e7f2      	b.n	800f22e <__libc_init_array+0x1e>
 800f248:	08010a30 	.word	0x08010a30
 800f24c:	08010a30 	.word	0x08010a30
 800f250:	08010a30 	.word	0x08010a30
 800f254:	08010a34 	.word	0x08010a34

0800f258 <memset>:
 800f258:	4402      	add	r2, r0
 800f25a:	4603      	mov	r3, r0
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d100      	bne.n	800f262 <memset+0xa>
 800f260:	4770      	bx	lr
 800f262:	f803 1b01 	strb.w	r1, [r3], #1
 800f266:	e7f9      	b.n	800f25c <memset+0x4>

0800f268 <iprintf>:
 800f268:	b40f      	push	{r0, r1, r2, r3}
 800f26a:	4b0a      	ldr	r3, [pc, #40]	; (800f294 <iprintf+0x2c>)
 800f26c:	b513      	push	{r0, r1, r4, lr}
 800f26e:	681c      	ldr	r4, [r3, #0]
 800f270:	b124      	cbz	r4, 800f27c <iprintf+0x14>
 800f272:	69a3      	ldr	r3, [r4, #24]
 800f274:	b913      	cbnz	r3, 800f27c <iprintf+0x14>
 800f276:	4620      	mov	r0, r4
 800f278:	f000 f9ee 	bl	800f658 <__sinit>
 800f27c:	ab05      	add	r3, sp, #20
 800f27e:	9a04      	ldr	r2, [sp, #16]
 800f280:	68a1      	ldr	r1, [r4, #8]
 800f282:	9301      	str	r3, [sp, #4]
 800f284:	4620      	mov	r0, r4
 800f286:	f000 fbff 	bl	800fa88 <_vfiprintf_r>
 800f28a:	b002      	add	sp, #8
 800f28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f290:	b004      	add	sp, #16
 800f292:	4770      	bx	lr
 800f294:	24000054 	.word	0x24000054

0800f298 <setvbuf>:
 800f298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f29c:	461d      	mov	r5, r3
 800f29e:	4b5d      	ldr	r3, [pc, #372]	; (800f414 <setvbuf+0x17c>)
 800f2a0:	681f      	ldr	r7, [r3, #0]
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	460e      	mov	r6, r1
 800f2a6:	4690      	mov	r8, r2
 800f2a8:	b127      	cbz	r7, 800f2b4 <setvbuf+0x1c>
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	b913      	cbnz	r3, 800f2b4 <setvbuf+0x1c>
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	f000 f9d2 	bl	800f658 <__sinit>
 800f2b4:	4b58      	ldr	r3, [pc, #352]	; (800f418 <setvbuf+0x180>)
 800f2b6:	429c      	cmp	r4, r3
 800f2b8:	d167      	bne.n	800f38a <setvbuf+0xf2>
 800f2ba:	687c      	ldr	r4, [r7, #4]
 800f2bc:	f1b8 0f02 	cmp.w	r8, #2
 800f2c0:	d006      	beq.n	800f2d0 <setvbuf+0x38>
 800f2c2:	f1b8 0f01 	cmp.w	r8, #1
 800f2c6:	f200 809f 	bhi.w	800f408 <setvbuf+0x170>
 800f2ca:	2d00      	cmp	r5, #0
 800f2cc:	f2c0 809c 	blt.w	800f408 <setvbuf+0x170>
 800f2d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2d2:	07db      	lsls	r3, r3, #31
 800f2d4:	d405      	bmi.n	800f2e2 <setvbuf+0x4a>
 800f2d6:	89a3      	ldrh	r3, [r4, #12]
 800f2d8:	0598      	lsls	r0, r3, #22
 800f2da:	d402      	bmi.n	800f2e2 <setvbuf+0x4a>
 800f2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2de:	f000 fa59 	bl	800f794 <__retarget_lock_acquire_recursive>
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	f000 f923 	bl	800f530 <_fflush_r>
 800f2ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2ec:	b141      	cbz	r1, 800f300 <setvbuf+0x68>
 800f2ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2f2:	4299      	cmp	r1, r3
 800f2f4:	d002      	beq.n	800f2fc <setvbuf+0x64>
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	f000 fabc 	bl	800f874 <_free_r>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	6363      	str	r3, [r4, #52]	; 0x34
 800f300:	2300      	movs	r3, #0
 800f302:	61a3      	str	r3, [r4, #24]
 800f304:	6063      	str	r3, [r4, #4]
 800f306:	89a3      	ldrh	r3, [r4, #12]
 800f308:	0619      	lsls	r1, r3, #24
 800f30a:	d503      	bpl.n	800f314 <setvbuf+0x7c>
 800f30c:	6921      	ldr	r1, [r4, #16]
 800f30e:	4638      	mov	r0, r7
 800f310:	f000 fab0 	bl	800f874 <_free_r>
 800f314:	89a3      	ldrh	r3, [r4, #12]
 800f316:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f31a:	f023 0303 	bic.w	r3, r3, #3
 800f31e:	f1b8 0f02 	cmp.w	r8, #2
 800f322:	81a3      	strh	r3, [r4, #12]
 800f324:	d06c      	beq.n	800f400 <setvbuf+0x168>
 800f326:	ab01      	add	r3, sp, #4
 800f328:	466a      	mov	r2, sp
 800f32a:	4621      	mov	r1, r4
 800f32c:	4638      	mov	r0, r7
 800f32e:	f000 fa33 	bl	800f798 <__swhatbuf_r>
 800f332:	89a3      	ldrh	r3, [r4, #12]
 800f334:	4318      	orrs	r0, r3
 800f336:	81a0      	strh	r0, [r4, #12]
 800f338:	2d00      	cmp	r5, #0
 800f33a:	d130      	bne.n	800f39e <setvbuf+0x106>
 800f33c:	9d00      	ldr	r5, [sp, #0]
 800f33e:	4628      	mov	r0, r5
 800f340:	f000 fa90 	bl	800f864 <malloc>
 800f344:	4606      	mov	r6, r0
 800f346:	2800      	cmp	r0, #0
 800f348:	d155      	bne.n	800f3f6 <setvbuf+0x15e>
 800f34a:	f8dd 9000 	ldr.w	r9, [sp]
 800f34e:	45a9      	cmp	r9, r5
 800f350:	d14a      	bne.n	800f3e8 <setvbuf+0x150>
 800f352:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f356:	2200      	movs	r2, #0
 800f358:	60a2      	str	r2, [r4, #8]
 800f35a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f35e:	6022      	str	r2, [r4, #0]
 800f360:	6122      	str	r2, [r4, #16]
 800f362:	2201      	movs	r2, #1
 800f364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f368:	6162      	str	r2, [r4, #20]
 800f36a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f36c:	f043 0302 	orr.w	r3, r3, #2
 800f370:	07d2      	lsls	r2, r2, #31
 800f372:	81a3      	strh	r3, [r4, #12]
 800f374:	d405      	bmi.n	800f382 <setvbuf+0xea>
 800f376:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f37a:	d102      	bne.n	800f382 <setvbuf+0xea>
 800f37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f37e:	f000 fa0a 	bl	800f796 <__retarget_lock_release_recursive>
 800f382:	4628      	mov	r0, r5
 800f384:	b003      	add	sp, #12
 800f386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f38a:	4b24      	ldr	r3, [pc, #144]	; (800f41c <setvbuf+0x184>)
 800f38c:	429c      	cmp	r4, r3
 800f38e:	d101      	bne.n	800f394 <setvbuf+0xfc>
 800f390:	68bc      	ldr	r4, [r7, #8]
 800f392:	e793      	b.n	800f2bc <setvbuf+0x24>
 800f394:	4b22      	ldr	r3, [pc, #136]	; (800f420 <setvbuf+0x188>)
 800f396:	429c      	cmp	r4, r3
 800f398:	bf08      	it	eq
 800f39a:	68fc      	ldreq	r4, [r7, #12]
 800f39c:	e78e      	b.n	800f2bc <setvbuf+0x24>
 800f39e:	2e00      	cmp	r6, #0
 800f3a0:	d0cd      	beq.n	800f33e <setvbuf+0xa6>
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	b913      	cbnz	r3, 800f3ac <setvbuf+0x114>
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	f000 f956 	bl	800f658 <__sinit>
 800f3ac:	f1b8 0f01 	cmp.w	r8, #1
 800f3b0:	bf08      	it	eq
 800f3b2:	89a3      	ldrheq	r3, [r4, #12]
 800f3b4:	6026      	str	r6, [r4, #0]
 800f3b6:	bf04      	itt	eq
 800f3b8:	f043 0301 	orreq.w	r3, r3, #1
 800f3bc:	81a3      	strheq	r3, [r4, #12]
 800f3be:	89a2      	ldrh	r2, [r4, #12]
 800f3c0:	f012 0308 	ands.w	r3, r2, #8
 800f3c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f3c8:	d01c      	beq.n	800f404 <setvbuf+0x16c>
 800f3ca:	07d3      	lsls	r3, r2, #31
 800f3cc:	bf41      	itttt	mi
 800f3ce:	2300      	movmi	r3, #0
 800f3d0:	426d      	negmi	r5, r5
 800f3d2:	60a3      	strmi	r3, [r4, #8]
 800f3d4:	61a5      	strmi	r5, [r4, #24]
 800f3d6:	bf58      	it	pl
 800f3d8:	60a5      	strpl	r5, [r4, #8]
 800f3da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f3dc:	f015 0501 	ands.w	r5, r5, #1
 800f3e0:	d115      	bne.n	800f40e <setvbuf+0x176>
 800f3e2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f3e6:	e7c8      	b.n	800f37a <setvbuf+0xe2>
 800f3e8:	4648      	mov	r0, r9
 800f3ea:	f000 fa3b 	bl	800f864 <malloc>
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d0ae      	beq.n	800f352 <setvbuf+0xba>
 800f3f4:	464d      	mov	r5, r9
 800f3f6:	89a3      	ldrh	r3, [r4, #12]
 800f3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3fc:	81a3      	strh	r3, [r4, #12]
 800f3fe:	e7d0      	b.n	800f3a2 <setvbuf+0x10a>
 800f400:	2500      	movs	r5, #0
 800f402:	e7a8      	b.n	800f356 <setvbuf+0xbe>
 800f404:	60a3      	str	r3, [r4, #8]
 800f406:	e7e8      	b.n	800f3da <setvbuf+0x142>
 800f408:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f40c:	e7b9      	b.n	800f382 <setvbuf+0xea>
 800f40e:	2500      	movs	r5, #0
 800f410:	e7b7      	b.n	800f382 <setvbuf+0xea>
 800f412:	bf00      	nop
 800f414:	24000054 	.word	0x24000054
 800f418:	080109b4 	.word	0x080109b4
 800f41c:	080109d4 	.word	0x080109d4
 800f420:	08010994 	.word	0x08010994

0800f424 <__sflush_r>:
 800f424:	898a      	ldrh	r2, [r1, #12]
 800f426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f42a:	4605      	mov	r5, r0
 800f42c:	0710      	lsls	r0, r2, #28
 800f42e:	460c      	mov	r4, r1
 800f430:	d458      	bmi.n	800f4e4 <__sflush_r+0xc0>
 800f432:	684b      	ldr	r3, [r1, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	dc05      	bgt.n	800f444 <__sflush_r+0x20>
 800f438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	dc02      	bgt.n	800f444 <__sflush_r+0x20>
 800f43e:	2000      	movs	r0, #0
 800f440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f446:	2e00      	cmp	r6, #0
 800f448:	d0f9      	beq.n	800f43e <__sflush_r+0x1a>
 800f44a:	2300      	movs	r3, #0
 800f44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f450:	682f      	ldr	r7, [r5, #0]
 800f452:	602b      	str	r3, [r5, #0]
 800f454:	d032      	beq.n	800f4bc <__sflush_r+0x98>
 800f456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f458:	89a3      	ldrh	r3, [r4, #12]
 800f45a:	075a      	lsls	r2, r3, #29
 800f45c:	d505      	bpl.n	800f46a <__sflush_r+0x46>
 800f45e:	6863      	ldr	r3, [r4, #4]
 800f460:	1ac0      	subs	r0, r0, r3
 800f462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f464:	b10b      	cbz	r3, 800f46a <__sflush_r+0x46>
 800f466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f468:	1ac0      	subs	r0, r0, r3
 800f46a:	2300      	movs	r3, #0
 800f46c:	4602      	mov	r2, r0
 800f46e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f470:	6a21      	ldr	r1, [r4, #32]
 800f472:	4628      	mov	r0, r5
 800f474:	47b0      	blx	r6
 800f476:	1c43      	adds	r3, r0, #1
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	d106      	bne.n	800f48a <__sflush_r+0x66>
 800f47c:	6829      	ldr	r1, [r5, #0]
 800f47e:	291d      	cmp	r1, #29
 800f480:	d82c      	bhi.n	800f4dc <__sflush_r+0xb8>
 800f482:	4a2a      	ldr	r2, [pc, #168]	; (800f52c <__sflush_r+0x108>)
 800f484:	40ca      	lsrs	r2, r1
 800f486:	07d6      	lsls	r6, r2, #31
 800f488:	d528      	bpl.n	800f4dc <__sflush_r+0xb8>
 800f48a:	2200      	movs	r2, #0
 800f48c:	6062      	str	r2, [r4, #4]
 800f48e:	04d9      	lsls	r1, r3, #19
 800f490:	6922      	ldr	r2, [r4, #16]
 800f492:	6022      	str	r2, [r4, #0]
 800f494:	d504      	bpl.n	800f4a0 <__sflush_r+0x7c>
 800f496:	1c42      	adds	r2, r0, #1
 800f498:	d101      	bne.n	800f49e <__sflush_r+0x7a>
 800f49a:	682b      	ldr	r3, [r5, #0]
 800f49c:	b903      	cbnz	r3, 800f4a0 <__sflush_r+0x7c>
 800f49e:	6560      	str	r0, [r4, #84]	; 0x54
 800f4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4a2:	602f      	str	r7, [r5, #0]
 800f4a4:	2900      	cmp	r1, #0
 800f4a6:	d0ca      	beq.n	800f43e <__sflush_r+0x1a>
 800f4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4ac:	4299      	cmp	r1, r3
 800f4ae:	d002      	beq.n	800f4b6 <__sflush_r+0x92>
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f000 f9df 	bl	800f874 <_free_r>
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	6360      	str	r0, [r4, #52]	; 0x34
 800f4ba:	e7c1      	b.n	800f440 <__sflush_r+0x1c>
 800f4bc:	6a21      	ldr	r1, [r4, #32]
 800f4be:	2301      	movs	r3, #1
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	47b0      	blx	r6
 800f4c4:	1c41      	adds	r1, r0, #1
 800f4c6:	d1c7      	bne.n	800f458 <__sflush_r+0x34>
 800f4c8:	682b      	ldr	r3, [r5, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d0c4      	beq.n	800f458 <__sflush_r+0x34>
 800f4ce:	2b1d      	cmp	r3, #29
 800f4d0:	d001      	beq.n	800f4d6 <__sflush_r+0xb2>
 800f4d2:	2b16      	cmp	r3, #22
 800f4d4:	d101      	bne.n	800f4da <__sflush_r+0xb6>
 800f4d6:	602f      	str	r7, [r5, #0]
 800f4d8:	e7b1      	b.n	800f43e <__sflush_r+0x1a>
 800f4da:	89a3      	ldrh	r3, [r4, #12]
 800f4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4e0:	81a3      	strh	r3, [r4, #12]
 800f4e2:	e7ad      	b.n	800f440 <__sflush_r+0x1c>
 800f4e4:	690f      	ldr	r7, [r1, #16]
 800f4e6:	2f00      	cmp	r7, #0
 800f4e8:	d0a9      	beq.n	800f43e <__sflush_r+0x1a>
 800f4ea:	0793      	lsls	r3, r2, #30
 800f4ec:	680e      	ldr	r6, [r1, #0]
 800f4ee:	bf08      	it	eq
 800f4f0:	694b      	ldreq	r3, [r1, #20]
 800f4f2:	600f      	str	r7, [r1, #0]
 800f4f4:	bf18      	it	ne
 800f4f6:	2300      	movne	r3, #0
 800f4f8:	eba6 0807 	sub.w	r8, r6, r7
 800f4fc:	608b      	str	r3, [r1, #8]
 800f4fe:	f1b8 0f00 	cmp.w	r8, #0
 800f502:	dd9c      	ble.n	800f43e <__sflush_r+0x1a>
 800f504:	6a21      	ldr	r1, [r4, #32]
 800f506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f508:	4643      	mov	r3, r8
 800f50a:	463a      	mov	r2, r7
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b0      	blx	r6
 800f510:	2800      	cmp	r0, #0
 800f512:	dc06      	bgt.n	800f522 <__sflush_r+0xfe>
 800f514:	89a3      	ldrh	r3, [r4, #12]
 800f516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f51a:	81a3      	strh	r3, [r4, #12]
 800f51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f520:	e78e      	b.n	800f440 <__sflush_r+0x1c>
 800f522:	4407      	add	r7, r0
 800f524:	eba8 0800 	sub.w	r8, r8, r0
 800f528:	e7e9      	b.n	800f4fe <__sflush_r+0xda>
 800f52a:	bf00      	nop
 800f52c:	20400001 	.word	0x20400001

0800f530 <_fflush_r>:
 800f530:	b538      	push	{r3, r4, r5, lr}
 800f532:	690b      	ldr	r3, [r1, #16]
 800f534:	4605      	mov	r5, r0
 800f536:	460c      	mov	r4, r1
 800f538:	b913      	cbnz	r3, 800f540 <_fflush_r+0x10>
 800f53a:	2500      	movs	r5, #0
 800f53c:	4628      	mov	r0, r5
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	b118      	cbz	r0, 800f54a <_fflush_r+0x1a>
 800f542:	6983      	ldr	r3, [r0, #24]
 800f544:	b90b      	cbnz	r3, 800f54a <_fflush_r+0x1a>
 800f546:	f000 f887 	bl	800f658 <__sinit>
 800f54a:	4b14      	ldr	r3, [pc, #80]	; (800f59c <_fflush_r+0x6c>)
 800f54c:	429c      	cmp	r4, r3
 800f54e:	d11b      	bne.n	800f588 <_fflush_r+0x58>
 800f550:	686c      	ldr	r4, [r5, #4]
 800f552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0ef      	beq.n	800f53a <_fflush_r+0xa>
 800f55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f55c:	07d0      	lsls	r0, r2, #31
 800f55e:	d404      	bmi.n	800f56a <_fflush_r+0x3a>
 800f560:	0599      	lsls	r1, r3, #22
 800f562:	d402      	bmi.n	800f56a <_fflush_r+0x3a>
 800f564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f566:	f000 f915 	bl	800f794 <__retarget_lock_acquire_recursive>
 800f56a:	4628      	mov	r0, r5
 800f56c:	4621      	mov	r1, r4
 800f56e:	f7ff ff59 	bl	800f424 <__sflush_r>
 800f572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f574:	07da      	lsls	r2, r3, #31
 800f576:	4605      	mov	r5, r0
 800f578:	d4e0      	bmi.n	800f53c <_fflush_r+0xc>
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	059b      	lsls	r3, r3, #22
 800f57e:	d4dd      	bmi.n	800f53c <_fflush_r+0xc>
 800f580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f582:	f000 f908 	bl	800f796 <__retarget_lock_release_recursive>
 800f586:	e7d9      	b.n	800f53c <_fflush_r+0xc>
 800f588:	4b05      	ldr	r3, [pc, #20]	; (800f5a0 <_fflush_r+0x70>)
 800f58a:	429c      	cmp	r4, r3
 800f58c:	d101      	bne.n	800f592 <_fflush_r+0x62>
 800f58e:	68ac      	ldr	r4, [r5, #8]
 800f590:	e7df      	b.n	800f552 <_fflush_r+0x22>
 800f592:	4b04      	ldr	r3, [pc, #16]	; (800f5a4 <_fflush_r+0x74>)
 800f594:	429c      	cmp	r4, r3
 800f596:	bf08      	it	eq
 800f598:	68ec      	ldreq	r4, [r5, #12]
 800f59a:	e7da      	b.n	800f552 <_fflush_r+0x22>
 800f59c:	080109b4 	.word	0x080109b4
 800f5a0:	080109d4 	.word	0x080109d4
 800f5a4:	08010994 	.word	0x08010994

0800f5a8 <std>:
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	b510      	push	{r4, lr}
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	e9c0 3300 	strd	r3, r3, [r0]
 800f5b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5b6:	6083      	str	r3, [r0, #8]
 800f5b8:	8181      	strh	r1, [r0, #12]
 800f5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800f5bc:	81c2      	strh	r2, [r0, #14]
 800f5be:	6183      	str	r3, [r0, #24]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	2208      	movs	r2, #8
 800f5c4:	305c      	adds	r0, #92	; 0x5c
 800f5c6:	f7ff fe47 	bl	800f258 <memset>
 800f5ca:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <std+0x38>)
 800f5cc:	6263      	str	r3, [r4, #36]	; 0x24
 800f5ce:	4b05      	ldr	r3, [pc, #20]	; (800f5e4 <std+0x3c>)
 800f5d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5d2:	4b05      	ldr	r3, [pc, #20]	; (800f5e8 <std+0x40>)
 800f5d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5d6:	4b05      	ldr	r3, [pc, #20]	; (800f5ec <std+0x44>)
 800f5d8:	6224      	str	r4, [r4, #32]
 800f5da:	6323      	str	r3, [r4, #48]	; 0x30
 800f5dc:	bd10      	pop	{r4, pc}
 800f5de:	bf00      	nop
 800f5e0:	08010031 	.word	0x08010031
 800f5e4:	08010053 	.word	0x08010053
 800f5e8:	0801008b 	.word	0x0801008b
 800f5ec:	080100af 	.word	0x080100af

0800f5f0 <_cleanup_r>:
 800f5f0:	4901      	ldr	r1, [pc, #4]	; (800f5f8 <_cleanup_r+0x8>)
 800f5f2:	f000 b8af 	b.w	800f754 <_fwalk_reent>
 800f5f6:	bf00      	nop
 800f5f8:	0800f531 	.word	0x0800f531

0800f5fc <__sfmoreglue>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	2268      	movs	r2, #104	; 0x68
 800f600:	1e4d      	subs	r5, r1, #1
 800f602:	4355      	muls	r5, r2
 800f604:	460e      	mov	r6, r1
 800f606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f60a:	f000 f99f 	bl	800f94c <_malloc_r>
 800f60e:	4604      	mov	r4, r0
 800f610:	b140      	cbz	r0, 800f624 <__sfmoreglue+0x28>
 800f612:	2100      	movs	r1, #0
 800f614:	e9c0 1600 	strd	r1, r6, [r0]
 800f618:	300c      	adds	r0, #12
 800f61a:	60a0      	str	r0, [r4, #8]
 800f61c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f620:	f7ff fe1a 	bl	800f258 <memset>
 800f624:	4620      	mov	r0, r4
 800f626:	bd70      	pop	{r4, r5, r6, pc}

0800f628 <__sfp_lock_acquire>:
 800f628:	4801      	ldr	r0, [pc, #4]	; (800f630 <__sfp_lock_acquire+0x8>)
 800f62a:	f000 b8b3 	b.w	800f794 <__retarget_lock_acquire_recursive>
 800f62e:	bf00      	nop
 800f630:	2404be5d 	.word	0x2404be5d

0800f634 <__sfp_lock_release>:
 800f634:	4801      	ldr	r0, [pc, #4]	; (800f63c <__sfp_lock_release+0x8>)
 800f636:	f000 b8ae 	b.w	800f796 <__retarget_lock_release_recursive>
 800f63a:	bf00      	nop
 800f63c:	2404be5d 	.word	0x2404be5d

0800f640 <__sinit_lock_acquire>:
 800f640:	4801      	ldr	r0, [pc, #4]	; (800f648 <__sinit_lock_acquire+0x8>)
 800f642:	f000 b8a7 	b.w	800f794 <__retarget_lock_acquire_recursive>
 800f646:	bf00      	nop
 800f648:	2404be5e 	.word	0x2404be5e

0800f64c <__sinit_lock_release>:
 800f64c:	4801      	ldr	r0, [pc, #4]	; (800f654 <__sinit_lock_release+0x8>)
 800f64e:	f000 b8a2 	b.w	800f796 <__retarget_lock_release_recursive>
 800f652:	bf00      	nop
 800f654:	2404be5e 	.word	0x2404be5e

0800f658 <__sinit>:
 800f658:	b510      	push	{r4, lr}
 800f65a:	4604      	mov	r4, r0
 800f65c:	f7ff fff0 	bl	800f640 <__sinit_lock_acquire>
 800f660:	69a3      	ldr	r3, [r4, #24]
 800f662:	b11b      	cbz	r3, 800f66c <__sinit+0x14>
 800f664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f668:	f7ff bff0 	b.w	800f64c <__sinit_lock_release>
 800f66c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f670:	6523      	str	r3, [r4, #80]	; 0x50
 800f672:	4b13      	ldr	r3, [pc, #76]	; (800f6c0 <__sinit+0x68>)
 800f674:	4a13      	ldr	r2, [pc, #76]	; (800f6c4 <__sinit+0x6c>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	62a2      	str	r2, [r4, #40]	; 0x28
 800f67a:	42a3      	cmp	r3, r4
 800f67c:	bf04      	itt	eq
 800f67e:	2301      	moveq	r3, #1
 800f680:	61a3      	streq	r3, [r4, #24]
 800f682:	4620      	mov	r0, r4
 800f684:	f000 f820 	bl	800f6c8 <__sfp>
 800f688:	6060      	str	r0, [r4, #4]
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 f81c 	bl	800f6c8 <__sfp>
 800f690:	60a0      	str	r0, [r4, #8]
 800f692:	4620      	mov	r0, r4
 800f694:	f000 f818 	bl	800f6c8 <__sfp>
 800f698:	2200      	movs	r2, #0
 800f69a:	60e0      	str	r0, [r4, #12]
 800f69c:	2104      	movs	r1, #4
 800f69e:	6860      	ldr	r0, [r4, #4]
 800f6a0:	f7ff ff82 	bl	800f5a8 <std>
 800f6a4:	68a0      	ldr	r0, [r4, #8]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	2109      	movs	r1, #9
 800f6aa:	f7ff ff7d 	bl	800f5a8 <std>
 800f6ae:	68e0      	ldr	r0, [r4, #12]
 800f6b0:	2202      	movs	r2, #2
 800f6b2:	2112      	movs	r1, #18
 800f6b4:	f7ff ff78 	bl	800f5a8 <std>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	61a3      	str	r3, [r4, #24]
 800f6bc:	e7d2      	b.n	800f664 <__sinit+0xc>
 800f6be:	bf00      	nop
 800f6c0:	08010990 	.word	0x08010990
 800f6c4:	0800f5f1 	.word	0x0800f5f1

0800f6c8 <__sfp>:
 800f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ca:	4607      	mov	r7, r0
 800f6cc:	f7ff ffac 	bl	800f628 <__sfp_lock_acquire>
 800f6d0:	4b1e      	ldr	r3, [pc, #120]	; (800f74c <__sfp+0x84>)
 800f6d2:	681e      	ldr	r6, [r3, #0]
 800f6d4:	69b3      	ldr	r3, [r6, #24]
 800f6d6:	b913      	cbnz	r3, 800f6de <__sfp+0x16>
 800f6d8:	4630      	mov	r0, r6
 800f6da:	f7ff ffbd 	bl	800f658 <__sinit>
 800f6de:	3648      	adds	r6, #72	; 0x48
 800f6e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	d503      	bpl.n	800f6f0 <__sfp+0x28>
 800f6e8:	6833      	ldr	r3, [r6, #0]
 800f6ea:	b30b      	cbz	r3, 800f730 <__sfp+0x68>
 800f6ec:	6836      	ldr	r6, [r6, #0]
 800f6ee:	e7f7      	b.n	800f6e0 <__sfp+0x18>
 800f6f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f6f4:	b9d5      	cbnz	r5, 800f72c <__sfp+0x64>
 800f6f6:	4b16      	ldr	r3, [pc, #88]	; (800f750 <__sfp+0x88>)
 800f6f8:	60e3      	str	r3, [r4, #12]
 800f6fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f6fe:	6665      	str	r5, [r4, #100]	; 0x64
 800f700:	f000 f847 	bl	800f792 <__retarget_lock_init_recursive>
 800f704:	f7ff ff96 	bl	800f634 <__sfp_lock_release>
 800f708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f70c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f710:	6025      	str	r5, [r4, #0]
 800f712:	61a5      	str	r5, [r4, #24]
 800f714:	2208      	movs	r2, #8
 800f716:	4629      	mov	r1, r5
 800f718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f71c:	f7ff fd9c 	bl	800f258 <memset>
 800f720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f728:	4620      	mov	r0, r4
 800f72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f72c:	3468      	adds	r4, #104	; 0x68
 800f72e:	e7d9      	b.n	800f6e4 <__sfp+0x1c>
 800f730:	2104      	movs	r1, #4
 800f732:	4638      	mov	r0, r7
 800f734:	f7ff ff62 	bl	800f5fc <__sfmoreglue>
 800f738:	4604      	mov	r4, r0
 800f73a:	6030      	str	r0, [r6, #0]
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d1d5      	bne.n	800f6ec <__sfp+0x24>
 800f740:	f7ff ff78 	bl	800f634 <__sfp_lock_release>
 800f744:	230c      	movs	r3, #12
 800f746:	603b      	str	r3, [r7, #0]
 800f748:	e7ee      	b.n	800f728 <__sfp+0x60>
 800f74a:	bf00      	nop
 800f74c:	08010990 	.word	0x08010990
 800f750:	ffff0001 	.word	0xffff0001

0800f754 <_fwalk_reent>:
 800f754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f758:	4606      	mov	r6, r0
 800f75a:	4688      	mov	r8, r1
 800f75c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f760:	2700      	movs	r7, #0
 800f762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f766:	f1b9 0901 	subs.w	r9, r9, #1
 800f76a:	d505      	bpl.n	800f778 <_fwalk_reent+0x24>
 800f76c:	6824      	ldr	r4, [r4, #0]
 800f76e:	2c00      	cmp	r4, #0
 800f770:	d1f7      	bne.n	800f762 <_fwalk_reent+0xe>
 800f772:	4638      	mov	r0, r7
 800f774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f778:	89ab      	ldrh	r3, [r5, #12]
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d907      	bls.n	800f78e <_fwalk_reent+0x3a>
 800f77e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f782:	3301      	adds	r3, #1
 800f784:	d003      	beq.n	800f78e <_fwalk_reent+0x3a>
 800f786:	4629      	mov	r1, r5
 800f788:	4630      	mov	r0, r6
 800f78a:	47c0      	blx	r8
 800f78c:	4307      	orrs	r7, r0
 800f78e:	3568      	adds	r5, #104	; 0x68
 800f790:	e7e9      	b.n	800f766 <_fwalk_reent+0x12>

0800f792 <__retarget_lock_init_recursive>:
 800f792:	4770      	bx	lr

0800f794 <__retarget_lock_acquire_recursive>:
 800f794:	4770      	bx	lr

0800f796 <__retarget_lock_release_recursive>:
 800f796:	4770      	bx	lr

0800f798 <__swhatbuf_r>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	460e      	mov	r6, r1
 800f79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7a0:	2900      	cmp	r1, #0
 800f7a2:	b096      	sub	sp, #88	; 0x58
 800f7a4:	4614      	mov	r4, r2
 800f7a6:	461d      	mov	r5, r3
 800f7a8:	da08      	bge.n	800f7bc <__swhatbuf_r+0x24>
 800f7aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	602a      	str	r2, [r5, #0]
 800f7b2:	061a      	lsls	r2, r3, #24
 800f7b4:	d410      	bmi.n	800f7d8 <__swhatbuf_r+0x40>
 800f7b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7ba:	e00e      	b.n	800f7da <__swhatbuf_r+0x42>
 800f7bc:	466a      	mov	r2, sp
 800f7be:	f000 fd5d 	bl	801027c <_fstat_r>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	dbf1      	blt.n	800f7aa <__swhatbuf_r+0x12>
 800f7c6:	9a01      	ldr	r2, [sp, #4]
 800f7c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f7cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f7d0:	425a      	negs	r2, r3
 800f7d2:	415a      	adcs	r2, r3
 800f7d4:	602a      	str	r2, [r5, #0]
 800f7d6:	e7ee      	b.n	800f7b6 <__swhatbuf_r+0x1e>
 800f7d8:	2340      	movs	r3, #64	; 0x40
 800f7da:	2000      	movs	r0, #0
 800f7dc:	6023      	str	r3, [r4, #0]
 800f7de:	b016      	add	sp, #88	; 0x58
 800f7e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f7e4 <__smakebuf_r>:
 800f7e4:	898b      	ldrh	r3, [r1, #12]
 800f7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7e8:	079d      	lsls	r5, r3, #30
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	460c      	mov	r4, r1
 800f7ee:	d507      	bpl.n	800f800 <__smakebuf_r+0x1c>
 800f7f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	6123      	str	r3, [r4, #16]
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	6163      	str	r3, [r4, #20]
 800f7fc:	b002      	add	sp, #8
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
 800f800:	ab01      	add	r3, sp, #4
 800f802:	466a      	mov	r2, sp
 800f804:	f7ff ffc8 	bl	800f798 <__swhatbuf_r>
 800f808:	9900      	ldr	r1, [sp, #0]
 800f80a:	4605      	mov	r5, r0
 800f80c:	4630      	mov	r0, r6
 800f80e:	f000 f89d 	bl	800f94c <_malloc_r>
 800f812:	b948      	cbnz	r0, 800f828 <__smakebuf_r+0x44>
 800f814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f818:	059a      	lsls	r2, r3, #22
 800f81a:	d4ef      	bmi.n	800f7fc <__smakebuf_r+0x18>
 800f81c:	f023 0303 	bic.w	r3, r3, #3
 800f820:	f043 0302 	orr.w	r3, r3, #2
 800f824:	81a3      	strh	r3, [r4, #12]
 800f826:	e7e3      	b.n	800f7f0 <__smakebuf_r+0xc>
 800f828:	4b0d      	ldr	r3, [pc, #52]	; (800f860 <__smakebuf_r+0x7c>)
 800f82a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f82c:	89a3      	ldrh	r3, [r4, #12]
 800f82e:	6020      	str	r0, [r4, #0]
 800f830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f834:	81a3      	strh	r3, [r4, #12]
 800f836:	9b00      	ldr	r3, [sp, #0]
 800f838:	6163      	str	r3, [r4, #20]
 800f83a:	9b01      	ldr	r3, [sp, #4]
 800f83c:	6120      	str	r0, [r4, #16]
 800f83e:	b15b      	cbz	r3, 800f858 <__smakebuf_r+0x74>
 800f840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f844:	4630      	mov	r0, r6
 800f846:	f000 fd2b 	bl	80102a0 <_isatty_r>
 800f84a:	b128      	cbz	r0, 800f858 <__smakebuf_r+0x74>
 800f84c:	89a3      	ldrh	r3, [r4, #12]
 800f84e:	f023 0303 	bic.w	r3, r3, #3
 800f852:	f043 0301 	orr.w	r3, r3, #1
 800f856:	81a3      	strh	r3, [r4, #12]
 800f858:	89a0      	ldrh	r0, [r4, #12]
 800f85a:	4305      	orrs	r5, r0
 800f85c:	81a5      	strh	r5, [r4, #12]
 800f85e:	e7cd      	b.n	800f7fc <__smakebuf_r+0x18>
 800f860:	0800f5f1 	.word	0x0800f5f1

0800f864 <malloc>:
 800f864:	4b02      	ldr	r3, [pc, #8]	; (800f870 <malloc+0xc>)
 800f866:	4601      	mov	r1, r0
 800f868:	6818      	ldr	r0, [r3, #0]
 800f86a:	f000 b86f 	b.w	800f94c <_malloc_r>
 800f86e:	bf00      	nop
 800f870:	24000054 	.word	0x24000054

0800f874 <_free_r>:
 800f874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f876:	2900      	cmp	r1, #0
 800f878:	d044      	beq.n	800f904 <_free_r+0x90>
 800f87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f87e:	9001      	str	r0, [sp, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	f1a1 0404 	sub.w	r4, r1, #4
 800f886:	bfb8      	it	lt
 800f888:	18e4      	addlt	r4, r4, r3
 800f88a:	f000 fd2b 	bl	80102e4 <__malloc_lock>
 800f88e:	4a1e      	ldr	r2, [pc, #120]	; (800f908 <_free_r+0x94>)
 800f890:	9801      	ldr	r0, [sp, #4]
 800f892:	6813      	ldr	r3, [r2, #0]
 800f894:	b933      	cbnz	r3, 800f8a4 <_free_r+0x30>
 800f896:	6063      	str	r3, [r4, #4]
 800f898:	6014      	str	r4, [r2, #0]
 800f89a:	b003      	add	sp, #12
 800f89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8a0:	f000 bd26 	b.w	80102f0 <__malloc_unlock>
 800f8a4:	42a3      	cmp	r3, r4
 800f8a6:	d908      	bls.n	800f8ba <_free_r+0x46>
 800f8a8:	6825      	ldr	r5, [r4, #0]
 800f8aa:	1961      	adds	r1, r4, r5
 800f8ac:	428b      	cmp	r3, r1
 800f8ae:	bf01      	itttt	eq
 800f8b0:	6819      	ldreq	r1, [r3, #0]
 800f8b2:	685b      	ldreq	r3, [r3, #4]
 800f8b4:	1949      	addeq	r1, r1, r5
 800f8b6:	6021      	streq	r1, [r4, #0]
 800f8b8:	e7ed      	b.n	800f896 <_free_r+0x22>
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	b10b      	cbz	r3, 800f8c4 <_free_r+0x50>
 800f8c0:	42a3      	cmp	r3, r4
 800f8c2:	d9fa      	bls.n	800f8ba <_free_r+0x46>
 800f8c4:	6811      	ldr	r1, [r2, #0]
 800f8c6:	1855      	adds	r5, r2, r1
 800f8c8:	42a5      	cmp	r5, r4
 800f8ca:	d10b      	bne.n	800f8e4 <_free_r+0x70>
 800f8cc:	6824      	ldr	r4, [r4, #0]
 800f8ce:	4421      	add	r1, r4
 800f8d0:	1854      	adds	r4, r2, r1
 800f8d2:	42a3      	cmp	r3, r4
 800f8d4:	6011      	str	r1, [r2, #0]
 800f8d6:	d1e0      	bne.n	800f89a <_free_r+0x26>
 800f8d8:	681c      	ldr	r4, [r3, #0]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	6053      	str	r3, [r2, #4]
 800f8de:	4421      	add	r1, r4
 800f8e0:	6011      	str	r1, [r2, #0]
 800f8e2:	e7da      	b.n	800f89a <_free_r+0x26>
 800f8e4:	d902      	bls.n	800f8ec <_free_r+0x78>
 800f8e6:	230c      	movs	r3, #12
 800f8e8:	6003      	str	r3, [r0, #0]
 800f8ea:	e7d6      	b.n	800f89a <_free_r+0x26>
 800f8ec:	6825      	ldr	r5, [r4, #0]
 800f8ee:	1961      	adds	r1, r4, r5
 800f8f0:	428b      	cmp	r3, r1
 800f8f2:	bf04      	itt	eq
 800f8f4:	6819      	ldreq	r1, [r3, #0]
 800f8f6:	685b      	ldreq	r3, [r3, #4]
 800f8f8:	6063      	str	r3, [r4, #4]
 800f8fa:	bf04      	itt	eq
 800f8fc:	1949      	addeq	r1, r1, r5
 800f8fe:	6021      	streq	r1, [r4, #0]
 800f900:	6054      	str	r4, [r2, #4]
 800f902:	e7ca      	b.n	800f89a <_free_r+0x26>
 800f904:	b003      	add	sp, #12
 800f906:	bd30      	pop	{r4, r5, pc}
 800f908:	2404be60 	.word	0x2404be60

0800f90c <sbrk_aligned>:
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	4e0e      	ldr	r6, [pc, #56]	; (800f948 <sbrk_aligned+0x3c>)
 800f910:	460c      	mov	r4, r1
 800f912:	6831      	ldr	r1, [r6, #0]
 800f914:	4605      	mov	r5, r0
 800f916:	b911      	cbnz	r1, 800f91e <sbrk_aligned+0x12>
 800f918:	f000 fb7a 	bl	8010010 <_sbrk_r>
 800f91c:	6030      	str	r0, [r6, #0]
 800f91e:	4621      	mov	r1, r4
 800f920:	4628      	mov	r0, r5
 800f922:	f000 fb75 	bl	8010010 <_sbrk_r>
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	d00a      	beq.n	800f940 <sbrk_aligned+0x34>
 800f92a:	1cc4      	adds	r4, r0, #3
 800f92c:	f024 0403 	bic.w	r4, r4, #3
 800f930:	42a0      	cmp	r0, r4
 800f932:	d007      	beq.n	800f944 <sbrk_aligned+0x38>
 800f934:	1a21      	subs	r1, r4, r0
 800f936:	4628      	mov	r0, r5
 800f938:	f000 fb6a 	bl	8010010 <_sbrk_r>
 800f93c:	3001      	adds	r0, #1
 800f93e:	d101      	bne.n	800f944 <sbrk_aligned+0x38>
 800f940:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f944:	4620      	mov	r0, r4
 800f946:	bd70      	pop	{r4, r5, r6, pc}
 800f948:	2404be64 	.word	0x2404be64

0800f94c <_malloc_r>:
 800f94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f950:	1ccd      	adds	r5, r1, #3
 800f952:	f025 0503 	bic.w	r5, r5, #3
 800f956:	3508      	adds	r5, #8
 800f958:	2d0c      	cmp	r5, #12
 800f95a:	bf38      	it	cc
 800f95c:	250c      	movcc	r5, #12
 800f95e:	2d00      	cmp	r5, #0
 800f960:	4607      	mov	r7, r0
 800f962:	db01      	blt.n	800f968 <_malloc_r+0x1c>
 800f964:	42a9      	cmp	r1, r5
 800f966:	d905      	bls.n	800f974 <_malloc_r+0x28>
 800f968:	230c      	movs	r3, #12
 800f96a:	603b      	str	r3, [r7, #0]
 800f96c:	2600      	movs	r6, #0
 800f96e:	4630      	mov	r0, r6
 800f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f974:	4e2e      	ldr	r6, [pc, #184]	; (800fa30 <_malloc_r+0xe4>)
 800f976:	f000 fcb5 	bl	80102e4 <__malloc_lock>
 800f97a:	6833      	ldr	r3, [r6, #0]
 800f97c:	461c      	mov	r4, r3
 800f97e:	bb34      	cbnz	r4, 800f9ce <_malloc_r+0x82>
 800f980:	4629      	mov	r1, r5
 800f982:	4638      	mov	r0, r7
 800f984:	f7ff ffc2 	bl	800f90c <sbrk_aligned>
 800f988:	1c43      	adds	r3, r0, #1
 800f98a:	4604      	mov	r4, r0
 800f98c:	d14d      	bne.n	800fa2a <_malloc_r+0xde>
 800f98e:	6834      	ldr	r4, [r6, #0]
 800f990:	4626      	mov	r6, r4
 800f992:	2e00      	cmp	r6, #0
 800f994:	d140      	bne.n	800fa18 <_malloc_r+0xcc>
 800f996:	6823      	ldr	r3, [r4, #0]
 800f998:	4631      	mov	r1, r6
 800f99a:	4638      	mov	r0, r7
 800f99c:	eb04 0803 	add.w	r8, r4, r3
 800f9a0:	f000 fb36 	bl	8010010 <_sbrk_r>
 800f9a4:	4580      	cmp	r8, r0
 800f9a6:	d13a      	bne.n	800fa1e <_malloc_r+0xd2>
 800f9a8:	6821      	ldr	r1, [r4, #0]
 800f9aa:	3503      	adds	r5, #3
 800f9ac:	1a6d      	subs	r5, r5, r1
 800f9ae:	f025 0503 	bic.w	r5, r5, #3
 800f9b2:	3508      	adds	r5, #8
 800f9b4:	2d0c      	cmp	r5, #12
 800f9b6:	bf38      	it	cc
 800f9b8:	250c      	movcc	r5, #12
 800f9ba:	4629      	mov	r1, r5
 800f9bc:	4638      	mov	r0, r7
 800f9be:	f7ff ffa5 	bl	800f90c <sbrk_aligned>
 800f9c2:	3001      	adds	r0, #1
 800f9c4:	d02b      	beq.n	800fa1e <_malloc_r+0xd2>
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	442b      	add	r3, r5
 800f9ca:	6023      	str	r3, [r4, #0]
 800f9cc:	e00e      	b.n	800f9ec <_malloc_r+0xa0>
 800f9ce:	6822      	ldr	r2, [r4, #0]
 800f9d0:	1b52      	subs	r2, r2, r5
 800f9d2:	d41e      	bmi.n	800fa12 <_malloc_r+0xc6>
 800f9d4:	2a0b      	cmp	r2, #11
 800f9d6:	d916      	bls.n	800fa06 <_malloc_r+0xba>
 800f9d8:	1961      	adds	r1, r4, r5
 800f9da:	42a3      	cmp	r3, r4
 800f9dc:	6025      	str	r5, [r4, #0]
 800f9de:	bf18      	it	ne
 800f9e0:	6059      	strne	r1, [r3, #4]
 800f9e2:	6863      	ldr	r3, [r4, #4]
 800f9e4:	bf08      	it	eq
 800f9e6:	6031      	streq	r1, [r6, #0]
 800f9e8:	5162      	str	r2, [r4, r5]
 800f9ea:	604b      	str	r3, [r1, #4]
 800f9ec:	4638      	mov	r0, r7
 800f9ee:	f104 060b 	add.w	r6, r4, #11
 800f9f2:	f000 fc7d 	bl	80102f0 <__malloc_unlock>
 800f9f6:	f026 0607 	bic.w	r6, r6, #7
 800f9fa:	1d23      	adds	r3, r4, #4
 800f9fc:	1af2      	subs	r2, r6, r3
 800f9fe:	d0b6      	beq.n	800f96e <_malloc_r+0x22>
 800fa00:	1b9b      	subs	r3, r3, r6
 800fa02:	50a3      	str	r3, [r4, r2]
 800fa04:	e7b3      	b.n	800f96e <_malloc_r+0x22>
 800fa06:	6862      	ldr	r2, [r4, #4]
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	bf0c      	ite	eq
 800fa0c:	6032      	streq	r2, [r6, #0]
 800fa0e:	605a      	strne	r2, [r3, #4]
 800fa10:	e7ec      	b.n	800f9ec <_malloc_r+0xa0>
 800fa12:	4623      	mov	r3, r4
 800fa14:	6864      	ldr	r4, [r4, #4]
 800fa16:	e7b2      	b.n	800f97e <_malloc_r+0x32>
 800fa18:	4634      	mov	r4, r6
 800fa1a:	6876      	ldr	r6, [r6, #4]
 800fa1c:	e7b9      	b.n	800f992 <_malloc_r+0x46>
 800fa1e:	230c      	movs	r3, #12
 800fa20:	603b      	str	r3, [r7, #0]
 800fa22:	4638      	mov	r0, r7
 800fa24:	f000 fc64 	bl	80102f0 <__malloc_unlock>
 800fa28:	e7a1      	b.n	800f96e <_malloc_r+0x22>
 800fa2a:	6025      	str	r5, [r4, #0]
 800fa2c:	e7de      	b.n	800f9ec <_malloc_r+0xa0>
 800fa2e:	bf00      	nop
 800fa30:	2404be60 	.word	0x2404be60

0800fa34 <__sfputc_r>:
 800fa34:	6893      	ldr	r3, [r2, #8]
 800fa36:	3b01      	subs	r3, #1
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	b410      	push	{r4}
 800fa3c:	6093      	str	r3, [r2, #8]
 800fa3e:	da08      	bge.n	800fa52 <__sfputc_r+0x1e>
 800fa40:	6994      	ldr	r4, [r2, #24]
 800fa42:	42a3      	cmp	r3, r4
 800fa44:	db01      	blt.n	800fa4a <__sfputc_r+0x16>
 800fa46:	290a      	cmp	r1, #10
 800fa48:	d103      	bne.n	800fa52 <__sfputc_r+0x1e>
 800fa4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa4e:	f000 bb33 	b.w	80100b8 <__swbuf_r>
 800fa52:	6813      	ldr	r3, [r2, #0]
 800fa54:	1c58      	adds	r0, r3, #1
 800fa56:	6010      	str	r0, [r2, #0]
 800fa58:	7019      	strb	r1, [r3, #0]
 800fa5a:	4608      	mov	r0, r1
 800fa5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <__sfputs_r>:
 800fa62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa64:	4606      	mov	r6, r0
 800fa66:	460f      	mov	r7, r1
 800fa68:	4614      	mov	r4, r2
 800fa6a:	18d5      	adds	r5, r2, r3
 800fa6c:	42ac      	cmp	r4, r5
 800fa6e:	d101      	bne.n	800fa74 <__sfputs_r+0x12>
 800fa70:	2000      	movs	r0, #0
 800fa72:	e007      	b.n	800fa84 <__sfputs_r+0x22>
 800fa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa78:	463a      	mov	r2, r7
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	f7ff ffda 	bl	800fa34 <__sfputc_r>
 800fa80:	1c43      	adds	r3, r0, #1
 800fa82:	d1f3      	bne.n	800fa6c <__sfputs_r+0xa>
 800fa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa88 <_vfiprintf_r>:
 800fa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8c:	460d      	mov	r5, r1
 800fa8e:	b09d      	sub	sp, #116	; 0x74
 800fa90:	4614      	mov	r4, r2
 800fa92:	4698      	mov	r8, r3
 800fa94:	4606      	mov	r6, r0
 800fa96:	b118      	cbz	r0, 800faa0 <_vfiprintf_r+0x18>
 800fa98:	6983      	ldr	r3, [r0, #24]
 800fa9a:	b90b      	cbnz	r3, 800faa0 <_vfiprintf_r+0x18>
 800fa9c:	f7ff fddc 	bl	800f658 <__sinit>
 800faa0:	4b89      	ldr	r3, [pc, #548]	; (800fcc8 <_vfiprintf_r+0x240>)
 800faa2:	429d      	cmp	r5, r3
 800faa4:	d11b      	bne.n	800fade <_vfiprintf_r+0x56>
 800faa6:	6875      	ldr	r5, [r6, #4]
 800faa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faaa:	07d9      	lsls	r1, r3, #31
 800faac:	d405      	bmi.n	800faba <_vfiprintf_r+0x32>
 800faae:	89ab      	ldrh	r3, [r5, #12]
 800fab0:	059a      	lsls	r2, r3, #22
 800fab2:	d402      	bmi.n	800faba <_vfiprintf_r+0x32>
 800fab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fab6:	f7ff fe6d 	bl	800f794 <__retarget_lock_acquire_recursive>
 800faba:	89ab      	ldrh	r3, [r5, #12]
 800fabc:	071b      	lsls	r3, r3, #28
 800fabe:	d501      	bpl.n	800fac4 <_vfiprintf_r+0x3c>
 800fac0:	692b      	ldr	r3, [r5, #16]
 800fac2:	b9eb      	cbnz	r3, 800fb00 <_vfiprintf_r+0x78>
 800fac4:	4629      	mov	r1, r5
 800fac6:	4630      	mov	r0, r6
 800fac8:	f000 fb5a 	bl	8010180 <__swsetup_r>
 800facc:	b1c0      	cbz	r0, 800fb00 <_vfiprintf_r+0x78>
 800face:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fad0:	07dc      	lsls	r4, r3, #31
 800fad2:	d50e      	bpl.n	800faf2 <_vfiprintf_r+0x6a>
 800fad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fad8:	b01d      	add	sp, #116	; 0x74
 800fada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fade:	4b7b      	ldr	r3, [pc, #492]	; (800fccc <_vfiprintf_r+0x244>)
 800fae0:	429d      	cmp	r5, r3
 800fae2:	d101      	bne.n	800fae8 <_vfiprintf_r+0x60>
 800fae4:	68b5      	ldr	r5, [r6, #8]
 800fae6:	e7df      	b.n	800faa8 <_vfiprintf_r+0x20>
 800fae8:	4b79      	ldr	r3, [pc, #484]	; (800fcd0 <_vfiprintf_r+0x248>)
 800faea:	429d      	cmp	r5, r3
 800faec:	bf08      	it	eq
 800faee:	68f5      	ldreq	r5, [r6, #12]
 800faf0:	e7da      	b.n	800faa8 <_vfiprintf_r+0x20>
 800faf2:	89ab      	ldrh	r3, [r5, #12]
 800faf4:	0598      	lsls	r0, r3, #22
 800faf6:	d4ed      	bmi.n	800fad4 <_vfiprintf_r+0x4c>
 800faf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fafa:	f7ff fe4c 	bl	800f796 <__retarget_lock_release_recursive>
 800fafe:	e7e9      	b.n	800fad4 <_vfiprintf_r+0x4c>
 800fb00:	2300      	movs	r3, #0
 800fb02:	9309      	str	r3, [sp, #36]	; 0x24
 800fb04:	2320      	movs	r3, #32
 800fb06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb0e:	2330      	movs	r3, #48	; 0x30
 800fb10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fcd4 <_vfiprintf_r+0x24c>
 800fb14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb18:	f04f 0901 	mov.w	r9, #1
 800fb1c:	4623      	mov	r3, r4
 800fb1e:	469a      	mov	sl, r3
 800fb20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb24:	b10a      	cbz	r2, 800fb2a <_vfiprintf_r+0xa2>
 800fb26:	2a25      	cmp	r2, #37	; 0x25
 800fb28:	d1f9      	bne.n	800fb1e <_vfiprintf_r+0x96>
 800fb2a:	ebba 0b04 	subs.w	fp, sl, r4
 800fb2e:	d00b      	beq.n	800fb48 <_vfiprintf_r+0xc0>
 800fb30:	465b      	mov	r3, fp
 800fb32:	4622      	mov	r2, r4
 800fb34:	4629      	mov	r1, r5
 800fb36:	4630      	mov	r0, r6
 800fb38:	f7ff ff93 	bl	800fa62 <__sfputs_r>
 800fb3c:	3001      	adds	r0, #1
 800fb3e:	f000 80aa 	beq.w	800fc96 <_vfiprintf_r+0x20e>
 800fb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb44:	445a      	add	r2, fp
 800fb46:	9209      	str	r2, [sp, #36]	; 0x24
 800fb48:	f89a 3000 	ldrb.w	r3, [sl]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 80a2 	beq.w	800fc96 <_vfiprintf_r+0x20e>
 800fb52:	2300      	movs	r3, #0
 800fb54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb5c:	f10a 0a01 	add.w	sl, sl, #1
 800fb60:	9304      	str	r3, [sp, #16]
 800fb62:	9307      	str	r3, [sp, #28]
 800fb64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb68:	931a      	str	r3, [sp, #104]	; 0x68
 800fb6a:	4654      	mov	r4, sl
 800fb6c:	2205      	movs	r2, #5
 800fb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb72:	4858      	ldr	r0, [pc, #352]	; (800fcd4 <_vfiprintf_r+0x24c>)
 800fb74:	f7f0 fbbc 	bl	80002f0 <memchr>
 800fb78:	9a04      	ldr	r2, [sp, #16]
 800fb7a:	b9d8      	cbnz	r0, 800fbb4 <_vfiprintf_r+0x12c>
 800fb7c:	06d1      	lsls	r1, r2, #27
 800fb7e:	bf44      	itt	mi
 800fb80:	2320      	movmi	r3, #32
 800fb82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb86:	0713      	lsls	r3, r2, #28
 800fb88:	bf44      	itt	mi
 800fb8a:	232b      	movmi	r3, #43	; 0x2b
 800fb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb90:	f89a 3000 	ldrb.w	r3, [sl]
 800fb94:	2b2a      	cmp	r3, #42	; 0x2a
 800fb96:	d015      	beq.n	800fbc4 <_vfiprintf_r+0x13c>
 800fb98:	9a07      	ldr	r2, [sp, #28]
 800fb9a:	4654      	mov	r4, sl
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	f04f 0c0a 	mov.w	ip, #10
 800fba2:	4621      	mov	r1, r4
 800fba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fba8:	3b30      	subs	r3, #48	; 0x30
 800fbaa:	2b09      	cmp	r3, #9
 800fbac:	d94e      	bls.n	800fc4c <_vfiprintf_r+0x1c4>
 800fbae:	b1b0      	cbz	r0, 800fbde <_vfiprintf_r+0x156>
 800fbb0:	9207      	str	r2, [sp, #28]
 800fbb2:	e014      	b.n	800fbde <_vfiprintf_r+0x156>
 800fbb4:	eba0 0308 	sub.w	r3, r0, r8
 800fbb8:	fa09 f303 	lsl.w	r3, r9, r3
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	9304      	str	r3, [sp, #16]
 800fbc0:	46a2      	mov	sl, r4
 800fbc2:	e7d2      	b.n	800fb6a <_vfiprintf_r+0xe2>
 800fbc4:	9b03      	ldr	r3, [sp, #12]
 800fbc6:	1d19      	adds	r1, r3, #4
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	9103      	str	r1, [sp, #12]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	bfbb      	ittet	lt
 800fbd0:	425b      	neglt	r3, r3
 800fbd2:	f042 0202 	orrlt.w	r2, r2, #2
 800fbd6:	9307      	strge	r3, [sp, #28]
 800fbd8:	9307      	strlt	r3, [sp, #28]
 800fbda:	bfb8      	it	lt
 800fbdc:	9204      	strlt	r2, [sp, #16]
 800fbde:	7823      	ldrb	r3, [r4, #0]
 800fbe0:	2b2e      	cmp	r3, #46	; 0x2e
 800fbe2:	d10c      	bne.n	800fbfe <_vfiprintf_r+0x176>
 800fbe4:	7863      	ldrb	r3, [r4, #1]
 800fbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800fbe8:	d135      	bne.n	800fc56 <_vfiprintf_r+0x1ce>
 800fbea:	9b03      	ldr	r3, [sp, #12]
 800fbec:	1d1a      	adds	r2, r3, #4
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	9203      	str	r2, [sp, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	bfb8      	it	lt
 800fbf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fbfa:	3402      	adds	r4, #2
 800fbfc:	9305      	str	r3, [sp, #20]
 800fbfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fce4 <_vfiprintf_r+0x25c>
 800fc02:	7821      	ldrb	r1, [r4, #0]
 800fc04:	2203      	movs	r2, #3
 800fc06:	4650      	mov	r0, sl
 800fc08:	f7f0 fb72 	bl	80002f0 <memchr>
 800fc0c:	b140      	cbz	r0, 800fc20 <_vfiprintf_r+0x198>
 800fc0e:	2340      	movs	r3, #64	; 0x40
 800fc10:	eba0 000a 	sub.w	r0, r0, sl
 800fc14:	fa03 f000 	lsl.w	r0, r3, r0
 800fc18:	9b04      	ldr	r3, [sp, #16]
 800fc1a:	4303      	orrs	r3, r0
 800fc1c:	3401      	adds	r4, #1
 800fc1e:	9304      	str	r3, [sp, #16]
 800fc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc24:	482c      	ldr	r0, [pc, #176]	; (800fcd8 <_vfiprintf_r+0x250>)
 800fc26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc2a:	2206      	movs	r2, #6
 800fc2c:	f7f0 fb60 	bl	80002f0 <memchr>
 800fc30:	2800      	cmp	r0, #0
 800fc32:	d03f      	beq.n	800fcb4 <_vfiprintf_r+0x22c>
 800fc34:	4b29      	ldr	r3, [pc, #164]	; (800fcdc <_vfiprintf_r+0x254>)
 800fc36:	bb1b      	cbnz	r3, 800fc80 <_vfiprintf_r+0x1f8>
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	3307      	adds	r3, #7
 800fc3c:	f023 0307 	bic.w	r3, r3, #7
 800fc40:	3308      	adds	r3, #8
 800fc42:	9303      	str	r3, [sp, #12]
 800fc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc46:	443b      	add	r3, r7
 800fc48:	9309      	str	r3, [sp, #36]	; 0x24
 800fc4a:	e767      	b.n	800fb1c <_vfiprintf_r+0x94>
 800fc4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc50:	460c      	mov	r4, r1
 800fc52:	2001      	movs	r0, #1
 800fc54:	e7a5      	b.n	800fba2 <_vfiprintf_r+0x11a>
 800fc56:	2300      	movs	r3, #0
 800fc58:	3401      	adds	r4, #1
 800fc5a:	9305      	str	r3, [sp, #20]
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	f04f 0c0a 	mov.w	ip, #10
 800fc62:	4620      	mov	r0, r4
 800fc64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc68:	3a30      	subs	r2, #48	; 0x30
 800fc6a:	2a09      	cmp	r2, #9
 800fc6c:	d903      	bls.n	800fc76 <_vfiprintf_r+0x1ee>
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d0c5      	beq.n	800fbfe <_vfiprintf_r+0x176>
 800fc72:	9105      	str	r1, [sp, #20]
 800fc74:	e7c3      	b.n	800fbfe <_vfiprintf_r+0x176>
 800fc76:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e7f0      	b.n	800fc62 <_vfiprintf_r+0x1da>
 800fc80:	ab03      	add	r3, sp, #12
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	462a      	mov	r2, r5
 800fc86:	4b16      	ldr	r3, [pc, #88]	; (800fce0 <_vfiprintf_r+0x258>)
 800fc88:	a904      	add	r1, sp, #16
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f3af 8000 	nop.w
 800fc90:	4607      	mov	r7, r0
 800fc92:	1c78      	adds	r0, r7, #1
 800fc94:	d1d6      	bne.n	800fc44 <_vfiprintf_r+0x1bc>
 800fc96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc98:	07d9      	lsls	r1, r3, #31
 800fc9a:	d405      	bmi.n	800fca8 <_vfiprintf_r+0x220>
 800fc9c:	89ab      	ldrh	r3, [r5, #12]
 800fc9e:	059a      	lsls	r2, r3, #22
 800fca0:	d402      	bmi.n	800fca8 <_vfiprintf_r+0x220>
 800fca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fca4:	f7ff fd77 	bl	800f796 <__retarget_lock_release_recursive>
 800fca8:	89ab      	ldrh	r3, [r5, #12]
 800fcaa:	065b      	lsls	r3, r3, #25
 800fcac:	f53f af12 	bmi.w	800fad4 <_vfiprintf_r+0x4c>
 800fcb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcb2:	e711      	b.n	800fad8 <_vfiprintf_r+0x50>
 800fcb4:	ab03      	add	r3, sp, #12
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	462a      	mov	r2, r5
 800fcba:	4b09      	ldr	r3, [pc, #36]	; (800fce0 <_vfiprintf_r+0x258>)
 800fcbc:	a904      	add	r1, sp, #16
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f000 f880 	bl	800fdc4 <_printf_i>
 800fcc4:	e7e4      	b.n	800fc90 <_vfiprintf_r+0x208>
 800fcc6:	bf00      	nop
 800fcc8:	080109b4 	.word	0x080109b4
 800fccc:	080109d4 	.word	0x080109d4
 800fcd0:	08010994 	.word	0x08010994
 800fcd4:	080109f4 	.word	0x080109f4
 800fcd8:	080109fe 	.word	0x080109fe
 800fcdc:	00000000 	.word	0x00000000
 800fce0:	0800fa63 	.word	0x0800fa63
 800fce4:	080109fa 	.word	0x080109fa

0800fce8 <_printf_common>:
 800fce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcec:	4616      	mov	r6, r2
 800fcee:	4699      	mov	r9, r3
 800fcf0:	688a      	ldr	r2, [r1, #8]
 800fcf2:	690b      	ldr	r3, [r1, #16]
 800fcf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	bfb8      	it	lt
 800fcfc:	4613      	movlt	r3, r2
 800fcfe:	6033      	str	r3, [r6, #0]
 800fd00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd04:	4607      	mov	r7, r0
 800fd06:	460c      	mov	r4, r1
 800fd08:	b10a      	cbz	r2, 800fd0e <_printf_common+0x26>
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	6033      	str	r3, [r6, #0]
 800fd0e:	6823      	ldr	r3, [r4, #0]
 800fd10:	0699      	lsls	r1, r3, #26
 800fd12:	bf42      	ittt	mi
 800fd14:	6833      	ldrmi	r3, [r6, #0]
 800fd16:	3302      	addmi	r3, #2
 800fd18:	6033      	strmi	r3, [r6, #0]
 800fd1a:	6825      	ldr	r5, [r4, #0]
 800fd1c:	f015 0506 	ands.w	r5, r5, #6
 800fd20:	d106      	bne.n	800fd30 <_printf_common+0x48>
 800fd22:	f104 0a19 	add.w	sl, r4, #25
 800fd26:	68e3      	ldr	r3, [r4, #12]
 800fd28:	6832      	ldr	r2, [r6, #0]
 800fd2a:	1a9b      	subs	r3, r3, r2
 800fd2c:	42ab      	cmp	r3, r5
 800fd2e:	dc26      	bgt.n	800fd7e <_printf_common+0x96>
 800fd30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd34:	1e13      	subs	r3, r2, #0
 800fd36:	6822      	ldr	r2, [r4, #0]
 800fd38:	bf18      	it	ne
 800fd3a:	2301      	movne	r3, #1
 800fd3c:	0692      	lsls	r2, r2, #26
 800fd3e:	d42b      	bmi.n	800fd98 <_printf_common+0xb0>
 800fd40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd44:	4649      	mov	r1, r9
 800fd46:	4638      	mov	r0, r7
 800fd48:	47c0      	blx	r8
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	d01e      	beq.n	800fd8c <_printf_common+0xa4>
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	68e5      	ldr	r5, [r4, #12]
 800fd52:	6832      	ldr	r2, [r6, #0]
 800fd54:	f003 0306 	and.w	r3, r3, #6
 800fd58:	2b04      	cmp	r3, #4
 800fd5a:	bf08      	it	eq
 800fd5c:	1aad      	subeq	r5, r5, r2
 800fd5e:	68a3      	ldr	r3, [r4, #8]
 800fd60:	6922      	ldr	r2, [r4, #16]
 800fd62:	bf0c      	ite	eq
 800fd64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd68:	2500      	movne	r5, #0
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	bfc4      	itt	gt
 800fd6e:	1a9b      	subgt	r3, r3, r2
 800fd70:	18ed      	addgt	r5, r5, r3
 800fd72:	2600      	movs	r6, #0
 800fd74:	341a      	adds	r4, #26
 800fd76:	42b5      	cmp	r5, r6
 800fd78:	d11a      	bne.n	800fdb0 <_printf_common+0xc8>
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	e008      	b.n	800fd90 <_printf_common+0xa8>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	4652      	mov	r2, sl
 800fd82:	4649      	mov	r1, r9
 800fd84:	4638      	mov	r0, r7
 800fd86:	47c0      	blx	r8
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d103      	bne.n	800fd94 <_printf_common+0xac>
 800fd8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd94:	3501      	adds	r5, #1
 800fd96:	e7c6      	b.n	800fd26 <_printf_common+0x3e>
 800fd98:	18e1      	adds	r1, r4, r3
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	2030      	movs	r0, #48	; 0x30
 800fd9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fda2:	4422      	add	r2, r4
 800fda4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fda8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fdac:	3302      	adds	r3, #2
 800fdae:	e7c7      	b.n	800fd40 <_printf_common+0x58>
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	4622      	mov	r2, r4
 800fdb4:	4649      	mov	r1, r9
 800fdb6:	4638      	mov	r0, r7
 800fdb8:	47c0      	blx	r8
 800fdba:	3001      	adds	r0, #1
 800fdbc:	d0e6      	beq.n	800fd8c <_printf_common+0xa4>
 800fdbe:	3601      	adds	r6, #1
 800fdc0:	e7d9      	b.n	800fd76 <_printf_common+0x8e>
	...

0800fdc4 <_printf_i>:
 800fdc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc8:	7e0f      	ldrb	r7, [r1, #24]
 800fdca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fdcc:	2f78      	cmp	r7, #120	; 0x78
 800fdce:	4691      	mov	r9, r2
 800fdd0:	4680      	mov	r8, r0
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	469a      	mov	sl, r3
 800fdd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fdda:	d807      	bhi.n	800fdec <_printf_i+0x28>
 800fddc:	2f62      	cmp	r7, #98	; 0x62
 800fdde:	d80a      	bhi.n	800fdf6 <_printf_i+0x32>
 800fde0:	2f00      	cmp	r7, #0
 800fde2:	f000 80d8 	beq.w	800ff96 <_printf_i+0x1d2>
 800fde6:	2f58      	cmp	r7, #88	; 0x58
 800fde8:	f000 80a3 	beq.w	800ff32 <_printf_i+0x16e>
 800fdec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdf4:	e03a      	b.n	800fe6c <_printf_i+0xa8>
 800fdf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdfa:	2b15      	cmp	r3, #21
 800fdfc:	d8f6      	bhi.n	800fdec <_printf_i+0x28>
 800fdfe:	a101      	add	r1, pc, #4	; (adr r1, 800fe04 <_printf_i+0x40>)
 800fe00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe04:	0800fe5d 	.word	0x0800fe5d
 800fe08:	0800fe71 	.word	0x0800fe71
 800fe0c:	0800fded 	.word	0x0800fded
 800fe10:	0800fded 	.word	0x0800fded
 800fe14:	0800fded 	.word	0x0800fded
 800fe18:	0800fded 	.word	0x0800fded
 800fe1c:	0800fe71 	.word	0x0800fe71
 800fe20:	0800fded 	.word	0x0800fded
 800fe24:	0800fded 	.word	0x0800fded
 800fe28:	0800fded 	.word	0x0800fded
 800fe2c:	0800fded 	.word	0x0800fded
 800fe30:	0800ff7d 	.word	0x0800ff7d
 800fe34:	0800fea1 	.word	0x0800fea1
 800fe38:	0800ff5f 	.word	0x0800ff5f
 800fe3c:	0800fded 	.word	0x0800fded
 800fe40:	0800fded 	.word	0x0800fded
 800fe44:	0800ff9f 	.word	0x0800ff9f
 800fe48:	0800fded 	.word	0x0800fded
 800fe4c:	0800fea1 	.word	0x0800fea1
 800fe50:	0800fded 	.word	0x0800fded
 800fe54:	0800fded 	.word	0x0800fded
 800fe58:	0800ff67 	.word	0x0800ff67
 800fe5c:	682b      	ldr	r3, [r5, #0]
 800fe5e:	1d1a      	adds	r2, r3, #4
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	602a      	str	r2, [r5, #0]
 800fe64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	e0a3      	b.n	800ffb8 <_printf_i+0x1f4>
 800fe70:	6820      	ldr	r0, [r4, #0]
 800fe72:	6829      	ldr	r1, [r5, #0]
 800fe74:	0606      	lsls	r6, r0, #24
 800fe76:	f101 0304 	add.w	r3, r1, #4
 800fe7a:	d50a      	bpl.n	800fe92 <_printf_i+0xce>
 800fe7c:	680e      	ldr	r6, [r1, #0]
 800fe7e:	602b      	str	r3, [r5, #0]
 800fe80:	2e00      	cmp	r6, #0
 800fe82:	da03      	bge.n	800fe8c <_printf_i+0xc8>
 800fe84:	232d      	movs	r3, #45	; 0x2d
 800fe86:	4276      	negs	r6, r6
 800fe88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe8c:	485e      	ldr	r0, [pc, #376]	; (8010008 <_printf_i+0x244>)
 800fe8e:	230a      	movs	r3, #10
 800fe90:	e019      	b.n	800fec6 <_printf_i+0x102>
 800fe92:	680e      	ldr	r6, [r1, #0]
 800fe94:	602b      	str	r3, [r5, #0]
 800fe96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe9a:	bf18      	it	ne
 800fe9c:	b236      	sxthne	r6, r6
 800fe9e:	e7ef      	b.n	800fe80 <_printf_i+0xbc>
 800fea0:	682b      	ldr	r3, [r5, #0]
 800fea2:	6820      	ldr	r0, [r4, #0]
 800fea4:	1d19      	adds	r1, r3, #4
 800fea6:	6029      	str	r1, [r5, #0]
 800fea8:	0601      	lsls	r1, r0, #24
 800feaa:	d501      	bpl.n	800feb0 <_printf_i+0xec>
 800feac:	681e      	ldr	r6, [r3, #0]
 800feae:	e002      	b.n	800feb6 <_printf_i+0xf2>
 800feb0:	0646      	lsls	r6, r0, #25
 800feb2:	d5fb      	bpl.n	800feac <_printf_i+0xe8>
 800feb4:	881e      	ldrh	r6, [r3, #0]
 800feb6:	4854      	ldr	r0, [pc, #336]	; (8010008 <_printf_i+0x244>)
 800feb8:	2f6f      	cmp	r7, #111	; 0x6f
 800feba:	bf0c      	ite	eq
 800febc:	2308      	moveq	r3, #8
 800febe:	230a      	movne	r3, #10
 800fec0:	2100      	movs	r1, #0
 800fec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fec6:	6865      	ldr	r5, [r4, #4]
 800fec8:	60a5      	str	r5, [r4, #8]
 800feca:	2d00      	cmp	r5, #0
 800fecc:	bfa2      	ittt	ge
 800fece:	6821      	ldrge	r1, [r4, #0]
 800fed0:	f021 0104 	bicge.w	r1, r1, #4
 800fed4:	6021      	strge	r1, [r4, #0]
 800fed6:	b90e      	cbnz	r6, 800fedc <_printf_i+0x118>
 800fed8:	2d00      	cmp	r5, #0
 800feda:	d04d      	beq.n	800ff78 <_printf_i+0x1b4>
 800fedc:	4615      	mov	r5, r2
 800fede:	fbb6 f1f3 	udiv	r1, r6, r3
 800fee2:	fb03 6711 	mls	r7, r3, r1, r6
 800fee6:	5dc7      	ldrb	r7, [r0, r7]
 800fee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800feec:	4637      	mov	r7, r6
 800feee:	42bb      	cmp	r3, r7
 800fef0:	460e      	mov	r6, r1
 800fef2:	d9f4      	bls.n	800fede <_printf_i+0x11a>
 800fef4:	2b08      	cmp	r3, #8
 800fef6:	d10b      	bne.n	800ff10 <_printf_i+0x14c>
 800fef8:	6823      	ldr	r3, [r4, #0]
 800fefa:	07de      	lsls	r6, r3, #31
 800fefc:	d508      	bpl.n	800ff10 <_printf_i+0x14c>
 800fefe:	6923      	ldr	r3, [r4, #16]
 800ff00:	6861      	ldr	r1, [r4, #4]
 800ff02:	4299      	cmp	r1, r3
 800ff04:	bfde      	ittt	le
 800ff06:	2330      	movle	r3, #48	; 0x30
 800ff08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ff0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ff10:	1b52      	subs	r2, r2, r5
 800ff12:	6122      	str	r2, [r4, #16]
 800ff14:	f8cd a000 	str.w	sl, [sp]
 800ff18:	464b      	mov	r3, r9
 800ff1a:	aa03      	add	r2, sp, #12
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	4640      	mov	r0, r8
 800ff20:	f7ff fee2 	bl	800fce8 <_printf_common>
 800ff24:	3001      	adds	r0, #1
 800ff26:	d14c      	bne.n	800ffc2 <_printf_i+0x1fe>
 800ff28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff2c:	b004      	add	sp, #16
 800ff2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff32:	4835      	ldr	r0, [pc, #212]	; (8010008 <_printf_i+0x244>)
 800ff34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ff38:	6829      	ldr	r1, [r5, #0]
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff40:	6029      	str	r1, [r5, #0]
 800ff42:	061d      	lsls	r5, r3, #24
 800ff44:	d514      	bpl.n	800ff70 <_printf_i+0x1ac>
 800ff46:	07df      	lsls	r7, r3, #31
 800ff48:	bf44      	itt	mi
 800ff4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ff4e:	6023      	strmi	r3, [r4, #0]
 800ff50:	b91e      	cbnz	r6, 800ff5a <_printf_i+0x196>
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	f023 0320 	bic.w	r3, r3, #32
 800ff58:	6023      	str	r3, [r4, #0]
 800ff5a:	2310      	movs	r3, #16
 800ff5c:	e7b0      	b.n	800fec0 <_printf_i+0xfc>
 800ff5e:	6823      	ldr	r3, [r4, #0]
 800ff60:	f043 0320 	orr.w	r3, r3, #32
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	2378      	movs	r3, #120	; 0x78
 800ff68:	4828      	ldr	r0, [pc, #160]	; (801000c <_printf_i+0x248>)
 800ff6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff6e:	e7e3      	b.n	800ff38 <_printf_i+0x174>
 800ff70:	0659      	lsls	r1, r3, #25
 800ff72:	bf48      	it	mi
 800ff74:	b2b6      	uxthmi	r6, r6
 800ff76:	e7e6      	b.n	800ff46 <_printf_i+0x182>
 800ff78:	4615      	mov	r5, r2
 800ff7a:	e7bb      	b.n	800fef4 <_printf_i+0x130>
 800ff7c:	682b      	ldr	r3, [r5, #0]
 800ff7e:	6826      	ldr	r6, [r4, #0]
 800ff80:	6961      	ldr	r1, [r4, #20]
 800ff82:	1d18      	adds	r0, r3, #4
 800ff84:	6028      	str	r0, [r5, #0]
 800ff86:	0635      	lsls	r5, r6, #24
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	d501      	bpl.n	800ff90 <_printf_i+0x1cc>
 800ff8c:	6019      	str	r1, [r3, #0]
 800ff8e:	e002      	b.n	800ff96 <_printf_i+0x1d2>
 800ff90:	0670      	lsls	r0, r6, #25
 800ff92:	d5fb      	bpl.n	800ff8c <_printf_i+0x1c8>
 800ff94:	8019      	strh	r1, [r3, #0]
 800ff96:	2300      	movs	r3, #0
 800ff98:	6123      	str	r3, [r4, #16]
 800ff9a:	4615      	mov	r5, r2
 800ff9c:	e7ba      	b.n	800ff14 <_printf_i+0x150>
 800ff9e:	682b      	ldr	r3, [r5, #0]
 800ffa0:	1d1a      	adds	r2, r3, #4
 800ffa2:	602a      	str	r2, [r5, #0]
 800ffa4:	681d      	ldr	r5, [r3, #0]
 800ffa6:	6862      	ldr	r2, [r4, #4]
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	4628      	mov	r0, r5
 800ffac:	f7f0 f9a0 	bl	80002f0 <memchr>
 800ffb0:	b108      	cbz	r0, 800ffb6 <_printf_i+0x1f2>
 800ffb2:	1b40      	subs	r0, r0, r5
 800ffb4:	6060      	str	r0, [r4, #4]
 800ffb6:	6863      	ldr	r3, [r4, #4]
 800ffb8:	6123      	str	r3, [r4, #16]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffc0:	e7a8      	b.n	800ff14 <_printf_i+0x150>
 800ffc2:	6923      	ldr	r3, [r4, #16]
 800ffc4:	462a      	mov	r2, r5
 800ffc6:	4649      	mov	r1, r9
 800ffc8:	4640      	mov	r0, r8
 800ffca:	47d0      	blx	sl
 800ffcc:	3001      	adds	r0, #1
 800ffce:	d0ab      	beq.n	800ff28 <_printf_i+0x164>
 800ffd0:	6823      	ldr	r3, [r4, #0]
 800ffd2:	079b      	lsls	r3, r3, #30
 800ffd4:	d413      	bmi.n	800fffe <_printf_i+0x23a>
 800ffd6:	68e0      	ldr	r0, [r4, #12]
 800ffd8:	9b03      	ldr	r3, [sp, #12]
 800ffda:	4298      	cmp	r0, r3
 800ffdc:	bfb8      	it	lt
 800ffde:	4618      	movlt	r0, r3
 800ffe0:	e7a4      	b.n	800ff2c <_printf_i+0x168>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	4632      	mov	r2, r6
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	4640      	mov	r0, r8
 800ffea:	47d0      	blx	sl
 800ffec:	3001      	adds	r0, #1
 800ffee:	d09b      	beq.n	800ff28 <_printf_i+0x164>
 800fff0:	3501      	adds	r5, #1
 800fff2:	68e3      	ldr	r3, [r4, #12]
 800fff4:	9903      	ldr	r1, [sp, #12]
 800fff6:	1a5b      	subs	r3, r3, r1
 800fff8:	42ab      	cmp	r3, r5
 800fffa:	dcf2      	bgt.n	800ffe2 <_printf_i+0x21e>
 800fffc:	e7eb      	b.n	800ffd6 <_printf_i+0x212>
 800fffe:	2500      	movs	r5, #0
 8010000:	f104 0619 	add.w	r6, r4, #25
 8010004:	e7f5      	b.n	800fff2 <_printf_i+0x22e>
 8010006:	bf00      	nop
 8010008:	08010a05 	.word	0x08010a05
 801000c:	08010a16 	.word	0x08010a16

08010010 <_sbrk_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	4d06      	ldr	r5, [pc, #24]	; (801002c <_sbrk_r+0x1c>)
 8010014:	2300      	movs	r3, #0
 8010016:	4604      	mov	r4, r0
 8010018:	4608      	mov	r0, r1
 801001a:	602b      	str	r3, [r5, #0]
 801001c:	f7f3 ff72 	bl	8003f04 <_sbrk>
 8010020:	1c43      	adds	r3, r0, #1
 8010022:	d102      	bne.n	801002a <_sbrk_r+0x1a>
 8010024:	682b      	ldr	r3, [r5, #0]
 8010026:	b103      	cbz	r3, 801002a <_sbrk_r+0x1a>
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	bd38      	pop	{r3, r4, r5, pc}
 801002c:	2404be68 	.word	0x2404be68

08010030 <__sread>:
 8010030:	b510      	push	{r4, lr}
 8010032:	460c      	mov	r4, r1
 8010034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010038:	f000 f960 	bl	80102fc <_read_r>
 801003c:	2800      	cmp	r0, #0
 801003e:	bfab      	itete	ge
 8010040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010042:	89a3      	ldrhlt	r3, [r4, #12]
 8010044:	181b      	addge	r3, r3, r0
 8010046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801004a:	bfac      	ite	ge
 801004c:	6563      	strge	r3, [r4, #84]	; 0x54
 801004e:	81a3      	strhlt	r3, [r4, #12]
 8010050:	bd10      	pop	{r4, pc}

08010052 <__swrite>:
 8010052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010056:	461f      	mov	r7, r3
 8010058:	898b      	ldrh	r3, [r1, #12]
 801005a:	05db      	lsls	r3, r3, #23
 801005c:	4605      	mov	r5, r0
 801005e:	460c      	mov	r4, r1
 8010060:	4616      	mov	r6, r2
 8010062:	d505      	bpl.n	8010070 <__swrite+0x1e>
 8010064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010068:	2302      	movs	r3, #2
 801006a:	2200      	movs	r2, #0
 801006c:	f000 f928 	bl	80102c0 <_lseek_r>
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	4632      	mov	r2, r6
 801007e:	463b      	mov	r3, r7
 8010080:	4628      	mov	r0, r5
 8010082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010086:	f000 b869 	b.w	801015c <_write_r>

0801008a <__sseek>:
 801008a:	b510      	push	{r4, lr}
 801008c:	460c      	mov	r4, r1
 801008e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010092:	f000 f915 	bl	80102c0 <_lseek_r>
 8010096:	1c43      	adds	r3, r0, #1
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	bf15      	itete	ne
 801009c:	6560      	strne	r0, [r4, #84]	; 0x54
 801009e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100a6:	81a3      	strheq	r3, [r4, #12]
 80100a8:	bf18      	it	ne
 80100aa:	81a3      	strhne	r3, [r4, #12]
 80100ac:	bd10      	pop	{r4, pc}

080100ae <__sclose>:
 80100ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b2:	f000 b8d3 	b.w	801025c <_close_r>
	...

080100b8 <__swbuf_r>:
 80100b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ba:	460e      	mov	r6, r1
 80100bc:	4614      	mov	r4, r2
 80100be:	4605      	mov	r5, r0
 80100c0:	b118      	cbz	r0, 80100ca <__swbuf_r+0x12>
 80100c2:	6983      	ldr	r3, [r0, #24]
 80100c4:	b90b      	cbnz	r3, 80100ca <__swbuf_r+0x12>
 80100c6:	f7ff fac7 	bl	800f658 <__sinit>
 80100ca:	4b21      	ldr	r3, [pc, #132]	; (8010150 <__swbuf_r+0x98>)
 80100cc:	429c      	cmp	r4, r3
 80100ce:	d12b      	bne.n	8010128 <__swbuf_r+0x70>
 80100d0:	686c      	ldr	r4, [r5, #4]
 80100d2:	69a3      	ldr	r3, [r4, #24]
 80100d4:	60a3      	str	r3, [r4, #8]
 80100d6:	89a3      	ldrh	r3, [r4, #12]
 80100d8:	071a      	lsls	r2, r3, #28
 80100da:	d52f      	bpl.n	801013c <__swbuf_r+0x84>
 80100dc:	6923      	ldr	r3, [r4, #16]
 80100de:	b36b      	cbz	r3, 801013c <__swbuf_r+0x84>
 80100e0:	6923      	ldr	r3, [r4, #16]
 80100e2:	6820      	ldr	r0, [r4, #0]
 80100e4:	1ac0      	subs	r0, r0, r3
 80100e6:	6963      	ldr	r3, [r4, #20]
 80100e8:	b2f6      	uxtb	r6, r6
 80100ea:	4283      	cmp	r3, r0
 80100ec:	4637      	mov	r7, r6
 80100ee:	dc04      	bgt.n	80100fa <__swbuf_r+0x42>
 80100f0:	4621      	mov	r1, r4
 80100f2:	4628      	mov	r0, r5
 80100f4:	f7ff fa1c 	bl	800f530 <_fflush_r>
 80100f8:	bb30      	cbnz	r0, 8010148 <__swbuf_r+0x90>
 80100fa:	68a3      	ldr	r3, [r4, #8]
 80100fc:	3b01      	subs	r3, #1
 80100fe:	60a3      	str	r3, [r4, #8]
 8010100:	6823      	ldr	r3, [r4, #0]
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	6022      	str	r2, [r4, #0]
 8010106:	701e      	strb	r6, [r3, #0]
 8010108:	6963      	ldr	r3, [r4, #20]
 801010a:	3001      	adds	r0, #1
 801010c:	4283      	cmp	r3, r0
 801010e:	d004      	beq.n	801011a <__swbuf_r+0x62>
 8010110:	89a3      	ldrh	r3, [r4, #12]
 8010112:	07db      	lsls	r3, r3, #31
 8010114:	d506      	bpl.n	8010124 <__swbuf_r+0x6c>
 8010116:	2e0a      	cmp	r6, #10
 8010118:	d104      	bne.n	8010124 <__swbuf_r+0x6c>
 801011a:	4621      	mov	r1, r4
 801011c:	4628      	mov	r0, r5
 801011e:	f7ff fa07 	bl	800f530 <_fflush_r>
 8010122:	b988      	cbnz	r0, 8010148 <__swbuf_r+0x90>
 8010124:	4638      	mov	r0, r7
 8010126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010128:	4b0a      	ldr	r3, [pc, #40]	; (8010154 <__swbuf_r+0x9c>)
 801012a:	429c      	cmp	r4, r3
 801012c:	d101      	bne.n	8010132 <__swbuf_r+0x7a>
 801012e:	68ac      	ldr	r4, [r5, #8]
 8010130:	e7cf      	b.n	80100d2 <__swbuf_r+0x1a>
 8010132:	4b09      	ldr	r3, [pc, #36]	; (8010158 <__swbuf_r+0xa0>)
 8010134:	429c      	cmp	r4, r3
 8010136:	bf08      	it	eq
 8010138:	68ec      	ldreq	r4, [r5, #12]
 801013a:	e7ca      	b.n	80100d2 <__swbuf_r+0x1a>
 801013c:	4621      	mov	r1, r4
 801013e:	4628      	mov	r0, r5
 8010140:	f000 f81e 	bl	8010180 <__swsetup_r>
 8010144:	2800      	cmp	r0, #0
 8010146:	d0cb      	beq.n	80100e0 <__swbuf_r+0x28>
 8010148:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801014c:	e7ea      	b.n	8010124 <__swbuf_r+0x6c>
 801014e:	bf00      	nop
 8010150:	080109b4 	.word	0x080109b4
 8010154:	080109d4 	.word	0x080109d4
 8010158:	08010994 	.word	0x08010994

0801015c <_write_r>:
 801015c:	b538      	push	{r3, r4, r5, lr}
 801015e:	4d07      	ldr	r5, [pc, #28]	; (801017c <_write_r+0x20>)
 8010160:	4604      	mov	r4, r0
 8010162:	4608      	mov	r0, r1
 8010164:	4611      	mov	r1, r2
 8010166:	2200      	movs	r2, #0
 8010168:	602a      	str	r2, [r5, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	f7f2 fc0c 	bl	8002988 <_write>
 8010170:	1c43      	adds	r3, r0, #1
 8010172:	d102      	bne.n	801017a <_write_r+0x1e>
 8010174:	682b      	ldr	r3, [r5, #0]
 8010176:	b103      	cbz	r3, 801017a <_write_r+0x1e>
 8010178:	6023      	str	r3, [r4, #0]
 801017a:	bd38      	pop	{r3, r4, r5, pc}
 801017c:	2404be68 	.word	0x2404be68

08010180 <__swsetup_r>:
 8010180:	4b32      	ldr	r3, [pc, #200]	; (801024c <__swsetup_r+0xcc>)
 8010182:	b570      	push	{r4, r5, r6, lr}
 8010184:	681d      	ldr	r5, [r3, #0]
 8010186:	4606      	mov	r6, r0
 8010188:	460c      	mov	r4, r1
 801018a:	b125      	cbz	r5, 8010196 <__swsetup_r+0x16>
 801018c:	69ab      	ldr	r3, [r5, #24]
 801018e:	b913      	cbnz	r3, 8010196 <__swsetup_r+0x16>
 8010190:	4628      	mov	r0, r5
 8010192:	f7ff fa61 	bl	800f658 <__sinit>
 8010196:	4b2e      	ldr	r3, [pc, #184]	; (8010250 <__swsetup_r+0xd0>)
 8010198:	429c      	cmp	r4, r3
 801019a:	d10f      	bne.n	80101bc <__swsetup_r+0x3c>
 801019c:	686c      	ldr	r4, [r5, #4]
 801019e:	89a3      	ldrh	r3, [r4, #12]
 80101a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101a4:	0719      	lsls	r1, r3, #28
 80101a6:	d42c      	bmi.n	8010202 <__swsetup_r+0x82>
 80101a8:	06dd      	lsls	r5, r3, #27
 80101aa:	d411      	bmi.n	80101d0 <__swsetup_r+0x50>
 80101ac:	2309      	movs	r3, #9
 80101ae:	6033      	str	r3, [r6, #0]
 80101b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101b4:	81a3      	strh	r3, [r4, #12]
 80101b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101ba:	e03e      	b.n	801023a <__swsetup_r+0xba>
 80101bc:	4b25      	ldr	r3, [pc, #148]	; (8010254 <__swsetup_r+0xd4>)
 80101be:	429c      	cmp	r4, r3
 80101c0:	d101      	bne.n	80101c6 <__swsetup_r+0x46>
 80101c2:	68ac      	ldr	r4, [r5, #8]
 80101c4:	e7eb      	b.n	801019e <__swsetup_r+0x1e>
 80101c6:	4b24      	ldr	r3, [pc, #144]	; (8010258 <__swsetup_r+0xd8>)
 80101c8:	429c      	cmp	r4, r3
 80101ca:	bf08      	it	eq
 80101cc:	68ec      	ldreq	r4, [r5, #12]
 80101ce:	e7e6      	b.n	801019e <__swsetup_r+0x1e>
 80101d0:	0758      	lsls	r0, r3, #29
 80101d2:	d512      	bpl.n	80101fa <__swsetup_r+0x7a>
 80101d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101d6:	b141      	cbz	r1, 80101ea <__swsetup_r+0x6a>
 80101d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101dc:	4299      	cmp	r1, r3
 80101de:	d002      	beq.n	80101e6 <__swsetup_r+0x66>
 80101e0:	4630      	mov	r0, r6
 80101e2:	f7ff fb47 	bl	800f874 <_free_r>
 80101e6:	2300      	movs	r3, #0
 80101e8:	6363      	str	r3, [r4, #52]	; 0x34
 80101ea:	89a3      	ldrh	r3, [r4, #12]
 80101ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101f0:	81a3      	strh	r3, [r4, #12]
 80101f2:	2300      	movs	r3, #0
 80101f4:	6063      	str	r3, [r4, #4]
 80101f6:	6923      	ldr	r3, [r4, #16]
 80101f8:	6023      	str	r3, [r4, #0]
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f043 0308 	orr.w	r3, r3, #8
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	6923      	ldr	r3, [r4, #16]
 8010204:	b94b      	cbnz	r3, 801021a <__swsetup_r+0x9a>
 8010206:	89a3      	ldrh	r3, [r4, #12]
 8010208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801020c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010210:	d003      	beq.n	801021a <__swsetup_r+0x9a>
 8010212:	4621      	mov	r1, r4
 8010214:	4630      	mov	r0, r6
 8010216:	f7ff fae5 	bl	800f7e4 <__smakebuf_r>
 801021a:	89a0      	ldrh	r0, [r4, #12]
 801021c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010220:	f010 0301 	ands.w	r3, r0, #1
 8010224:	d00a      	beq.n	801023c <__swsetup_r+0xbc>
 8010226:	2300      	movs	r3, #0
 8010228:	60a3      	str	r3, [r4, #8]
 801022a:	6963      	ldr	r3, [r4, #20]
 801022c:	425b      	negs	r3, r3
 801022e:	61a3      	str	r3, [r4, #24]
 8010230:	6923      	ldr	r3, [r4, #16]
 8010232:	b943      	cbnz	r3, 8010246 <__swsetup_r+0xc6>
 8010234:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010238:	d1ba      	bne.n	80101b0 <__swsetup_r+0x30>
 801023a:	bd70      	pop	{r4, r5, r6, pc}
 801023c:	0781      	lsls	r1, r0, #30
 801023e:	bf58      	it	pl
 8010240:	6963      	ldrpl	r3, [r4, #20]
 8010242:	60a3      	str	r3, [r4, #8]
 8010244:	e7f4      	b.n	8010230 <__swsetup_r+0xb0>
 8010246:	2000      	movs	r0, #0
 8010248:	e7f7      	b.n	801023a <__swsetup_r+0xba>
 801024a:	bf00      	nop
 801024c:	24000054 	.word	0x24000054
 8010250:	080109b4 	.word	0x080109b4
 8010254:	080109d4 	.word	0x080109d4
 8010258:	08010994 	.word	0x08010994

0801025c <_close_r>:
 801025c:	b538      	push	{r3, r4, r5, lr}
 801025e:	4d06      	ldr	r5, [pc, #24]	; (8010278 <_close_r+0x1c>)
 8010260:	2300      	movs	r3, #0
 8010262:	4604      	mov	r4, r0
 8010264:	4608      	mov	r0, r1
 8010266:	602b      	str	r3, [r5, #0]
 8010268:	f7f2 fbba 	bl	80029e0 <_close>
 801026c:	1c43      	adds	r3, r0, #1
 801026e:	d102      	bne.n	8010276 <_close_r+0x1a>
 8010270:	682b      	ldr	r3, [r5, #0]
 8010272:	b103      	cbz	r3, 8010276 <_close_r+0x1a>
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	bd38      	pop	{r3, r4, r5, pc}
 8010278:	2404be68 	.word	0x2404be68

0801027c <_fstat_r>:
 801027c:	b538      	push	{r3, r4, r5, lr}
 801027e:	4d07      	ldr	r5, [pc, #28]	; (801029c <_fstat_r+0x20>)
 8010280:	2300      	movs	r3, #0
 8010282:	4604      	mov	r4, r0
 8010284:	4608      	mov	r0, r1
 8010286:	4611      	mov	r1, r2
 8010288:	602b      	str	r3, [r5, #0]
 801028a:	f7f2 fbe9 	bl	8002a60 <_fstat>
 801028e:	1c43      	adds	r3, r0, #1
 8010290:	d102      	bne.n	8010298 <_fstat_r+0x1c>
 8010292:	682b      	ldr	r3, [r5, #0]
 8010294:	b103      	cbz	r3, 8010298 <_fstat_r+0x1c>
 8010296:	6023      	str	r3, [r4, #0]
 8010298:	bd38      	pop	{r3, r4, r5, pc}
 801029a:	bf00      	nop
 801029c:	2404be68 	.word	0x2404be68

080102a0 <_isatty_r>:
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	4d06      	ldr	r5, [pc, #24]	; (80102bc <_isatty_r+0x1c>)
 80102a4:	2300      	movs	r3, #0
 80102a6:	4604      	mov	r4, r0
 80102a8:	4608      	mov	r0, r1
 80102aa:	602b      	str	r3, [r5, #0]
 80102ac:	f7f2 fb56 	bl	800295c <_isatty>
 80102b0:	1c43      	adds	r3, r0, #1
 80102b2:	d102      	bne.n	80102ba <_isatty_r+0x1a>
 80102b4:	682b      	ldr	r3, [r5, #0]
 80102b6:	b103      	cbz	r3, 80102ba <_isatty_r+0x1a>
 80102b8:	6023      	str	r3, [r4, #0]
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
 80102bc:	2404be68 	.word	0x2404be68

080102c0 <_lseek_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	4d07      	ldr	r5, [pc, #28]	; (80102e0 <_lseek_r+0x20>)
 80102c4:	4604      	mov	r4, r0
 80102c6:	4608      	mov	r0, r1
 80102c8:	4611      	mov	r1, r2
 80102ca:	2200      	movs	r2, #0
 80102cc:	602a      	str	r2, [r5, #0]
 80102ce:	461a      	mov	r2, r3
 80102d0:	f7f3 fe0a 	bl	8003ee8 <_lseek>
 80102d4:	1c43      	adds	r3, r0, #1
 80102d6:	d102      	bne.n	80102de <_lseek_r+0x1e>
 80102d8:	682b      	ldr	r3, [r5, #0]
 80102da:	b103      	cbz	r3, 80102de <_lseek_r+0x1e>
 80102dc:	6023      	str	r3, [r4, #0]
 80102de:	bd38      	pop	{r3, r4, r5, pc}
 80102e0:	2404be68 	.word	0x2404be68

080102e4 <__malloc_lock>:
 80102e4:	4801      	ldr	r0, [pc, #4]	; (80102ec <__malloc_lock+0x8>)
 80102e6:	f7ff ba55 	b.w	800f794 <__retarget_lock_acquire_recursive>
 80102ea:	bf00      	nop
 80102ec:	2404be5c 	.word	0x2404be5c

080102f0 <__malloc_unlock>:
 80102f0:	4801      	ldr	r0, [pc, #4]	; (80102f8 <__malloc_unlock+0x8>)
 80102f2:	f7ff ba50 	b.w	800f796 <__retarget_lock_release_recursive>
 80102f6:	bf00      	nop
 80102f8:	2404be5c 	.word	0x2404be5c

080102fc <_read_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4d07      	ldr	r5, [pc, #28]	; (801031c <_read_r+0x20>)
 8010300:	4604      	mov	r4, r0
 8010302:	4608      	mov	r0, r1
 8010304:	4611      	mov	r1, r2
 8010306:	2200      	movs	r2, #0
 8010308:	602a      	str	r2, [r5, #0]
 801030a:	461a      	mov	r2, r3
 801030c:	f7f2 fb80 	bl	8002a10 <_read>
 8010310:	1c43      	adds	r3, r0, #1
 8010312:	d102      	bne.n	801031a <_read_r+0x1e>
 8010314:	682b      	ldr	r3, [r5, #0]
 8010316:	b103      	cbz	r3, 801031a <_read_r+0x1e>
 8010318:	6023      	str	r3, [r4, #0]
 801031a:	bd38      	pop	{r3, r4, r5, pc}
 801031c:	2404be68 	.word	0x2404be68

08010320 <_init>:
 8010320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010322:	bf00      	nop
 8010324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010326:	bc08      	pop	{r3}
 8010328:	469e      	mov	lr, r3
 801032a:	4770      	bx	lr

0801032c <_fini>:
 801032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032e:	bf00      	nop
 8010330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010332:	bc08      	pop	{r3}
 8010334:	469e      	mov	lr, r3
 8010336:	4770      	bx	lr
