
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd04  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800ffb0  0800ffb0  0001ffb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801061c  0801061c  0002061c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010624  08010624  00020624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010628  08010628  00020628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f8  24000000  0801062c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc8  240002f8  08010924  000302f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240010c0  08010924  000310c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027c26  00000000  00000000  00030326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050d5  00000000  00000000  00057f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a50  00000000  00000000  0005d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001828  00000000  00000000  0005ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394cc  00000000  00000000  000602a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028a93  00000000  00000000  0009976c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152bb9  00000000  00000000  000c21ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00214db8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007170  00000000  00000000  00214e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	240002f8 	.word	0x240002f8
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800ff98 	.word	0x0800ff98

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	240002fc 	.word	0x240002fc
 80002e8:	0800ff98 	.word	0x0800ff98

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_DCMI_Init+0x60>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_DCMI_Init+0x64>)
 80005f8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_DCMI_Init+0x60>)
 8000602:	2220      	movs	r2, #32
 8000604:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DCMI_Init+0x60>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DCMI_Init+0x60>)
 800060e:	2240      	movs	r2, #64	; 0x40
 8000610:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_DCMI_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_DCMI_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_DCMI_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_DCMI_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_DCMI_Init+0x60>)
 800063e:	f004 f8a1 	bl	8004784 <HAL_DCMI_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000648:	f001 f882 	bl	8001750 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000314 	.word	0x24000314
 8000654:	48020000 	.word	0x48020000

08000658 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a76      	ldr	r2, [pc, #472]	; (8000850 <HAL_DCMI_MspInit+0x1f8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	f040 80e5 	bne.w	8000846 <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800067c:	4b75      	ldr	r3, [pc, #468]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800067e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000682:	4a74      	ldr	r2, [pc, #464]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800068c:	4b71      	ldr	r3, [pc, #452]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800068e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	623b      	str	r3, [r7, #32]
 8000698:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b6e      	ldr	r3, [pc, #440]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800069c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a0:	4a6c      	ldr	r2, [pc, #432]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006be:	4a65      	ldr	r2, [pc, #404]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c8:	4b62      	ldr	r3, [pc, #392]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006dc:	4a5d      	ldr	r2, [pc, #372]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e6:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b57      	ldr	r3, [pc, #348]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fa:	4a56      	ldr	r2, [pc, #344]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000704:	4b53      	ldr	r3, [pc, #332]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000718:	4a4e      	ldr	r2, [pc, #312]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 8000730:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000742:	230d      	movs	r3, #13
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <HAL_DCMI_MspInit+0x200>)
 800074e:	f008 fa53 	bl	8008bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000764:	230d      	movs	r3, #13
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	483b      	ldr	r0, [pc, #236]	; (800085c <HAL_DCMI_MspInit+0x204>)
 8000770:	f008 fa42 	bl	8008bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000784:	230d      	movs	r3, #13
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4834      	ldr	r0, [pc, #208]	; (8000860 <HAL_DCMI_MspInit+0x208>)
 8000790:	f008 fa32 	bl	8008bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000794:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007a6:	230d      	movs	r3, #13
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	482c      	ldr	r0, [pc, #176]	; (8000864 <HAL_DCMI_MspInit+0x20c>)
 80007b2:	f008 fa21 	bl	8008bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007b6:	2350      	movs	r3, #80	; 0x50
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c6:	230d      	movs	r3, #13
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4825      	ldr	r0, [pc, #148]	; (8000868 <HAL_DCMI_MspInit+0x210>)
 80007d2:	f008 fa11 	bl	8008bf8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <HAL_DCMI_MspInit+0x218>)
 80007da:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007de:	224b      	movs	r2, #75	; 0x4b
 80007e0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000800:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000804:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800080e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000812:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800081c:	f004 fa80 	bl	8004d20 <HAL_DMA_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8000826:	f000 ff93 	bl	8001750 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800082e:	649a      	str	r2, [r3, #72]	; 0x48
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	204e      	movs	r0, #78	; 0x4e
 800083c:	f003 ff6d 	bl	800471a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8000840:	204e      	movs	r0, #78	; 0x4e
 8000842:	f003 ff84 	bl	800474e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000846:	bf00      	nop
 8000848:	3738      	adds	r7, #56	; 0x38
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	48020000 	.word	0x48020000
 8000854:	58024400 	.word	0x58024400
 8000858:	58020400 	.word	0x58020400
 800085c:	58021800 	.word	0x58021800
 8000860:	58020c00 	.word	0x58020c00
 8000864:	58020800 	.word	0x58020800
 8000868:	58020000 	.word	0x58020000
 800086c:	24000364 	.word	0x24000364
 8000870:	40020428 	.word	0x40020428

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_DMA_Init+0x3c>)
 800087c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x3c>)
 800088c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2039      	movs	r0, #57	; 0x39
 800089e:	f003 ff3c 	bl	800471a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a2:	2039      	movs	r0, #57	; 0x39
 80008a4:	f003 ff53 	bl	800474e <HAL_NVIC_EnableIRQ>

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024400 	.word	0x58024400

080008b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_DMA2D_Init+0x74>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008c4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008da:	2201      	movs	r2, #1
 80008dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008fe:	f007 f8ef 	bl	8007ae0 <HAL_DMA2D_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 ff22 	bl	8001750 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800090c:	2101      	movs	r1, #1
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_DMA2D_Init+0x70>)
 8000910:	f007 fb6e 	bl	8007ff0 <HAL_DMA2D_ConfigLayer>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 ff19 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	240003dc 	.word	0x240003dc
 8000928:	52001000 	.word	0x52001000

0800092c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_DMA2D_MspInit+0x48>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d116      	bne.n	800096c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000940:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000950:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	205a      	movs	r0, #90	; 0x5a
 8000962:	f003 feda 	bl	800471a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000966:	205a      	movs	r0, #90	; 0x5a
 8000968:	f003 fef1 	bl	800474e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	52001000 	.word	0x52001000
 8000978:	58024400 	.word	0x58024400

0800097c <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <DMA2D_Convert+0x4c>)
 8000996:	f007 f907 	bl	8007ba8 <HAL_DMA2D_Start>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <DMA2D_Convert+0x2c>
    Error_Handler();
 80009a4:	f000 fed4 	bl	8001750 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 80009a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <DMA2D_Convert+0x4c>)
 80009ae:	f007 f926 	bl	8007bfe <HAL_DMA2D_PollForTransfer>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <DMA2D_Convert+0x44>
    Error_Handler();
 80009bc:	f000 fec8 	bl	8001750 <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	240003dc 	.word	0x240003dc

080009cc <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "draw.h"

void drawVLine(uint32_t *buffer, int32_t x, int32_t y_start, int32_t y_end){
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
	if(y_start<0){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	da01      	bge.n	80009e4 <drawVLine+0x18>
		y_start=0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
	}
	if(y_end>LTDC_HEIGHT){
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80009ea:	dd02      	ble.n	80009f2 <drawVLine+0x26>
		y_end=LTDC_HEIGHT;
 80009ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009f0:	603b      	str	r3, [r7, #0]
	}
	for(uint32_t i = y_start; i<y_end; i++){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e011      	b.n	8000a1c <drawVLine+0x50>
			buffer[(x+i*LTDC_WIDTH)/2] = COLOR;
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	4613      	mov	r3, r2
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	015b      	lsls	r3, r3, #5
 8000a02:	461a      	mov	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4413      	add	r3, r2
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000a14:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3e9      	bcc.n	80009f8 <drawVLine+0x2c>
	}
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <drawHLine>:
void drawHLine(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y){
 8000a32:	b480      	push	{r7}
 8000a34:	b087      	sub	sp, #28
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
	if(x_start<0){
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da01      	bge.n	8000a4a <drawHLine+0x18>
		x_start=0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
	}
	if(x_end>LTDC_WIDTH){
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000a50:	dd02      	ble.n	8000a58 <drawHLine+0x26>
		x_end=LTDC_WIDTH;
 8000a52:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a56:	607b      	str	r3, [r7, #4]
	}
	x_end=x_end+x_end%2;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	607b      	str	r3, [r7, #4]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	da00      	bge.n	8000a72 <drawHLine+0x40>
 8000a70:	3301      	adds	r3, #1
 8000a72:	105b      	asrs	r3, r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e01f      	b.n	8000ab8 <drawHLine+0x86>
		buffer[i+LTDC_WIDTH*y/2] = COLOR;
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	461a      	mov	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4413      	add	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000a92:	601a      	str	r2, [r3, #0]
		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)/2] = COLOR;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	4613      	mov	r3, r2
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000ab0:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	da00      	bge.n	8000ac0 <drawHLine+0x8e>
 8000abe:	3301      	adds	r3, #1
 8000ac0:	105b      	asrs	r3, r3, #1
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d3d6      	bcc.n	8000a78 <drawHLine+0x46>
	}
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <drawCrosshair>:
	drawVLine(buffer, x_end, y_start, y_end);
	drawHLine(buffer, x_start, x_end, y_start);
	drawHLine(buffer, x_start, x_end, y_end);
}

void drawCrosshair(uint32_t *buffer, int32_t x, int32_t y){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	drawHLine(buffer, x-CROSSHAIR_SIZE, x+CROSSHAIR_SIZE, y);
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f1a3 010f 	sub.w	r1, r3, #15
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f103 020f 	add.w	r2, r3, #15
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ff9d 	bl	8000a32 <drawHLine>
	drawVLine(buffer, x, y-CROSSHAIR_SIZE, y+CROSSHAIR_SIZE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f1a3 020f 	sub.w	r2, r3, #15
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	330f      	adds	r3, #15
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff ff61 	bl	80009cc <drawVLine>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <MX_FMC_Init+0x110>)
 8000b32:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b46:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b4e:	2240      	movs	r2, #64	; 0x40
 8000b50:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b58:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b66:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000b80:	2305      	movs	r3, #5
 8000b82:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000b84:	2306      	movs	r3, #6
 8000b86:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4821      	ldr	r0, [pc, #132]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000b9c:	f00c fc80 	bl	800d4a0 <HAL_SDRAM_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000ba6:	f000 fdd3 	bl	8001750 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000baa:	2301      	movs	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000bae:	2308      	movs	r3, #8
 8000bb0:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4817      	ldr	r0, [pc, #92]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000bc4:	f00c fca8 	bl	800d518 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f003 fca7 	bl	800451c <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000bce:	2302      	movs	r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000bdc:	f00c fc9c 	bl	800d518 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000be0:	2303      	movs	r3, #3
 8000be2:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000bf2:	f00c fc91 	bl	800d518 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000bfa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000bfe:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000c0a:	f00c fc85 	bl	800d518 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000c0e:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_FMC_Init+0x10c>)
 8000c14:	f00c fcb5 	bl	800d582 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	; 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24000444 	.word	0x24000444
 8000c24:	52004140 	.word	0x52004140

08000c28 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0b8      	sub	sp, #224	; 0xe0
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <HAL_FMC_MspInit+0x178>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 80a7 	bne.w	8000d96 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000c48:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <HAL_FMC_MspInit+0x178>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	22c0      	movs	r2, #192	; 0xc0
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00e fd50 	bl	800f6fc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000c5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8000c68:	2318      	movs	r3, #24
 8000c6a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000c6c:	23c8      	movs	r3, #200	; 0xc8
 8000c6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00a fd09 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000c98:	f000 fd5a 	bl	8001750 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_FMC_MspInit+0x17c>)
 8000c9e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_FMC_MspInit+0x17c>)
 8000ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <HAL_FMC_MspInit+0x17c>)
 8000cae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000cba:	f248 1333 	movw	r3, #33075	; 0x8133
 8000cbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4831      	ldr	r0, [pc, #196]	; (8000da8 <HAL_FMC_MspInit+0x180>)
 8000ce2:	f007 ff89 	bl	8008bf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000ce6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d00:	230c      	movs	r3, #12
 8000d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <HAL_FMC_MspInit+0x184>)
 8000d0e:	f007 ff73 	bl	8008bf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000d12:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d36:	4619      	mov	r1, r3
 8000d38:	481d      	ldr	r0, [pc, #116]	; (8000db0 <HAL_FMC_MspInit+0x188>)
 8000d3a:	f007 ff5d 	bl	8008bf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000d3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d58:	230c      	movs	r3, #12
 8000d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d62:	4619      	mov	r1, r3
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <HAL_FMC_MspInit+0x18c>)
 8000d66:	f007 ff47 	bl	8008bf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000d6a:	23e0      	movs	r3, #224	; 0xe0
 8000d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d82:	230c      	movs	r3, #12
 8000d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <HAL_FMC_MspInit+0x190>)
 8000d90:	f007 ff32 	bl	8008bf8 <HAL_GPIO_Init>
 8000d94:	e000      	b.n	8000d98 <HAL_FMC_MspInit+0x170>
    return;
 8000d96:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d98:	37e0      	adds	r7, #224	; 0xe0
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000478 	.word	0x24000478
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58021800 	.word	0x58021800
 8000dac:	58020c00 	.word	0x58020c00
 8000db0:	58021000 	.word	0x58021000
 8000db4:	58021400 	.word	0x58021400
 8000db8:	58021c00 	.word	0x58021c00

08000dbc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000dc4:	f7ff ff30 	bl	8000c28 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b090      	sub	sp, #64	; 0x40
 8000dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000de6:	4bc0      	ldr	r3, [pc, #768]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dec:	4abe      	ldr	r2, [pc, #760]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df6:	4bbc      	ldr	r3, [pc, #752]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4bb8      	ldr	r3, [pc, #736]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0a:	4ab7      	ldr	r2, [pc, #732]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e14:	4bb4      	ldr	r3, [pc, #720]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e22:	4bb1      	ldr	r3, [pc, #708]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e28:	4aaf      	ldr	r2, [pc, #700]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e32:	4bad      	ldr	r3, [pc, #692]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e40:	4ba9      	ldr	r3, [pc, #676]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e46:	4aa8      	ldr	r2, [pc, #672]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e50:	4ba5      	ldr	r3, [pc, #660]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4ba2      	ldr	r3, [pc, #648]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e64:	4aa0      	ldr	r2, [pc, #640]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e6e:	4b9e      	ldr	r3, [pc, #632]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b9a      	ldr	r3, [pc, #616]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e82:	4a99      	ldr	r2, [pc, #612]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e8c:	4b96      	ldr	r3, [pc, #600]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9a:	4b93      	ldr	r3, [pc, #588]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000e9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea0:	4a91      	ldr	r2, [pc, #580]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eaa:	4b8f      	ldr	r3, [pc, #572]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000eba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebe:	4a8a      	ldr	r2, [pc, #552]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ec8:	4b87      	ldr	r3, [pc, #540]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000eca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ed8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000edc:	4a82      	ldr	r2, [pc, #520]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ee6:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ee8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef4:	4b7c      	ldr	r3, [pc, #496]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000ef6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efa:	4a7b      	ldr	r2, [pc, #492]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f04:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b75      	ldr	r3, [pc, #468]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f18:	4a73      	ldr	r2, [pc, #460]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f22:	4b71      	ldr	r3, [pc, #452]	; (80010e8 <MX_GPIO_Init+0x318>)
 8000f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	210e      	movs	r1, #14
 8000f34:	486d      	ldr	r0, [pc, #436]	; (80010ec <MX_GPIO_Init+0x31c>)
 8000f36:	f008 f919 	bl	800916c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f640 0104 	movw	r1, #2052	; 0x804
 8000f40:	486b      	ldr	r0, [pc, #428]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000f42:	f008 f913 	bl	800916c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4c:	4869      	ldr	r0, [pc, #420]	; (80010f4 <MX_GPIO_Init+0x324>)
 8000f4e:	f008 f90d 	bl	800916c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2108      	movs	r1, #8
 8000f56:	4866      	ldr	r0, [pc, #408]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000f58:	f008 f908 	bl	800916c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2106      	movs	r1, #6
 8000f60:	4864      	ldr	r0, [pc, #400]	; (80010f4 <MX_GPIO_Init+0x324>)
 8000f62:	f008 f903 	bl	800916c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000f66:	2330      	movs	r3, #48	; 0x30
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	485c      	ldr	r0, [pc, #368]	; (80010ec <MX_GPIO_Init+0x31c>)
 8000f7c:	f007 fe3c 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000f80:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000f92:	2305      	movs	r3, #5
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4854      	ldr	r0, [pc, #336]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000f9e:	f007 fe2b 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	484c      	ldr	r0, [pc, #304]	; (80010f0 <MX_GPIO_Init+0x320>)
 8000fc0:	f007 fe1a 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4846      	ldr	r0, [pc, #280]	; (80010f8 <MX_GPIO_Init+0x328>)
 8000fe0:	f007 fe0a 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000fe4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	483e      	ldr	r0, [pc, #248]	; (80010fc <MX_GPIO_Init+0x32c>)
 8001002:	f007 fdf9 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8001006:	230e      	movs	r3, #14
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	4619      	mov	r1, r3
 800101c:	4833      	ldr	r0, [pc, #204]	; (80010ec <MX_GPIO_Init+0x31c>)
 800101e:	f007 fdeb 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8001022:	f640 030c 	movw	r3, #2060	; 0x80c
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001038:	4619      	mov	r1, r3
 800103a:	482d      	ldr	r0, [pc, #180]	; (80010f0 <MX_GPIO_Init+0x320>)
 800103c:	f007 fddc 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001040:	2304      	movs	r3, #4
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001050:	230c      	movs	r3, #12
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	4619      	mov	r1, r3
 800105a:	4827      	ldr	r0, [pc, #156]	; (80010f8 <MX_GPIO_Init+0x328>)
 800105c:	f007 fdcc 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001066:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	481d      	ldr	r0, [pc, #116]	; (80010ec <MX_GPIO_Init+0x31c>)
 8001078:	f007 fdbe 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800108e:	2305      	movs	r3, #5
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_GPIO_Init+0x324>)
 800109a:	f007 fdad 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 800109e:	f640 0306 	movw	r3, #2054	; 0x806
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <MX_GPIO_Init+0x324>)
 80010b8:	f007 fd9e 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80010bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <MX_GPIO_Init+0x32c>)
 80010d4:	f007 fd90 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e00c      	b.n	8001100 <MX_GPIO_Init+0x330>
 80010e6:	bf00      	nop
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58022000 	.word	0x58022000
 80010f0:	58021800 	.word	0x58021800
 80010f4:	58020000 	.word	0x58020000
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	58020800 	.word	0x58020800
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001106:	2300      	movs	r3, #0
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	4842      	ldr	r0, [pc, #264]	; (800121c <MX_GPIO_Init+0x44c>)
 8001112:	f007 fd71 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001126:	230a      	movs	r3, #10
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	483b      	ldr	r0, [pc, #236]	; (8001220 <MX_GPIO_Init+0x450>)
 8001132:	f007 fd61 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001136:	230c      	movs	r3, #12
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001146:	2305      	movs	r3, #5
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	4619      	mov	r1, r3
 8001150:	4834      	ldr	r0, [pc, #208]	; (8001224 <MX_GPIO_Init+0x454>)
 8001152:	f007 fd51 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001156:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001168:	2304      	movs	r3, #4
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <MX_GPIO_Init+0x458>)
 8001174:	f007 fd40 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8001178:	2322      	movs	r3, #34	; 0x22
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001188:	230a      	movs	r3, #10
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	4824      	ldr	r0, [pc, #144]	; (8001224 <MX_GPIO_Init+0x454>)
 8001194:	f007 fd30 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001198:	2304      	movs	r3, #4
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011aa:	4619      	mov	r1, r3
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <MX_GPIO_Init+0x45c>)
 80011ae:	f007 fd23 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80011b2:	2308      	movs	r3, #8
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80011c2:	2309      	movs	r3, #9
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ca:	4619      	mov	r1, r3
 80011cc:	4817      	ldr	r0, [pc, #92]	; (800122c <MX_GPIO_Init+0x45c>)
 80011ce:	f007 fd13 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 80011d2:	2309      	movs	r3, #9
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80011e2:	2305      	movs	r3, #5
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ea:	4619      	mov	r1, r3
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0x44c>)
 80011ee:	f007 fd03 	bl	8008bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80011f2:	2304      	movs	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001202:	2309      	movs	r3, #9
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_GPIO_Init+0x460>)
 800120e:	f007 fcf3 	bl	8008bf8 <HAL_GPIO_Init>

}
 8001212:	bf00      	nop
 8001214:	3740      	adds	r7, #64	; 0x40
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	58020000 	.word	0x58020000
 8001220:	58021800 	.word	0x58021800
 8001224:	58020800 	.word	0x58020800
 8001228:	58020c00 	.word	0x58020c00
 800122c:	58021c00 	.word	0x58021c00
 8001230:	58020400 	.word	0x58020400

08001234 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2234      	movs	r2, #52	; 0x34
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f00e fa5b 	bl	800f6fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001248:	4a38      	ldr	r2, [pc, #224]	; (800132c <MX_LTDC_Init+0xf8>)
 800124a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800124c:	4b36      	ldr	r3, [pc, #216]	; (8001328 <MX_LTDC_Init+0xf4>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8001258:	4b33      	ldr	r3, [pc, #204]	; (8001328 <MX_LTDC_Init+0xf4>)
 800125a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800125e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001268:	2207      	movs	r2, #7
 800126a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <MX_LTDC_Init+0xf4>)
 800126e:	2203      	movs	r2, #3
 8001270:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001274:	220e      	movs	r2, #14
 8001276:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <MX_LTDC_Init+0xf4>)
 800127a:	2205      	movs	r2, #5
 800127c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001280:	f240 228e 	movw	r2, #654	; 0x28e
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001288:	f240 12e5 	movw	r2, #485	; 0x1e5
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001290:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001298:	f240 12e7 	movw	r2, #487	; 0x1e7
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012b6:	481c      	ldr	r0, [pc, #112]	; (8001328 <MX_LTDC_Init+0xf4>)
 80012b8:	f008 fdf8 	bl	8009eac <HAL_LTDC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 80012c2:	f000 fa45 	bl	8001750 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012d6:	2302      	movs	r3, #2
 80012d8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012e8:	2305      	movs	r3, #5
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_LTDC_Init+0xf4>)
 8001312:	f008 ff5d 	bl	800a1d0 <HAL_LTDC_ConfigLayer>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800131c:	f000 fa18 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2400047c 	.word	0x2400047c
 800132c:	50001000 	.word	0x50001000

08001330 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0bc      	sub	sp, #240	; 0xf0
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	22c0      	movs	r2, #192	; 0xc0
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00e f9d3 	bl	800f6fc <memset>
  if(ltdcHandle->Instance==LTDC)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5b      	ldr	r2, [pc, #364]	; (80014c8 <HAL_LTDC_MspInit+0x198>)
 800135c:	4293      	cmp	r3, r2
 800135e:	f040 80ae 	bne.w	80014be <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001362:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800136e:	2318      	movs	r3, #24
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001372:	23c0      	movs	r3, #192	; 0xc0
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001376:	2311      	movs	r3, #17
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800137a:	2302      	movs	r3, #2
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 800137e:	2310      	movs	r3, #16
 8001380:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001382:	2300      	movs	r3, #0
 8001384:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001386:	2300      	movs	r3, #0
 8001388:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 800138a:	f241 5356 	movw	r3, #5462	; 0x1556
 800138e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f00a f985 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80013a0:	f000 f9d6 	bl	8001750 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013a4:	4b49      	ldr	r3, [pc, #292]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013a6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80013aa:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80013c2:	4b42      	ldr	r3, [pc, #264]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c8:	4a40      	ldr	r2, [pc, #256]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013e0:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e6:	4a39      	ldr	r2, [pc, #228]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 80013f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 8001400:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_LTDC_MspInit+0x19c>)
 8001410:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 800141c:	23ff      	movs	r3, #255	; 0xff
 800141e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001434:	230e      	movs	r3, #14
 8001436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800143a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800143e:	4619      	mov	r1, r3
 8001440:	4823      	ldr	r0, [pc, #140]	; (80014d0 <HAL_LTDC_MspInit+0x1a0>)
 8001442:	f007 fbd9 	bl	8008bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001460:	230e      	movs	r3, #14
 8001462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001466:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800146a:	4619      	mov	r1, r3
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <HAL_LTDC_MspInit+0x1a4>)
 800146e:	f007 fbc3 	bl	8008bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8001472:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800148c:	230e      	movs	r3, #14
 800148e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001492:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001496:	4619      	mov	r1, r3
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <HAL_LTDC_MspInit+0x1a8>)
 800149a:	f007 fbad 	bl	8008bf8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2058      	movs	r0, #88	; 0x58
 80014a4:	f003 f939 	bl	800471a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014a8:	2058      	movs	r0, #88	; 0x58
 80014aa:	f003 f950 	bl	800474e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2059      	movs	r0, #89	; 0x59
 80014b4:	f003 f931 	bl	800471a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80014b8:	2059      	movs	r0, #89	; 0x59
 80014ba:	f003 f948 	bl	800474e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	37f0      	adds	r7, #240	; 0xf0
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	50001000 	.word	0x50001000
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58022800 	.word	0x58022800
 80014d4:	58022400 	.word	0x58022400
 80014d8:	58022000 	.word	0x58022000

080014dc <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	; 0x40
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2234      	movs	r2, #52	; 0x34
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00e f905 	bl	800f6fc <memset>
	pLayerCfg.WindowX0 = 28;
 80014f2:	231c      	movs	r3, #28
 80014f4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 80014f6:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80014fa:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 80014fc:	2306      	movs	r3, #6
 80014fe:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 8001500:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001504:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800150a:	23ff      	movs	r3, #255	; 0xff
 800150c:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001518:	2305      	movs	r3, #5
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 8001520:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 8001526:	f44f 7388 	mov.w	r3, #272	; 0x110
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <LTDC_Init_from_buffer+0x84>)
 8001548:	f008 fe42 	bl	800a1d0 <HAL_LTDC_ConfigLayer>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 8001552:	f000 f8fd 	bl	8001750 <Error_Handler>
	}
}
 8001556:	bf00      	nop
 8001558:	3740      	adds	r7, #64	; 0x40
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2400047c 	.word	0x2400047c

08001564 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af04      	add	r7, sp, #16
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 800156a:	f002 ff45 	bl	80043f8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800156e:	f000 f859 	bl	8001624 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001572:	f7ff fc2d 	bl	8000dd0 <MX_GPIO_Init>
    MX_DMA_Init();
 8001576:	f7ff f97d 	bl	8000874 <MX_DMA_Init>
    MX_USART1_UART_Init();
 800157a:	f002 fe55 	bl	8004228 <MX_USART1_UART_Init>
    MX_DMA2D_Init();
 800157e:	f7ff f999 	bl	80008b4 <MX_DMA2D_Init>
    MX_LTDC_Init();
 8001582:	f7ff fe57 	bl	8001234 <MX_LTDC_Init>
    MX_DCMI_Init();
 8001586:	f7ff f833 	bl	80005f0 <MX_DCMI_Init>
    MX_RTC_Init();
 800158a:	f001 fe8b 	bl	80032a4 <MX_RTC_Init>
    MX_FMC_Init();
 800158e:	f7ff fac1 	bl	8000b14 <MX_FMC_Init>
    /* USER CODE BEGIN 2 */
    RetargetInit(&huart1);
 8001592:	481f      	ldr	r0, [pc, #124]	; (8001610 <main+0xac>)
 8001594:	f001 fde6 	bl	8003164 <RetargetInit>

    BSP_CAMERA_PwrDown(0);
 8001598:	2000      	movs	r0, #0
 800159a:	f002 fbe6 	bl	8003d6a <BSP_CAMERA_PwrDown>
    if (BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) !=
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	2000      	movs	r0, #0
 80015a4:	f002 fb30 	bl	8003c08 <BSP_CAMERA_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <main+0x4e>
        BSP_ERROR_NONE) {
        Error_Handler();
 80015ae:	f000 f8cf 	bl	8001750 <Error_Handler>
    }
    HAL_Delay(1000);
 80015b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b6:	f002 ffb1 	bl	800451c <HAL_Delay>
    //  buffer[5460] = 255;
    LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 80015ba:	4816      	ldr	r0, [pc, #88]	; (8001614 <main+0xb0>)
 80015bc:	f7ff ff8e 	bl	80014dc <LTDC_Init_from_buffer>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    while (1) {
    	// make photo
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 80015c0:	2202      	movs	r2, #2
 80015c2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80015c6:	2000      	movs	r0, #0
 80015c8:	f002 fb64 	bl	8003c94 <BSP_CAMERA_Start>
        while (camera_frame_ready == 0) {
 80015cc:	bf00      	nop
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <main+0xb4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0fb      	beq.n	80015ce <main+0x6a>
        };
        BSP_CAMERA_Stop(0);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f002 fb96 	bl	8003d08 <BSP_CAMERA_Stop>
        // process photo
        DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 80015dc:	490d      	ldr	r1, [pc, #52]	; (8001614 <main+0xb0>)
 80015de:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 80015e2:	f7ff f9cb 	bl	800097c <DMA2D_Convert>

        // post process
        postProcess((uint32_t *)LCD_BUFFER, LTDC_WIDTH, LTDC_HEIGHT, 96, 96, GRID_SIZE, probabilites);
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <main+0xb8>)
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	230c      	movs	r3, #12
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2360      	movs	r3, #96	; 0x60
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2360      	movs	r3, #96	; 0x60
 80015f4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80015f8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <main+0xb0>)
 80015fe:	f001 fd4f 	bl	80030a0 <postProcess>

        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001602:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <main+0xbc>)
 8001608:	f007 fdc9 	bl	800919e <HAL_GPIO_TogglePin>
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 800160c:	e7d8      	b.n	80015c0 <main+0x5c>
 800160e:	bf00      	nop
 8001610:	24001018 	.word	0x24001018
 8001614:	d005fa00 	.word	0xd005fa00
 8001618:	24000524 	.word	0x24000524
 800161c:	24000000 	.word	0x24000000
 8001620:	58021800 	.word	0x58021800

08001624 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b09c      	sub	sp, #112	; 0x70
 8001628:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	224c      	movs	r2, #76	; 0x4c
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f00e f862 	bl	800f6fc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2220      	movs	r2, #32
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00e f85c 	bl	800f6fc <memset>

    /*AXI clock gating */
    RCC->CKGAENR = 0xFFFFFFFF;
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <SystemClock_Config+0x104>)
 8001646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800164a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800164e:	2004      	movs	r0, #4
 8001650:	f008 ffa6 	bl	800a5a0 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <SystemClock_Config+0x108>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a33      	ldr	r2, [pc, #204]	; (800172c <SystemClock_Config+0x108>)
 800165e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <SystemClock_Config+0x108>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001670:	bf00      	nop
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <SystemClock_Config+0x108>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167e:	d1f8      	bne.n	8001672 <SystemClock_Config+0x4e>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 8001680:	f008 ff7e 	bl	800a580 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <SystemClock_Config+0x104>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <SystemClock_Config+0x104>)
 800168a:	f023 0318 	bic.w	r3, r3, #24
 800168e:	6713      	str	r3, [r2, #112]	; 0x70

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType =
 8001690:	2305      	movs	r3, #5
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
        RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800169a:	2301      	movs	r3, #1
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a2:	2302      	movs	r3, #2
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 3;
 80016a6:	2303      	movs	r3, #3
 80016a8:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 69;
 80016aa:	2345      	movs	r3, #69	; 0x45
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 12;
 80016b2:	230c      	movs	r3, #12
 80016b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR = 16;
 80016b6:	2310      	movs	r3, #16
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016ba:	230c      	movs	r3, #12
 80016bc:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016be:	2300      	movs	r3, #0
 80016c0:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 80016c2:	f241 5356 	movw	r3, #5462	; 0x1556
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f008 ffc1 	bl	800a654 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0xb8>
        Error_Handler();
 80016d8:	f000 f83a 	bl	8001750 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80016dc:	233f      	movs	r3, #63	; 0x3f
 80016de:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                  RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2303      	movs	r3, #3
 80016e2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2107      	movs	r1, #7
 8001702:	4618      	mov	r0, r3
 8001704:	f009 fbd8 	bl	800aeb8 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xee>
        Error_Handler();
 800170e:	f000 f81f 	bl	8001750 <Error_Handler>
    }
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001712:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001716:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800171a:	2000      	movs	r0, #0
 800171c:	f009 fd82 	bl	800b224 <HAL_RCC_MCOConfig>
}
 8001720:	bf00      	nop
 8001722:	3770      	adds	r7, #112	; 0x70
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58024400 	.word	0x58024400
 800172c:	58024800 	.word	0x58024800

08001730 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    camera_frame_ready = 1;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <BSP_CAMERA_FrameEventCallback+0x1c>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	24000524 	.word	0x24000524

08001750 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001758:	e7fe      	b.n	8001758 <Error_Handler+0x8>
	...

0800175c <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e02c      	b.n	80017ce <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	891a      	ldrh	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <OV5640_RegisterBusIO+0x7c>)
 80017a8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <OV5640_RegisterBusIO+0x80>)
 80017ae:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4798      	blx	r3
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	e002      	b.n	80017ce <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017cc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	08002fdf 	.word	0x08002fdf
 80017dc:	08003011 	.word	0x08003011

080017e0 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d165      	bne.n	80018c6 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d80e      	bhi.n	800181e <OV5640_Init+0x3e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00f      	beq.n	8001826 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d00c      	beq.n	8001826 <OV5640_Init+0x46>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d009      	beq.n	8001826 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d006      	beq.n	8001826 <OV5640_Init+0x46>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b08      	cmp	r3, #8
 800181c:	d003      	beq.n	8001826 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	e04f      	b.n	80018c6 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	e01f      	b.n	800186c <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001832:	d018      	beq.n	8001866 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <OV5640_Init+0xf0>)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	885b      	ldrh	r3, [r3, #2]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f103 0018 	add.w	r0, r3, #24
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <OV5640_Init+0xf0>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001850:	f107 0217 	add.w	r2, r7, #23
 8001854:	2301      	movs	r3, #1
 8001856:	f001 fc0b 	bl	8003070 <ov5640_write_reg>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001864:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2bfd      	cmp	r3, #253	; 0xfd
 8001870:	d9dc      	bls.n	800182c <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d126      	bne.n	80018c6 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f9e0 	bl	8001c40 <OV5640_SetResolution>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	e01b      	b.n	80018c6 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f833 	bl	80018fc <OV5640_SetPixelFormat>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	e010      	b.n	80018c6 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80018a4:	2300      	movs	r3, #0
 80018a6:	2201      	movs	r2, #1
 80018a8:	2101      	movs	r1, #1
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fb64 	bl	8001f78 <OV5640_SetPolarities>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	e003      	b.n	80018c6 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80018c6:	69bb      	ldr	r3, [r7, #24]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800fff8 	.word	0x0800fff8

080018d4 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d103      	bne.n	80018ee <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00f      	beq.n	8001930 <OV5640_SetPixelFormat+0x34>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d00c      	beq.n	8001930 <OV5640_SetPixelFormat+0x34>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d009      	beq.n	8001930 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b07      	cmp	r3, #7
 8001920:	d006      	beq.n	8001930 <OV5640_SetPixelFormat+0x34>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b08      	cmp	r3, #8
 8001926:	d003      	beq.n	8001930 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e16a      	b.n	8001c06 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	3b01      	subs	r3, #1
 8001934:	2b07      	cmp	r3, #7
 8001936:	f200 80c3 	bhi.w	8001ac0 <OV5640_SetPixelFormat+0x1c4>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <OV5640_SetPixelFormat+0x44>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	080019b9 	.word	0x080019b9
 8001944:	08001961 	.word	0x08001961
 8001948:	08001ac1 	.word	0x08001ac1
 800194c:	08001ac1 	.word	0x08001ac1
 8001950:	08001ac1 	.word	0x08001ac1
 8001954:	08001ac1 	.word	0x08001ac1
 8001958:	08001a11 	.word	0x08001a11
 800195c:	08001a69 	.word	0x08001a69
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e024      	b.n	80019b0 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800196c:	d01d      	beq.n	80019aa <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800196e:	4aa8      	ldr	r2, [pc, #672]	; (8001c10 <OV5640_SetPixelFormat+0x314>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f103 0018 	add.w	r0, r3, #24
 8001982:	4aa3      	ldr	r2, [pc, #652]	; (8001c10 <OV5640_SetPixelFormat+0x314>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800198a:	f107 020f 	add.w	r2, r7, #15
 800198e:	2301      	movs	r3, #1
 8001990:	f001 fb6e 	bl	8003070 <ov5640_write_reg>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e003      	b.n	80019aa <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80019a2:	2101      	movs	r1, #1
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f001 fb00 	bl	8002faa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3301      	adds	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d9d7      	bls.n	8001966 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80019b6:	e0af      	b.n	8001b18 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e024      	b.n	8001a08 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c4:	d01d      	beq.n	8001a02 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80019c6:	4a93      	ldr	r2, [pc, #588]	; (8001c14 <OV5640_SetPixelFormat+0x318>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	885b      	ldrh	r3, [r3, #2]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 0018 	add.w	r0, r3, #24
 80019da:	4a8e      	ldr	r2, [pc, #568]	; (8001c14 <OV5640_SetPixelFormat+0x318>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019e2:	f107 020f 	add.w	r2, r7, #15
 80019e6:	2301      	movs	r3, #1
 80019e8:	f001 fb42 	bl	8003070 <ov5640_write_reg>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e003      	b.n	8001a02 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80019fa:	2101      	movs	r1, #1
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f001 fad4 	bl	8002faa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d9d7      	bls.n	80019be <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001a0e:	e083      	b.n	8001b18 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	e024      	b.n	8001a60 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a1c:	d01d      	beq.n	8001a5a <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001a1e:	4a7e      	ldr	r2, [pc, #504]	; (8001c18 <OV5640_SetPixelFormat+0x31c>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	885b      	ldrh	r3, [r3, #2]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f103 0018 	add.w	r0, r3, #24
 8001a32:	4a79      	ldr	r2, [pc, #484]	; (8001c18 <OV5640_SetPixelFormat+0x31c>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a3a:	f107 020f 	add.w	r2, r7, #15
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f001 fb16 	bl	8003070 <ov5640_write_reg>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e003      	b.n	8001a5a <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a52:	2101      	movs	r1, #1
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f001 faa8 	bl	8002faa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d9d7      	bls.n	8001a16 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8001a66:	e057      	b.n	8001b18 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	e024      	b.n	8001ab8 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a74:	d01d      	beq.n	8001ab2 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001a76:	4a69      	ldr	r2, [pc, #420]	; (8001c1c <OV5640_SetPixelFormat+0x320>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	885b      	ldrh	r3, [r3, #2]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f103 0018 	add.w	r0, r3, #24
 8001a8a:	4a64      	ldr	r2, [pc, #400]	; (8001c1c <OV5640_SetPixelFormat+0x320>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a92:	f107 020f 	add.w	r2, r7, #15
 8001a96:	2301      	movs	r3, #1
 8001a98:	f001 faea 	bl	8003070 <ov5640_write_reg>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e003      	b.n	8001ab2 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f001 fa7c 	bl	8002faa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d9d7      	bls.n	8001a6e <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001abe:	e02b      	b.n	8001b18 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	e024      	b.n	8001b10 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001acc:	d01d      	beq.n	8001b0a <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001ace:	4a54      	ldr	r2, [pc, #336]	; (8001c20 <OV5640_SetPixelFormat+0x324>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	885b      	ldrh	r3, [r3, #2]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f103 0018 	add.w	r0, r3, #24
 8001ae2:	4a4f      	ldr	r2, [pc, #316]	; (8001c20 <OV5640_SetPixelFormat+0x324>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001aea:	f107 020f 	add.w	r2, r7, #15
 8001aee:	2301      	movs	r3, #1
 8001af0:	f001 fabe 	bl	8003070 <ov5640_write_reg>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e003      	b.n	8001b0a <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001b02:	2101      	movs	r1, #1
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 fa50 	bl	8002faa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d9d7      	bls.n	8001ac6 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001b16:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d173      	bne.n	8001c06 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f103 0018 	add.w	r0, r3, #24
 8001b24:	f107 020f 	add.w	r2, r7, #15
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f643 0121 	movw	r1, #14369	; 0x3821
 8001b2e:	f001 fa88 	bl	8003042 <ov5640_read_reg>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e062      	b.n	8001c06 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	f043 0320 	orr.w	r3, r3, #32
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f103 0018 	add.w	r0, r3, #24
 8001b50:	f107 020f 	add.w	r2, r7, #15
 8001b54:	2301      	movs	r3, #1
 8001b56:	f643 0121 	movw	r1, #14369	; 0x3821
 8001b5a:	f001 fa89 	bl	8003070 <ov5640_write_reg>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e04c      	b.n	8001c06 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 0018 	add.w	r0, r3, #24
 8001b72:	f107 020f 	add.w	r2, r7, #15
 8001b76:	2301      	movs	r3, #1
 8001b78:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b7c:	f001 fa61 	bl	8003042 <ov5640_read_reg>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e03b      	b.n	8001c06 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	f023 031c 	bic.w	r3, r3, #28
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f103 0018 	add.w	r0, r3, #24
 8001b9e:	f107 020f 	add.w	r2, r7, #15
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f243 0102 	movw	r1, #12290	; 0x3002
 8001ba8:	f001 fa62 	bl	8003070 <ov5640_write_reg>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e025      	b.n	8001c06 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 0018 	add.w	r0, r3, #24
 8001bc0:	f107 020f 	add.w	r2, r7, #15
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f243 0106 	movw	r1, #12294	; 0x3006
 8001bca:	f001 fa3a 	bl	8003042 <ov5640_read_reg>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e014      	b.n	8001c06 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f103 0018 	add.w	r0, r3, #24
 8001bec:	f107 020f 	add.w	r2, r7, #15
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f243 0106 	movw	r1, #12294	; 0x3006
 8001bf6:	f001 fa3b 	bl	8003070 <ov5640_write_reg>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c04:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001c06:	697b      	ldr	r3, [r7, #20]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	080103f0 	.word	0x080103f0
 8001c14:	080103f8 	.word	0x080103f8
 8001c18:	08010400 	.word	0x08010400
 8001c1c:	08010408 	.word	0x08010408
 8001c20:	08010410 	.word	0x08010410

08001c24 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d903      	bls.n	8001c5c <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e0d8      	b.n	8001e0e <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	f200 80d1 	bhi.w	8001e06 <OV5640_SetResolution+0x1c6>
 8001c64:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <OV5640_SetResolution+0x2c>)
 8001c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6a:	bf00      	nop
 8001c6c:	08001c81 	.word	0x08001c81
 8001c70:	08001ccf 	.word	0x08001ccf
 8001c74:	08001d1d 	.word	0x08001d1d
 8001c78:	08001d6b 	.word	0x08001d6b
 8001c7c:	08001db9 	.word	0x08001db9
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	e01f      	b.n	8001cc6 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c8c:	d018      	beq.n	8001cc0 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001c8e:	4a62      	ldr	r2, [pc, #392]	; (8001e18 <OV5640_SetResolution+0x1d8>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	885b      	ldrh	r3, [r3, #2]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f103 0018 	add.w	r0, r3, #24
 8001ca2:	4a5d      	ldr	r2, [pc, #372]	; (8001e18 <OV5640_SetResolution+0x1d8>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001caa:	f107 020f 	add.w	r2, r7, #15
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f001 f9de 	bl	8003070 <ov5640_write_reg>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d9dc      	bls.n	8001c86 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001ccc:	e09f      	b.n	8001e0e <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e01f      	b.n	8001d14 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cda:	d018      	beq.n	8001d0e <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001cdc:	4a4f      	ldr	r2, [pc, #316]	; (8001e1c <OV5640_SetResolution+0x1dc>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	885b      	ldrh	r3, [r3, #2]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f103 0018 	add.w	r0, r3, #24
 8001cf0:	4a4a      	ldr	r2, [pc, #296]	; (8001e1c <OV5640_SetResolution+0x1dc>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cf8:	f107 020f 	add.w	r2, r7, #15
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f001 f9b7 	bl	8003070 <ov5640_write_reg>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d0c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	3301      	adds	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d9dc      	bls.n	8001cd4 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001d1a:	e078      	b.n	8001e0e <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e01f      	b.n	8001d62 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d28:	d018      	beq.n	8001d5c <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001d2a:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <OV5640_SetResolution+0x1e0>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f103 0018 	add.w	r0, r3, #24
 8001d3e:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <OV5640_SetResolution+0x1e0>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d46:	f107 020f 	add.w	r2, r7, #15
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f001 f990 	bl	8003070 <ov5640_write_reg>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d9dc      	bls.n	8001d22 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001d68:	e051      	b.n	8001e0e <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e01f      	b.n	8001db0 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d76:	d018      	beq.n	8001daa <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001d78:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <OV5640_SetResolution+0x1e4>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	885b      	ldrh	r3, [r3, #2]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f103 0018 	add.w	r0, r3, #24
 8001d8c:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <OV5640_SetResolution+0x1e4>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d94:	f107 020f 	add.w	r2, r7, #15
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f001 f969 	bl	8003070 <ov5640_write_reg>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	3301      	adds	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d9dc      	bls.n	8001d70 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001db6:	e02a      	b.n	8001e0e <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e01f      	b.n	8001dfe <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc4:	d018      	beq.n	8001df8 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <OV5640_SetResolution+0x1e8>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	885b      	ldrh	r3, [r3, #2]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f103 0018 	add.w	r0, r3, #24
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <OV5640_SetResolution+0x1e8>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001de2:	f107 020f 	add.w	r2, r7, #15
 8001de6:	2301      	movs	r3, #1
 8001de8:	f001 f942 	bl	8003070 <ov5640_write_reg>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d9dc      	bls.n	8001dbe <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001e04:	e003      	b.n	8001e0e <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0a:	617b      	str	r3, [r7, #20]
        break;
 8001e0c:	bf00      	nop
    }
  }

  return ret;
 8001e0e:	697b      	ldr	r3, [r7, #20]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	08010418 	.word	0x08010418
 8001e1c:	08010428 	.word	0x08010428
 8001e20:	08010438 	.word	0x08010438
 8001e24:	08010448 	.word	0x08010448
 8001e28:	08010458 	.word	0x08010458

08001e2c <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f103 0018 	add.w	r0, r3, #24
 8001e3c:	f107 020f 	add.w	r2, r7, #15
 8001e40:	2301      	movs	r3, #1
 8001e42:	f643 0108 	movw	r1, #14344	; 0x3808
 8001e46:	f001 f8fc 	bl	8003042 <ov5640_read_reg>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e08a      	b.n	8001f6e <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f103 0018 	add.w	r0, r3, #24
 8001e66:	f107 020f 	add.w	r2, r7, #15
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f643 0109 	movw	r1, #14345	; 0x3809
 8001e70:	f001 f8e7 	bl	8003042 <ov5640_read_reg>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	e075      	b.n	8001f6e <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	8a7b      	ldrh	r3, [r7, #18]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f103 0018 	add.w	r0, r3, #24
 8001e92:	f107 020f 	add.w	r2, r7, #15
 8001e96:	2301      	movs	r3, #1
 8001e98:	f643 010a 	movw	r1, #14346	; 0x380a
 8001e9c:	f001 f8d1 	bl	8003042 <ov5640_read_reg>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e05f      	b.n	8001f6e <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f103 0018 	add.w	r0, r3, #24
 8001ebc:	f107 020f 	add.w	r2, r7, #15
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f643 010b 	movw	r1, #14347	; 0x380b
 8001ec6:	f001 f8bc 	bl	8003042 <ov5640_read_reg>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e04a      	b.n	8001f6e <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	8a3b      	ldrh	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001ee2:	8a7b      	ldrh	r3, [r7, #18]
 8001ee4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001ee8:	d109      	bne.n	8001efe <OV5640_GetResolution+0xd2>
 8001eea:	8a3b      	ldrh	r3, [r7, #16]
 8001eec:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ef0:	d105      	bne.n	8001efe <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	e037      	b.n	8001f6e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001efe:	8a7b      	ldrh	r3, [r7, #18]
 8001f00:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001f04:	d109      	bne.n	8001f1a <OV5640_GetResolution+0xee>
 8001f06:	8a3b      	ldrh	r3, [r7, #16]
 8001f08:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f0c:	d105      	bne.n	8001f1a <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2203      	movs	r2, #3
 8001f12:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e029      	b.n	8001f6e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001f1a:	8a7b      	ldrh	r3, [r7, #18]
 8001f1c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f20:	d109      	bne.n	8001f36 <OV5640_GetResolution+0x10a>
 8001f22:	8a3b      	ldrh	r3, [r7, #16]
 8001f24:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001f28:	d105      	bne.n	8001f36 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e01b      	b.n	8001f6e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001f36:	8a7b      	ldrh	r3, [r7, #18]
 8001f38:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f3c:	d108      	bne.n	8001f50 <OV5640_GetResolution+0x124>
 8001f3e:	8a3b      	ldrh	r3, [r7, #16]
 8001f40:	2bf0      	cmp	r3, #240	; 0xf0
 8001f42:	d105      	bne.n	8001f50 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e00e      	b.n	8001f6e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001f50:	8a7b      	ldrh	r3, [r7, #18]
 8001f52:	2ba0      	cmp	r3, #160	; 0xa0
 8001f54:	d108      	bne.n	8001f68 <OV5640_GetResolution+0x13c>
 8001f56:	8a3b      	ldrh	r3, [r7, #16]
 8001f58:	2b78      	cmp	r3, #120	; 0x78
 8001f5a:	d105      	bne.n	8001f68 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e002      	b.n	8001f6e <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001f6e:	697b      	ldr	r3, [r7, #20]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d011      	beq.n	8001fb4 <OV5640_SetPolarities+0x3c>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <OV5640_SetPolarities+0x24>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10b      	bne.n	8001fb4 <OV5640_SetPolarities+0x3c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <OV5640_SetPolarities+0x3c>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d006      	beq.n	8001fbc <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e01e      	b.n	8001ffa <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f103 0018 	add.w	r0, r3, #24
 8001fe0:	f107 0213 	add.w	r2, r7, #19
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f244 7140 	movw	r1, #18240	; 0x4740
 8001fea:	f001 f841 	bl	8003070 <ov5640_write_reg>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001ffa:	697b      	ldr	r3, [r7, #20]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0018 	add.w	r0, r3, #24
 800201e:	f107 020b 	add.w	r2, r7, #11
 8002022:	2301      	movs	r3, #1
 8002024:	f243 0108 	movw	r1, #12296	; 0x3008
 8002028:	f001 f822 	bl	8003070 <ov5640_write_reg>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e032      	b.n	80020a0 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800203a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 ffb3 	bl	8002faa <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f103 0018 	add.w	r0, r3, #24
 800204a:	f107 020b 	add.w	r2, r7, #11
 800204e:	2301      	movs	r3, #1
 8002050:	f243 010a 	movw	r1, #12298	; 0x300a
 8002054:	f000 fff5 	bl	8003042 <ov5640_read_reg>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e01c      	b.n	80020a0 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 0018 	add.w	r0, r3, #24
 8002074:	f107 020b 	add.w	r2, r7, #11
 8002078:	2301      	movs	r3, #1
 800207a:	f243 010b 	movw	r1, #12299	; 0x300b
 800207e:	f000 ffe0 	bl	8003042 <ov5640_read_reg>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e007      	b.n	80020a0 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	7afa      	ldrb	r2, [r7, #11]
 8002096:	431a      	orrs	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e01f      	b.n	8002102 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2201      	movs	r2, #1
 80020d2:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f103 0018 	add.w	r0, r3, #24
 8002124:	f107 020f 	add.w	r2, r7, #15
 8002128:	2301      	movs	r3, #1
 800212a:	f243 4106 	movw	r1, #13318	; 0x3406
 800212e:	f000 ff9f 	bl	8003070 <ov5640_write_reg>
 8002132:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800213a:	2346      	movs	r3, #70	; 0x46
 800213c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 0018 	add.w	r0, r3, #24
 8002144:	f107 020f 	add.w	r2, r7, #15
 8002148:	2301      	movs	r3, #1
 800214a:	f245 1190 	movw	r1, #20880	; 0x5190
 800214e:	f000 ff8f 	bl	8003070 <ov5640_write_reg>
 8002152:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 800215a:	23f8      	movs	r3, #248	; 0xf8
 800215c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 0018 	add.w	r0, r3, #24
 8002164:	f107 020f 	add.w	r2, r7, #15
 8002168:	2301      	movs	r3, #1
 800216a:	f245 1191 	movw	r1, #20881	; 0x5191
 800216e:	f000 ff7f 	bl	8003070 <ov5640_write_reg>
 8002172:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 800217a:	2304      	movs	r3, #4
 800217c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f103 0018 	add.w	r0, r3, #24
 8002184:	f107 020f 	add.w	r2, r7, #15
 8002188:	2301      	movs	r3, #1
 800218a:	f245 1192 	movw	r1, #20882	; 0x5192
 800218e:	f000 ff6f 	bl	8003070 <ov5640_write_reg>
 8002192:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 80db 	bne.w	8002352 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	f200 80af 	bhi.w	8002304 <OV5640_SetLightMode+0x1f4>
 80021a6:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <OV5640_SetLightMode+0x9c>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	080021cd 	.word	0x080021cd
 80021b0:	0800221b 	.word	0x0800221b
 80021b4:	08002305 	.word	0x08002305
 80021b8:	080022b7 	.word	0x080022b7
 80021bc:	08002305 	.word	0x08002305
 80021c0:	08002305 	.word	0x08002305
 80021c4:	08002305 	.word	0x08002305
 80021c8:	08002269 	.word	0x08002269
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	e01f      	b.n	8002212 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d8:	d018      	beq.n	800220c <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80021da:	4a61      	ldr	r2, [pc, #388]	; (8002360 <OV5640_SetLightMode+0x250>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f103 0018 	add.w	r0, r3, #24
 80021ee:	4a5c      	ldr	r2, [pc, #368]	; (8002360 <OV5640_SetLightMode+0x250>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021f6:	f107 020f 	add.w	r2, r7, #15
 80021fa:	2301      	movs	r3, #1
 80021fc:	f000 ff38 	bl	8003070 <ov5640_write_reg>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	3301      	adds	r3, #1
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d9dc      	bls.n	80021d2 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002218:	e09c      	b.n	8002354 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e01f      	b.n	8002260 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002226:	d018      	beq.n	800225a <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002228:	4a4e      	ldr	r2, [pc, #312]	; (8002364 <OV5640_SetLightMode+0x254>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	885b      	ldrh	r3, [r3, #2]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f103 0018 	add.w	r0, r3, #24
 800223c:	4a49      	ldr	r2, [pc, #292]	; (8002364 <OV5640_SetLightMode+0x254>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002244:	f107 020f 	add.w	r2, r7, #15
 8002248:	2301      	movs	r3, #1
 800224a:	f000 ff11 	bl	8003070 <ov5640_write_reg>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002258:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	3301      	adds	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d9dc      	bls.n	8002220 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8002266:	e075      	b.n	8002354 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e01f      	b.n	80022ae <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002274:	d018      	beq.n	80022a8 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8002276:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <OV5640_SetLightMode+0x258>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	885b      	ldrh	r3, [r3, #2]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f103 0018 	add.w	r0, r3, #24
 800228a:	4a37      	ldr	r2, [pc, #220]	; (8002368 <OV5640_SetLightMode+0x258>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002292:	f107 020f 	add.w	r2, r7, #15
 8002296:	2301      	movs	r3, #1
 8002298:	f000 feea 	bl	8003070 <ov5640_write_reg>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	3301      	adds	r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d9dc      	bls.n	800226e <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 80022b4:	e04e      	b.n	8002354 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e01f      	b.n	80022fc <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c2:	d018      	beq.n	80022f6 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80022c4:	4a29      	ldr	r2, [pc, #164]	; (800236c <OV5640_SetLightMode+0x25c>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	885b      	ldrh	r3, [r3, #2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f103 0018 	add.w	r0, r3, #24
 80022d8:	4a24      	ldr	r2, [pc, #144]	; (800236c <OV5640_SetLightMode+0x25c>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80022e0:	f107 020f 	add.w	r2, r7, #15
 80022e4:	2301      	movs	r3, #1
 80022e6:	f000 fec3 	bl	8003070 <ov5640_write_reg>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	3301      	adds	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d9dc      	bls.n	80022bc <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002302:	e027      	b.n	8002354 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e01f      	b.n	800234a <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002310:	d018      	beq.n	8002344 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <OV5640_SetLightMode+0x260>)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	885b      	ldrh	r3, [r3, #2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 0018 	add.w	r0, r3, #24
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <OV5640_SetLightMode+0x260>)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800232e:	f107 020f 	add.w	r2, r7, #15
 8002332:	2301      	movs	r3, #1
 8002334:	f000 fe9c 	bl	8003070 <ov5640_write_reg>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002342:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	3301      	adds	r3, #1
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b06      	cmp	r3, #6
 800234e:	d9dc      	bls.n	800230a <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002350:	e000      	b.n	8002354 <OV5640_SetLightMode+0x244>
    }
  }
 8002352:	bf00      	nop
  return ret;
 8002354:	697b      	ldr	r3, [r7, #20]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	08010468 	.word	0x08010468
 8002364:	08010484 	.word	0x08010484
 8002368:	080104a0 	.word	0x080104a0
 800236c:	080104bc 	.word	0x080104bc
 8002370:	080104d8 	.word	0x080104d8

08002374 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3b01      	subs	r3, #1
 8002382:	2b1f      	cmp	r3, #31
 8002384:	f200 81c0 	bhi.w	8002708 <OV5640_SetColorEffect+0x394>
 8002388:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <OV5640_SetColorEffect+0x1c>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	08002411 	.word	0x08002411
 8002394:	0800249b 	.word	0x0800249b
 8002398:	08002709 	.word	0x08002709
 800239c:	08002525 	.word	0x08002525
 80023a0:	08002709 	.word	0x08002709
 80023a4:	08002709 	.word	0x08002709
 80023a8:	08002709 	.word	0x08002709
 80023ac:	080025af 	.word	0x080025af
 80023b0:	08002709 	.word	0x08002709
 80023b4:	08002709 	.word	0x08002709
 80023b8:	08002709 	.word	0x08002709
 80023bc:	08002709 	.word	0x08002709
 80023c0:	08002709 	.word	0x08002709
 80023c4:	08002709 	.word	0x08002709
 80023c8:	08002709 	.word	0x08002709
 80023cc:	08002639 	.word	0x08002639
 80023d0:	08002709 	.word	0x08002709
 80023d4:	08002709 	.word	0x08002709
 80023d8:	08002709 	.word	0x08002709
 80023dc:	08002709 	.word	0x08002709
 80023e0:	08002709 	.word	0x08002709
 80023e4:	08002709 	.word	0x08002709
 80023e8:	08002709 	.word	0x08002709
 80023ec:	08002709 	.word	0x08002709
 80023f0:	08002709 	.word	0x08002709
 80023f4:	08002709 	.word	0x08002709
 80023f8:	08002709 	.word	0x08002709
 80023fc:	08002709 	.word	0x08002709
 8002400:	08002709 	.word	0x08002709
 8002404:	08002709 	.word	0x08002709
 8002408:	08002709 	.word	0x08002709
 800240c:	080026c1 	.word	0x080026c1
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002410:	23ff      	movs	r3, #255	; 0xff
 8002412:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 0018 	add.w	r0, r3, #24
 800241a:	f107 020b 	add.w	r2, r7, #11
 800241e:	2301      	movs	r3, #1
 8002420:	f245 0101 	movw	r1, #20481	; 0x5001
 8002424:	f000 fe24 	bl	8003070 <ov5640_write_reg>
 8002428:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10c      	bne.n	800244a <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002430:	2318      	movs	r3, #24
 8002432:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0018 	add.w	r0, r3, #24
 800243a:	f107 020b 	add.w	r2, r7, #11
 800243e:	2301      	movs	r3, #1
 8002440:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002444:	f000 fe14 	bl	8003070 <ov5640_write_reg>
 8002448:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002450:	23a0      	movs	r3, #160	; 0xa0
 8002452:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f103 0018 	add.w	r0, r3, #24
 800245a:	f107 020b 	add.w	r2, r7, #11
 800245e:	2301      	movs	r3, #1
 8002460:	f245 5183 	movw	r1, #21891	; 0x5583
 8002464:	f000 fe04 	bl	8003070 <ov5640_write_reg>
 8002468:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002470:	2340      	movs	r3, #64	; 0x40
 8002472:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 0018 	add.w	r0, r3, #24
 800247a:	f107 020b 	add.w	r2, r7, #11
 800247e:	2301      	movs	r3, #1
 8002480:	f245 5184 	movw	r1, #21892	; 0x5584
 8002484:	f000 fdf4 	bl	8003070 <ov5640_write_reg>
 8002488:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 815f 	beq.w	8002750 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002496:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002498:	e15a      	b.n	8002750 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 800249a:	23ff      	movs	r3, #255	; 0xff
 800249c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 0018 	add.w	r0, r3, #24
 80024a4:	f107 020b 	add.w	r2, r7, #11
 80024a8:	2301      	movs	r3, #1
 80024aa:	f245 0101 	movw	r1, #20481	; 0x5001
 80024ae:	f000 fddf 	bl	8003070 <ov5640_write_reg>
 80024b2:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 80024ba:	2318      	movs	r3, #24
 80024bc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f103 0018 	add.w	r0, r3, #24
 80024c4:	f107 020b 	add.w	r2, r7, #11
 80024c8:	2301      	movs	r3, #1
 80024ca:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024ce:	f000 fdcf 	bl	8003070 <ov5640_write_reg>
 80024d2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f103 0018 	add.w	r0, r3, #24
 80024e4:	f107 020b 	add.w	r2, r7, #11
 80024e8:	2301      	movs	r3, #1
 80024ea:	f245 5183 	movw	r1, #21891	; 0x5583
 80024ee:	f000 fdbf 	bl	8003070 <ov5640_write_reg>
 80024f2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80024fa:	23c0      	movs	r3, #192	; 0xc0
 80024fc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f103 0018 	add.w	r0, r3, #24
 8002504:	f107 020b 	add.w	r2, r7, #11
 8002508:	2301      	movs	r3, #1
 800250a:	f245 5184 	movw	r1, #21892	; 0x5584
 800250e:	f000 fdaf 	bl	8003070 <ov5640_write_reg>
 8002512:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 811c 	beq.w	8002754 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002520:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002522:	e117      	b.n	8002754 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002524:	23ff      	movs	r3, #255	; 0xff
 8002526:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f103 0018 	add.w	r0, r3, #24
 800252e:	f107 020b 	add.w	r2, r7, #11
 8002532:	2301      	movs	r3, #1
 8002534:	f245 0101 	movw	r1, #20481	; 0x5001
 8002538:	f000 fd9a 	bl	8003070 <ov5640_write_reg>
 800253c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002544:	2318      	movs	r3, #24
 8002546:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f103 0018 	add.w	r0, r3, #24
 800254e:	f107 020b 	add.w	r2, r7, #11
 8002552:	2301      	movs	r3, #1
 8002554:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002558:	f000 fd8a 	bl	8003070 <ov5640_write_reg>
 800255c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10c      	bne.n	800257e <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002564:	2360      	movs	r3, #96	; 0x60
 8002566:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f103 0018 	add.w	r0, r3, #24
 800256e:	f107 020b 	add.w	r2, r7, #11
 8002572:	2301      	movs	r3, #1
 8002574:	f245 5183 	movw	r1, #21891	; 0x5583
 8002578:	f000 fd7a 	bl	8003070 <ov5640_write_reg>
 800257c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10c      	bne.n	800259e <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002584:	2360      	movs	r3, #96	; 0x60
 8002586:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f103 0018 	add.w	r0, r3, #24
 800258e:	f107 020b 	add.w	r2, r7, #11
 8002592:	2301      	movs	r3, #1
 8002594:	f245 5184 	movw	r1, #21892	; 0x5584
 8002598:	f000 fd6a 	bl	8003070 <ov5640_write_reg>
 800259c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80d9 	beq.w	8002758 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025aa:	60fb      	str	r3, [r7, #12]
      }
      break;
 80025ac:	e0d4      	b.n	8002758 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 80025ae:	23ff      	movs	r3, #255	; 0xff
 80025b0:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f103 0018 	add.w	r0, r3, #24
 80025b8:	f107 020b 	add.w	r2, r7, #11
 80025bc:	2301      	movs	r3, #1
 80025be:	f245 0101 	movw	r1, #20481	; 0x5001
 80025c2:	f000 fd55 	bl	8003070 <ov5640_write_reg>
 80025c6:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80025ce:	2318      	movs	r3, #24
 80025d0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f103 0018 	add.w	r0, r3, #24
 80025d8:	f107 020b 	add.w	r2, r7, #11
 80025dc:	2301      	movs	r3, #1
 80025de:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025e2:	f000 fd45 	bl	8003070 <ov5640_write_reg>
 80025e6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f103 0018 	add.w	r0, r3, #24
 80025f8:	f107 020b 	add.w	r2, r7, #11
 80025fc:	2301      	movs	r3, #1
 80025fe:	f245 5183 	movw	r1, #21891	; 0x5583
 8002602:	f000 fd35 	bl	8003070 <ov5640_write_reg>
 8002606:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f103 0018 	add.w	r0, r3, #24
 8002618:	f107 020b 	add.w	r2, r7, #11
 800261c:	2301      	movs	r3, #1
 800261e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002622:	f000 fd25 	bl	8003070 <ov5640_write_reg>
 8002626:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8096 	beq.w	800275c <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002634:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002636:	e091      	b.n	800275c <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002638:	23ff      	movs	r3, #255	; 0xff
 800263a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f103 0018 	add.w	r0, r3, #24
 8002642:	f107 020b 	add.w	r2, r7, #11
 8002646:	2301      	movs	r3, #1
 8002648:	f245 0101 	movw	r1, #20481	; 0x5001
 800264c:	f000 fd10 	bl	8003070 <ov5640_write_reg>
 8002650:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10c      	bne.n	8002672 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8002658:	2318      	movs	r3, #24
 800265a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 0018 	add.w	r0, r3, #24
 8002662:	f107 020b 	add.w	r2, r7, #11
 8002666:	2301      	movs	r3, #1
 8002668:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800266c:	f000 fd00 	bl	8003070 <ov5640_write_reg>
 8002670:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10c      	bne.n	8002692 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0018 	add.w	r0, r3, #24
 8002682:	f107 020b 	add.w	r2, r7, #11
 8002686:	2301      	movs	r3, #1
 8002688:	f245 5183 	movw	r1, #21891	; 0x5583
 800268c:	f000 fcf0 	bl	8003070 <ov5640_write_reg>
 8002690:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10c      	bne.n	80026b2 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8002698:	23a0      	movs	r3, #160	; 0xa0
 800269a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 0018 	add.w	r0, r3, #24
 80026a2:	f107 020b 	add.w	r2, r7, #11
 80026a6:	2301      	movs	r3, #1
 80026a8:	f245 5184 	movw	r1, #21892	; 0x5584
 80026ac:	f000 fce0 	bl	8003070 <ov5640_write_reg>
 80026b0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d053      	beq.n	8002760 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026bc:	60fb      	str	r3, [r7, #12]
      }
      break;
 80026be:	e04f      	b.n	8002760 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 80026c0:	23ff      	movs	r3, #255	; 0xff
 80026c2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 0018 	add.w	r0, r3, #24
 80026ca:	f107 020b 	add.w	r2, r7, #11
 80026ce:	2301      	movs	r3, #1
 80026d0:	f245 0101 	movw	r1, #20481	; 0x5001
 80026d4:	f000 fccc 	bl	8003070 <ov5640_write_reg>
 80026d8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 80026e0:	2340      	movs	r3, #64	; 0x40
 80026e2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f103 0018 	add.w	r0, r3, #24
 80026ea:	f107 020b 	add.w	r2, r7, #11
 80026ee:	2301      	movs	r3, #1
 80026f0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026f4:	f000 fcbc 	bl	8003070 <ov5640_write_reg>
 80026f8:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d031      	beq.n	8002764 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002704:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002706:	e02d      	b.n	8002764 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8002708:	237f      	movs	r3, #127	; 0x7f
 800270a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 0018 	add.w	r0, r3, #24
 8002712:	f107 020b 	add.w	r2, r7, #11
 8002716:	2301      	movs	r3, #1
 8002718:	f245 0101 	movw	r1, #20481	; 0x5001
 800271c:	f000 fca8 	bl	8003070 <ov5640_write_reg>
 8002720:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10c      	bne.n	8002742 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002728:	2300      	movs	r3, #0
 800272a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f103 0018 	add.w	r0, r3, #24
 8002732:	f107 020b 	add.w	r2, r7, #11
 8002736:	2301      	movs	r3, #1
 8002738:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800273c:	f000 fc98 	bl	8003070 <ov5640_write_reg>
 8002740:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800274c:	60fb      	str	r3, [r7, #12]
      }

      break;
 800274e:	e00b      	b.n	8002768 <OV5640_SetColorEffect+0x3f4>
      break;
 8002750:	bf00      	nop
 8002752:	e00a      	b.n	800276a <OV5640_SetColorEffect+0x3f6>
      break;
 8002754:	bf00      	nop
 8002756:	e008      	b.n	800276a <OV5640_SetColorEffect+0x3f6>
      break;
 8002758:	bf00      	nop
 800275a:	e006      	b.n	800276a <OV5640_SetColorEffect+0x3f6>
      break;
 800275c:	bf00      	nop
 800275e:	e004      	b.n	800276a <OV5640_SetColorEffect+0x3f6>
      break;
 8002760:	bf00      	nop
 8002762:	e002      	b.n	800276a <OV5640_SetColorEffect+0x3f6>
      break;
 8002764:	bf00      	nop
 8002766:	e000      	b.n	800276a <OV5640_SetColorEffect+0x3f6>
      break;
 8002768:	bf00      	nop
  }

  return ret;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800277e:	4a34      	ldr	r2, [pc, #208]	; (8002850 <OV5640_SetBrightness+0xdc>)
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	ca07      	ldmia	r2, {r0, r1, r2}
 8002786:	c303      	stmia	r3!, {r0, r1}
 8002788:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800278a:	23ff      	movs	r3, #255	; 0xff
 800278c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 0018 	add.w	r0, r3, #24
 8002794:	f107 020f 	add.w	r2, r7, #15
 8002798:	2301      	movs	r3, #1
 800279a:	f245 0101 	movw	r1, #20481	; 0x5001
 800279e:	f000 fc67 	bl	8003070 <ov5640_write_reg>
 80027a2:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d111      	bne.n	80027ce <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3304      	adds	r3, #4
 80027ae:	3320      	adds	r3, #32
 80027b0:	443b      	add	r3, r7
 80027b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027b6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 0018 	add.w	r0, r3, #24
 80027be:	f107 020f 	add.w	r2, r7, #15
 80027c2:	2301      	movs	r3, #1
 80027c4:	f245 5187 	movw	r1, #21895	; 0x5587
 80027c8:	f000 fc52 	bl	8003070 <ov5640_write_reg>
 80027cc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 80027d4:	2304      	movs	r3, #4
 80027d6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f103 0018 	add.w	r0, r3, #24
 80027de:	f107 020f 	add.w	r2, r7, #15
 80027e2:	2301      	movs	r3, #1
 80027e4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027e8:	f000 fc42 	bl	8003070 <ov5640_write_reg>
 80027ec:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d127      	bne.n	8002844 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da12      	bge.n	8002820 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f103 0018 	add.w	r0, r3, #24
 8002804:	f107 020f 	add.w	r2, r7, #15
 8002808:	2301      	movs	r3, #1
 800280a:	f245 5188 	movw	r1, #21896	; 0x5588
 800280e:	f000 fc2f 	bl	8003070 <ov5640_write_reg>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e011      	b.n	8002844 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002820:	2309      	movs	r3, #9
 8002822:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f103 0018 	add.w	r0, r3, #24
 800282a:	f107 020f 	add.w	r2, r7, #15
 800282e:	2301      	movs	r3, #1
 8002830:	f245 5188 	movw	r1, #21896	; 0x5588
 8002834:	f000 fc1c 	bl	8003070 <ov5640_write_reg>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002842:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002844:	69fb      	ldr	r3, [r7, #28]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	0800ffb0 	.word	0x0800ffb0

08002854 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800285e:	4a30      	ldr	r2, [pc, #192]	; (8002920 <OV5640_SetSaturation+0xcc>)
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	ca07      	ldmia	r2, {r0, r1, r2}
 8002866:	c303      	stmia	r3!, {r0, r1}
 8002868:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800286a:	23ff      	movs	r3, #255	; 0xff
 800286c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 0018 	add.w	r0, r3, #24
 8002874:	f107 020f 	add.w	r2, r7, #15
 8002878:	2301      	movs	r3, #1
 800287a:	f245 0101 	movw	r1, #20481	; 0x5001
 800287e:	f000 fbf7 	bl	8003070 <ov5640_write_reg>
 8002882:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d111      	bne.n	80028ae <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3304      	adds	r3, #4
 800288e:	3320      	adds	r3, #32
 8002890:	443b      	add	r3, r7
 8002892:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002896:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f103 0018 	add.w	r0, r3, #24
 800289e:	f107 020f 	add.w	r2, r7, #15
 80028a2:	2301      	movs	r3, #1
 80028a4:	f245 5183 	movw	r1, #21891	; 0x5583
 80028a8:	f000 fbe2 	bl	8003070 <ov5640_write_reg>
 80028ac:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f103 0018 	add.w	r0, r3, #24
 80028ba:	f107 020f 	add.w	r2, r7, #15
 80028be:	2301      	movs	r3, #1
 80028c0:	f245 5184 	movw	r1, #21892	; 0x5584
 80028c4:	f000 fbd4 	bl	8003070 <ov5640_write_reg>
 80028c8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 80028d0:	2302      	movs	r3, #2
 80028d2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 0018 	add.w	r0, r3, #24
 80028da:	f107 020f 	add.w	r2, r7, #15
 80028de:	2301      	movs	r3, #1
 80028e0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028e4:	f000 fbc4 	bl	8003070 <ov5640_write_reg>
 80028e8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10c      	bne.n	800290a <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 80028f0:	2341      	movs	r3, #65	; 0x41
 80028f2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f103 0018 	add.w	r0, r3, #24
 80028fa:	f107 020f 	add.w	r2, r7, #15
 80028fe:	2301      	movs	r3, #1
 8002900:	f245 5188 	movw	r1, #21896	; 0x5588
 8002904:	f000 fbb4 	bl	8003070 <ov5640_write_reg>
 8002908:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002914:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002916:	69fb      	ldr	r3, [r7, #28]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0800ffbc 	.word	0x0800ffbc

08002924 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800292e:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <OV5640_SetContrast+0xcc>)
 8002930:	f107 0310 	add.w	r3, r7, #16
 8002934:	ca07      	ldmia	r2, {r0, r1, r2}
 8002936:	c303      	stmia	r3!, {r0, r1}
 8002938:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800293a:	23ff      	movs	r3, #255	; 0xff
 800293c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f103 0018 	add.w	r0, r3, #24
 8002944:	f107 020f 	add.w	r2, r7, #15
 8002948:	2301      	movs	r3, #1
 800294a:	f245 0101 	movw	r1, #20481	; 0x5001
 800294e:	f000 fb8f 	bl	8003070 <ov5640_write_reg>
 8002952:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 800295a:	2304      	movs	r3, #4
 800295c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f103 0018 	add.w	r0, r3, #24
 8002964:	f107 020f 	add.w	r2, r7, #15
 8002968:	2301      	movs	r3, #1
 800296a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800296e:	f000 fb7f 	bl	8003070 <ov5640_write_reg>
 8002972:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d111      	bne.n	800299e <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3304      	adds	r3, #4
 800297e:	3320      	adds	r3, #32
 8002980:	443b      	add	r3, r7
 8002982:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002986:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 0018 	add.w	r0, r3, #24
 800298e:	f107 020f 	add.w	r2, r7, #15
 8002992:	2301      	movs	r3, #1
 8002994:	f245 5186 	movw	r1, #21894	; 0x5586
 8002998:	f000 fb6a 	bl	8003070 <ov5640_write_reg>
 800299c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f103 0018 	add.w	r0, r3, #24
 80029aa:	f107 020f 	add.w	r2, r7, #15
 80029ae:	2301      	movs	r3, #1
 80029b0:	f245 5185 	movw	r1, #21893	; 0x5585
 80029b4:	f000 fb5c 	bl	8003070 <ov5640_write_reg>
 80029b8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10c      	bne.n	80029da <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 80029c0:	2341      	movs	r3, #65	; 0x41
 80029c2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0018 	add.w	r0, r3, #24
 80029ca:	f107 020f 	add.w	r2, r7, #15
 80029ce:	2301      	movs	r3, #1
 80029d0:	f245 5188 	movw	r1, #21896	; 0x5588
 80029d4:	f000 fb4c 	bl	8003070 <ov5640_write_reg>
 80029d8:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e4:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80029e6:	69fb      	ldr	r3, [r7, #28]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	0800ffc8 	.word	0x0800ffc8

080029f4 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08e      	sub	sp, #56	; 0x38
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80029fe:	4a3c      	ldr	r2, [pc, #240]	; (8002af0 <OV5640_SetHueDegree+0xfc>)
 8002a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8002a0a:	4a3a      	ldr	r2, [pc, #232]	; (8002af4 <OV5640_SetHueDegree+0x100>)
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002a16:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <OV5640_SetHueDegree+0x104>)
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002a22:	23ff      	movs	r3, #255	; 0xff
 8002a24:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f103 0018 	add.w	r0, r3, #24
 8002a2c:	f107 020f 	add.w	r2, r7, #15
 8002a30:	2301      	movs	r3, #1
 8002a32:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a36:	f000 fb1b 	bl	8003070 <ov5640_write_reg>
 8002a3a:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 0018 	add.w	r0, r3, #24
 8002a4c:	f107 020f 	add.w	r2, r7, #15
 8002a50:	2301      	movs	r3, #1
 8002a52:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a56:	f000 fb0b 	bl	8003070 <ov5640_write_reg>
 8002a5a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d111      	bne.n	8002a86 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3306      	adds	r3, #6
 8002a66:	3338      	adds	r3, #56	; 0x38
 8002a68:	443b      	add	r3, r7
 8002a6a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a6e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0018 	add.w	r0, r3, #24
 8002a76:	f107 020f 	add.w	r2, r7, #15
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f245 5181 	movw	r1, #21889	; 0x5581
 8002a80:	f000 faf6 	bl	8003070 <ov5640_write_reg>
 8002a84:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d111      	bne.n	8002ab0 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	3306      	adds	r3, #6
 8002a90:	3338      	adds	r3, #56	; 0x38
 8002a92:	443b      	add	r3, r7
 8002a94:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002a98:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f103 0018 	add.w	r0, r3, #24
 8002aa0:	f107 020f 	add.w	r2, r7, #15
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f245 5182 	movw	r1, #21890	; 0x5582
 8002aaa:	f000 fae1 	bl	8003070 <ov5640_write_reg>
 8002aae:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d111      	bne.n	8002ada <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	3306      	adds	r3, #6
 8002aba:	3338      	adds	r3, #56	; 0x38
 8002abc:	443b      	add	r3, r7
 8002abe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ac2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f103 0018 	add.w	r0, r3, #24
 8002aca:	f107 020f 	add.w	r2, r7, #15
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f245 5188 	movw	r1, #21896	; 0x5588
 8002ad4:	f000 facc 	bl	8003070 <ov5640_write_reg>
 8002ad8:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3738      	adds	r7, #56	; 0x38
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	0800ffd4 	.word	0x0800ffd4
 8002af4:	0800ffe0 	.word	0x0800ffe0
 8002af8:	0800ffec 	.word	0x0800ffec

08002afc <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f103 0018 	add.w	r0, r3, #24
 8002b10:	f107 020b 	add.w	r2, r7, #11
 8002b14:	2301      	movs	r3, #1
 8002b16:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b1a:	f000 fa92 	bl	8003042 <ov5640_read_reg>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e0cb      	b.n	8002cc4 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	f023 0306 	bic.w	r3, r3, #6
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f103 0018 	add.w	r0, r3, #24
 8002b3c:	f107 020a 	add.w	r2, r7, #10
 8002b40:	2301      	movs	r3, #1
 8002b42:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b46:	f000 fa7c 	bl	8003042 <ov5640_read_reg>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e0b5      	b.n	8002cc4 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002b5c:	7abb      	ldrb	r3, [r7, #10]
 8002b5e:	f023 0306 	bic.w	r3, r3, #6
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d056      	beq.n	8002c1a <OV5640_MirrorFlipConfig+0x11e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d87f      	bhi.n	8002c72 <OV5640_MirrorFlipConfig+0x176>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d029      	beq.n	8002bcc <OV5640_MirrorFlipConfig+0xd0>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d179      	bne.n	8002c72 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f103 0018 	add.w	r0, r3, #24
 8002b84:	f107 020b 	add.w	r2, r7, #11
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b8e:	f000 fa6f 	bl	8003070 <ov5640_write_reg>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b9c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b9e:	e08a      	b.n	8002cb6 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002ba0:	7abb      	ldrb	r3, [r7, #10]
 8002ba2:	f043 0306 	orr.w	r3, r3, #6
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f103 0018 	add.w	r0, r3, #24
 8002bb0:	f107 020a 	add.w	r2, r7, #10
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f643 0121 	movw	r1, #14369	; 0x3821
 8002bba:	f000 fa59 	bl	8003070 <ov5640_write_reg>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d078      	beq.n	8002cb6 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bc8:	60fb      	str	r3, [r7, #12]
          break;
 8002bca:	e074      	b.n	8002cb6 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	f043 0306 	orr.w	r3, r3, #6
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 0018 	add.w	r0, r3, #24
 8002bdc:	f107 020b 	add.w	r2, r7, #11
 8002be0:	2301      	movs	r3, #1
 8002be2:	f643 0120 	movw	r1, #14368	; 0x3820
 8002be6:	f000 fa43 	bl	8003070 <ov5640_write_reg>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf4:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002bf6:	e060      	b.n	8002cba <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f103 0018 	add.w	r0, r3, #24
 8002bfe:	f107 020a 	add.w	r2, r7, #10
 8002c02:	2301      	movs	r3, #1
 8002c04:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c08:	f000 fa32 	bl	8003070 <ov5640_write_reg>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d053      	beq.n	8002cba <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c16:	60fb      	str	r3, [r7, #12]
          break;
 8002c18:	e04f      	b.n	8002cba <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	f043 0306 	orr.w	r3, r3, #6
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f103 0018 	add.w	r0, r3, #24
 8002c2a:	f107 020b 	add.w	r2, r7, #11
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f643 0120 	movw	r1, #14368	; 0x3820
 8002c34:	f000 fa1c 	bl	8003070 <ov5640_write_reg>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c42:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c44:	e03b      	b.n	8002cbe <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002c46:	7abb      	ldrb	r3, [r7, #10]
 8002c48:	f043 0306 	orr.w	r3, r3, #6
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 0018 	add.w	r0, r3, #24
 8002c56:	f107 020a 	add.w	r2, r7, #10
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c60:	f000 fa06 	bl	8003070 <ov5640_write_reg>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d029      	beq.n	8002cbe <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c6e:	60fb      	str	r3, [r7, #12]
          break;
 8002c70:	e025      	b.n	8002cbe <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f103 0018 	add.w	r0, r3, #24
 8002c78:	f107 020b 	add.w	r2, r7, #11
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002c82:	f000 f9f5 	bl	8003070 <ov5640_write_reg>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c90:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c92:	e016      	b.n	8002cc2 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f103 0018 	add.w	r0, r3, #24
 8002c9a:	f107 020a 	add.w	r2, r7, #10
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f643 0121 	movw	r1, #14369	; 0x3821
 8002ca4:	f000 f9e4 	bl	8003070 <ov5640_write_reg>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb2:	60fb      	str	r3, [r7, #12]
          break;
 8002cb4:	e005      	b.n	8002cc2 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002cb6:	bf00      	nop
 8002cb8:	e004      	b.n	8002cc4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002cba:	bf00      	nop
 8002cbc:	e002      	b.n	8002cc4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002cc2:	bf00      	nop
      }
    }
  }

  return ret;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff f8a2 	bl	8001e2c <OV5640_GetResolution>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e04e      	b.n	8002d94 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b44      	cmp	r3, #68	; 0x44
 8002cfe:	d112      	bne.n	8002d26 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002d00:	2310      	movs	r3, #16
 8002d02:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f103 0018 	add.w	r0, r3, #24
 8002d0a:	f107 020b 	add.w	r2, r7, #11
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002d14:	f000 f9ac 	bl	8003070 <ov5640_write_reg>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d03a      	beq.n	8002d94 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e036      	b.n	8002d94 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d802      	bhi.n	8002d32 <OV5640_ZoomConfig+0x64>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d103      	bne.n	8002d38 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002d30:	e00a      	b.n	8002d48 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d004      	beq.n	8002d40 <OV5640_ZoomConfig+0x72>
          break;
 8002d36:	e007      	b.n	8002d48 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	613b      	str	r3, [r7, #16]
          break;
 8002d3e:	e003      	b.n	8002d48 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	613b      	str	r3, [r7, #16]
          break;
 8002d46:	bf00      	nop
      }

      tmp = 0x00;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f103 0018 	add.w	r0, r3, #24
 8002d52:	f107 020b 	add.w	r2, r7, #11
 8002d56:	2301      	movs	r3, #1
 8002d58:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002d5c:	f000 f988 	bl	8003070 <ov5640_write_reg>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e012      	b.n	8002d94 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0018 	add.w	r0, r3, #24
 8002d7a:	f107 020b 	add.w	r2, r7, #11
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f245 6101 	movw	r1, #22017	; 0x5601
 8002d84:	f000 f974 	bl	8003070 <ov5640_write_reg>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d92:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002d94:	697b      	ldr	r3, [r7, #20]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	f040 80ce 	bne.w	8002f50 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f103 0018 	add.w	r0, r3, #24
 8002dba:	f107 020b 	add.w	r2, r7, #11
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f243 0138 	movw	r1, #12344	; 0x3038
 8002dc4:	f000 f954 	bl	8003070 <ov5640_write_reg>
 8002dc8:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f103 0018 	add.w	r0, r3, #24
 8002dd6:	f107 020b 	add.w	r2, r7, #11
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f243 0139 	movw	r1, #12345	; 0x3039
 8002de0:	f000 f946 	bl	8003070 <ov5640_write_reg>
 8002de4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10c      	bne.n	8002e06 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002dec:	237c      	movs	r3, #124	; 0x7c
 8002dee:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f103 0018 	add.w	r0, r3, #24
 8002df6:	f107 020b 	add.w	r2, r7, #11
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002e00:	f000 f936 	bl	8003070 <ov5640_write_reg>
 8002e04:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10c      	bne.n	8002e26 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 0018 	add.w	r0, r3, #24
 8002e16:	f107 020b 	add.w	r2, r7, #11
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002e20:	f000 f926 	bl	8003070 <ov5640_write_reg>
 8002e24:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10c      	bne.n	8002e46 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002e2c:	2327      	movs	r3, #39	; 0x27
 8002e2e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f103 0018 	add.w	r0, r3, #24
 8002e36:	f107 020b 	add.w	r2, r7, #11
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002e40:	f000 f916 	bl	8003070 <ov5640_write_reg>
 8002e44:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10c      	bne.n	8002e66 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f103 0018 	add.w	r0, r3, #24
 8002e56:	f107 020b 	add.w	r2, r7, #11
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002e60:	f000 f906 	bl	8003070 <ov5640_write_reg>
 8002e64:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10c      	bne.n	8002e86 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002e6c:	23f6      	movs	r3, #246	; 0xf6
 8002e6e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 0018 	add.w	r0, r3, #24
 8002e76:	f107 020b 	add.w	r2, r7, #11
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002e80:	f000 f8f6 	bl	8003070 <ov5640_write_reg>
 8002e84:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10c      	bne.n	8002ea6 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f103 0018 	add.w	r0, r3, #24
 8002e96:	f107 020b 	add.w	r2, r7, #11
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002ea0:	f000 f8e6 	bl	8003070 <ov5640_write_reg>
 8002ea4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f103 0018 	add.w	r0, r3, #24
 8002eb2:	f107 020b 	add.w	r2, r7, #11
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002ebc:	f000 f8d8 	bl	8003070 <ov5640_write_reg>
 8002ec0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10c      	bne.n	8002ee2 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002ec8:	230b      	movs	r3, #11
 8002eca:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 0018 	add.w	r0, r3, #24
 8002ed2:	f107 020b 	add.w	r2, r7, #11
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002edc:	f000 f8c8 	bl	8003070 <ov5640_write_reg>
 8002ee0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10c      	bne.n	8002f02 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002ee8:	2388      	movs	r3, #136	; 0x88
 8002eea:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f103 0018 	add.w	r0, r3, #24
 8002ef2:	f107 020b 	add.w	r2, r7, #11
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002efc:	f000 f8b8 	bl	8003070 <ov5640_write_reg>
 8002f00:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10c      	bne.n	8002f22 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002f08:	230b      	movs	r3, #11
 8002f0a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f103 0018 	add.w	r0, r3, #24
 8002f12:	f107 020b 	add.w	r2, r7, #11
 8002f16:	2301      	movs	r3, #1
 8002f18:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002f1c:	f000 f8a8 	bl	8003070 <ov5640_write_reg>
 8002f20:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10c      	bne.n	8002f42 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002f28:	2388      	movs	r3, #136	; 0x88
 8002f2a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 0018 	add.w	r0, r3, #24
 8002f32:	f107 020b 	add.w	r2, r7, #11
 8002f36:	2301      	movs	r3, #1
 8002f38:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002f3c:	f000 f898 	bl	8003070 <ov5640_write_reg>
 8002f40:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02b      	beq.n	8002fa0 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e027      	b.n	8002fa0 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0018 	add.w	r0, r3, #24
 8002f56:	f107 020b 	add.w	r2, r7, #11
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002f60:	f000 f86f 	bl	8003042 <ov5640_read_reg>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e016      	b.n	8002fa0 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 0018 	add.w	r0, r3, #24
 8002f86:	f107 020b 	add.w	r2, r7, #11
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002f90:	f000 f86e 	bl	8003070 <ov5640_write_reg>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f9e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	4798      	blx	r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002fbe:	bf00      	nop
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	4798      	blx	r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d8f5      	bhi.n	8002fc0 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fde:	b590      	push	{r4, r7, lr}
 8002fe0:	b087      	sub	sp, #28
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	460b      	mov	r3, r1
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	691c      	ldr	r4, [r3, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	8918      	ldrh	r0, [r3, #8]
 8002ffe:	893b      	ldrh	r3, [r7, #8]
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	47a0      	blx	r4
 8003006:	4603      	mov	r3, r0
}
 8003008:	4618      	mov	r0, r3
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}

08003010 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	817b      	strh	r3, [r7, #10]
 8003020:	4613      	mov	r3, r2
 8003022:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	68dc      	ldr	r4, [r3, #12]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	8918      	ldrh	r0, [r3, #8]
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	47a0      	blx	r4
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}

08003042 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003042:	b590      	push	{r4, r7, lr}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	461a      	mov	r2, r3
 800304e:	460b      	mov	r3, r1
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	4613      	mov	r3, r2
 8003054:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685c      	ldr	r4, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6898      	ldr	r0, [r3, #8]
 800305e:	893b      	ldrh	r3, [r7, #8]
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	47a0      	blx	r4
 8003066:	4603      	mov	r3, r0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bd90      	pop	{r4, r7, pc}

08003070 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	461a      	mov	r2, r3
 800307c:	460b      	mov	r3, r1
 800307e:	817b      	strh	r3, [r7, #10]
 8003080:	4613      	mov	r3, r2
 8003082:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681c      	ldr	r4, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6898      	ldr	r0, [r3, #8]
 800308c:	893b      	ldrh	r3, [r7, #8]
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	47a0      	blx	r4
 8003094:	4603      	mov	r3, r0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}
	...

080030a0 <postProcess>:
		uint32_t original_height,
		uint32_t scaled_width,
		uint32_t scaled_height,
		uint32_t grid_size,
		float probabilities[GRID_SIZE][GRID_SIZE]
){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
	if(scaled_width != scaled_height){
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d14f      	bne.n	8003156 <postProcess+0xb6>
		return;
	}

	uint8_t pixels_per_grid = scaled_width/GRID_SIZE;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4a29      	ldr	r2, [pc, #164]	; (8003160 <postProcess+0xc0>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	08db      	lsrs	r3, r3, #3
 80030c0:	757b      	strb	r3, [r7, #21]

	for(uint8_t i=0; i<GRID_SIZE; i++){
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
 80030c6:	e042      	b.n	800314e <postProcess+0xae>
		for(uint8_t j=0; j<GRID_SIZE; j++){
 80030c8:	2300      	movs	r3, #0
 80030ca:	75bb      	strb	r3, [r7, #22]
 80030cc:	e039      	b.n	8003142 <postProcess+0xa2>
			if(probabilities[j][i]>THRESHOLD){
 80030ce:	7dba      	ldrb	r2, [r7, #22]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	461a      	mov	r2, r3
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	441a      	add	r2, r3
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	dd22      	ble.n	800313c <postProcess+0x9c>
				drawCrosshair(buffer, ((i*pixels_per_grid+pixels_per_grid/2)*original_width)/scaled_width, ((j*pixels_per_grid+pixels_per_grid/2)*original_height)/scaled_height);
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	7d7a      	ldrb	r2, [r7, #21]
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	7d7a      	ldrb	r2, [r7, #21]
 8003100:	0852      	lsrs	r2, r2, #1
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4413      	add	r3, r2
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	fb03 f202 	mul.w	r2, r3, r2
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	4619      	mov	r1, r3
 8003116:	7dbb      	ldrb	r3, [r7, #22]
 8003118:	7d7a      	ldrb	r2, [r7, #21]
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	7d7a      	ldrb	r2, [r7, #21]
 8003120:	0852      	lsrs	r2, r2, #1
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	4413      	add	r3, r2
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	fb03 f202 	mul.w	r2, r3, r2
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	461a      	mov	r2, r3
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7fd fcce 	bl	8000ad8 <drawCrosshair>
		for(uint8_t j=0; j<GRID_SIZE; j++){
 800313c:	7dbb      	ldrb	r3, [r7, #22]
 800313e:	3301      	adds	r3, #1
 8003140:	75bb      	strb	r3, [r7, #22]
 8003142:	7dbb      	ldrb	r3, [r7, #22]
 8003144:	2b0b      	cmp	r3, #11
 8003146:	d9c2      	bls.n	80030ce <postProcess+0x2e>
	for(uint8_t i=0; i<GRID_SIZE; i++){
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	3301      	adds	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b0b      	cmp	r3, #11
 8003152:	d9b9      	bls.n	80030c8 <postProcess+0x28>
 8003154:	e000      	b.n	8003158 <postProcess+0xb8>
		return;
 8003156:	bf00      	nop
			}
		}
	}
}
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	aaaaaaab 	.word	0xaaaaaaab

08003164 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800316c:	4a07      	ldr	r2, [pc, #28]	; (800318c <RetargetInit+0x28>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <RetargetInit+0x2c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6898      	ldr	r0, [r3, #8]
 8003178:	2300      	movs	r3, #0
 800317a:	2202      	movs	r2, #2
 800317c:	2100      	movs	r1, #0
 800317e:	f00c fac5 	bl	800f70c <setvbuf>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	24000528 	.word	0x24000528
 8003190:	24000294 	.word	0x24000294

08003194 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d002      	beq.n	80031ac <_write+0x18>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d111      	bne.n	80031d0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <_write+0x54>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	f00a fa5a 	bl	800d672 <HAL_UART_Transmit>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <_write+0x38>
      return len;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	e008      	b.n	80031de <_write+0x4a>
    else
      return EIO;
 80031cc:	2305      	movs	r3, #5
 80031ce:	e006      	b.n	80031de <_write+0x4a>
  }
  errno = EBADF;
 80031d0:	f00c fa6a 	bl	800f6a8 <__errno>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2209      	movs	r2, #9
 80031d8:	601a      	str	r2, [r3, #0]
  return -1;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	24000528 	.word	0x24000528

080031ec <_close>:

int _close(int fd) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db04      	blt.n	8003204 <_close+0x18>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	dc01      	bgt.n	8003204 <_close+0x18>
    return 0;
 8003200:	2300      	movs	r3, #0
 8003202:	e006      	b.n	8003212 <_close+0x26>

  errno = EBADF;
 8003204:	f00c fa50 	bl	800f6a8 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	2209      	movs	r2, #9
 800320c:	601a      	str	r2, [r3, #0]
  return -1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <_read>:

int _read(int fd, char* ptr, int len) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d110      	bne.n	8003250 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <_read+0x4c>)
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003236:	2201      	movs	r2, #1
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	f00a faa8 	bl	800d78e <HAL_UART_Receive>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <_read+0x30>
      return 1;
 8003248:	2301      	movs	r3, #1
 800324a:	e008      	b.n	800325e <_read+0x42>
    else
      return EIO;
 800324c:	2305      	movs	r3, #5
 800324e:	e006      	b.n	800325e <_read+0x42>
  }
  errno = EBADF;
 8003250:	f00c fa2a 	bl	800f6a8 <__errno>
 8003254:	4603      	mov	r3, r0
 8003256:	2209      	movs	r2, #9
 8003258:	601a      	str	r2, [r3, #0]
  return -1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	24000528 	.word	0x24000528

0800326c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db08      	blt.n	800328e <_fstat+0x22>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	dc05      	bgt.n	800328e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003288:	605a      	str	r2, [r3, #4]
    return 0;
 800328a:	2300      	movs	r3, #0
 800328c:	e005      	b.n	800329a <_fstat+0x2e>
  }

  errno = EBADF;
 800328e:	f00c fa0b 	bl	800f6a8 <__errno>
 8003292:	4603      	mov	r3, r0
 8003294:	2209      	movs	r2, #9
 8003296:	601a      	str	r2, [r3, #0]
  return 0;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <MX_RTC_Init+0x50>)
 80032ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032b6:	227f      	movs	r2, #127	; 0x7f
 80032b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032d2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032da:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_RTC_Init+0x4c>)
 80032dc:	f009 ffc2 	bl	800d264 <HAL_RTC_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80032e6:	f7fe fa33 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2400052c 	.word	0x2400052c
 80032f4:	58004000 	.word	0x58004000

080032f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b0b2      	sub	sp, #200	; 0xc8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003300:	f107 0308 	add.w	r3, r7, #8
 8003304:	22c0      	movs	r2, #192	; 0xc0
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f00c f9f7 	bl	800f6fc <memset>
  if(rtcHandle->Instance==RTC)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a10      	ldr	r2, [pc, #64]	; (8003354 <HAL_RTC_MspInit+0x5c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d119      	bne.n	800334c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003318:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	4618      	mov	r0, r3
 8003332:	f008 f9b7 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800333c:	f7fe fa08 	bl	8001750 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RTC_MspInit+0x60>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_RTC_MspInit+0x60>)
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800334c:	bf00      	nop
 800334e:	37c8      	adds	r7, #200	; 0xc8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	58004000 	.word	0x58004000
 8003358:	58024400 	.word	0x58024400

0800335c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <BSP_I2C4_Init+0x64>)
 8003368:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <BSP_I2C4_Init+0x68>)
 800336a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <BSP_I2C4_Init+0x6c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11f      	bne.n	80033b4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <BSP_I2C4_Init+0x6c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <BSP_I2C4_Init+0x6c>)
 800337c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800337e:	4810      	ldr	r0, [pc, #64]	; (80033c0 <BSP_I2C4_Init+0x64>)
 8003380:	f006 fa2a 	bl	80097d8 <HAL_I2C_GetState>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d114      	bne.n	80033b4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800338a:	480d      	ldr	r0, [pc, #52]	; (80033c0 <BSP_I2C4_Init+0x64>)
 800338c:	f000 fb60 	bl	8003a50 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003390:	f008 f972 	bl	800b678 <HAL_RCC_GetPCLK2Freq>
 8003394:	4603      	mov	r3, r0
 8003396:	490d      	ldr	r1, [pc, #52]	; (80033cc <BSP_I2C4_Init+0x70>)
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f8e3 	bl	8003564 <I2C_GetTiming>
 800339e:	4603      	mov	r3, r0
 80033a0:	4619      	mov	r1, r3
 80033a2:	4807      	ldr	r0, [pc, #28]	; (80033c0 <BSP_I2C4_Init+0x64>)
 80033a4:	f000 f838 	bl	8003418 <MX_I2C4_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80033ae:	f06f 0307 	mvn.w	r3, #7
 80033b2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80033b4:	687b      	ldr	r3, [r7, #4]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	24000f5c 	.word	0x24000f5c
 80033c4:	58001c00 	.word	0x58001c00
 80033c8:	24000554 	.word	0x24000554
 80033cc:	000186a0 	.word	0x000186a0

080033d0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <BSP_I2C4_DeInit+0x40>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3b01      	subs	r3, #1
 80033e0:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <BSP_I2C4_DeInit+0x40>)
 80033e2:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <BSP_I2C4_DeInit+0x40>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80033ec:	4809      	ldr	r0, [pc, #36]	; (8003414 <BSP_I2C4_DeInit+0x44>)
 80033ee:	f000 fb9b 	bl	8003b28 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80033f2:	4808      	ldr	r0, [pc, #32]	; (8003414 <BSP_I2C4_DeInit+0x44>)
 80033f4:	f005 ff7e 	bl	80092f4 <HAL_I2C_DeInit>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80033fe:	f06f 0307 	mvn.w	r3, #7
 8003402:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	24000554 	.word	0x24000554
 8003414:	24000f5c 	.word	0x24000f5c

08003418 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f005 febc 	bl	80091d4 <HAL_I2C_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e014      	b.n	8003492 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f006 fc84 	bl	8009d7c <HAL_I2CEx_ConfigAnalogFilter>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	e008      	b.n	8003492 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003480:	2100      	movs	r1, #0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f006 fcc5 	bl	8009e12 <HAL_I2CEx_ConfigDigitalFilter>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60ba      	str	r2, [r7, #8]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	81fb      	strh	r3, [r7, #14]
 80034aa:	460b      	mov	r3, r1
 80034ac:	81bb      	strh	r3, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80034b2:	89b9      	ldrh	r1, [r7, #12]
 80034b4:	89f8      	ldrh	r0, [r7, #14]
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2202      	movs	r2, #2
 80034be:	f000 fb57 	bl	8003b70 <I2C4_WriteReg>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e00c      	b.n	80034e8 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80034ce:	4809      	ldr	r0, [pc, #36]	; (80034f4 <BSP_I2C4_WriteReg16+0x58>)
 80034d0:	f006 f990 	bl	80097f4 <HAL_I2C_GetError>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d103      	bne.n	80034e2 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80034da:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e002      	b.n	80034e8 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80034e2:	f06f 0303 	mvn.w	r3, #3
 80034e6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80034e8:	697b      	ldr	r3, [r7, #20]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	24000f5c 	.word	0x24000f5c

080034f8 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60ba      	str	r2, [r7, #8]
 8003500:	461a      	mov	r2, r3
 8003502:	4603      	mov	r3, r0
 8003504:	81fb      	strh	r3, [r7, #14]
 8003506:	460b      	mov	r3, r1
 8003508:	81bb      	strh	r3, [r7, #12]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800350e:	89b9      	ldrh	r1, [r7, #12]
 8003510:	89f8      	ldrh	r0, [r7, #14]
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2202      	movs	r2, #2
 800351a:	f000 fb4f 	bl	8003bbc <I2C4_ReadReg>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e00c      	b.n	8003544 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800352a:	4809      	ldr	r0, [pc, #36]	; (8003550 <BSP_I2C4_ReadReg16+0x58>)
 800352c:	f006 f962 	bl	80097f4 <HAL_I2C_GetError>
 8003530:	4603      	mov	r3, r0
 8003532:	2b04      	cmp	r3, #4
 8003534:	d103      	bne.n	800353e <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003536:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e002      	b.n	8003544 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800353e:	f06f 0303 	mvn.w	r3, #3
 8003542:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003544:	697b      	ldr	r3, [r7, #20]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	24000f5c 	.word	0x24000f5c

08003554 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003558:	f000 ffd4 	bl	8004504 <HAL_GetTick>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d06b      	beq.n	8003650 <I2C_GetTiming+0xec>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d068      	beq.n	8003650 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e060      	b.n	8003646 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003584:	4a35      	ldr	r2, [pc, #212]	; (800365c <I2C_GetTiming+0xf8>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3304      	adds	r3, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d352      	bcc.n	8003640 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800359a:	4a30      	ldr	r2, [pc, #192]	; (800365c <I2C_GetTiming+0xf8>)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	3308      	adds	r3, #8
 80035a8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d847      	bhi.n	8003640 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80035b0:	6939      	ldr	r1, [r7, #16]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f856 	bl	8003664 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80035b8:	6939      	ldr	r1, [r7, #16]
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f940 	bl	8003840 <I2C_Compute_SCLL_SCLH>
 80035c0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b7f      	cmp	r3, #127	; 0x7f
 80035c6:	d842      	bhi.n	800364e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80035c8:	4925      	ldr	r1, [pc, #148]	; (8003660 <I2C_GetTiming+0xfc>)
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80035da:	4821      	ldr	r0, [pc, #132]	; (8003660 <I2C_GetTiming+0xfc>)
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4403      	add	r3, r0
 80035e8:	3304      	adds	r3, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	051b      	lsls	r3, r3, #20
 80035ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80035f2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80035f4:	481a      	ldr	r0, [pc, #104]	; (8003660 <I2C_GetTiming+0xfc>)
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3308      	adds	r3, #8
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800360c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800360e:	4814      	ldr	r0, [pc, #80]	; (8003660 <I2C_GetTiming+0xfc>)
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4403      	add	r3, r0
 800361c:	330c      	adds	r3, #12
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003624:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003626:	480e      	ldr	r0, [pc, #56]	; (8003660 <I2C_GetTiming+0xfc>)
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4403      	add	r3, r0
 8003634:	3310      	adds	r3, #16
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800363a:	430b      	orrs	r3, r1
 800363c:	617b      	str	r3, [r7, #20]
        }
        break;
 800363e:	e006      	b.n	800364e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3301      	adds	r3, #1
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d99b      	bls.n	8003584 <I2C_GetTiming+0x20>
 800364c:	e000      	b.n	8003650 <I2C_GetTiming+0xec>
        break;
 800364e:	bf00      	nop
      }
    }
  }

  return ret;
 8003650:	697b      	ldr	r3, [r7, #20]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	080104f4 	.word	0x080104f4
 8003660:	24000558 	.word	0x24000558

08003664 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003664:	b480      	push	{r7}
 8003666:	b08f      	sub	sp, #60	; 0x3c
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800366e:	2310      	movs	r3, #16
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	085a      	lsrs	r2, r3, #1
 8003676:	4b6e      	ldr	r3, [pc, #440]	; (8003830 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003678:	4413      	add	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003680:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003682:	2332      	movs	r3, #50	; 0x32
 8003684:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003686:	f44f 7382 	mov.w	r3, #260	; 0x104
 800368a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800368c:	4a69      	ldr	r2, [pc, #420]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3324      	adds	r3, #36	; 0x24
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	4a65      	ldr	r2, [pc, #404]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	330c      	adds	r3, #12
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80036b0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80036b2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80036b4:	495f      	ldr	r1, [pc, #380]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	202c      	movs	r0, #44	; 0x2c
 80036ba:	fb00 f303 	mul.w	r3, r0, r3
 80036be:	440b      	add	r3, r1
 80036c0:	3328      	adds	r3, #40	; 0x28
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3303      	adds	r3, #3
 80036c6:	69f9      	ldr	r1, [r7, #28]
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3310      	adds	r3, #16
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	4a54      	ldr	r2, [pc, #336]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3320      	adds	r3, #32
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80036f4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80036f6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80036f8:	494e      	ldr	r1, [pc, #312]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	202c      	movs	r0, #44	; 0x2c
 80036fe:	fb00 f303 	mul.w	r3, r0, r3
 8003702:	440b      	add	r3, r1
 8003704:	3328      	adds	r3, #40	; 0x28
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3304      	adds	r3, #4
 800370a:	69f9      	ldr	r1, [r7, #28]
 800370c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003714:	4a47      	ldr	r2, [pc, #284]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3320      	adds	r3, #32
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	4a43      	ldr	r2, [pc, #268]	; (8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3314      	adds	r3, #20
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4403      	add	r3, r0
 8003738:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	dc01      	bgt.n	8003744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	dc01      	bgt.n	800374e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800374e:	2300      	movs	r3, #0
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
 8003752:	e062      	b.n	800381a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	e059      	b.n	800380e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	3301      	adds	r3, #1
 800375e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003760:	3201      	adds	r2, #1
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	429a      	cmp	r2, r3
 8003774:	d348      	bcc.n	8003808 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	e042      	b.n	8003802 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	3301      	adds	r3, #1
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	fb03 f202 	mul.w	r2, r3, r2
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fb02 f303 	mul.w	r3, r2, r3
 800378c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d332      	bcc.n	80037fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d82e      	bhi.n	80037fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800379e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d02a      	beq.n	80037fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4924      	ldr	r1, [pc, #144]	; (800383c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	491f      	ldr	r1, [pc, #124]	; (800383c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3304      	adds	r3, #4
 80037cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ce:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4919      	ldr	r1, [pc, #100]	; (800383c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3308      	adds	r3, #8
 80037e2:	6a3a      	ldr	r2, [r7, #32]
 80037e4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	4a11      	ldr	r2, [pc, #68]	; (8003838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037f2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b7f      	cmp	r3, #127	; 0x7f
 80037fa:	d812      	bhi.n	8003822 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	3301      	adds	r3, #1
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	2b0f      	cmp	r3, #15
 8003806:	d9b9      	bls.n	800377c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	3301      	adds	r3, #1
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d9a2      	bls.n	800375a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	3301      	adds	r3, #1
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d999      	bls.n	8003754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003820:	e000      	b.n	8003824 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003822:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003824:	373c      	adds	r7, #60	; 0x3c
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	3b9aca00 	.word	0x3b9aca00
 8003834:	080104f4 	.word	0x080104f4
 8003838:	24000f58 	.word	0x24000f58
 800383c:	24000558 	.word	0x24000558

08003840 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003840:	b480      	push	{r7}
 8003842:	b093      	sub	sp, #76	; 0x4c
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	085a      	lsrs	r2, r3, #1
 8003854:	4b7a      	ldr	r3, [pc, #488]	; (8003a40 <I2C_Compute_SCLL_SCLH+0x200>)
 8003856:	4413      	add	r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	fbb3 f3f2 	udiv	r3, r3, r2
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003860:	4a78      	ldr	r2, [pc, #480]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	085a      	lsrs	r2, r3, #1
 8003870:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <I2C_Compute_SCLL_SCLH+0x200>)
 8003872:	4413      	add	r3, r2
 8003874:	4973      	ldr	r1, [pc, #460]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	202c      	movs	r0, #44	; 0x2c
 800387a:	fb00 f202 	mul.w	r2, r0, r2
 800387e:	440a      	add	r2, r1
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	fbb3 f3f2 	udiv	r3, r3, r2
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003888:	2332      	movs	r3, #50	; 0x32
 800388a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800388c:	4a6d      	ldr	r2, [pc, #436]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3328      	adds	r3, #40	; 0x28
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80038a4:	4a67      	ldr	r2, [pc, #412]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	212c      	movs	r1, #44	; 0x2c
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3304      	adds	r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a62      	ldr	r2, [pc, #392]	; (8003a40 <I2C_Compute_SCLL_SCLH+0x200>)
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80038bc:	4a61      	ldr	r2, [pc, #388]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3308      	adds	r3, #8
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <I2C_Compute_SCLL_SCLH+0x200>)
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80038d8:	2300      	movs	r3, #0
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
 80038dc:	e0a3      	b.n	8003a26 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80038de:	495a      	ldr	r1, [pc, #360]	; (8003a48 <I2C_Compute_SCLL_SCLH+0x208>)
 80038e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fc:	e08c      	b.n	8003a18 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	441a      	add	r2, r3
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	3301      	adds	r3, #1
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	fb03 f101 	mul.w	r1, r3, r1
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	440b      	add	r3, r1
 8003914:	4413      	add	r3, r2
 8003916:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003918:	4a4a      	ldr	r2, [pc, #296]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3318      	adds	r3, #24
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	429a      	cmp	r2, r3
 800392c:	d971      	bls.n	8003a12 <I2C_Compute_SCLL_SCLH+0x1d2>
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	1ad2      	subs	r2, r2, r3
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800393c:	429a      	cmp	r2, r3
 800393e:	d268      	bcs.n	8003a12 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003940:	2300      	movs	r3, #0
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
 8003944:	e062      	b.n	8003a0c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	441a      	add	r2, r3
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	3301      	adds	r3, #1
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	fb03 f101 	mul.w	r1, r3, r1
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	440b      	add	r3, r1
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	441a      	add	r2, r3
 8003966:	4937      	ldr	r1, [pc, #220]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	202c      	movs	r0, #44	; 0x2c
 800396c:	fb00 f303 	mul.w	r3, r0, r3
 8003970:	440b      	add	r3, r1
 8003972:	3320      	adds	r3, #32
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	441a      	add	r2, r3
 8003978:	4932      	ldr	r1, [pc, #200]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	202c      	movs	r0, #44	; 0x2c
 800397e:	fb00 f303 	mul.w	r3, r0, r3
 8003982:	440b      	add	r3, r1
 8003984:	3324      	adds	r3, #36	; 0x24
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4413      	add	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	429a      	cmp	r2, r3
 8003992:	d338      	bcc.n	8003a06 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	429a      	cmp	r2, r3
 800399a:	d834      	bhi.n	8003a06 <I2C_Compute_SCLL_SCLH+0x1c6>
 800399c:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <I2C_Compute_SCLL_SCLH+0x204>)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	331c      	adds	r3, #28
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d329      	bcc.n	8003a06 <I2C_Compute_SCLL_SCLH+0x1c6>
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d225      	bcs.n	8003a06 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	da02      	bge.n	80039ce <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	425b      	negs	r3, r3
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d917      	bls.n	8003a06 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80039da:	491b      	ldr	r1, [pc, #108]	; (8003a48 <I2C_Compute_SCLL_SCLH+0x208>)
 80039dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3310      	adds	r3, #16
 80039ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80039ee:	4916      	ldr	r1, [pc, #88]	; (8003a48 <I2C_Compute_SCLL_SCLH+0x208>)
 80039f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	330c      	adds	r3, #12
 80039fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a00:	601a      	str	r2, [r3, #0]
              ret = count;
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	3301      	adds	r3, #1
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d999      	bls.n	8003946 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a14:	3301      	adds	r3, #1
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	2bff      	cmp	r3, #255	; 0xff
 8003a1c:	f67f af6f 	bls.w	80038fe <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	3301      	adds	r3, #1
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <I2C_Compute_SCLL_SCLH+0x20c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f4ff af56 	bcc.w	80038de <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	374c      	adds	r7, #76	; 0x4c
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	3b9aca00 	.word	0x3b9aca00
 8003a44:	080104f4 	.word	0x080104f4
 8003a48:	24000558 	.word	0x24000558
 8003a4c:	24000f58 	.word	0x24000f58

08003a50 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003a58:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003a5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a5e:	4a30      	ldr	r2, [pc, #192]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003a60:	f043 0308 	orr.w	r3, r3, #8
 8003a64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003a6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a98:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003a9a:	2312      	movs	r3, #18
 8003a9c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	481c      	ldr	r0, [pc, #112]	; (8003b24 <I2C4_MspInit+0xd4>)
 8003ab2:	f005 f8a1 	bl	8008bf8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003abc:	2312      	movs	r3, #18
 8003abe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003ac8:	2304      	movs	r3, #4
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003acc:	f107 0314 	add.w	r3, r7, #20
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4814      	ldr	r0, [pc, #80]	; (8003b24 <I2C4_MspInit+0xd4>)
 8003ad4:	f005 f890 	bl	8008bf8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003ada:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ade:	4a10      	ldr	r2, [pc, #64]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003aea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b02:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <I2C4_MspInit+0xd0>)
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003b16:	bf00      	nop
 8003b18:	3728      	adds	r7, #40	; 0x28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	58020c00 	.word	0x58020c00

08003b28 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	480b      	ldr	r0, [pc, #44]	; (8003b68 <I2C4_MspDeInit+0x40>)
 8003b3c:	f005 fa0c 	bl	8008f58 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4807      	ldr	r0, [pc, #28]	; (8003b68 <I2C4_MspDeInit+0x40>)
 8003b4c:	f005 fa04 	bl	8008f58 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <I2C4_MspDeInit+0x44>)
 8003b52:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <I2C4_MspDeInit+0x44>)
 8003b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003b60:	bf00      	nop
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	58020c00 	.word	0x58020c00
 8003b6c:	58024400 	.word	0x58024400

08003b70 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af04      	add	r7, sp, #16
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	4603      	mov	r3, r0
 8003b7a:	81fb      	strh	r3, [r7, #14]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	81bb      	strh	r3, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003b84:	8978      	ldrh	r0, [r7, #10]
 8003b86:	89ba      	ldrh	r2, [r7, #12]
 8003b88:	89f9      	ldrh	r1, [r7, #14]
 8003b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b8e:	9302      	str	r3, [sp, #8]
 8003b90:	8b3b      	ldrh	r3, [r7, #24]
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4807      	ldr	r0, [pc, #28]	; (8003bb8 <I2C4_WriteReg+0x48>)
 8003b9c:	f005 fbee 	bl	800937c <HAL_I2C_Mem_Write>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e001      	b.n	8003bae <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003baa:	f06f 0307 	mvn.w	r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	24000f5c 	.word	0x24000f5c

08003bbc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af04      	add	r7, sp, #16
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	81fb      	strh	r3, [r7, #14]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	81bb      	strh	r3, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003bd0:	8978      	ldrh	r0, [r7, #10]
 8003bd2:	89ba      	ldrh	r2, [r7, #12]
 8003bd4:	89f9      	ldrh	r1, [r7, #14]
 8003bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bda:	9302      	str	r3, [sp, #8]
 8003bdc:	8b3b      	ldrh	r3, [r7, #24]
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4603      	mov	r3, r0
 8003be6:	4807      	ldr	r0, [pc, #28]	; (8003c04 <I2C4_ReadReg+0x48>)
 8003be8:	f005 fcdc 	bl	80095a4 <HAL_I2C_Mem_Read>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e001      	b.n	8003bfa <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003bf6:	f06f 0307 	mvn.w	r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	24000f5c 	.word	0x24000f5c

08003c08 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c1e:	f06f 0301 	mvn.w	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e02d      	b.n	8003c82 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003c26:	4819      	ldr	r0, [pc, #100]	; (8003c8c <BSP_CAMERA_Init+0x84>)
 8003c28:	f7fc fd16 	bl	8000658 <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003c2c:	f7fc fce0 	bl	80005f0 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003c30:	2000      	movs	r0, #0
 8003c32:	f000 f887 	bl	8003d44 <BSP_CAMERA_HwReset>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003c3c:	f06f 0307 	mvn.w	r3, #7
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e01e      	b.n	8003c82 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	68b8      	ldr	r0, [r7, #8]
 8003c48:	f000 f93e 	bl	8003ec8 <OV5640_Probe>
 8003c4c:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003c54:	f06f 0306 	mvn.w	r3, #6
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e012      	b.n	8003c82 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <BSP_CAMERA_Init+0x88>)
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	440b      	add	r3, r1
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003c6e:	4908      	ldr	r1, [pc, #32]	; (8003c90 <BSP_CAMERA_Init+0x88>)
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003c82:	697b      	ldr	r3, [r7, #20]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	24000314 	.word	0x24000314
 8003c90:	24000fb4 	.word	0x24000fb4

08003c94 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ca6:	f06f 0301 	mvn.w	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e022      	b.n	8003cf4 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003cae:	68bc      	ldr	r4, [r7, #8]
 8003cb0:	4913      	ldr	r1, [pc, #76]	; (8003d00 <BSP_CAMERA_Start+0x6c>)
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	440b      	add	r3, r1
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	490f      	ldr	r1, [pc, #60]	; (8003d00 <BSP_CAMERA_Start+0x6c>)
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	440b      	add	r3, r1
 8003cce:	3304      	adds	r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f000 f8a6 	bl	8003e24 <GetSize>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4622      	mov	r2, r4
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4809      	ldr	r0, [pc, #36]	; (8003d04 <BSP_CAMERA_Start+0x70>)
 8003ce0:	f000 fdca 	bl	8004878 <HAL_DCMI_Start_DMA>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003cea:	f06f 0303 	mvn.w	r3, #3
 8003cee:	e002      	b.n	8003cf6 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003cf4:	697b      	ldr	r3, [r7, #20]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	24000fb4 	.word	0x24000fb4
 8003d04:	24000314 	.word	0x24000314

08003d08 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d16:	f06f 0301 	mvn.w	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e00b      	b.n	8003d36 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003d1e:	4808      	ldr	r0, [pc, #32]	; (8003d40 <BSP_CAMERA_Stop+0x38>)
 8003d20:	f000 fe6c 	bl	80049fc <HAL_DCMI_Stop>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003d2a:	f06f 0303 	mvn.w	r3, #3
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e001      	b.n	8003d36 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	24000314 	.word	0x24000314

08003d44 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d56:	f06f 0301 	mvn.w	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d7c:	f06f 0301 	mvn.w	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7ff ffdb 	bl	8003d90 <BSP_CAMERA_LineEventCallback>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f7fd fca0 	bl	8001730 <BSP_CAMERA_FrameEventCallback>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7ff ffcf 	bl	8003da4 <BSP_CAMERA_VsyncEventCallback>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7ff ffce 	bl	8003db8 <BSP_CAMERA_ErrorCallback>
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d102      	bne.n	8003e3e <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003e38:	2303      	movs	r3, #3
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e001      	b.n	8003e42 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003e3e:	2302      	movs	r3, #2
 8003e40:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d834      	bhi.n	8003eb2 <GetSize+0x8e>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <GetSize+0x2c>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e65 	.word	0x08003e65
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e85 	.word	0x08003e85
 8003e5c:	08003e95 	.word	0x08003e95
 8003e60:	08003ea5 	.word	0x08003ea5
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	60fb      	str	r3, [r7, #12]
    break;
 8003e72:	e01f      	b.n	8003eb4 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	60fb      	str	r3, [r7, #12]
    break;
 8003e82:	e017      	b.n	8003eb4 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	025b      	lsls	r3, r3, #9
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	60fb      	str	r3, [r7, #12]
    break;
 8003e92:	e00f      	b.n	8003eb4 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	60fb      	str	r3, [r7, #12]
    break;
 8003ea2:	e007      	b.n	8003eb4 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <GetSize+0xa0>)
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	60fb      	str	r3, [r7, #12]
    break;
 8003eb0:	e000      	b.n	8003eb4 <GetSize+0x90>
  default:
    break;
 8003eb2:	bf00      	nop
  }

  return (int32_t)size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	0005dc00 	.word	0x0005dc00

08003ec8 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003ed2:	2378      	movs	r3, #120	; 0x78
 8003ed4:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <OV5640_Probe+0xc0>)
 8003ed8:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <OV5640_Probe+0xc4>)
 8003edc:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003ede:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <OV5640_Probe+0xc8>)
 8003ee0:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	; (8003f94 <OV5640_Probe+0xcc>)
 8003ee4:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <OV5640_Probe+0xd0>)
 8003ee8:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	4619      	mov	r1, r3
 8003ef0:	482a      	ldr	r0, [pc, #168]	; (8003f9c <OV5640_Probe+0xd4>)
 8003ef2:	f7fd fc33 	bl	800175c <OV5640_RegisterBusIO>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003efc:	f06f 0304 	mvn.w	r3, #4
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	e03c      	b.n	8003f7e <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003f04:	f107 0308 	add.w	r3, r7, #8
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4824      	ldr	r0, [pc, #144]	; (8003f9c <OV5640_Probe+0xd4>)
 8003f0c:	f7fe f87a 	bl	8002004 <OV5640_ReadID>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f16:	f06f 0304 	mvn.w	r3, #4
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1c:	e02f      	b.n	8003f7e <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f245 6240 	movw	r2, #22080	; 0x5640
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f28:	f06f 0306 	mvn.w	r3, #6
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	e026      	b.n	8003f7e <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <OV5640_Probe+0xd8>)
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <OV5640_Probe+0xdc>)
 8003f34:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <OV5640_Probe+0xe0>)
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <OV5640_Probe+0xd4>)
 8003f3a:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <OV5640_Probe+0xd8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <OV5640_Probe+0xe0>)
 8003f44:	6810      	ldr	r0, [r2, #0]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4798      	blx	r3
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f52:	f06f 0304 	mvn.w	r3, #4
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	e011      	b.n	8003f7e <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <OV5640_Probe+0xd8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <OV5640_Probe+0xe0>)
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	4911      	ldr	r1, [pc, #68]	; (8003fac <OV5640_Probe+0xe4>)
 8003f66:	6809      	ldr	r1, [r1, #0]
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4798      	blx	r3
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f72:	f06f 0304 	mvn.w	r3, #4
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e001      	b.n	8003f7e <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	0800335d 	.word	0x0800335d
 8003f8c:	080033d1 	.word	0x080033d1
 8003f90:	080034f9 	.word	0x080034f9
 8003f94:	0800349d 	.word	0x0800349d
 8003f98:	08003555 	.word	0x08003555
 8003f9c:	24000fec 	.word	0x24000fec
 8003fa0:	24000fe4 	.word	0x24000fe4
 8003fa4:	24000240 	.word	0x24000240
 8003fa8:	24000fb0 	.word	0x24000fb0
 8003fac:	24000fe8 	.word	0x24000fe8

08003fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_MspInit+0x30>)
 8003fb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <HAL_MspInit+0x30>)
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_MspInit+0x30>)
 8003fc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	58024400 	.word	0x58024400

08003fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fe8:	e7fe      	b.n	8003fe8 <NMI_Handler+0x4>

08003fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fee:	e7fe      	b.n	8003fee <HardFault_Handler+0x4>

08003ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff4:	e7fe      	b.n	8003ff4 <MemManage_Handler+0x4>

08003ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <BusFault_Handler+0x4>

08003ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004000:	e7fe      	b.n	8004000 <UsageFault_Handler+0x4>

08004002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004030:	f000 fa54 	bl	80044dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}

08004038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800403c:	4802      	ldr	r0, [pc, #8]	; (8004048 <USART1_IRQHandler+0x10>)
 800403e:	f009 fc6f 	bl	800d920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	24001018 	.word	0x24001018

0800404c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004050:	4802      	ldr	r0, [pc, #8]	; (800405c <DMA2_Stream1_IRQHandler+0x10>)
 8004052:	f002 f9c3 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	24000364 	.word	0x24000364

08004060 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <DCMI_PSSI_IRQHandler+0x10>)
 8004066:	f000 fd29 	bl	8004abc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	24000314 	.word	0x24000314

08004074 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004078:	4802      	ldr	r0, [pc, #8]	; (8004084 <LTDC_IRQHandler+0x10>)
 800407a:	f005 ffe7 	bl	800a04c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	2400047c 	.word	0x2400047c

08004088 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <LTDC_ER_IRQHandler+0x10>)
 800408e:	f005 ffdd 	bl	800a04c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	2400047c 	.word	0x2400047c

0800409c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80040a0:	4802      	ldr	r0, [pc, #8]	; (80040ac <DMA2D_IRQHandler+0x10>)
 80040a2:	f003 fe95 	bl	8007dd0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	240003dc 	.word	0x240003dc

080040b0 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <_sbrk+0x5c>)
 80040d6:	4b15      	ldr	r3, [pc, #84]	; (800412c <_sbrk+0x60>)
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <_sbrk+0x64>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <_sbrk+0x64>)
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <_sbrk+0x68>)
 80040ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <_sbrk+0x64>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d207      	bcs.n	800410c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040fc:	f00b fad4 	bl	800f6a8 <__errno>
 8004100:	4603      	mov	r3, r0
 8004102:	220c      	movs	r2, #12
 8004104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800410a:	e009      	b.n	8004120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <_sbrk+0x64>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <_sbrk+0x64>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	4a05      	ldr	r2, [pc, #20]	; (8004130 <_sbrk+0x64>)
 800411c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	24100000 	.word	0x24100000
 800412c:	00000400 	.word	0x00000400
 8004130:	24001014 	.word	0x24001014
 8004134:	240010c0 	.word	0x240010c0

08004138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <SystemInit+0xd0>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	4a31      	ldr	r2, [pc, #196]	; (8004208 <SystemInit+0xd0>)
 8004144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800414c:	4b2f      	ldr	r3, [pc, #188]	; (800420c <SystemInit+0xd4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2b02      	cmp	r3, #2
 8004156:	d807      	bhi.n	8004168 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004158:	4b2c      	ldr	r3, [pc, #176]	; (800420c <SystemInit+0xd4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 030f 	bic.w	r3, r3, #15
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <SystemInit+0xd4>)
 8004162:	f043 0303 	orr.w	r3, r3, #3
 8004166:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004168:	4b29      	ldr	r3, [pc, #164]	; (8004210 <SystemInit+0xd8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a28      	ldr	r2, [pc, #160]	; (8004210 <SystemInit+0xd8>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004174:	4b26      	ldr	r3, [pc, #152]	; (8004210 <SystemInit+0xd8>)
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <SystemInit+0xd8>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4924      	ldr	r1, [pc, #144]	; (8004210 <SystemInit+0xd8>)
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <SystemInit+0xdc>)
 8004182:	4013      	ands	r3, r2
 8004184:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <SystemInit+0xd4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004192:	4b1e      	ldr	r3, [pc, #120]	; (800420c <SystemInit+0xd4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 030f 	bic.w	r3, r3, #15
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <SystemInit+0xd4>)
 800419c:	f043 0303 	orr.w	r3, r3, #3
 80041a0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80041a2:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <SystemInit+0xd8>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <SystemInit+0xd8>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <SystemInit+0xd8>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80041b4:	4b16      	ldr	r3, [pc, #88]	; (8004210 <SystemInit+0xd8>)
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <SystemInit+0xe0>)
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <SystemInit+0xd8>)
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <SystemInit+0xe4>)
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <SystemInit+0xd8>)
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <SystemInit+0xe8>)
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <SystemInit+0xd8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <SystemInit+0xd8>)
 80041ce:	4a14      	ldr	r2, [pc, #80]	; (8004220 <SystemInit+0xe8>)
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <SystemInit+0xd8>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <SystemInit+0xd8>)
 80041da:	4a11      	ldr	r2, [pc, #68]	; (8004220 <SystemInit+0xe8>)
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <SystemInit+0xd8>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <SystemInit+0xd8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a09      	ldr	r2, [pc, #36]	; (8004210 <SystemInit+0xd8>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <SystemInit+0xd8>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <SystemInit+0xec>)
 80041f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80041fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00
 800420c:	52002000 	.word	0x52002000
 8004210:	58024400 	.word	0x58024400
 8004214:	eaf6ed7f 	.word	0xeaf6ed7f
 8004218:	02020200 	.word	0x02020200
 800421c:	01ff0000 	.word	0x01ff0000
 8004220:	01010280 	.word	0x01010280
 8004224:	52004000 	.word	0x52004000

08004228 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 800422e:	4a23      	ldr	r2, [pc, #140]	; (80042bc <MX_USART1_UART_Init+0x94>)
 8004230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800423a:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 800423c:	2200      	movs	r2, #0
 800423e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004242:	2200      	movs	r2, #0
 8004244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004246:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004248:	2200      	movs	r2, #0
 800424a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 800424e:	220c      	movs	r2, #12
 8004250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004252:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 800425a:	2200      	movs	r2, #0
 800425c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800425e:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004264:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004266:	2200      	movs	r2, #0
 8004268:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 800426c:	2200      	movs	r2, #0
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004270:	4811      	ldr	r0, [pc, #68]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004272:	f009 f9ae 	bl	800d5d2 <HAL_UART_Init>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800427c:	f7fd fa68 	bl	8001750 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004280:	2100      	movs	r1, #0
 8004282:	480d      	ldr	r0, [pc, #52]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004284:	f00b f844 	bl	800f310 <HAL_UARTEx_SetTxFifoThreshold>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800428e:	f7fd fa5f 	bl	8001750 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004292:	2100      	movs	r1, #0
 8004294:	4808      	ldr	r0, [pc, #32]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 8004296:	f00b f879 	bl	800f38c <HAL_UARTEx_SetRxFifoThreshold>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042a0:	f7fd fa56 	bl	8001750 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042a4:	4804      	ldr	r0, [pc, #16]	; (80042b8 <MX_USART1_UART_Init+0x90>)
 80042a6:	f00a fffa 	bl	800f29e <HAL_UARTEx_DisableFifoMode>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042b0:	f7fd fa4e 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	24001018 	.word	0x24001018
 80042bc:	40011000 	.word	0x40011000

080042c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b0ba      	sub	sp, #232	; 0xe8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042d8:	f107 0310 	add.w	r3, r7, #16
 80042dc:	22c0      	movs	r2, #192	; 0xc0
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f00b fa0b 	bl	800f6fc <memset>
  if(uartHandle->Instance==USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_UART_MspInit+0xd8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d14e      	bne.n	800438e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80042f0:	f04f 0201 	mov.w	r2, #1
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004302:	f107 0310 	add.w	r3, r7, #16
 8004306:	4618      	mov	r0, r3
 8004308:	f007 f9cc 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004312:	f7fd fa1d 	bl	8001750 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004316:	4b21      	ldr	r3, [pc, #132]	; (800439c <HAL_UART_MspInit+0xdc>)
 8004318:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800431c:	4a1f      	ldr	r2, [pc, #124]	; (800439c <HAL_UART_MspInit+0xdc>)
 800431e:	f043 0310 	orr.w	r3, r3, #16
 8004322:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <HAL_UART_MspInit+0xdc>)
 8004328:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_UART_MspInit+0xdc>)
 8004336:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800433a:	4a18      	ldr	r2, [pc, #96]	; (800439c <HAL_UART_MspInit+0xdc>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <HAL_UART_MspInit+0xdc>)
 8004346:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8004352:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435a:	2302      	movs	r3, #2
 800435c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800436c:	2307      	movs	r3, #7
 800436e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004372:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004376:	4619      	mov	r1, r3
 8004378:	4809      	ldr	r0, [pc, #36]	; (80043a0 <HAL_UART_MspInit+0xe0>)
 800437a:	f004 fc3d 	bl	8008bf8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800437e:	2200      	movs	r2, #0
 8004380:	2100      	movs	r1, #0
 8004382:	2025      	movs	r0, #37	; 0x25
 8004384:	f000 f9c9 	bl	800471a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004388:	2025      	movs	r0, #37	; 0x25
 800438a:	f000 f9e0 	bl	800474e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800438e:	bf00      	nop
 8004390:	37e8      	adds	r7, #232	; 0xe8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40011000 	.word	0x40011000
 800439c:	58024400 	.word	0x58024400
 80043a0:	58020000 	.word	0x58020000

080043a4 <Reset_Handler>:
 80043a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043dc <LoopFillZerobss+0xe>
 80043a8:	f7ff fec6 	bl	8004138 <SystemInit>
 80043ac:	480c      	ldr	r0, [pc, #48]	; (80043e0 <LoopFillZerobss+0x12>)
 80043ae:	490d      	ldr	r1, [pc, #52]	; (80043e4 <LoopFillZerobss+0x16>)
 80043b0:	4a0d      	ldr	r2, [pc, #52]	; (80043e8 <LoopFillZerobss+0x1a>)
 80043b2:	2300      	movs	r3, #0
 80043b4:	e002      	b.n	80043bc <LoopCopyDataInit>

080043b6 <CopyDataInit>:
 80043b6:	58d4      	ldr	r4, [r2, r3]
 80043b8:	50c4      	str	r4, [r0, r3]
 80043ba:	3304      	adds	r3, #4

080043bc <LoopCopyDataInit>:
 80043bc:	18c4      	adds	r4, r0, r3
 80043be:	428c      	cmp	r4, r1
 80043c0:	d3f9      	bcc.n	80043b6 <CopyDataInit>
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <LoopFillZerobss+0x1e>)
 80043c4:	4c0a      	ldr	r4, [pc, #40]	; (80043f0 <LoopFillZerobss+0x22>)
 80043c6:	2300      	movs	r3, #0
 80043c8:	e001      	b.n	80043ce <LoopFillZerobss>

080043ca <FillZerobss>:
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	3204      	adds	r2, #4

080043ce <LoopFillZerobss>:
 80043ce:	42a2      	cmp	r2, r4
 80043d0:	d3fb      	bcc.n	80043ca <FillZerobss>
 80043d2:	f00b f96f 	bl	800f6b4 <__libc_init_array>
 80043d6:	f7fd f8c5 	bl	8001564 <main>
 80043da:	4770      	bx	lr
 80043dc:	24100000 	.word	0x24100000
 80043e0:	24000000 	.word	0x24000000
 80043e4:	240002f8 	.word	0x240002f8
 80043e8:	0801062c 	.word	0x0801062c
 80043ec:	240002f8 	.word	0x240002f8
 80043f0:	240010c0 	.word	0x240010c0

080043f4 <ADC_IRQHandler>:
 80043f4:	e7fe      	b.n	80043f4 <ADC_IRQHandler>
	...

080043f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043fe:	2003      	movs	r0, #3
 8004400:	f000 f980 	bl	8004704 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004404:	f006 ff78 	bl	800b2f8 <HAL_RCC_GetSysClockFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <HAL_Init+0x68>)
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	4913      	ldr	r1, [pc, #76]	; (8004464 <HAL_Init+0x6c>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_Init+0x68>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <HAL_Init+0x6c>)
 800442c:	5cd3      	ldrb	r3, [r2, r3]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
 8004438:	4a0b      	ldr	r2, [pc, #44]	; (8004468 <HAL_Init+0x70>)
 800443a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800443c:	4a0b      	ldr	r2, [pc, #44]	; (800446c <HAL_Init+0x74>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004442:	2000      	movs	r0, #0
 8004444:	f000 f814 	bl	8004470 <HAL_InitTick>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e002      	b.n	8004458 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004452:	f7ff fdad 	bl	8003fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	58024400 	.word	0x58024400
 8004464:	08010578 	.word	0x08010578
 8004468:	24000288 	.word	0x24000288
 800446c:	24000284 	.word	0x24000284

08004470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <HAL_InitTick+0x60>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e021      	b.n	80044c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <HAL_InitTick+0x64>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_InitTick+0x60>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004492:	fbb3 f3f1 	udiv	r3, r3, r1
 8004496:	fbb2 f3f3 	udiv	r3, r2, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f965 	bl	800476a <HAL_SYSTICK_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00e      	b.n	80044c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b0f      	cmp	r3, #15
 80044ae:	d80a      	bhi.n	80044c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044b0:	2200      	movs	r2, #0
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044b8:	f000 f92f 	bl	800471a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044bc:	4a06      	ldr	r2, [pc, #24]	; (80044d8 <HAL_InitTick+0x68>)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	24000290 	.word	0x24000290
 80044d4:	24000284 	.word	0x24000284
 80044d8:	2400028c 	.word	0x2400028c

080044dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_IncTick+0x20>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_IncTick+0x24>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4413      	add	r3, r2
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <HAL_IncTick+0x24>)
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	24000290 	.word	0x24000290
 8004500:	240010ac 	.word	0x240010ac

08004504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return uwTick;
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <HAL_GetTick+0x14>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	240010ac 	.word	0x240010ac

0800451c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004524:	f7ff ffee 	bl	8004504 <HAL_GetTick>
 8004528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004534:	d005      	beq.n	8004542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <HAL_Delay+0x44>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004542:	bf00      	nop
 8004544:	f7ff ffde 	bl	8004504 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	429a      	cmp	r2, r3
 8004552:	d8f7      	bhi.n	8004544 <HAL_Delay+0x28>
  {
  }
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	24000290 	.word	0x24000290

08004564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004580:	4013      	ands	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <__NVIC_SetPriorityGrouping+0x44>)
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004592:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	60d3      	str	r3, [r2, #12]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00
 80045a8:	05fa0000 	.word	0x05fa0000

080045ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <__NVIC_GetPriorityGrouping+0x18>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	f003 0307 	and.w	r3, r3, #7
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	db0b      	blt.n	80045f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	f003 021f 	and.w	r2, r3, #31
 80045e0:	4907      	ldr	r1, [pc, #28]	; (8004600 <__NVIC_EnableIRQ+0x38>)
 80045e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2001      	movs	r0, #1
 80045ea:	fa00 f202 	lsl.w	r2, r0, r2
 80045ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	e000e100 	.word	0xe000e100

08004604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	6039      	str	r1, [r7, #0]
 800460e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	db0a      	blt.n	800462e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	490c      	ldr	r1, [pc, #48]	; (8004650 <__NVIC_SetPriority+0x4c>)
 800461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004622:	0112      	lsls	r2, r2, #4
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	440b      	add	r3, r1
 8004628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800462c:	e00a      	b.n	8004644 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4908      	ldr	r1, [pc, #32]	; (8004654 <__NVIC_SetPriority+0x50>)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	3b04      	subs	r3, #4
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	440b      	add	r3, r1
 8004642:	761a      	strb	r2, [r3, #24]
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000e100 	.word	0xe000e100
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f1c3 0307 	rsb	r3, r3, #7
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf28      	it	cs
 8004676:	2304      	movcs	r3, #4
 8004678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3304      	adds	r3, #4
 800467e:	2b06      	cmp	r3, #6
 8004680:	d902      	bls.n	8004688 <NVIC_EncodePriority+0x30>
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3b03      	subs	r3, #3
 8004686:	e000      	b.n	800468a <NVIC_EncodePriority+0x32>
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	401a      	ands	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	fa01 f303 	lsl.w	r3, r1, r3
 80046aa:	43d9      	mvns	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b0:	4313      	orrs	r3, r2
         );
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d0:	d301      	bcc.n	80046d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046d2:	2301      	movs	r3, #1
 80046d4:	e00f      	b.n	80046f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <SysTick_Config+0x40>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046de:	210f      	movs	r1, #15
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e4:	f7ff ff8e 	bl	8004604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <SysTick_Config+0x40>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ee:	4b04      	ldr	r3, [pc, #16]	; (8004700 <SysTick_Config+0x40>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	e000e010 	.word	0xe000e010

08004704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff29 	bl	8004564 <__NVIC_SetPriorityGrouping>
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af00      	add	r7, sp, #0
 8004720:	4603      	mov	r3, r0
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004728:	f7ff ff40 	bl	80045ac <__NVIC_GetPriorityGrouping>
 800472c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	6978      	ldr	r0, [r7, #20]
 8004734:	f7ff ff90 	bl	8004658 <NVIC_EncodePriority>
 8004738:	4602      	mov	r2, r0
 800473a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800473e:	4611      	mov	r1, r2
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff5f 	bl	8004604 <__NVIC_SetPriority>
}
 8004746:	bf00      	nop
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff ff33 	bl	80045c8 <__NVIC_EnableIRQ>
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff ffa4 	bl	80046c0 <SysTick_Config>
 8004778:	4603      	mov	r3, r0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e069      	b.n	800486a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fb ff58 	bl	8000658 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <HAL_DCMI_Init+0xf0>)
 80047ca:	400b      	ands	r3, r1
 80047cc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80047e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80047ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80047fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004806:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004812:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d112      	bne.n	800484a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7f1b      	ldrb	r3, [r3, #28]
 8004828:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	7f5b      	ldrb	r3, [r3, #29]
 800482e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004830:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7f9b      	ldrb	r3, [r3, #30]
 8004836:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004838:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	7fdb      	ldrb	r3, [r3, #31]
 8004840:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004846:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004848:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 021e 	orr.w	r2, r2, #30
 8004858:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	ffe0f007 	.word	0xffe0f007

08004878 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_DCMI_Start_DMA+0x1c>
 8004890:	2302      	movs	r3, #2
 8004892:	e0ab      	b.n	80049ec <HAL_DCMI_Start_DMA+0x174>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0202 	bic.w	r2, r2, #2
 80048c2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6819      	ldr	r1, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	4a46      	ldr	r2, [pc, #280]	; (80049f4 <HAL_DCMI_Start_DMA+0x17c>)
 80048da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e0:	4a45      	ldr	r2, [pc, #276]	; (80049f8 <HAL_DCMI_Start_DMA+0x180>)
 80048e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	2200      	movs	r2, #0
 80048ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490a:	d219      	bcs.n	8004940 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3328      	adds	r3, #40	; 0x28
 8004916:	4619      	mov	r1, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	f000 fd90 	bl	8005440 <HAL_DMA_Start_IT>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d055      	beq.n	80049d2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2240      	movs	r2, #64	; 0x40
 800492a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e055      	b.n	80049ec <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	4a2b      	ldr	r2, [pc, #172]	; (80049f4 <HAL_DCMI_Start_DMA+0x17c>)
 8004946:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800495a:	e009      	b.n	8004970 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	085a      	lsrs	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	005a      	lsls	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d2f0      	bcs.n	800495c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	1e9a      	subs	r2, r3, #2
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3328      	adds	r3, #40	; 0x28
 80049a2:	4619      	mov	r1, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	f003 fc73 	bl	8008298 <HAL_DMAEx_MultiBufferStart_IT>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e00c      	b.n	80049ec <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	08004bc1 	.word	0x08004bc1
 80049f8:	08004ce7 	.word	0x08004ce7

080049fc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004a04:	4b2b      	ldr	r3, [pc, #172]	; (8004ab4 <HAL_DCMI_Stop+0xb8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <HAL_DCMI_Stop+0xbc>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0a5b      	lsrs	r3, r3, #9
 8004a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
 8004a18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_DCMI_Stop+0x30>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e03f      	b.n	8004aac <HAL_DCMI_Stop+0xb0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d108      	bne.n	8004a6a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	72fb      	strb	r3, [r7, #11]
      break;
 8004a68:	e006      	b.n	8004a78 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e9      	bne.n	8004a4c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a86:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff41 	bl	8005914 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	24000284 	.word	0x24000284
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2204      	movs	r2, #4
 8004adc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	f043 0202 	orr.w	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2204      	movs	r2, #4
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <HAL_DCMI_IRQHandler+0x100>)
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 fa26 	bl	8005f50 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d016      	beq.n	8004b3c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2202      	movs	r2, #2
 8004b14:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	f043 0201 	orr.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2e:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <HAL_DCMI_IRQHandler+0x100>)
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 fa0a 	bl	8005f50 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d006      	beq.n	8004b54 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff f93c 	bl	8003dcc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2208      	movs	r2, #8
 8004b64:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff f946 	bl	8003df8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01d      	beq.n	8004bb2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d107      	bne.n	8004b94 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 021e 	bic.w	r2, r2, #30
 8004b92:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff f918 	bl	8003de2 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	08004ce7 	.word	0x08004ce7

08004bc0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d043      	beq.n	8004c5e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d118      	bne.n	8004c22 <DCMI_DMAXferCplt+0x62>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d015      	beq.n	8004c22 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	00da      	lsls	r2, r3, #3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4619      	mov	r1, r3
 8004c12:	f003 fe9f 	bl	8008954 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	1e5a      	subs	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
 8004c20:	e044      	b.n	8004cac <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d13c      	bne.n	8004cac <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f003 fe81 	bl	8008954 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	1e5a      	subs	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c5c:	e026      	b.n	8004cac <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	e017      	b.n	8004cac <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10f      	bne.n	8004cac <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	0099      	lsls	r1, r3, #2
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d112      	bne.n	8004cde <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d103      	bne.n	8004cde <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d009      	beq.n	8004d12 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff f87b 	bl	8003e0e <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d28:	f7ff fbec 	bl	8004504 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e37f      	b.n	8005438 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a66      	ldr	r2, [pc, #408]	; (8004ed8 <HAL_DMA_Init+0x1b8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d04a      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a65      	ldr	r2, [pc, #404]	; (8004edc <HAL_DMA_Init+0x1bc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d045      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a63      	ldr	r2, [pc, #396]	; (8004ee0 <HAL_DMA_Init+0x1c0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d040      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a62      	ldr	r2, [pc, #392]	; (8004ee4 <HAL_DMA_Init+0x1c4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d03b      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a60      	ldr	r2, [pc, #384]	; (8004ee8 <HAL_DMA_Init+0x1c8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d036      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a5f      	ldr	r2, [pc, #380]	; (8004eec <HAL_DMA_Init+0x1cc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d031      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a5d      	ldr	r2, [pc, #372]	; (8004ef0 <HAL_DMA_Init+0x1d0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02c      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a5c      	ldr	r2, [pc, #368]	; (8004ef4 <HAL_DMA_Init+0x1d4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d027      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a5a      	ldr	r2, [pc, #360]	; (8004ef8 <HAL_DMA_Init+0x1d8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d022      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a59      	ldr	r2, [pc, #356]	; (8004efc <HAL_DMA_Init+0x1dc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d01d      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a57      	ldr	r2, [pc, #348]	; (8004f00 <HAL_DMA_Init+0x1e0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d018      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a56      	ldr	r2, [pc, #344]	; (8004f04 <HAL_DMA_Init+0x1e4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a54      	ldr	r2, [pc, #336]	; (8004f08 <HAL_DMA_Init+0x1e8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00e      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a53      	ldr	r2, [pc, #332]	; (8004f0c <HAL_DMA_Init+0x1ec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a51      	ldr	r2, [pc, #324]	; (8004f10 <HAL_DMA_Init+0x1f0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_DMA_Init+0xb8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a50      	ldr	r2, [pc, #320]	; (8004f14 <HAL_DMA_Init+0x1f4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d101      	bne.n	8004ddc <HAL_DMA_Init+0xbc>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <HAL_DMA_Init+0xbe>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 813c 	beq.w	800505c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a37      	ldr	r2, [pc, #220]	; (8004ed8 <HAL_DMA_Init+0x1b8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d04a      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a36      	ldr	r2, [pc, #216]	; (8004edc <HAL_DMA_Init+0x1bc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d045      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a34      	ldr	r2, [pc, #208]	; (8004ee0 <HAL_DMA_Init+0x1c0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d040      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a33      	ldr	r2, [pc, #204]	; (8004ee4 <HAL_DMA_Init+0x1c4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d03b      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a31      	ldr	r2, [pc, #196]	; (8004ee8 <HAL_DMA_Init+0x1c8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d036      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_DMA_Init+0x1cc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d031      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2e      	ldr	r2, [pc, #184]	; (8004ef0 <HAL_DMA_Init+0x1d0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02c      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <HAL_DMA_Init+0x1d4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d027      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2b      	ldr	r2, [pc, #172]	; (8004ef8 <HAL_DMA_Init+0x1d8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <HAL_DMA_Init+0x1dc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d01d      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <HAL_DMA_Init+0x1e0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <HAL_DMA_Init+0x1e4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <HAL_DMA_Init+0x1e8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <HAL_DMA_Init+0x1ec>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <HAL_DMA_Init+0x1f0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_DMA_Init+0x174>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <HAL_DMA_Init+0x1f4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <HAL_DMA_Init+0x186>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e007      	b.n	8004eb6 <HAL_DMA_Init+0x196>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eb6:	e02f      	b.n	8004f18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eb8:	f7ff fb24 	bl	8004504 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b05      	cmp	r3, #5
 8004ec4:	d928      	bls.n	8004f18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e2af      	b.n	8005438 <HAL_DMA_Init+0x718>
 8004ed8:	40020010 	.word	0x40020010
 8004edc:	40020028 	.word	0x40020028
 8004ee0:	40020040 	.word	0x40020040
 8004ee4:	40020058 	.word	0x40020058
 8004ee8:	40020070 	.word	0x40020070
 8004eec:	40020088 	.word	0x40020088
 8004ef0:	400200a0 	.word	0x400200a0
 8004ef4:	400200b8 	.word	0x400200b8
 8004ef8:	40020410 	.word	0x40020410
 8004efc:	40020428 	.word	0x40020428
 8004f00:	40020440 	.word	0x40020440
 8004f04:	40020458 	.word	0x40020458
 8004f08:	40020470 	.word	0x40020470
 8004f0c:	40020488 	.word	0x40020488
 8004f10:	400204a0 	.word	0x400204a0
 8004f14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1c8      	bne.n	8004eb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4b73      	ldr	r3, [pc, #460]	; (8005100 <HAL_DMA_Init+0x3e0>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d107      	bne.n	8004f7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	4313      	orrs	r3, r2
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b28      	cmp	r3, #40	; 0x28
 8004f82:	d903      	bls.n	8004f8c <HAL_DMA_Init+0x26c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b2e      	cmp	r3, #46	; 0x2e
 8004f8a:	d91f      	bls.n	8004fcc <HAL_DMA_Init+0x2ac>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b3e      	cmp	r3, #62	; 0x3e
 8004f92:	d903      	bls.n	8004f9c <HAL_DMA_Init+0x27c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b42      	cmp	r3, #66	; 0x42
 8004f9a:	d917      	bls.n	8004fcc <HAL_DMA_Init+0x2ac>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b46      	cmp	r3, #70	; 0x46
 8004fa2:	d903      	bls.n	8004fac <HAL_DMA_Init+0x28c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b48      	cmp	r3, #72	; 0x48
 8004faa:	d90f      	bls.n	8004fcc <HAL_DMA_Init+0x2ac>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b4e      	cmp	r3, #78	; 0x4e
 8004fb2:	d903      	bls.n	8004fbc <HAL_DMA_Init+0x29c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b52      	cmp	r3, #82	; 0x52
 8004fba:	d907      	bls.n	8004fcc <HAL_DMA_Init+0x2ac>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b73      	cmp	r3, #115	; 0x73
 8004fc2:	d905      	bls.n	8004fd0 <HAL_DMA_Init+0x2b0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b77      	cmp	r3, #119	; 0x77
 8004fca:	d801      	bhi.n	8004fd0 <HAL_DMA_Init+0x2b0>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <HAL_DMA_Init+0x2b2>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fdc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 0307 	bic.w	r3, r3, #7
 8004ff4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b04      	cmp	r3, #4
 8005006:	d117      	bne.n	8005038 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00e      	beq.n	8005038 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f002 fbd6 	bl	80077cc <DMA_CheckFifoParam>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2240      	movs	r2, #64	; 0x40
 800502a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e1ff      	b.n	8005438 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f002 fb11 	bl	8007668 <DMA_CalcBaseAndBitshift>
 8005046:	4603      	mov	r3, r0
 8005048:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	223f      	movs	r2, #63	; 0x3f
 8005054:	409a      	lsls	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	609a      	str	r2, [r3, #8]
 800505a:	e0fe      	b.n	800525a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a28      	ldr	r2, [pc, #160]	; (8005104 <HAL_DMA_Init+0x3e4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04a      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a27      	ldr	r2, [pc, #156]	; (8005108 <HAL_DMA_Init+0x3e8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d045      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a25      	ldr	r2, [pc, #148]	; (800510c <HAL_DMA_Init+0x3ec>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d040      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a24      	ldr	r2, [pc, #144]	; (8005110 <HAL_DMA_Init+0x3f0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d03b      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <HAL_DMA_Init+0x3f4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d036      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a21      	ldr	r2, [pc, #132]	; (8005118 <HAL_DMA_Init+0x3f8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d031      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_DMA_Init+0x3fc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d02c      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_DMA_Init+0x400>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d027      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <HAL_DMA_Init+0x404>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_DMA_Init+0x408>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01d      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a19      	ldr	r2, [pc, #100]	; (800512c <HAL_DMA_Init+0x40c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_DMA_Init+0x410>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <HAL_DMA_Init+0x414>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <HAL_DMA_Init+0x418>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <HAL_DMA_Init+0x41c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_DMA_Init+0x3dc>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <HAL_DMA_Init+0x420>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d123      	bne.n	8005144 <HAL_DMA_Init+0x424>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e022      	b.n	8005146 <HAL_DMA_Init+0x426>
 8005100:	fe10803f 	.word	0xfe10803f
 8005104:	48022c08 	.word	0x48022c08
 8005108:	48022c1c 	.word	0x48022c1c
 800510c:	48022c30 	.word	0x48022c30
 8005110:	48022c44 	.word	0x48022c44
 8005114:	48022c58 	.word	0x48022c58
 8005118:	48022c6c 	.word	0x48022c6c
 800511c:	48022c80 	.word	0x48022c80
 8005120:	48022c94 	.word	0x48022c94
 8005124:	58025408 	.word	0x58025408
 8005128:	5802541c 	.word	0x5802541c
 800512c:	58025430 	.word	0x58025430
 8005130:	58025444 	.word	0x58025444
 8005134:	58025458 	.word	0x58025458
 8005138:	5802546c 	.word	0x5802546c
 800513c:	58025480 	.word	0x58025480
 8005140:	58025494 	.word	0x58025494
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d07e      	beq.n	8005248 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a80      	ldr	r2, [pc, #512]	; (8005350 <HAL_DMA_Init+0x630>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d021      	beq.n	8005198 <HAL_DMA_Init+0x478>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a7e      	ldr	r2, [pc, #504]	; (8005354 <HAL_DMA_Init+0x634>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01c      	beq.n	8005198 <HAL_DMA_Init+0x478>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <HAL_DMA_Init+0x638>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d017      	beq.n	8005198 <HAL_DMA_Init+0x478>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a7b      	ldr	r2, [pc, #492]	; (800535c <HAL_DMA_Init+0x63c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d012      	beq.n	8005198 <HAL_DMA_Init+0x478>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a7a      	ldr	r2, [pc, #488]	; (8005360 <HAL_DMA_Init+0x640>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00d      	beq.n	8005198 <HAL_DMA_Init+0x478>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a78      	ldr	r2, [pc, #480]	; (8005364 <HAL_DMA_Init+0x644>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d008      	beq.n	8005198 <HAL_DMA_Init+0x478>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a77      	ldr	r2, [pc, #476]	; (8005368 <HAL_DMA_Init+0x648>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <HAL_DMA_Init+0x478>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a75      	ldr	r2, [pc, #468]	; (800536c <HAL_DMA_Init+0x64c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4b6e      	ldr	r3, [pc, #440]	; (8005370 <HAL_DMA_Init+0x650>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d008      	beq.n	80051d4 <HAL_DMA_Init+0x4b4>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b80      	cmp	r3, #128	; 0x80
 80051c8:	d102      	bne.n	80051d0 <HAL_DMA_Init+0x4b0>
 80051ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051ce:	e002      	b.n	80051d6 <HAL_DMA_Init+0x4b6>
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_DMA_Init+0x4b6>
 80051d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68d2      	ldr	r2, [r2, #12]
 80051da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005204:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	4b56      	ldr	r3, [pc, #344]	; (8005374 <HAL_DMA_Init+0x654>)
 800521c:	4413      	add	r3, r2
 800521e:	4a56      	ldr	r2, [pc, #344]	; (8005378 <HAL_DMA_Init+0x658>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	009a      	lsls	r2, r3, #2
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f002 fa1b 	bl	8007668 <DMA_CalcBaseAndBitshift>
 8005232:	4603      	mov	r3, r0
 8005234:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2201      	movs	r2, #1
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	e008      	b.n	800525a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2240      	movs	r2, #64	; 0x40
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2203      	movs	r2, #3
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0ee      	b.n	8005438 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a47      	ldr	r2, [pc, #284]	; (800537c <HAL_DMA_Init+0x65c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d072      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a45      	ldr	r2, [pc, #276]	; (8005380 <HAL_DMA_Init+0x660>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d06d      	beq.n	800534a <HAL_DMA_Init+0x62a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a44      	ldr	r2, [pc, #272]	; (8005384 <HAL_DMA_Init+0x664>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d068      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a42      	ldr	r2, [pc, #264]	; (8005388 <HAL_DMA_Init+0x668>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d063      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a41      	ldr	r2, [pc, #260]	; (800538c <HAL_DMA_Init+0x66c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d05e      	beq.n	800534a <HAL_DMA_Init+0x62a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a3f      	ldr	r2, [pc, #252]	; (8005390 <HAL_DMA_Init+0x670>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d059      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3e      	ldr	r2, [pc, #248]	; (8005394 <HAL_DMA_Init+0x674>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d054      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <HAL_DMA_Init+0x678>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d04f      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <HAL_DMA_Init+0x67c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d04a      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a39      	ldr	r2, [pc, #228]	; (80053a0 <HAL_DMA_Init+0x680>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d045      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <HAL_DMA_Init+0x684>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d040      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a36      	ldr	r2, [pc, #216]	; (80053a8 <HAL_DMA_Init+0x688>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d03b      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a35      	ldr	r2, [pc, #212]	; (80053ac <HAL_DMA_Init+0x68c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d036      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <HAL_DMA_Init+0x690>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d031      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <HAL_DMA_Init+0x694>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d02c      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <HAL_DMA_Init+0x698>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d027      	beq.n	800534a <HAL_DMA_Init+0x62a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a14      	ldr	r2, [pc, #80]	; (8005350 <HAL_DMA_Init+0x630>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a12      	ldr	r2, [pc, #72]	; (8005354 <HAL_DMA_Init+0x634>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01d      	beq.n	800534a <HAL_DMA_Init+0x62a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a11      	ldr	r2, [pc, #68]	; (8005358 <HAL_DMA_Init+0x638>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a0f      	ldr	r2, [pc, #60]	; (800535c <HAL_DMA_Init+0x63c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a0e      	ldr	r2, [pc, #56]	; (8005360 <HAL_DMA_Init+0x640>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_DMA_Init+0x62a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <HAL_DMA_Init+0x644>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a0b      	ldr	r2, [pc, #44]	; (8005368 <HAL_DMA_Init+0x648>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_DMA_Init+0x62a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a09      	ldr	r2, [pc, #36]	; (800536c <HAL_DMA_Init+0x64c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d138      	bne.n	80053bc <HAL_DMA_Init+0x69c>
 800534a:	2301      	movs	r3, #1
 800534c:	e037      	b.n	80053be <HAL_DMA_Init+0x69e>
 800534e:	bf00      	nop
 8005350:	58025408 	.word	0x58025408
 8005354:	5802541c 	.word	0x5802541c
 8005358:	58025430 	.word	0x58025430
 800535c:	58025444 	.word	0x58025444
 8005360:	58025458 	.word	0x58025458
 8005364:	5802546c 	.word	0x5802546c
 8005368:	58025480 	.word	0x58025480
 800536c:	58025494 	.word	0x58025494
 8005370:	fffe000f 	.word	0xfffe000f
 8005374:	a7fdabf8 	.word	0xa7fdabf8
 8005378:	cccccccd 	.word	0xcccccccd
 800537c:	40020010 	.word	0x40020010
 8005380:	40020028 	.word	0x40020028
 8005384:	40020040 	.word	0x40020040
 8005388:	40020058 	.word	0x40020058
 800538c:	40020070 	.word	0x40020070
 8005390:	40020088 	.word	0x40020088
 8005394:	400200a0 	.word	0x400200a0
 8005398:	400200b8 	.word	0x400200b8
 800539c:	40020410 	.word	0x40020410
 80053a0:	40020428 	.word	0x40020428
 80053a4:	40020440 	.word	0x40020440
 80053a8:	40020458 	.word	0x40020458
 80053ac:	40020470 	.word	0x40020470
 80053b0:	40020488 	.word	0x40020488
 80053b4:	400204a0 	.word	0x400204a0
 80053b8:	400204b8 	.word	0x400204b8
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d032      	beq.n	8005428 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f002 fa7e 	bl	80078c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d102      	bne.n	80053d6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053ea:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d010      	beq.n	8005416 <HAL_DMA_Init+0x6f6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d80c      	bhi.n	8005416 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f002 fafb 	bl	80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	e008      	b.n	8005428 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e226      	b.n	80058aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_DMA_Start_IT+0x2a>
 8005466:	2302      	movs	r3, #2
 8005468:	e21f      	b.n	80058aa <HAL_DMA_Start_IT+0x46a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	f040 820a 	bne.w	8005894 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a68      	ldr	r2, [pc, #416]	; (8005634 <HAL_DMA_Start_IT+0x1f4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04a      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a66      	ldr	r2, [pc, #408]	; (8005638 <HAL_DMA_Start_IT+0x1f8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d045      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a65      	ldr	r2, [pc, #404]	; (800563c <HAL_DMA_Start_IT+0x1fc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a63      	ldr	r2, [pc, #396]	; (8005640 <HAL_DMA_Start_IT+0x200>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d03b      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a62      	ldr	r2, [pc, #392]	; (8005644 <HAL_DMA_Start_IT+0x204>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d036      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a60      	ldr	r2, [pc, #384]	; (8005648 <HAL_DMA_Start_IT+0x208>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d031      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5f      	ldr	r2, [pc, #380]	; (800564c <HAL_DMA_Start_IT+0x20c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d02c      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5d      	ldr	r2, [pc, #372]	; (8005650 <HAL_DMA_Start_IT+0x210>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d027      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a5c      	ldr	r2, [pc, #368]	; (8005654 <HAL_DMA_Start_IT+0x214>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a5a      	ldr	r2, [pc, #360]	; (8005658 <HAL_DMA_Start_IT+0x218>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01d      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a59      	ldr	r2, [pc, #356]	; (800565c <HAL_DMA_Start_IT+0x21c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a57      	ldr	r2, [pc, #348]	; (8005660 <HAL_DMA_Start_IT+0x220>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a56      	ldr	r2, [pc, #344]	; (8005664 <HAL_DMA_Start_IT+0x224>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a54      	ldr	r2, [pc, #336]	; (8005668 <HAL_DMA_Start_IT+0x228>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a53      	ldr	r2, [pc, #332]	; (800566c <HAL_DMA_Start_IT+0x22c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a51      	ldr	r2, [pc, #324]	; (8005670 <HAL_DMA_Start_IT+0x230>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d108      	bne.n	8005540 <HAL_DMA_Start_IT+0x100>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e007      	b.n	8005550 <HAL_DMA_Start_IT+0x110>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f001 fea2 	bl	80072a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a34      	ldr	r2, [pc, #208]	; (8005634 <HAL_DMA_Start_IT+0x1f4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d04a      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a33      	ldr	r2, [pc, #204]	; (8005638 <HAL_DMA_Start_IT+0x1f8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d045      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a31      	ldr	r2, [pc, #196]	; (800563c <HAL_DMA_Start_IT+0x1fc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d040      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a30      	ldr	r2, [pc, #192]	; (8005640 <HAL_DMA_Start_IT+0x200>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d03b      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2e      	ldr	r2, [pc, #184]	; (8005644 <HAL_DMA_Start_IT+0x204>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d036      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2d      	ldr	r2, [pc, #180]	; (8005648 <HAL_DMA_Start_IT+0x208>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d031      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2b      	ldr	r2, [pc, #172]	; (800564c <HAL_DMA_Start_IT+0x20c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02c      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <HAL_DMA_Start_IT+0x210>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d027      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a28      	ldr	r2, [pc, #160]	; (8005654 <HAL_DMA_Start_IT+0x214>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a27      	ldr	r2, [pc, #156]	; (8005658 <HAL_DMA_Start_IT+0x218>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a25      	ldr	r2, [pc, #148]	; (800565c <HAL_DMA_Start_IT+0x21c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a24      	ldr	r2, [pc, #144]	; (8005660 <HAL_DMA_Start_IT+0x220>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a22      	ldr	r2, [pc, #136]	; (8005664 <HAL_DMA_Start_IT+0x224>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a21      	ldr	r2, [pc, #132]	; (8005668 <HAL_DMA_Start_IT+0x228>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1f      	ldr	r2, [pc, #124]	; (800566c <HAL_DMA_Start_IT+0x22c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <HAL_DMA_Start_IT+0x230>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_Start_IT+0x1c0>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_DMA_Start_IT+0x1c2>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d036      	beq.n	8005674 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 021e 	bic.w	r2, r3, #30
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0216 	orr.w	r2, r2, #22
 8005618:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d03e      	beq.n	80056a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0208 	orr.w	r2, r2, #8
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e035      	b.n	80056a0 <HAL_DMA_Start_IT+0x260>
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	40020040 	.word	0x40020040
 8005640:	40020058 	.word	0x40020058
 8005644:	40020070 	.word	0x40020070
 8005648:	40020088 	.word	0x40020088
 800564c:	400200a0 	.word	0x400200a0
 8005650:	400200b8 	.word	0x400200b8
 8005654:	40020410 	.word	0x40020410
 8005658:	40020428 	.word	0x40020428
 800565c:	40020440 	.word	0x40020440
 8005660:	40020458 	.word	0x40020458
 8005664:	40020470 	.word	0x40020470
 8005668:	40020488 	.word	0x40020488
 800566c:	400204a0 	.word	0x400204a0
 8005670:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 020e 	bic.w	r2, r3, #14
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 020a 	orr.w	r2, r2, #10
 8005686:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0204 	orr.w	r2, r2, #4
 800569e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a83      	ldr	r2, [pc, #524]	; (80058b4 <HAL_DMA_Start_IT+0x474>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d072      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a82      	ldr	r2, [pc, #520]	; (80058b8 <HAL_DMA_Start_IT+0x478>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d06d      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a80      	ldr	r2, [pc, #512]	; (80058bc <HAL_DMA_Start_IT+0x47c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d068      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a7f      	ldr	r2, [pc, #508]	; (80058c0 <HAL_DMA_Start_IT+0x480>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d063      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a7d      	ldr	r2, [pc, #500]	; (80058c4 <HAL_DMA_Start_IT+0x484>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d05e      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7c      	ldr	r2, [pc, #496]	; (80058c8 <HAL_DMA_Start_IT+0x488>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d059      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7a      	ldr	r2, [pc, #488]	; (80058cc <HAL_DMA_Start_IT+0x48c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d054      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a79      	ldr	r2, [pc, #484]	; (80058d0 <HAL_DMA_Start_IT+0x490>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d04f      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a77      	ldr	r2, [pc, #476]	; (80058d4 <HAL_DMA_Start_IT+0x494>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04a      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a76      	ldr	r2, [pc, #472]	; (80058d8 <HAL_DMA_Start_IT+0x498>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d045      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a74      	ldr	r2, [pc, #464]	; (80058dc <HAL_DMA_Start_IT+0x49c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d040      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a73      	ldr	r2, [pc, #460]	; (80058e0 <HAL_DMA_Start_IT+0x4a0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d03b      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a71      	ldr	r2, [pc, #452]	; (80058e4 <HAL_DMA_Start_IT+0x4a4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d036      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a70      	ldr	r2, [pc, #448]	; (80058e8 <HAL_DMA_Start_IT+0x4a8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d031      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a6e      	ldr	r2, [pc, #440]	; (80058ec <HAL_DMA_Start_IT+0x4ac>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02c      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6d      	ldr	r2, [pc, #436]	; (80058f0 <HAL_DMA_Start_IT+0x4b0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d027      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6b      	ldr	r2, [pc, #428]	; (80058f4 <HAL_DMA_Start_IT+0x4b4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6a      	ldr	r2, [pc, #424]	; (80058f8 <HAL_DMA_Start_IT+0x4b8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d01d      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a68      	ldr	r2, [pc, #416]	; (80058fc <HAL_DMA_Start_IT+0x4bc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a67      	ldr	r2, [pc, #412]	; (8005900 <HAL_DMA_Start_IT+0x4c0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a65      	ldr	r2, [pc, #404]	; (8005904 <HAL_DMA_Start_IT+0x4c4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a64      	ldr	r2, [pc, #400]	; (8005908 <HAL_DMA_Start_IT+0x4c8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a62      	ldr	r2, [pc, #392]	; (800590c <HAL_DMA_Start_IT+0x4cc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a61      	ldr	r2, [pc, #388]	; (8005910 <HAL_DMA_Start_IT+0x4d0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <HAL_DMA_Start_IT+0x354>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <HAL_DMA_Start_IT+0x356>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01a      	beq.n	80057d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a37      	ldr	r2, [pc, #220]	; (80058b4 <HAL_DMA_Start_IT+0x474>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d04a      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a36      	ldr	r2, [pc, #216]	; (80058b8 <HAL_DMA_Start_IT+0x478>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d045      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a34      	ldr	r2, [pc, #208]	; (80058bc <HAL_DMA_Start_IT+0x47c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d040      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a33      	ldr	r2, [pc, #204]	; (80058c0 <HAL_DMA_Start_IT+0x480>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d03b      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <HAL_DMA_Start_IT+0x484>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d036      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a30      	ldr	r2, [pc, #192]	; (80058c8 <HAL_DMA_Start_IT+0x488>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d031      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <HAL_DMA_Start_IT+0x48c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02c      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <HAL_DMA_Start_IT+0x490>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d027      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2b      	ldr	r2, [pc, #172]	; (80058d4 <HAL_DMA_Start_IT+0x494>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d022      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <HAL_DMA_Start_IT+0x498>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d01d      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a28      	ldr	r2, [pc, #160]	; (80058dc <HAL_DMA_Start_IT+0x49c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a27      	ldr	r2, [pc, #156]	; (80058e0 <HAL_DMA_Start_IT+0x4a0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a25      	ldr	r2, [pc, #148]	; (80058e4 <HAL_DMA_Start_IT+0x4a4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a24      	ldr	r2, [pc, #144]	; (80058e8 <HAL_DMA_Start_IT+0x4a8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a22      	ldr	r2, [pc, #136]	; (80058ec <HAL_DMA_Start_IT+0x4ac>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <HAL_DMA_Start_IT+0x4b0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <HAL_DMA_Start_IT+0x442>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e012      	b.n	80058a8 <HAL_DMA_Start_IT+0x468>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e009      	b.n	80058a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800589a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40020010 	.word	0x40020010
 80058b8:	40020028 	.word	0x40020028
 80058bc:	40020040 	.word	0x40020040
 80058c0:	40020058 	.word	0x40020058
 80058c4:	40020070 	.word	0x40020070
 80058c8:	40020088 	.word	0x40020088
 80058cc:	400200a0 	.word	0x400200a0
 80058d0:	400200b8 	.word	0x400200b8
 80058d4:	40020410 	.word	0x40020410
 80058d8:	40020428 	.word	0x40020428
 80058dc:	40020440 	.word	0x40020440
 80058e0:	40020458 	.word	0x40020458
 80058e4:	40020470 	.word	0x40020470
 80058e8:	40020488 	.word	0x40020488
 80058ec:	400204a0 	.word	0x400204a0
 80058f0:	400204b8 	.word	0x400204b8
 80058f4:	58025408 	.word	0x58025408
 80058f8:	5802541c 	.word	0x5802541c
 80058fc:	58025430 	.word	0x58025430
 8005900:	58025444 	.word	0x58025444
 8005904:	58025458 	.word	0x58025458
 8005908:	5802546c 	.word	0x5802546c
 800590c:	58025480 	.word	0x58025480
 8005910:	58025494 	.word	0x58025494

08005914 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800591c:	f7fe fdf2 	bl	8004504 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e2dc      	b.n	8005ee6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d008      	beq.n	800594a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e2cd      	b.n	8005ee6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a76      	ldr	r2, [pc, #472]	; (8005b28 <HAL_DMA_Abort+0x214>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d04a      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a74      	ldr	r2, [pc, #464]	; (8005b2c <HAL_DMA_Abort+0x218>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d045      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a73      	ldr	r2, [pc, #460]	; (8005b30 <HAL_DMA_Abort+0x21c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d040      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a71      	ldr	r2, [pc, #452]	; (8005b34 <HAL_DMA_Abort+0x220>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d03b      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a70      	ldr	r2, [pc, #448]	; (8005b38 <HAL_DMA_Abort+0x224>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d036      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a6e      	ldr	r2, [pc, #440]	; (8005b3c <HAL_DMA_Abort+0x228>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d031      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a6d      	ldr	r2, [pc, #436]	; (8005b40 <HAL_DMA_Abort+0x22c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d02c      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a6b      	ldr	r2, [pc, #428]	; (8005b44 <HAL_DMA_Abort+0x230>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d027      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a6a      	ldr	r2, [pc, #424]	; (8005b48 <HAL_DMA_Abort+0x234>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a68      	ldr	r2, [pc, #416]	; (8005b4c <HAL_DMA_Abort+0x238>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a67      	ldr	r2, [pc, #412]	; (8005b50 <HAL_DMA_Abort+0x23c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_DMA_Abort+0x240>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a64      	ldr	r2, [pc, #400]	; (8005b58 <HAL_DMA_Abort+0x244>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a62      	ldr	r2, [pc, #392]	; (8005b5c <HAL_DMA_Abort+0x248>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a61      	ldr	r2, [pc, #388]	; (8005b60 <HAL_DMA_Abort+0x24c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a5f      	ldr	r2, [pc, #380]	; (8005b64 <HAL_DMA_Abort+0x250>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_DMA_Abort+0xda>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_DMA_Abort+0xdc>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d013      	beq.n	8005a1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 021e 	bic.w	r2, r2, #30
 8005a02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e00a      	b.n	8005a32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020e 	bic.w	r2, r2, #14
 8005a2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3c      	ldr	r2, [pc, #240]	; (8005b28 <HAL_DMA_Abort+0x214>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d072      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a3a      	ldr	r2, [pc, #232]	; (8005b2c <HAL_DMA_Abort+0x218>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d06d      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a39      	ldr	r2, [pc, #228]	; (8005b30 <HAL_DMA_Abort+0x21c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d068      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a37      	ldr	r2, [pc, #220]	; (8005b34 <HAL_DMA_Abort+0x220>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d063      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a36      	ldr	r2, [pc, #216]	; (8005b38 <HAL_DMA_Abort+0x224>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d05e      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a34      	ldr	r2, [pc, #208]	; (8005b3c <HAL_DMA_Abort+0x228>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d059      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <HAL_DMA_Abort+0x22c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d054      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a31      	ldr	r2, [pc, #196]	; (8005b44 <HAL_DMA_Abort+0x230>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d04f      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a30      	ldr	r2, [pc, #192]	; (8005b48 <HAL_DMA_Abort+0x234>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d04a      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2e      	ldr	r2, [pc, #184]	; (8005b4c <HAL_DMA_Abort+0x238>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d045      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2d      	ldr	r2, [pc, #180]	; (8005b50 <HAL_DMA_Abort+0x23c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d040      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2b      	ldr	r2, [pc, #172]	; (8005b54 <HAL_DMA_Abort+0x240>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d03b      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <HAL_DMA_Abort+0x244>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d036      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a28      	ldr	r2, [pc, #160]	; (8005b5c <HAL_DMA_Abort+0x248>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d031      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <HAL_DMA_Abort+0x24c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d02c      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a25      	ldr	r2, [pc, #148]	; (8005b64 <HAL_DMA_Abort+0x250>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d027      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <HAL_DMA_Abort+0x254>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a22      	ldr	r2, [pc, #136]	; (8005b6c <HAL_DMA_Abort+0x258>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01d      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <HAL_DMA_Abort+0x25c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1f      	ldr	r2, [pc, #124]	; (8005b74 <HAL_DMA_Abort+0x260>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <HAL_DMA_Abort+0x264>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <HAL_DMA_Abort+0x268>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <HAL_DMA_Abort+0x26c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <HAL_DMA_Abort+0x270>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d132      	bne.n	8005b88 <HAL_DMA_Abort+0x274>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e031      	b.n	8005b8a <HAL_DMA_Abort+0x276>
 8005b26:	bf00      	nop
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8
 8005b68:	58025408 	.word	0x58025408
 8005b6c:	5802541c 	.word	0x5802541c
 8005b70:	58025430 	.word	0x58025430
 8005b74:	58025444 	.word	0x58025444
 8005b78:	58025458 	.word	0x58025458
 8005b7c:	5802546c 	.word	0x5802546c
 8005b80:	58025480 	.word	0x58025480
 8005b84:	58025494 	.word	0x58025494
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a6d      	ldr	r2, [pc, #436]	; (8005d58 <HAL_DMA_Abort+0x444>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d04a      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6b      	ldr	r2, [pc, #428]	; (8005d5c <HAL_DMA_Abort+0x448>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d045      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a6a      	ldr	r2, [pc, #424]	; (8005d60 <HAL_DMA_Abort+0x44c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d040      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a68      	ldr	r2, [pc, #416]	; (8005d64 <HAL_DMA_Abort+0x450>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d03b      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a67      	ldr	r2, [pc, #412]	; (8005d68 <HAL_DMA_Abort+0x454>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d036      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a65      	ldr	r2, [pc, #404]	; (8005d6c <HAL_DMA_Abort+0x458>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d031      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a64      	ldr	r2, [pc, #400]	; (8005d70 <HAL_DMA_Abort+0x45c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d02c      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a62      	ldr	r2, [pc, #392]	; (8005d74 <HAL_DMA_Abort+0x460>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d027      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a61      	ldr	r2, [pc, #388]	; (8005d78 <HAL_DMA_Abort+0x464>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5f      	ldr	r2, [pc, #380]	; (8005d7c <HAL_DMA_Abort+0x468>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01d      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a5e      	ldr	r2, [pc, #376]	; (8005d80 <HAL_DMA_Abort+0x46c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a5c      	ldr	r2, [pc, #368]	; (8005d84 <HAL_DMA_Abort+0x470>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a5b      	ldr	r2, [pc, #364]	; (8005d88 <HAL_DMA_Abort+0x474>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a59      	ldr	r2, [pc, #356]	; (8005d8c <HAL_DMA_Abort+0x478>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a58      	ldr	r2, [pc, #352]	; (8005d90 <HAL_DMA_Abort+0x47c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a56      	ldr	r2, [pc, #344]	; (8005d94 <HAL_DMA_Abort+0x480>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d108      	bne.n	8005c50 <HAL_DMA_Abort+0x33c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e007      	b.n	8005c60 <HAL_DMA_Abort+0x34c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c60:	e013      	b.n	8005c8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c62:	f7fe fc4f 	bl	8004504 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d90c      	bls.n	8005c8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e12d      	b.n	8005ee6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <HAL_DMA_Abort+0x444>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d04a      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2d      	ldr	r2, [pc, #180]	; (8005d5c <HAL_DMA_Abort+0x448>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d045      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <HAL_DMA_Abort+0x44c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d040      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <HAL_DMA_Abort+0x450>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d03b      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a29      	ldr	r2, [pc, #164]	; (8005d68 <HAL_DMA_Abort+0x454>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d036      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <HAL_DMA_Abort+0x458>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d031      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <HAL_DMA_Abort+0x45c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d02c      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a24      	ldr	r2, [pc, #144]	; (8005d74 <HAL_DMA_Abort+0x460>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d027      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <HAL_DMA_Abort+0x464>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d022      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_DMA_Abort+0x468>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01d      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a20      	ldr	r2, [pc, #128]	; (8005d80 <HAL_DMA_Abort+0x46c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_DMA_Abort+0x470>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <HAL_DMA_Abort+0x474>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_DMA_Abort+0x478>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1a      	ldr	r2, [pc, #104]	; (8005d90 <HAL_DMA_Abort+0x47c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_DMA_Abort+0x480>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_DMA_Abort+0x426>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_DMA_Abort+0x428>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02b      	beq.n	8005d98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	223f      	movs	r2, #63	; 0x3f
 8005d50:	409a      	lsls	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	609a      	str	r2, [r3, #8]
 8005d56:	e02a      	b.n	8005dae <HAL_DMA_Abort+0x49a>
 8005d58:	40020010 	.word	0x40020010
 8005d5c:	40020028 	.word	0x40020028
 8005d60:	40020040 	.word	0x40020040
 8005d64:	40020058 	.word	0x40020058
 8005d68:	40020070 	.word	0x40020070
 8005d6c:	40020088 	.word	0x40020088
 8005d70:	400200a0 	.word	0x400200a0
 8005d74:	400200b8 	.word	0x400200b8
 8005d78:	40020410 	.word	0x40020410
 8005d7c:	40020428 	.word	0x40020428
 8005d80:	40020440 	.word	0x40020440
 8005d84:	40020458 	.word	0x40020458
 8005d88:	40020470 	.word	0x40020470
 8005d8c:	40020488 	.word	0x40020488
 8005d90:	400204a0 	.word	0x400204a0
 8005d94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2201      	movs	r2, #1
 8005da8:	409a      	lsls	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4f      	ldr	r2, [pc, #316]	; (8005ef0 <HAL_DMA_Abort+0x5dc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d072      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a4d      	ldr	r2, [pc, #308]	; (8005ef4 <HAL_DMA_Abort+0x5e0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d06d      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4c      	ldr	r2, [pc, #304]	; (8005ef8 <HAL_DMA_Abort+0x5e4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d068      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	; (8005efc <HAL_DMA_Abort+0x5e8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d063      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a49      	ldr	r2, [pc, #292]	; (8005f00 <HAL_DMA_Abort+0x5ec>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d05e      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a47      	ldr	r2, [pc, #284]	; (8005f04 <HAL_DMA_Abort+0x5f0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d059      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a46      	ldr	r2, [pc, #280]	; (8005f08 <HAL_DMA_Abort+0x5f4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d054      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a44      	ldr	r2, [pc, #272]	; (8005f0c <HAL_DMA_Abort+0x5f8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d04f      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a43      	ldr	r2, [pc, #268]	; (8005f10 <HAL_DMA_Abort+0x5fc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d04a      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a41      	ldr	r2, [pc, #260]	; (8005f14 <HAL_DMA_Abort+0x600>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d045      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a40      	ldr	r2, [pc, #256]	; (8005f18 <HAL_DMA_Abort+0x604>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d040      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a3e      	ldr	r2, [pc, #248]	; (8005f1c <HAL_DMA_Abort+0x608>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d03b      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3d      	ldr	r2, [pc, #244]	; (8005f20 <HAL_DMA_Abort+0x60c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d036      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a3b      	ldr	r2, [pc, #236]	; (8005f24 <HAL_DMA_Abort+0x610>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d031      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a3a      	ldr	r2, [pc, #232]	; (8005f28 <HAL_DMA_Abort+0x614>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d02c      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a38      	ldr	r2, [pc, #224]	; (8005f2c <HAL_DMA_Abort+0x618>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d027      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a37      	ldr	r2, [pc, #220]	; (8005f30 <HAL_DMA_Abort+0x61c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d022      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a35      	ldr	r2, [pc, #212]	; (8005f34 <HAL_DMA_Abort+0x620>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01d      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a34      	ldr	r2, [pc, #208]	; (8005f38 <HAL_DMA_Abort+0x624>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d018      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <HAL_DMA_Abort+0x628>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a31      	ldr	r2, [pc, #196]	; (8005f40 <HAL_DMA_Abort+0x62c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00e      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <HAL_DMA_Abort+0x630>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d009      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2e      	ldr	r2, [pc, #184]	; (8005f48 <HAL_DMA_Abort+0x634>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <HAL_DMA_Abort+0x638>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_DMA_Abort+0x58e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_DMA_Abort+0x590>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d015      	beq.n	8005ed4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005eb0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ed2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40020010 	.word	0x40020010
 8005ef4:	40020028 	.word	0x40020028
 8005ef8:	40020040 	.word	0x40020040
 8005efc:	40020058 	.word	0x40020058
 8005f00:	40020070 	.word	0x40020070
 8005f04:	40020088 	.word	0x40020088
 8005f08:	400200a0 	.word	0x400200a0
 8005f0c:	400200b8 	.word	0x400200b8
 8005f10:	40020410 	.word	0x40020410
 8005f14:	40020428 	.word	0x40020428
 8005f18:	40020440 	.word	0x40020440
 8005f1c:	40020458 	.word	0x40020458
 8005f20:	40020470 	.word	0x40020470
 8005f24:	40020488 	.word	0x40020488
 8005f28:	400204a0 	.word	0x400204a0
 8005f2c:	400204b8 	.word	0x400204b8
 8005f30:	58025408 	.word	0x58025408
 8005f34:	5802541c 	.word	0x5802541c
 8005f38:	58025430 	.word	0x58025430
 8005f3c:	58025444 	.word	0x58025444
 8005f40:	58025458 	.word	0x58025458
 8005f44:	5802546c 	.word	0x5802546c
 8005f48:	58025480 	.word	0x58025480
 8005f4c:	58025494 	.word	0x58025494

08005f50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e237      	b.n	80063d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d004      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2280      	movs	r2, #128	; 0x80
 8005f72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e22c      	b.n	80063d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5c      	ldr	r2, [pc, #368]	; (80060f0 <HAL_DMA_Abort_IT+0x1a0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d04a      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5b      	ldr	r2, [pc, #364]	; (80060f4 <HAL_DMA_Abort_IT+0x1a4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d045      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a59      	ldr	r2, [pc, #356]	; (80060f8 <HAL_DMA_Abort_IT+0x1a8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d040      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a58      	ldr	r2, [pc, #352]	; (80060fc <HAL_DMA_Abort_IT+0x1ac>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d03b      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a56      	ldr	r2, [pc, #344]	; (8006100 <HAL_DMA_Abort_IT+0x1b0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d036      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a55      	ldr	r2, [pc, #340]	; (8006104 <HAL_DMA_Abort_IT+0x1b4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d031      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a53      	ldr	r2, [pc, #332]	; (8006108 <HAL_DMA_Abort_IT+0x1b8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d02c      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a52      	ldr	r2, [pc, #328]	; (800610c <HAL_DMA_Abort_IT+0x1bc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d027      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a50      	ldr	r2, [pc, #320]	; (8006110 <HAL_DMA_Abort_IT+0x1c0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a4f      	ldr	r2, [pc, #316]	; (8006114 <HAL_DMA_Abort_IT+0x1c4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01d      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a4d      	ldr	r2, [pc, #308]	; (8006118 <HAL_DMA_Abort_IT+0x1c8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a4c      	ldr	r2, [pc, #304]	; (800611c <HAL_DMA_Abort_IT+0x1cc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a4a      	ldr	r2, [pc, #296]	; (8006120 <HAL_DMA_Abort_IT+0x1d0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a49      	ldr	r2, [pc, #292]	; (8006124 <HAL_DMA_Abort_IT+0x1d4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a47      	ldr	r2, [pc, #284]	; (8006128 <HAL_DMA_Abort_IT+0x1d8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a46      	ldr	r2, [pc, #280]	; (800612c <HAL_DMA_Abort_IT+0x1dc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d101      	bne.n	800601c <HAL_DMA_Abort_IT+0xcc>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_DMA_Abort_IT+0xce>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8086 	beq.w	8006130 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2204      	movs	r2, #4
 8006028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <HAL_DMA_Abort_IT+0x1a0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d04a      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_DMA_Abort_IT+0x1a4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d045      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2c      	ldr	r2, [pc, #176]	; (80060f8 <HAL_DMA_Abort_IT+0x1a8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d040      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <HAL_DMA_Abort_IT+0x1ac>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d03b      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <HAL_DMA_Abort_IT+0x1b0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d036      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a28      	ldr	r2, [pc, #160]	; (8006104 <HAL_DMA_Abort_IT+0x1b4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d031      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a26      	ldr	r2, [pc, #152]	; (8006108 <HAL_DMA_Abort_IT+0x1b8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d02c      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a25      	ldr	r2, [pc, #148]	; (800610c <HAL_DMA_Abort_IT+0x1bc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d027      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a23      	ldr	r2, [pc, #140]	; (8006110 <HAL_DMA_Abort_IT+0x1c0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a22      	ldr	r2, [pc, #136]	; (8006114 <HAL_DMA_Abort_IT+0x1c4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d01d      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <HAL_DMA_Abort_IT+0x1c8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_DMA_Abort_IT+0x1cc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <HAL_DMA_Abort_IT+0x1d0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <HAL_DMA_Abort_IT+0x1d4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <HAL_DMA_Abort_IT+0x1d8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_DMA_Abort_IT+0x1dc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d108      	bne.n	80060de <HAL_DMA_Abort_IT+0x18e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e178      	b.n	80063d0 <HAL_DMA_Abort_IT+0x480>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e16f      	b.n	80063d0 <HAL_DMA_Abort_IT+0x480>
 80060f0:	40020010 	.word	0x40020010
 80060f4:	40020028 	.word	0x40020028
 80060f8:	40020040 	.word	0x40020040
 80060fc:	40020058 	.word	0x40020058
 8006100:	40020070 	.word	0x40020070
 8006104:	40020088 	.word	0x40020088
 8006108:	400200a0 	.word	0x400200a0
 800610c:	400200b8 	.word	0x400200b8
 8006110:	40020410 	.word	0x40020410
 8006114:	40020428 	.word	0x40020428
 8006118:	40020440 	.word	0x40020440
 800611c:	40020458 	.word	0x40020458
 8006120:	40020470 	.word	0x40020470
 8006124:	40020488 	.word	0x40020488
 8006128:	400204a0 	.word	0x400204a0
 800612c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 020e 	bic.w	r2, r2, #14
 800613e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a6c      	ldr	r2, [pc, #432]	; (80062f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04a      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a6b      	ldr	r2, [pc, #428]	; (80062fc <HAL_DMA_Abort_IT+0x3ac>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d045      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a69      	ldr	r2, [pc, #420]	; (8006300 <HAL_DMA_Abort_IT+0x3b0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d040      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a68      	ldr	r2, [pc, #416]	; (8006304 <HAL_DMA_Abort_IT+0x3b4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d03b      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a66      	ldr	r2, [pc, #408]	; (8006308 <HAL_DMA_Abort_IT+0x3b8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d036      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a65      	ldr	r2, [pc, #404]	; (800630c <HAL_DMA_Abort_IT+0x3bc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d031      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a63      	ldr	r2, [pc, #396]	; (8006310 <HAL_DMA_Abort_IT+0x3c0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d02c      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a62      	ldr	r2, [pc, #392]	; (8006314 <HAL_DMA_Abort_IT+0x3c4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d027      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a60      	ldr	r2, [pc, #384]	; (8006318 <HAL_DMA_Abort_IT+0x3c8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a5f      	ldr	r2, [pc, #380]	; (800631c <HAL_DMA_Abort_IT+0x3cc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d01d      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a5d      	ldr	r2, [pc, #372]	; (8006320 <HAL_DMA_Abort_IT+0x3d0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5c      	ldr	r2, [pc, #368]	; (8006324 <HAL_DMA_Abort_IT+0x3d4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a5a      	ldr	r2, [pc, #360]	; (8006328 <HAL_DMA_Abort_IT+0x3d8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a59      	ldr	r2, [pc, #356]	; (800632c <HAL_DMA_Abort_IT+0x3dc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a57      	ldr	r2, [pc, #348]	; (8006330 <HAL_DMA_Abort_IT+0x3e0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a56      	ldr	r2, [pc, #344]	; (8006334 <HAL_DMA_Abort_IT+0x3e4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <HAL_DMA_Abort_IT+0x2a2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0201 	bic.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e007      	b.n	8006202 <HAL_DMA_Abort_IT+0x2b2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d072      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3a      	ldr	r2, [pc, #232]	; (80062fc <HAL_DMA_Abort_IT+0x3ac>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d06d      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a39      	ldr	r2, [pc, #228]	; (8006300 <HAL_DMA_Abort_IT+0x3b0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d068      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a37      	ldr	r2, [pc, #220]	; (8006304 <HAL_DMA_Abort_IT+0x3b4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d063      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a36      	ldr	r2, [pc, #216]	; (8006308 <HAL_DMA_Abort_IT+0x3b8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d05e      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a34      	ldr	r2, [pc, #208]	; (800630c <HAL_DMA_Abort_IT+0x3bc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d059      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a33      	ldr	r2, [pc, #204]	; (8006310 <HAL_DMA_Abort_IT+0x3c0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d054      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a31      	ldr	r2, [pc, #196]	; (8006314 <HAL_DMA_Abort_IT+0x3c4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d04f      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a30      	ldr	r2, [pc, #192]	; (8006318 <HAL_DMA_Abort_IT+0x3c8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d04a      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2e      	ldr	r2, [pc, #184]	; (800631c <HAL_DMA_Abort_IT+0x3cc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d045      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <HAL_DMA_Abort_IT+0x3d0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d040      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2b      	ldr	r2, [pc, #172]	; (8006324 <HAL_DMA_Abort_IT+0x3d4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d03b      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <HAL_DMA_Abort_IT+0x3d8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d036      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a28      	ldr	r2, [pc, #160]	; (800632c <HAL_DMA_Abort_IT+0x3dc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d031      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a27      	ldr	r2, [pc, #156]	; (8006330 <HAL_DMA_Abort_IT+0x3e0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d02c      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a25      	ldr	r2, [pc, #148]	; (8006334 <HAL_DMA_Abort_IT+0x3e4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d027      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <HAL_DMA_Abort_IT+0x3e8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d022      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <HAL_DMA_Abort_IT+0x3ec>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01d      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_DMA_Abort_IT+0x3f0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d018      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_DMA_Abort_IT+0x3f4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <HAL_DMA_Abort_IT+0x3f8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00e      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	; (800634c <HAL_DMA_Abort_IT+0x3fc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <HAL_DMA_Abort_IT+0x400>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_DMA_Abort_IT+0x404>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d132      	bne.n	8006358 <HAL_DMA_Abort_IT+0x408>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e031      	b.n	800635a <HAL_DMA_Abort_IT+0x40a>
 80062f6:	bf00      	nop
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
 8006338:	58025408 	.word	0x58025408
 800633c:	5802541c 	.word	0x5802541c
 8006340:	58025430 	.word	0x58025430
 8006344:	58025444 	.word	0x58025444
 8006348:	58025458 	.word	0x58025458
 800634c:	5802546c 	.word	0x5802546c
 8006350:	58025480 	.word	0x58025480
 8006354:	58025494 	.word	0x58025494
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d028      	beq.n	80063b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	409a      	lsls	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800638c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop

080063dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e8:	4b67      	ldr	r3, [pc, #412]	; (8006588 <HAL_DMA_IRQHandler+0x1ac>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a67      	ldr	r2, [pc, #412]	; (800658c <HAL_DMA_IRQHandler+0x1b0>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0a9b      	lsrs	r3, r3, #10
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5f      	ldr	r2, [pc, #380]	; (8006590 <HAL_DMA_IRQHandler+0x1b4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d04a      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5d      	ldr	r2, [pc, #372]	; (8006594 <HAL_DMA_IRQHandler+0x1b8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d045      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5c      	ldr	r2, [pc, #368]	; (8006598 <HAL_DMA_IRQHandler+0x1bc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d040      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a5a      	ldr	r2, [pc, #360]	; (800659c <HAL_DMA_IRQHandler+0x1c0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d03b      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a59      	ldr	r2, [pc, #356]	; (80065a0 <HAL_DMA_IRQHandler+0x1c4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d036      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a57      	ldr	r2, [pc, #348]	; (80065a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d031      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a56      	ldr	r2, [pc, #344]	; (80065a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d02c      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a54      	ldr	r2, [pc, #336]	; (80065ac <HAL_DMA_IRQHandler+0x1d0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d027      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a53      	ldr	r2, [pc, #332]	; (80065b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a51      	ldr	r2, [pc, #324]	; (80065b4 <HAL_DMA_IRQHandler+0x1d8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a50      	ldr	r2, [pc, #320]	; (80065b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a4e      	ldr	r2, [pc, #312]	; (80065bc <HAL_DMA_IRQHandler+0x1e0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4d      	ldr	r2, [pc, #308]	; (80065c0 <HAL_DMA_IRQHandler+0x1e4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a4b      	ldr	r2, [pc, #300]	; (80065c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <HAL_DMA_IRQHandler+0x1ec>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a48      	ldr	r2, [pc, #288]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA_IRQHandler+0xd6>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_DMA_IRQHandler+0xd8>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 842b 	beq.w	8006d10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2208      	movs	r2, #8
 80064c4:	409a      	lsls	r2, r3
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80a2 	beq.w	8006614 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <HAL_DMA_IRQHandler+0x1b4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <HAL_DMA_IRQHandler+0x1b8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <HAL_DMA_IRQHandler+0x1bc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <HAL_DMA_IRQHandler+0x1c0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <HAL_DMA_IRQHandler+0x1c4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a24      	ldr	r2, [pc, #144]	; (80065ac <HAL_DMA_IRQHandler+0x1d0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a22      	ldr	r2, [pc, #136]	; (80065b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_DMA_IRQHandler+0x1dc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_DMA_IRQHandler+0x1e0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <HAL_DMA_IRQHandler+0x1e4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a18      	ldr	r2, [pc, #96]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d12f      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x1f4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	e02e      	b.n	80065e4 <HAL_DMA_IRQHandler+0x208>
 8006586:	bf00      	nop
 8006588:	24000284 	.word	0x24000284
 800658c:	1b4e81b5 	.word	0x1b4e81b5
 8006590:	40020010 	.word	0x40020010
 8006594:	40020028 	.word	0x40020028
 8006598:	40020040 	.word	0x40020040
 800659c:	40020058 	.word	0x40020058
 80065a0:	40020070 	.word	0x40020070
 80065a4:	40020088 	.word	0x40020088
 80065a8:	400200a0 	.word	0x400200a0
 80065ac:	400200b8 	.word	0x400200b8
 80065b0:	40020410 	.word	0x40020410
 80065b4:	40020428 	.word	0x40020428
 80065b8:	40020440 	.word	0x40020440
 80065bc:	40020458 	.word	0x40020458
 80065c0:	40020470 	.word	0x40020470
 80065c4:	40020488 	.word	0x40020488
 80065c8:	400204a0 	.word	0x400204a0
 80065cc:	400204b8 	.word	0x400204b8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d015      	beq.n	8006614 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2208      	movs	r2, #8
 8006602:	409a      	lsls	r2, r3
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	f043 0201 	orr.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	fa22 f303 	lsr.w	r3, r2, r3
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06e      	beq.n	8006708 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a69      	ldr	r2, [pc, #420]	; (80067d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d04a      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a67      	ldr	r2, [pc, #412]	; (80067d8 <HAL_DMA_IRQHandler+0x3fc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d045      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a66      	ldr	r2, [pc, #408]	; (80067dc <HAL_DMA_IRQHandler+0x400>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d040      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a64      	ldr	r2, [pc, #400]	; (80067e0 <HAL_DMA_IRQHandler+0x404>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d03b      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a63      	ldr	r2, [pc, #396]	; (80067e4 <HAL_DMA_IRQHandler+0x408>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d036      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a61      	ldr	r2, [pc, #388]	; (80067e8 <HAL_DMA_IRQHandler+0x40c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d031      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a60      	ldr	r2, [pc, #384]	; (80067ec <HAL_DMA_IRQHandler+0x410>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d02c      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5e      	ldr	r2, [pc, #376]	; (80067f0 <HAL_DMA_IRQHandler+0x414>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d027      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a5d      	ldr	r2, [pc, #372]	; (80067f4 <HAL_DMA_IRQHandler+0x418>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d022      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5b      	ldr	r2, [pc, #364]	; (80067f8 <HAL_DMA_IRQHandler+0x41c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a5a      	ldr	r2, [pc, #360]	; (80067fc <HAL_DMA_IRQHandler+0x420>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a58      	ldr	r2, [pc, #352]	; (8006800 <HAL_DMA_IRQHandler+0x424>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a57      	ldr	r2, [pc, #348]	; (8006804 <HAL_DMA_IRQHandler+0x428>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a55      	ldr	r2, [pc, #340]	; (8006808 <HAL_DMA_IRQHandler+0x42c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a54      	ldr	r2, [pc, #336]	; (800680c <HAL_DMA_IRQHandler+0x430>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a52      	ldr	r2, [pc, #328]	; (8006810 <HAL_DMA_IRQHandler+0x434>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d10a      	bne.n	80066e0 <HAL_DMA_IRQHandler+0x304>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e003      	b.n	80066e8 <HAL_DMA_IRQHandler+0x30c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2201      	movs	r2, #1
 80066f6:	409a      	lsls	r2, r3
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	f043 0202 	orr.w	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2204      	movs	r2, #4
 8006712:	409a      	lsls	r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	4013      	ands	r3, r2
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 808f 	beq.w	800683c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04a      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2a      	ldr	r2, [pc, #168]	; (80067d8 <HAL_DMA_IRQHandler+0x3fc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d045      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a29      	ldr	r2, [pc, #164]	; (80067dc <HAL_DMA_IRQHandler+0x400>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d040      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a27      	ldr	r2, [pc, #156]	; (80067e0 <HAL_DMA_IRQHandler+0x404>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a26      	ldr	r2, [pc, #152]	; (80067e4 <HAL_DMA_IRQHandler+0x408>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d036      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a24      	ldr	r2, [pc, #144]	; (80067e8 <HAL_DMA_IRQHandler+0x40c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d031      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a23      	ldr	r2, [pc, #140]	; (80067ec <HAL_DMA_IRQHandler+0x410>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d02c      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <HAL_DMA_IRQHandler+0x414>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d027      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <HAL_DMA_IRQHandler+0x418>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d022      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <HAL_DMA_IRQHandler+0x41c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01d      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <HAL_DMA_IRQHandler+0x420>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d018      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <HAL_DMA_IRQHandler+0x424>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <HAL_DMA_IRQHandler+0x428>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_DMA_IRQHandler+0x42c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a17      	ldr	r2, [pc, #92]	; (800680c <HAL_DMA_IRQHandler+0x430>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <HAL_DMA_IRQHandler+0x434>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d12a      	bne.n	8006814 <HAL_DMA_IRQHandler+0x438>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e023      	b.n	800681c <HAL_DMA_IRQHandler+0x440>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2204      	movs	r2, #4
 800682a:	409a      	lsls	r2, r3
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f043 0204 	orr.w	r2, r3, #4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2210      	movs	r2, #16
 8006846:	409a      	lsls	r2, r3
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a6 	beq.w	800699e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a85      	ldr	r2, [pc, #532]	; (8006a6c <HAL_DMA_IRQHandler+0x690>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d04a      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a83      	ldr	r2, [pc, #524]	; (8006a70 <HAL_DMA_IRQHandler+0x694>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d045      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a82      	ldr	r2, [pc, #520]	; (8006a74 <HAL_DMA_IRQHandler+0x698>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d040      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a80      	ldr	r2, [pc, #512]	; (8006a78 <HAL_DMA_IRQHandler+0x69c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d03b      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a7f      	ldr	r2, [pc, #508]	; (8006a7c <HAL_DMA_IRQHandler+0x6a0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d036      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7d      	ldr	r2, [pc, #500]	; (8006a80 <HAL_DMA_IRQHandler+0x6a4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d031      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a7c      	ldr	r2, [pc, #496]	; (8006a84 <HAL_DMA_IRQHandler+0x6a8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d02c      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7a      	ldr	r2, [pc, #488]	; (8006a88 <HAL_DMA_IRQHandler+0x6ac>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d027      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a79      	ldr	r2, [pc, #484]	; (8006a8c <HAL_DMA_IRQHandler+0x6b0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d022      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a77      	ldr	r2, [pc, #476]	; (8006a90 <HAL_DMA_IRQHandler+0x6b4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01d      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a76      	ldr	r2, [pc, #472]	; (8006a94 <HAL_DMA_IRQHandler+0x6b8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d018      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a74      	ldr	r2, [pc, #464]	; (8006a98 <HAL_DMA_IRQHandler+0x6bc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a73      	ldr	r2, [pc, #460]	; (8006a9c <HAL_DMA_IRQHandler+0x6c0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a71      	ldr	r2, [pc, #452]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a70      	ldr	r2, [pc, #448]	; (8006aa4 <HAL_DMA_IRQHandler+0x6c8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a6e      	ldr	r2, [pc, #440]	; (8006aa8 <HAL_DMA_IRQHandler+0x6cc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10a      	bne.n	8006908 <HAL_DMA_IRQHandler+0x52c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	e009      	b.n	800691c <HAL_DMA_IRQHandler+0x540>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	bf14      	ite	ne
 8006916:	2301      	movne	r3, #1
 8006918:	2300      	moveq	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d03e      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2210      	movs	r2, #16
 800692a:	409a      	lsls	r2, r3
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d024      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
 800695c:	e01f      	b.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01b      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
 800696e:	e016      	b.n	800699e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d107      	bne.n	800698e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0208 	bic.w	r2, r2, #8
 800698c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2220      	movs	r2, #32
 80069a8:	409a      	lsls	r2, r3
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8110 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <HAL_DMA_IRQHandler+0x690>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d04a      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2b      	ldr	r2, [pc, #172]	; (8006a70 <HAL_DMA_IRQHandler+0x694>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d045      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <HAL_DMA_IRQHandler+0x698>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d040      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <HAL_DMA_IRQHandler+0x69c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d03b      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <HAL_DMA_IRQHandler+0x6a0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d036      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a25      	ldr	r2, [pc, #148]	; (8006a80 <HAL_DMA_IRQHandler+0x6a4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d031      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <HAL_DMA_IRQHandler+0x6a8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02c      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <HAL_DMA_IRQHandler+0x6ac>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d027      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <HAL_DMA_IRQHandler+0x6b0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d022      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <HAL_DMA_IRQHandler+0x6b4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01d      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <HAL_DMA_IRQHandler+0x6b8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <HAL_DMA_IRQHandler+0x6bc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1a      	ldr	r2, [pc, #104]	; (8006a9c <HAL_DMA_IRQHandler+0x6c0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <HAL_DMA_IRQHandler+0x6c8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a16      	ldr	r2, [pc, #88]	; (8006aa8 <HAL_DMA_IRQHandler+0x6cc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d12b      	bne.n	8006aac <HAL_DMA_IRQHandler+0x6d0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bf14      	ite	ne
 8006a62:	2301      	movne	r3, #1
 8006a64:	2300      	moveq	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	e02a      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x6e4>
 8006a6a:	bf00      	nop
 8006a6c:	40020010 	.word	0x40020010
 8006a70:	40020028 	.word	0x40020028
 8006a74:	40020040 	.word	0x40020040
 8006a78:	40020058 	.word	0x40020058
 8006a7c:	40020070 	.word	0x40020070
 8006a80:	40020088 	.word	0x40020088
 8006a84:	400200a0 	.word	0x400200a0
 8006a88:	400200b8 	.word	0x400200b8
 8006a8c:	40020410 	.word	0x40020410
 8006a90:	40020428 	.word	0x40020428
 8006a94:	40020440 	.word	0x40020440
 8006a98:	40020458 	.word	0x40020458
 8006a9c:	40020470 	.word	0x40020470
 8006aa0:	40020488 	.word	0x40020488
 8006aa4:	400204a0 	.word	0x400204a0
 8006aa8:	400204b8 	.word	0x400204b8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bf14      	ite	ne
 8006aba:	2301      	movne	r3, #1
 8006abc:	2300      	moveq	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8087 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2220      	movs	r2, #32
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d139      	bne.n	8006b56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0216 	bic.w	r2, r2, #22
 8006af0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <HAL_DMA_IRQHandler+0x736>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0208 	bic.w	r2, r2, #8
 8006b20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	223f      	movs	r2, #63	; 0x3f
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8382 	beq.w	8007250 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
          }
          return;
 8006b54:	e37c      	b.n	8007250 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d108      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d02c      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	e027      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d023      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
 8006b94:	e01e      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0210 	bic.w	r2, r2, #16
 8006bb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 833e 	beq.w	800725a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8088 	beq.w	8006cfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a89      	ldr	r2, [pc, #548]	; (8006e20 <HAL_DMA_IRQHandler+0xa44>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d04a      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a88      	ldr	r2, [pc, #544]	; (8006e24 <HAL_DMA_IRQHandler+0xa48>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d045      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a86      	ldr	r2, [pc, #536]	; (8006e28 <HAL_DMA_IRQHandler+0xa4c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d040      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a85      	ldr	r2, [pc, #532]	; (8006e2c <HAL_DMA_IRQHandler+0xa50>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d03b      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a83      	ldr	r2, [pc, #524]	; (8006e30 <HAL_DMA_IRQHandler+0xa54>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d036      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a82      	ldr	r2, [pc, #520]	; (8006e34 <HAL_DMA_IRQHandler+0xa58>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d031      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a80      	ldr	r2, [pc, #512]	; (8006e38 <HAL_DMA_IRQHandler+0xa5c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02c      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a7f      	ldr	r2, [pc, #508]	; (8006e3c <HAL_DMA_IRQHandler+0xa60>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d027      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a7d      	ldr	r2, [pc, #500]	; (8006e40 <HAL_DMA_IRQHandler+0xa64>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d022      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a7c      	ldr	r2, [pc, #496]	; (8006e44 <HAL_DMA_IRQHandler+0xa68>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d01d      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7a      	ldr	r2, [pc, #488]	; (8006e48 <HAL_DMA_IRQHandler+0xa6c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d018      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a79      	ldr	r2, [pc, #484]	; (8006e4c <HAL_DMA_IRQHandler+0xa70>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a77      	ldr	r2, [pc, #476]	; (8006e50 <HAL_DMA_IRQHandler+0xa74>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a76      	ldr	r2, [pc, #472]	; (8006e54 <HAL_DMA_IRQHandler+0xa78>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a74      	ldr	r2, [pc, #464]	; (8006e58 <HAL_DMA_IRQHandler+0xa7c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a73      	ldr	r2, [pc, #460]	; (8006e5c <HAL_DMA_IRQHandler+0xa80>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d108      	bne.n	8006ca6 <HAL_DMA_IRQHandler+0x8ca>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e007      	b.n	8006cb6 <HAL_DMA_IRQHandler+0x8da>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0201 	bic.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d307      	bcc.n	8006cd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f2      	bne.n	8006cb6 <HAL_DMA_IRQHandler+0x8da>
 8006cd0:	e000      	b.n	8006cd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cea:	e003      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 82aa 	beq.w	800725a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
 8006d0e:	e2a4      	b.n	800725a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a52      	ldr	r2, [pc, #328]	; (8006e60 <HAL_DMA_IRQHandler+0xa84>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d04a      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a51      	ldr	r2, [pc, #324]	; (8006e64 <HAL_DMA_IRQHandler+0xa88>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d045      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a4f      	ldr	r2, [pc, #316]	; (8006e68 <HAL_DMA_IRQHandler+0xa8c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d040      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a4e      	ldr	r2, [pc, #312]	; (8006e6c <HAL_DMA_IRQHandler+0xa90>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d03b      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a4c      	ldr	r2, [pc, #304]	; (8006e70 <HAL_DMA_IRQHandler+0xa94>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d036      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a4b      	ldr	r2, [pc, #300]	; (8006e74 <HAL_DMA_IRQHandler+0xa98>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d031      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a49      	ldr	r2, [pc, #292]	; (8006e78 <HAL_DMA_IRQHandler+0xa9c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d02c      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a48      	ldr	r2, [pc, #288]	; (8006e7c <HAL_DMA_IRQHandler+0xaa0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d027      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a46      	ldr	r2, [pc, #280]	; (8006e80 <HAL_DMA_IRQHandler+0xaa4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d022      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a45      	ldr	r2, [pc, #276]	; (8006e84 <HAL_DMA_IRQHandler+0xaa8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d01d      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a43      	ldr	r2, [pc, #268]	; (8006e88 <HAL_DMA_IRQHandler+0xaac>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d018      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a42      	ldr	r2, [pc, #264]	; (8006e8c <HAL_DMA_IRQHandler+0xab0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a40      	ldr	r2, [pc, #256]	; (8006e90 <HAL_DMA_IRQHandler+0xab4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a3f      	ldr	r2, [pc, #252]	; (8006e94 <HAL_DMA_IRQHandler+0xab8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a3d      	ldr	r2, [pc, #244]	; (8006e98 <HAL_DMA_IRQHandler+0xabc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x9d4>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <HAL_DMA_IRQHandler+0xac0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d101      	bne.n	8006db4 <HAL_DMA_IRQHandler+0x9d8>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <HAL_DMA_IRQHandler+0x9da>
 8006db4:	2300      	movs	r3, #0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 824f 	beq.w	800725a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	2204      	movs	r2, #4
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80dd 	beq.w	8006f94 <HAL_DMA_IRQHandler+0xbb8>
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80d7 	beq.w	8006f94 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	2204      	movs	r2, #4
 8006df0:	409a      	lsls	r2, r3
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d059      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d14a      	bne.n	8006ea0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8220 	beq.w	8007254 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e1c:	e21a      	b.n	8007254 <HAL_DMA_IRQHandler+0xe78>
 8006e1e:	bf00      	nop
 8006e20:	40020010 	.word	0x40020010
 8006e24:	40020028 	.word	0x40020028
 8006e28:	40020040 	.word	0x40020040
 8006e2c:	40020058 	.word	0x40020058
 8006e30:	40020070 	.word	0x40020070
 8006e34:	40020088 	.word	0x40020088
 8006e38:	400200a0 	.word	0x400200a0
 8006e3c:	400200b8 	.word	0x400200b8
 8006e40:	40020410 	.word	0x40020410
 8006e44:	40020428 	.word	0x40020428
 8006e48:	40020440 	.word	0x40020440
 8006e4c:	40020458 	.word	0x40020458
 8006e50:	40020470 	.word	0x40020470
 8006e54:	40020488 	.word	0x40020488
 8006e58:	400204a0 	.word	0x400204a0
 8006e5c:	400204b8 	.word	0x400204b8
 8006e60:	48022c08 	.word	0x48022c08
 8006e64:	48022c1c 	.word	0x48022c1c
 8006e68:	48022c30 	.word	0x48022c30
 8006e6c:	48022c44 	.word	0x48022c44
 8006e70:	48022c58 	.word	0x48022c58
 8006e74:	48022c6c 	.word	0x48022c6c
 8006e78:	48022c80 	.word	0x48022c80
 8006e7c:	48022c94 	.word	0x48022c94
 8006e80:	58025408 	.word	0x58025408
 8006e84:	5802541c 	.word	0x5802541c
 8006e88:	58025430 	.word	0x58025430
 8006e8c:	58025444 	.word	0x58025444
 8006e90:	58025458 	.word	0x58025458
 8006e94:	5802546c 	.word	0x5802546c
 8006e98:	58025480 	.word	0x58025480
 8006e9c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 81d5 	beq.w	8007254 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb2:	e1cf      	b.n	8007254 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d160      	bne.n	8006f80 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a7f      	ldr	r2, [pc, #508]	; (80070c0 <HAL_DMA_IRQHandler+0xce4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d04a      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a7d      	ldr	r2, [pc, #500]	; (80070c4 <HAL_DMA_IRQHandler+0xce8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d045      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a7c      	ldr	r2, [pc, #496]	; (80070c8 <HAL_DMA_IRQHandler+0xcec>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d040      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a7a      	ldr	r2, [pc, #488]	; (80070cc <HAL_DMA_IRQHandler+0xcf0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d03b      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a79      	ldr	r2, [pc, #484]	; (80070d0 <HAL_DMA_IRQHandler+0xcf4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d036      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a77      	ldr	r2, [pc, #476]	; (80070d4 <HAL_DMA_IRQHandler+0xcf8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d031      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a76      	ldr	r2, [pc, #472]	; (80070d8 <HAL_DMA_IRQHandler+0xcfc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d02c      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a74      	ldr	r2, [pc, #464]	; (80070dc <HAL_DMA_IRQHandler+0xd00>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d027      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a73      	ldr	r2, [pc, #460]	; (80070e0 <HAL_DMA_IRQHandler+0xd04>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d022      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a71      	ldr	r2, [pc, #452]	; (80070e4 <HAL_DMA_IRQHandler+0xd08>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a70      	ldr	r2, [pc, #448]	; (80070e8 <HAL_DMA_IRQHandler+0xd0c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d018      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6e      	ldr	r2, [pc, #440]	; (80070ec <HAL_DMA_IRQHandler+0xd10>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a6d      	ldr	r2, [pc, #436]	; (80070f0 <HAL_DMA_IRQHandler+0xd14>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00e      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a6b      	ldr	r2, [pc, #428]	; (80070f4 <HAL_DMA_IRQHandler+0xd18>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a6a      	ldr	r2, [pc, #424]	; (80070f8 <HAL_DMA_IRQHandler+0xd1c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb82>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a68      	ldr	r2, [pc, #416]	; (80070fc <HAL_DMA_IRQHandler+0xd20>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d108      	bne.n	8006f70 <HAL_DMA_IRQHandler+0xb94>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0208 	bic.w	r2, r2, #8
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	e007      	b.n	8006f80 <HAL_DMA_IRQHandler+0xba4>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0204 	bic.w	r2, r2, #4
 8006f7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8165 	beq.w	8007254 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f92:	e15f      	b.n	8007254 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	409a      	lsls	r2, r3
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80c5 	beq.w	8007134 <HAL_DMA_IRQHandler+0xd58>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80bf 	beq.w	8007134 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	409a      	lsls	r2, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d018      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 813a 	beq.w	8007258 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fec:	e134      	b.n	8007258 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8130 	beq.w	8007258 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007000:	e12a      	b.n	8007258 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 8089 	bne.w	8007120 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <HAL_DMA_IRQHandler+0xce4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d04a      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a29      	ldr	r2, [pc, #164]	; (80070c4 <HAL_DMA_IRQHandler+0xce8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d045      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a28      	ldr	r2, [pc, #160]	; (80070c8 <HAL_DMA_IRQHandler+0xcec>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d040      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a26      	ldr	r2, [pc, #152]	; (80070cc <HAL_DMA_IRQHandler+0xcf0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d03b      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a25      	ldr	r2, [pc, #148]	; (80070d0 <HAL_DMA_IRQHandler+0xcf4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d036      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a23      	ldr	r2, [pc, #140]	; (80070d4 <HAL_DMA_IRQHandler+0xcf8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d031      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a22      	ldr	r2, [pc, #136]	; (80070d8 <HAL_DMA_IRQHandler+0xcfc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d02c      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a20      	ldr	r2, [pc, #128]	; (80070dc <HAL_DMA_IRQHandler+0xd00>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d027      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <HAL_DMA_IRQHandler+0xd04>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <HAL_DMA_IRQHandler+0xd08>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01d      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <HAL_DMA_IRQHandler+0xd0c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1a      	ldr	r2, [pc, #104]	; (80070ec <HAL_DMA_IRQHandler+0xd10>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a19      	ldr	r2, [pc, #100]	; (80070f0 <HAL_DMA_IRQHandler+0xd14>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <HAL_DMA_IRQHandler+0xd18>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <HAL_DMA_IRQHandler+0xd1c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <HAL_DMA_IRQHandler+0xcd2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a14      	ldr	r2, [pc, #80]	; (80070fc <HAL_DMA_IRQHandler+0xd20>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d128      	bne.n	8007100 <HAL_DMA_IRQHandler+0xd24>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0214 	bic.w	r2, r2, #20
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e027      	b.n	8007110 <HAL_DMA_IRQHandler+0xd34>
 80070c0:	40020010 	.word	0x40020010
 80070c4:	40020028 	.word	0x40020028
 80070c8:	40020040 	.word	0x40020040
 80070cc:	40020058 	.word	0x40020058
 80070d0:	40020070 	.word	0x40020070
 80070d4:	40020088 	.word	0x40020088
 80070d8:	400200a0 	.word	0x400200a0
 80070dc:	400200b8 	.word	0x400200b8
 80070e0:	40020410 	.word	0x40020410
 80070e4:	40020428 	.word	0x40020428
 80070e8:	40020440 	.word	0x40020440
 80070ec:	40020458 	.word	0x40020458
 80070f0:	40020470 	.word	0x40020470
 80070f4:	40020488 	.word	0x40020488
 80070f8:	400204a0 	.word	0x400204a0
 80070fc:	400204b8 	.word	0x400204b8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 020a 	bic.w	r2, r2, #10
 800710e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8097 	beq.w	8007258 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007132:	e091      	b.n	8007258 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	2208      	movs	r2, #8
 800713e:	409a      	lsls	r2, r3
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4013      	ands	r3, r2
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8088 	beq.w	800725a <HAL_DMA_IRQHandler+0xe7e>
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8082 	beq.w	800725a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a41      	ldr	r2, [pc, #260]	; (8007260 <HAL_DMA_IRQHandler+0xe84>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d04a      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a3f      	ldr	r2, [pc, #252]	; (8007264 <HAL_DMA_IRQHandler+0xe88>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d045      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a3e      	ldr	r2, [pc, #248]	; (8007268 <HAL_DMA_IRQHandler+0xe8c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d040      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a3c      	ldr	r2, [pc, #240]	; (800726c <HAL_DMA_IRQHandler+0xe90>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d03b      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3b      	ldr	r2, [pc, #236]	; (8007270 <HAL_DMA_IRQHandler+0xe94>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d036      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a39      	ldr	r2, [pc, #228]	; (8007274 <HAL_DMA_IRQHandler+0xe98>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d031      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a38      	ldr	r2, [pc, #224]	; (8007278 <HAL_DMA_IRQHandler+0xe9c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d02c      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a36      	ldr	r2, [pc, #216]	; (800727c <HAL_DMA_IRQHandler+0xea0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d027      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a35      	ldr	r2, [pc, #212]	; (8007280 <HAL_DMA_IRQHandler+0xea4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d022      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a33      	ldr	r2, [pc, #204]	; (8007284 <HAL_DMA_IRQHandler+0xea8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01d      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a32      	ldr	r2, [pc, #200]	; (8007288 <HAL_DMA_IRQHandler+0xeac>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a30      	ldr	r2, [pc, #192]	; (800728c <HAL_DMA_IRQHandler+0xeb0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2f      	ldr	r2, [pc, #188]	; (8007290 <HAL_DMA_IRQHandler+0xeb4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2d      	ldr	r2, [pc, #180]	; (8007294 <HAL_DMA_IRQHandler+0xeb8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <HAL_DMA_IRQHandler+0xebc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xe1a>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2a      	ldr	r2, [pc, #168]	; (800729c <HAL_DMA_IRQHandler+0xec0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d108      	bne.n	8007208 <HAL_DMA_IRQHandler+0xe2c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 021c 	bic.w	r2, r2, #28
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	e007      	b.n	8007218 <HAL_DMA_IRQHandler+0xe3c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 020e 	bic.w	r2, r2, #14
 8007216:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2201      	movs	r2, #1
 8007222:	409a      	lsls	r2, r3
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
 800724e:	e004      	b.n	800725a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007250:	bf00      	nop
 8007252:	e002      	b.n	800725a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007258:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800725a:	3728      	adds	r7, #40	; 0x28
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40020010 	.word	0x40020010
 8007264:	40020028 	.word	0x40020028
 8007268:	40020040 	.word	0x40020040
 800726c:	40020058 	.word	0x40020058
 8007270:	40020070 	.word	0x40020070
 8007274:	40020088 	.word	0x40020088
 8007278:	400200a0 	.word	0x400200a0
 800727c:	400200b8 	.word	0x400200b8
 8007280:	40020410 	.word	0x40020410
 8007284:	40020428 	.word	0x40020428
 8007288:	40020440 	.word	0x40020440
 800728c:	40020458 	.word	0x40020458
 8007290:	40020470 	.word	0x40020470
 8007294:	40020488 	.word	0x40020488
 8007298:	400204a0 	.word	0x400204a0
 800729c:	400204b8 	.word	0x400204b8

080072a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a7f      	ldr	r2, [pc, #508]	; (80074bc <DMA_SetConfig+0x21c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d072      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a7d      	ldr	r2, [pc, #500]	; (80074c0 <DMA_SetConfig+0x220>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d06d      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a7c      	ldr	r2, [pc, #496]	; (80074c4 <DMA_SetConfig+0x224>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d068      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a7a      	ldr	r2, [pc, #488]	; (80074c8 <DMA_SetConfig+0x228>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d063      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a79      	ldr	r2, [pc, #484]	; (80074cc <DMA_SetConfig+0x22c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d05e      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a77      	ldr	r2, [pc, #476]	; (80074d0 <DMA_SetConfig+0x230>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d059      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a76      	ldr	r2, [pc, #472]	; (80074d4 <DMA_SetConfig+0x234>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d054      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a74      	ldr	r2, [pc, #464]	; (80074d8 <DMA_SetConfig+0x238>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04f      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a73      	ldr	r2, [pc, #460]	; (80074dc <DMA_SetConfig+0x23c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d04a      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a71      	ldr	r2, [pc, #452]	; (80074e0 <DMA_SetConfig+0x240>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d045      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a70      	ldr	r2, [pc, #448]	; (80074e4 <DMA_SetConfig+0x244>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d040      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6e      	ldr	r2, [pc, #440]	; (80074e8 <DMA_SetConfig+0x248>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d03b      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a6d      	ldr	r2, [pc, #436]	; (80074ec <DMA_SetConfig+0x24c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d036      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a6b      	ldr	r2, [pc, #428]	; (80074f0 <DMA_SetConfig+0x250>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d031      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a6a      	ldr	r2, [pc, #424]	; (80074f4 <DMA_SetConfig+0x254>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d02c      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a68      	ldr	r2, [pc, #416]	; (80074f8 <DMA_SetConfig+0x258>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d027      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a67      	ldr	r2, [pc, #412]	; (80074fc <DMA_SetConfig+0x25c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a65      	ldr	r2, [pc, #404]	; (8007500 <DMA_SetConfig+0x260>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01d      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a64      	ldr	r2, [pc, #400]	; (8007504 <DMA_SetConfig+0x264>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a62      	ldr	r2, [pc, #392]	; (8007508 <DMA_SetConfig+0x268>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a61      	ldr	r2, [pc, #388]	; (800750c <DMA_SetConfig+0x26c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a5f      	ldr	r2, [pc, #380]	; (8007510 <DMA_SetConfig+0x270>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a5e      	ldr	r2, [pc, #376]	; (8007514 <DMA_SetConfig+0x274>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5c      	ldr	r2, [pc, #368]	; (8007518 <DMA_SetConfig+0x278>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <DMA_SetConfig+0x10e>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <DMA_SetConfig+0x110>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a39      	ldr	r2, [pc, #228]	; (80074bc <DMA_SetConfig+0x21c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d04a      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a38      	ldr	r2, [pc, #224]	; (80074c0 <DMA_SetConfig+0x220>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d045      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a36      	ldr	r2, [pc, #216]	; (80074c4 <DMA_SetConfig+0x224>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d040      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a35      	ldr	r2, [pc, #212]	; (80074c8 <DMA_SetConfig+0x228>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d03b      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a33      	ldr	r2, [pc, #204]	; (80074cc <DMA_SetConfig+0x22c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d036      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <DMA_SetConfig+0x230>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d031      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <DMA_SetConfig+0x234>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d02c      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <DMA_SetConfig+0x238>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d027      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <DMA_SetConfig+0x23c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2c      	ldr	r2, [pc, #176]	; (80074e0 <DMA_SetConfig+0x240>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01d      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <DMA_SetConfig+0x244>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <DMA_SetConfig+0x248>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a27      	ldr	r2, [pc, #156]	; (80074ec <DMA_SetConfig+0x24c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a26      	ldr	r2, [pc, #152]	; (80074f0 <DMA_SetConfig+0x250>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a24      	ldr	r2, [pc, #144]	; (80074f4 <DMA_SetConfig+0x254>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a23      	ldr	r2, [pc, #140]	; (80074f8 <DMA_SetConfig+0x258>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d101      	bne.n	8007474 <DMA_SetConfig+0x1d4>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <DMA_SetConfig+0x1d6>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d059      	beq.n	800752e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747e:	f003 031f 	and.w	r3, r3, #31
 8007482:	223f      	movs	r2, #63	; 0x3f
 8007484:	409a      	lsls	r2, r3
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007498:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d138      	bne.n	800751c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074ba:	e0ae      	b.n	800761a <DMA_SetConfig+0x37a>
 80074bc:	40020010 	.word	0x40020010
 80074c0:	40020028 	.word	0x40020028
 80074c4:	40020040 	.word	0x40020040
 80074c8:	40020058 	.word	0x40020058
 80074cc:	40020070 	.word	0x40020070
 80074d0:	40020088 	.word	0x40020088
 80074d4:	400200a0 	.word	0x400200a0
 80074d8:	400200b8 	.word	0x400200b8
 80074dc:	40020410 	.word	0x40020410
 80074e0:	40020428 	.word	0x40020428
 80074e4:	40020440 	.word	0x40020440
 80074e8:	40020458 	.word	0x40020458
 80074ec:	40020470 	.word	0x40020470
 80074f0:	40020488 	.word	0x40020488
 80074f4:	400204a0 	.word	0x400204a0
 80074f8:	400204b8 	.word	0x400204b8
 80074fc:	58025408 	.word	0x58025408
 8007500:	5802541c 	.word	0x5802541c
 8007504:	58025430 	.word	0x58025430
 8007508:	58025444 	.word	0x58025444
 800750c:	58025458 	.word	0x58025458
 8007510:	5802546c 	.word	0x5802546c
 8007514:	58025480 	.word	0x58025480
 8007518:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]
}
 800752c:	e075      	b.n	800761a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a3d      	ldr	r2, [pc, #244]	; (8007628 <DMA_SetConfig+0x388>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d04a      	beq.n	80075ce <DMA_SetConfig+0x32e>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a3b      	ldr	r2, [pc, #236]	; (800762c <DMA_SetConfig+0x38c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d045      	beq.n	80075ce <DMA_SetConfig+0x32e>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a3a      	ldr	r2, [pc, #232]	; (8007630 <DMA_SetConfig+0x390>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d040      	beq.n	80075ce <DMA_SetConfig+0x32e>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a38      	ldr	r2, [pc, #224]	; (8007634 <DMA_SetConfig+0x394>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d03b      	beq.n	80075ce <DMA_SetConfig+0x32e>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a37      	ldr	r2, [pc, #220]	; (8007638 <DMA_SetConfig+0x398>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d036      	beq.n	80075ce <DMA_SetConfig+0x32e>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a35      	ldr	r2, [pc, #212]	; (800763c <DMA_SetConfig+0x39c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d031      	beq.n	80075ce <DMA_SetConfig+0x32e>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a34      	ldr	r2, [pc, #208]	; (8007640 <DMA_SetConfig+0x3a0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d02c      	beq.n	80075ce <DMA_SetConfig+0x32e>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a32      	ldr	r2, [pc, #200]	; (8007644 <DMA_SetConfig+0x3a4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d027      	beq.n	80075ce <DMA_SetConfig+0x32e>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a31      	ldr	r2, [pc, #196]	; (8007648 <DMA_SetConfig+0x3a8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d022      	beq.n	80075ce <DMA_SetConfig+0x32e>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2f      	ldr	r2, [pc, #188]	; (800764c <DMA_SetConfig+0x3ac>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01d      	beq.n	80075ce <DMA_SetConfig+0x32e>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a2e      	ldr	r2, [pc, #184]	; (8007650 <DMA_SetConfig+0x3b0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d018      	beq.n	80075ce <DMA_SetConfig+0x32e>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a2c      	ldr	r2, [pc, #176]	; (8007654 <DMA_SetConfig+0x3b4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <DMA_SetConfig+0x32e>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a2b      	ldr	r2, [pc, #172]	; (8007658 <DMA_SetConfig+0x3b8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00e      	beq.n	80075ce <DMA_SetConfig+0x32e>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a29      	ldr	r2, [pc, #164]	; (800765c <DMA_SetConfig+0x3bc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d009      	beq.n	80075ce <DMA_SetConfig+0x32e>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a28      	ldr	r2, [pc, #160]	; (8007660 <DMA_SetConfig+0x3c0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <DMA_SetConfig+0x32e>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a26      	ldr	r2, [pc, #152]	; (8007664 <DMA_SetConfig+0x3c4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d101      	bne.n	80075d2 <DMA_SetConfig+0x332>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <DMA_SetConfig+0x334>
 80075d2:	2300      	movs	r3, #0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	2201      	movs	r2, #1
 80075e2:	409a      	lsls	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d108      	bne.n	800760a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	60da      	str	r2, [r3, #12]
}
 8007608:	e007      	b.n	800761a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	48022c08 	.word	0x48022c08
 800762c:	48022c1c 	.word	0x48022c1c
 8007630:	48022c30 	.word	0x48022c30
 8007634:	48022c44 	.word	0x48022c44
 8007638:	48022c58 	.word	0x48022c58
 800763c:	48022c6c 	.word	0x48022c6c
 8007640:	48022c80 	.word	0x48022c80
 8007644:	48022c94 	.word	0x48022c94
 8007648:	58025408 	.word	0x58025408
 800764c:	5802541c 	.word	0x5802541c
 8007650:	58025430 	.word	0x58025430
 8007654:	58025444 	.word	0x58025444
 8007658:	58025458 	.word	0x58025458
 800765c:	5802546c 	.word	0x5802546c
 8007660:	58025480 	.word	0x58025480
 8007664:	58025494 	.word	0x58025494

08007668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a42      	ldr	r2, [pc, #264]	; (8007780 <DMA_CalcBaseAndBitshift+0x118>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d04a      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a41      	ldr	r2, [pc, #260]	; (8007784 <DMA_CalcBaseAndBitshift+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d045      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a3f      	ldr	r2, [pc, #252]	; (8007788 <DMA_CalcBaseAndBitshift+0x120>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d040      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a3e      	ldr	r2, [pc, #248]	; (800778c <DMA_CalcBaseAndBitshift+0x124>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d03b      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a3c      	ldr	r2, [pc, #240]	; (8007790 <DMA_CalcBaseAndBitshift+0x128>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d036      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a3b      	ldr	r2, [pc, #236]	; (8007794 <DMA_CalcBaseAndBitshift+0x12c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d031      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a39      	ldr	r2, [pc, #228]	; (8007798 <DMA_CalcBaseAndBitshift+0x130>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d02c      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a38      	ldr	r2, [pc, #224]	; (800779c <DMA_CalcBaseAndBitshift+0x134>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d027      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a36      	ldr	r2, [pc, #216]	; (80077a0 <DMA_CalcBaseAndBitshift+0x138>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d022      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a35      	ldr	r2, [pc, #212]	; (80077a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d01d      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a33      	ldr	r2, [pc, #204]	; (80077a8 <DMA_CalcBaseAndBitshift+0x140>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d018      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a32      	ldr	r2, [pc, #200]	; (80077ac <DMA_CalcBaseAndBitshift+0x144>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d013      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a30      	ldr	r2, [pc, #192]	; (80077b0 <DMA_CalcBaseAndBitshift+0x148>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d00e      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a2f      	ldr	r2, [pc, #188]	; (80077b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d009      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a2d      	ldr	r2, [pc, #180]	; (80077b8 <DMA_CalcBaseAndBitshift+0x150>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d004      	beq.n	8007710 <DMA_CalcBaseAndBitshift+0xa8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2c      	ldr	r2, [pc, #176]	; (80077bc <DMA_CalcBaseAndBitshift+0x154>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d101      	bne.n	8007714 <DMA_CalcBaseAndBitshift+0xac>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <DMA_CalcBaseAndBitshift+0xae>
 8007714:	2300      	movs	r3, #0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d024      	beq.n	8007764 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	3b10      	subs	r3, #16
 8007722:	4a27      	ldr	r2, [pc, #156]	; (80077c0 <DMA_CalcBaseAndBitshift+0x158>)
 8007724:	fba2 2303 	umull	r2, r3, r2, r3
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	4a24      	ldr	r2, [pc, #144]	; (80077c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007734:	5cd3      	ldrb	r3, [r2, r3]
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d908      	bls.n	8007754 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	4b1f      	ldr	r3, [pc, #124]	; (80077c8 <DMA_CalcBaseAndBitshift+0x160>)
 800774a:	4013      	ands	r3, r2
 800774c:	1d1a      	adds	r2, r3, #4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	659a      	str	r2, [r3, #88]	; 0x58
 8007752:	e00d      	b.n	8007770 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <DMA_CalcBaseAndBitshift+0x160>)
 800775c:	4013      	ands	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6593      	str	r3, [r2, #88]	; 0x58
 8007762:	e005      	b.n	8007770 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	40020010 	.word	0x40020010
 8007784:	40020028 	.word	0x40020028
 8007788:	40020040 	.word	0x40020040
 800778c:	40020058 	.word	0x40020058
 8007790:	40020070 	.word	0x40020070
 8007794:	40020088 	.word	0x40020088
 8007798:	400200a0 	.word	0x400200a0
 800779c:	400200b8 	.word	0x400200b8
 80077a0:	40020410 	.word	0x40020410
 80077a4:	40020428 	.word	0x40020428
 80077a8:	40020440 	.word	0x40020440
 80077ac:	40020458 	.word	0x40020458
 80077b0:	40020470 	.word	0x40020470
 80077b4:	40020488 	.word	0x40020488
 80077b8:	400204a0 	.word	0x400204a0
 80077bc:	400204b8 	.word	0x400204b8
 80077c0:	aaaaaaab 	.word	0xaaaaaaab
 80077c4:	08010588 	.word	0x08010588
 80077c8:	fffffc00 	.word	0xfffffc00

080077cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d120      	bne.n	8007822 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d858      	bhi.n	800789a <DMA_CheckFifoParam+0xce>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <DMA_CheckFifoParam+0x24>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007813 	.word	0x08007813
 80077f8:	08007801 	.word	0x08007801
 80077fc:	0800789b 	.word	0x0800789b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d048      	beq.n	800789e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007810:	e045      	b.n	800789e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800781a:	d142      	bne.n	80078a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007820:	e03f      	b.n	80078a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800782a:	d123      	bne.n	8007874 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	2b03      	cmp	r3, #3
 8007832:	d838      	bhi.n	80078a6 <DMA_CheckFifoParam+0xda>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <DMA_CheckFifoParam+0x70>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	0800784d 	.word	0x0800784d
 8007840:	08007853 	.word	0x08007853
 8007844:	0800784d 	.word	0x0800784d
 8007848:	08007865 	.word	0x08007865
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
        break;
 8007850:	e030      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d025      	beq.n	80078aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007862:	e022      	b.n	80078aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800786c:	d11f      	bne.n	80078ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007872:	e01c      	b.n	80078ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	2b02      	cmp	r3, #2
 800787a:	d902      	bls.n	8007882 <DMA_CheckFifoParam+0xb6>
 800787c:	2b03      	cmp	r3, #3
 800787e:	d003      	beq.n	8007888 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007880:	e018      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	73fb      	strb	r3, [r7, #15]
        break;
 8007886:	e015      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00e      	beq.n	80078b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	73fb      	strb	r3, [r7, #15]
    break;
 8007898:	e00b      	b.n	80078b2 <DMA_CheckFifoParam+0xe6>
        break;
 800789a:	bf00      	nop
 800789c:	e00a      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
        break;
 800789e:	bf00      	nop
 80078a0:	e008      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
        break;
 80078a2:	bf00      	nop
 80078a4:	e006      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
        break;
 80078a6:	bf00      	nop
 80078a8:	e004      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
        break;
 80078aa:	bf00      	nop
 80078ac:	e002      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
        break;
 80078ae:	bf00      	nop
 80078b0:	e000      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
    break;
 80078b2:	bf00      	nop
    }
  }

  return status;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop

080078c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a38      	ldr	r2, [pc, #224]	; (80079b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d022      	beq.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a36      	ldr	r2, [pc, #216]	; (80079bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01d      	beq.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a35      	ldr	r2, [pc, #212]	; (80079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d018      	beq.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a33      	ldr	r2, [pc, #204]	; (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a32      	ldr	r2, [pc, #200]	; (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00e      	beq.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a30      	ldr	r2, [pc, #192]	; (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d009      	beq.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a2f      	ldr	r2, [pc, #188]	; (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a2d      	ldr	r2, [pc, #180]	; (80079d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d101      	bne.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01a      	beq.n	8007962 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	3b08      	subs	r3, #8
 8007934:	4a28      	ldr	r2, [pc, #160]	; (80079d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007936:	fba2 2303 	umull	r2, r3, r2, r3
 800793a:	091b      	lsrs	r3, r3, #4
 800793c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4b26      	ldr	r3, [pc, #152]	; (80079dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a24      	ldr	r2, [pc, #144]	; (80079e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007950:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	2201      	movs	r2, #1
 800795a:	409a      	lsls	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007960:	e024      	b.n	80079ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	3b10      	subs	r3, #16
 800796a:	4a1e      	ldr	r2, [pc, #120]	; (80079e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	091b      	lsrs	r3, r3, #4
 8007972:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d806      	bhi.n	800798a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d902      	bls.n	800798a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3308      	adds	r3, #8
 8007988:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	461a      	mov	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a16      	ldr	r2, [pc, #88]	; (80079f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800799c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	2201      	movs	r2, #1
 80079a6:	409a      	lsls	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	58025408 	.word	0x58025408
 80079bc:	5802541c 	.word	0x5802541c
 80079c0:	58025430 	.word	0x58025430
 80079c4:	58025444 	.word	0x58025444
 80079c8:	58025458 	.word	0x58025458
 80079cc:	5802546c 	.word	0x5802546c
 80079d0:	58025480 	.word	0x58025480
 80079d4:	58025494 	.word	0x58025494
 80079d8:	cccccccd 	.word	0xcccccccd
 80079dc:	16009600 	.word	0x16009600
 80079e0:	58025880 	.word	0x58025880
 80079e4:	aaaaaaab 	.word	0xaaaaaaab
 80079e8:	400204b8 	.word	0x400204b8
 80079ec:	4002040f 	.word	0x4002040f
 80079f0:	10008200 	.word	0x10008200
 80079f4:	40020880 	.word	0x40020880

080079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d04a      	beq.n	8007aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d847      	bhi.n	8007aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d022      	beq.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a24      	ldr	r2, [pc, #144]	; (8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d01d      	beq.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d018      	beq.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a21      	ldr	r2, [pc, #132]	; (8007abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d009      	beq.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d101      	bne.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a15      	ldr	r2, [pc, #84]	; (8007ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a80:	671a      	str	r2, [r3, #112]	; 0x70
 8007a82:	e009      	b.n	8007a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a11      	ldr	r2, [pc, #68]	; (8007adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	58025408 	.word	0x58025408
 8007ab4:	5802541c 	.word	0x5802541c
 8007ab8:	58025430 	.word	0x58025430
 8007abc:	58025444 	.word	0x58025444
 8007ac0:	58025458 	.word	0x58025458
 8007ac4:	5802546c 	.word	0x5802546c
 8007ac8:	58025480 	.word	0x58025480
 8007acc:	58025494 	.word	0x58025494
 8007ad0:	1600963f 	.word	0x1600963f
 8007ad4:	58025940 	.word	0x58025940
 8007ad8:	1000823f 	.word	0x1000823f
 8007adc:	40020940 	.word	0x40020940

08007ae0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e04f      	b.n	8007b92 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7f8 ff10 	bl	800092c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b20      	ldr	r3, [pc, #128]	; (8007b9c <HAL_DMA2D_Init+0xbc>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6851      	ldr	r1, [r2, #4]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	69d2      	ldr	r2, [r2, #28]
 8007b26:	4311      	orrs	r1, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b36:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <HAL_DMA2D_Init+0xc0>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6891      	ldr	r1, [r2, #8]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6992      	ldr	r2, [r2, #24]
 8007b42:	4311      	orrs	r1, r2
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b52:	4b14      	ldr	r3, [pc, #80]	; (8007ba4 <HAL_DMA2D_Init+0xc4>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	68d1      	ldr	r1, [r2, #12]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b68:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	051a      	lsls	r2, r3, #20
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	055b      	lsls	r3, r3, #21
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	fff8ffbf 	.word	0xfff8ffbf
 8007ba0:	fffffef8 	.word	0xfffffef8
 8007ba4:	ffff0000 	.word	0xffff0000

08007ba8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_DMA2D_Start+0x1c>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e018      	b.n	8007bf6 <HAL_DMA2D_Start+0x4e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fab4 	bl	800814c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d056      	beq.n	8007cc8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c1a:	f7fc fc73 	bl	8004504 <HAL_GetTick>
 8007c1e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007c20:	e04b      	b.n	8007cba <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d023      	beq.n	8007c7c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c42:	f043 0202 	orr.w	r2, r3, #2
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c58:	f043 0201 	orr.w	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2221      	movs	r2, #33	; 0x21
 8007c66:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0a5      	b.n	8007dc8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c82:	d01a      	beq.n	8007cba <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c84:	f7fc fc3e 	bl	8004504 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d302      	bcc.n	8007c9a <HAL_DMA2D_PollForTransfer+0x9c>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10f      	bne.n	8007cba <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c9e:	f043 0220 	orr.w	r2, r3, #32
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e086      	b.n	8007dc8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0ac      	beq.n	8007c22 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d061      	beq.n	8007dae <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cea:	f7fc fc0b 	bl	8004504 <HAL_GetTick>
 8007cee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007cf0:	e056      	b.n	8007da0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02e      	beq.n	8007d62 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0308 	and.w	r3, r3, #8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d12:	f043 0204 	orr.w	r2, r3, #4
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d28:	f043 0202 	orr.w	r2, r3, #2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3e:	f043 0201 	orr.w	r2, r3, #1
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2229      	movs	r2, #41	; 0x29
 8007d4c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2204      	movs	r2, #4
 8007d52:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e032      	b.n	8007dc8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d68:	d01a      	beq.n	8007da0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d6a:	f7fc fbcb 	bl	8004504 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <HAL_DMA2D_PollForTransfer+0x182>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10f      	bne.n	8007da0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d84:	f043 0220 	orr.w	r2, r3, #32
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e013      	b.n	8007dc8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0a1      	beq.n	8007cf2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2212      	movs	r2, #18
 8007db4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d026      	beq.n	8007e40 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d021      	beq.n	8007e40 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e0a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e10:	f043 0201 	orr.w	r2, r3, #1
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2204      	movs	r2, #4
 8007e24:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d026      	beq.n	8007e98 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d021      	beq.n	8007e98 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e62:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e70:	f043 0202 	orr.w	r2, r3, #2
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d026      	beq.n	8007ef0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d021      	beq.n	8007ef0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec8:	f043 0204 	orr.w	r2, r3, #4
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d013      	beq.n	8007f22 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00e      	beq.n	8007f22 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2204      	movs	r2, #4
 8007f1a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f853 	bl	8007fc8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d024      	beq.n	8007f76 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01f      	beq.n	8007f76 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01f      	beq.n	8007fc0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01a      	beq.n	8007fc0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f98:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2210      	movs	r2, #16
 8007fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f80e 	bl	8007fdc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007fc0:	bf00      	nop
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800800c:	2b01      	cmp	r3, #1
 800800e:	d101      	bne.n	8008014 <HAL_DMA2D_ConfigLayer+0x24>
 8008010:	2302      	movs	r3, #2
 8008012:	e092      	b.n	800813a <HAL_DMA2D_ConfigLayer+0x14a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	4613      	mov	r3, r2
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	3328      	adds	r3, #40	; 0x28
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4413      	add	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	041b      	lsls	r3, r3, #16
 8008040:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008048:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008054:	4b3c      	ldr	r3, [pc, #240]	; (8008148 <HAL_DMA2D_ConfigLayer+0x158>)
 8008056:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b0a      	cmp	r3, #10
 800805e:	d003      	beq.n	8008068 <HAL_DMA2D_ConfigLayer+0x78>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	2b09      	cmp	r3, #9
 8008066:	d107      	bne.n	8008078 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	e005      	b.n	8008084 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	061b      	lsls	r3, r3, #24
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d120      	bne.n	80080cc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	43db      	mvns	r3, r3
 8008094:	ea02 0103 	and.w	r1, r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	430a      	orrs	r2, r1
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	6812      	ldr	r2, [r2, #0]
 80080aa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b0a      	cmp	r3, #10
 80080b2:	d003      	beq.n	80080bc <HAL_DMA2D_ConfigLayer+0xcc>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	d135      	bne.n	8008128 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80080c8:	629a      	str	r2, [r3, #40]	; 0x28
 80080ca:	e02d      	b.n	8008128 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b0b      	cmp	r3, #11
 80080d2:	d109      	bne.n	80080e8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	049b      	lsls	r3, r3, #18
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80080e6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69da      	ldr	r2, [r3, #28]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	43db      	mvns	r3, r3
 80080f2:	ea02 0103 	and.w	r1, r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b0a      	cmp	r3, #10
 8008110:	d003      	beq.n	800811a <HAL_DMA2D_ConfigLayer+0x12a>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	2b09      	cmp	r3, #9
 8008118:	d106      	bne.n	8008128 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008126:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	371c      	adds	r7, #28
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	ff33000f 	.word	0xff33000f

0800814c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800814c:	b480      	push	{r7}
 800814e:	b08b      	sub	sp, #44	; 0x2c
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008160:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	041a      	lsls	r2, r3, #16
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	431a      	orrs	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008184:	d174      	bne.n	8008270 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800818c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008194:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800819c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d108      	bne.n	80081be <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
 80081bc:	e053      	b.n	8008266 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d106      	bne.n	80081d4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
 80081d2:	e048      	b.n	8008266 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d111      	bne.n	8008200 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	0cdb      	lsrs	r3, r3, #19
 80081e0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	0a9b      	lsrs	r3, r3, #10
 80081e6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	08db      	lsrs	r3, r3, #3
 80081ec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	02db      	lsls	r3, r3, #11
 80081f6:	4313      	orrs	r3, r2
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
 80081fe:	e032      	b.n	8008266 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b03      	cmp	r3, #3
 8008206:	d117      	bne.n	8008238 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	0fdb      	lsrs	r3, r3, #31
 800820c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	0cdb      	lsrs	r3, r3, #19
 8008212:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	0adb      	lsrs	r3, r3, #11
 8008218:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	08db      	lsrs	r3, r3, #3
 800821e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	029b      	lsls	r3, r3, #10
 8008228:	431a      	orrs	r2, r3
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	03db      	lsls	r3, r3, #15
 800822e:	4313      	orrs	r3, r2
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
 8008236:	e016      	b.n	8008266 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	0f1b      	lsrs	r3, r3, #28
 800823c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	0d1b      	lsrs	r3, r3, #20
 8008242:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	0b1b      	lsrs	r3, r3, #12
 8008248:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	091b      	lsrs	r3, r3, #4
 800824e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	011a      	lsls	r2, r3, #4
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	431a      	orrs	r2, r3
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	031b      	lsls	r3, r3, #12
 800825e:	4313      	orrs	r3, r2
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800826e:	e00d      	b.n	800828c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008278:	d104      	bne.n	8008284 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	615a      	str	r2, [r3, #20]
}
 8008282:	e003      	b.n	800828c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	60da      	str	r2, [r3, #12]
}
 800828c:	bf00      	nop
 800828e:	372c      	adds	r7, #44	; 0x2c
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b80      	cmp	r3, #128	; 0x80
 80082b0:	d105      	bne.n	80082be <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e315      	b.n	80088ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e30e      	b.n	80088ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	f040 82fd 	bne.w	80088dc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2202      	movs	r2, #2
 80082e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a82      	ldr	r2, [pc, #520]	; (8008500 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d04a      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a81      	ldr	r2, [pc, #516]	; (8008504 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d045      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a7f      	ldr	r2, [pc, #508]	; (8008508 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d040      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a7e      	ldr	r2, [pc, #504]	; (800850c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d03b      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a7c      	ldr	r2, [pc, #496]	; (8008510 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d036      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a7b      	ldr	r2, [pc, #492]	; (8008514 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d031      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a79      	ldr	r2, [pc, #484]	; (8008518 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d02c      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a78      	ldr	r2, [pc, #480]	; (800851c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d027      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a76      	ldr	r2, [pc, #472]	; (8008520 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d022      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a75      	ldr	r2, [pc, #468]	; (8008524 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d01d      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a73      	ldr	r2, [pc, #460]	; (8008528 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d018      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a72      	ldr	r2, [pc, #456]	; (800852c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d013      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a70      	ldr	r2, [pc, #448]	; (8008530 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00e      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a6f      	ldr	r2, [pc, #444]	; (8008534 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d009      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a6d      	ldr	r2, [pc, #436]	; (8008538 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d004      	beq.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a6c      	ldr	r2, [pc, #432]	; (800853c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d101      	bne.n	8008394 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008394:	2300      	movs	r3, #0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d018      	beq.n	80083cc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083a8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b6:	3308      	adds	r3, #8
 80083b8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	223f      	movs	r2, #63	; 0x3f
 80083c4:	409a      	lsls	r2, r3
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	e018      	b.n	80083fe <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6819      	ldr	r1, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	f248 0320 	movw	r3, #32800	; 0x8020
 80083da:	430b      	orrs	r3, r1
 80083dc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ea:	3304      	adds	r3, #4
 80083ec:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f2:	f003 031f 	and.w	r3, r3, #31
 80083f6:	2201      	movs	r2, #1
 80083f8:	409a      	lsls	r2, r3
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fb41 	bl	8008a8c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a3c      	ldr	r2, [pc, #240]	; (8008500 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d072      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a3a      	ldr	r2, [pc, #232]	; (8008504 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d06d      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a39      	ldr	r2, [pc, #228]	; (8008508 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d068      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a37      	ldr	r2, [pc, #220]	; (800850c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d063      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a36      	ldr	r2, [pc, #216]	; (8008510 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d05e      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a34      	ldr	r2, [pc, #208]	; (8008514 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d059      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a33      	ldr	r2, [pc, #204]	; (8008518 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d054      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a31      	ldr	r2, [pc, #196]	; (800851c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d04f      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a30      	ldr	r2, [pc, #192]	; (8008520 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d04a      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a2e      	ldr	r2, [pc, #184]	; (8008524 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d045      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a2d      	ldr	r2, [pc, #180]	; (8008528 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d040      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a2b      	ldr	r2, [pc, #172]	; (800852c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d03b      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a2a      	ldr	r2, [pc, #168]	; (8008530 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d036      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a28      	ldr	r2, [pc, #160]	; (8008534 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d031      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a27      	ldr	r2, [pc, #156]	; (8008538 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d02c      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a25      	ldr	r2, [pc, #148]	; (800853c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d027      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a24      	ldr	r2, [pc, #144]	; (8008540 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d022      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a22      	ldr	r2, [pc, #136]	; (8008544 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d01d      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a21      	ldr	r2, [pc, #132]	; (8008548 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d018      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1f      	ldr	r2, [pc, #124]	; (800854c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1e      	ldr	r2, [pc, #120]	; (8008550 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00e      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1c      	ldr	r2, [pc, #112]	; (8008554 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1b      	ldr	r2, [pc, #108]	; (8008558 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d004      	beq.n	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a19      	ldr	r2, [pc, #100]	; (800855c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d132      	bne.n	8008560 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e031      	b.n	8008562 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80084fe:	bf00      	nop
 8008500:	40020010 	.word	0x40020010
 8008504:	40020028 	.word	0x40020028
 8008508:	40020040 	.word	0x40020040
 800850c:	40020058 	.word	0x40020058
 8008510:	40020070 	.word	0x40020070
 8008514:	40020088 	.word	0x40020088
 8008518:	400200a0 	.word	0x400200a0
 800851c:	400200b8 	.word	0x400200b8
 8008520:	40020410 	.word	0x40020410
 8008524:	40020428 	.word	0x40020428
 8008528:	40020440 	.word	0x40020440
 800852c:	40020458 	.word	0x40020458
 8008530:	40020470 	.word	0x40020470
 8008534:	40020488 	.word	0x40020488
 8008538:	400204a0 	.word	0x400204a0
 800853c:	400204b8 	.word	0x400204b8
 8008540:	58025408 	.word	0x58025408
 8008544:	5802541c 	.word	0x5802541c
 8008548:	58025430 	.word	0x58025430
 800854c:	58025444 	.word	0x58025444
 8008550:	58025458 	.word	0x58025458
 8008554:	5802546c 	.word	0x5802546c
 8008558:	58025480 	.word	0x58025480
 800855c:	58025494 	.word	0x58025494
 8008560:	2300      	movs	r3, #0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00d      	beq.n	8008582 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800856e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008580:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a3b      	ldr	r2, [pc, #236]	; (8008674 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d04a      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a39      	ldr	r2, [pc, #228]	; (8008678 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d045      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a38      	ldr	r2, [pc, #224]	; (800867c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d040      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a36      	ldr	r2, [pc, #216]	; (8008680 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d03b      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a35      	ldr	r2, [pc, #212]	; (8008684 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d036      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a33      	ldr	r2, [pc, #204]	; (8008688 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d031      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a32      	ldr	r2, [pc, #200]	; (800868c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d02c      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a30      	ldr	r2, [pc, #192]	; (8008690 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d027      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a2f      	ldr	r2, [pc, #188]	; (8008694 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d022      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a2d      	ldr	r2, [pc, #180]	; (8008698 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d01d      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a2c      	ldr	r2, [pc, #176]	; (800869c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d018      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d013      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00e      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a27      	ldr	r2, [pc, #156]	; (80086a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d009      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a26      	ldr	r2, [pc, #152]	; (80086ac <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d004      	beq.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a24      	ldr	r2, [pc, #144]	; (80086b0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d101      	bne.n	8008626 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008626:	2300      	movs	r3, #0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d043      	beq.n	80086b4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f023 021e 	bic.w	r2, r3, #30
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0216 	orr.w	r2, r2, #22
 800863e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695a      	ldr	r2, [r3, #20]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800864e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d103      	bne.n	8008660 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865c:	2b00      	cmp	r3, #0
 800865e:	d043      	beq.n	80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0208 	orr.w	r2, r2, #8
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	e03a      	b.n	80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008672:	bf00      	nop
 8008674:	40020010 	.word	0x40020010
 8008678:	40020028 	.word	0x40020028
 800867c:	40020040 	.word	0x40020040
 8008680:	40020058 	.word	0x40020058
 8008684:	40020070 	.word	0x40020070
 8008688:	40020088 	.word	0x40020088
 800868c:	400200a0 	.word	0x400200a0
 8008690:	400200b8 	.word	0x400200b8
 8008694:	40020410 	.word	0x40020410
 8008698:	40020428 	.word	0x40020428
 800869c:	40020440 	.word	0x40020440
 80086a0:	40020458 	.word	0x40020458
 80086a4:	40020470 	.word	0x40020470
 80086a8:	40020488 	.word	0x40020488
 80086ac:	400204a0 	.word	0x400204a0
 80086b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f023 020e 	bic.w	r2, r3, #14
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 020a 	orr.w	r2, r2, #10
 80086c6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d103      	bne.n	80086d8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0204 	orr.w	r2, r2, #4
 80086e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a81      	ldr	r2, [pc, #516]	; (80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d072      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a80      	ldr	r2, [pc, #512]	; (80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d06d      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a7e      	ldr	r2, [pc, #504]	; (80088fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d068      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a7d      	ldr	r2, [pc, #500]	; (8008900 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d063      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a7b      	ldr	r2, [pc, #492]	; (8008904 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d05e      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a7a      	ldr	r2, [pc, #488]	; (8008908 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d059      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a78      	ldr	r2, [pc, #480]	; (800890c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d054      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a77      	ldr	r2, [pc, #476]	; (8008910 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d04f      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a75      	ldr	r2, [pc, #468]	; (8008914 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d04a      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a74      	ldr	r2, [pc, #464]	; (8008918 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d045      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a72      	ldr	r2, [pc, #456]	; (800891c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d040      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a71      	ldr	r2, [pc, #452]	; (8008920 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d03b      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a6f      	ldr	r2, [pc, #444]	; (8008924 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d036      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a6e      	ldr	r2, [pc, #440]	; (8008928 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d031      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a6c      	ldr	r2, [pc, #432]	; (800892c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d02c      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a6b      	ldr	r2, [pc, #428]	; (8008930 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d027      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a69      	ldr	r2, [pc, #420]	; (8008934 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d022      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a68      	ldr	r2, [pc, #416]	; (8008938 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d01d      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a66      	ldr	r2, [pc, #408]	; (800893c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d018      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a65      	ldr	r2, [pc, #404]	; (8008940 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a63      	ldr	r2, [pc, #396]	; (8008944 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00e      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a62      	ldr	r2, [pc, #392]	; (8008948 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d009      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a60      	ldr	r2, [pc, #384]	; (800894c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d004      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a5f      	ldr	r2, [pc, #380]	; (8008950 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d101      	bne.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80087dc:	2300      	movs	r3, #0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01a      	beq.n	8008818 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d007      	beq.n	8008818 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008816:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a35      	ldr	r2, [pc, #212]	; (80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d04a      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a34      	ldr	r2, [pc, #208]	; (80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d045      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a32      	ldr	r2, [pc, #200]	; (80088fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d040      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a31      	ldr	r2, [pc, #196]	; (8008900 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d03b      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a2f      	ldr	r2, [pc, #188]	; (8008904 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d036      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a2e      	ldr	r2, [pc, #184]	; (8008908 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d031      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a2c      	ldr	r2, [pc, #176]	; (800890c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d02c      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2b      	ldr	r2, [pc, #172]	; (8008910 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d027      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a29      	ldr	r2, [pc, #164]	; (8008914 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d022      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a28      	ldr	r2, [pc, #160]	; (8008918 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d01d      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a26      	ldr	r2, [pc, #152]	; (800891c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d018      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a25      	ldr	r2, [pc, #148]	; (8008920 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d013      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a23      	ldr	r2, [pc, #140]	; (8008924 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00e      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a22      	ldr	r2, [pc, #136]	; (8008928 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d009      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a20      	ldr	r2, [pc, #128]	; (800892c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d004      	beq.n	80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a1f      	ldr	r2, [pc, #124]	; (8008930 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d108      	bne.n	80088ca <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	e00e      	b.n	80088e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f042 0201 	orr.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e005      	b.n	80088e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	40020010 	.word	0x40020010
 80088f8:	40020028 	.word	0x40020028
 80088fc:	40020040 	.word	0x40020040
 8008900:	40020058 	.word	0x40020058
 8008904:	40020070 	.word	0x40020070
 8008908:	40020088 	.word	0x40020088
 800890c:	400200a0 	.word	0x400200a0
 8008910:	400200b8 	.word	0x400200b8
 8008914:	40020410 	.word	0x40020410
 8008918:	40020428 	.word	0x40020428
 800891c:	40020440 	.word	0x40020440
 8008920:	40020458 	.word	0x40020458
 8008924:	40020470 	.word	0x40020470
 8008928:	40020488 	.word	0x40020488
 800892c:	400204a0 	.word	0x400204a0
 8008930:	400204b8 	.word	0x400204b8
 8008934:	58025408 	.word	0x58025408
 8008938:	5802541c 	.word	0x5802541c
 800893c:	58025430 	.word	0x58025430
 8008940:	58025444 	.word	0x58025444
 8008944:	58025458 	.word	0x58025458
 8008948:	5802546c 	.word	0x5802546c
 800894c:	58025480 	.word	0x58025480
 8008950:	58025494 	.word	0x58025494

08008954 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a39      	ldr	r2, [pc, #228]	; (8008a4c <HAL_DMAEx_ChangeMemory+0xf8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d04a      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a37      	ldr	r2, [pc, #220]	; (8008a50 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d045      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a36      	ldr	r2, [pc, #216]	; (8008a54 <HAL_DMAEx_ChangeMemory+0x100>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d040      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a34      	ldr	r2, [pc, #208]	; (8008a58 <HAL_DMAEx_ChangeMemory+0x104>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d03b      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a33      	ldr	r2, [pc, #204]	; (8008a5c <HAL_DMAEx_ChangeMemory+0x108>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d036      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a31      	ldr	r2, [pc, #196]	; (8008a60 <HAL_DMAEx_ChangeMemory+0x10c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d031      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a30      	ldr	r2, [pc, #192]	; (8008a64 <HAL_DMAEx_ChangeMemory+0x110>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d02c      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a2e      	ldr	r2, [pc, #184]	; (8008a68 <HAL_DMAEx_ChangeMemory+0x114>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d027      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a2d      	ldr	r2, [pc, #180]	; (8008a6c <HAL_DMAEx_ChangeMemory+0x118>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d022      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2b      	ldr	r2, [pc, #172]	; (8008a70 <HAL_DMAEx_ChangeMemory+0x11c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d01d      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a2a      	ldr	r2, [pc, #168]	; (8008a74 <HAL_DMAEx_ChangeMemory+0x120>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d018      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a28      	ldr	r2, [pc, #160]	; (8008a78 <HAL_DMAEx_ChangeMemory+0x124>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d013      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a27      	ldr	r2, [pc, #156]	; (8008a7c <HAL_DMAEx_ChangeMemory+0x128>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00e      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a25      	ldr	r2, [pc, #148]	; (8008a80 <HAL_DMAEx_ChangeMemory+0x12c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d009      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <HAL_DMAEx_ChangeMemory+0x130>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d004      	beq.n	8008a02 <HAL_DMAEx_ChangeMemory+0xae>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a22      	ldr	r2, [pc, #136]	; (8008a88 <HAL_DMAEx_ChangeMemory+0x134>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d101      	bne.n	8008a06 <HAL_DMAEx_ChangeMemory+0xb2>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <HAL_DMAEx_ChangeMemory+0xb4>
 8008a06:	2300      	movs	r3, #0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d104      	bne.n	8008a1c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	60da      	str	r2, [r3, #12]
 8008a1a:	e010      	b.n	8008a3e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	611a      	str	r2, [r3, #16]
 8008a24:	e00b      	b.n	8008a3e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	60da      	str	r2, [r3, #12]
 8008a34:	e003      	b.n	8008a3e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	40020010 	.word	0x40020010
 8008a50:	40020028 	.word	0x40020028
 8008a54:	40020040 	.word	0x40020040
 8008a58:	40020058 	.word	0x40020058
 8008a5c:	40020070 	.word	0x40020070
 8008a60:	40020088 	.word	0x40020088
 8008a64:	400200a0 	.word	0x400200a0
 8008a68:	400200b8 	.word	0x400200b8
 8008a6c:	40020410 	.word	0x40020410
 8008a70:	40020428 	.word	0x40020428
 8008a74:	40020440 	.word	0x40020440
 8008a78:	40020458 	.word	0x40020458
 8008a7c:	40020470 	.word	0x40020470
 8008a80:	40020488 	.word	0x40020488
 8008a84:	400204a0 	.word	0x400204a0
 8008a88:	400204b8 	.word	0x400204b8

08008a8c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a46      	ldr	r2, [pc, #280]	; (8008bb8 <DMA_MultiBufferSetConfig+0x12c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d04a      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a44      	ldr	r2, [pc, #272]	; (8008bbc <DMA_MultiBufferSetConfig+0x130>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d045      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a43      	ldr	r2, [pc, #268]	; (8008bc0 <DMA_MultiBufferSetConfig+0x134>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d040      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a41      	ldr	r2, [pc, #260]	; (8008bc4 <DMA_MultiBufferSetConfig+0x138>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d03b      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a40      	ldr	r2, [pc, #256]	; (8008bc8 <DMA_MultiBufferSetConfig+0x13c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d036      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a3e      	ldr	r2, [pc, #248]	; (8008bcc <DMA_MultiBufferSetConfig+0x140>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d031      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a3d      	ldr	r2, [pc, #244]	; (8008bd0 <DMA_MultiBufferSetConfig+0x144>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d02c      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a3b      	ldr	r2, [pc, #236]	; (8008bd4 <DMA_MultiBufferSetConfig+0x148>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d027      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a3a      	ldr	r2, [pc, #232]	; (8008bd8 <DMA_MultiBufferSetConfig+0x14c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d022      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a38      	ldr	r2, [pc, #224]	; (8008bdc <DMA_MultiBufferSetConfig+0x150>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d01d      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a37      	ldr	r2, [pc, #220]	; (8008be0 <DMA_MultiBufferSetConfig+0x154>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d018      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a35      	ldr	r2, [pc, #212]	; (8008be4 <DMA_MultiBufferSetConfig+0x158>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d013      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a34      	ldr	r2, [pc, #208]	; (8008be8 <DMA_MultiBufferSetConfig+0x15c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d00e      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a32      	ldr	r2, [pc, #200]	; (8008bec <DMA_MultiBufferSetConfig+0x160>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d009      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a31      	ldr	r2, [pc, #196]	; (8008bf0 <DMA_MultiBufferSetConfig+0x164>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d004      	beq.n	8008b3a <DMA_MultiBufferSetConfig+0xae>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a2f      	ldr	r2, [pc, #188]	; (8008bf4 <DMA_MultiBufferSetConfig+0x168>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d101      	bne.n	8008b3e <DMA_MultiBufferSetConfig+0xb2>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e000      	b.n	8008b40 <DMA_MultiBufferSetConfig+0xb4>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d019      	beq.n	8008b78 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b40      	cmp	r3, #64	; 0x40
 8008b52:	d108      	bne.n	8008b66 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008b64:	e021      	b.n	8008baa <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	60da      	str	r2, [r3, #12]
}
 8008b76:	e018      	b.n	8008baa <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2b40      	cmp	r3, #64	; 0x40
 8008b86:	d108      	bne.n	8008b9a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	60da      	str	r2, [r3, #12]
}
 8008b98:	e007      	b.n	8008baa <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	60da      	str	r2, [r3, #12]
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	40020010 	.word	0x40020010
 8008bbc:	40020028 	.word	0x40020028
 8008bc0:	40020040 	.word	0x40020040
 8008bc4:	40020058 	.word	0x40020058
 8008bc8:	40020070 	.word	0x40020070
 8008bcc:	40020088 	.word	0x40020088
 8008bd0:	400200a0 	.word	0x400200a0
 8008bd4:	400200b8 	.word	0x400200b8
 8008bd8:	40020410 	.word	0x40020410
 8008bdc:	40020428 	.word	0x40020428
 8008be0:	40020440 	.word	0x40020440
 8008be4:	40020458 	.word	0x40020458
 8008be8:	40020470 	.word	0x40020470
 8008bec:	40020488 	.word	0x40020488
 8008bf0:	400204a0 	.word	0x400204a0
 8008bf4:	400204b8 	.word	0x400204b8

08008bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b089      	sub	sp, #36	; 0x24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c06:	4b89      	ldr	r3, [pc, #548]	; (8008e2c <HAL_GPIO_Init+0x234>)
 8008c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c0a:	e194      	b.n	8008f36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	2101      	movs	r1, #1
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	fa01 f303 	lsl.w	r3, r1, r3
 8008c18:	4013      	ands	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8186 	beq.w	8008f30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d005      	beq.n	8008c3c <HAL_GPIO_Init+0x44>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d130      	bne.n	8008c9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	2203      	movs	r2, #3
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	4013      	ands	r3, r2
 8008c52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	68da      	ldr	r2, [r3, #12]
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c72:	2201      	movs	r2, #1
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	43db      	mvns	r3, r3
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	091b      	lsrs	r3, r3, #4
 8008c88:	f003 0201 	and.w	r2, r3, #1
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d017      	beq.n	8008cda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	2203      	movs	r2, #3
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d123      	bne.n	8008d2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	08da      	lsrs	r2, r3, #3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3208      	adds	r2, #8
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	220f      	movs	r2, #15
 8008cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008d02:	43db      	mvns	r3, r3
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	4013      	ands	r3, r2
 8008d08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	691a      	ldr	r2, [r3, #16]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	f003 0307 	and.w	r3, r3, #7
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	08da      	lsrs	r2, r3, #3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3208      	adds	r2, #8
 8008d28:	69b9      	ldr	r1, [r7, #24]
 8008d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	2203      	movs	r2, #3
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	43db      	mvns	r3, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4013      	ands	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f003 0203 	and.w	r2, r3, #3
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 80e0 	beq.w	8008f30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d70:	4b2f      	ldr	r3, [pc, #188]	; (8008e30 <HAL_GPIO_Init+0x238>)
 8008d72:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008d76:	4a2e      	ldr	r2, [pc, #184]	; (8008e30 <HAL_GPIO_Init+0x238>)
 8008d78:	f043 0302 	orr.w	r3, r3, #2
 8008d7c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008d80:	4b2b      	ldr	r3, [pc, #172]	; (8008e30 <HAL_GPIO_Init+0x238>)
 8008d82:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d8e:	4a29      	ldr	r2, [pc, #164]	; (8008e34 <HAL_GPIO_Init+0x23c>)
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	089b      	lsrs	r3, r3, #2
 8008d94:	3302      	adds	r3, #2
 8008d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	220f      	movs	r2, #15
 8008da6:	fa02 f303 	lsl.w	r3, r2, r3
 8008daa:	43db      	mvns	r3, r3
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	4013      	ands	r3, r2
 8008db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <HAL_GPIO_Init+0x240>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d052      	beq.n	8008e60 <HAL_GPIO_Init+0x268>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a1f      	ldr	r2, [pc, #124]	; (8008e3c <HAL_GPIO_Init+0x244>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d031      	beq.n	8008e26 <HAL_GPIO_Init+0x22e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <HAL_GPIO_Init+0x248>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d02b      	beq.n	8008e22 <HAL_GPIO_Init+0x22a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a1d      	ldr	r2, [pc, #116]	; (8008e44 <HAL_GPIO_Init+0x24c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d025      	beq.n	8008e1e <HAL_GPIO_Init+0x226>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a1c      	ldr	r2, [pc, #112]	; (8008e48 <HAL_GPIO_Init+0x250>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d01f      	beq.n	8008e1a <HAL_GPIO_Init+0x222>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a1b      	ldr	r2, [pc, #108]	; (8008e4c <HAL_GPIO_Init+0x254>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d019      	beq.n	8008e16 <HAL_GPIO_Init+0x21e>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1a      	ldr	r2, [pc, #104]	; (8008e50 <HAL_GPIO_Init+0x258>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d013      	beq.n	8008e12 <HAL_GPIO_Init+0x21a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <HAL_GPIO_Init+0x25c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00d      	beq.n	8008e0e <HAL_GPIO_Init+0x216>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <HAL_GPIO_Init+0x260>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d007      	beq.n	8008e0a <HAL_GPIO_Init+0x212>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <HAL_GPIO_Init+0x264>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d101      	bne.n	8008e06 <HAL_GPIO_Init+0x20e>
 8008e02:	2309      	movs	r3, #9
 8008e04:	e02d      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e06:	230a      	movs	r3, #10
 8008e08:	e02b      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e0a:	2308      	movs	r3, #8
 8008e0c:	e029      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e0e:	2307      	movs	r3, #7
 8008e10:	e027      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e12:	2306      	movs	r3, #6
 8008e14:	e025      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e16:	2305      	movs	r3, #5
 8008e18:	e023      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e1a:	2304      	movs	r3, #4
 8008e1c:	e021      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e01f      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e01d      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e01b      	b.n	8008e62 <HAL_GPIO_Init+0x26a>
 8008e2a:	bf00      	nop
 8008e2c:	58000080 	.word	0x58000080
 8008e30:	58024400 	.word	0x58024400
 8008e34:	58000400 	.word	0x58000400
 8008e38:	58020000 	.word	0x58020000
 8008e3c:	58020400 	.word	0x58020400
 8008e40:	58020800 	.word	0x58020800
 8008e44:	58020c00 	.word	0x58020c00
 8008e48:	58021000 	.word	0x58021000
 8008e4c:	58021400 	.word	0x58021400
 8008e50:	58021800 	.word	0x58021800
 8008e54:	58021c00 	.word	0x58021c00
 8008e58:	58022000 	.word	0x58022000
 8008e5c:	58022400 	.word	0x58022400
 8008e60:	2300      	movs	r3, #0
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	f002 0203 	and.w	r2, r2, #3
 8008e68:	0092      	lsls	r2, r2, #2
 8008e6a:	4093      	lsls	r3, r2
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e72:	4938      	ldr	r1, [pc, #224]	; (8008f54 <HAL_GPIO_Init+0x35c>)
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	089b      	lsrs	r3, r3, #2
 8008e78:	3302      	adds	r3, #2
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	43db      	mvns	r3, r3
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e9e:	69ba      	ldr	r2, [r7, #24]
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	43db      	mvns	r3, r3
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	4013      	ands	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	3301      	adds	r3, #1
 8008f34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f47f ae63 	bne.w	8008c0c <HAL_GPIO_Init+0x14>
  }
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	3724      	adds	r7, #36	; 0x24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	58000400 	.word	0x58000400

08008f58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f66:	4b75      	ldr	r3, [pc, #468]	; (800913c <HAL_GPIO_DeInit+0x1e4>)
 8008f68:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008f6a:	e0d9      	b.n	8009120 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	4013      	ands	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 80cc 	beq.w	800911a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008f82:	4a6f      	ldr	r2, [pc, #444]	; (8009140 <HAL_GPIO_DeInit+0x1e8>)
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	089b      	lsrs	r3, r3, #2
 8008f88:	3302      	adds	r3, #2
 8008f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f8e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	220f      	movs	r2, #15
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a67      	ldr	r2, [pc, #412]	; (8009144 <HAL_GPIO_DeInit+0x1ec>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d037      	beq.n	800901c <HAL_GPIO_DeInit+0xc4>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a66      	ldr	r2, [pc, #408]	; (8009148 <HAL_GPIO_DeInit+0x1f0>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d031      	beq.n	8009018 <HAL_GPIO_DeInit+0xc0>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a65      	ldr	r2, [pc, #404]	; (800914c <HAL_GPIO_DeInit+0x1f4>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d02b      	beq.n	8009014 <HAL_GPIO_DeInit+0xbc>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a64      	ldr	r2, [pc, #400]	; (8009150 <HAL_GPIO_DeInit+0x1f8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d025      	beq.n	8009010 <HAL_GPIO_DeInit+0xb8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a63      	ldr	r2, [pc, #396]	; (8009154 <HAL_GPIO_DeInit+0x1fc>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d01f      	beq.n	800900c <HAL_GPIO_DeInit+0xb4>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a62      	ldr	r2, [pc, #392]	; (8009158 <HAL_GPIO_DeInit+0x200>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d019      	beq.n	8009008 <HAL_GPIO_DeInit+0xb0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a61      	ldr	r2, [pc, #388]	; (800915c <HAL_GPIO_DeInit+0x204>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d013      	beq.n	8009004 <HAL_GPIO_DeInit+0xac>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a60      	ldr	r2, [pc, #384]	; (8009160 <HAL_GPIO_DeInit+0x208>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00d      	beq.n	8009000 <HAL_GPIO_DeInit+0xa8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a5f      	ldr	r2, [pc, #380]	; (8009164 <HAL_GPIO_DeInit+0x20c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d007      	beq.n	8008ffc <HAL_GPIO_DeInit+0xa4>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a5e      	ldr	r2, [pc, #376]	; (8009168 <HAL_GPIO_DeInit+0x210>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d101      	bne.n	8008ff8 <HAL_GPIO_DeInit+0xa0>
 8008ff4:	2309      	movs	r3, #9
 8008ff6:	e012      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8008ff8:	230a      	movs	r3, #10
 8008ffa:	e010      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8008ffc:	2308      	movs	r3, #8
 8008ffe:	e00e      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8009000:	2307      	movs	r3, #7
 8009002:	e00c      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8009004:	2306      	movs	r3, #6
 8009006:	e00a      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8009008:	2305      	movs	r3, #5
 800900a:	e008      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 800900c:	2304      	movs	r3, #4
 800900e:	e006      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8009010:	2303      	movs	r3, #3
 8009012:	e004      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8009014:	2302      	movs	r3, #2
 8009016:	e002      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <HAL_GPIO_DeInit+0xc6>
 800901c:	2300      	movs	r3, #0
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	f002 0203 	and.w	r2, r2, #3
 8009024:	0092      	lsls	r2, r2, #2
 8009026:	4093      	lsls	r3, r2
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	429a      	cmp	r2, r3
 800902c:	d136      	bne.n	800909c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	43db      	mvns	r3, r3
 8009036:	401a      	ands	r2, r3
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	43db      	mvns	r3, r3
 8009044:	401a      	ands	r2, r3
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800904a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	43db      	mvns	r3, r3
 8009054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009058:	4013      	ands	r3, r2
 800905a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800905c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	43db      	mvns	r3, r3
 8009066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800906a:	4013      	ands	r3, r2
 800906c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	220f      	movs	r2, #15
 8009078:	fa02 f303 	lsl.w	r3, r2, r3
 800907c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800907e:	4a30      	ldr	r2, [pc, #192]	; (8009140 <HAL_GPIO_DeInit+0x1e8>)
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	089b      	lsrs	r3, r3, #2
 8009084:	3302      	adds	r3, #2
 8009086:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	43da      	mvns	r2, r3
 800908e:	482c      	ldr	r0, [pc, #176]	; (8009140 <HAL_GPIO_DeInit+0x1e8>)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	400a      	ands	r2, r1
 8009096:	3302      	adds	r3, #2
 8009098:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	2103      	movs	r1, #3
 80090a6:	fa01 f303 	lsl.w	r3, r1, r3
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	08da      	lsrs	r2, r3, #3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3208      	adds	r2, #8
 80090b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	220f      	movs	r2, #15
 80090c6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ca:	43db      	mvns	r3, r3
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	08d2      	lsrs	r2, r2, #3
 80090d0:	4019      	ands	r1, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3208      	adds	r2, #8
 80090d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	2103      	movs	r1, #3
 80090e4:	fa01 f303 	lsl.w	r3, r1, r3
 80090e8:	43db      	mvns	r3, r3
 80090ea:	401a      	ands	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	2101      	movs	r1, #1
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	fa01 f303 	lsl.w	r3, r1, r3
 80090fc:	43db      	mvns	r3, r3
 80090fe:	401a      	ands	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	2103      	movs	r1, #3
 800910e:	fa01 f303 	lsl.w	r3, r1, r3
 8009112:	43db      	mvns	r3, r3
 8009114:	401a      	ands	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	609a      	str	r2, [r3, #8]
    }

    position++;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	3301      	adds	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	fa22 f303 	lsr.w	r3, r2, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	f47f af1f 	bne.w	8008f6c <HAL_GPIO_DeInit+0x14>
  }
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	58000080 	.word	0x58000080
 8009140:	58000400 	.word	0x58000400
 8009144:	58020000 	.word	0x58020000
 8009148:	58020400 	.word	0x58020400
 800914c:	58020800 	.word	0x58020800
 8009150:	58020c00 	.word	0x58020c00
 8009154:	58021000 	.word	0x58021000
 8009158:	58021400 	.word	0x58021400
 800915c:	58021800 	.word	0x58021800
 8009160:	58021c00 	.word	0x58021c00
 8009164:	58022000 	.word	0x58022000
 8009168:	58022400 	.word	0x58022400

0800916c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	807b      	strh	r3, [r7, #2]
 8009178:	4613      	mov	r3, r2
 800917a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800917c:	787b      	ldrb	r3, [r7, #1]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009182:	887a      	ldrh	r2, [r7, #2]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009188:	e003      	b.n	8009192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800918a:	887b      	ldrh	r3, [r7, #2]
 800918c:	041a      	lsls	r2, r3, #16
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	619a      	str	r2, [r3, #24]
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091b0:	887a      	ldrh	r2, [r7, #2]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4013      	ands	r3, r2
 80091b6:	041a      	lsls	r2, r3, #16
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	43d9      	mvns	r1, r3
 80091bc:	887b      	ldrh	r3, [r7, #2]
 80091be:	400b      	ands	r3, r1
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	619a      	str	r2, [r3, #24]
}
 80091c6:	bf00      	nop
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e07f      	b.n	80092e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f8a9 	bl	8009352 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2224      	movs	r2, #36	; 0x24
 8009204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0201 	bic.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009224:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009234:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d107      	bne.n	800924e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800924a:	609a      	str	r2, [r3, #8]
 800924c:	e006      	b.n	800925c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800925a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d104      	bne.n	800926e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800926c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6859      	ldr	r1, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	4b1d      	ldr	r3, [pc, #116]	; (80092f0 <HAL_I2C_Init+0x11c>)
 800927a:	430b      	orrs	r3, r1
 800927c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68da      	ldr	r2, [r3, #12]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800928c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	69d9      	ldr	r1, [r3, #28]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a1a      	ldr	r2, [r3, #32]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0201 	orr.w	r2, r2, #1
 80092c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	02008000 	.word	0x02008000

080092f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e021      	b.n	800934a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2224      	movs	r2, #36	; 0x24
 800930a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f821 	bl	8009366 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800936e:	bf00      	nop
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	4608      	mov	r0, r1
 8009386:	4611      	mov	r1, r2
 8009388:	461a      	mov	r2, r3
 800938a:	4603      	mov	r3, r0
 800938c:	817b      	strh	r3, [r7, #10]
 800938e:	460b      	mov	r3, r1
 8009390:	813b      	strh	r3, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b20      	cmp	r3, #32
 80093a0:	f040 80f9 	bne.w	8009596 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <HAL_I2C_Mem_Write+0x34>
 80093aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d105      	bne.n	80093bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e0ed      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_I2C_Mem_Write+0x4e>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e0e6      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093d2:	f7fb f897 	bl	8004504 <HAL_GetTick>
 80093d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	2319      	movs	r3, #25
 80093de:	2201      	movs	r2, #1
 80093e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fadd 	bl	80099a4 <I2C_WaitOnFlagUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e0d1      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2221      	movs	r2, #33	; 0x21
 80093f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2240      	movs	r2, #64	; 0x40
 8009400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a3a      	ldr	r2, [r7, #32]
 800940e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800941c:	88f8      	ldrh	r0, [r7, #6]
 800941e:	893a      	ldrh	r2, [r7, #8]
 8009420:	8979      	ldrh	r1, [r7, #10]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4603      	mov	r3, r0
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f9ed 	bl	800980c <I2C_RequestMemoryWrite>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e0a9      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009448:	b29b      	uxth	r3, r3
 800944a:	2bff      	cmp	r3, #255	; 0xff
 800944c:	d90e      	bls.n	800946c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	22ff      	movs	r2, #255	; 0xff
 8009452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009458:	b2da      	uxtb	r2, r3
 800945a:	8979      	ldrh	r1, [r7, #10]
 800945c:	2300      	movs	r3, #0
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 fc57 	bl	8009d18 <I2C_TransferConfig>
 800946a:	e00f      	b.n	800948c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009470:	b29a      	uxth	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947a:	b2da      	uxtb	r2, r3
 800947c:	8979      	ldrh	r1, [r7, #10]
 800947e:	2300      	movs	r3, #0
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 fc46 	bl	8009d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 fad6 	bl	8009a42 <I2C_WaitOnTXISFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e07b      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	781a      	ldrb	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	3b01      	subs	r3, #1
 80094be:	b29a      	uxth	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d034      	beq.n	8009544 <HAL_I2C_Mem_Write+0x1c8>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d130      	bne.n	8009544 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e8:	2200      	movs	r2, #0
 80094ea:	2180      	movs	r1, #128	; 0x80
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fa59 	bl	80099a4 <I2C_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e04d      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009500:	b29b      	uxth	r3, r3
 8009502:	2bff      	cmp	r3, #255	; 0xff
 8009504:	d90e      	bls.n	8009524 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	22ff      	movs	r2, #255	; 0xff
 800950a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009510:	b2da      	uxtb	r2, r3
 8009512:	8979      	ldrh	r1, [r7, #10]
 8009514:	2300      	movs	r3, #0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 fbfb 	bl	8009d18 <I2C_TransferConfig>
 8009522:	e00f      	b.n	8009544 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009532:	b2da      	uxtb	r2, r3
 8009534:	8979      	ldrh	r1, [r7, #10]
 8009536:	2300      	movs	r3, #0
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fbea 	bl	8009d18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d19e      	bne.n	800948c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 fabc 	bl	8009ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e01a      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2220      	movs	r2, #32
 8009568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6859      	ldr	r1, [r3, #4]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <HAL_I2C_Mem_Write+0x224>)
 8009576:	400b      	ands	r3, r1
 8009578:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2220      	movs	r2, #32
 800957e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	e000      	b.n	8009598 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009596:	2302      	movs	r3, #2
  }
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	fe00e800 	.word	0xfe00e800

080095a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	461a      	mov	r2, r3
 80095b2:	4603      	mov	r3, r0
 80095b4:	817b      	strh	r3, [r7, #10]
 80095b6:	460b      	mov	r3, r1
 80095b8:	813b      	strh	r3, [r7, #8]
 80095ba:	4613      	mov	r3, r2
 80095bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	f040 80fd 	bne.w	80097c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_I2C_Mem_Read+0x34>
 80095d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d105      	bne.n	80095e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0f1      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_I2C_Mem_Read+0x4e>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e0ea      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80095fa:	f7fa ff83 	bl	8004504 <HAL_GetTick>
 80095fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	2319      	movs	r3, #25
 8009606:	2201      	movs	r2, #1
 8009608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f9c9 	bl	80099a4 <I2C_WaitOnFlagUntilTimeout>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e0d5      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2222      	movs	r2, #34	; 0x22
 8009620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6a3a      	ldr	r2, [r7, #32]
 8009636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800963c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009644:	88f8      	ldrh	r0, [r7, #6]
 8009646:	893a      	ldrh	r2, [r7, #8]
 8009648:	8979      	ldrh	r1, [r7, #10]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	4603      	mov	r3, r0
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 f92d 	bl	80098b4 <I2C_RequestMemoryRead>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d005      	beq.n	800966c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e0ad      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009670:	b29b      	uxth	r3, r3
 8009672:	2bff      	cmp	r3, #255	; 0xff
 8009674:	d90e      	bls.n	8009694 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	22ff      	movs	r2, #255	; 0xff
 800967a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009680:	b2da      	uxtb	r2, r3
 8009682:	8979      	ldrh	r1, [r7, #10]
 8009684:	4b52      	ldr	r3, [pc, #328]	; (80097d0 <HAL_I2C_Mem_Read+0x22c>)
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fb43 	bl	8009d18 <I2C_TransferConfig>
 8009692:	e00f      	b.n	80096b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009698:	b29a      	uxth	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	8979      	ldrh	r1, [r7, #10]
 80096a6:	4b4a      	ldr	r3, [pc, #296]	; (80097d0 <HAL_I2C_Mem_Read+0x22c>)
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 fb32 	bl	8009d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	2200      	movs	r2, #0
 80096bc:	2104      	movs	r1, #4
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 f970 	bl	80099a4 <I2C_WaitOnFlagUntilTimeout>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e07c      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009704:	b29b      	uxth	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d034      	beq.n	8009774 <HAL_I2C_Mem_Read+0x1d0>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800970e:	2b00      	cmp	r3, #0
 8009710:	d130      	bne.n	8009774 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	2200      	movs	r2, #0
 800971a:	2180      	movs	r1, #128	; 0x80
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 f941 	bl	80099a4 <I2C_WaitOnFlagUntilTimeout>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e04d      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009730:	b29b      	uxth	r3, r3
 8009732:	2bff      	cmp	r3, #255	; 0xff
 8009734:	d90e      	bls.n	8009754 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	22ff      	movs	r2, #255	; 0xff
 800973a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009740:	b2da      	uxtb	r2, r3
 8009742:	8979      	ldrh	r1, [r7, #10]
 8009744:	2300      	movs	r3, #0
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 fae3 	bl	8009d18 <I2C_TransferConfig>
 8009752:	e00f      	b.n	8009774 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009758:	b29a      	uxth	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009762:	b2da      	uxtb	r2, r3
 8009764:	8979      	ldrh	r1, [r7, #10]
 8009766:	2300      	movs	r3, #0
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fad2 	bl	8009d18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d19a      	bne.n	80096b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f9a4 	bl	8009ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e01a      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2220      	movs	r2, #32
 8009798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6859      	ldr	r1, [r3, #4]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <HAL_I2C_Mem_Read+0x230>)
 80097a6:	400b      	ands	r3, r1
 80097a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	e000      	b.n	80097c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80097c6:	2302      	movs	r3, #2
  }
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	80002400 	.word	0x80002400
 80097d4:	fe00e800 	.word	0xfe00e800

080097d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e6:	b2db      	uxtb	r3, r3
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af02      	add	r7, sp, #8
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	4608      	mov	r0, r1
 8009816:	4611      	mov	r1, r2
 8009818:	461a      	mov	r2, r3
 800981a:	4603      	mov	r3, r0
 800981c:	817b      	strh	r3, [r7, #10]
 800981e:	460b      	mov	r3, r1
 8009820:	813b      	strh	r3, [r7, #8]
 8009822:	4613      	mov	r3, r2
 8009824:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009826:	88fb      	ldrh	r3, [r7, #6]
 8009828:	b2da      	uxtb	r2, r3
 800982a:	8979      	ldrh	r1, [r7, #10]
 800982c:	4b20      	ldr	r3, [pc, #128]	; (80098b0 <I2C_RequestMemoryWrite+0xa4>)
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 fa6f 	bl	8009d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	69b9      	ldr	r1, [r7, #24]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f8ff 	bl	8009a42 <I2C_WaitOnTXISFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e02c      	b.n	80098a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800984e:	88fb      	ldrh	r3, [r7, #6]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d105      	bne.n	8009860 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009854:	893b      	ldrh	r3, [r7, #8]
 8009856:	b2da      	uxtb	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	629a      	str	r2, [r3, #40]	; 0x28
 800985e:	e015      	b.n	800988c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009860:	893b      	ldrh	r3, [r7, #8]
 8009862:	0a1b      	lsrs	r3, r3, #8
 8009864:	b29b      	uxth	r3, r3
 8009866:	b2da      	uxtb	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	69b9      	ldr	r1, [r7, #24]
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f8e5 	bl	8009a42 <I2C_WaitOnTXISFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e012      	b.n	80098a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009882:	893b      	ldrh	r3, [r7, #8]
 8009884:	b2da      	uxtb	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	2200      	movs	r2, #0
 8009894:	2180      	movs	r1, #128	; 0x80
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 f884 	bl	80099a4 <I2C_WaitOnFlagUntilTimeout>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	80002000 	.word	0x80002000

080098b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	4608      	mov	r0, r1
 80098be:	4611      	mov	r1, r2
 80098c0:	461a      	mov	r2, r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	817b      	strh	r3, [r7, #10]
 80098c6:	460b      	mov	r3, r1
 80098c8:	813b      	strh	r3, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80098ce:	88fb      	ldrh	r3, [r7, #6]
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	8979      	ldrh	r1, [r7, #10]
 80098d4:	4b20      	ldr	r3, [pc, #128]	; (8009958 <I2C_RequestMemoryRead+0xa4>)
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	2300      	movs	r3, #0
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 fa1c 	bl	8009d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098e0:	69fa      	ldr	r2, [r7, #28]
 80098e2:	69b9      	ldr	r1, [r7, #24]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f8ac 	bl	8009a42 <I2C_WaitOnTXISFlagUntilTimeout>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e02c      	b.n	800994e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d105      	bne.n	8009906 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	629a      	str	r2, [r3, #40]	; 0x28
 8009904:	e015      	b.n	8009932 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009906:	893b      	ldrh	r3, [r7, #8]
 8009908:	0a1b      	lsrs	r3, r3, #8
 800990a:	b29b      	uxth	r3, r3
 800990c:	b2da      	uxtb	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009914:	69fa      	ldr	r2, [r7, #28]
 8009916:	69b9      	ldr	r1, [r7, #24]
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f892 	bl	8009a42 <I2C_WaitOnTXISFlagUntilTimeout>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e012      	b.n	800994e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009928:	893b      	ldrh	r3, [r7, #8]
 800992a:	b2da      	uxtb	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	2200      	movs	r2, #0
 800993a:	2140      	movs	r1, #64	; 0x40
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 f831 	bl	80099a4 <I2C_WaitOnFlagUntilTimeout>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e000      	b.n	800994e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	80002000 	.word	0x80002000

0800995c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b02      	cmp	r3, #2
 8009970:	d103      	bne.n	800997a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2200      	movs	r2, #0
 8009978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b01      	cmp	r3, #1
 8009986:	d007      	beq.n	8009998 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	619a      	str	r2, [r3, #24]
  }
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	4613      	mov	r3, r2
 80099b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099b4:	e031      	b.n	8009a1a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099bc:	d02d      	beq.n	8009a1a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099be:	f7fa fda1 	bl	8004504 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d302      	bcc.n	80099d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d122      	bne.n	8009a1a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	4013      	ands	r3, r2
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	bf0c      	ite	eq
 80099e4:	2301      	moveq	r3, #1
 80099e6:	2300      	movne	r3, #0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	461a      	mov	r2, r3
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d113      	bne.n	8009a1a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f6:	f043 0220 	orr.w	r2, r3, #32
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e00f      	b.n	8009a3a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	4013      	ands	r3, r2
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	bf0c      	ite	eq
 8009a2a:	2301      	moveq	r3, #1
 8009a2c:	2300      	movne	r3, #0
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d0be      	beq.n	80099b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a4e:	e033      	b.n	8009ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 f87f 	bl	8009b58 <I2C_IsErrorOccurred>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e031      	b.n	8009ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a6a:	d025      	beq.n	8009ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a6c:	f7fa fd4a 	bl	8004504 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d302      	bcc.n	8009a82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d11a      	bne.n	8009ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f003 0302 	and.w	r3, r3, #2
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d013      	beq.n	8009ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a94:	f043 0220 	orr.w	r2, r3, #32
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e007      	b.n	8009ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d1c4      	bne.n	8009a50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009adc:	e02f      	b.n	8009b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 f838 	bl	8009b58 <I2C_IsErrorOccurred>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e02d      	b.n	8009b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009af2:	f7fa fd07 	bl	8004504 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d302      	bcc.n	8009b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d11a      	bne.n	8009b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f003 0320 	and.w	r3, r3, #32
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	d013      	beq.n	8009b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1a:	f043 0220 	orr.w	r2, r3, #32
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e007      	b.n	8009b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	d1c8      	bne.n	8009ade <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	f003 0310 	and.w	r3, r3, #16
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d068      	beq.n	8009c56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2210      	movs	r2, #16
 8009b8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b8c:	e049      	b.n	8009c22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b94:	d045      	beq.n	8009c22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b96:	f7fa fcb5 	bl	8004504 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d302      	bcc.n	8009bac <I2C_IsErrorOccurred+0x54>
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d13a      	bne.n	8009c22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bce:	d121      	bne.n	8009c14 <I2C_IsErrorOccurred+0xbc>
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bd6:	d01d      	beq.n	8009c14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009bd8:	7cfb      	ldrb	r3, [r7, #19]
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	d01a      	beq.n	8009c14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009bee:	f7fa fc89 	bl	8004504 <HAL_GetTick>
 8009bf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bf4:	e00e      	b.n	8009c14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009bf6:	f7fa fc85 	bl	8004504 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	2b19      	cmp	r3, #25
 8009c02:	d907      	bls.n	8009c14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	f043 0320 	orr.w	r3, r3, #32
 8009c0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c12:	e006      	b.n	8009c22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d1e9      	bne.n	8009bf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f003 0320 	and.w	r3, r3, #32
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d003      	beq.n	8009c38 <I2C_IsErrorOccurred+0xe0>
 8009c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0aa      	beq.n	8009b8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d103      	bne.n	8009c48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2220      	movs	r2, #32
 8009c46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	f043 0304 	orr.w	r3, r3, #4
 8009c4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	f043 0301 	orr.w	r3, r3, #1
 8009c6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	f043 0308 	orr.w	r3, r3, #8
 8009c90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	f043 0302 	orr.w	r3, r3, #2
 8009cb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01c      	beq.n	8009d06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f7ff fe45 	bl	800995c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6859      	ldr	r1, [r3, #4]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <I2C_IsErrorOccurred+0x1bc>)
 8009cde:	400b      	ands	r3, r1
 8009ce0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3728      	adds	r7, #40	; 0x28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	fe00e800 	.word	0xfe00e800

08009d18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	607b      	str	r3, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	817b      	strh	r3, [r7, #10]
 8009d26:	4613      	mov	r3, r2
 8009d28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d2a:	897b      	ldrh	r3, [r7, #10]
 8009d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d30:	7a7b      	ldrb	r3, [r7, #9]
 8009d32:	041b      	lsls	r3, r3, #16
 8009d34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	0d5b      	lsrs	r3, r3, #21
 8009d52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d56:	4b08      	ldr	r3, [pc, #32]	; (8009d78 <I2C_TransferConfig+0x60>)
 8009d58:	430b      	orrs	r3, r1
 8009d5a:	43db      	mvns	r3, r3
 8009d5c:	ea02 0103 	and.w	r1, r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d6a:	bf00      	nop
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	03ff63ff 	.word	0x03ff63ff

08009d7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d138      	bne.n	8009e04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d101      	bne.n	8009da0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	e032      	b.n	8009e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2224      	movs	r2, #36	; 0x24
 8009dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0201 	bic.w	r2, r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6819      	ldr	r1, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0201 	orr.w	r2, r2, #1
 8009dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	e000      	b.n	8009e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e04:	2302      	movs	r3, #2
  }
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d139      	bne.n	8009e9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e033      	b.n	8009e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2224      	movs	r2, #36	; 0x24
 8009e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	021b      	lsls	r3, r3, #8
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0201 	orr.w	r2, r2, #1
 8009e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e000      	b.n	8009e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e9c:	2302      	movs	r3, #2
  }
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
	...

08009eac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e0bf      	b.n	800a03e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d106      	bne.n	8009ed8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7f7 fa2c 	bl	8001330 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699a      	ldr	r2, [r3, #24]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009eee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6999      	ldr	r1, [r3, #24]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6899      	ldr	r1, [r3, #8]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b4a      	ldr	r3, [pc, #296]	; (800a048 <HAL_LTDC_Init+0x19c>)
 8009f20:	400b      	ands	r3, r1
 8009f22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6899      	ldr	r1, [r3, #8]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	699a      	ldr	r2, [r3, #24]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68d9      	ldr	r1, [r3, #12]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4b3e      	ldr	r3, [pc, #248]	; (800a048 <HAL_LTDC_Init+0x19c>)
 8009f4e:	400b      	ands	r3, r1
 8009f50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	041b      	lsls	r3, r3, #16
 8009f58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68d9      	ldr	r1, [r3, #12]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1a      	ldr	r2, [r3, #32]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6919      	ldr	r1, [r3, #16]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	4b33      	ldr	r3, [pc, #204]	; (800a048 <HAL_LTDC_Init+0x19c>)
 8009f7c:	400b      	ands	r3, r1
 8009f7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	041b      	lsls	r3, r3, #16
 8009f86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6919      	ldr	r1, [r3, #16]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6959      	ldr	r1, [r3, #20]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	4b27      	ldr	r3, [pc, #156]	; (800a048 <HAL_LTDC_Init+0x19c>)
 8009faa:	400b      	ands	r3, r1
 8009fac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	041b      	lsls	r3, r3, #16
 8009fb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6959      	ldr	r1, [r3, #20]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	431a      	orrs	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009fdc:	041b      	lsls	r3, r3, #16
 8009fde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a002:	431a      	orrs	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	430a      	orrs	r2, r1
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0206 	orr.w	r2, r2, #6
 800a01a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699a      	ldr	r2, [r3, #24]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0201 	orr.w	r2, r2, #1
 800a02a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	f000f800 	.word	0xf000f800

0800a04c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a062:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d023      	beq.n	800a0b6 <HAL_LTDC_IRQHandler+0x6a>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f003 0304 	and.w	r3, r3, #4
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01e      	beq.n	800a0b6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f022 0204 	bic.w	r2, r2, #4
 800a086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2204      	movs	r2, #4
 800a08e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a096:	f043 0201 	orr.w	r2, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f86f 	bl	800a194 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f003 0302 	and.w	r3, r3, #2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d023      	beq.n	800a108 <HAL_LTDC_IRQHandler+0xbc>
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d01e      	beq.n	800a108 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0202 	bic.w	r2, r2, #2
 800a0d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a0e8:	f043 0202 	orr.w	r2, r3, #2
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2204      	movs	r2, #4
 800a0f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f846 	bl	800a194 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01b      	beq.n	800a14a <HAL_LTDC_IRQHandler+0xfe>
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d016      	beq.n	800a14a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0201 	bic.w	r2, r2, #1
 800a12a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2201      	movs	r2, #1
 800a132:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f82f 	bl	800a1a8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f003 0308 	and.w	r3, r3, #8
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01b      	beq.n	800a18c <HAL_LTDC_IRQHandler+0x140>
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f003 0308 	and.w	r3, r3, #8
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d016      	beq.n	800a18c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0208 	bic.w	r2, r2, #8
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2208      	movs	r2, #8
 800a174:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f818 	bl	800a1bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a18c:	bf00      	nop
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a1d0:	b5b0      	push	{r4, r5, r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d101      	bne.n	800a1ea <HAL_LTDC_ConfigLayer+0x1a>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	e02c      	b.n	800a244 <HAL_LTDC_ConfigLayer+0x74>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2134      	movs	r1, #52	; 0x34
 800a200:	fb01 f303 	mul.w	r3, r1, r3
 800a204:	4413      	add	r3, r2
 800a206:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4614      	mov	r4, r2
 800a20e:	461d      	mov	r5, r3
 800a210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a21a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f811 	bl	800a24c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2201      	movs	r2, #1
 800a230:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bdb0      	pop	{r4, r5, r7, pc}

0800a24c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b089      	sub	sp, #36	; 0x24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	0c1b      	lsrs	r3, r3, #16
 800a264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a268:	4413      	add	r3, r2
 800a26a:	041b      	lsls	r3, r3, #16
 800a26c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	01db      	lsls	r3, r3, #7
 800a278:	4413      	add	r3, r2
 800a27a:	3384      	adds	r3, #132	; 0x84
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	6812      	ldr	r2, [r2, #0]
 800a282:	4611      	mov	r1, r2
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	01d2      	lsls	r2, r2, #7
 800a288:	440a      	add	r2, r1
 800a28a:	3284      	adds	r2, #132	; 0x84
 800a28c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a290:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	0c1b      	lsrs	r3, r3, #16
 800a29e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a2a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a2a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	01db      	lsls	r3, r3, #7
 800a2b0:	440b      	add	r3, r1
 800a2b2:	3384      	adds	r3, #132	; 0x84
 800a2b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a2ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	68da      	ldr	r2, [r3, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2ca:	4413      	add	r3, r2
 800a2cc:	041b      	lsls	r3, r3, #16
 800a2ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	01db      	lsls	r3, r3, #7
 800a2da:	4413      	add	r3, r2
 800a2dc:	3384      	adds	r3, #132	; 0x84
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	6812      	ldr	r2, [r2, #0]
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	01d2      	lsls	r2, r2, #7
 800a2ea:	440a      	add	r2, r1
 800a2ec:	3284      	adds	r2, #132	; 0x84
 800a2ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a2f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a302:	4413      	add	r3, r2
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4619      	mov	r1, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	01db      	lsls	r3, r3, #7
 800a310:	440b      	add	r3, r1
 800a312:	3384      	adds	r3, #132	; 0x84
 800a314:	4619      	mov	r1, r3
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	4313      	orrs	r3, r2
 800a31a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	01db      	lsls	r3, r3, #7
 800a326:	4413      	add	r3, r2
 800a328:	3384      	adds	r3, #132	; 0x84
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	6812      	ldr	r2, [r2, #0]
 800a330:	4611      	mov	r1, r2
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	01d2      	lsls	r2, r2, #7
 800a336:	440a      	add	r2, r1
 800a338:	3284      	adds	r2, #132	; 0x84
 800a33a:	f023 0307 	bic.w	r3, r3, #7
 800a33e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	01db      	lsls	r3, r3, #7
 800a34a:	4413      	add	r3, r2
 800a34c:	3384      	adds	r3, #132	; 0x84
 800a34e:	461a      	mov	r2, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a366:	041b      	lsls	r3, r3, #16
 800a368:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	061b      	lsls	r3, r3, #24
 800a370:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	01db      	lsls	r3, r3, #7
 800a37c:	4413      	add	r3, r2
 800a37e:	3384      	adds	r3, #132	; 0x84
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	01db      	lsls	r3, r3, #7
 800a38c:	4413      	add	r3, r2
 800a38e:	3384      	adds	r3, #132	; 0x84
 800a390:	461a      	mov	r2, r3
 800a392:	2300      	movs	r3, #0
 800a394:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a39c:	461a      	mov	r2, r3
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	01db      	lsls	r3, r3, #7
 800a3b0:	440b      	add	r3, r1
 800a3b2:	3384      	adds	r3, #132	; 0x84
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	01db      	lsls	r3, r3, #7
 800a3c6:	4413      	add	r3, r2
 800a3c8:	3384      	adds	r3, #132	; 0x84
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	6812      	ldr	r2, [r2, #0]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	01d2      	lsls	r2, r2, #7
 800a3d6:	440a      	add	r2, r1
 800a3d8:	3284      	adds	r2, #132	; 0x84
 800a3da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	01db      	lsls	r3, r3, #7
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3384      	adds	r3, #132	; 0x84
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	01db      	lsls	r3, r3, #7
 800a400:	4413      	add	r3, r2
 800a402:	3384      	adds	r3, #132	; 0x84
 800a404:	69da      	ldr	r2, [r3, #28]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4619      	mov	r1, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	01db      	lsls	r3, r3, #7
 800a410:	440b      	add	r3, r1
 800a412:	3384      	adds	r3, #132	; 0x84
 800a414:	4619      	mov	r1, r3
 800a416:	4b58      	ldr	r3, [pc, #352]	; (800a578 <LTDC_SetConfig+0x32c>)
 800a418:	4013      	ands	r3, r2
 800a41a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	69da      	ldr	r2, [r3, #28]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	6a1b      	ldr	r3, [r3, #32]
 800a424:	68f9      	ldr	r1, [r7, #12]
 800a426:	6809      	ldr	r1, [r1, #0]
 800a428:	4608      	mov	r0, r1
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	01c9      	lsls	r1, r1, #7
 800a42e:	4401      	add	r1, r0
 800a430:	3184      	adds	r1, #132	; 0x84
 800a432:	4313      	orrs	r3, r2
 800a434:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	01db      	lsls	r3, r3, #7
 800a440:	4413      	add	r3, r2
 800a442:	3384      	adds	r3, #132	; 0x84
 800a444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	01db      	lsls	r3, r3, #7
 800a450:	4413      	add	r3, r2
 800a452:	3384      	adds	r3, #132	; 0x84
 800a454:	461a      	mov	r2, r3
 800a456:	2300      	movs	r3, #0
 800a458:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	01db      	lsls	r3, r3, #7
 800a464:	4413      	add	r3, r2
 800a466:	3384      	adds	r3, #132	; 0x84
 800a468:	461a      	mov	r2, r3
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a478:	2304      	movs	r3, #4
 800a47a:	61fb      	str	r3, [r7, #28]
 800a47c:	e01b      	b.n	800a4b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d102      	bne.n	800a48c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a486:	2303      	movs	r3, #3
 800a488:	61fb      	str	r3, [r7, #28]
 800a48a:	e014      	b.n	800a4b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	2b04      	cmp	r3, #4
 800a492:	d00b      	beq.n	800a4ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d007      	beq.n	800a4ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d003      	beq.n	800a4ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a4a8:	2b07      	cmp	r3, #7
 800a4aa:	d102      	bne.n	800a4b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	61fb      	str	r3, [r7, #28]
 800a4b0:	e001      	b.n	800a4b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	01db      	lsls	r3, r3, #7
 800a4c0:	4413      	add	r3, r2
 800a4c2:	3384      	adds	r3, #132	; 0x84
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	6812      	ldr	r2, [r2, #0]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	01d2      	lsls	r2, r2, #7
 800a4d0:	440a      	add	r2, r1
 800a4d2:	3284      	adds	r2, #132	; 0x84
 800a4d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a4d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4de:	69fa      	ldr	r2, [r7, #28]
 800a4e0:	fb02 f303 	mul.w	r3, r2, r3
 800a4e4:	041a      	lsls	r2, r3, #16
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6859      	ldr	r1, [r3, #4]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	1acb      	subs	r3, r1, r3
 800a4f0:	69f9      	ldr	r1, [r7, #28]
 800a4f2:	fb01 f303 	mul.w	r3, r1, r3
 800a4f6:	3307      	adds	r3, #7
 800a4f8:	68f9      	ldr	r1, [r7, #12]
 800a4fa:	6809      	ldr	r1, [r1, #0]
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	01c9      	lsls	r1, r1, #7
 800a502:	4401      	add	r1, r0
 800a504:	3184      	adds	r1, #132	; 0x84
 800a506:	4313      	orrs	r3, r2
 800a508:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	01db      	lsls	r3, r3, #7
 800a514:	4413      	add	r3, r2
 800a516:	3384      	adds	r3, #132	; 0x84
 800a518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4619      	mov	r1, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	01db      	lsls	r3, r3, #7
 800a524:	440b      	add	r3, r1
 800a526:	3384      	adds	r3, #132	; 0x84
 800a528:	4619      	mov	r1, r3
 800a52a:	4b14      	ldr	r3, [pc, #80]	; (800a57c <LTDC_SetConfig+0x330>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	01db      	lsls	r3, r3, #7
 800a53a:	4413      	add	r3, r2
 800a53c:	3384      	adds	r3, #132	; 0x84
 800a53e:	461a      	mov	r2, r3
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a544:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	01db      	lsls	r3, r3, #7
 800a550:	4413      	add	r3, r2
 800a552:	3384      	adds	r3, #132	; 0x84
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	4611      	mov	r1, r2
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	01d2      	lsls	r2, r2, #7
 800a560:	440a      	add	r2, r1
 800a562:	3284      	adds	r2, #132	; 0x84
 800a564:	f043 0301 	orr.w	r3, r3, #1
 800a568:	6013      	str	r3, [r2, #0]
}
 800a56a:	bf00      	nop
 800a56c:	3724      	adds	r7, #36	; 0x24
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	fffff8f8 	.word	0xfffff8f8
 800a57c:	fffff800 	.word	0xfffff800

0800a580 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a04      	ldr	r2, [pc, #16]	; (800a59c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a58a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a58e:	6013      	str	r3, [r2, #0]
}
 800a590:	bf00      	nop
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	58024800 	.word	0x58024800

0800a5a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a5a8:	4b29      	ldr	r3, [pc, #164]	; (800a650 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f003 0307 	and.w	r3, r3, #7
 800a5b0:	2b06      	cmp	r3, #6
 800a5b2:	d00a      	beq.n	800a5ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a5b4:	4b26      	ldr	r3, [pc, #152]	; (800a650 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d001      	beq.n	800a5c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e040      	b.n	800a648 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e03e      	b.n	800a648 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a5ca:	4b21      	ldr	r3, [pc, #132]	; (800a650 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a5d2:	491f      	ldr	r1, [pc, #124]	; (800a650 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a5da:	f7f9 ff93 	bl	8004504 <HAL_GetTick>
 800a5de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5e0:	e009      	b.n	800a5f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a5e2:	f7f9 ff8f 	bl	8004504 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5f0:	d901      	bls.n	800a5f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e028      	b.n	800a648 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5f6:	4b16      	ldr	r3, [pc, #88]	; (800a650 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a602:	d1ee      	bne.n	800a5e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b1e      	cmp	r3, #30
 800a608:	d008      	beq.n	800a61c <HAL_PWREx_ConfigSupply+0x7c>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b2e      	cmp	r3, #46	; 0x2e
 800a60e:	d005      	beq.n	800a61c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b1d      	cmp	r3, #29
 800a614:	d002      	beq.n	800a61c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b2d      	cmp	r3, #45	; 0x2d
 800a61a:	d114      	bne.n	800a646 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a61c:	f7f9 ff72 	bl	8004504 <HAL_GetTick>
 800a620:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a622:	e009      	b.n	800a638 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a624:	f7f9 ff6e 	bl	8004504 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a632:	d901      	bls.n	800a638 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e007      	b.n	800a648 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <HAL_PWREx_ConfigSupply+0xb0>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a644:	d1ee      	bne.n	800a624 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	58024800 	.word	0x58024800

0800a654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08c      	sub	sp, #48	; 0x30
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	f000 bc1f 	b.w	800aea6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 80b3 	beq.w	800a7dc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a676:	4b95      	ldr	r3, [pc, #596]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a680:	4b92      	ldr	r3, [pc, #584]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	2b10      	cmp	r3, #16
 800a68a:	d007      	beq.n	800a69c <HAL_RCC_OscConfig+0x48>
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	2b18      	cmp	r3, #24
 800a690:	d112      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x64>
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	f003 0303 	and.w	r3, r3, #3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d10d      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a69c:	4b8b      	ldr	r3, [pc, #556]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 8098 	beq.w	800a7da <HAL_RCC_OscConfig+0x186>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f040 8093 	bne.w	800a7da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e3f6      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6c0:	d106      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x7c>
 800a6c2:	4b82      	ldr	r3, [pc, #520]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a81      	ldr	r2, [pc, #516]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	e058      	b.n	800a782 <HAL_RCC_OscConfig+0x12e>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d112      	bne.n	800a6fe <HAL_RCC_OscConfig+0xaa>
 800a6d8:	4b7c      	ldr	r3, [pc, #496]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a7b      	ldr	r2, [pc, #492]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	4b79      	ldr	r3, [pc, #484]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a78      	ldr	r2, [pc, #480]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	4b76      	ldr	r3, [pc, #472]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a75      	ldr	r2, [pc, #468]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a6f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	e041      	b.n	800a782 <HAL_RCC_OscConfig+0x12e>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a706:	d112      	bne.n	800a72e <HAL_RCC_OscConfig+0xda>
 800a708:	4b70      	ldr	r3, [pc, #448]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a6f      	ldr	r2, [pc, #444]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a70e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	4b6d      	ldr	r3, [pc, #436]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a6c      	ldr	r2, [pc, #432]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a71a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	4b6a      	ldr	r3, [pc, #424]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a69      	ldr	r2, [pc, #420]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	e029      	b.n	800a782 <HAL_RCC_OscConfig+0x12e>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a736:	d112      	bne.n	800a75e <HAL_RCC_OscConfig+0x10a>
 800a738:	4b64      	ldr	r3, [pc, #400]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a63      	ldr	r2, [pc, #396]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a73e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	4b61      	ldr	r3, [pc, #388]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a60      	ldr	r2, [pc, #384]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a74a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	4b5e      	ldr	r3, [pc, #376]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a5d      	ldr	r2, [pc, #372]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	e011      	b.n	800a782 <HAL_RCC_OscConfig+0x12e>
 800a75e:	4b5b      	ldr	r3, [pc, #364]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a5a      	ldr	r2, [pc, #360]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	4b58      	ldr	r3, [pc, #352]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a57      	ldr	r2, [pc, #348]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	4b55      	ldr	r3, [pc, #340]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a54      	ldr	r2, [pc, #336]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a77c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a780:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d013      	beq.n	800a7b2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a78a:	f7f9 febb 	bl	8004504 <HAL_GetTick>
 800a78e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a790:	e008      	b.n	800a7a4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a792:	f7f9 feb7 	bl	8004504 <HAL_GetTick>
 800a796:	4602      	mov	r2, r0
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	2b64      	cmp	r3, #100	; 0x64
 800a79e:	d901      	bls.n	800a7a4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e380      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7a4:	4b49      	ldr	r3, [pc, #292]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d0f0      	beq.n	800a792 <HAL_RCC_OscConfig+0x13e>
 800a7b0:	e014      	b.n	800a7dc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b2:	f7f9 fea7 	bl	8004504 <HAL_GetTick>
 800a7b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7ba:	f7f9 fea3 	bl	8004504 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b64      	cmp	r3, #100	; 0x64
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e36c      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7cc:	4b3f      	ldr	r3, [pc, #252]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1f0      	bne.n	800a7ba <HAL_RCC_OscConfig+0x166>
 800a7d8:	e000      	b.n	800a7dc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 808c 	beq.w	800a902 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7ea:	4b38      	ldr	r3, [pc, #224]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7f4:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <HAL_RCC_OscConfig+0x1bc>
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	2b18      	cmp	r3, #24
 800a804:	d137      	bne.n	800a876 <HAL_RCC_OscConfig+0x222>
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	f003 0303 	and.w	r3, r3, #3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d132      	bne.n	800a876 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a810:	4b2e      	ldr	r3, [pc, #184]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d005      	beq.n	800a828 <HAL_RCC_OscConfig+0x1d4>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e33e      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a828:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f023 0219 	bic.w	r2, r3, #25
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	4925      	ldr	r1, [pc, #148]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a836:	4313      	orrs	r3, r2
 800a838:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a83a:	f7f9 fe63 	bl	8004504 <HAL_GetTick>
 800a83e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a840:	e008      	b.n	800a854 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a842:	f7f9 fe5f 	bl	8004504 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e328      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a854:	4b1d      	ldr	r3, [pc, #116]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0f0      	beq.n	800a842 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a860:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	061b      	lsls	r3, r3, #24
 800a86e:	4917      	ldr	r1, [pc, #92]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a870:	4313      	orrs	r3, r2
 800a872:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a874:	e045      	b.n	800a902 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d028      	beq.n	800a8d0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a87e:	4b13      	ldr	r3, [pc, #76]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f023 0219 	bic.w	r2, r3, #25
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	4910      	ldr	r1, [pc, #64]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a88c:	4313      	orrs	r3, r2
 800a88e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a890:	f7f9 fe38 	bl	8004504 <HAL_GetTick>
 800a894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a896:	e008      	b.n	800a8aa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a898:	f7f9 fe34 	bl	8004504 <HAL_GetTick>
 800a89c:	4602      	mov	r2, r0
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d901      	bls.n	800a8aa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e2fd      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8aa:	4b08      	ldr	r3, [pc, #32]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0304 	and.w	r3, r3, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0f0      	beq.n	800a898 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8b6:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	061b      	lsls	r3, r3, #24
 800a8c4:	4901      	ldr	r1, [pc, #4]	; (800a8cc <HAL_RCC_OscConfig+0x278>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	604b      	str	r3, [r1, #4]
 800a8ca:	e01a      	b.n	800a902 <HAL_RCC_OscConfig+0x2ae>
 800a8cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8d0:	4b97      	ldr	r3, [pc, #604]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a96      	ldr	r2, [pc, #600]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a8d6:	f023 0301 	bic.w	r3, r3, #1
 800a8da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8dc:	f7f9 fe12 	bl	8004504 <HAL_GetTick>
 800a8e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8e2:	e008      	b.n	800a8f6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8e4:	f7f9 fe0e 	bl	8004504 <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d901      	bls.n	800a8f6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e2d7      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8f6:	4b8e      	ldr	r3, [pc, #568]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1f0      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0310 	and.w	r3, r3, #16
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d06a      	beq.n	800a9e4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a90e:	4b88      	ldr	r3, [pc, #544]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a916:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a918:	4b85      	ldr	r3, [pc, #532]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2b08      	cmp	r3, #8
 800a922:	d007      	beq.n	800a934 <HAL_RCC_OscConfig+0x2e0>
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	2b18      	cmp	r3, #24
 800a928:	d11b      	bne.n	800a962 <HAL_RCC_OscConfig+0x30e>
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f003 0303 	and.w	r3, r3, #3
 800a930:	2b01      	cmp	r3, #1
 800a932:	d116      	bne.n	800a962 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a934:	4b7e      	ldr	r3, [pc, #504]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_RCC_OscConfig+0x2f8>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	2b80      	cmp	r3, #128	; 0x80
 800a946:	d001      	beq.n	800a94c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e2ac      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a94c:	4b78      	ldr	r3, [pc, #480]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	061b      	lsls	r3, r3, #24
 800a95a:	4975      	ldr	r1, [pc, #468]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a960:	e040      	b.n	800a9e4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d023      	beq.n	800a9b2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a96a:	4b71      	ldr	r3, [pc, #452]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a70      	ldr	r2, [pc, #448]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a976:	f7f9 fdc5 	bl	8004504 <HAL_GetTick>
 800a97a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a97c:	e008      	b.n	800a990 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a97e:	f7f9 fdc1 	bl	8004504 <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d901      	bls.n	800a990 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e28a      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a990:	4b67      	ldr	r3, [pc, #412]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0f0      	beq.n	800a97e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a99c:	4b64      	ldr	r3, [pc, #400]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	061b      	lsls	r3, r3, #24
 800a9aa:	4961      	ldr	r1, [pc, #388]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60cb      	str	r3, [r1, #12]
 800a9b0:	e018      	b.n	800a9e4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a9b2:	4b5f      	ldr	r3, [pc, #380]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a5e      	ldr	r2, [pc, #376]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a9b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9be:	f7f9 fda1 	bl	8004504 <HAL_GetTick>
 800a9c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9c4:	e008      	b.n	800a9d8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9c6:	f7f9 fd9d 	bl	8004504 <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d901      	bls.n	800a9d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e266      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9d8:	4b55      	ldr	r3, [pc, #340]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1f0      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0308 	and.w	r3, r3, #8
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d036      	beq.n	800aa5e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d019      	beq.n	800aa2c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9f8:	4b4d      	ldr	r3, [pc, #308]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a9fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9fc:	4a4c      	ldr	r2, [pc, #304]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800a9fe:	f043 0301 	orr.w	r3, r3, #1
 800aa02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa04:	f7f9 fd7e 	bl	8004504 <HAL_GetTick>
 800aa08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa0a:	e008      	b.n	800aa1e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa0c:	f7f9 fd7a 	bl	8004504 <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e243      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa1e:	4b44      	ldr	r3, [pc, #272]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aa20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0f0      	beq.n	800aa0c <HAL_RCC_OscConfig+0x3b8>
 800aa2a:	e018      	b.n	800aa5e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa2c:	4b40      	ldr	r3, [pc, #256]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aa2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa30:	4a3f      	ldr	r2, [pc, #252]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aa32:	f023 0301 	bic.w	r3, r3, #1
 800aa36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa38:	f7f9 fd64 	bl	8004504 <HAL_GetTick>
 800aa3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa3e:	e008      	b.n	800aa52 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa40:	f7f9 fd60 	bl	8004504 <HAL_GetTick>
 800aa44:	4602      	mov	r2, r0
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d901      	bls.n	800aa52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e229      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa52:	4b37      	ldr	r3, [pc, #220]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aa54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1f0      	bne.n	800aa40 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 0320 	and.w	r3, r3, #32
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d036      	beq.n	800aad8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d019      	beq.n	800aaa6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa72:	4b2f      	ldr	r3, [pc, #188]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a2e      	ldr	r2, [pc, #184]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aa78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa7e:	f7f9 fd41 	bl	8004504 <HAL_GetTick>
 800aa82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa84:	e008      	b.n	800aa98 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa86:	f7f9 fd3d 	bl	8004504 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d901      	bls.n	800aa98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e206      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa98:	4b25      	ldr	r3, [pc, #148]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d0f0      	beq.n	800aa86 <HAL_RCC_OscConfig+0x432>
 800aaa4:	e018      	b.n	800aad8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aaa6:	4b22      	ldr	r3, [pc, #136]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a21      	ldr	r2, [pc, #132]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aaac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aab0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aab2:	f7f9 fd27 	bl	8004504 <HAL_GetTick>
 800aab6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aab8:	e008      	b.n	800aacc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaba:	f7f9 fd23 	bl	8004504 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d901      	bls.n	800aacc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e1ec      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aacc:	4b18      	ldr	r3, [pc, #96]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1f0      	bne.n	800aaba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 80af 	beq.w	800ac44 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aae6:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <HAL_RCC_OscConfig+0x4e0>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a12      	ldr	r2, [pc, #72]	; (800ab34 <HAL_RCC_OscConfig+0x4e0>)
 800aaec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aaf2:	f7f9 fd07 	bl	8004504 <HAL_GetTick>
 800aaf6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aaf8:	e008      	b.n	800ab0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aafa:	f7f9 fd03 	bl	8004504 <HAL_GetTick>
 800aafe:	4602      	mov	r2, r0
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	2b64      	cmp	r3, #100	; 0x64
 800ab06:	d901      	bls.n	800ab0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e1cc      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab0c:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <HAL_RCC_OscConfig+0x4e0>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0f0      	beq.n	800aafa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10b      	bne.n	800ab38 <HAL_RCC_OscConfig+0x4e4>
 800ab20:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab24:	4a02      	ldr	r2, [pc, #8]	; (800ab30 <HAL_RCC_OscConfig+0x4dc>)
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab2c:	e05b      	b.n	800abe6 <HAL_RCC_OscConfig+0x592>
 800ab2e:	bf00      	nop
 800ab30:	58024400 	.word	0x58024400
 800ab34:	58024800 	.word	0x58024800
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d112      	bne.n	800ab66 <HAL_RCC_OscConfig+0x512>
 800ab40:	4b9d      	ldr	r3, [pc, #628]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab44:	4a9c      	ldr	r2, [pc, #624]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab46:	f023 0301 	bic.w	r3, r3, #1
 800ab4a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab4c:	4b9a      	ldr	r3, [pc, #616]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab50:	4a99      	ldr	r2, [pc, #612]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab56:	6713      	str	r3, [r2, #112]	; 0x70
 800ab58:	4b97      	ldr	r3, [pc, #604]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5c:	4a96      	ldr	r2, [pc, #600]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab5e:	f023 0304 	bic.w	r3, r3, #4
 800ab62:	6713      	str	r3, [r2, #112]	; 0x70
 800ab64:	e03f      	b.n	800abe6 <HAL_RCC_OscConfig+0x592>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	2b05      	cmp	r3, #5
 800ab6c:	d112      	bne.n	800ab94 <HAL_RCC_OscConfig+0x540>
 800ab6e:	4b92      	ldr	r3, [pc, #584]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab72:	4a91      	ldr	r2, [pc, #580]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab74:	f043 0304 	orr.w	r3, r3, #4
 800ab78:	6713      	str	r3, [r2, #112]	; 0x70
 800ab7a:	4b8f      	ldr	r3, [pc, #572]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab7e:	4a8e      	ldr	r2, [pc, #568]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab84:	6713      	str	r3, [r2, #112]	; 0x70
 800ab86:	4b8c      	ldr	r3, [pc, #560]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab8a:	4a8b      	ldr	r2, [pc, #556]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab8c:	f043 0301 	orr.w	r3, r3, #1
 800ab90:	6713      	str	r3, [r2, #112]	; 0x70
 800ab92:	e028      	b.n	800abe6 <HAL_RCC_OscConfig+0x592>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b85      	cmp	r3, #133	; 0x85
 800ab9a:	d112      	bne.n	800abc2 <HAL_RCC_OscConfig+0x56e>
 800ab9c:	4b86      	ldr	r3, [pc, #536]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	4a85      	ldr	r2, [pc, #532]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800aba2:	f043 0304 	orr.w	r3, r3, #4
 800aba6:	6713      	str	r3, [r2, #112]	; 0x70
 800aba8:	4b83      	ldr	r3, [pc, #524]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abac:	4a82      	ldr	r2, [pc, #520]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb2:	6713      	str	r3, [r2, #112]	; 0x70
 800abb4:	4b80      	ldr	r3, [pc, #512]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb8:	4a7f      	ldr	r2, [pc, #508]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	6713      	str	r3, [r2, #112]	; 0x70
 800abc0:	e011      	b.n	800abe6 <HAL_RCC_OscConfig+0x592>
 800abc2:	4b7d      	ldr	r3, [pc, #500]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	4a7c      	ldr	r2, [pc, #496]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	6713      	str	r3, [r2, #112]	; 0x70
 800abce:	4b7a      	ldr	r3, [pc, #488]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd2:	4a79      	ldr	r2, [pc, #484]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abd4:	f023 0304 	bic.w	r3, r3, #4
 800abd8:	6713      	str	r3, [r2, #112]	; 0x70
 800abda:	4b77      	ldr	r3, [pc, #476]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abde:	4a76      	ldr	r2, [pc, #472]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800abe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abe4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d015      	beq.n	800ac1a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abee:	f7f9 fc89 	bl	8004504 <HAL_GetTick>
 800abf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abf4:	e00a      	b.n	800ac0c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf6:	f7f9 fc85 	bl	8004504 <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d901      	bls.n	800ac0c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e14c      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac0c:	4b6a      	ldr	r3, [pc, #424]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ac0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0ee      	beq.n	800abf6 <HAL_RCC_OscConfig+0x5a2>
 800ac18:	e014      	b.n	800ac44 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac1a:	f7f9 fc73 	bl	8004504 <HAL_GetTick>
 800ac1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac20:	e00a      	b.n	800ac38 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac22:	f7f9 fc6f 	bl	8004504 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d901      	bls.n	800ac38 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e136      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac38:	4b5f      	ldr	r3, [pc, #380]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ac3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3c:	f003 0302 	and.w	r3, r3, #2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1ee      	bne.n	800ac22 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 812b 	beq.w	800aea4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac4e:	4b5a      	ldr	r3, [pc, #360]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac56:	2b18      	cmp	r3, #24
 800ac58:	f000 80bb 	beq.w	800add2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	f040 8095 	bne.w	800ad90 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac66:	4b54      	ldr	r3, [pc, #336]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a53      	ldr	r2, [pc, #332]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ac6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac72:	f7f9 fc47 	bl	8004504 <HAL_GetTick>
 800ac76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac78:	e008      	b.n	800ac8c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac7a:	f7f9 fc43 	bl	8004504 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e10c      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac8c:	4b4a      	ldr	r3, [pc, #296]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1f0      	bne.n	800ac7a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac98:	4b47      	ldr	r3, [pc, #284]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ac9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac9c:	4b47      	ldr	r3, [pc, #284]	; (800adbc <HAL_RCC_OscConfig+0x768>)
 800ac9e:	4013      	ands	r3, r2
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aca8:	0112      	lsls	r2, r2, #4
 800acaa:	430a      	orrs	r2, r1
 800acac:	4942      	ldr	r1, [pc, #264]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	628b      	str	r3, [r1, #40]	; 0x28
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb6:	3b01      	subs	r3, #1
 800acb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc0:	3b01      	subs	r3, #1
 800acc2:	025b      	lsls	r3, r3, #9
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	431a      	orrs	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	3b01      	subs	r3, #1
 800acce:	041b      	lsls	r3, r3, #16
 800acd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acd4:	431a      	orrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acda:	3b01      	subs	r3, #1
 800acdc:	061b      	lsls	r3, r3, #24
 800acde:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ace2:	4935      	ldr	r1, [pc, #212]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ace8:	4b33      	ldr	r3, [pc, #204]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	4a32      	ldr	r2, [pc, #200]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800acee:	f023 0301 	bic.w	r3, r3, #1
 800acf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acf4:	4b30      	ldr	r3, [pc, #192]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800acf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf8:	4b31      	ldr	r3, [pc, #196]	; (800adc0 <HAL_RCC_OscConfig+0x76c>)
 800acfa:	4013      	ands	r3, r2
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad00:	00d2      	lsls	r2, r2, #3
 800ad02:	492d      	ldr	r1, [pc, #180]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad04:	4313      	orrs	r3, r2
 800ad06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad08:	4b2b      	ldr	r3, [pc, #172]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0c:	f023 020c 	bic.w	r2, r3, #12
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad14:	4928      	ldr	r1, [pc, #160]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad1a:	4b27      	ldr	r3, [pc, #156]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	f023 0202 	bic.w	r2, r3, #2
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad26:	4924      	ldr	r1, [pc, #144]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad2c:	4b22      	ldr	r3, [pc, #136]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad30:	4a21      	ldr	r2, [pc, #132]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad38:	4b1f      	ldr	r3, [pc, #124]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	4a1e      	ldr	r2, [pc, #120]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad44:	4b1c      	ldr	r3, [pc, #112]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	4a1b      	ldr	r2, [pc, #108]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad50:	4b19      	ldr	r3, [pc, #100]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	4a18      	ldr	r2, [pc, #96]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad5c:	4b16      	ldr	r3, [pc, #88]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a15      	ldr	r2, [pc, #84]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad68:	f7f9 fbcc 	bl	8004504 <HAL_GetTick>
 800ad6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad6e:	e008      	b.n	800ad82 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad70:	f7f9 fbc8 	bl	8004504 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e091      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad82:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0f0      	beq.n	800ad70 <HAL_RCC_OscConfig+0x71c>
 800ad8e:	e089      	b.n	800aea4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad90:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a08      	ldr	r2, [pc, #32]	; (800adb8 <HAL_RCC_OscConfig+0x764>)
 800ad96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad9c:	f7f9 fbb2 	bl	8004504 <HAL_GetTick>
 800ada0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ada2:	e00f      	b.n	800adc4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ada4:	f7f9 fbae 	bl	8004504 <HAL_GetTick>
 800ada8:	4602      	mov	r2, r0
 800adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d908      	bls.n	800adc4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e077      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
 800adb6:	bf00      	nop
 800adb8:	58024400 	.word	0x58024400
 800adbc:	fffffc0c 	.word	0xfffffc0c
 800adc0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adc4:	4b3a      	ldr	r3, [pc, #232]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e9      	bne.n	800ada4 <HAL_RCC_OscConfig+0x750>
 800add0:	e068      	b.n	800aea4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800add2:	4b37      	ldr	r3, [pc, #220]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800add8:	4b35      	ldr	r3, [pc, #212]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800adda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800addc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d031      	beq.n	800ae4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f003 0203 	and.w	r2, r3, #3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d12a      	bne.n	800ae4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	091b      	lsrs	r3, r3, #4
 800adf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d122      	bne.n	800ae4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d11a      	bne.n	800ae4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	0a5b      	lsrs	r3, r3, #9
 800ae18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae20:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d111      	bne.n	800ae4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	0c1b      	lsrs	r3, r3, #16
 800ae2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d108      	bne.n	800ae4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	0e1b      	lsrs	r3, r3, #24
 800ae3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d001      	beq.n	800ae4e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e02b      	b.n	800aea6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae4e:	4b18      	ldr	r3, [pc, #96]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800ae50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae52:	08db      	lsrs	r3, r3, #3
 800ae54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae58:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d01f      	beq.n	800aea4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ae64:	4b12      	ldr	r3, [pc, #72]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	4a11      	ldr	r2, [pc, #68]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800ae6a:	f023 0301 	bic.w	r3, r3, #1
 800ae6e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae70:	f7f9 fb48 	bl	8004504 <HAL_GetTick>
 800ae74:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae76:	bf00      	nop
 800ae78:	f7f9 fb44 	bl	8004504 <HAL_GetTick>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d0f9      	beq.n	800ae78 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800ae86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <HAL_RCC_OscConfig+0x860>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae90:	00d2      	lsls	r2, r2, #3
 800ae92:	4907      	ldr	r1, [pc, #28]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae98:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	4a04      	ldr	r2, [pc, #16]	; (800aeb0 <HAL_RCC_OscConfig+0x85c>)
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3730      	adds	r7, #48	; 0x30
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	58024400 	.word	0x58024400
 800aeb4:	ffff0007 	.word	0xffff0007

0800aeb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e19c      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aecc:	4b8a      	ldr	r3, [pc, #552]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 030f 	and.w	r3, r3, #15
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d910      	bls.n	800aefc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeda:	4b87      	ldr	r3, [pc, #540]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f023 020f 	bic.w	r2, r3, #15
 800aee2:	4985      	ldr	r1, [pc, #532]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeea:	4b83      	ldr	r3, [pc, #524]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 030f 	and.w	r3, r3, #15
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d001      	beq.n	800aefc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e184      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d010      	beq.n	800af2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691a      	ldr	r2, [r3, #16]
 800af0c:	4b7b      	ldr	r3, [pc, #492]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af14:	429a      	cmp	r2, r3
 800af16:	d908      	bls.n	800af2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af18:	4b78      	ldr	r3, [pc, #480]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	4975      	ldr	r1, [pc, #468]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af26:	4313      	orrs	r3, r2
 800af28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0308 	and.w	r3, r3, #8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d010      	beq.n	800af58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	695a      	ldr	r2, [r3, #20]
 800af3a:	4b70      	ldr	r3, [pc, #448]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af42:	429a      	cmp	r2, r3
 800af44:	d908      	bls.n	800af58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af46:	4b6d      	ldr	r3, [pc, #436]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	496a      	ldr	r1, [pc, #424]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af54:	4313      	orrs	r3, r2
 800af56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0310 	and.w	r3, r3, #16
 800af60:	2b00      	cmp	r3, #0
 800af62:	d010      	beq.n	800af86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	699a      	ldr	r2, [r3, #24]
 800af68:	4b64      	ldr	r3, [pc, #400]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af6a:	69db      	ldr	r3, [r3, #28]
 800af6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af70:	429a      	cmp	r2, r3
 800af72:	d908      	bls.n	800af86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af74:	4b61      	ldr	r3, [pc, #388]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	495e      	ldr	r1, [pc, #376]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af82:	4313      	orrs	r3, r2
 800af84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0320 	and.w	r3, r3, #32
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d010      	beq.n	800afb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69da      	ldr	r2, [r3, #28]
 800af96:	4b59      	ldr	r3, [pc, #356]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d908      	bls.n	800afb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800afa2:	4b56      	ldr	r3, [pc, #344]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	4953      	ldr	r1, [pc, #332]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0302 	and.w	r3, r3, #2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d010      	beq.n	800afe2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	4b4d      	ldr	r3, [pc, #308]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f003 030f 	and.w	r3, r3, #15
 800afcc:	429a      	cmp	r2, r3
 800afce:	d908      	bls.n	800afe2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afd0:	4b4a      	ldr	r3, [pc, #296]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	f023 020f 	bic.w	r2, r3, #15
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	4947      	ldr	r1, [pc, #284]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d055      	beq.n	800b09a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800afee:	4b43      	ldr	r3, [pc, #268]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	4940      	ldr	r1, [pc, #256]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800affc:	4313      	orrs	r3, r2
 800affe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d107      	bne.n	800b018 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b008:	4b3c      	ldr	r3, [pc, #240]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d121      	bne.n	800b058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e0f6      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d107      	bne.n	800b030 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b020:	4b36      	ldr	r3, [pc, #216]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d115      	bne.n	800b058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	e0ea      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d107      	bne.n	800b048 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b038:	4b30      	ldr	r3, [pc, #192]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b040:	2b00      	cmp	r3, #0
 800b042:	d109      	bne.n	800b058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e0de      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b048:	4b2c      	ldr	r3, [pc, #176]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e0d6      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b058:	4b28      	ldr	r3, [pc, #160]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	f023 0207 	bic.w	r2, r3, #7
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	4925      	ldr	r1, [pc, #148]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b066:	4313      	orrs	r3, r2
 800b068:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b06a:	f7f9 fa4b 	bl	8004504 <HAL_GetTick>
 800b06e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b070:	e00a      	b.n	800b088 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b072:	f7f9 fa47 	bl	8004504 <HAL_GetTick>
 800b076:	4602      	mov	r2, r0
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b080:	4293      	cmp	r3, r2
 800b082:	d901      	bls.n	800b088 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e0be      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b088:	4b1c      	ldr	r3, [pc, #112]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	429a      	cmp	r2, r3
 800b098:	d1eb      	bne.n	800b072 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d010      	beq.n	800b0c8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	4b14      	ldr	r3, [pc, #80]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	f003 030f 	and.w	r3, r3, #15
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d208      	bcs.n	800b0c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0b6:	4b11      	ldr	r3, [pc, #68]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	f023 020f 	bic.w	r2, r3, #15
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	490e      	ldr	r1, [pc, #56]	; (800b0fc <HAL_RCC_ClockConfig+0x244>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0c8:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 030f 	and.w	r3, r3, #15
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d214      	bcs.n	800b100 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0d6:	4b08      	ldr	r3, [pc, #32]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f023 020f 	bic.w	r2, r3, #15
 800b0de:	4906      	ldr	r1, [pc, #24]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0e6:	4b04      	ldr	r3, [pc, #16]	; (800b0f8 <HAL_RCC_ClockConfig+0x240>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d005      	beq.n	800b100 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e086      	b.n	800b206 <HAL_RCC_ClockConfig+0x34e>
 800b0f8:	52002000 	.word	0x52002000
 800b0fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d010      	beq.n	800b12e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691a      	ldr	r2, [r3, #16]
 800b110:	4b3f      	ldr	r3, [pc, #252]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b118:	429a      	cmp	r2, r3
 800b11a:	d208      	bcs.n	800b12e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b11c:	4b3c      	ldr	r3, [pc, #240]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	4939      	ldr	r1, [pc, #228]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 0308 	and.w	r3, r3, #8
 800b136:	2b00      	cmp	r3, #0
 800b138:	d010      	beq.n	800b15c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695a      	ldr	r2, [r3, #20]
 800b13e:	4b34      	ldr	r3, [pc, #208]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b146:	429a      	cmp	r2, r3
 800b148:	d208      	bcs.n	800b15c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b14a:	4b31      	ldr	r3, [pc, #196]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	492e      	ldr	r1, [pc, #184]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b00      	cmp	r3, #0
 800b166:	d010      	beq.n	800b18a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	699a      	ldr	r2, [r3, #24]
 800b16c:	4b28      	ldr	r3, [pc, #160]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b174:	429a      	cmp	r2, r3
 800b176:	d208      	bcs.n	800b18a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b178:	4b25      	ldr	r3, [pc, #148]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b17a:	69db      	ldr	r3, [r3, #28]
 800b17c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	4922      	ldr	r1, [pc, #136]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b186:	4313      	orrs	r3, r2
 800b188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b00      	cmp	r3, #0
 800b194:	d010      	beq.n	800b1b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	69da      	ldr	r2, [r3, #28]
 800b19a:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d208      	bcs.n	800b1b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1a6:	4b1a      	ldr	r3, [pc, #104]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	4917      	ldr	r1, [pc, #92]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b1b8:	f000 f89e 	bl	800b2f8 <HAL_RCC_GetSysClockFreq>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	4b14      	ldr	r3, [pc, #80]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	4912      	ldr	r1, [pc, #72]	; (800b214 <HAL_RCC_ClockConfig+0x35c>)
 800b1ca:	5ccb      	ldrb	r3, [r1, r3]
 800b1cc:	f003 031f 	and.w	r3, r3, #31
 800b1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <HAL_RCC_ClockConfig+0x358>)
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	f003 030f 	and.w	r3, r3, #15
 800b1de:	4a0d      	ldr	r2, [pc, #52]	; (800b214 <HAL_RCC_ClockConfig+0x35c>)
 800b1e0:	5cd3      	ldrb	r3, [r2, r3]
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ec:	4a0a      	ldr	r2, [pc, #40]	; (800b218 <HAL_RCC_ClockConfig+0x360>)
 800b1ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	; (800b21c <HAL_RCC_ClockConfig+0x364>)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b1f6:	4b0a      	ldr	r3, [pc, #40]	; (800b220 <HAL_RCC_ClockConfig+0x368>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7f9 f938 	bl	8004470 <HAL_InitTick>
 800b200:	4603      	mov	r3, r0
 800b202:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b204:	7bfb      	ldrb	r3, [r7, #15]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	58024400 	.word	0x58024400
 800b214:	08010578 	.word	0x08010578
 800b218:	24000288 	.word	0x24000288
 800b21c:	24000284 	.word	0x24000284
 800b220:	2400028c 	.word	0x2400028c

0800b224 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08c      	sub	sp, #48	; 0x30
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d12a      	bne.n	800b28c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b236:	4b2d      	ldr	r3, [pc, #180]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b238:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b23c:	4a2b      	ldr	r2, [pc, #172]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b23e:	f043 0301 	orr.w	r3, r3, #1
 800b242:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b246:	4b29      	ldr	r3, [pc, #164]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b248:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b25a:	2302      	movs	r3, #2
 800b25c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b25e:	2303      	movs	r3, #3
 800b260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b262:	2300      	movs	r3, #0
 800b264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b266:	2300      	movs	r3, #0
 800b268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b26a:	f107 031c 	add.w	r3, r7, #28
 800b26e:	4619      	mov	r1, r3
 800b270:	481f      	ldr	r0, [pc, #124]	; (800b2f0 <HAL_RCC_MCOConfig+0xcc>)
 800b272:	f7fd fcc1 	bl	8008bf8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b276:	4b1d      	ldr	r3, [pc, #116]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b27e:	68b9      	ldr	r1, [r7, #8]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	430b      	orrs	r3, r1
 800b284:	4919      	ldr	r1, [pc, #100]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b286:	4313      	orrs	r3, r2
 800b288:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b28a:	e02a      	b.n	800b2e2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b28c:	4b17      	ldr	r3, [pc, #92]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b28e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b292:	4a16      	ldr	r2, [pc, #88]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b294:	f043 0304 	orr.w	r3, r3, #4
 800b298:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b29c:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b29e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	617b      	str	r3, [r7, #20]
 800b2a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b2aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b2c0:	f107 031c 	add.w	r3, r7, #28
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	480b      	ldr	r0, [pc, #44]	; (800b2f4 <HAL_RCC_MCOConfig+0xd0>)
 800b2c8:	f7fd fc96 	bl	8008bf8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b2cc:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	01d9      	lsls	r1, r3, #7
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	430b      	orrs	r3, r1
 800b2dc:	4903      	ldr	r1, [pc, #12]	; (800b2ec <HAL_RCC_MCOConfig+0xc8>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	610b      	str	r3, [r1, #16]
}
 800b2e2:	bf00      	nop
 800b2e4:	3730      	adds	r7, #48	; 0x30
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	58020000 	.word	0x58020000
 800b2f4:	58020800 	.word	0x58020800

0800b2f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b089      	sub	sp, #36	; 0x24
 800b2fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2fe:	4bb3      	ldr	r3, [pc, #716]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b306:	2b18      	cmp	r3, #24
 800b308:	f200 8155 	bhi.w	800b5b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b30c:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b379 	.word	0x0800b379
 800b318:	0800b5b7 	.word	0x0800b5b7
 800b31c:	0800b5b7 	.word	0x0800b5b7
 800b320:	0800b5b7 	.word	0x0800b5b7
 800b324:	0800b5b7 	.word	0x0800b5b7
 800b328:	0800b5b7 	.word	0x0800b5b7
 800b32c:	0800b5b7 	.word	0x0800b5b7
 800b330:	0800b5b7 	.word	0x0800b5b7
 800b334:	0800b39f 	.word	0x0800b39f
 800b338:	0800b5b7 	.word	0x0800b5b7
 800b33c:	0800b5b7 	.word	0x0800b5b7
 800b340:	0800b5b7 	.word	0x0800b5b7
 800b344:	0800b5b7 	.word	0x0800b5b7
 800b348:	0800b5b7 	.word	0x0800b5b7
 800b34c:	0800b5b7 	.word	0x0800b5b7
 800b350:	0800b5b7 	.word	0x0800b5b7
 800b354:	0800b3a5 	.word	0x0800b3a5
 800b358:	0800b5b7 	.word	0x0800b5b7
 800b35c:	0800b5b7 	.word	0x0800b5b7
 800b360:	0800b5b7 	.word	0x0800b5b7
 800b364:	0800b5b7 	.word	0x0800b5b7
 800b368:	0800b5b7 	.word	0x0800b5b7
 800b36c:	0800b5b7 	.word	0x0800b5b7
 800b370:	0800b5b7 	.word	0x0800b5b7
 800b374:	0800b3ab 	.word	0x0800b3ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b378:	4b94      	ldr	r3, [pc, #592]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0320 	and.w	r3, r3, #32
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b384:	4b91      	ldr	r3, [pc, #580]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	08db      	lsrs	r3, r3, #3
 800b38a:	f003 0303 	and.w	r3, r3, #3
 800b38e:	4a90      	ldr	r2, [pc, #576]	; (800b5d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b390:	fa22 f303 	lsr.w	r3, r2, r3
 800b394:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b396:	e111      	b.n	800b5bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b398:	4b8d      	ldr	r3, [pc, #564]	; (800b5d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b39a:	61bb      	str	r3, [r7, #24]
      break;
 800b39c:	e10e      	b.n	800b5bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b39e:	4b8d      	ldr	r3, [pc, #564]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b3a0:	61bb      	str	r3, [r7, #24]
      break;
 800b3a2:	e10b      	b.n	800b5bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b3a4:	4b8c      	ldr	r3, [pc, #560]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b3a6:	61bb      	str	r3, [r7, #24]
      break;
 800b3a8:	e108      	b.n	800b5bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3aa:	4b88      	ldr	r3, [pc, #544]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	f003 0303 	and.w	r3, r3, #3
 800b3b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b3b4:	4b85      	ldr	r3, [pc, #532]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b8:	091b      	lsrs	r3, r3, #4
 800b3ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b3c0:	4b82      	ldr	r3, [pc, #520]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	f003 0301 	and.w	r3, r3, #1
 800b3c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3ca:	4b80      	ldr	r3, [pc, #512]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ce:	08db      	lsrs	r3, r3, #3
 800b3d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 80e1 	beq.w	800b5b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	f000 8083 	beq.w	800b4fc <HAL_RCC_GetSysClockFreq+0x204>
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	f200 80a1 	bhi.w	800b540 <HAL_RCC_GetSysClockFreq+0x248>
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d003      	beq.n	800b40c <HAL_RCC_GetSysClockFreq+0x114>
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d056      	beq.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b40a:	e099      	b.n	800b540 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b40c:	4b6f      	ldr	r3, [pc, #444]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0320 	and.w	r3, r3, #32
 800b414:	2b00      	cmp	r3, #0
 800b416:	d02d      	beq.n	800b474 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b418:	4b6c      	ldr	r3, [pc, #432]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	08db      	lsrs	r3, r3, #3
 800b41e:	f003 0303 	and.w	r3, r3, #3
 800b422:	4a6b      	ldr	r2, [pc, #428]	; (800b5d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b424:	fa22 f303 	lsr.w	r3, r2, r3
 800b428:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	ee07 3a90 	vmov	s15, r3
 800b430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b442:	4b62      	ldr	r3, [pc, #392]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b44a:	ee07 3a90 	vmov	s15, r3
 800b44e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b452:	ed97 6a02 	vldr	s12, [r7, #8]
 800b456:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b5dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b45a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b45e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b46e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b472:	e087      	b.n	800b584 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b5e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b486:	4b51      	ldr	r3, [pc, #324]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b496:	ed97 6a02 	vldr	s12, [r7, #8]
 800b49a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b5dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b49e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4b6:	e065      	b.n	800b584 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b5e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ca:	4b40      	ldr	r3, [pc, #256]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b5dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4fa:	e043      	b.n	800b584 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b506:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b5e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b50e:	4b2f      	ldr	r3, [pc, #188]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b51e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b522:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b5dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b53a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b53e:	e021      	b.n	800b584 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b5e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b552:	4b1e      	ldr	r3, [pc, #120]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55a:	ee07 3a90 	vmov	s15, r3
 800b55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b562:	ed97 6a02 	vldr	s12, [r7, #8]
 800b566:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b5dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b582:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b584:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b588:	0a5b      	lsrs	r3, r3, #9
 800b58a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b58e:	3301      	adds	r3, #1
 800b590:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	ee07 3a90 	vmov	s15, r3
 800b598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b59c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a8:	ee17 3a90 	vmov	r3, s15
 800b5ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b5ae:	e005      	b.n	800b5bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61bb      	str	r3, [r7, #24]
      break;
 800b5b4:	e002      	b.n	800b5bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b5b6:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5b8:	61bb      	str	r3, [r7, #24]
      break;
 800b5ba:	bf00      	nop
  }

  return sysclockfreq;
 800b5bc:	69bb      	ldr	r3, [r7, #24]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3724      	adds	r7, #36	; 0x24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	58024400 	.word	0x58024400
 800b5d0:	03d09000 	.word	0x03d09000
 800b5d4:	003d0900 	.word	0x003d0900
 800b5d8:	016e3600 	.word	0x016e3600
 800b5dc:	46000000 	.word	0x46000000
 800b5e0:	4c742400 	.word	0x4c742400
 800b5e4:	4a742400 	.word	0x4a742400
 800b5e8:	4bb71b00 	.word	0x4bb71b00

0800b5ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b5f2:	f7ff fe81 	bl	800b2f8 <HAL_RCC_GetSysClockFreq>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	4b10      	ldr	r3, [pc, #64]	; (800b63c <HAL_RCC_GetHCLKFreq+0x50>)
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	0a1b      	lsrs	r3, r3, #8
 800b5fe:	f003 030f 	and.w	r3, r3, #15
 800b602:	490f      	ldr	r1, [pc, #60]	; (800b640 <HAL_RCC_GetHCLKFreq+0x54>)
 800b604:	5ccb      	ldrb	r3, [r1, r3]
 800b606:	f003 031f 	and.w	r3, r3, #31
 800b60a:	fa22 f303 	lsr.w	r3, r2, r3
 800b60e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b610:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <HAL_RCC_GetHCLKFreq+0x50>)
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	f003 030f 	and.w	r3, r3, #15
 800b618:	4a09      	ldr	r2, [pc, #36]	; (800b640 <HAL_RCC_GetHCLKFreq+0x54>)
 800b61a:	5cd3      	ldrb	r3, [r2, r3]
 800b61c:	f003 031f 	and.w	r3, r3, #31
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	fa22 f303 	lsr.w	r3, r2, r3
 800b626:	4a07      	ldr	r2, [pc, #28]	; (800b644 <HAL_RCC_GetHCLKFreq+0x58>)
 800b628:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b62a:	4a07      	ldr	r2, [pc, #28]	; (800b648 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b630:	4b04      	ldr	r3, [pc, #16]	; (800b644 <HAL_RCC_GetHCLKFreq+0x58>)
 800b632:	681b      	ldr	r3, [r3, #0]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	58024400 	.word	0x58024400
 800b640:	08010578 	.word	0x08010578
 800b644:	24000288 	.word	0x24000288
 800b648:	24000284 	.word	0x24000284

0800b64c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b650:	f7ff ffcc 	bl	800b5ec <HAL_RCC_GetHCLKFreq>
 800b654:	4602      	mov	r2, r0
 800b656:	4b06      	ldr	r3, [pc, #24]	; (800b670 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b658:	69db      	ldr	r3, [r3, #28]
 800b65a:	091b      	lsrs	r3, r3, #4
 800b65c:	f003 0307 	and.w	r3, r3, #7
 800b660:	4904      	ldr	r1, [pc, #16]	; (800b674 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b662:	5ccb      	ldrb	r3, [r1, r3]
 800b664:	f003 031f 	and.w	r3, r3, #31
 800b668:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	58024400 	.word	0x58024400
 800b674:	08010578 	.word	0x08010578

0800b678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b67c:	f7ff ffb6 	bl	800b5ec <HAL_RCC_GetHCLKFreq>
 800b680:	4602      	mov	r2, r0
 800b682:	4b06      	ldr	r3, [pc, #24]	; (800b69c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	0a1b      	lsrs	r3, r3, #8
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	4904      	ldr	r1, [pc, #16]	; (800b6a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b68e:	5ccb      	ldrb	r3, [r1, r3]
 800b690:	f003 031f 	and.w	r3, r3, #31
 800b694:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b698:	4618      	mov	r0, r3
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	58024400 	.word	0x58024400
 800b6a0:	08010578 	.word	0x08010578

0800b6a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6a8:	b0c8      	sub	sp, #288	; 0x120
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	ea54 0305 	orrs.w	r3, r4, r5
 800b6ce:	d049      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6da:	d02f      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b6dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6e0:	d828      	bhi.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6e6:	d01a      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b6e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6ec:	d822      	bhi.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b6f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6f6:	d007      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b6f8:	e01c      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6fa:	4ba7      	ldr	r3, [pc, #668]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fe:	4aa6      	ldr	r2, [pc, #664]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b706:	e01a      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b70c:	3308      	adds	r3, #8
 800b70e:	2102      	movs	r1, #2
 800b710:	4618      	mov	r0, r3
 800b712:	f001 fc43 	bl	800cf9c <RCCEx_PLL2_Config>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b71c:	e00f      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b722:	3328      	adds	r3, #40	; 0x28
 800b724:	2102      	movs	r1, #2
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fcea 	bl	800d100 <RCCEx_PLL3_Config>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b732:	e004      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b73a:	e000      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10a      	bne.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b746:	4b94      	ldr	r3, [pc, #592]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b74a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b754:	4a90      	ldr	r2, [pc, #576]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b756:	430b      	orrs	r3, r1
 800b758:	6513      	str	r3, [r2, #80]	; 0x50
 800b75a:	e003      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b75c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b760:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b770:	f04f 0900 	mov.w	r9, #0
 800b774:	ea58 0309 	orrs.w	r3, r8, r9
 800b778:	d047      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b77a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b77e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b780:	2b04      	cmp	r3, #4
 800b782:	d82a      	bhi.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7a1 	.word	0x0800b7a1
 800b790:	0800b7af 	.word	0x0800b7af
 800b794:	0800b7c5 	.word	0x0800b7c5
 800b798:	0800b7e3 	.word	0x0800b7e3
 800b79c:	0800b7e3 	.word	0x0800b7e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a0:	4b7d      	ldr	r3, [pc, #500]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a4:	4a7c      	ldr	r2, [pc, #496]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7ac:	e01a      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f001 fbf0 	bl	800cf9c <RCCEx_PLL2_Config>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7c2:	e00f      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7c8:	3328      	adds	r3, #40	; 0x28
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f001 fc97 	bl	800d100 <RCCEx_PLL3_Config>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7d8:	e004      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b7e0:	e000      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7ec:	4b6a      	ldr	r3, [pc, #424]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f0:	f023 0107 	bic.w	r1, r3, #7
 800b7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fa:	4a67      	ldr	r2, [pc, #412]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b800:	e003      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b802:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b806:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b816:	f04f 0b00 	mov.w	fp, #0
 800b81a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b81e:	d054      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b826:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b82a:	d036      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b82c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b830:	d82f      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b836:	d032      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b83c:	d829      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b83e:	2bc0      	cmp	r3, #192	; 0xc0
 800b840:	d02f      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b842:	2bc0      	cmp	r3, #192	; 0xc0
 800b844:	d825      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b846:	2b80      	cmp	r3, #128	; 0x80
 800b848:	d018      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b84a:	2b80      	cmp	r3, #128	; 0x80
 800b84c:	d821      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b852:	2b40      	cmp	r3, #64	; 0x40
 800b854:	d007      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b856:	e01c      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b858:	4b4f      	ldr	r3, [pc, #316]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	4a4e      	ldr	r2, [pc, #312]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b864:	e01e      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b86a:	3308      	adds	r3, #8
 800b86c:	2100      	movs	r1, #0
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fb94 	bl	800cf9c <RCCEx_PLL2_Config>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b87a:	e013      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b880:	3328      	adds	r3, #40	; 0x28
 800b882:	2100      	movs	r1, #0
 800b884:	4618      	mov	r0, r3
 800b886:	f001 fc3b 	bl	800d100 <RCCEx_PLL3_Config>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b890:	e008      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b898:	e004      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b89a:	bf00      	nop
 800b89c:	e002      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b89e:	bf00      	nop
 800b8a0:	e000      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b8ac:	4b3a      	ldr	r3, [pc, #232]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ba:	4a37      	ldr	r2, [pc, #220]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	6513      	str	r3, [r2, #80]	; 0x50
 800b8c0:	e003      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b8ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b8d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b8e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	d05c      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b8ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8f0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b8f4:	d03b      	beq.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b8f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b8fa:	d834      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b8fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b900:	d037      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b906:	d82e      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b908:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b90c:	d033      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b90e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b912:	d828      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b918:	d01a      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b91e:	d822      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b928:	d007      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b92a:	e01c      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b92c:	4b1a      	ldr	r3, [pc, #104]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b930:	4a19      	ldr	r2, [pc, #100]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b938:	e01e      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b93a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b93e:	3308      	adds	r3, #8
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f001 fb2a 	bl	800cf9c <RCCEx_PLL2_Config>
 800b948:	4603      	mov	r3, r0
 800b94a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b94e:	e013      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b954:	3328      	adds	r3, #40	; 0x28
 800b956:	2100      	movs	r1, #0
 800b958:	4618      	mov	r0, r3
 800b95a:	f001 fbd1 	bl	800d100 <RCCEx_PLL3_Config>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b964:	e008      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b96c:	e004      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b96e:	bf00      	nop
 800b970:	e002      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b972:	bf00      	nop
 800b974:	e000      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10d      	bne.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b980:	4b05      	ldr	r3, [pc, #20]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b984:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b98c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b98e:	4a02      	ldr	r2, [pc, #8]	; (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b990:	430b      	orrs	r3, r1
 800b992:	6513      	str	r3, [r2, #80]	; 0x50
 800b994:	e006      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b996:	bf00      	nop
 800b998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b9b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	d03a      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	2b30      	cmp	r3, #48	; 0x30
 800b9cc:	d01f      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b9ce:	2b30      	cmp	r3, #48	; 0x30
 800b9d0:	d819      	bhi.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d00c      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b9d6:	2b20      	cmp	r3, #32
 800b9d8:	d815      	bhi.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d019      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	d111      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9e2:	4bae      	ldr	r3, [pc, #696]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e6:	4aad      	ldr	r2, [pc, #692]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b9ee:	e011      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	2102      	movs	r1, #2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 facf 	bl	800cf9c <RCCEx_PLL2_Config>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba04:	e006      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba0c:	e002      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba0e:	bf00      	nop
 800ba10:	e000      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba1c:	4b9f      	ldr	r3, [pc, #636]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba20:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ba24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba2a:	4a9c      	ldr	r2, [pc, #624]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba2c:	430b      	orrs	r3, r1
 800ba2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba30:	e003      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ba46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4313      	orrs	r3, r2
 800ba58:	d051      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba64:	d035      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ba66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba6a:	d82e      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba70:	d031      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ba72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba76:	d828      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba7c:	d01a      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ba7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba82:	d822      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ba88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba8c:	d007      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800ba8e:	e01c      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba90:	4b82      	ldr	r3, [pc, #520]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba94:	4a81      	ldr	r2, [pc, #516]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba9c:	e01c      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baa2:	3308      	adds	r3, #8
 800baa4:	2100      	movs	r1, #0
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 fa78 	bl	800cf9c <RCCEx_PLL2_Config>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bab2:	e011      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bab8:	3328      	adds	r3, #40	; 0x28
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f001 fb1f 	bl	800d100 <RCCEx_PLL3_Config>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bac8:	e006      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bad0:	e002      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bad2:	bf00      	nop
 800bad4:	e000      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bad8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bae0:	4b6e      	ldr	r3, [pc, #440]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baee:	4a6b      	ldr	r2, [pc, #428]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baf0:	430b      	orrs	r3, r1
 800baf2:	6513      	str	r3, [r2, #80]	; 0x50
 800baf4:	e003      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bafa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bafe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bb0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	d053      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb28:	d033      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bb2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb2e:	d82c      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb34:	d02f      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bb36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb3a:	d826      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb40:	d02b      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb46:	d820      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb4c:	d012      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bb4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb52:	d81a      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d022      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bb58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb5c:	d115      	bne.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb62:	3308      	adds	r3, #8
 800bb64:	2101      	movs	r1, #1
 800bb66:	4618      	mov	r0, r3
 800bb68:	f001 fa18 	bl	800cf9c <RCCEx_PLL2_Config>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb72:	e015      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb78:	3328      	adds	r3, #40	; 0x28
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 fabf 	bl	800d100 <RCCEx_PLL3_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb88:	e00a      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb90:	e006      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb92:	bf00      	nop
 800bb94:	e004      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb96:	bf00      	nop
 800bb98:	e002      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb9a:	bf00      	nop
 800bb9c:	e000      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10a      	bne.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bba8:	4b3c      	ldr	r3, [pc, #240]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bbb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbb6:	4a39      	ldr	r2, [pc, #228]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6513      	str	r3, [r2, #80]	; 0x50
 800bbbc:	e003      	b.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbc2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bbd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbdc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	d060      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bbe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbee:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bbf2:	d039      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bbf4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bbf8:	d832      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bbfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbfe:	d035      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bc00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc04:	d82c      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0a:	d031      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bc0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc10:	d826      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc16:	d02d      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bc18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc1c:	d820      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc22:	d012      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc28:	d81a      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d024      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bc2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc32:	d115      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc38:	3308      	adds	r3, #8
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f001 f9ad 	bl	800cf9c <RCCEx_PLL2_Config>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc48:	e017      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc4e:	3328      	adds	r3, #40	; 0x28
 800bc50:	2101      	movs	r1, #1
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 fa54 	bl	800d100 <RCCEx_PLL3_Config>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc5e:	e00c      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc66:	e008      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc68:	bf00      	nop
 800bc6a:	e006      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc6c:	bf00      	nop
 800bc6e:	e004      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc70:	bf00      	nop
 800bc72:	e002      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc74:	bf00      	nop
 800bc76:	e000      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10e      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc82:	4b06      	ldr	r3, [pc, #24]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc92:	4a02      	ldr	r2, [pc, #8]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	6593      	str	r3, [r2, #88]	; 0x58
 800bc98:	e006      	b.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bc9a:	bf00      	nop
 800bc9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bca4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bcb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bcbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	d037      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bcc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd2:	d00e      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bcd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd8:	d816      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d018      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bcde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bce2:	d111      	bne.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce4:	4bc4      	ldr	r3, [pc, #784]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	4ac3      	ldr	r2, [pc, #780]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bcf0:	e00f      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 f94e 	bl	800cf9c <RCCEx_PLL2_Config>
 800bd00:	4603      	mov	r3, r0
 800bd02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd06:	e004      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd0e:	e000      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bd10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10a      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd1a:	4bb7      	ldr	r3, [pc, #732]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bd22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd28:	4ab3      	ldr	r2, [pc, #716]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd2a:	430b      	orrs	r3, r1
 800bd2c:	6513      	str	r3, [r2, #80]	; 0x50
 800bd2e:	e003      	b.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bd44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4313      	orrs	r3, r2
 800bd56:	d039      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d81c      	bhi.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bd62:	a201      	add	r2, pc, #4	; (adr r2, 800bd68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd68:	0800bda5 	.word	0x0800bda5
 800bd6c:	0800bd79 	.word	0x0800bd79
 800bd70:	0800bd87 	.word	0x0800bd87
 800bd74:	0800bda5 	.word	0x0800bda5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd78:	4b9f      	ldr	r3, [pc, #636]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7c:	4a9e      	ldr	r2, [pc, #632]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd84:	e00f      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	2102      	movs	r1, #2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f001 f904 	bl	800cf9c <RCCEx_PLL2_Config>
 800bd94:	4603      	mov	r3, r0
 800bd96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd9a:	e004      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bda2:	e000      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bdae:	4b92      	ldr	r3, [pc, #584]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdb2:	f023 0103 	bic.w	r1, r3, #3
 800bdb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdbc:	4a8e      	ldr	r2, [pc, #568]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdbe:	430b      	orrs	r3, r1
 800bdc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bdc2:	e003      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bdd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bddc:	2300      	movs	r3, #0
 800bdde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bde2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bde6:	460b      	mov	r3, r1
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f000 8099 	beq.w	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdee:	4b83      	ldr	r3, [pc, #524]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a82      	ldr	r2, [pc, #520]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bdf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bdfa:	f7f8 fb83 	bl	8004504 <HAL_GetTick>
 800bdfe:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be02:	e00b      	b.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be04:	f7f8 fb7e 	bl	8004504 <HAL_GetTick>
 800be08:	4602      	mov	r2, r0
 800be0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b64      	cmp	r3, #100	; 0x64
 800be12:	d903      	bls.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800be14:	2303      	movs	r3, #3
 800be16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be1a:	e005      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be1c:	4b77      	ldr	r3, [pc, #476]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0ed      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800be28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d173      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be30:	4b71      	ldr	r3, [pc, #452]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be3c:	4053      	eors	r3, r2
 800be3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be42:	2b00      	cmp	r3, #0
 800be44:	d015      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be46:	4b6c      	ldr	r3, [pc, #432]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be52:	4b69      	ldr	r3, [pc, #420]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be56:	4a68      	ldr	r2, [pc, #416]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be5e:	4b66      	ldr	r3, [pc, #408]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be62:	4a65      	ldr	r2, [pc, #404]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be6a:	4a63      	ldr	r2, [pc, #396]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be7e:	d118      	bne.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be80:	f7f8 fb40 	bl	8004504 <HAL_GetTick>
 800be84:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be88:	e00d      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be8a:	f7f8 fb3b 	bl	8004504 <HAL_GetTick>
 800be8e:	4602      	mov	r2, r0
 800be90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be94:	1ad2      	subs	r2, r2, r3
 800be96:	f241 3388 	movw	r3, #5000	; 0x1388
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d903      	bls.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bea4:	e005      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bea6:	4b54      	ldr	r3, [pc, #336]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0eb      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800beb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d129      	bne.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800beba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800beca:	d10e      	bne.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x846>
 800becc:	4b4a      	ldr	r3, [pc, #296]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bedc:	091a      	lsrs	r2, r3, #4
 800bede:	4b48      	ldr	r3, [pc, #288]	; (800c000 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	4a45      	ldr	r2, [pc, #276]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee4:	430b      	orrs	r3, r1
 800bee6:	6113      	str	r3, [r2, #16]
 800bee8:	e005      	b.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800beea:	4b43      	ldr	r3, [pc, #268]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	4a42      	ldr	r2, [pc, #264]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bef0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bef4:	6113      	str	r3, [r2, #16]
 800bef6:	4b40      	ldr	r3, [pc, #256]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bef8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800befa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800befe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf06:	4a3c      	ldr	r2, [pc, #240]	; (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf08:	430b      	orrs	r3, r1
 800bf0a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf0c:	e008      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bf16:	e003      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f002 0301 	and.w	r3, r2, #1
 800bf2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf30:	2300      	movs	r3, #0
 800bf32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	f000 8090 	beq.w	800c062 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bf42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf4a:	2b28      	cmp	r3, #40	; 0x28
 800bf4c:	d870      	bhi.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bf4e:	a201      	add	r2, pc, #4	; (adr r2, 800bf54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf54:	0800c039 	.word	0x0800c039
 800bf58:	0800c031 	.word	0x0800c031
 800bf5c:	0800c031 	.word	0x0800c031
 800bf60:	0800c031 	.word	0x0800c031
 800bf64:	0800c031 	.word	0x0800c031
 800bf68:	0800c031 	.word	0x0800c031
 800bf6c:	0800c031 	.word	0x0800c031
 800bf70:	0800c031 	.word	0x0800c031
 800bf74:	0800c005 	.word	0x0800c005
 800bf78:	0800c031 	.word	0x0800c031
 800bf7c:	0800c031 	.word	0x0800c031
 800bf80:	0800c031 	.word	0x0800c031
 800bf84:	0800c031 	.word	0x0800c031
 800bf88:	0800c031 	.word	0x0800c031
 800bf8c:	0800c031 	.word	0x0800c031
 800bf90:	0800c031 	.word	0x0800c031
 800bf94:	0800c01b 	.word	0x0800c01b
 800bf98:	0800c031 	.word	0x0800c031
 800bf9c:	0800c031 	.word	0x0800c031
 800bfa0:	0800c031 	.word	0x0800c031
 800bfa4:	0800c031 	.word	0x0800c031
 800bfa8:	0800c031 	.word	0x0800c031
 800bfac:	0800c031 	.word	0x0800c031
 800bfb0:	0800c031 	.word	0x0800c031
 800bfb4:	0800c039 	.word	0x0800c039
 800bfb8:	0800c031 	.word	0x0800c031
 800bfbc:	0800c031 	.word	0x0800c031
 800bfc0:	0800c031 	.word	0x0800c031
 800bfc4:	0800c031 	.word	0x0800c031
 800bfc8:	0800c031 	.word	0x0800c031
 800bfcc:	0800c031 	.word	0x0800c031
 800bfd0:	0800c031 	.word	0x0800c031
 800bfd4:	0800c039 	.word	0x0800c039
 800bfd8:	0800c031 	.word	0x0800c031
 800bfdc:	0800c031 	.word	0x0800c031
 800bfe0:	0800c031 	.word	0x0800c031
 800bfe4:	0800c031 	.word	0x0800c031
 800bfe8:	0800c031 	.word	0x0800c031
 800bfec:	0800c031 	.word	0x0800c031
 800bff0:	0800c031 	.word	0x0800c031
 800bff4:	0800c039 	.word	0x0800c039
 800bff8:	58024400 	.word	0x58024400
 800bffc:	58024800 	.word	0x58024800
 800c000:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c008:	3308      	adds	r3, #8
 800c00a:	2101      	movs	r1, #1
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 ffc5 	bl	800cf9c <RCCEx_PLL2_Config>
 800c012:	4603      	mov	r3, r0
 800c014:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c018:	e00f      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c01e:	3328      	adds	r3, #40	; 0x28
 800c020:	2101      	movs	r1, #1
 800c022:	4618      	mov	r0, r3
 800c024:	f001 f86c 	bl	800d100 <RCCEx_PLL3_Config>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c02e:	e004      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c036:	e000      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c03a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10b      	bne.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c042:	4bc0      	ldr	r3, [pc, #768]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c046:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c052:	4abc      	ldr	r2, [pc, #752]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c054:	430b      	orrs	r3, r1
 800c056:	6553      	str	r3, [r2, #84]	; 0x54
 800c058:	e003      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c05e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f002 0302 	and.w	r3, r2, #2
 800c06e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c072:	2300      	movs	r3, #0
 800c074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c078:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c07c:	460b      	mov	r3, r1
 800c07e:	4313      	orrs	r3, r2
 800c080:	d043      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c08a:	2b05      	cmp	r3, #5
 800c08c:	d824      	bhi.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c08e:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0e1 	.word	0x0800c0e1
 800c098:	0800c0ad 	.word	0x0800c0ad
 800c09c:	0800c0c3 	.word	0x0800c0c3
 800c0a0:	0800c0e1 	.word	0x0800c0e1
 800c0a4:	0800c0e1 	.word	0x0800c0e1
 800c0a8:	0800c0e1 	.word	0x0800c0e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 ff71 	bl	800cf9c <RCCEx_PLL2_Config>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0c0:	e00f      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0c6:	3328      	adds	r3, #40	; 0x28
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 f818 	bl	800d100 <RCCEx_PLL3_Config>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0d6:	e004      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0de:	e000      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10b      	bne.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c0ea:	4b96      	ldr	r3, [pc, #600]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ee:	f023 0107 	bic.w	r1, r3, #7
 800c0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fa:	4a92      	ldr	r2, [pc, #584]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0fc:	430b      	orrs	r3, r1
 800c0fe:	6553      	str	r3, [r2, #84]	; 0x54
 800c100:	e003      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c102:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c106:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c10a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f002 0304 	and.w	r3, r2, #4
 800c116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c11a:	2300      	movs	r3, #0
 800c11c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c120:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c124:	460b      	mov	r3, r1
 800c126:	4313      	orrs	r3, r2
 800c128:	d043      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c12e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c132:	2b05      	cmp	r3, #5
 800c134:	d824      	bhi.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c136:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c189 	.word	0x0800c189
 800c140:	0800c155 	.word	0x0800c155
 800c144:	0800c16b 	.word	0x0800c16b
 800c148:	0800c189 	.word	0x0800c189
 800c14c:	0800c189 	.word	0x0800c189
 800c150:	0800c189 	.word	0x0800c189
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c158:	3308      	adds	r3, #8
 800c15a:	2101      	movs	r1, #1
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 ff1d 	bl	800cf9c <RCCEx_PLL2_Config>
 800c162:	4603      	mov	r3, r0
 800c164:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c168:	e00f      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c16e:	3328      	adds	r3, #40	; 0x28
 800c170:	2101      	movs	r1, #1
 800c172:	4618      	mov	r0, r3
 800c174:	f000 ffc4 	bl	800d100 <RCCEx_PLL3_Config>
 800c178:	4603      	mov	r3, r0
 800c17a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c17e:	e004      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c186:	e000      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c18a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10b      	bne.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c192:	4b6c      	ldr	r3, [pc, #432]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c196:	f023 0107 	bic.w	r1, r3, #7
 800c19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c19e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1a2:	4a68      	ldr	r2, [pc, #416]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	6593      	str	r3, [r2, #88]	; 0x58
 800c1a8:	e003      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	f002 0320 	and.w	r3, r2, #32
 800c1be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	d055      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1de:	d033      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c1e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1e4:	d82c      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ea:	d02f      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1f0:	d826      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c1f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1f6:	d02b      	beq.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c1f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1fc:	d820      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c1fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c202:	d012      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c208:	d81a      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d022      	beq.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c20e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c212:	d115      	bne.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c218:	3308      	adds	r3, #8
 800c21a:	2100      	movs	r1, #0
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 febd 	bl	800cf9c <RCCEx_PLL2_Config>
 800c222:	4603      	mov	r3, r0
 800c224:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c228:	e015      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c22e:	3328      	adds	r3, #40	; 0x28
 800c230:	2102      	movs	r1, #2
 800c232:	4618      	mov	r0, r3
 800c234:	f000 ff64 	bl	800d100 <RCCEx_PLL3_Config>
 800c238:	4603      	mov	r3, r0
 800c23a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c23e:	e00a      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c246:	e006      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c248:	bf00      	nop
 800c24a:	e004      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c24c:	bf00      	nop
 800c24e:	e002      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c250:	bf00      	nop
 800c252:	e000      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c254:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c256:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c25e:	4b39      	ldr	r3, [pc, #228]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c262:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c26a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c26e:	4a35      	ldr	r2, [pc, #212]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c270:	430b      	orrs	r3, r1
 800c272:	6553      	str	r3, [r2, #84]	; 0x54
 800c274:	e003      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c276:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c27a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c27e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c28a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c28e:	2300      	movs	r3, #0
 800c290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c294:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c298:	460b      	mov	r3, r1
 800c29a:	4313      	orrs	r3, r2
 800c29c:	d058      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c29e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2aa:	d033      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c2ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2b0:	d82c      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2b6:	d02f      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2bc:	d826      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2c2:	d02b      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c2c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2c8:	d820      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2ce:	d012      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c2d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2d4:	d81a      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d022      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c2da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2de:	d115      	bne.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fe57 	bl	800cf9c <RCCEx_PLL2_Config>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c2f4:	e015      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2fa:	3328      	adds	r3, #40	; 0x28
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fefe 	bl	800d100 <RCCEx_PLL3_Config>
 800c304:	4603      	mov	r3, r0
 800c306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c30a:	e00a      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c312:	e006      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c314:	bf00      	nop
 800c316:	e004      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c318:	bf00      	nop
 800c31a:	e002      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c31c:	bf00      	nop
 800c31e:	e000      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c322:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10e      	bne.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c32a:	4b06      	ldr	r3, [pc, #24]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c33a:	4a02      	ldr	r2, [pc, #8]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6593      	str	r3, [r2, #88]	; 0x58
 800c340:	e006      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c342:	bf00      	nop
 800c344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c348:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c34c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c35c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c360:	2300      	movs	r3, #0
 800c362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c366:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c36a:	460b      	mov	r3, r1
 800c36c:	4313      	orrs	r3, r2
 800c36e:	d055      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c374:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c378:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c37c:	d033      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c37e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c382:	d82c      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c388:	d02f      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c38a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c38e:	d826      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c390:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c394:	d02b      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c396:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c39a:	d820      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c39c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3a0:	d012      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c3a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3a6:	d81a      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d022      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c3ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3b0:	d115      	bne.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fdee 	bl	800cf9c <RCCEx_PLL2_Config>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3c6:	e015      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3cc:	3328      	adds	r3, #40	; 0x28
 800c3ce:	2102      	movs	r1, #2
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f000 fe95 	bl	800d100 <RCCEx_PLL3_Config>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3dc:	e00a      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3e4:	e006      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3e6:	bf00      	nop
 800c3e8:	e004      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3ea:	bf00      	nop
 800c3ec:	e002      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3ee:	bf00      	nop
 800c3f0:	e000      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10b      	bne.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c3fc:	4ba1      	ldr	r3, [pc, #644]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c400:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c408:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c40c:	4a9d      	ldr	r2, [pc, #628]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c40e:	430b      	orrs	r3, r1
 800c410:	6593      	str	r3, [r2, #88]	; 0x58
 800c412:	e003      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c418:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f002 0308 	and.w	r3, r2, #8
 800c428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c432:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c436:	460b      	mov	r3, r1
 800c438:	4313      	orrs	r3, r2
 800c43a:	d01e      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c448:	d10c      	bne.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c44e:	3328      	adds	r3, #40	; 0x28
 800c450:	2102      	movs	r1, #2
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fe54 	bl	800d100 <RCCEx_PLL3_Config>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c464:	4b87      	ldr	r3, [pc, #540]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c468:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c46c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c474:	4a83      	ldr	r2, [pc, #524]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c476:	430b      	orrs	r3, r1
 800c478:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f002 0310 	and.w	r3, r2, #16
 800c486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c48a:	2300      	movs	r3, #0
 800c48c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c490:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c494:	460b      	mov	r3, r1
 800c496:	4313      	orrs	r3, r2
 800c498:	d01e      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c49a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c49e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a6:	d10c      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ac:	3328      	adds	r3, #40	; 0x28
 800c4ae:	2102      	movs	r1, #2
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 fe25 	bl	800d100 <RCCEx_PLL3_Config>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4c2:	4b70      	ldr	r3, [pc, #448]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4d2:	4a6c      	ldr	r2, [pc, #432]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c4e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	d03e      	beq.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c504:	d022      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c50a:	d81b      	bhi.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d003      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c514:	d00b      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c516:	e015      	b.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c51c:	3308      	adds	r3, #8
 800c51e:	2100      	movs	r1, #0
 800c520:	4618      	mov	r0, r3
 800c522:	f000 fd3b 	bl	800cf9c <RCCEx_PLL2_Config>
 800c526:	4603      	mov	r3, r0
 800c528:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c52c:	e00f      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c532:	3328      	adds	r3, #40	; 0x28
 800c534:	2102      	movs	r1, #2
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fde2 	bl	800d100 <RCCEx_PLL3_Config>
 800c53c:	4603      	mov	r3, r0
 800c53e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c542:	e004      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c54a:	e000      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c54c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c54e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10b      	bne.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c556:	4b4b      	ldr	r3, [pc, #300]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c55a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c55e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c562:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c566:	4a47      	ldr	r2, [pc, #284]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c568:	430b      	orrs	r3, r1
 800c56a:	6593      	str	r3, [r2, #88]	; 0x58
 800c56c:	e003      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c572:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c582:	67bb      	str	r3, [r7, #120]	; 0x78
 800c584:	2300      	movs	r3, #0
 800c586:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c588:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c58c:	460b      	mov	r3, r1
 800c58e:	4313      	orrs	r3, r2
 800c590:	d03b      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c59a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c59e:	d01f      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c5a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5a4:	d818      	bhi.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c5a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5aa:	d003      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c5ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5b0:	d007      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c5b2:	e011      	b.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5b4:	4b33      	ldr	r3, [pc, #204]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b8:	4a32      	ldr	r2, [pc, #200]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5c0:	e00f      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5c6:	3328      	adds	r3, #40	; 0x28
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f000 fd98 	bl	800d100 <RCCEx_PLL3_Config>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5d6:	e004      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5de:	e000      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10b      	bne.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5ea:	4b26      	ldr	r3, [pc, #152]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5fa:	4a22      	ldr	r2, [pc, #136]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	6553      	str	r3, [r2, #84]	; 0x54
 800c600:	e003      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c606:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c616:	673b      	str	r3, [r7, #112]	; 0x70
 800c618:	2300      	movs	r3, #0
 800c61a:	677b      	str	r3, [r7, #116]	; 0x74
 800c61c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c620:	460b      	mov	r3, r1
 800c622:	4313      	orrs	r3, r2
 800c624:	d034      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c62a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c634:	d007      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c636:	e011      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c638:	4b12      	ldr	r3, [pc, #72]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63c:	4a11      	ldr	r2, [pc, #68]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c644:	e00e      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c64a:	3308      	adds	r3, #8
 800c64c:	2102      	movs	r1, #2
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fca4 	bl	800cf9c <RCCEx_PLL2_Config>
 800c654:	4603      	mov	r3, r0
 800c656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c65a:	e003      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c664:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10d      	bne.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c66c:	4b05      	ldr	r3, [pc, #20]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c66e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c67a:	4a02      	ldr	r2, [pc, #8]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c67c:	430b      	orrs	r3, r1
 800c67e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c680:	e006      	b.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c682:	bf00      	nop
 800c684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c68c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c698:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c69c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c69e:	2300      	movs	r3, #0
 800c6a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	d00c      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6b0:	3328      	adds	r3, #40	; 0x28
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fd23 	bl	800d100 <RCCEx_PLL3_Config>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c6d2:	663b      	str	r3, [r7, #96]	; 0x60
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	667b      	str	r3, [r7, #100]	; 0x64
 800c6d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	d038      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6ee:	d018      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c6f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6f4:	d811      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6fa:	d014      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c6fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c700:	d80b      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c702:	2b00      	cmp	r3, #0
 800c704:	d011      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c70a:	d106      	bne.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c70c:	4bc3      	ldr	r3, [pc, #780]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c710:	4ac2      	ldr	r2, [pc, #776]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c718:	e008      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c720:	e004      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c722:	bf00      	nop
 800c724:	e002      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c726:	bf00      	nop
 800c728:	e000      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c72c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10b      	bne.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c734:	4bb9      	ldr	r3, [pc, #740]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c738:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c744:	4ab5      	ldr	r2, [pc, #724]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c746:	430b      	orrs	r3, r1
 800c748:	6553      	str	r3, [r2, #84]	; 0x54
 800c74a:	e003      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c750:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c760:	65bb      	str	r3, [r7, #88]	; 0x58
 800c762:	2300      	movs	r3, #0
 800c764:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c766:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c76a:	460b      	mov	r3, r1
 800c76c:	4313      	orrs	r3, r2
 800c76e:	d009      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c770:	4baa      	ldr	r3, [pc, #680]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c774:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77e:	4aa7      	ldr	r2, [pc, #668]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c780:	430b      	orrs	r3, r1
 800c782:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c790:	653b      	str	r3, [r7, #80]	; 0x50
 800c792:	2300      	movs	r3, #0
 800c794:	657b      	str	r3, [r7, #84]	; 0x54
 800c796:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c79a:	460b      	mov	r3, r1
 800c79c:	4313      	orrs	r3, r2
 800c79e:	d009      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c7a0:	4b9e      	ldr	r3, [pc, #632]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ae:	4a9b      	ldr	r2, [pc, #620]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	d009      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c7d0:	4b92      	ldr	r3, [pc, #584]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7d4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c7d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7de:	4a8f      	ldr	r2, [pc, #572]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7e0:	430b      	orrs	r3, r1
 800c7e2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c7f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	d00e      	beq.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c800:	4b86      	ldr	r3, [pc, #536]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	4a85      	ldr	r2, [pc, #532]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c80a:	6113      	str	r3, [r2, #16]
 800c80c:	4b83      	ldr	r3, [pc, #524]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c80e:	6919      	ldr	r1, [r3, #16]
 800c810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c814:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c818:	4a80      	ldr	r2, [pc, #512]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c81a:	430b      	orrs	r3, r1
 800c81c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c81e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c82a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c82c:	2300      	movs	r3, #0
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c830:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c834:	460b      	mov	r3, r1
 800c836:	4313      	orrs	r3, r2
 800c838:	d009      	beq.n	800c84e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c83a:	4b78      	ldr	r3, [pc, #480]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c848:	4a74      	ldr	r2, [pc, #464]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c84a:	430b      	orrs	r3, r1
 800c84c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c85a:	633b      	str	r3, [r7, #48]	; 0x30
 800c85c:	2300      	movs	r3, #0
 800c85e:	637b      	str	r3, [r7, #52]	; 0x34
 800c860:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c864:	460b      	mov	r3, r1
 800c866:	4313      	orrs	r3, r2
 800c868:	d00a      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c86a:	4b6c      	ldr	r3, [pc, #432]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c87a:	4a68      	ldr	r2, [pc, #416]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c87c:	430b      	orrs	r3, r1
 800c87e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	2100      	movs	r1, #0
 800c88a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c892:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c896:	460b      	mov	r3, r1
 800c898:	4313      	orrs	r3, r2
 800c89a:	d011      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 fb79 	bl	800cf9c <RCCEx_PLL2_Config>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c8b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	6239      	str	r1, [r7, #32]
 800c8cc:	f003 0302 	and.w	r3, r3, #2
 800c8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c8d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	d011      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8e0:	3308      	adds	r3, #8
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 fb59 	bl	800cf9c <RCCEx_PLL2_Config>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d003      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	2100      	movs	r1, #0
 800c90a:	61b9      	str	r1, [r7, #24]
 800c90c:	f003 0304 	and.w	r3, r3, #4
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c916:	460b      	mov	r3, r1
 800c918:	4313      	orrs	r3, r2
 800c91a:	d011      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c920:	3308      	adds	r3, #8
 800c922:	2102      	movs	r1, #2
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fb39 	bl	800cf9c <RCCEx_PLL2_Config>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c930:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c93c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	2100      	movs	r1, #0
 800c94a:	6139      	str	r1, [r7, #16]
 800c94c:	f003 0308 	and.w	r3, r3, #8
 800c950:	617b      	str	r3, [r7, #20]
 800c952:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c956:	460b      	mov	r3, r1
 800c958:	4313      	orrs	r3, r2
 800c95a:	d011      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c95c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c960:	3328      	adds	r3, #40	; 0x28
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fbcb 	bl	800d100 <RCCEx_PLL3_Config>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c97c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	2100      	movs	r1, #0
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	f003 0310 	and.w	r3, r3, #16
 800c990:	60fb      	str	r3, [r7, #12]
 800c992:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c996:	460b      	mov	r3, r1
 800c998:	4313      	orrs	r3, r2
 800c99a:	d011      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9a0:	3328      	adds	r3, #40	; 0x28
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 fbab 	bl	800d100 <RCCEx_PLL3_Config>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c9b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6039      	str	r1, [r7, #0]
 800c9cc:	f003 0320 	and.w	r3, r3, #32
 800c9d0:	607b      	str	r3, [r7, #4]
 800c9d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	d011      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9e0:	3328      	adds	r3, #40	; 0x28
 800c9e2:	2102      	movs	r1, #2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fb8b 	bl	800d100 <RCCEx_PLL3_Config>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c9f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d003      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800ca00:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d101      	bne.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e000      	b.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ca14:	46bd      	mov	sp, r7
 800ca16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca1a:	bf00      	nop
 800ca1c:	58024400 	.word	0x58024400

0800ca20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800ca24:	f7fe fde2 	bl	800b5ec <HAL_RCC_GetHCLKFreq>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	4b06      	ldr	r3, [pc, #24]	; (800ca44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ca2c:	6a1b      	ldr	r3, [r3, #32]
 800ca2e:	091b      	lsrs	r3, r3, #4
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	4904      	ldr	r1, [pc, #16]	; (800ca48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ca36:	5ccb      	ldrb	r3, [r1, r3]
 800ca38:	f003 031f 	and.w	r3, r3, #31
 800ca3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	58024400 	.word	0x58024400
 800ca48:	08010578 	.word	0x08010578

0800ca4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b089      	sub	sp, #36	; 0x24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca54:	4ba1      	ldr	r3, [pc, #644]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca58:	f003 0303 	and.w	r3, r3, #3
 800ca5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ca5e:	4b9f      	ldr	r3, [pc, #636]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca62:	0b1b      	lsrs	r3, r3, #12
 800ca64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ca6a:	4b9c      	ldr	r3, [pc, #624]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6e:	091b      	lsrs	r3, r3, #4
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ca76:	4b99      	ldr	r3, [pc, #612]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7a:	08db      	lsrs	r3, r3, #3
 800ca7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	fb02 f303 	mul.w	r3, r2, r3
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f000 8111 	beq.w	800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	f000 8083 	beq.w	800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	f200 80a1 	bhi.w	800cbec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d003      	beq.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d056      	beq.n	800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cab6:	e099      	b.n	800cbec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cab8:	4b88      	ldr	r3, [pc, #544]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 0320 	and.w	r3, r3, #32
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d02d      	beq.n	800cb20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cac4:	4b85      	ldr	r3, [pc, #532]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	08db      	lsrs	r3, r3, #3
 800caca:	f003 0303 	and.w	r3, r3, #3
 800cace:	4a84      	ldr	r2, [pc, #528]	; (800cce0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cad0:	fa22 f303 	lsr.w	r3, r2, r3
 800cad4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	ee07 3a90 	vmov	s15, r3
 800cadc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	ee07 3a90 	vmov	s15, r3
 800cae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caee:	4b7b      	ldr	r3, [pc, #492]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb1e:	e087      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cb2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb32:	4b6a      	ldr	r3, [pc, #424]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb62:	e065      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	ee07 3a90 	vmov	s15, r3
 800cb6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb76:	4b59      	ldr	r3, [pc, #356]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb7e:	ee07 3a90 	vmov	s15, r3
 800cb82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cba6:	e043      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cbb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbba:	4b48      	ldr	r3, [pc, #288]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbea:	e021      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	ee07 3a90 	vmov	s15, r3
 800cbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cbfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbfe:	4b37      	ldr	r3, [pc, #220]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc06:	ee07 3a90 	vmov	s15, r3
 800cc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cc30:	4b2a      	ldr	r3, [pc, #168]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc34:	0a5b      	lsrs	r3, r3, #9
 800cc36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc56:	ee17 2a90 	vmov	r2, s15
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cc5e:	4b1f      	ldr	r3, [pc, #124]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc62:	0c1b      	lsrs	r3, r3, #16
 800cc64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc68:	ee07 3a90 	vmov	s15, r3
 800cc6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc78:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc84:	ee17 2a90 	vmov	r2, s15
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cc8c:	4b13      	ldr	r3, [pc, #76]	; (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc90:	0e1b      	lsrs	r3, r3, #24
 800cc92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cca6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb2:	ee17 2a90 	vmov	r2, s15
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ccba:	e008      	b.n	800ccce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	609a      	str	r2, [r3, #8]
}
 800ccce:	bf00      	nop
 800ccd0:	3724      	adds	r7, #36	; 0x24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	58024400 	.word	0x58024400
 800cce0:	03d09000 	.word	0x03d09000
 800cce4:	46000000 	.word	0x46000000
 800cce8:	4c742400 	.word	0x4c742400
 800ccec:	4a742400 	.word	0x4a742400
 800ccf0:	4bb71b00 	.word	0x4bb71b00

0800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b089      	sub	sp, #36	; 0x24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccfc:	4ba1      	ldr	r3, [pc, #644]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd00:	f003 0303 	and.w	r3, r3, #3
 800cd04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cd06:	4b9f      	ldr	r3, [pc, #636]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0a:	0d1b      	lsrs	r3, r3, #20
 800cd0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cd12:	4b9c      	ldr	r3, [pc, #624]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cd1e:	4b99      	ldr	r3, [pc, #612]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd22:	08db      	lsrs	r3, r3, #3
 800cd24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	fb02 f303 	mul.w	r3, r2, r3
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 8111 	beq.w	800cf64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	f000 8083 	beq.w	800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	f200 80a1 	bhi.w	800ce94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d056      	beq.n	800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cd5e:	e099      	b.n	800ce94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd60:	4b88      	ldr	r3, [pc, #544]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f003 0320 	and.w	r3, r3, #32
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d02d      	beq.n	800cdc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd6c:	4b85      	ldr	r3, [pc, #532]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	08db      	lsrs	r3, r3, #3
 800cd72:	f003 0303 	and.w	r3, r3, #3
 800cd76:	4a84      	ldr	r2, [pc, #528]	; (800cf88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cd78:	fa22 f303 	lsr.w	r3, r2, r3
 800cd7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd96:	4b7b      	ldr	r3, [pc, #492]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd9e:	ee07 3a90 	vmov	s15, r3
 800cda2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cda6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cdc6:	e087      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cdd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdda:	4b6a      	ldr	r3, [pc, #424]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde2:	ee07 3a90 	vmov	s15, r3
 800cde6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdea:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce0a:	e065      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce1e:	4b59      	ldr	r3, [pc, #356]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce26:	ee07 3a90 	vmov	s15, r3
 800ce2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce4e:	e043      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ce5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce62:	4b48      	ldr	r3, [pc, #288]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce6a:	ee07 3a90 	vmov	s15, r3
 800ce6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce92:	e021      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cea6:	4b37      	ldr	r3, [pc, #220]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceae:	ee07 3a90 	vmov	s15, r3
 800ceb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ced6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ced8:	4b2a      	ldr	r3, [pc, #168]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cedc:	0a5b      	lsrs	r3, r3, #9
 800cede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cee2:	ee07 3a90 	vmov	s15, r3
 800cee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cef2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cefa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cefe:	ee17 2a90 	vmov	r2, s15
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cf06:	4b1f      	ldr	r3, [pc, #124]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0a:	0c1b      	lsrs	r3, r3, #16
 800cf0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf20:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf2c:	ee17 2a90 	vmov	r2, s15
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cf34:	4b13      	ldr	r3, [pc, #76]	; (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf38:	0e1b      	lsrs	r3, r3, #24
 800cf3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf3e:	ee07 3a90 	vmov	s15, r3
 800cf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf5a:	ee17 2a90 	vmov	r2, s15
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf62:	e008      	b.n	800cf76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	609a      	str	r2, [r3, #8]
}
 800cf76:	bf00      	nop
 800cf78:	3724      	adds	r7, #36	; 0x24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	58024400 	.word	0x58024400
 800cf88:	03d09000 	.word	0x03d09000
 800cf8c:	46000000 	.word	0x46000000
 800cf90:	4c742400 	.word	0x4c742400
 800cf94:	4a742400 	.word	0x4a742400
 800cf98:	4bb71b00 	.word	0x4bb71b00

0800cf9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfaa:	4b53      	ldr	r3, [pc, #332]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfae:	f003 0303 	and.w	r3, r3, #3
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d101      	bne.n	800cfba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e099      	b.n	800d0ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cfba:	4b4f      	ldr	r3, [pc, #316]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a4e      	ldr	r2, [pc, #312]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cfc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfc6:	f7f7 fa9d 	bl	8004504 <HAL_GetTick>
 800cfca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cfcc:	e008      	b.n	800cfe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cfce:	f7f7 fa99 	bl	8004504 <HAL_GetTick>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d901      	bls.n	800cfe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	e086      	b.n	800d0ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cfe0:	4b45      	ldr	r3, [pc, #276]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1f0      	bne.n	800cfce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cfec:	4b42      	ldr	r3, [pc, #264]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	031b      	lsls	r3, r3, #12
 800cffa:	493f      	ldr	r1, [pc, #252]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	628b      	str	r3, [r1, #40]	; 0x28
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	3b01      	subs	r3, #1
 800d006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	3b01      	subs	r3, #1
 800d010:	025b      	lsls	r3, r3, #9
 800d012:	b29b      	uxth	r3, r3
 800d014:	431a      	orrs	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	041b      	lsls	r3, r3, #16
 800d01e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d022:	431a      	orrs	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	3b01      	subs	r3, #1
 800d02a:	061b      	lsls	r3, r3, #24
 800d02c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d030:	4931      	ldr	r1, [pc, #196]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d032:	4313      	orrs	r3, r2
 800d034:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d036:	4b30      	ldr	r3, [pc, #192]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	492d      	ldr	r1, [pc, #180]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d044:	4313      	orrs	r3, r2
 800d046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d048:	4b2b      	ldr	r3, [pc, #172]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04c:	f023 0220 	bic.w	r2, r3, #32
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	4928      	ldr	r1, [pc, #160]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d056:	4313      	orrs	r3, r2
 800d058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d05a:	4b27      	ldr	r3, [pc, #156]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05e:	4a26      	ldr	r2, [pc, #152]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d060:	f023 0310 	bic.w	r3, r3, #16
 800d064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d066:	4b24      	ldr	r3, [pc, #144]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d06a:	4b24      	ldr	r3, [pc, #144]	; (800d0fc <RCCEx_PLL2_Config+0x160>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	69d2      	ldr	r2, [r2, #28]
 800d072:	00d2      	lsls	r2, r2, #3
 800d074:	4920      	ldr	r1, [pc, #128]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d076:	4313      	orrs	r3, r2
 800d078:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d07a:	4b1f      	ldr	r3, [pc, #124]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	4a1e      	ldr	r2, [pc, #120]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d080:	f043 0310 	orr.w	r3, r3, #16
 800d084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d08c:	4b1a      	ldr	r3, [pc, #104]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	4a19      	ldr	r2, [pc, #100]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d096:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d098:	e00f      	b.n	800d0ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d106      	bne.n	800d0ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0a0:	4b15      	ldr	r3, [pc, #84]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	4a14      	ldr	r2, [pc, #80]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0ac:	e005      	b.n	800d0ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d0ae:	4b12      	ldr	r3, [pc, #72]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b2:	4a11      	ldr	r2, [pc, #68]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a0e      	ldr	r2, [pc, #56]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0c6:	f7f7 fa1d 	bl	8004504 <HAL_GetTick>
 800d0ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0cc:	e008      	b.n	800d0e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0ce:	f7f7 fa19 	bl	8004504 <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d901      	bls.n	800d0e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e006      	b.n	800d0ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0e0:	4b05      	ldr	r3, [pc, #20]	; (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d0f0      	beq.n	800d0ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	ffff0007 	.word	0xffff0007

0800d100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d10e:	4b53      	ldr	r3, [pc, #332]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d112:	f003 0303 	and.w	r3, r3, #3
 800d116:	2b03      	cmp	r3, #3
 800d118:	d101      	bne.n	800d11e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e099      	b.n	800d252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d11e:	4b4f      	ldr	r3, [pc, #316]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a4e      	ldr	r2, [pc, #312]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d12a:	f7f7 f9eb 	bl	8004504 <HAL_GetTick>
 800d12e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d130:	e008      	b.n	800d144 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d132:	f7f7 f9e7 	bl	8004504 <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d901      	bls.n	800d144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d140:	2303      	movs	r3, #3
 800d142:	e086      	b.n	800d252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d144:	4b45      	ldr	r3, [pc, #276]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1f0      	bne.n	800d132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d150:	4b42      	ldr	r3, [pc, #264]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d154:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	051b      	lsls	r3, r3, #20
 800d15e:	493f      	ldr	r1, [pc, #252]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d160:	4313      	orrs	r3, r2
 800d162:	628b      	str	r3, [r1, #40]	; 0x28
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	3b01      	subs	r3, #1
 800d16a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	3b01      	subs	r3, #1
 800d174:	025b      	lsls	r3, r3, #9
 800d176:	b29b      	uxth	r3, r3
 800d178:	431a      	orrs	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	3b01      	subs	r3, #1
 800d180:	041b      	lsls	r3, r3, #16
 800d182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d186:	431a      	orrs	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	061b      	lsls	r3, r3, #24
 800d190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d194:	4931      	ldr	r1, [pc, #196]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d196:	4313      	orrs	r3, r2
 800d198:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d19a:	4b30      	ldr	r3, [pc, #192]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	492d      	ldr	r1, [pc, #180]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d1ac:	4b2b      	ldr	r3, [pc, #172]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	4928      	ldr	r1, [pc, #160]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d1be:	4b27      	ldr	r3, [pc, #156]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c2:	4a26      	ldr	r2, [pc, #152]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d1ca:	4b24      	ldr	r3, [pc, #144]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1ce:	4b24      	ldr	r3, [pc, #144]	; (800d260 <RCCEx_PLL3_Config+0x160>)
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	69d2      	ldr	r2, [r2, #28]
 800d1d6:	00d2      	lsls	r2, r2, #3
 800d1d8:	4920      	ldr	r1, [pc, #128]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d1de:	4b1f      	ldr	r3, [pc, #124]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	4a1e      	ldr	r2, [pc, #120]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d106      	bne.n	800d1fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d1f0:	4b1a      	ldr	r3, [pc, #104]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f4:	4a19      	ldr	r2, [pc, #100]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d1fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1fc:	e00f      	b.n	800d21e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d106      	bne.n	800d212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d204:	4b15      	ldr	r3, [pc, #84]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d208:	4a14      	ldr	r2, [pc, #80]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d20a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d20e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d210:	e005      	b.n	800d21e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d212:	4b12      	ldr	r3, [pc, #72]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d216:	4a11      	ldr	r2, [pc, #68]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d21c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d21e:	4b0f      	ldr	r3, [pc, #60]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a0e      	ldr	r2, [pc, #56]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d22a:	f7f7 f96b 	bl	8004504 <HAL_GetTick>
 800d22e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d230:	e008      	b.n	800d244 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d232:	f7f7 f967 	bl	8004504 <HAL_GetTick>
 800d236:	4602      	mov	r2, r0
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d901      	bls.n	800d244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d240:	2303      	movs	r3, #3
 800d242:	e006      	b.n	800d252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d244:	4b05      	ldr	r3, [pc, #20]	; (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d0f0      	beq.n	800d232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d250:	7bfb      	ldrb	r3, [r7, #15]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	58024400 	.word	0x58024400
 800d260:	ffff0007 	.word	0xffff0007

0800d264 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d074      	beq.n	800d360 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d106      	bne.n	800d290 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7f6 f834 	bl	80032f8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2202      	movs	r2, #2
 800d294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	f003 0310 	and.w	r3, r3, #16
 800d2a2:	2b10      	cmp	r3, #16
 800d2a4:	d053      	beq.n	800d34e <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	22ca      	movs	r2, #202	; 0xca
 800d2ac:	625a      	str	r2, [r3, #36]	; 0x24
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2253      	movs	r2, #83	; 0x53
 800d2b4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f87e 	bl	800d3b8 <RTC_EnterInitMode>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d124      	bne.n	800d310 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6999      	ldr	r1, [r3, #24]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	4b26      	ldr	r3, [pc, #152]	; (800d36c <HAL_RTC_Init+0x108>)
 800d2d2:	400b      	ands	r3, r1
 800d2d4:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6999      	ldr	r1, [r3, #24]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	431a      	orrs	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	430a      	orrs	r2, r1
 800d2f2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	0419      	lsls	r1, r3, #16
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	430a      	orrs	r2, r1
 800d304:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f88c 	bl	800d424 <RTC_ExitInitMode>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d310:	7bfb      	ldrb	r3, [r7, #15]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d116      	bne.n	800d344 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	699a      	ldr	r2, [r3, #24]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d324:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6999      	ldr	r1, [r3, #24]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a1a      	ldr	r2, [r3, #32]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	69db      	ldr	r3, [r3, #28]
 800d334:	431a      	orrs	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	431a      	orrs	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	430a      	orrs	r2, r1
 800d342:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	22ff      	movs	r2, #255	; 0xff
 800d34a:	625a      	str	r2, [r3, #36]	; 0x24
 800d34c:	e001      	b.n	800d352 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d34e:	2300      	movs	r3, #0
 800d350:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d103      	bne.n	800d360 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d360:	7bfb      	ldrb	r3, [r7, #15]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	fb8fffbf 	.word	0xfb8fffbf

0800d370 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a0d      	ldr	r2, [pc, #52]	; (800d3b4 <HAL_RTC_WaitForSynchro+0x44>)
 800d37e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d380:	f7f7 f8c0 	bl	8004504 <HAL_GetTick>
 800d384:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d386:	e009      	b.n	800d39c <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d388:	f7f7 f8bc 	bl	8004504 <HAL_GetTick>
 800d38c:	4602      	mov	r2, r0
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d396:	d901      	bls.n	800d39c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d398:	2303      	movs	r3, #3
 800d39a:	e007      	b.n	800d3ac <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f003 0320 	and.w	r3, r3, #32
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d0ee      	beq.n	800d388 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	0001005f 	.word	0x0001005f

0800d3b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d123      	bne.n	800d41a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68da      	ldr	r2, [r3, #12]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d3e2:	f7f7 f88f 	bl	8004504 <HAL_GetTick>
 800d3e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d3e8:	e00d      	b.n	800d406 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d3ea:	f7f7 f88b 	bl	8004504 <HAL_GetTick>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3f8:	d905      	bls.n	800d406 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2203      	movs	r2, #3
 800d402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d410:	2b00      	cmp	r3, #0
 800d412:	d102      	bne.n	800d41a <RTC_EnterInitMode+0x62>
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	2b03      	cmp	r3, #3
 800d418:	d1e7      	bne.n	800d3ea <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3710      	adds	r7, #16
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d42c:	2300      	movs	r3, #0
 800d42e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d430:	4b1a      	ldr	r3, [pc, #104]	; (800d49c <RTC_ExitInitMode+0x78>)
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	4a19      	ldr	r2, [pc, #100]	; (800d49c <RTC_ExitInitMode+0x78>)
 800d436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d43a:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d43c:	4b17      	ldr	r3, [pc, #92]	; (800d49c <RTC_ExitInitMode+0x78>)
 800d43e:	699b      	ldr	r3, [r3, #24]
 800d440:	f003 0320 	and.w	r3, r3, #32
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10c      	bne.n	800d462 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7ff ff91 	bl	800d370 <HAL_RTC_WaitForSynchro>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d01e      	beq.n	800d492 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2203      	movs	r2, #3
 800d458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d45c:	2303      	movs	r3, #3
 800d45e:	73fb      	strb	r3, [r7, #15]
 800d460:	e017      	b.n	800d492 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d462:	4b0e      	ldr	r3, [pc, #56]	; (800d49c <RTC_ExitInitMode+0x78>)
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	4a0d      	ldr	r2, [pc, #52]	; (800d49c <RTC_ExitInitMode+0x78>)
 800d468:	f023 0320 	bic.w	r3, r3, #32
 800d46c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7ff ff7e 	bl	800d370 <HAL_RTC_WaitForSynchro>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d005      	beq.n	800d486 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2203      	movs	r2, #3
 800d47e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d486:	4b05      	ldr	r3, [pc, #20]	; (800d49c <RTC_ExitInitMode+0x78>)
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	4a04      	ldr	r2, [pc, #16]	; (800d49c <RTC_ExitInitMode+0x78>)
 800d48c:	f043 0320 	orr.w	r3, r3, #32
 800d490:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d492:	7bfb      	ldrb	r3, [r7, #15]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	58004000 	.word	0x58004000

0800d4a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e02b      	b.n	800d50c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d106      	bne.n	800d4ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7f3 fc77 	bl	8000dbc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	3304      	adds	r3, #4
 800d4de:	4619      	mov	r1, r3
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	f001 ffdf 	bl	800f4a4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6818      	ldr	r0, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	f002 f833 	bl	800f55c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d4f6:	4b07      	ldr	r3, [pc, #28]	; (800d514 <HAL_SDRAM_Init+0x74>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a06      	ldr	r2, [pc, #24]	; (800d514 <HAL_SDRAM_Init+0x74>)
 800d4fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d500:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	52004000 	.word	0x52004000

0800d518 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d52a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d101      	bne.n	800d536 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d532:	2302      	movs	r3, #2
 800d534:	e021      	b.n	800d57a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d002      	beq.n	800d542 <HAL_SDRAM_SendCommand+0x2a>
 800d53c:	7dfb      	ldrb	r3, [r7, #23]
 800d53e:	2b05      	cmp	r3, #5
 800d540:	d118      	bne.n	800d574 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2202      	movs	r2, #2
 800d546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	68b9      	ldr	r1, [r7, #8]
 800d552:	4618      	mov	r0, r3
 800d554:	f002 f86c 	bl	800f630 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d104      	bne.n	800d56a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2205      	movs	r2, #5
 800d564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d568:	e006      	b.n	800d578 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d572:	e001      	b.n	800d578 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	e000      	b.n	800d57a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3718      	adds	r7, #24
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b082      	sub	sp, #8
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b02      	cmp	r3, #2
 800d596:	d101      	bne.n	800d59c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d598:	2302      	movs	r3, #2
 800d59a:	e016      	b.n	800d5ca <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d10f      	bne.n	800d5c8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f002 f85e 	bl	800f678 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e000      	b.n	800d5ca <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d5c8:	2301      	movs	r3, #1
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b082      	sub	sp, #8
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d101      	bne.n	800d5e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e042      	b.n	800d66a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7f6 fe62 	bl	80042c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2224      	movs	r2, #36	; 0x24
 800d600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f022 0201 	bic.w	r2, r2, #1
 800d612:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fd5d 	bl	800e0d4 <UART_SetConfig>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d101      	bne.n	800d624 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	e022      	b.n	800d66a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d002      	beq.n	800d632 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 fbbd 	bl	800edac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	685a      	ldr	r2, [r3, #4]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d640:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	689a      	ldr	r2, [r3, #8]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d650:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f042 0201 	orr.w	r2, r2, #1
 800d660:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f001 fc44 	bl	800eef0 <UART_CheckIdleState>
 800d668:	4603      	mov	r3, r0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b08a      	sub	sp, #40	; 0x28
 800d676:	af02      	add	r7, sp, #8
 800d678:	60f8      	str	r0, [r7, #12]
 800d67a:	60b9      	str	r1, [r7, #8]
 800d67c:	603b      	str	r3, [r7, #0]
 800d67e:	4613      	mov	r3, r2
 800d680:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d688:	2b20      	cmp	r3, #32
 800d68a:	d17b      	bne.n	800d784 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <HAL_UART_Transmit+0x26>
 800d692:	88fb      	ldrh	r3, [r7, #6]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	e074      	b.n	800d786 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2221      	movs	r2, #33	; 0x21
 800d6a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6ac:	f7f6 ff2a 	bl	8004504 <HAL_GetTick>
 800d6b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	88fa      	ldrh	r2, [r7, #6]
 800d6b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	88fa      	ldrh	r2, [r7, #6]
 800d6be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ca:	d108      	bne.n	800d6de <HAL_UART_Transmit+0x6c>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d104      	bne.n	800d6de <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	61bb      	str	r3, [r7, #24]
 800d6dc:	e003      	b.n	800d6e6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d6e6:	e030      	b.n	800d74a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	9300      	str	r3, [sp, #0]
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	2180      	movs	r1, #128	; 0x80
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f001 fca6 	bl	800f044 <UART_WaitOnFlagUntilTimeout>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d005      	beq.n	800d70a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2220      	movs	r2, #32
 800d702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e03d      	b.n	800d786 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10b      	bne.n	800d728 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	461a      	mov	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d71e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	3302      	adds	r3, #2
 800d724:	61bb      	str	r3, [r7, #24]
 800d726:	e007      	b.n	800d738 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	781a      	ldrb	r2, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	3301      	adds	r3, #1
 800d736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d73e:	b29b      	uxth	r3, r3
 800d740:	3b01      	subs	r3, #1
 800d742:	b29a      	uxth	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d750:	b29b      	uxth	r3, r3
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1c8      	bne.n	800d6e8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2200      	movs	r2, #0
 800d75e:	2140      	movs	r1, #64	; 0x40
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f001 fc6f 	bl	800f044 <UART_WaitOnFlagUntilTimeout>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d005      	beq.n	800d778 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2220      	movs	r2, #32
 800d770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d774:	2303      	movs	r3, #3
 800d776:	e006      	b.n	800d786 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2220      	movs	r2, #32
 800d77c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	e000      	b.n	800d786 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d784:	2302      	movs	r3, #2
  }
}
 800d786:	4618      	mov	r0, r3
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b08a      	sub	sp, #40	; 0x28
 800d792:	af02      	add	r7, sp, #8
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	603b      	str	r3, [r7, #0]
 800d79a:	4613      	mov	r3, r2
 800d79c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7a4:	2b20      	cmp	r3, #32
 800d7a6:	f040 80b5 	bne.w	800d914 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <HAL_UART_Receive+0x28>
 800d7b0:	88fb      	ldrh	r3, [r7, #6]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d101      	bne.n	800d7ba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e0ad      	b.n	800d916 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2222      	movs	r2, #34	; 0x22
 800d7c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7d0:	f7f6 fe98 	bl	8004504 <HAL_GetTick>
 800d7d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	88fa      	ldrh	r2, [r7, #6]
 800d7da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	88fa      	ldrh	r2, [r7, #6]
 800d7e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ee:	d10e      	bne.n	800d80e <HAL_UART_Receive+0x80>
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d105      	bne.n	800d804 <HAL_UART_Receive+0x76>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d7fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d802:	e02d      	b.n	800d860 <HAL_UART_Receive+0xd2>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	22ff      	movs	r2, #255	; 0xff
 800d808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d80c:	e028      	b.n	800d860 <HAL_UART_Receive+0xd2>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10d      	bne.n	800d832 <HAL_UART_Receive+0xa4>
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d104      	bne.n	800d828 <HAL_UART_Receive+0x9a>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	22ff      	movs	r2, #255	; 0xff
 800d822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d826:	e01b      	b.n	800d860 <HAL_UART_Receive+0xd2>
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	227f      	movs	r2, #127	; 0x7f
 800d82c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d830:	e016      	b.n	800d860 <HAL_UART_Receive+0xd2>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d83a:	d10d      	bne.n	800d858 <HAL_UART_Receive+0xca>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d104      	bne.n	800d84e <HAL_UART_Receive+0xc0>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	227f      	movs	r2, #127	; 0x7f
 800d848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d84c:	e008      	b.n	800d860 <HAL_UART_Receive+0xd2>
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	223f      	movs	r2, #63	; 0x3f
 800d852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d856:	e003      	b.n	800d860 <HAL_UART_Receive+0xd2>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d866:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d870:	d108      	bne.n	800d884 <HAL_UART_Receive+0xf6>
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d104      	bne.n	800d884 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	61bb      	str	r3, [r7, #24]
 800d882:	e003      	b.n	800d88c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d888:	2300      	movs	r3, #0
 800d88a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d88c:	e036      	b.n	800d8fc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	2200      	movs	r2, #0
 800d896:	2120      	movs	r1, #32
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f001 fbd3 	bl	800f044 <UART_WaitOnFlagUntilTimeout>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d005      	beq.n	800d8b0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2220      	movs	r2, #32
 800d8a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e032      	b.n	800d916 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10c      	bne.n	800d8d0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	8a7b      	ldrh	r3, [r7, #18]
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	3302      	adds	r3, #2
 800d8cc:	61bb      	str	r3, [r7, #24]
 800d8ce:	e00c      	b.n	800d8ea <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	8a7b      	ldrh	r3, [r7, #18]
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	4013      	ands	r3, r2
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d902:	b29b      	uxth	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1c2      	bne.n	800d88e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2220      	movs	r2, #32
 800d90c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d910:	2300      	movs	r3, #0
 800d912:	e000      	b.n	800d916 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d914:	2302      	movs	r3, #2
  }
}
 800d916:	4618      	mov	r0, r3
 800d918:	3720      	adds	r7, #32
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
	...

0800d920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b0ba      	sub	sp, #232	; 0xe8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	69db      	ldr	r3, [r3, #28]
 800d92e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d94a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d94e:	4013      	ands	r3, r2
 800d950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d11b      	bne.n	800d994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d960:	f003 0320 	and.w	r3, r3, #32
 800d964:	2b00      	cmp	r3, #0
 800d966:	d015      	beq.n	800d994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d96c:	f003 0320 	and.w	r3, r3, #32
 800d970:	2b00      	cmp	r3, #0
 800d972:	d105      	bne.n	800d980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d009      	beq.n	800d994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 8377 	beq.w	800e078 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	4798      	blx	r3
      }
      return;
 800d992:	e371      	b.n	800e078 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 8123 	beq.w	800dbe4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d99e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d9a2:	4b8d      	ldr	r3, [pc, #564]	; (800dbd8 <HAL_UART_IRQHandler+0x2b8>)
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d106      	bne.n	800d9b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d9aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d9ae:	4b8b      	ldr	r3, [pc, #556]	; (800dbdc <HAL_UART_IRQHandler+0x2bc>)
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f000 8116 	beq.w	800dbe4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9bc:	f003 0301 	and.w	r3, r3, #1
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d011      	beq.n	800d9e8 <HAL_UART_IRQHandler+0xc8>
 800d9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00b      	beq.n	800d9e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9de:	f043 0201 	orr.w	r2, r3, #1
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ec:	f003 0302 	and.w	r3, r3, #2
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d011      	beq.n	800da18 <HAL_UART_IRQHandler+0xf8>
 800d9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9f8:	f003 0301 	and.w	r3, r3, #1
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00b      	beq.n	800da18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2202      	movs	r2, #2
 800da06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da0e:	f043 0204 	orr.w	r2, r3, #4
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da1c:	f003 0304 	and.w	r3, r3, #4
 800da20:	2b00      	cmp	r3, #0
 800da22:	d011      	beq.n	800da48 <HAL_UART_IRQHandler+0x128>
 800da24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00b      	beq.n	800da48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2204      	movs	r2, #4
 800da36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da3e:	f043 0202 	orr.w	r2, r3, #2
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da4c:	f003 0308 	and.w	r3, r3, #8
 800da50:	2b00      	cmp	r3, #0
 800da52:	d017      	beq.n	800da84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da58:	f003 0320 	and.w	r3, r3, #32
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d105      	bne.n	800da6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800da60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800da64:	4b5c      	ldr	r3, [pc, #368]	; (800dbd8 <HAL_UART_IRQHandler+0x2b8>)
 800da66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00b      	beq.n	800da84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2208      	movs	r2, #8
 800da72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da7a:	f043 0208 	orr.w	r2, r3, #8
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800da84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d012      	beq.n	800dab6 <HAL_UART_IRQHandler+0x196>
 800da90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00c      	beq.n	800dab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800daa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daac:	f043 0220 	orr.w	r2, r3, #32
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f000 82dd 	beq.w	800e07c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dac6:	f003 0320 	and.w	r3, r3, #32
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d013      	beq.n	800daf6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dad2:	f003 0320 	and.w	r3, r3, #32
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d105      	bne.n	800dae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d007      	beq.n	800daf6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daea:	2b00      	cmp	r3, #0
 800daec:	d003      	beq.n	800daf6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dafc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db0a:	2b40      	cmp	r3, #64	; 0x40
 800db0c:	d005      	beq.n	800db1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db16:	2b00      	cmp	r3, #0
 800db18:	d054      	beq.n	800dbc4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f001 fafa 	bl	800f114 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db2a:	2b40      	cmp	r3, #64	; 0x40
 800db2c:	d146      	bne.n	800dbbc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	3308      	adds	r3, #8
 800db34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db3c:	e853 3f00 	ldrex	r3, [r3]
 800db40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800db44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3308      	adds	r3, #8
 800db56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800db66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db6a:	e841 2300 	strex	r3, r2, [r1]
 800db6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800db72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1d9      	bne.n	800db2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db80:	2b00      	cmp	r3, #0
 800db82:	d017      	beq.n	800dbb4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db8a:	4a15      	ldr	r2, [pc, #84]	; (800dbe0 <HAL_UART_IRQHandler+0x2c0>)
 800db8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db94:	4618      	mov	r0, r3
 800db96:	f7f8 f9db 	bl	8005f50 <HAL_DMA_Abort_IT>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d019      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dbae:	4610      	mov	r0, r2
 800dbb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbb2:	e00f      	b.n	800dbd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fa77 	bl	800e0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbba:	e00b      	b.n	800dbd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fa73 	bl	800e0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbc2:	e007      	b.n	800dbd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fa6f 	bl	800e0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800dbd2:	e253      	b.n	800e07c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbd4:	bf00      	nop
    return;
 800dbd6:	e251      	b.n	800e07c <HAL_UART_IRQHandler+0x75c>
 800dbd8:	10000001 	.word	0x10000001
 800dbdc:	04000120 	.word	0x04000120
 800dbe0:	0800f1e1 	.word	0x0800f1e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	f040 81e7 	bne.w	800dfbc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dbee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbf2:	f003 0310 	and.w	r3, r3, #16
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 81e0 	beq.w	800dfbc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc00:	f003 0310 	and.w	r3, r3, #16
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 81d9 	beq.w	800dfbc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2210      	movs	r2, #16
 800dc10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1c:	2b40      	cmp	r3, #64	; 0x40
 800dc1e:	f040 8151 	bne.w	800dec4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a96      	ldr	r2, [pc, #600]	; (800de84 <HAL_UART_IRQHandler+0x564>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d068      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a93      	ldr	r2, [pc, #588]	; (800de88 <HAL_UART_IRQHandler+0x568>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d061      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4a91      	ldr	r2, [pc, #580]	; (800de8c <HAL_UART_IRQHandler+0x56c>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d05a      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a8e      	ldr	r2, [pc, #568]	; (800de90 <HAL_UART_IRQHandler+0x570>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d053      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a8c      	ldr	r2, [pc, #560]	; (800de94 <HAL_UART_IRQHandler+0x574>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d04c      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a89      	ldr	r2, [pc, #548]	; (800de98 <HAL_UART_IRQHandler+0x578>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d045      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4a87      	ldr	r2, [pc, #540]	; (800de9c <HAL_UART_IRQHandler+0x57c>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d03e      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a84      	ldr	r2, [pc, #528]	; (800dea0 <HAL_UART_IRQHandler+0x580>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d037      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a82      	ldr	r2, [pc, #520]	; (800dea4 <HAL_UART_IRQHandler+0x584>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d030      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a7f      	ldr	r2, [pc, #508]	; (800dea8 <HAL_UART_IRQHandler+0x588>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d029      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a7d      	ldr	r2, [pc, #500]	; (800deac <HAL_UART_IRQHandler+0x58c>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d022      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a7a      	ldr	r2, [pc, #488]	; (800deb0 <HAL_UART_IRQHandler+0x590>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d01b      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a78      	ldr	r2, [pc, #480]	; (800deb4 <HAL_UART_IRQHandler+0x594>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d014      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a75      	ldr	r2, [pc, #468]	; (800deb8 <HAL_UART_IRQHandler+0x598>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d00d      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a73      	ldr	r2, [pc, #460]	; (800debc <HAL_UART_IRQHandler+0x59c>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d006      	beq.n	800dd02 <HAL_UART_IRQHandler+0x3e2>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a70      	ldr	r2, [pc, #448]	; (800dec0 <HAL_UART_IRQHandler+0x5a0>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d106      	bne.n	800dd10 <HAL_UART_IRQHandler+0x3f0>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	e005      	b.n	800dd1c <HAL_UART_IRQHandler+0x3fc>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 81ab 	beq.w	800e080 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd34:	429a      	cmp	r2, r3
 800dd36:	f080 81a3 	bcs.w	800e080 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd4a:	69db      	ldr	r3, [r3, #28]
 800dd4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd50:	f000 8087 	beq.w	800de62 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd60:	e853 3f00 	ldrex	r3, [r3]
 800dd64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dd7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd8e:	e841 2300 	strex	r3, r2, [r1]
 800dd92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dd96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1da      	bne.n	800dd54 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	3308      	adds	r3, #8
 800dda4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dda8:	e853 3f00 	ldrex	r3, [r3]
 800ddac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ddae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddb0:	f023 0301 	bic.w	r3, r3, #1
 800ddb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ddc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ddca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ddce:	e841 2300 	strex	r3, r2, [r1]
 800ddd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ddd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1e1      	bne.n	800dd9e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	3308      	adds	r3, #8
 800dde0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dde4:	e853 3f00 	ldrex	r3, [r3]
 800dde8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	3308      	adds	r3, #8
 800ddfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ddfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800de00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de06:	e841 2300 	strex	r3, r2, [r1]
 800de0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800de0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1e3      	bne.n	800ddda <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2220      	movs	r2, #32
 800de16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de28:	e853 3f00 	ldrex	r3, [r3]
 800de2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de30:	f023 0310 	bic.w	r3, r3, #16
 800de34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	461a      	mov	r2, r3
 800de3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de42:	65bb      	str	r3, [r7, #88]	; 0x58
 800de44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de4a:	e841 2300 	strex	r3, r2, [r1]
 800de4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1e4      	bne.n	800de20 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7f7 fd59 	bl	8005914 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2202      	movs	r2, #2
 800de66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de74:	b29b      	uxth	r3, r3
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	b29b      	uxth	r3, r3
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 f91d 	bl	800e0bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de82:	e0fd      	b.n	800e080 <HAL_UART_IRQHandler+0x760>
 800de84:	40020010 	.word	0x40020010
 800de88:	40020028 	.word	0x40020028
 800de8c:	40020040 	.word	0x40020040
 800de90:	40020058 	.word	0x40020058
 800de94:	40020070 	.word	0x40020070
 800de98:	40020088 	.word	0x40020088
 800de9c:	400200a0 	.word	0x400200a0
 800dea0:	400200b8 	.word	0x400200b8
 800dea4:	40020410 	.word	0x40020410
 800dea8:	40020428 	.word	0x40020428
 800deac:	40020440 	.word	0x40020440
 800deb0:	40020458 	.word	0x40020458
 800deb4:	40020470 	.word	0x40020470
 800deb8:	40020488 	.word	0x40020488
 800debc:	400204a0 	.word	0x400204a0
 800dec0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dede:	b29b      	uxth	r3, r3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f000 80cf 	beq.w	800e084 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800deea:	2b00      	cmp	r3, #0
 800deec:	f000 80ca 	beq.w	800e084 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def8:	e853 3f00 	ldrex	r3, [r3]
 800defc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800defe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	461a      	mov	r2, r3
 800df0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df12:	647b      	str	r3, [r7, #68]	; 0x44
 800df14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df1a:	e841 2300 	strex	r3, r2, [r1]
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df22:	2b00      	cmp	r3, #0
 800df24:	d1e4      	bne.n	800def0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3308      	adds	r3, #8
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	e853 3f00 	ldrex	r3, [r3]
 800df34:	623b      	str	r3, [r7, #32]
   return(result);
 800df36:	6a3a      	ldr	r2, [r7, #32]
 800df38:	4b55      	ldr	r3, [pc, #340]	; (800e090 <HAL_UART_IRQHandler+0x770>)
 800df3a:	4013      	ands	r3, r2
 800df3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3308      	adds	r3, #8
 800df46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df4a:	633a      	str	r2, [r7, #48]	; 0x30
 800df4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df52:	e841 2300 	strex	r3, r2, [r1]
 800df56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1e3      	bne.n	800df26 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2220      	movs	r2, #32
 800df62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	e853 3f00 	ldrex	r3, [r3]
 800df7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f023 0310 	bic.w	r3, r3, #16
 800df86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df94:	61fb      	str	r3, [r7, #28]
 800df96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df98:	69b9      	ldr	r1, [r7, #24]
 800df9a:	69fa      	ldr	r2, [r7, #28]
 800df9c:	e841 2300 	strex	r3, r2, [r1]
 800dfa0:	617b      	str	r3, [r7, #20]
   return(result);
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1e4      	bne.n	800df72 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2202      	movs	r2, #2
 800dfac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f881 	bl	800e0bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfba:	e063      	b.n	800e084 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dfbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00e      	beq.n	800dfe6 <HAL_UART_IRQHandler+0x6c6>
 800dfc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d008      	beq.n	800dfe6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dfdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f001 f93f 	bl	800f262 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfe4:	e051      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dfe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d014      	beq.n	800e01c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d105      	bne.n	800e00a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e006:	2b00      	cmp	r3, #0
 800e008:	d008      	beq.n	800e01c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d03a      	beq.n	800e088 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	4798      	blx	r3
    }
    return;
 800e01a:	e035      	b.n	800e088 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e024:	2b00      	cmp	r3, #0
 800e026:	d009      	beq.n	800e03c <HAL_UART_IRQHandler+0x71c>
 800e028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e030:	2b00      	cmp	r3, #0
 800e032:	d003      	beq.n	800e03c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f001 f8e9 	bl	800f20c <UART_EndTransmit_IT>
    return;
 800e03a:	e026      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d009      	beq.n	800e05c <HAL_UART_IRQHandler+0x73c>
 800e048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e04c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e050:	2b00      	cmp	r3, #0
 800e052:	d003      	beq.n	800e05c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f001 f918 	bl	800f28a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e05a:	e016      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d010      	beq.n	800e08a <HAL_UART_IRQHandler+0x76a>
 800e068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	da0c      	bge.n	800e08a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f001 f900 	bl	800f276 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e076:	e008      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
      return;
 800e078:	bf00      	nop
 800e07a:	e006      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
    return;
 800e07c:	bf00      	nop
 800e07e:	e004      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
      return;
 800e080:	bf00      	nop
 800e082:	e002      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
      return;
 800e084:	bf00      	nop
 800e086:	e000      	b.n	800e08a <HAL_UART_IRQHandler+0x76a>
    return;
 800e088:	bf00      	nop
  }
}
 800e08a:	37e8      	adds	r7, #232	; 0xe8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	effffffe 	.word	0xeffffffe

0800e094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e09c:	bf00      	nop
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e0b0:	bf00      	nop
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0d8:	b092      	sub	sp, #72	; 0x48
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	689a      	ldr	r2, [r3, #8]
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	431a      	orrs	r2, r3
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	431a      	orrs	r2, r3
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	4bbe      	ldr	r3, [pc, #760]	; (800e3fc <UART_SetConfig+0x328>)
 800e104:	4013      	ands	r3, r2
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	6812      	ldr	r2, [r2, #0]
 800e10a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e10c:	430b      	orrs	r3, r1
 800e10e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	68da      	ldr	r2, [r3, #12]
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	430a      	orrs	r2, r1
 800e124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4ab3      	ldr	r2, [pc, #716]	; (800e400 <UART_SetConfig+0x32c>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d004      	beq.n	800e140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	6a1b      	ldr	r3, [r3, #32]
 800e13a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e13c:	4313      	orrs	r3, r2
 800e13e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	689a      	ldr	r2, [r3, #8]
 800e146:	4baf      	ldr	r3, [pc, #700]	; (800e404 <UART_SetConfig+0x330>)
 800e148:	4013      	ands	r3, r2
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	6812      	ldr	r2, [r2, #0]
 800e14e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e150:	430b      	orrs	r3, r1
 800e152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15a:	f023 010f 	bic.w	r1, r3, #15
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	430a      	orrs	r2, r1
 800e168:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4aa6      	ldr	r2, [pc, #664]	; (800e408 <UART_SetConfig+0x334>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d177      	bne.n	800e264 <UART_SetConfig+0x190>
 800e174:	4ba5      	ldr	r3, [pc, #660]	; (800e40c <UART_SetConfig+0x338>)
 800e176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e17c:	2b28      	cmp	r3, #40	; 0x28
 800e17e:	d86d      	bhi.n	800e25c <UART_SetConfig+0x188>
 800e180:	a201      	add	r2, pc, #4	; (adr r2, 800e188 <UART_SetConfig+0xb4>)
 800e182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e186:	bf00      	nop
 800e188:	0800e22d 	.word	0x0800e22d
 800e18c:	0800e25d 	.word	0x0800e25d
 800e190:	0800e25d 	.word	0x0800e25d
 800e194:	0800e25d 	.word	0x0800e25d
 800e198:	0800e25d 	.word	0x0800e25d
 800e19c:	0800e25d 	.word	0x0800e25d
 800e1a0:	0800e25d 	.word	0x0800e25d
 800e1a4:	0800e25d 	.word	0x0800e25d
 800e1a8:	0800e235 	.word	0x0800e235
 800e1ac:	0800e25d 	.word	0x0800e25d
 800e1b0:	0800e25d 	.word	0x0800e25d
 800e1b4:	0800e25d 	.word	0x0800e25d
 800e1b8:	0800e25d 	.word	0x0800e25d
 800e1bc:	0800e25d 	.word	0x0800e25d
 800e1c0:	0800e25d 	.word	0x0800e25d
 800e1c4:	0800e25d 	.word	0x0800e25d
 800e1c8:	0800e23d 	.word	0x0800e23d
 800e1cc:	0800e25d 	.word	0x0800e25d
 800e1d0:	0800e25d 	.word	0x0800e25d
 800e1d4:	0800e25d 	.word	0x0800e25d
 800e1d8:	0800e25d 	.word	0x0800e25d
 800e1dc:	0800e25d 	.word	0x0800e25d
 800e1e0:	0800e25d 	.word	0x0800e25d
 800e1e4:	0800e25d 	.word	0x0800e25d
 800e1e8:	0800e245 	.word	0x0800e245
 800e1ec:	0800e25d 	.word	0x0800e25d
 800e1f0:	0800e25d 	.word	0x0800e25d
 800e1f4:	0800e25d 	.word	0x0800e25d
 800e1f8:	0800e25d 	.word	0x0800e25d
 800e1fc:	0800e25d 	.word	0x0800e25d
 800e200:	0800e25d 	.word	0x0800e25d
 800e204:	0800e25d 	.word	0x0800e25d
 800e208:	0800e24d 	.word	0x0800e24d
 800e20c:	0800e25d 	.word	0x0800e25d
 800e210:	0800e25d 	.word	0x0800e25d
 800e214:	0800e25d 	.word	0x0800e25d
 800e218:	0800e25d 	.word	0x0800e25d
 800e21c:	0800e25d 	.word	0x0800e25d
 800e220:	0800e25d 	.word	0x0800e25d
 800e224:	0800e25d 	.word	0x0800e25d
 800e228:	0800e255 	.word	0x0800e255
 800e22c:	2301      	movs	r3, #1
 800e22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e232:	e326      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e234:	2304      	movs	r3, #4
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e322      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e23c:	2308      	movs	r3, #8
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e31e      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e244:	2310      	movs	r3, #16
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e31a      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e24c:	2320      	movs	r3, #32
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e316      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e254:	2340      	movs	r3, #64	; 0x40
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e312      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e25c:	2380      	movs	r3, #128	; 0x80
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e30e      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a69      	ldr	r2, [pc, #420]	; (800e410 <UART_SetConfig+0x33c>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d130      	bne.n	800e2d0 <UART_SetConfig+0x1fc>
 800e26e:	4b67      	ldr	r3, [pc, #412]	; (800e40c <UART_SetConfig+0x338>)
 800e270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e272:	f003 0307 	and.w	r3, r3, #7
 800e276:	2b05      	cmp	r3, #5
 800e278:	d826      	bhi.n	800e2c8 <UART_SetConfig+0x1f4>
 800e27a:	a201      	add	r2, pc, #4	; (adr r2, 800e280 <UART_SetConfig+0x1ac>)
 800e27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e280:	0800e299 	.word	0x0800e299
 800e284:	0800e2a1 	.word	0x0800e2a1
 800e288:	0800e2a9 	.word	0x0800e2a9
 800e28c:	0800e2b1 	.word	0x0800e2b1
 800e290:	0800e2b9 	.word	0x0800e2b9
 800e294:	0800e2c1 	.word	0x0800e2c1
 800e298:	2300      	movs	r3, #0
 800e29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29e:	e2f0      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e2a0:	2304      	movs	r3, #4
 800e2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a6:	e2ec      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e2a8:	2308      	movs	r3, #8
 800e2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ae:	e2e8      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e2b0:	2310      	movs	r3, #16
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b6:	e2e4      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e2b8:	2320      	movs	r3, #32
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2be:	e2e0      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e2c0:	2340      	movs	r3, #64	; 0x40
 800e2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c6:	e2dc      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e2c8:	2380      	movs	r3, #128	; 0x80
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ce:	e2d8      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a4f      	ldr	r2, [pc, #316]	; (800e414 <UART_SetConfig+0x340>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d130      	bne.n	800e33c <UART_SetConfig+0x268>
 800e2da:	4b4c      	ldr	r3, [pc, #304]	; (800e40c <UART_SetConfig+0x338>)
 800e2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2de:	f003 0307 	and.w	r3, r3, #7
 800e2e2:	2b05      	cmp	r3, #5
 800e2e4:	d826      	bhi.n	800e334 <UART_SetConfig+0x260>
 800e2e6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ec <UART_SetConfig+0x218>)
 800e2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ec:	0800e305 	.word	0x0800e305
 800e2f0:	0800e30d 	.word	0x0800e30d
 800e2f4:	0800e315 	.word	0x0800e315
 800e2f8:	0800e31d 	.word	0x0800e31d
 800e2fc:	0800e325 	.word	0x0800e325
 800e300:	0800e32d 	.word	0x0800e32d
 800e304:	2300      	movs	r3, #0
 800e306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30a:	e2ba      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e30c:	2304      	movs	r3, #4
 800e30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e312:	e2b6      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e314:	2308      	movs	r3, #8
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e2b2      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e31c:	2310      	movs	r3, #16
 800e31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e322:	e2ae      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e324:	2320      	movs	r3, #32
 800e326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32a:	e2aa      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e32c:	2340      	movs	r3, #64	; 0x40
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e332:	e2a6      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e334:	2380      	movs	r3, #128	; 0x80
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e2a2      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a35      	ldr	r2, [pc, #212]	; (800e418 <UART_SetConfig+0x344>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d130      	bne.n	800e3a8 <UART_SetConfig+0x2d4>
 800e346:	4b31      	ldr	r3, [pc, #196]	; (800e40c <UART_SetConfig+0x338>)
 800e348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e34a:	f003 0307 	and.w	r3, r3, #7
 800e34e:	2b05      	cmp	r3, #5
 800e350:	d826      	bhi.n	800e3a0 <UART_SetConfig+0x2cc>
 800e352:	a201      	add	r2, pc, #4	; (adr r2, 800e358 <UART_SetConfig+0x284>)
 800e354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e358:	0800e371 	.word	0x0800e371
 800e35c:	0800e379 	.word	0x0800e379
 800e360:	0800e381 	.word	0x0800e381
 800e364:	0800e389 	.word	0x0800e389
 800e368:	0800e391 	.word	0x0800e391
 800e36c:	0800e399 	.word	0x0800e399
 800e370:	2300      	movs	r3, #0
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e284      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e378:	2304      	movs	r3, #4
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37e:	e280      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e380:	2308      	movs	r3, #8
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e27c      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e388:	2310      	movs	r3, #16
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e278      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e390:	2320      	movs	r3, #32
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e274      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e398:	2340      	movs	r3, #64	; 0x40
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e270      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e3a0:	2380      	movs	r3, #128	; 0x80
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e26c      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a1b      	ldr	r2, [pc, #108]	; (800e41c <UART_SetConfig+0x348>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d142      	bne.n	800e438 <UART_SetConfig+0x364>
 800e3b2:	4b16      	ldr	r3, [pc, #88]	; (800e40c <UART_SetConfig+0x338>)
 800e3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b6:	f003 0307 	and.w	r3, r3, #7
 800e3ba:	2b05      	cmp	r3, #5
 800e3bc:	d838      	bhi.n	800e430 <UART_SetConfig+0x35c>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <UART_SetConfig+0x2f0>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e3dd 	.word	0x0800e3dd
 800e3c8:	0800e3e5 	.word	0x0800e3e5
 800e3cc:	0800e3ed 	.word	0x0800e3ed
 800e3d0:	0800e3f5 	.word	0x0800e3f5
 800e3d4:	0800e421 	.word	0x0800e421
 800e3d8:	0800e429 	.word	0x0800e429
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e24e      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e3e4:	2304      	movs	r3, #4
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e24a      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e3ec:	2308      	movs	r3, #8
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e246      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e3f4:	2310      	movs	r3, #16
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e242      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e3fc:	cfff69f3 	.word	0xcfff69f3
 800e400:	58000c00 	.word	0x58000c00
 800e404:	11fff4ff 	.word	0x11fff4ff
 800e408:	40011000 	.word	0x40011000
 800e40c:	58024400 	.word	0x58024400
 800e410:	40004400 	.word	0x40004400
 800e414:	40004800 	.word	0x40004800
 800e418:	40004c00 	.word	0x40004c00
 800e41c:	40005000 	.word	0x40005000
 800e420:	2320      	movs	r3, #32
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e22c      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e428:	2340      	movs	r3, #64	; 0x40
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e228      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e430:	2380      	movs	r3, #128	; 0x80
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e224      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4ab1      	ldr	r2, [pc, #708]	; (800e704 <UART_SetConfig+0x630>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d176      	bne.n	800e530 <UART_SetConfig+0x45c>
 800e442:	4bb1      	ldr	r3, [pc, #708]	; (800e708 <UART_SetConfig+0x634>)
 800e444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e44a:	2b28      	cmp	r3, #40	; 0x28
 800e44c:	d86c      	bhi.n	800e528 <UART_SetConfig+0x454>
 800e44e:	a201      	add	r2, pc, #4	; (adr r2, 800e454 <UART_SetConfig+0x380>)
 800e450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e454:	0800e4f9 	.word	0x0800e4f9
 800e458:	0800e529 	.word	0x0800e529
 800e45c:	0800e529 	.word	0x0800e529
 800e460:	0800e529 	.word	0x0800e529
 800e464:	0800e529 	.word	0x0800e529
 800e468:	0800e529 	.word	0x0800e529
 800e46c:	0800e529 	.word	0x0800e529
 800e470:	0800e529 	.word	0x0800e529
 800e474:	0800e501 	.word	0x0800e501
 800e478:	0800e529 	.word	0x0800e529
 800e47c:	0800e529 	.word	0x0800e529
 800e480:	0800e529 	.word	0x0800e529
 800e484:	0800e529 	.word	0x0800e529
 800e488:	0800e529 	.word	0x0800e529
 800e48c:	0800e529 	.word	0x0800e529
 800e490:	0800e529 	.word	0x0800e529
 800e494:	0800e509 	.word	0x0800e509
 800e498:	0800e529 	.word	0x0800e529
 800e49c:	0800e529 	.word	0x0800e529
 800e4a0:	0800e529 	.word	0x0800e529
 800e4a4:	0800e529 	.word	0x0800e529
 800e4a8:	0800e529 	.word	0x0800e529
 800e4ac:	0800e529 	.word	0x0800e529
 800e4b0:	0800e529 	.word	0x0800e529
 800e4b4:	0800e511 	.word	0x0800e511
 800e4b8:	0800e529 	.word	0x0800e529
 800e4bc:	0800e529 	.word	0x0800e529
 800e4c0:	0800e529 	.word	0x0800e529
 800e4c4:	0800e529 	.word	0x0800e529
 800e4c8:	0800e529 	.word	0x0800e529
 800e4cc:	0800e529 	.word	0x0800e529
 800e4d0:	0800e529 	.word	0x0800e529
 800e4d4:	0800e519 	.word	0x0800e519
 800e4d8:	0800e529 	.word	0x0800e529
 800e4dc:	0800e529 	.word	0x0800e529
 800e4e0:	0800e529 	.word	0x0800e529
 800e4e4:	0800e529 	.word	0x0800e529
 800e4e8:	0800e529 	.word	0x0800e529
 800e4ec:	0800e529 	.word	0x0800e529
 800e4f0:	0800e529 	.word	0x0800e529
 800e4f4:	0800e521 	.word	0x0800e521
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e1c0      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e500:	2304      	movs	r3, #4
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e1bc      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e508:	2308      	movs	r3, #8
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e1b8      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e510:	2310      	movs	r3, #16
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e1b4      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e518:	2320      	movs	r3, #32
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e1b0      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e520:	2340      	movs	r3, #64	; 0x40
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e1ac      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e528:	2380      	movs	r3, #128	; 0x80
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e1a8      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a75      	ldr	r2, [pc, #468]	; (800e70c <UART_SetConfig+0x638>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d130      	bne.n	800e59c <UART_SetConfig+0x4c8>
 800e53a:	4b73      	ldr	r3, [pc, #460]	; (800e708 <UART_SetConfig+0x634>)
 800e53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e53e:	f003 0307 	and.w	r3, r3, #7
 800e542:	2b05      	cmp	r3, #5
 800e544:	d826      	bhi.n	800e594 <UART_SetConfig+0x4c0>
 800e546:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <UART_SetConfig+0x478>)
 800e548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54c:	0800e565 	.word	0x0800e565
 800e550:	0800e56d 	.word	0x0800e56d
 800e554:	0800e575 	.word	0x0800e575
 800e558:	0800e57d 	.word	0x0800e57d
 800e55c:	0800e585 	.word	0x0800e585
 800e560:	0800e58d 	.word	0x0800e58d
 800e564:	2300      	movs	r3, #0
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e18a      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e56c:	2304      	movs	r3, #4
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e572:	e186      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e574:	2308      	movs	r3, #8
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e182      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e57c:	2310      	movs	r3, #16
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e17e      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e584:	2320      	movs	r3, #32
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e17a      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e58c:	2340      	movs	r3, #64	; 0x40
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e176      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e594:	2380      	movs	r3, #128	; 0x80
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59a:	e172      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a5b      	ldr	r2, [pc, #364]	; (800e710 <UART_SetConfig+0x63c>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d130      	bne.n	800e608 <UART_SetConfig+0x534>
 800e5a6:	4b58      	ldr	r3, [pc, #352]	; (800e708 <UART_SetConfig+0x634>)
 800e5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5aa:	f003 0307 	and.w	r3, r3, #7
 800e5ae:	2b05      	cmp	r3, #5
 800e5b0:	d826      	bhi.n	800e600 <UART_SetConfig+0x52c>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <UART_SetConfig+0x4e4>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5d1 	.word	0x0800e5d1
 800e5bc:	0800e5d9 	.word	0x0800e5d9
 800e5c0:	0800e5e1 	.word	0x0800e5e1
 800e5c4:	0800e5e9 	.word	0x0800e5e9
 800e5c8:	0800e5f1 	.word	0x0800e5f1
 800e5cc:	0800e5f9 	.word	0x0800e5f9
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e154      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e5d8:	2304      	movs	r3, #4
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e150      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e5e0:	2308      	movs	r3, #8
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e14c      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e5e8:	2310      	movs	r3, #16
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e148      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e5f0:	2320      	movs	r3, #32
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e144      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e5f8:	2340      	movs	r3, #64	; 0x40
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e140      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e600:	2380      	movs	r3, #128	; 0x80
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e13c      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a41      	ldr	r2, [pc, #260]	; (800e714 <UART_SetConfig+0x640>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	f040 8082 	bne.w	800e718 <UART_SetConfig+0x644>
 800e614:	4b3c      	ldr	r3, [pc, #240]	; (800e708 <UART_SetConfig+0x634>)
 800e616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e61c:	2b28      	cmp	r3, #40	; 0x28
 800e61e:	d86d      	bhi.n	800e6fc <UART_SetConfig+0x628>
 800e620:	a201      	add	r2, pc, #4	; (adr r2, 800e628 <UART_SetConfig+0x554>)
 800e622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e626:	bf00      	nop
 800e628:	0800e6cd 	.word	0x0800e6cd
 800e62c:	0800e6fd 	.word	0x0800e6fd
 800e630:	0800e6fd 	.word	0x0800e6fd
 800e634:	0800e6fd 	.word	0x0800e6fd
 800e638:	0800e6fd 	.word	0x0800e6fd
 800e63c:	0800e6fd 	.word	0x0800e6fd
 800e640:	0800e6fd 	.word	0x0800e6fd
 800e644:	0800e6fd 	.word	0x0800e6fd
 800e648:	0800e6d5 	.word	0x0800e6d5
 800e64c:	0800e6fd 	.word	0x0800e6fd
 800e650:	0800e6fd 	.word	0x0800e6fd
 800e654:	0800e6fd 	.word	0x0800e6fd
 800e658:	0800e6fd 	.word	0x0800e6fd
 800e65c:	0800e6fd 	.word	0x0800e6fd
 800e660:	0800e6fd 	.word	0x0800e6fd
 800e664:	0800e6fd 	.word	0x0800e6fd
 800e668:	0800e6dd 	.word	0x0800e6dd
 800e66c:	0800e6fd 	.word	0x0800e6fd
 800e670:	0800e6fd 	.word	0x0800e6fd
 800e674:	0800e6fd 	.word	0x0800e6fd
 800e678:	0800e6fd 	.word	0x0800e6fd
 800e67c:	0800e6fd 	.word	0x0800e6fd
 800e680:	0800e6fd 	.word	0x0800e6fd
 800e684:	0800e6fd 	.word	0x0800e6fd
 800e688:	0800e6e5 	.word	0x0800e6e5
 800e68c:	0800e6fd 	.word	0x0800e6fd
 800e690:	0800e6fd 	.word	0x0800e6fd
 800e694:	0800e6fd 	.word	0x0800e6fd
 800e698:	0800e6fd 	.word	0x0800e6fd
 800e69c:	0800e6fd 	.word	0x0800e6fd
 800e6a0:	0800e6fd 	.word	0x0800e6fd
 800e6a4:	0800e6fd 	.word	0x0800e6fd
 800e6a8:	0800e6ed 	.word	0x0800e6ed
 800e6ac:	0800e6fd 	.word	0x0800e6fd
 800e6b0:	0800e6fd 	.word	0x0800e6fd
 800e6b4:	0800e6fd 	.word	0x0800e6fd
 800e6b8:	0800e6fd 	.word	0x0800e6fd
 800e6bc:	0800e6fd 	.word	0x0800e6fd
 800e6c0:	0800e6fd 	.word	0x0800e6fd
 800e6c4:	0800e6fd 	.word	0x0800e6fd
 800e6c8:	0800e6f5 	.word	0x0800e6f5
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d2:	e0d6      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e6d4:	2304      	movs	r3, #4
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6da:	e0d2      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e6dc:	2308      	movs	r3, #8
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e0ce      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e6e4:	2310      	movs	r3, #16
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e0ca      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e6ec:	2320      	movs	r3, #32
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f2:	e0c6      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e6f4:	2340      	movs	r3, #64	; 0x40
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fa:	e0c2      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e6fc:	2380      	movs	r3, #128	; 0x80
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e0be      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e704:	40011400 	.word	0x40011400
 800e708:	58024400 	.word	0x58024400
 800e70c:	40007800 	.word	0x40007800
 800e710:	40007c00 	.word	0x40007c00
 800e714:	40011800 	.word	0x40011800
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4aad      	ldr	r2, [pc, #692]	; (800e9d4 <UART_SetConfig+0x900>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d176      	bne.n	800e810 <UART_SetConfig+0x73c>
 800e722:	4bad      	ldr	r3, [pc, #692]	; (800e9d8 <UART_SetConfig+0x904>)
 800e724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e72a:	2b28      	cmp	r3, #40	; 0x28
 800e72c:	d86c      	bhi.n	800e808 <UART_SetConfig+0x734>
 800e72e:	a201      	add	r2, pc, #4	; (adr r2, 800e734 <UART_SetConfig+0x660>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e7d9 	.word	0x0800e7d9
 800e738:	0800e809 	.word	0x0800e809
 800e73c:	0800e809 	.word	0x0800e809
 800e740:	0800e809 	.word	0x0800e809
 800e744:	0800e809 	.word	0x0800e809
 800e748:	0800e809 	.word	0x0800e809
 800e74c:	0800e809 	.word	0x0800e809
 800e750:	0800e809 	.word	0x0800e809
 800e754:	0800e7e1 	.word	0x0800e7e1
 800e758:	0800e809 	.word	0x0800e809
 800e75c:	0800e809 	.word	0x0800e809
 800e760:	0800e809 	.word	0x0800e809
 800e764:	0800e809 	.word	0x0800e809
 800e768:	0800e809 	.word	0x0800e809
 800e76c:	0800e809 	.word	0x0800e809
 800e770:	0800e809 	.word	0x0800e809
 800e774:	0800e7e9 	.word	0x0800e7e9
 800e778:	0800e809 	.word	0x0800e809
 800e77c:	0800e809 	.word	0x0800e809
 800e780:	0800e809 	.word	0x0800e809
 800e784:	0800e809 	.word	0x0800e809
 800e788:	0800e809 	.word	0x0800e809
 800e78c:	0800e809 	.word	0x0800e809
 800e790:	0800e809 	.word	0x0800e809
 800e794:	0800e7f1 	.word	0x0800e7f1
 800e798:	0800e809 	.word	0x0800e809
 800e79c:	0800e809 	.word	0x0800e809
 800e7a0:	0800e809 	.word	0x0800e809
 800e7a4:	0800e809 	.word	0x0800e809
 800e7a8:	0800e809 	.word	0x0800e809
 800e7ac:	0800e809 	.word	0x0800e809
 800e7b0:	0800e809 	.word	0x0800e809
 800e7b4:	0800e7f9 	.word	0x0800e7f9
 800e7b8:	0800e809 	.word	0x0800e809
 800e7bc:	0800e809 	.word	0x0800e809
 800e7c0:	0800e809 	.word	0x0800e809
 800e7c4:	0800e809 	.word	0x0800e809
 800e7c8:	0800e809 	.word	0x0800e809
 800e7cc:	0800e809 	.word	0x0800e809
 800e7d0:	0800e809 	.word	0x0800e809
 800e7d4:	0800e801 	.word	0x0800e801
 800e7d8:	2301      	movs	r3, #1
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7de:	e050      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e7e0:	2304      	movs	r3, #4
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e6:	e04c      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e7e8:	2308      	movs	r3, #8
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e048      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e7f0:	2310      	movs	r3, #16
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e044      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e7f8:	2320      	movs	r3, #32
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e040      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e800:	2340      	movs	r3, #64	; 0x40
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e03c      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e808:	2380      	movs	r3, #128	; 0x80
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e038      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a71      	ldr	r2, [pc, #452]	; (800e9dc <UART_SetConfig+0x908>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d130      	bne.n	800e87c <UART_SetConfig+0x7a8>
 800e81a:	4b6f      	ldr	r3, [pc, #444]	; (800e9d8 <UART_SetConfig+0x904>)
 800e81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e81e:	f003 0307 	and.w	r3, r3, #7
 800e822:	2b05      	cmp	r3, #5
 800e824:	d826      	bhi.n	800e874 <UART_SetConfig+0x7a0>
 800e826:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <UART_SetConfig+0x758>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e845 	.word	0x0800e845
 800e830:	0800e84d 	.word	0x0800e84d
 800e834:	0800e855 	.word	0x0800e855
 800e838:	0800e85d 	.word	0x0800e85d
 800e83c:	0800e865 	.word	0x0800e865
 800e840:	0800e86d 	.word	0x0800e86d
 800e844:	2302      	movs	r3, #2
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e01a      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e84c:	2304      	movs	r3, #4
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e016      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e854:	2308      	movs	r3, #8
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e012      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e85c:	2310      	movs	r3, #16
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e00e      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e864:	2320      	movs	r3, #32
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e00a      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e86c:	2340      	movs	r3, #64	; 0x40
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e006      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e874:	2380      	movs	r3, #128	; 0x80
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87a:	e002      	b.n	800e882 <UART_SetConfig+0x7ae>
 800e87c:	2380      	movs	r3, #128	; 0x80
 800e87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a55      	ldr	r2, [pc, #340]	; (800e9dc <UART_SetConfig+0x908>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	f040 80f8 	bne.w	800ea7e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e88e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e892:	2b20      	cmp	r3, #32
 800e894:	dc46      	bgt.n	800e924 <UART_SetConfig+0x850>
 800e896:	2b02      	cmp	r3, #2
 800e898:	db75      	blt.n	800e986 <UART_SetConfig+0x8b2>
 800e89a:	3b02      	subs	r3, #2
 800e89c:	2b1e      	cmp	r3, #30
 800e89e:	d872      	bhi.n	800e986 <UART_SetConfig+0x8b2>
 800e8a0:	a201      	add	r2, pc, #4	; (adr r2, 800e8a8 <UART_SetConfig+0x7d4>)
 800e8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a6:	bf00      	nop
 800e8a8:	0800e92b 	.word	0x0800e92b
 800e8ac:	0800e987 	.word	0x0800e987
 800e8b0:	0800e933 	.word	0x0800e933
 800e8b4:	0800e987 	.word	0x0800e987
 800e8b8:	0800e987 	.word	0x0800e987
 800e8bc:	0800e987 	.word	0x0800e987
 800e8c0:	0800e943 	.word	0x0800e943
 800e8c4:	0800e987 	.word	0x0800e987
 800e8c8:	0800e987 	.word	0x0800e987
 800e8cc:	0800e987 	.word	0x0800e987
 800e8d0:	0800e987 	.word	0x0800e987
 800e8d4:	0800e987 	.word	0x0800e987
 800e8d8:	0800e987 	.word	0x0800e987
 800e8dc:	0800e987 	.word	0x0800e987
 800e8e0:	0800e953 	.word	0x0800e953
 800e8e4:	0800e987 	.word	0x0800e987
 800e8e8:	0800e987 	.word	0x0800e987
 800e8ec:	0800e987 	.word	0x0800e987
 800e8f0:	0800e987 	.word	0x0800e987
 800e8f4:	0800e987 	.word	0x0800e987
 800e8f8:	0800e987 	.word	0x0800e987
 800e8fc:	0800e987 	.word	0x0800e987
 800e900:	0800e987 	.word	0x0800e987
 800e904:	0800e987 	.word	0x0800e987
 800e908:	0800e987 	.word	0x0800e987
 800e90c:	0800e987 	.word	0x0800e987
 800e910:	0800e987 	.word	0x0800e987
 800e914:	0800e987 	.word	0x0800e987
 800e918:	0800e987 	.word	0x0800e987
 800e91c:	0800e987 	.word	0x0800e987
 800e920:	0800e979 	.word	0x0800e979
 800e924:	2b40      	cmp	r3, #64	; 0x40
 800e926:	d02a      	beq.n	800e97e <UART_SetConfig+0x8aa>
 800e928:	e02d      	b.n	800e986 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e92a:	f7fe f879 	bl	800ca20 <HAL_RCCEx_GetD3PCLK1Freq>
 800e92e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e930:	e02f      	b.n	800e992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe f888 	bl	800ca4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e940:	e027      	b.n	800e992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e942:	f107 0318 	add.w	r3, r7, #24
 800e946:	4618      	mov	r0, r3
 800e948:	f7fe f9d4 	bl	800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e950:	e01f      	b.n	800e992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e952:	4b21      	ldr	r3, [pc, #132]	; (800e9d8 <UART_SetConfig+0x904>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f003 0320 	and.w	r3, r3, #32
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d009      	beq.n	800e972 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e95e:	4b1e      	ldr	r3, [pc, #120]	; (800e9d8 <UART_SetConfig+0x904>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	08db      	lsrs	r3, r3, #3
 800e964:	f003 0303 	and.w	r3, r3, #3
 800e968:	4a1d      	ldr	r2, [pc, #116]	; (800e9e0 <UART_SetConfig+0x90c>)
 800e96a:	fa22 f303 	lsr.w	r3, r2, r3
 800e96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e970:	e00f      	b.n	800e992 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e972:	4b1b      	ldr	r3, [pc, #108]	; (800e9e0 <UART_SetConfig+0x90c>)
 800e974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e976:	e00c      	b.n	800e992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e978:	4b1a      	ldr	r3, [pc, #104]	; (800e9e4 <UART_SetConfig+0x910>)
 800e97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e97c:	e009      	b.n	800e992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e97e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e984:	e005      	b.n	800e992 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e986:	2300      	movs	r3, #0
 800e988:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e994:	2b00      	cmp	r3, #0
 800e996:	f000 81ee 	beq.w	800ed76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99e:	4a12      	ldr	r2, [pc, #72]	; (800e9e8 <UART_SetConfig+0x914>)
 800e9a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9ac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	4413      	add	r3, r2
 800e9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d305      	bcc.n	800e9ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d910      	bls.n	800e9ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9d0:	e1d1      	b.n	800ed76 <UART_SetConfig+0xca2>
 800e9d2:	bf00      	nop
 800e9d4:	40011c00 	.word	0x40011c00
 800e9d8:	58024400 	.word	0x58024400
 800e9dc:	58000c00 	.word	0x58000c00
 800e9e0:	03d09000 	.word	0x03d09000
 800e9e4:	003d0900 	.word	0x003d0900
 800e9e8:	08010590 	.word	0x08010590
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	60bb      	str	r3, [r7, #8]
 800e9f2:	60fa      	str	r2, [r7, #12]
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	4ac0      	ldr	r2, [pc, #768]	; (800ecfc <UART_SetConfig+0xc28>)
 800e9fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	2200      	movs	r2, #0
 800ea02:	603b      	str	r3, [r7, #0]
 800ea04:	607a      	str	r2, [r7, #4]
 800ea06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea0e:	f7f1 fc6d 	bl	80002ec <__aeabi_uldivmod>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	4610      	mov	r0, r2
 800ea18:	4619      	mov	r1, r3
 800ea1a:	f04f 0200 	mov.w	r2, #0
 800ea1e:	f04f 0300 	mov.w	r3, #0
 800ea22:	020b      	lsls	r3, r1, #8
 800ea24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea28:	0202      	lsls	r2, r0, #8
 800ea2a:	6979      	ldr	r1, [r7, #20]
 800ea2c:	6849      	ldr	r1, [r1, #4]
 800ea2e:	0849      	lsrs	r1, r1, #1
 800ea30:	2000      	movs	r0, #0
 800ea32:	460c      	mov	r4, r1
 800ea34:	4605      	mov	r5, r0
 800ea36:	eb12 0804 	adds.w	r8, r2, r4
 800ea3a:	eb43 0905 	adc.w	r9, r3, r5
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	469a      	mov	sl, r3
 800ea46:	4693      	mov	fp, r2
 800ea48:	4652      	mov	r2, sl
 800ea4a:	465b      	mov	r3, fp
 800ea4c:	4640      	mov	r0, r8
 800ea4e:	4649      	mov	r1, r9
 800ea50:	f7f1 fc4c 	bl	80002ec <__aeabi_uldivmod>
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4613      	mov	r3, r2
 800ea5a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ea5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea62:	d308      	bcc.n	800ea76 <UART_SetConfig+0x9a2>
 800ea64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea6a:	d204      	bcs.n	800ea76 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea72:	60da      	str	r2, [r3, #12]
 800ea74:	e17f      	b.n	800ed76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea7c:	e17b      	b.n	800ed76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	69db      	ldr	r3, [r3, #28]
 800ea82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea86:	f040 80bd 	bne.w	800ec04 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ea8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea8e:	2b20      	cmp	r3, #32
 800ea90:	dc48      	bgt.n	800eb24 <UART_SetConfig+0xa50>
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	db7b      	blt.n	800eb8e <UART_SetConfig+0xaba>
 800ea96:	2b20      	cmp	r3, #32
 800ea98:	d879      	bhi.n	800eb8e <UART_SetConfig+0xaba>
 800ea9a:	a201      	add	r2, pc, #4	; (adr r2, 800eaa0 <UART_SetConfig+0x9cc>)
 800ea9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa0:	0800eb2b 	.word	0x0800eb2b
 800eaa4:	0800eb33 	.word	0x0800eb33
 800eaa8:	0800eb8f 	.word	0x0800eb8f
 800eaac:	0800eb8f 	.word	0x0800eb8f
 800eab0:	0800eb3b 	.word	0x0800eb3b
 800eab4:	0800eb8f 	.word	0x0800eb8f
 800eab8:	0800eb8f 	.word	0x0800eb8f
 800eabc:	0800eb8f 	.word	0x0800eb8f
 800eac0:	0800eb4b 	.word	0x0800eb4b
 800eac4:	0800eb8f 	.word	0x0800eb8f
 800eac8:	0800eb8f 	.word	0x0800eb8f
 800eacc:	0800eb8f 	.word	0x0800eb8f
 800ead0:	0800eb8f 	.word	0x0800eb8f
 800ead4:	0800eb8f 	.word	0x0800eb8f
 800ead8:	0800eb8f 	.word	0x0800eb8f
 800eadc:	0800eb8f 	.word	0x0800eb8f
 800eae0:	0800eb5b 	.word	0x0800eb5b
 800eae4:	0800eb8f 	.word	0x0800eb8f
 800eae8:	0800eb8f 	.word	0x0800eb8f
 800eaec:	0800eb8f 	.word	0x0800eb8f
 800eaf0:	0800eb8f 	.word	0x0800eb8f
 800eaf4:	0800eb8f 	.word	0x0800eb8f
 800eaf8:	0800eb8f 	.word	0x0800eb8f
 800eafc:	0800eb8f 	.word	0x0800eb8f
 800eb00:	0800eb8f 	.word	0x0800eb8f
 800eb04:	0800eb8f 	.word	0x0800eb8f
 800eb08:	0800eb8f 	.word	0x0800eb8f
 800eb0c:	0800eb8f 	.word	0x0800eb8f
 800eb10:	0800eb8f 	.word	0x0800eb8f
 800eb14:	0800eb8f 	.word	0x0800eb8f
 800eb18:	0800eb8f 	.word	0x0800eb8f
 800eb1c:	0800eb8f 	.word	0x0800eb8f
 800eb20:	0800eb81 	.word	0x0800eb81
 800eb24:	2b40      	cmp	r3, #64	; 0x40
 800eb26:	d02e      	beq.n	800eb86 <UART_SetConfig+0xab2>
 800eb28:	e031      	b.n	800eb8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb2a:	f7fc fd8f 	bl	800b64c <HAL_RCC_GetPCLK1Freq>
 800eb2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb30:	e033      	b.n	800eb9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb32:	f7fc fda1 	bl	800b678 <HAL_RCC_GetPCLK2Freq>
 800eb36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb38:	e02f      	b.n	800eb9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fd ff84 	bl	800ca4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb48:	e027      	b.n	800eb9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb4a:	f107 0318 	add.w	r3, r7, #24
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fe f8d0 	bl	800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb58:	e01f      	b.n	800eb9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb5a:	4b69      	ldr	r3, [pc, #420]	; (800ed00 <UART_SetConfig+0xc2c>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f003 0320 	and.w	r3, r3, #32
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d009      	beq.n	800eb7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb66:	4b66      	ldr	r3, [pc, #408]	; (800ed00 <UART_SetConfig+0xc2c>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	08db      	lsrs	r3, r3, #3
 800eb6c:	f003 0303 	and.w	r3, r3, #3
 800eb70:	4a64      	ldr	r2, [pc, #400]	; (800ed04 <UART_SetConfig+0xc30>)
 800eb72:	fa22 f303 	lsr.w	r3, r2, r3
 800eb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb78:	e00f      	b.n	800eb9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800eb7a:	4b62      	ldr	r3, [pc, #392]	; (800ed04 <UART_SetConfig+0xc30>)
 800eb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb7e:	e00c      	b.n	800eb9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb80:	4b61      	ldr	r3, [pc, #388]	; (800ed08 <UART_SetConfig+0xc34>)
 800eb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb84:	e009      	b.n	800eb9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb8c:	e005      	b.n	800eb9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eb92:	2301      	movs	r3, #1
 800eb94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eb98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eb9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f000 80ea 	beq.w	800ed76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba6:	4a55      	ldr	r2, [pc, #340]	; (800ecfc <UART_SetConfig+0xc28>)
 800eba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebac:	461a      	mov	r2, r3
 800ebae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebb4:	005a      	lsls	r2, r3, #1
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	085b      	lsrs	r3, r3, #1
 800ebbc:	441a      	add	r2, r3
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	2b0f      	cmp	r3, #15
 800ebcc:	d916      	bls.n	800ebfc <UART_SetConfig+0xb28>
 800ebce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebd4:	d212      	bcs.n	800ebfc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ebd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	f023 030f 	bic.w	r3, r3, #15
 800ebde:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ebe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe2:	085b      	lsrs	r3, r3, #1
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	f003 0307 	and.w	r3, r3, #7
 800ebea:	b29a      	uxth	r2, r3
 800ebec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ebf8:	60da      	str	r2, [r3, #12]
 800ebfa:	e0bc      	b.n	800ed76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec02:	e0b8      	b.n	800ed76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec08:	2b20      	cmp	r3, #32
 800ec0a:	dc4b      	bgt.n	800eca4 <UART_SetConfig+0xbd0>
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f2c0 8087 	blt.w	800ed20 <UART_SetConfig+0xc4c>
 800ec12:	2b20      	cmp	r3, #32
 800ec14:	f200 8084 	bhi.w	800ed20 <UART_SetConfig+0xc4c>
 800ec18:	a201      	add	r2, pc, #4	; (adr r2, 800ec20 <UART_SetConfig+0xb4c>)
 800ec1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec1e:	bf00      	nop
 800ec20:	0800ecab 	.word	0x0800ecab
 800ec24:	0800ecb3 	.word	0x0800ecb3
 800ec28:	0800ed21 	.word	0x0800ed21
 800ec2c:	0800ed21 	.word	0x0800ed21
 800ec30:	0800ecbb 	.word	0x0800ecbb
 800ec34:	0800ed21 	.word	0x0800ed21
 800ec38:	0800ed21 	.word	0x0800ed21
 800ec3c:	0800ed21 	.word	0x0800ed21
 800ec40:	0800eccb 	.word	0x0800eccb
 800ec44:	0800ed21 	.word	0x0800ed21
 800ec48:	0800ed21 	.word	0x0800ed21
 800ec4c:	0800ed21 	.word	0x0800ed21
 800ec50:	0800ed21 	.word	0x0800ed21
 800ec54:	0800ed21 	.word	0x0800ed21
 800ec58:	0800ed21 	.word	0x0800ed21
 800ec5c:	0800ed21 	.word	0x0800ed21
 800ec60:	0800ecdb 	.word	0x0800ecdb
 800ec64:	0800ed21 	.word	0x0800ed21
 800ec68:	0800ed21 	.word	0x0800ed21
 800ec6c:	0800ed21 	.word	0x0800ed21
 800ec70:	0800ed21 	.word	0x0800ed21
 800ec74:	0800ed21 	.word	0x0800ed21
 800ec78:	0800ed21 	.word	0x0800ed21
 800ec7c:	0800ed21 	.word	0x0800ed21
 800ec80:	0800ed21 	.word	0x0800ed21
 800ec84:	0800ed21 	.word	0x0800ed21
 800ec88:	0800ed21 	.word	0x0800ed21
 800ec8c:	0800ed21 	.word	0x0800ed21
 800ec90:	0800ed21 	.word	0x0800ed21
 800ec94:	0800ed21 	.word	0x0800ed21
 800ec98:	0800ed21 	.word	0x0800ed21
 800ec9c:	0800ed21 	.word	0x0800ed21
 800eca0:	0800ed13 	.word	0x0800ed13
 800eca4:	2b40      	cmp	r3, #64	; 0x40
 800eca6:	d037      	beq.n	800ed18 <UART_SetConfig+0xc44>
 800eca8:	e03a      	b.n	800ed20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ecaa:	f7fc fccf 	bl	800b64c <HAL_RCC_GetPCLK1Freq>
 800ecae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecb0:	e03c      	b.n	800ed2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ecb2:	f7fc fce1 	bl	800b678 <HAL_RCC_GetPCLK2Freq>
 800ecb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecb8:	e038      	b.n	800ed2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fd fec4 	bl	800ca4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecc8:	e030      	b.n	800ed2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecca:	f107 0318 	add.w	r3, r7, #24
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe f810 	bl	800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecd8:	e028      	b.n	800ed2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecda:	4b09      	ldr	r3, [pc, #36]	; (800ed00 <UART_SetConfig+0xc2c>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f003 0320 	and.w	r3, r3, #32
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d012      	beq.n	800ed0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ece6:	4b06      	ldr	r3, [pc, #24]	; (800ed00 <UART_SetConfig+0xc2c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	08db      	lsrs	r3, r3, #3
 800ecec:	f003 0303 	and.w	r3, r3, #3
 800ecf0:	4a04      	ldr	r2, [pc, #16]	; (800ed04 <UART_SetConfig+0xc30>)
 800ecf2:	fa22 f303 	lsr.w	r3, r2, r3
 800ecf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ecf8:	e018      	b.n	800ed2c <UART_SetConfig+0xc58>
 800ecfa:	bf00      	nop
 800ecfc:	08010590 	.word	0x08010590
 800ed00:	58024400 	.word	0x58024400
 800ed04:	03d09000 	.word	0x03d09000
 800ed08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ed0c:	4b24      	ldr	r3, [pc, #144]	; (800eda0 <UART_SetConfig+0xccc>)
 800ed0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed10:	e00c      	b.n	800ed2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed12:	4b24      	ldr	r3, [pc, #144]	; (800eda4 <UART_SetConfig+0xcd0>)
 800ed14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed16:	e009      	b.n	800ed2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed1e:	e005      	b.n	800ed2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ed20:	2300      	movs	r3, #0
 800ed22:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed24:	2301      	movs	r3, #1
 800ed26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed2a:	bf00      	nop
    }

    if (pclk != 0U)
 800ed2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d021      	beq.n	800ed76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed36:	4a1c      	ldr	r2, [pc, #112]	; (800eda8 <UART_SetConfig+0xcd4>)
 800ed38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed40:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	085b      	lsrs	r3, r3, #1
 800ed4a:	441a      	add	r2, r3
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed54:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	2b0f      	cmp	r3, #15
 800ed5a:	d909      	bls.n	800ed70 <UART_SetConfig+0xc9c>
 800ed5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed62:	d205      	bcs.n	800ed70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ed64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	60da      	str	r2, [r3, #12]
 800ed6e:	e002      	b.n	800ed76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ed70:	2301      	movs	r3, #1
 800ed72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	2201      	movs	r2, #1
 800ed82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ed92:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3748      	adds	r7, #72	; 0x48
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eda0:	03d09000 	.word	0x03d09000
 800eda4:	003d0900 	.word	0x003d0900
 800eda8:	08010590 	.word	0x08010590

0800edac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb8:	f003 0301 	and.w	r3, r3, #1
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00a      	beq.n	800edd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	430a      	orrs	r2, r1
 800edd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00a      	beq.n	800edf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	430a      	orrs	r2, r1
 800edf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edfc:	f003 0304 	and.w	r3, r3, #4
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00a      	beq.n	800ee1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	430a      	orrs	r2, r1
 800ee18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1e:	f003 0308 	and.w	r3, r3, #8
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	430a      	orrs	r2, r1
 800ee3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee40:	f003 0310 	and.w	r3, r3, #16
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00a      	beq.n	800ee5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee62:	f003 0320 	and.w	r3, r3, #32
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00a      	beq.n	800ee80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d01a      	beq.n	800eec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	430a      	orrs	r2, r1
 800eea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeaa:	d10a      	bne.n	800eec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	430a      	orrs	r2, r1
 800eec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00a      	beq.n	800eee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	430a      	orrs	r2, r1
 800eee2:	605a      	str	r2, [r3, #4]
  }
}
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b098      	sub	sp, #96	; 0x60
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef00:	f7f5 fb00 	bl	8004504 <HAL_GetTick>
 800ef04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f003 0308 	and.w	r3, r3, #8
 800ef10:	2b08      	cmp	r3, #8
 800ef12:	d12f      	bne.n	800ef74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f88e 	bl	800f044 <UART_WaitOnFlagUntilTimeout>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d022      	beq.n	800ef74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	e853 3f00 	ldrex	r3, [r3]
 800ef3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef42:	653b      	str	r3, [r7, #80]	; 0x50
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ef4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef54:	e841 2300 	strex	r3, r2, [r1]
 800ef58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1e6      	bne.n	800ef2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2220      	movs	r2, #32
 800ef64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef70:	2303      	movs	r3, #3
 800ef72:	e063      	b.n	800f03c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f003 0304 	and.w	r3, r3, #4
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d149      	bne.n	800f016 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef86:	9300      	str	r3, [sp, #0]
 800ef88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 f857 	bl	800f044 <UART_WaitOnFlagUntilTimeout>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d03c      	beq.n	800f016 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa4:	e853 3f00 	ldrex	r3, [r3]
 800efa8:	623b      	str	r3, [r7, #32]
   return(result);
 800efaa:	6a3b      	ldr	r3, [r7, #32]
 800efac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	461a      	mov	r2, r3
 800efb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efba:	633b      	str	r3, [r7, #48]	; 0x30
 800efbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efc2:	e841 2300 	strex	r3, r2, [r1]
 800efc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1e6      	bne.n	800ef9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	3308      	adds	r3, #8
 800efd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	e853 3f00 	ldrex	r3, [r3]
 800efdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f023 0301 	bic.w	r3, r3, #1
 800efe4:	64bb      	str	r3, [r7, #72]	; 0x48
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3308      	adds	r3, #8
 800efec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efee:	61fa      	str	r2, [r7, #28]
 800eff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff2:	69b9      	ldr	r1, [r7, #24]
 800eff4:	69fa      	ldr	r2, [r7, #28]
 800eff6:	e841 2300 	strex	r3, r2, [r1]
 800effa:	617b      	str	r3, [r7, #20]
   return(result);
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1e5      	bne.n	800efce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2220      	movs	r2, #32
 800f006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f012:	2303      	movs	r3, #3
 800f014:	e012      	b.n	800f03c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2220      	movs	r2, #32
 800f01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2220      	movs	r2, #32
 800f022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3758      	adds	r7, #88	; 0x58
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	603b      	str	r3, [r7, #0]
 800f050:	4613      	mov	r3, r2
 800f052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f054:	e049      	b.n	800f0ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f05c:	d045      	beq.n	800f0ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f05e:	f7f5 fa51 	bl	8004504 <HAL_GetTick>
 800f062:	4602      	mov	r2, r0
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	69ba      	ldr	r2, [r7, #24]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d302      	bcc.n	800f074 <UART_WaitOnFlagUntilTimeout+0x30>
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d101      	bne.n	800f078 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f074:	2303      	movs	r3, #3
 800f076:	e048      	b.n	800f10a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f003 0304 	and.w	r3, r3, #4
 800f082:	2b00      	cmp	r3, #0
 800f084:	d031      	beq.n	800f0ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	f003 0308 	and.w	r3, r3, #8
 800f090:	2b08      	cmp	r3, #8
 800f092:	d110      	bne.n	800f0b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2208      	movs	r2, #8
 800f09a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f000 f839 	bl	800f114 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2208      	movs	r2, #8
 800f0a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e029      	b.n	800f10a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	69db      	ldr	r3, [r3, #28]
 800f0bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0c4:	d111      	bne.n	800f0ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f000 f81f 	bl	800f114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2220      	movs	r2, #32
 800f0da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e00f      	b.n	800f10a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	69da      	ldr	r2, [r3, #28]
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	bf0c      	ite	eq
 800f0fa:	2301      	moveq	r3, #1
 800f0fc:	2300      	movne	r3, #0
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	461a      	mov	r2, r3
 800f102:	79fb      	ldrb	r3, [r7, #7]
 800f104:	429a      	cmp	r2, r3
 800f106:	d0a6      	beq.n	800f056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
	...

0800f114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f114:	b480      	push	{r7}
 800f116:	b095      	sub	sp, #84	; 0x54
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f124:	e853 3f00 	ldrex	r3, [r3]
 800f128:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f130:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	461a      	mov	r2, r3
 800f138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f13a:	643b      	str	r3, [r7, #64]	; 0x40
 800f13c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f142:	e841 2300 	strex	r3, r2, [r1]
 800f146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1e6      	bne.n	800f11c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3308      	adds	r3, #8
 800f154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f156:	6a3b      	ldr	r3, [r7, #32]
 800f158:	e853 3f00 	ldrex	r3, [r3]
 800f15c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f15e:	69fa      	ldr	r2, [r7, #28]
 800f160:	4b1e      	ldr	r3, [pc, #120]	; (800f1dc <UART_EndRxTransfer+0xc8>)
 800f162:	4013      	ands	r3, r2
 800f164:	64bb      	str	r3, [r7, #72]	; 0x48
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3308      	adds	r3, #8
 800f16c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f16e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f176:	e841 2300 	strex	r3, r2, [r1]
 800f17a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d1e5      	bne.n	800f14e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f186:	2b01      	cmp	r3, #1
 800f188:	d118      	bne.n	800f1bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	e853 3f00 	ldrex	r3, [r3]
 800f196:	60bb      	str	r3, [r7, #8]
   return(result);
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	f023 0310 	bic.w	r3, r3, #16
 800f19e:	647b      	str	r3, [r7, #68]	; 0x44
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1a8:	61bb      	str	r3, [r7, #24]
 800f1aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ac:	6979      	ldr	r1, [r7, #20]
 800f1ae:	69ba      	ldr	r2, [r7, #24]
 800f1b0:	e841 2300 	strex	r3, r2, [r1]
 800f1b4:	613b      	str	r3, [r7, #16]
   return(result);
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1e6      	bne.n	800f18a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2220      	movs	r2, #32
 800f1c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f1d0:	bf00      	nop
 800f1d2:	3754      	adds	r7, #84	; 0x54
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	effffffe 	.word	0xeffffffe

0800f1e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f7fe ff52 	bl	800e0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f204:	bf00      	nop
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	e853 3f00 	ldrex	r3, [r3]
 800f220:	60bb      	str	r3, [r7, #8]
   return(result);
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f228:	61fb      	str	r3, [r7, #28]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	461a      	mov	r2, r3
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	61bb      	str	r3, [r7, #24]
 800f234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f236:	6979      	ldr	r1, [r7, #20]
 800f238:	69ba      	ldr	r2, [r7, #24]
 800f23a:	e841 2300 	strex	r3, r2, [r1]
 800f23e:	613b      	str	r3, [r7, #16]
   return(result);
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1e6      	bne.n	800f214 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2220      	movs	r2, #32
 800f24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7fe ff1d 	bl	800e094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f25a:	bf00      	nop
 800f25c:	3720      	adds	r7, #32
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f262:	b480      	push	{r7}
 800f264:	b083      	sub	sp, #12
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f26a:	bf00      	nop
 800f26c:	370c      	adds	r7, #12
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f276:	b480      	push	{r7}
 800f278:	b083      	sub	sp, #12
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f27e:	bf00      	nop
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f28a:	b480      	push	{r7}
 800f28c:	b083      	sub	sp, #12
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f292:	bf00      	nop
 800f294:	370c      	adds	r7, #12
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr

0800f29e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f29e:	b480      	push	{r7}
 800f2a0:	b085      	sub	sp, #20
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d101      	bne.n	800f2b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	e027      	b.n	800f304 <HAL_UARTEx_DisableFifoMode+0x66>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2224      	movs	r2, #36	; 0x24
 800f2c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f022 0201 	bic.w	r2, r2, #1
 800f2da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f2e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2220      	movs	r2, #32
 800f2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f320:	2b01      	cmp	r3, #1
 800f322:	d101      	bne.n	800f328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f324:	2302      	movs	r3, #2
 800f326:	e02d      	b.n	800f384 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2224      	movs	r2, #36	; 0x24
 800f334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f022 0201 	bic.w	r2, r2, #1
 800f34e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	430a      	orrs	r2, r1
 800f362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 f84f 	bl	800f408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2220      	movs	r2, #32
 800f376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d101      	bne.n	800f3a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f3a0:	2302      	movs	r3, #2
 800f3a2:	e02d      	b.n	800f400 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2224      	movs	r2, #36	; 0x24
 800f3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f022 0201 	bic.w	r2, r2, #1
 800f3ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	683a      	ldr	r2, [r7, #0]
 800f3dc:	430a      	orrs	r2, r1
 800f3de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 f811 	bl	800f408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2220      	movs	r2, #32
 800f3f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f408:	b480      	push	{r7}
 800f40a:	b085      	sub	sp, #20
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f414:	2b00      	cmp	r3, #0
 800f416:	d108      	bne.n	800f42a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2201      	movs	r2, #1
 800f424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f428:	e031      	b.n	800f48e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f42a:	2310      	movs	r3, #16
 800f42c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f42e:	2310      	movs	r3, #16
 800f430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	0e5b      	lsrs	r3, r3, #25
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	f003 0307 	and.w	r3, r3, #7
 800f440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	0f5b      	lsrs	r3, r3, #29
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	f003 0307 	and.w	r3, r3, #7
 800f450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f452:	7bbb      	ldrb	r3, [r7, #14]
 800f454:	7b3a      	ldrb	r2, [r7, #12]
 800f456:	4911      	ldr	r1, [pc, #68]	; (800f49c <UARTEx_SetNbDataToProcess+0x94>)
 800f458:	5c8a      	ldrb	r2, [r1, r2]
 800f45a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f45e:	7b3a      	ldrb	r2, [r7, #12]
 800f460:	490f      	ldr	r1, [pc, #60]	; (800f4a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f464:	fb93 f3f2 	sdiv	r3, r3, r2
 800f468:	b29a      	uxth	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f470:	7bfb      	ldrb	r3, [r7, #15]
 800f472:	7b7a      	ldrb	r2, [r7, #13]
 800f474:	4909      	ldr	r1, [pc, #36]	; (800f49c <UARTEx_SetNbDataToProcess+0x94>)
 800f476:	5c8a      	ldrb	r2, [r1, r2]
 800f478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f47c:	7b7a      	ldrb	r2, [r7, #13]
 800f47e:	4908      	ldr	r1, [pc, #32]	; (800f4a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f482:	fb93 f3f2 	sdiv	r3, r3, r2
 800f486:	b29a      	uxth	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f48e:	bf00      	nop
 800f490:	3714      	adds	r7, #20
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	080105a8 	.word	0x080105a8
 800f4a0:	080105b0 	.word	0x080105b0

0800f4a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d121      	bne.n	800f4fa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	4b27      	ldr	r3, [pc, #156]	; (800f558 <FMC_SDRAM_Init+0xb4>)
 800f4bc:	4013      	ands	r3, r2
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	6851      	ldr	r1, [r2, #4]
 800f4c2:	683a      	ldr	r2, [r7, #0]
 800f4c4:	6892      	ldr	r2, [r2, #8]
 800f4c6:	4311      	orrs	r1, r2
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	68d2      	ldr	r2, [r2, #12]
 800f4cc:	4311      	orrs	r1, r2
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	6912      	ldr	r2, [r2, #16]
 800f4d2:	4311      	orrs	r1, r2
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	6952      	ldr	r2, [r2, #20]
 800f4d8:	4311      	orrs	r1, r2
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	6992      	ldr	r2, [r2, #24]
 800f4de:	4311      	orrs	r1, r2
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	69d2      	ldr	r2, [r2, #28]
 800f4e4:	4311      	orrs	r1, r2
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	6a12      	ldr	r2, [r2, #32]
 800f4ea:	4311      	orrs	r1, r2
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f4f0:	430a      	orrs	r2, r1
 800f4f2:	431a      	orrs	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	601a      	str	r2, [r3, #0]
 800f4f8:	e026      	b.n	800f548 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	69d9      	ldr	r1, [r3, #28]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	6a1b      	ldr	r3, [r3, #32]
 800f50a:	4319      	orrs	r1, r3
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f510:	430b      	orrs	r3, r1
 800f512:	431a      	orrs	r2, r3
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	685a      	ldr	r2, [r3, #4]
 800f51c:	4b0e      	ldr	r3, [pc, #56]	; (800f558 <FMC_SDRAM_Init+0xb4>)
 800f51e:	4013      	ands	r3, r2
 800f520:	683a      	ldr	r2, [r7, #0]
 800f522:	6851      	ldr	r1, [r2, #4]
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	6892      	ldr	r2, [r2, #8]
 800f528:	4311      	orrs	r1, r2
 800f52a:	683a      	ldr	r2, [r7, #0]
 800f52c:	68d2      	ldr	r2, [r2, #12]
 800f52e:	4311      	orrs	r1, r2
 800f530:	683a      	ldr	r2, [r7, #0]
 800f532:	6912      	ldr	r2, [r2, #16]
 800f534:	4311      	orrs	r1, r2
 800f536:	683a      	ldr	r2, [r7, #0]
 800f538:	6952      	ldr	r2, [r2, #20]
 800f53a:	4311      	orrs	r1, r2
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	6992      	ldr	r2, [r2, #24]
 800f540:	430a      	orrs	r2, r1
 800f542:	431a      	orrs	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	370c      	adds	r7, #12
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	ffff8000 	.word	0xffff8000

0800f55c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b085      	sub	sp, #20
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d128      	bne.n	800f5c0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	689b      	ldr	r3, [r3, #8]
 800f572:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	1e59      	subs	r1, r3, #1
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	3b01      	subs	r3, #1
 800f582:	011b      	lsls	r3, r3, #4
 800f584:	4319      	orrs	r1, r3
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	3b01      	subs	r3, #1
 800f58c:	021b      	lsls	r3, r3, #8
 800f58e:	4319      	orrs	r1, r3
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	3b01      	subs	r3, #1
 800f596:	031b      	lsls	r3, r3, #12
 800f598:	4319      	orrs	r1, r3
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	041b      	lsls	r3, r3, #16
 800f5a2:	4319      	orrs	r1, r3
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	695b      	ldr	r3, [r3, #20]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	051b      	lsls	r3, r3, #20
 800f5ac:	4319      	orrs	r1, r3
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	699b      	ldr	r3, [r3, #24]
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	061b      	lsls	r3, r3, #24
 800f5b6:	430b      	orrs	r3, r1
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	609a      	str	r2, [r3, #8]
 800f5be:	e02d      	b.n	800f61c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	689a      	ldr	r2, [r3, #8]
 800f5c4:	4b19      	ldr	r3, [pc, #100]	; (800f62c <FMC_SDRAM_Timing_Init+0xd0>)
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	68ba      	ldr	r2, [r7, #8]
 800f5ca:	68d2      	ldr	r2, [r2, #12]
 800f5cc:	3a01      	subs	r2, #1
 800f5ce:	0311      	lsls	r1, r2, #12
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	6952      	ldr	r2, [r2, #20]
 800f5d4:	3a01      	subs	r2, #1
 800f5d6:	0512      	lsls	r2, r2, #20
 800f5d8:	430a      	orrs	r2, r1
 800f5da:	431a      	orrs	r2, r3
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	1e59      	subs	r1, r3, #1
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	011b      	lsls	r3, r3, #4
 800f5f6:	4319      	orrs	r1, r3
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	021b      	lsls	r3, r3, #8
 800f600:	4319      	orrs	r1, r3
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	691b      	ldr	r3, [r3, #16]
 800f606:	3b01      	subs	r3, #1
 800f608:	041b      	lsls	r3, r3, #16
 800f60a:	4319      	orrs	r1, r3
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	699b      	ldr	r3, [r3, #24]
 800f610:	3b01      	subs	r3, #1
 800f612:	061b      	lsls	r3, r3, #24
 800f614:	430b      	orrs	r3, r1
 800f616:	431a      	orrs	r2, r3
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3714      	adds	r7, #20
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	ff0f0fff 	.word	0xff0f0fff

0800f630 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	691a      	ldr	r2, [r3, #16]
 800f640:	4b0c      	ldr	r3, [pc, #48]	; (800f674 <FMC_SDRAM_SendCommand+0x44>)
 800f642:	4013      	ands	r3, r2
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	6811      	ldr	r1, [r2, #0]
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	6852      	ldr	r2, [r2, #4]
 800f64c:	4311      	orrs	r1, r2
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	6892      	ldr	r2, [r2, #8]
 800f652:	3a01      	subs	r2, #1
 800f654:	0152      	lsls	r2, r2, #5
 800f656:	4311      	orrs	r1, r2
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	68d2      	ldr	r2, [r2, #12]
 800f65c:	0252      	lsls	r2, r2, #9
 800f65e:	430a      	orrs	r2, r1
 800f660:	431a      	orrs	r2, r3
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f666:	2300      	movs	r3, #0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	ffc00000 	.word	0xffc00000

0800f678 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	695a      	ldr	r2, [r3, #20]
 800f686:	4b07      	ldr	r3, [pc, #28]	; (800f6a4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f688:	4013      	ands	r3, r2
 800f68a:	683a      	ldr	r2, [r7, #0]
 800f68c:	0052      	lsls	r2, r2, #1
 800f68e:	431a      	orrs	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	370c      	adds	r7, #12
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	ffffc001 	.word	0xffffc001

0800f6a8 <__errno>:
 800f6a8:	4b01      	ldr	r3, [pc, #4]	; (800f6b0 <__errno+0x8>)
 800f6aa:	6818      	ldr	r0, [r3, #0]
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	24000294 	.word	0x24000294

0800f6b4 <__libc_init_array>:
 800f6b4:	b570      	push	{r4, r5, r6, lr}
 800f6b6:	4d0d      	ldr	r5, [pc, #52]	; (800f6ec <__libc_init_array+0x38>)
 800f6b8:	4c0d      	ldr	r4, [pc, #52]	; (800f6f0 <__libc_init_array+0x3c>)
 800f6ba:	1b64      	subs	r4, r4, r5
 800f6bc:	10a4      	asrs	r4, r4, #2
 800f6be:	2600      	movs	r6, #0
 800f6c0:	42a6      	cmp	r6, r4
 800f6c2:	d109      	bne.n	800f6d8 <__libc_init_array+0x24>
 800f6c4:	4d0b      	ldr	r5, [pc, #44]	; (800f6f4 <__libc_init_array+0x40>)
 800f6c6:	4c0c      	ldr	r4, [pc, #48]	; (800f6f8 <__libc_init_array+0x44>)
 800f6c8:	f000 fc66 	bl	800ff98 <_init>
 800f6cc:	1b64      	subs	r4, r4, r5
 800f6ce:	10a4      	asrs	r4, r4, #2
 800f6d0:	2600      	movs	r6, #0
 800f6d2:	42a6      	cmp	r6, r4
 800f6d4:	d105      	bne.n	800f6e2 <__libc_init_array+0x2e>
 800f6d6:	bd70      	pop	{r4, r5, r6, pc}
 800f6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6dc:	4798      	blx	r3
 800f6de:	3601      	adds	r6, #1
 800f6e0:	e7ee      	b.n	800f6c0 <__libc_init_array+0xc>
 800f6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6e6:	4798      	blx	r3
 800f6e8:	3601      	adds	r6, #1
 800f6ea:	e7f2      	b.n	800f6d2 <__libc_init_array+0x1e>
 800f6ec:	08010624 	.word	0x08010624
 800f6f0:	08010624 	.word	0x08010624
 800f6f4:	08010624 	.word	0x08010624
 800f6f8:	08010628 	.word	0x08010628

0800f6fc <memset>:
 800f6fc:	4402      	add	r2, r0
 800f6fe:	4603      	mov	r3, r0
 800f700:	4293      	cmp	r3, r2
 800f702:	d100      	bne.n	800f706 <memset+0xa>
 800f704:	4770      	bx	lr
 800f706:	f803 1b01 	strb.w	r1, [r3], #1
 800f70a:	e7f9      	b.n	800f700 <memset+0x4>

0800f70c <setvbuf>:
 800f70c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f710:	461d      	mov	r5, r3
 800f712:	4b5d      	ldr	r3, [pc, #372]	; (800f888 <setvbuf+0x17c>)
 800f714:	681f      	ldr	r7, [r3, #0]
 800f716:	4604      	mov	r4, r0
 800f718:	460e      	mov	r6, r1
 800f71a:	4690      	mov	r8, r2
 800f71c:	b127      	cbz	r7, 800f728 <setvbuf+0x1c>
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	b913      	cbnz	r3, 800f728 <setvbuf+0x1c>
 800f722:	4638      	mov	r0, r7
 800f724:	f000 f9d2 	bl	800facc <__sinit>
 800f728:	4b58      	ldr	r3, [pc, #352]	; (800f88c <setvbuf+0x180>)
 800f72a:	429c      	cmp	r4, r3
 800f72c:	d167      	bne.n	800f7fe <setvbuf+0xf2>
 800f72e:	687c      	ldr	r4, [r7, #4]
 800f730:	f1b8 0f02 	cmp.w	r8, #2
 800f734:	d006      	beq.n	800f744 <setvbuf+0x38>
 800f736:	f1b8 0f01 	cmp.w	r8, #1
 800f73a:	f200 809f 	bhi.w	800f87c <setvbuf+0x170>
 800f73e:	2d00      	cmp	r5, #0
 800f740:	f2c0 809c 	blt.w	800f87c <setvbuf+0x170>
 800f744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f746:	07db      	lsls	r3, r3, #31
 800f748:	d405      	bmi.n	800f756 <setvbuf+0x4a>
 800f74a:	89a3      	ldrh	r3, [r4, #12]
 800f74c:	0598      	lsls	r0, r3, #22
 800f74e:	d402      	bmi.n	800f756 <setvbuf+0x4a>
 800f750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f752:	f000 fa59 	bl	800fc08 <__retarget_lock_acquire_recursive>
 800f756:	4621      	mov	r1, r4
 800f758:	4638      	mov	r0, r7
 800f75a:	f000 f923 	bl	800f9a4 <_fflush_r>
 800f75e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f760:	b141      	cbz	r1, 800f774 <setvbuf+0x68>
 800f762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f766:	4299      	cmp	r1, r3
 800f768:	d002      	beq.n	800f770 <setvbuf+0x64>
 800f76a:	4638      	mov	r0, r7
 800f76c:	f000 fa7c 	bl	800fc68 <_free_r>
 800f770:	2300      	movs	r3, #0
 800f772:	6363      	str	r3, [r4, #52]	; 0x34
 800f774:	2300      	movs	r3, #0
 800f776:	61a3      	str	r3, [r4, #24]
 800f778:	6063      	str	r3, [r4, #4]
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	0619      	lsls	r1, r3, #24
 800f77e:	d503      	bpl.n	800f788 <setvbuf+0x7c>
 800f780:	6921      	ldr	r1, [r4, #16]
 800f782:	4638      	mov	r0, r7
 800f784:	f000 fa70 	bl	800fc68 <_free_r>
 800f788:	89a3      	ldrh	r3, [r4, #12]
 800f78a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f78e:	f023 0303 	bic.w	r3, r3, #3
 800f792:	f1b8 0f02 	cmp.w	r8, #2
 800f796:	81a3      	strh	r3, [r4, #12]
 800f798:	d06c      	beq.n	800f874 <setvbuf+0x168>
 800f79a:	ab01      	add	r3, sp, #4
 800f79c:	466a      	mov	r2, sp
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4638      	mov	r0, r7
 800f7a2:	f000 fa33 	bl	800fc0c <__swhatbuf_r>
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	4318      	orrs	r0, r3
 800f7aa:	81a0      	strh	r0, [r4, #12]
 800f7ac:	2d00      	cmp	r5, #0
 800f7ae:	d130      	bne.n	800f812 <setvbuf+0x106>
 800f7b0:	9d00      	ldr	r5, [sp, #0]
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f000 fa50 	bl	800fc58 <malloc>
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d155      	bne.n	800f86a <setvbuf+0x15e>
 800f7be:	f8dd 9000 	ldr.w	r9, [sp]
 800f7c2:	45a9      	cmp	r9, r5
 800f7c4:	d14a      	bne.n	800f85c <setvbuf+0x150>
 800f7c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	60a2      	str	r2, [r4, #8]
 800f7ce:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f7d2:	6022      	str	r2, [r4, #0]
 800f7d4:	6122      	str	r2, [r4, #16]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7dc:	6162      	str	r2, [r4, #20]
 800f7de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7e0:	f043 0302 	orr.w	r3, r3, #2
 800f7e4:	07d2      	lsls	r2, r2, #31
 800f7e6:	81a3      	strh	r3, [r4, #12]
 800f7e8:	d405      	bmi.n	800f7f6 <setvbuf+0xea>
 800f7ea:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f7ee:	d102      	bne.n	800f7f6 <setvbuf+0xea>
 800f7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7f2:	f000 fa0a 	bl	800fc0a <__retarget_lock_release_recursive>
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	b003      	add	sp, #12
 800f7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7fe:	4b24      	ldr	r3, [pc, #144]	; (800f890 <setvbuf+0x184>)
 800f800:	429c      	cmp	r4, r3
 800f802:	d101      	bne.n	800f808 <setvbuf+0xfc>
 800f804:	68bc      	ldr	r4, [r7, #8]
 800f806:	e793      	b.n	800f730 <setvbuf+0x24>
 800f808:	4b22      	ldr	r3, [pc, #136]	; (800f894 <setvbuf+0x188>)
 800f80a:	429c      	cmp	r4, r3
 800f80c:	bf08      	it	eq
 800f80e:	68fc      	ldreq	r4, [r7, #12]
 800f810:	e78e      	b.n	800f730 <setvbuf+0x24>
 800f812:	2e00      	cmp	r6, #0
 800f814:	d0cd      	beq.n	800f7b2 <setvbuf+0xa6>
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	b913      	cbnz	r3, 800f820 <setvbuf+0x114>
 800f81a:	4638      	mov	r0, r7
 800f81c:	f000 f956 	bl	800facc <__sinit>
 800f820:	f1b8 0f01 	cmp.w	r8, #1
 800f824:	bf08      	it	eq
 800f826:	89a3      	ldrheq	r3, [r4, #12]
 800f828:	6026      	str	r6, [r4, #0]
 800f82a:	bf04      	itt	eq
 800f82c:	f043 0301 	orreq.w	r3, r3, #1
 800f830:	81a3      	strheq	r3, [r4, #12]
 800f832:	89a2      	ldrh	r2, [r4, #12]
 800f834:	f012 0308 	ands.w	r3, r2, #8
 800f838:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f83c:	d01c      	beq.n	800f878 <setvbuf+0x16c>
 800f83e:	07d3      	lsls	r3, r2, #31
 800f840:	bf41      	itttt	mi
 800f842:	2300      	movmi	r3, #0
 800f844:	426d      	negmi	r5, r5
 800f846:	60a3      	strmi	r3, [r4, #8]
 800f848:	61a5      	strmi	r5, [r4, #24]
 800f84a:	bf58      	it	pl
 800f84c:	60a5      	strpl	r5, [r4, #8]
 800f84e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f850:	f015 0501 	ands.w	r5, r5, #1
 800f854:	d115      	bne.n	800f882 <setvbuf+0x176>
 800f856:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f85a:	e7c8      	b.n	800f7ee <setvbuf+0xe2>
 800f85c:	4648      	mov	r0, r9
 800f85e:	f000 f9fb 	bl	800fc58 <malloc>
 800f862:	4606      	mov	r6, r0
 800f864:	2800      	cmp	r0, #0
 800f866:	d0ae      	beq.n	800f7c6 <setvbuf+0xba>
 800f868:	464d      	mov	r5, r9
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	e7d0      	b.n	800f816 <setvbuf+0x10a>
 800f874:	2500      	movs	r5, #0
 800f876:	e7a8      	b.n	800f7ca <setvbuf+0xbe>
 800f878:	60a3      	str	r3, [r4, #8]
 800f87a:	e7e8      	b.n	800f84e <setvbuf+0x142>
 800f87c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f880:	e7b9      	b.n	800f7f6 <setvbuf+0xea>
 800f882:	2500      	movs	r5, #0
 800f884:	e7b7      	b.n	800f7f6 <setvbuf+0xea>
 800f886:	bf00      	nop
 800f888:	24000294 	.word	0x24000294
 800f88c:	080105dc 	.word	0x080105dc
 800f890:	080105fc 	.word	0x080105fc
 800f894:	080105bc 	.word	0x080105bc

0800f898 <__sflush_r>:
 800f898:	898a      	ldrh	r2, [r1, #12]
 800f89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f89e:	4605      	mov	r5, r0
 800f8a0:	0710      	lsls	r0, r2, #28
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	d458      	bmi.n	800f958 <__sflush_r+0xc0>
 800f8a6:	684b      	ldr	r3, [r1, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	dc05      	bgt.n	800f8b8 <__sflush_r+0x20>
 800f8ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	dc02      	bgt.n	800f8b8 <__sflush_r+0x20>
 800f8b2:	2000      	movs	r0, #0
 800f8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8ba:	2e00      	cmp	r6, #0
 800f8bc:	d0f9      	beq.n	800f8b2 <__sflush_r+0x1a>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8c4:	682f      	ldr	r7, [r5, #0]
 800f8c6:	602b      	str	r3, [r5, #0]
 800f8c8:	d032      	beq.n	800f930 <__sflush_r+0x98>
 800f8ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8cc:	89a3      	ldrh	r3, [r4, #12]
 800f8ce:	075a      	lsls	r2, r3, #29
 800f8d0:	d505      	bpl.n	800f8de <__sflush_r+0x46>
 800f8d2:	6863      	ldr	r3, [r4, #4]
 800f8d4:	1ac0      	subs	r0, r0, r3
 800f8d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8d8:	b10b      	cbz	r3, 800f8de <__sflush_r+0x46>
 800f8da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8dc:	1ac0      	subs	r0, r0, r3
 800f8de:	2300      	movs	r3, #0
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8e4:	6a21      	ldr	r1, [r4, #32]
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b0      	blx	r6
 800f8ea:	1c43      	adds	r3, r0, #1
 800f8ec:	89a3      	ldrh	r3, [r4, #12]
 800f8ee:	d106      	bne.n	800f8fe <__sflush_r+0x66>
 800f8f0:	6829      	ldr	r1, [r5, #0]
 800f8f2:	291d      	cmp	r1, #29
 800f8f4:	d82c      	bhi.n	800f950 <__sflush_r+0xb8>
 800f8f6:	4a2a      	ldr	r2, [pc, #168]	; (800f9a0 <__sflush_r+0x108>)
 800f8f8:	40ca      	lsrs	r2, r1
 800f8fa:	07d6      	lsls	r6, r2, #31
 800f8fc:	d528      	bpl.n	800f950 <__sflush_r+0xb8>
 800f8fe:	2200      	movs	r2, #0
 800f900:	6062      	str	r2, [r4, #4]
 800f902:	04d9      	lsls	r1, r3, #19
 800f904:	6922      	ldr	r2, [r4, #16]
 800f906:	6022      	str	r2, [r4, #0]
 800f908:	d504      	bpl.n	800f914 <__sflush_r+0x7c>
 800f90a:	1c42      	adds	r2, r0, #1
 800f90c:	d101      	bne.n	800f912 <__sflush_r+0x7a>
 800f90e:	682b      	ldr	r3, [r5, #0]
 800f910:	b903      	cbnz	r3, 800f914 <__sflush_r+0x7c>
 800f912:	6560      	str	r0, [r4, #84]	; 0x54
 800f914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f916:	602f      	str	r7, [r5, #0]
 800f918:	2900      	cmp	r1, #0
 800f91a:	d0ca      	beq.n	800f8b2 <__sflush_r+0x1a>
 800f91c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f920:	4299      	cmp	r1, r3
 800f922:	d002      	beq.n	800f92a <__sflush_r+0x92>
 800f924:	4628      	mov	r0, r5
 800f926:	f000 f99f 	bl	800fc68 <_free_r>
 800f92a:	2000      	movs	r0, #0
 800f92c:	6360      	str	r0, [r4, #52]	; 0x34
 800f92e:	e7c1      	b.n	800f8b4 <__sflush_r+0x1c>
 800f930:	6a21      	ldr	r1, [r4, #32]
 800f932:	2301      	movs	r3, #1
 800f934:	4628      	mov	r0, r5
 800f936:	47b0      	blx	r6
 800f938:	1c41      	adds	r1, r0, #1
 800f93a:	d1c7      	bne.n	800f8cc <__sflush_r+0x34>
 800f93c:	682b      	ldr	r3, [r5, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d0c4      	beq.n	800f8cc <__sflush_r+0x34>
 800f942:	2b1d      	cmp	r3, #29
 800f944:	d001      	beq.n	800f94a <__sflush_r+0xb2>
 800f946:	2b16      	cmp	r3, #22
 800f948:	d101      	bne.n	800f94e <__sflush_r+0xb6>
 800f94a:	602f      	str	r7, [r5, #0]
 800f94c:	e7b1      	b.n	800f8b2 <__sflush_r+0x1a>
 800f94e:	89a3      	ldrh	r3, [r4, #12]
 800f950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f954:	81a3      	strh	r3, [r4, #12]
 800f956:	e7ad      	b.n	800f8b4 <__sflush_r+0x1c>
 800f958:	690f      	ldr	r7, [r1, #16]
 800f95a:	2f00      	cmp	r7, #0
 800f95c:	d0a9      	beq.n	800f8b2 <__sflush_r+0x1a>
 800f95e:	0793      	lsls	r3, r2, #30
 800f960:	680e      	ldr	r6, [r1, #0]
 800f962:	bf08      	it	eq
 800f964:	694b      	ldreq	r3, [r1, #20]
 800f966:	600f      	str	r7, [r1, #0]
 800f968:	bf18      	it	ne
 800f96a:	2300      	movne	r3, #0
 800f96c:	eba6 0807 	sub.w	r8, r6, r7
 800f970:	608b      	str	r3, [r1, #8]
 800f972:	f1b8 0f00 	cmp.w	r8, #0
 800f976:	dd9c      	ble.n	800f8b2 <__sflush_r+0x1a>
 800f978:	6a21      	ldr	r1, [r4, #32]
 800f97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f97c:	4643      	mov	r3, r8
 800f97e:	463a      	mov	r2, r7
 800f980:	4628      	mov	r0, r5
 800f982:	47b0      	blx	r6
 800f984:	2800      	cmp	r0, #0
 800f986:	dc06      	bgt.n	800f996 <__sflush_r+0xfe>
 800f988:	89a3      	ldrh	r3, [r4, #12]
 800f98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f98e:	81a3      	strh	r3, [r4, #12]
 800f990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f994:	e78e      	b.n	800f8b4 <__sflush_r+0x1c>
 800f996:	4407      	add	r7, r0
 800f998:	eba8 0800 	sub.w	r8, r8, r0
 800f99c:	e7e9      	b.n	800f972 <__sflush_r+0xda>
 800f99e:	bf00      	nop
 800f9a0:	20400001 	.word	0x20400001

0800f9a4 <_fflush_r>:
 800f9a4:	b538      	push	{r3, r4, r5, lr}
 800f9a6:	690b      	ldr	r3, [r1, #16]
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	b913      	cbnz	r3, 800f9b4 <_fflush_r+0x10>
 800f9ae:	2500      	movs	r5, #0
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	bd38      	pop	{r3, r4, r5, pc}
 800f9b4:	b118      	cbz	r0, 800f9be <_fflush_r+0x1a>
 800f9b6:	6983      	ldr	r3, [r0, #24]
 800f9b8:	b90b      	cbnz	r3, 800f9be <_fflush_r+0x1a>
 800f9ba:	f000 f887 	bl	800facc <__sinit>
 800f9be:	4b14      	ldr	r3, [pc, #80]	; (800fa10 <_fflush_r+0x6c>)
 800f9c0:	429c      	cmp	r4, r3
 800f9c2:	d11b      	bne.n	800f9fc <_fflush_r+0x58>
 800f9c4:	686c      	ldr	r4, [r5, #4]
 800f9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d0ef      	beq.n	800f9ae <_fflush_r+0xa>
 800f9ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9d0:	07d0      	lsls	r0, r2, #31
 800f9d2:	d404      	bmi.n	800f9de <_fflush_r+0x3a>
 800f9d4:	0599      	lsls	r1, r3, #22
 800f9d6:	d402      	bmi.n	800f9de <_fflush_r+0x3a>
 800f9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9da:	f000 f915 	bl	800fc08 <__retarget_lock_acquire_recursive>
 800f9de:	4628      	mov	r0, r5
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	f7ff ff59 	bl	800f898 <__sflush_r>
 800f9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9e8:	07da      	lsls	r2, r3, #31
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	d4e0      	bmi.n	800f9b0 <_fflush_r+0xc>
 800f9ee:	89a3      	ldrh	r3, [r4, #12]
 800f9f0:	059b      	lsls	r3, r3, #22
 800f9f2:	d4dd      	bmi.n	800f9b0 <_fflush_r+0xc>
 800f9f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9f6:	f000 f908 	bl	800fc0a <__retarget_lock_release_recursive>
 800f9fa:	e7d9      	b.n	800f9b0 <_fflush_r+0xc>
 800f9fc:	4b05      	ldr	r3, [pc, #20]	; (800fa14 <_fflush_r+0x70>)
 800f9fe:	429c      	cmp	r4, r3
 800fa00:	d101      	bne.n	800fa06 <_fflush_r+0x62>
 800fa02:	68ac      	ldr	r4, [r5, #8]
 800fa04:	e7df      	b.n	800f9c6 <_fflush_r+0x22>
 800fa06:	4b04      	ldr	r3, [pc, #16]	; (800fa18 <_fflush_r+0x74>)
 800fa08:	429c      	cmp	r4, r3
 800fa0a:	bf08      	it	eq
 800fa0c:	68ec      	ldreq	r4, [r5, #12]
 800fa0e:	e7da      	b.n	800f9c6 <_fflush_r+0x22>
 800fa10:	080105dc 	.word	0x080105dc
 800fa14:	080105fc 	.word	0x080105fc
 800fa18:	080105bc 	.word	0x080105bc

0800fa1c <std>:
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	b510      	push	{r4, lr}
 800fa20:	4604      	mov	r4, r0
 800fa22:	e9c0 3300 	strd	r3, r3, [r0]
 800fa26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa2a:	6083      	str	r3, [r0, #8]
 800fa2c:	8181      	strh	r1, [r0, #12]
 800fa2e:	6643      	str	r3, [r0, #100]	; 0x64
 800fa30:	81c2      	strh	r2, [r0, #14]
 800fa32:	6183      	str	r3, [r0, #24]
 800fa34:	4619      	mov	r1, r3
 800fa36:	2208      	movs	r2, #8
 800fa38:	305c      	adds	r0, #92	; 0x5c
 800fa3a:	f7ff fe5f 	bl	800f6fc <memset>
 800fa3e:	4b05      	ldr	r3, [pc, #20]	; (800fa54 <std+0x38>)
 800fa40:	6263      	str	r3, [r4, #36]	; 0x24
 800fa42:	4b05      	ldr	r3, [pc, #20]	; (800fa58 <std+0x3c>)
 800fa44:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa46:	4b05      	ldr	r3, [pc, #20]	; (800fa5c <std+0x40>)
 800fa48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa4a:	4b05      	ldr	r3, [pc, #20]	; (800fa60 <std+0x44>)
 800fa4c:	6224      	str	r4, [r4, #32]
 800fa4e:	6323      	str	r3, [r4, #48]	; 0x30
 800fa50:	bd10      	pop	{r4, pc}
 800fa52:	bf00      	nop
 800fa54:	0800fe49 	.word	0x0800fe49
 800fa58:	0800fe6b 	.word	0x0800fe6b
 800fa5c:	0800fea3 	.word	0x0800fea3
 800fa60:	0800fec7 	.word	0x0800fec7

0800fa64 <_cleanup_r>:
 800fa64:	4901      	ldr	r1, [pc, #4]	; (800fa6c <_cleanup_r+0x8>)
 800fa66:	f000 b8af 	b.w	800fbc8 <_fwalk_reent>
 800fa6a:	bf00      	nop
 800fa6c:	0800f9a5 	.word	0x0800f9a5

0800fa70 <__sfmoreglue>:
 800fa70:	b570      	push	{r4, r5, r6, lr}
 800fa72:	2268      	movs	r2, #104	; 0x68
 800fa74:	1e4d      	subs	r5, r1, #1
 800fa76:	4355      	muls	r5, r2
 800fa78:	460e      	mov	r6, r1
 800fa7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa7e:	f000 f95f 	bl	800fd40 <_malloc_r>
 800fa82:	4604      	mov	r4, r0
 800fa84:	b140      	cbz	r0, 800fa98 <__sfmoreglue+0x28>
 800fa86:	2100      	movs	r1, #0
 800fa88:	e9c0 1600 	strd	r1, r6, [r0]
 800fa8c:	300c      	adds	r0, #12
 800fa8e:	60a0      	str	r0, [r4, #8]
 800fa90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa94:	f7ff fe32 	bl	800f6fc <memset>
 800fa98:	4620      	mov	r0, r4
 800fa9a:	bd70      	pop	{r4, r5, r6, pc}

0800fa9c <__sfp_lock_acquire>:
 800fa9c:	4801      	ldr	r0, [pc, #4]	; (800faa4 <__sfp_lock_acquire+0x8>)
 800fa9e:	f000 b8b3 	b.w	800fc08 <__retarget_lock_acquire_recursive>
 800faa2:	bf00      	nop
 800faa4:	240010b1 	.word	0x240010b1

0800faa8 <__sfp_lock_release>:
 800faa8:	4801      	ldr	r0, [pc, #4]	; (800fab0 <__sfp_lock_release+0x8>)
 800faaa:	f000 b8ae 	b.w	800fc0a <__retarget_lock_release_recursive>
 800faae:	bf00      	nop
 800fab0:	240010b1 	.word	0x240010b1

0800fab4 <__sinit_lock_acquire>:
 800fab4:	4801      	ldr	r0, [pc, #4]	; (800fabc <__sinit_lock_acquire+0x8>)
 800fab6:	f000 b8a7 	b.w	800fc08 <__retarget_lock_acquire_recursive>
 800faba:	bf00      	nop
 800fabc:	240010b2 	.word	0x240010b2

0800fac0 <__sinit_lock_release>:
 800fac0:	4801      	ldr	r0, [pc, #4]	; (800fac8 <__sinit_lock_release+0x8>)
 800fac2:	f000 b8a2 	b.w	800fc0a <__retarget_lock_release_recursive>
 800fac6:	bf00      	nop
 800fac8:	240010b2 	.word	0x240010b2

0800facc <__sinit>:
 800facc:	b510      	push	{r4, lr}
 800face:	4604      	mov	r4, r0
 800fad0:	f7ff fff0 	bl	800fab4 <__sinit_lock_acquire>
 800fad4:	69a3      	ldr	r3, [r4, #24]
 800fad6:	b11b      	cbz	r3, 800fae0 <__sinit+0x14>
 800fad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fadc:	f7ff bff0 	b.w	800fac0 <__sinit_lock_release>
 800fae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fae4:	6523      	str	r3, [r4, #80]	; 0x50
 800fae6:	4b13      	ldr	r3, [pc, #76]	; (800fb34 <__sinit+0x68>)
 800fae8:	4a13      	ldr	r2, [pc, #76]	; (800fb38 <__sinit+0x6c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	62a2      	str	r2, [r4, #40]	; 0x28
 800faee:	42a3      	cmp	r3, r4
 800faf0:	bf04      	itt	eq
 800faf2:	2301      	moveq	r3, #1
 800faf4:	61a3      	streq	r3, [r4, #24]
 800faf6:	4620      	mov	r0, r4
 800faf8:	f000 f820 	bl	800fb3c <__sfp>
 800fafc:	6060      	str	r0, [r4, #4]
 800fafe:	4620      	mov	r0, r4
 800fb00:	f000 f81c 	bl	800fb3c <__sfp>
 800fb04:	60a0      	str	r0, [r4, #8]
 800fb06:	4620      	mov	r0, r4
 800fb08:	f000 f818 	bl	800fb3c <__sfp>
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	60e0      	str	r0, [r4, #12]
 800fb10:	2104      	movs	r1, #4
 800fb12:	6860      	ldr	r0, [r4, #4]
 800fb14:	f7ff ff82 	bl	800fa1c <std>
 800fb18:	68a0      	ldr	r0, [r4, #8]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	2109      	movs	r1, #9
 800fb1e:	f7ff ff7d 	bl	800fa1c <std>
 800fb22:	68e0      	ldr	r0, [r4, #12]
 800fb24:	2202      	movs	r2, #2
 800fb26:	2112      	movs	r1, #18
 800fb28:	f7ff ff78 	bl	800fa1c <std>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	61a3      	str	r3, [r4, #24]
 800fb30:	e7d2      	b.n	800fad8 <__sinit+0xc>
 800fb32:	bf00      	nop
 800fb34:	080105b8 	.word	0x080105b8
 800fb38:	0800fa65 	.word	0x0800fa65

0800fb3c <__sfp>:
 800fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3e:	4607      	mov	r7, r0
 800fb40:	f7ff ffac 	bl	800fa9c <__sfp_lock_acquire>
 800fb44:	4b1e      	ldr	r3, [pc, #120]	; (800fbc0 <__sfp+0x84>)
 800fb46:	681e      	ldr	r6, [r3, #0]
 800fb48:	69b3      	ldr	r3, [r6, #24]
 800fb4a:	b913      	cbnz	r3, 800fb52 <__sfp+0x16>
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	f7ff ffbd 	bl	800facc <__sinit>
 800fb52:	3648      	adds	r6, #72	; 0x48
 800fb54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	d503      	bpl.n	800fb64 <__sfp+0x28>
 800fb5c:	6833      	ldr	r3, [r6, #0]
 800fb5e:	b30b      	cbz	r3, 800fba4 <__sfp+0x68>
 800fb60:	6836      	ldr	r6, [r6, #0]
 800fb62:	e7f7      	b.n	800fb54 <__sfp+0x18>
 800fb64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb68:	b9d5      	cbnz	r5, 800fba0 <__sfp+0x64>
 800fb6a:	4b16      	ldr	r3, [pc, #88]	; (800fbc4 <__sfp+0x88>)
 800fb6c:	60e3      	str	r3, [r4, #12]
 800fb6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb72:	6665      	str	r5, [r4, #100]	; 0x64
 800fb74:	f000 f847 	bl	800fc06 <__retarget_lock_init_recursive>
 800fb78:	f7ff ff96 	bl	800faa8 <__sfp_lock_release>
 800fb7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb84:	6025      	str	r5, [r4, #0]
 800fb86:	61a5      	str	r5, [r4, #24]
 800fb88:	2208      	movs	r2, #8
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb90:	f7ff fdb4 	bl	800f6fc <memset>
 800fb94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fba0:	3468      	adds	r4, #104	; 0x68
 800fba2:	e7d9      	b.n	800fb58 <__sfp+0x1c>
 800fba4:	2104      	movs	r1, #4
 800fba6:	4638      	mov	r0, r7
 800fba8:	f7ff ff62 	bl	800fa70 <__sfmoreglue>
 800fbac:	4604      	mov	r4, r0
 800fbae:	6030      	str	r0, [r6, #0]
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d1d5      	bne.n	800fb60 <__sfp+0x24>
 800fbb4:	f7ff ff78 	bl	800faa8 <__sfp_lock_release>
 800fbb8:	230c      	movs	r3, #12
 800fbba:	603b      	str	r3, [r7, #0]
 800fbbc:	e7ee      	b.n	800fb9c <__sfp+0x60>
 800fbbe:	bf00      	nop
 800fbc0:	080105b8 	.word	0x080105b8
 800fbc4:	ffff0001 	.word	0xffff0001

0800fbc8 <_fwalk_reent>:
 800fbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbcc:	4606      	mov	r6, r0
 800fbce:	4688      	mov	r8, r1
 800fbd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbd4:	2700      	movs	r7, #0
 800fbd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbda:	f1b9 0901 	subs.w	r9, r9, #1
 800fbde:	d505      	bpl.n	800fbec <_fwalk_reent+0x24>
 800fbe0:	6824      	ldr	r4, [r4, #0]
 800fbe2:	2c00      	cmp	r4, #0
 800fbe4:	d1f7      	bne.n	800fbd6 <_fwalk_reent+0xe>
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbec:	89ab      	ldrh	r3, [r5, #12]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d907      	bls.n	800fc02 <_fwalk_reent+0x3a>
 800fbf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	d003      	beq.n	800fc02 <_fwalk_reent+0x3a>
 800fbfa:	4629      	mov	r1, r5
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	47c0      	blx	r8
 800fc00:	4307      	orrs	r7, r0
 800fc02:	3568      	adds	r5, #104	; 0x68
 800fc04:	e7e9      	b.n	800fbda <_fwalk_reent+0x12>

0800fc06 <__retarget_lock_init_recursive>:
 800fc06:	4770      	bx	lr

0800fc08 <__retarget_lock_acquire_recursive>:
 800fc08:	4770      	bx	lr

0800fc0a <__retarget_lock_release_recursive>:
 800fc0a:	4770      	bx	lr

0800fc0c <__swhatbuf_r>:
 800fc0c:	b570      	push	{r4, r5, r6, lr}
 800fc0e:	460e      	mov	r6, r1
 800fc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc14:	2900      	cmp	r1, #0
 800fc16:	b096      	sub	sp, #88	; 0x58
 800fc18:	4614      	mov	r4, r2
 800fc1a:	461d      	mov	r5, r3
 800fc1c:	da08      	bge.n	800fc30 <__swhatbuf_r+0x24>
 800fc1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	602a      	str	r2, [r5, #0]
 800fc26:	061a      	lsls	r2, r3, #24
 800fc28:	d410      	bmi.n	800fc4c <__swhatbuf_r+0x40>
 800fc2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc2e:	e00e      	b.n	800fc4e <__swhatbuf_r+0x42>
 800fc30:	466a      	mov	r2, sp
 800fc32:	f000 f96f 	bl	800ff14 <_fstat_r>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	dbf1      	blt.n	800fc1e <__swhatbuf_r+0x12>
 800fc3a:	9a01      	ldr	r2, [sp, #4]
 800fc3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc44:	425a      	negs	r2, r3
 800fc46:	415a      	adcs	r2, r3
 800fc48:	602a      	str	r2, [r5, #0]
 800fc4a:	e7ee      	b.n	800fc2a <__swhatbuf_r+0x1e>
 800fc4c:	2340      	movs	r3, #64	; 0x40
 800fc4e:	2000      	movs	r0, #0
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	b016      	add	sp, #88	; 0x58
 800fc54:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fc58 <malloc>:
 800fc58:	4b02      	ldr	r3, [pc, #8]	; (800fc64 <malloc+0xc>)
 800fc5a:	4601      	mov	r1, r0
 800fc5c:	6818      	ldr	r0, [r3, #0]
 800fc5e:	f000 b86f 	b.w	800fd40 <_malloc_r>
 800fc62:	bf00      	nop
 800fc64:	24000294 	.word	0x24000294

0800fc68 <_free_r>:
 800fc68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc6a:	2900      	cmp	r1, #0
 800fc6c:	d044      	beq.n	800fcf8 <_free_r+0x90>
 800fc6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc72:	9001      	str	r0, [sp, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f1a1 0404 	sub.w	r4, r1, #4
 800fc7a:	bfb8      	it	lt
 800fc7c:	18e4      	addlt	r4, r4, r3
 800fc7e:	f000 f96d 	bl	800ff5c <__malloc_lock>
 800fc82:	4a1e      	ldr	r2, [pc, #120]	; (800fcfc <_free_r+0x94>)
 800fc84:	9801      	ldr	r0, [sp, #4]
 800fc86:	6813      	ldr	r3, [r2, #0]
 800fc88:	b933      	cbnz	r3, 800fc98 <_free_r+0x30>
 800fc8a:	6063      	str	r3, [r4, #4]
 800fc8c:	6014      	str	r4, [r2, #0]
 800fc8e:	b003      	add	sp, #12
 800fc90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc94:	f000 b968 	b.w	800ff68 <__malloc_unlock>
 800fc98:	42a3      	cmp	r3, r4
 800fc9a:	d908      	bls.n	800fcae <_free_r+0x46>
 800fc9c:	6825      	ldr	r5, [r4, #0]
 800fc9e:	1961      	adds	r1, r4, r5
 800fca0:	428b      	cmp	r3, r1
 800fca2:	bf01      	itttt	eq
 800fca4:	6819      	ldreq	r1, [r3, #0]
 800fca6:	685b      	ldreq	r3, [r3, #4]
 800fca8:	1949      	addeq	r1, r1, r5
 800fcaa:	6021      	streq	r1, [r4, #0]
 800fcac:	e7ed      	b.n	800fc8a <_free_r+0x22>
 800fcae:	461a      	mov	r2, r3
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	b10b      	cbz	r3, 800fcb8 <_free_r+0x50>
 800fcb4:	42a3      	cmp	r3, r4
 800fcb6:	d9fa      	bls.n	800fcae <_free_r+0x46>
 800fcb8:	6811      	ldr	r1, [r2, #0]
 800fcba:	1855      	adds	r5, r2, r1
 800fcbc:	42a5      	cmp	r5, r4
 800fcbe:	d10b      	bne.n	800fcd8 <_free_r+0x70>
 800fcc0:	6824      	ldr	r4, [r4, #0]
 800fcc2:	4421      	add	r1, r4
 800fcc4:	1854      	adds	r4, r2, r1
 800fcc6:	42a3      	cmp	r3, r4
 800fcc8:	6011      	str	r1, [r2, #0]
 800fcca:	d1e0      	bne.n	800fc8e <_free_r+0x26>
 800fccc:	681c      	ldr	r4, [r3, #0]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	6053      	str	r3, [r2, #4]
 800fcd2:	4421      	add	r1, r4
 800fcd4:	6011      	str	r1, [r2, #0]
 800fcd6:	e7da      	b.n	800fc8e <_free_r+0x26>
 800fcd8:	d902      	bls.n	800fce0 <_free_r+0x78>
 800fcda:	230c      	movs	r3, #12
 800fcdc:	6003      	str	r3, [r0, #0]
 800fcde:	e7d6      	b.n	800fc8e <_free_r+0x26>
 800fce0:	6825      	ldr	r5, [r4, #0]
 800fce2:	1961      	adds	r1, r4, r5
 800fce4:	428b      	cmp	r3, r1
 800fce6:	bf04      	itt	eq
 800fce8:	6819      	ldreq	r1, [r3, #0]
 800fcea:	685b      	ldreq	r3, [r3, #4]
 800fcec:	6063      	str	r3, [r4, #4]
 800fcee:	bf04      	itt	eq
 800fcf0:	1949      	addeq	r1, r1, r5
 800fcf2:	6021      	streq	r1, [r4, #0]
 800fcf4:	6054      	str	r4, [r2, #4]
 800fcf6:	e7ca      	b.n	800fc8e <_free_r+0x26>
 800fcf8:	b003      	add	sp, #12
 800fcfa:	bd30      	pop	{r4, r5, pc}
 800fcfc:	240010b4 	.word	0x240010b4

0800fd00 <sbrk_aligned>:
 800fd00:	b570      	push	{r4, r5, r6, lr}
 800fd02:	4e0e      	ldr	r6, [pc, #56]	; (800fd3c <sbrk_aligned+0x3c>)
 800fd04:	460c      	mov	r4, r1
 800fd06:	6831      	ldr	r1, [r6, #0]
 800fd08:	4605      	mov	r5, r0
 800fd0a:	b911      	cbnz	r1, 800fd12 <sbrk_aligned+0x12>
 800fd0c:	f000 f88c 	bl	800fe28 <_sbrk_r>
 800fd10:	6030      	str	r0, [r6, #0]
 800fd12:	4621      	mov	r1, r4
 800fd14:	4628      	mov	r0, r5
 800fd16:	f000 f887 	bl	800fe28 <_sbrk_r>
 800fd1a:	1c43      	adds	r3, r0, #1
 800fd1c:	d00a      	beq.n	800fd34 <sbrk_aligned+0x34>
 800fd1e:	1cc4      	adds	r4, r0, #3
 800fd20:	f024 0403 	bic.w	r4, r4, #3
 800fd24:	42a0      	cmp	r0, r4
 800fd26:	d007      	beq.n	800fd38 <sbrk_aligned+0x38>
 800fd28:	1a21      	subs	r1, r4, r0
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	f000 f87c 	bl	800fe28 <_sbrk_r>
 800fd30:	3001      	adds	r0, #1
 800fd32:	d101      	bne.n	800fd38 <sbrk_aligned+0x38>
 800fd34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd38:	4620      	mov	r0, r4
 800fd3a:	bd70      	pop	{r4, r5, r6, pc}
 800fd3c:	240010b8 	.word	0x240010b8

0800fd40 <_malloc_r>:
 800fd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd44:	1ccd      	adds	r5, r1, #3
 800fd46:	f025 0503 	bic.w	r5, r5, #3
 800fd4a:	3508      	adds	r5, #8
 800fd4c:	2d0c      	cmp	r5, #12
 800fd4e:	bf38      	it	cc
 800fd50:	250c      	movcc	r5, #12
 800fd52:	2d00      	cmp	r5, #0
 800fd54:	4607      	mov	r7, r0
 800fd56:	db01      	blt.n	800fd5c <_malloc_r+0x1c>
 800fd58:	42a9      	cmp	r1, r5
 800fd5a:	d905      	bls.n	800fd68 <_malloc_r+0x28>
 800fd5c:	230c      	movs	r3, #12
 800fd5e:	603b      	str	r3, [r7, #0]
 800fd60:	2600      	movs	r6, #0
 800fd62:	4630      	mov	r0, r6
 800fd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd68:	4e2e      	ldr	r6, [pc, #184]	; (800fe24 <_malloc_r+0xe4>)
 800fd6a:	f000 f8f7 	bl	800ff5c <__malloc_lock>
 800fd6e:	6833      	ldr	r3, [r6, #0]
 800fd70:	461c      	mov	r4, r3
 800fd72:	bb34      	cbnz	r4, 800fdc2 <_malloc_r+0x82>
 800fd74:	4629      	mov	r1, r5
 800fd76:	4638      	mov	r0, r7
 800fd78:	f7ff ffc2 	bl	800fd00 <sbrk_aligned>
 800fd7c:	1c43      	adds	r3, r0, #1
 800fd7e:	4604      	mov	r4, r0
 800fd80:	d14d      	bne.n	800fe1e <_malloc_r+0xde>
 800fd82:	6834      	ldr	r4, [r6, #0]
 800fd84:	4626      	mov	r6, r4
 800fd86:	2e00      	cmp	r6, #0
 800fd88:	d140      	bne.n	800fe0c <_malloc_r+0xcc>
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4638      	mov	r0, r7
 800fd90:	eb04 0803 	add.w	r8, r4, r3
 800fd94:	f000 f848 	bl	800fe28 <_sbrk_r>
 800fd98:	4580      	cmp	r8, r0
 800fd9a:	d13a      	bne.n	800fe12 <_malloc_r+0xd2>
 800fd9c:	6821      	ldr	r1, [r4, #0]
 800fd9e:	3503      	adds	r5, #3
 800fda0:	1a6d      	subs	r5, r5, r1
 800fda2:	f025 0503 	bic.w	r5, r5, #3
 800fda6:	3508      	adds	r5, #8
 800fda8:	2d0c      	cmp	r5, #12
 800fdaa:	bf38      	it	cc
 800fdac:	250c      	movcc	r5, #12
 800fdae:	4629      	mov	r1, r5
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f7ff ffa5 	bl	800fd00 <sbrk_aligned>
 800fdb6:	3001      	adds	r0, #1
 800fdb8:	d02b      	beq.n	800fe12 <_malloc_r+0xd2>
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	442b      	add	r3, r5
 800fdbe:	6023      	str	r3, [r4, #0]
 800fdc0:	e00e      	b.n	800fde0 <_malloc_r+0xa0>
 800fdc2:	6822      	ldr	r2, [r4, #0]
 800fdc4:	1b52      	subs	r2, r2, r5
 800fdc6:	d41e      	bmi.n	800fe06 <_malloc_r+0xc6>
 800fdc8:	2a0b      	cmp	r2, #11
 800fdca:	d916      	bls.n	800fdfa <_malloc_r+0xba>
 800fdcc:	1961      	adds	r1, r4, r5
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	6025      	str	r5, [r4, #0]
 800fdd2:	bf18      	it	ne
 800fdd4:	6059      	strne	r1, [r3, #4]
 800fdd6:	6863      	ldr	r3, [r4, #4]
 800fdd8:	bf08      	it	eq
 800fdda:	6031      	streq	r1, [r6, #0]
 800fddc:	5162      	str	r2, [r4, r5]
 800fdde:	604b      	str	r3, [r1, #4]
 800fde0:	4638      	mov	r0, r7
 800fde2:	f104 060b 	add.w	r6, r4, #11
 800fde6:	f000 f8bf 	bl	800ff68 <__malloc_unlock>
 800fdea:	f026 0607 	bic.w	r6, r6, #7
 800fdee:	1d23      	adds	r3, r4, #4
 800fdf0:	1af2      	subs	r2, r6, r3
 800fdf2:	d0b6      	beq.n	800fd62 <_malloc_r+0x22>
 800fdf4:	1b9b      	subs	r3, r3, r6
 800fdf6:	50a3      	str	r3, [r4, r2]
 800fdf8:	e7b3      	b.n	800fd62 <_malloc_r+0x22>
 800fdfa:	6862      	ldr	r2, [r4, #4]
 800fdfc:	42a3      	cmp	r3, r4
 800fdfe:	bf0c      	ite	eq
 800fe00:	6032      	streq	r2, [r6, #0]
 800fe02:	605a      	strne	r2, [r3, #4]
 800fe04:	e7ec      	b.n	800fde0 <_malloc_r+0xa0>
 800fe06:	4623      	mov	r3, r4
 800fe08:	6864      	ldr	r4, [r4, #4]
 800fe0a:	e7b2      	b.n	800fd72 <_malloc_r+0x32>
 800fe0c:	4634      	mov	r4, r6
 800fe0e:	6876      	ldr	r6, [r6, #4]
 800fe10:	e7b9      	b.n	800fd86 <_malloc_r+0x46>
 800fe12:	230c      	movs	r3, #12
 800fe14:	603b      	str	r3, [r7, #0]
 800fe16:	4638      	mov	r0, r7
 800fe18:	f000 f8a6 	bl	800ff68 <__malloc_unlock>
 800fe1c:	e7a1      	b.n	800fd62 <_malloc_r+0x22>
 800fe1e:	6025      	str	r5, [r4, #0]
 800fe20:	e7de      	b.n	800fde0 <_malloc_r+0xa0>
 800fe22:	bf00      	nop
 800fe24:	240010b4 	.word	0x240010b4

0800fe28 <_sbrk_r>:
 800fe28:	b538      	push	{r3, r4, r5, lr}
 800fe2a:	4d06      	ldr	r5, [pc, #24]	; (800fe44 <_sbrk_r+0x1c>)
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	4604      	mov	r4, r0
 800fe30:	4608      	mov	r0, r1
 800fe32:	602b      	str	r3, [r5, #0]
 800fe34:	f7f4 f94a 	bl	80040cc <_sbrk>
 800fe38:	1c43      	adds	r3, r0, #1
 800fe3a:	d102      	bne.n	800fe42 <_sbrk_r+0x1a>
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	b103      	cbz	r3, 800fe42 <_sbrk_r+0x1a>
 800fe40:	6023      	str	r3, [r4, #0]
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
 800fe44:	240010bc 	.word	0x240010bc

0800fe48 <__sread>:
 800fe48:	b510      	push	{r4, lr}
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe50:	f000 f890 	bl	800ff74 <_read_r>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	bfab      	itete	ge
 800fe58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe5a:	89a3      	ldrhlt	r3, [r4, #12]
 800fe5c:	181b      	addge	r3, r3, r0
 800fe5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe62:	bfac      	ite	ge
 800fe64:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe66:	81a3      	strhlt	r3, [r4, #12]
 800fe68:	bd10      	pop	{r4, pc}

0800fe6a <__swrite>:
 800fe6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6e:	461f      	mov	r7, r3
 800fe70:	898b      	ldrh	r3, [r1, #12]
 800fe72:	05db      	lsls	r3, r3, #23
 800fe74:	4605      	mov	r5, r0
 800fe76:	460c      	mov	r4, r1
 800fe78:	4616      	mov	r6, r2
 800fe7a:	d505      	bpl.n	800fe88 <__swrite+0x1e>
 800fe7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe80:	2302      	movs	r3, #2
 800fe82:	2200      	movs	r2, #0
 800fe84:	f000 f858 	bl	800ff38 <_lseek_r>
 800fe88:	89a3      	ldrh	r3, [r4, #12]
 800fe8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe92:	81a3      	strh	r3, [r4, #12]
 800fe94:	4632      	mov	r2, r6
 800fe96:	463b      	mov	r3, r7
 800fe98:	4628      	mov	r0, r5
 800fe9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9e:	f000 b817 	b.w	800fed0 <_write_r>

0800fea2 <__sseek>:
 800fea2:	b510      	push	{r4, lr}
 800fea4:	460c      	mov	r4, r1
 800fea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feaa:	f000 f845 	bl	800ff38 <_lseek_r>
 800feae:	1c43      	adds	r3, r0, #1
 800feb0:	89a3      	ldrh	r3, [r4, #12]
 800feb2:	bf15      	itete	ne
 800feb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800feb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800feba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800febe:	81a3      	strheq	r3, [r4, #12]
 800fec0:	bf18      	it	ne
 800fec2:	81a3      	strhne	r3, [r4, #12]
 800fec4:	bd10      	pop	{r4, pc}

0800fec6 <__sclose>:
 800fec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feca:	f000 b813 	b.w	800fef4 <_close_r>
	...

0800fed0 <_write_r>:
 800fed0:	b538      	push	{r3, r4, r5, lr}
 800fed2:	4d07      	ldr	r5, [pc, #28]	; (800fef0 <_write_r+0x20>)
 800fed4:	4604      	mov	r4, r0
 800fed6:	4608      	mov	r0, r1
 800fed8:	4611      	mov	r1, r2
 800feda:	2200      	movs	r2, #0
 800fedc:	602a      	str	r2, [r5, #0]
 800fede:	461a      	mov	r2, r3
 800fee0:	f7f3 f958 	bl	8003194 <_write>
 800fee4:	1c43      	adds	r3, r0, #1
 800fee6:	d102      	bne.n	800feee <_write_r+0x1e>
 800fee8:	682b      	ldr	r3, [r5, #0]
 800feea:	b103      	cbz	r3, 800feee <_write_r+0x1e>
 800feec:	6023      	str	r3, [r4, #0]
 800feee:	bd38      	pop	{r3, r4, r5, pc}
 800fef0:	240010bc 	.word	0x240010bc

0800fef4 <_close_r>:
 800fef4:	b538      	push	{r3, r4, r5, lr}
 800fef6:	4d06      	ldr	r5, [pc, #24]	; (800ff10 <_close_r+0x1c>)
 800fef8:	2300      	movs	r3, #0
 800fefa:	4604      	mov	r4, r0
 800fefc:	4608      	mov	r0, r1
 800fefe:	602b      	str	r3, [r5, #0]
 800ff00:	f7f3 f974 	bl	80031ec <_close>
 800ff04:	1c43      	adds	r3, r0, #1
 800ff06:	d102      	bne.n	800ff0e <_close_r+0x1a>
 800ff08:	682b      	ldr	r3, [r5, #0]
 800ff0a:	b103      	cbz	r3, 800ff0e <_close_r+0x1a>
 800ff0c:	6023      	str	r3, [r4, #0]
 800ff0e:	bd38      	pop	{r3, r4, r5, pc}
 800ff10:	240010bc 	.word	0x240010bc

0800ff14 <_fstat_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4d07      	ldr	r5, [pc, #28]	; (800ff34 <_fstat_r+0x20>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	4608      	mov	r0, r1
 800ff1e:	4611      	mov	r1, r2
 800ff20:	602b      	str	r3, [r5, #0]
 800ff22:	f7f3 f9a3 	bl	800326c <_fstat>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	d102      	bne.n	800ff30 <_fstat_r+0x1c>
 800ff2a:	682b      	ldr	r3, [r5, #0]
 800ff2c:	b103      	cbz	r3, 800ff30 <_fstat_r+0x1c>
 800ff2e:	6023      	str	r3, [r4, #0]
 800ff30:	bd38      	pop	{r3, r4, r5, pc}
 800ff32:	bf00      	nop
 800ff34:	240010bc 	.word	0x240010bc

0800ff38 <_lseek_r>:
 800ff38:	b538      	push	{r3, r4, r5, lr}
 800ff3a:	4d07      	ldr	r5, [pc, #28]	; (800ff58 <_lseek_r+0x20>)
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	4608      	mov	r0, r1
 800ff40:	4611      	mov	r1, r2
 800ff42:	2200      	movs	r2, #0
 800ff44:	602a      	str	r2, [r5, #0]
 800ff46:	461a      	mov	r2, r3
 800ff48:	f7f4 f8b2 	bl	80040b0 <_lseek>
 800ff4c:	1c43      	adds	r3, r0, #1
 800ff4e:	d102      	bne.n	800ff56 <_lseek_r+0x1e>
 800ff50:	682b      	ldr	r3, [r5, #0]
 800ff52:	b103      	cbz	r3, 800ff56 <_lseek_r+0x1e>
 800ff54:	6023      	str	r3, [r4, #0]
 800ff56:	bd38      	pop	{r3, r4, r5, pc}
 800ff58:	240010bc 	.word	0x240010bc

0800ff5c <__malloc_lock>:
 800ff5c:	4801      	ldr	r0, [pc, #4]	; (800ff64 <__malloc_lock+0x8>)
 800ff5e:	f7ff be53 	b.w	800fc08 <__retarget_lock_acquire_recursive>
 800ff62:	bf00      	nop
 800ff64:	240010b0 	.word	0x240010b0

0800ff68 <__malloc_unlock>:
 800ff68:	4801      	ldr	r0, [pc, #4]	; (800ff70 <__malloc_unlock+0x8>)
 800ff6a:	f7ff be4e 	b.w	800fc0a <__retarget_lock_release_recursive>
 800ff6e:	bf00      	nop
 800ff70:	240010b0 	.word	0x240010b0

0800ff74 <_read_r>:
 800ff74:	b538      	push	{r3, r4, r5, lr}
 800ff76:	4d07      	ldr	r5, [pc, #28]	; (800ff94 <_read_r+0x20>)
 800ff78:	4604      	mov	r4, r0
 800ff7a:	4608      	mov	r0, r1
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	2200      	movs	r2, #0
 800ff80:	602a      	str	r2, [r5, #0]
 800ff82:	461a      	mov	r2, r3
 800ff84:	f7f3 f94a 	bl	800321c <_read>
 800ff88:	1c43      	adds	r3, r0, #1
 800ff8a:	d102      	bne.n	800ff92 <_read_r+0x1e>
 800ff8c:	682b      	ldr	r3, [r5, #0]
 800ff8e:	b103      	cbz	r3, 800ff92 <_read_r+0x1e>
 800ff90:	6023      	str	r3, [r4, #0]
 800ff92:	bd38      	pop	{r3, r4, r5, pc}
 800ff94:	240010bc 	.word	0x240010bc

0800ff98 <_init>:
 800ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff9a:	bf00      	nop
 800ff9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff9e:	bc08      	pop	{r3}
 800ffa0:	469e      	mov	lr, r3
 800ffa2:	4770      	bx	lr

0800ffa4 <_fini>:
 800ffa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa6:	bf00      	nop
 800ffa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffaa:	bc08      	pop	{r3}
 800ffac:	469e      	mov	lr, r3
 800ffae:	4770      	bx	lr
