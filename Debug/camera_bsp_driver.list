
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc6c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800ff1c  0800ff1c  0001ff1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010600  08010600  00020600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010608  08010608  00020608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801060c  0801060c  0002060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010610  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00060790  240000b8  080106c8  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24060848  080106c8  00030848  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024d4a  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000490c  00000000  00000000  00054e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f8  00000000  00000000  00059740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001620  00000000  00000000  0005af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b72  00000000  00000000  0005c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024a54  00000000  00000000  000940ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e6fc  00000000  00000000  000b8b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020721a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a38  00000000  00000000  0020726c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ff04 	.word	0x0800ff04

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	0800ff04 	.word	0x0800ff04

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_DCMI_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006e2:	f003 ff45 	bl	8004570 <HAL_DCMI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 feb2 	bl	8001454 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240000d4 	.word	0x240000d4
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <HAL_DCMI_MspInit+0x1f8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80e5 	bne.w	80008ea <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000722:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000732:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074e:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b5f      	ldr	r3, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a5d      	ldr	r2, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a56      	ldr	r2, [pc, #344]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80007d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4842      	ldr	r0, [pc, #264]	; (80008fc <HAL_DCMI_MspInit+0x200>)
 80007f2:	f007 ff3d 	bl	8008670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <HAL_DCMI_MspInit+0x204>)
 8000814:	f007 ff2c 	bl	8008670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000818:	2308      	movs	r3, #8
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000828:	230d      	movs	r3, #13
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <HAL_DCMI_MspInit+0x208>)
 8000834:	f007 ff1c 	bl	8008670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000838:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084a:	230d      	movs	r3, #13
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	482c      	ldr	r0, [pc, #176]	; (8000908 <HAL_DCMI_MspInit+0x20c>)
 8000856:	f007 ff0b 	bl	8008670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800085a:	2350      	movs	r3, #80	; 0x50
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086a:	230d      	movs	r3, #13
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4825      	ldr	r0, [pc, #148]	; (800090c <HAL_DCMI_MspInit+0x210>)
 8000876:	f007 fefb 	bl	8008670 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000882:	224b      	movs	r2, #75	; 0x4b
 8000884:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008c0:	f004 f924 	bl	8004b0c <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80008ca:	f000 fdc3 	bl	8001454 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d2:	649a      	str	r2, [r3, #72]	; 0x48
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	204e      	movs	r0, #78	; 0x4e
 80008e0:	f003 fe11 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80008e4:	204e      	movs	r0, #78	; 0x4e
 80008e6:	f003 fe28 	bl	800453a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020400 	.word	0x58020400
 8000900:	58021800 	.word	0x58021800
 8000904:	58020c00 	.word	0x58020c00
 8000908:	58020800 	.word	0x58020800
 800090c:	58020000 	.word	0x58020000
 8000910:	24000124 	.word	0x24000124
 8000914:	40020428 	.word	0x40020428

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA_Init+0x3c>)
 8000920:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f003 fde0 	bl	8004506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000946:	2039      	movs	r0, #57	; 0x39
 8000948:	f003 fdf7 	bl	800453a <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024400 	.word	0x58024400

08000958 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 800096a:	2202      	movs	r2, #2
 800096c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 8000976:	2200      	movs	r2, #0
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 800097c:	2202      	movs	r2, #2
 800097e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 8000982:	2200      	movs	r2, #0
 8000984:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 8000988:	2200      	movs	r2, #0
 800098a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 800098e:	2200      	movs	r2, #0
 8000990:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 8000994:	2200      	movs	r2, #0
 8000996:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 800099a:	2200      	movs	r2, #0
 800099c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 80009a0:	f006 ff94 	bl	80078cc <HAL_DMA2D_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009aa:	f000 fd53 	bl	8001454 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009ae:	2101      	movs	r1, #1
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_DMA2D_Init+0x6c>)
 80009b2:	f007 f8ff 	bl	8007bb4 <HAL_DMA2D_ConfigLayer>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80009bc:	f000 fd4a 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2400019c 	.word	0x2400019c
 80009c8:	52001000 	.word	0x52001000

080009cc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d116      	bne.n	8000a0c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_DMA2D_MspInit+0x4c>)
 80009e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <HAL_DMA2D_MspInit+0x4c>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_DMA2D_MspInit+0x4c>)
 80009f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	205a      	movs	r0, #90	; 0x5a
 8000a02:	f003 fd80 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a06:	205a      	movs	r0, #90	; 0x5a
 8000a08:	f003 fd97 	bl	800453a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	52001000 	.word	0x52001000
 8000a18:	58024400 	.word	0x58024400

08000a1c <MX_GPIO_Init>:
     PE8   ------> FMC_D5_DA5
     PE11   ------> FMC_D8_DA8
     PH7   ------> FMC_SDCKE1
*/
void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b090      	sub	sp, #64	; 0x40
 8000a20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a32:	4bbf      	ldr	r3, [pc, #764]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a38:	4abd      	ldr	r2, [pc, #756]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a42:	4bbb      	ldr	r3, [pc, #748]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4bb7      	ldr	r3, [pc, #732]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a56:	4ab6      	ldr	r2, [pc, #728]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a60:	4bb3      	ldr	r3, [pc, #716]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	4bb0      	ldr	r3, [pc, #704]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a74:	4aae      	ldr	r2, [pc, #696]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a7e:	4bac      	ldr	r3, [pc, #688]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a8c:	4ba8      	ldr	r3, [pc, #672]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a92:	4aa7      	ldr	r2, [pc, #668]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a9c:	4ba4      	ldr	r3, [pc, #656]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4ba1      	ldr	r3, [pc, #644]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000aac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab0:	4a9f      	ldr	r2, [pc, #636]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aba:	4b9d      	ldr	r3, [pc, #628]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b99      	ldr	r3, [pc, #612]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000aca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ace:	4a98      	ldr	r2, [pc, #608]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad8:	4b95      	ldr	r3, [pc, #596]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000ada:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	4b92      	ldr	r3, [pc, #584]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aec:	4a90      	ldr	r2, [pc, #576]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af6:	4b8e      	ldr	r3, [pc, #568]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b04:	4b8a      	ldr	r3, [pc, #552]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0a:	4a89      	ldr	r2, [pc, #548]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b14:	4b86      	ldr	r3, [pc, #536]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b83      	ldr	r3, [pc, #524]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b28:	4a81      	ldr	r2, [pc, #516]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b32:	4b7f      	ldr	r3, [pc, #508]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b40:	4b7b      	ldr	r3, [pc, #492]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b46:	4a7a      	ldr	r2, [pc, #488]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b50:	4b77      	ldr	r3, [pc, #476]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b56:	f003 0320 	and.w	r3, r3, #32
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	4b74      	ldr	r3, [pc, #464]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	4a72      	ldr	r2, [pc, #456]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6e:	4b70      	ldr	r3, [pc, #448]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	210e      	movs	r1, #14
 8000b80:	486c      	ldr	r0, [pc, #432]	; (8000d34 <MX_GPIO_Init+0x318>)
 8000b82:	f008 f82f 	bl	8008be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f640 0104 	movw	r1, #2052	; 0x804
 8000b8c:	486a      	ldr	r0, [pc, #424]	; (8000d38 <MX_GPIO_Init+0x31c>)
 8000b8e:	f008 f829 	bl	8008be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	4868      	ldr	r0, [pc, #416]	; (8000d3c <MX_GPIO_Init+0x320>)
 8000b9a:	f008 f823 	bl	8008be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4865      	ldr	r0, [pc, #404]	; (8000d38 <MX_GPIO_Init+0x31c>)
 8000ba4:	f008 f81e 	bl	8008be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2106      	movs	r1, #6
 8000bac:	4863      	ldr	r0, [pc, #396]	; (8000d3c <MX_GPIO_Init+0x320>)
 8000bae:	f008 f819 	bl	8008be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000bb2:	2330      	movs	r3, #48	; 0x30
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	485b      	ldr	r0, [pc, #364]	; (8000d34 <MX_GPIO_Init+0x318>)
 8000bc8:	f007 fd52 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000bcc:	f248 1333 	movw	r3, #33075	; 0x8133
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bde:	230c      	movs	r3, #12
 8000be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	4853      	ldr	r0, [pc, #332]	; (8000d38 <MX_GPIO_Init+0x31c>)
 8000bea:	f007 fd41 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000bee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000c00:	2305      	movs	r3, #5
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	484b      	ldr	r0, [pc, #300]	; (8000d38 <MX_GPIO_Init+0x31c>)
 8000c0c:	f007 fd30 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000c22:	2309      	movs	r3, #9
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4842      	ldr	r0, [pc, #264]	; (8000d38 <MX_GPIO_Init+0x31c>)
 8000c2e:	f007 fd1f 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000c42:	230a      	movs	r3, #10
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	483c      	ldr	r0, [pc, #240]	; (8000d40 <MX_GPIO_Init+0x324>)
 8000c4e:	f007 fd0f 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000c52:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c64:	230c      	movs	r3, #12
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4834      	ldr	r0, [pc, #208]	; (8000d40 <MX_GPIO_Init+0x324>)
 8000c70:	f007 fcfe 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000c74:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c86:	230c      	movs	r3, #12
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482c      	ldr	r0, [pc, #176]	; (8000d44 <MX_GPIO_Init+0x328>)
 8000c92:	f007 fced 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000c96:	230e      	movs	r3, #14
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000caa:	4619      	mov	r1, r3
 8000cac:	4821      	ldr	r0, [pc, #132]	; (8000d34 <MX_GPIO_Init+0x318>)
 8000cae:	f007 fcdf 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000cb2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_GPIO_Init+0x32c>)
 8000cd0:	f007 fcce 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000cd4:	f640 030c 	movw	r3, #2060	; 0x80c
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <MX_GPIO_Init+0x31c>)
 8000cee:	f007 fcbf 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d02:	230c      	movs	r3, #12
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MX_GPIO_Init+0x324>)
 8000d0e:	f007 fcaf 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d26:	4619      	mov	r1, r3
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <MX_GPIO_Init+0x318>)
 8000d2a:	f007 fca1 	bl	8008670 <HAL_GPIO_Init>
 8000d2e:	e00d      	b.n	8000d4c <MX_GPIO_Init+0x330>
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58022000 	.word	0x58022000
 8000d38:	58021800 	.word	0x58021800
 8000d3c:	58020000 	.word	0x58020000
 8000d40:	58020c00 	.word	0x58020c00
 8000d44:	58020800 	.word	0x58020800
 8000d48:	58021000 	.word	0x58021000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4869      	ldr	r0, [pc, #420]	; (8000f10 <MX_GPIO_Init+0x4f4>)
 8000d6a:	f007 fc81 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000d6e:	f640 0306 	movw	r3, #2054	; 0x806
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4862      	ldr	r0, [pc, #392]	; (8000f10 <MX_GPIO_Init+0x4f4>)
 8000d88:	f007 fc72 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da0:	4619      	mov	r1, r3
 8000da2:	485c      	ldr	r0, [pc, #368]	; (8000f14 <MX_GPIO_Init+0x4f8>)
 8000da4:	f007 fc64 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000da8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4854      	ldr	r0, [pc, #336]	; (8000f18 <MX_GPIO_Init+0x4fc>)
 8000dc6:	f007 fc53 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	484a      	ldr	r0, [pc, #296]	; (8000f10 <MX_GPIO_Init+0x4f4>)
 8000de8:	f007 fc42 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4845      	ldr	r0, [pc, #276]	; (8000f1c <MX_GPIO_Init+0x500>)
 8000e08:	f007 fc32 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	483b      	ldr	r0, [pc, #236]	; (8000f14 <MX_GPIO_Init+0x4f8>)
 8000e28:	f007 fc22 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000e2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e32:	2312      	movs	r3, #18
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e46:	4619      	mov	r1, r3
 8000e48:	4835      	ldr	r0, [pc, #212]	; (8000f20 <MX_GPIO_Init+0x504>)
 8000e4a:	f007 fc11 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000e4e:	2322      	movs	r3, #34	; 0x22
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000e5e:	230a      	movs	r3, #10
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e66:	4619      	mov	r1, r3
 8000e68:	482a      	ldr	r0, [pc, #168]	; (8000f14 <MX_GPIO_Init+0x4f8>)
 8000e6a:	f007 fc01 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4828      	ldr	r0, [pc, #160]	; (8000f24 <MX_GPIO_Init+0x508>)
 8000e84:	f007 fbf4 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000e88:	23e0      	movs	r3, #224	; 0xe0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4820      	ldr	r0, [pc, #128]	; (8000f24 <MX_GPIO_Init+0x508>)
 8000ea4:	f007 fbe4 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000eb8:	2309      	movs	r3, #9
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4818      	ldr	r0, [pc, #96]	; (8000f24 <MX_GPIO_Init+0x508>)
 8000ec4:	f007 fbd4 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000ec8:	2309      	movs	r3, #9
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000ed8:	2305      	movs	r3, #5
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <MX_GPIO_Init+0x4f4>)
 8000ee4:	f007 fbc4 	bl	8008670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ef8:	2309      	movs	r3, #9
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f00:	4619      	mov	r1, r3
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <MX_GPIO_Init+0x50c>)
 8000f04:	f007 fbb4 	bl	8008670 <HAL_GPIO_Init>

}
 8000f08:	bf00      	nop
 8000f0a:	3740      	adds	r7, #64	; 0x40
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58020000 	.word	0x58020000
 8000f14:	58020800 	.word	0x58020800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58021800 	.word	0x58021800
 8000f20:	58020c00 	.word	0x58020c00
 8000f24:	58021c00 	.word	0x58021c00
 8000f28:	58020400 	.word	0x58020400

08000f2c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	; 0x38
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2234      	movs	r2, #52	; 0x34
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00d ff7f 	bl	800ee3c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f3e:	4b39      	ldr	r3, [pc, #228]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f40:	4a39      	ldr	r2, [pc, #228]	; (8001028 <MX_LTDC_Init+0xfc>)
 8000f42:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f44:	4b37      	ldr	r3, [pc, #220]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f4a:	4b36      	ldr	r3, [pc, #216]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8000f50:	4b34      	ldr	r3, [pc, #208]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f52:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f56:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f58:	4b32      	ldr	r3, [pc, #200]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f64:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f66:	2203      	movs	r2, #3
 8000f68:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f6c:	220e      	movs	r2, #14
 8000f6e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f72:	2205      	movs	r2, #5
 8000f74:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f78:	f240 228e 	movw	r2, #654	; 0x28e
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f7e:	4b29      	ldr	r3, [pc, #164]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f80:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f88:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f90:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <MX_LTDC_Init+0xf8>)
 8000fb0:	f008 fcb8 	bl	8009924 <HAL_LTDC_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000fba:	f000 fa4b 	bl	8001454 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8000fc2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fc6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8000fcc:	23f0      	movs	r3, #240	; 0xf0
 8000fce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_LTDC_Init+0xf8>)
 800100c:	f008 fe1c 	bl	8009c48 <HAL_LTDC_ConfigLayer>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001016:	f000 fa1d 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3738      	adds	r7, #56	; 0x38
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	24000204 	.word	0x24000204
 8001028:	50001000 	.word	0x50001000

0800102c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0bc      	sub	sp, #240	; 0xf0
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	22c0      	movs	r2, #192	; 0xc0
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00d fef5 	bl	800ee3c <memset>
  if(ltdcHandle->Instance==LTDC)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a5b      	ldr	r2, [pc, #364]	; (80011c4 <HAL_LTDC_MspInit+0x198>)
 8001058:	4293      	cmp	r3, r2
 800105a:	f040 80ae 	bne.w	80011ba <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800105e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 11;
 800106e:	230b      	movs	r3, #11
 8001070:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001072:	2311      	movs	r3, #17
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 11;
 800107a:	230b      	movs	r3, #11
 800107c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800107e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001082:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001084:	2300      	movs	r3, #0
 8001086:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f00a f843 	bl	800b11c <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 800109c:	f000 f9da 	bl	8001454 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010a0:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80010a6:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010b2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c4:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010dc:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e2:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 80010fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001100:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800110a:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <HAL_LTDC_MspInit+0x19c>)
 800110c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001130:	230e      	movs	r3, #14
 8001132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001136:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800113a:	4619      	mov	r1, r3
 800113c:	4823      	ldr	r0, [pc, #140]	; (80011cc <HAL_LTDC_MspInit+0x1a0>)
 800113e:	f007 fa97 	bl	8008670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115c:	230e      	movs	r3, #14
 800115e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001162:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001166:	4619      	mov	r1, r3
 8001168:	4819      	ldr	r0, [pc, #100]	; (80011d0 <HAL_LTDC_MspInit+0x1a4>)
 800116a:	f007 fa81 	bl	8008670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 800116e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001188:	230e      	movs	r3, #14
 800118a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800118e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001192:	4619      	mov	r1, r3
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <HAL_LTDC_MspInit+0x1a8>)
 8001196:	f007 fa6b 	bl	8008670 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2058      	movs	r0, #88	; 0x58
 80011a0:	f003 f9b1 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011a4:	2058      	movs	r0, #88	; 0x58
 80011a6:	f003 f9c8 	bl	800453a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2059      	movs	r0, #89	; 0x59
 80011b0:	f003 f9a9 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80011b4:	2059      	movs	r0, #89	; 0x59
 80011b6:	f003 f9c0 	bl	800453a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	37f0      	adds	r7, #240	; 0xf0
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	50001000 	.word	0x50001000
 80011c8:	58024400 	.word	0x58024400
 80011cc:	58022800 	.word	0x58022800
 80011d0:	58022400 	.word	0x58022400
 80011d4:	58022000 	.word	0x58022000

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f003 f801 	bl	80041e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f8a1 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f7ff fc19 	bl	8000a1c <MX_GPIO_Init>
  MX_DMA_Init();
 80011ea:	f7ff fb95 	bl	8000918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011ee:	f002 ff11 	bl	8004014 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80011f2:	f7ff fbb1 	bl	8000958 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80011f6:	f7ff fe99 	bl	8000f2c <MX_LTDC_Init>
  MX_DCMI_Init();
 80011fa:	f7ff fa4b 	bl	8000694 <MX_DCMI_Init>
  MX_RTC_Init();
 80011fe:	f001 fe87 	bl	8002f10 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8001202:	4842      	ldr	r0, [pc, #264]	; (800130c <main+0x134>)
 8001204:	f001 fdce 	bl	8002da4 <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <main+0x138>)
 800120a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120e:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4619      	mov	r1, r3
 8001216:	483f      	ldr	r0, [pc, #252]	; (8001314 <main+0x13c>)
 8001218:	f00d fe18 	bl	800ee4c <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 800121c:	2000      	movs	r0, #0
 800121e:	f002 fc9a 	bl	8003b56 <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB888) != BSP_ERROR_NONE){
 8001222:	2201      	movs	r2, #1
 8001224:	2102      	movs	r1, #2
 8001226:	2000      	movs	r0, #0
 8001228:	f002 fb24 	bl	8003874 <BSP_CAMERA_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <main+0x5e>
	  Error_Handler();
 8001232:	f000 f90f 	bl	8001454 <Error_Handler>
  }

  HAL_Delay(2000);
 8001236:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800123a:	f003 f865 	bl	8004308 <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2234      	movs	r2, #52	; 0x34
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f00d fdf9 	bl	800ee3c <memset>

  pLayerCfg.WindowX0 = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800124e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001252:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001258:	f44f 7388 	mov.w	r3, #272	; 0x110
 800125c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800125e:	2301      	movs	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001270:	2305      	movs	r3, #5
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t) buffer;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <main+0x138>)
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001278:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800127e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8001290:	23ff      	movs	r3, #255	; 0xff
 8001292:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	481e      	ldr	r0, [pc, #120]	; (8001318 <main+0x140>)
 800129e:	f008 fcd3 	bl	8009c48 <HAL_LTDC_ConfigLayer>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <main+0xd4>
  {
    Error_Handler();
 80012a8:	f000 f8d4 	bl	8001454 <Error_Handler>
//      o Call BSP_CAMERA_SetContrast()/BSP_CAMERA_GetContrast() to set/get the camera Contrast
//        Contrast is value between -4(Level 4 negative) and 4(Level 4 positive).
//
//      o Call BSP_CAMERA_SetHueDegree()/BSP_CAMERA_GetHueDegree() to set/get the camera Hue Degree
//        HueDegree is value between -4(180 degree negative) and 4(150 degree positive).
	BSP_CAMERA_SetLightMode(0, CAMERA_LIGHT_HOME);
 80012ac:	2104      	movs	r1, #4
 80012ae:	2000      	movs	r0, #0
 80012b0:	f002 fb7e 	bl	80039b0 <BSP_CAMERA_SetLightMode>
	BSP_CAMERA_SetColorEffect(0, CAMERA_COLOR_EFFECT_NONE);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f002 fbb8 	bl	8003a2c <BSP_CAMERA_SetColorEffect>
	BSP_CAMERA_SetHueDegree(0, 4);
 80012bc:	2104      	movs	r1, #4
 80012be:	2000      	movs	r0, #0
 80012c0:	f002 fbf2 	bl	8003aa8 <BSP_CAMERA_SetHueDegree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Printing photo 1");
 80012c4:	4815      	ldr	r0, [pc, #84]	; (800131c <main+0x144>)
 80012c6:	f00d fdc1 	bl	800ee4c <iprintf>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <main+0x148>)
 80012d2:	f007 fc87 	bl	8008be4 <HAL_GPIO_WritePin>
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 80012d6:	2202      	movs	r2, #2
 80012d8:	490d      	ldr	r1, [pc, #52]	; (8001310 <main+0x138>)
 80012da:	2000      	movs	r0, #0
 80012dc:	f002 fb10 	bl	8003900 <BSP_CAMERA_Start>
  BSP_CAMERA_Stop(0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f002 fb47 	bl	8003974 <BSP_CAMERA_Stop>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <main+0x148>)
 80012ee:	f007 fc79 	bl	8008be4 <HAL_GPIO_WritePin>

  while (1)
  {
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 80012f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f6:	480a      	ldr	r0, [pc, #40]	; (8001320 <main+0x148>)
 80012f8:	f007 fc8d 	bl	8008c16 <HAL_GPIO_TogglePin>
	printf("siema");
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <main+0x14c>)
 80012fe:	f00d fda5 	bl	800ee4c <iprintf>
	HAL_Delay(1000);
 8001302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001306:	f002 ffff 	bl	8004308 <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800130a:	e7f2      	b.n	80012f2 <main+0x11a>
 800130c:	240607a0 	.word	0x240607a0
 8001310:	240002b0 	.word	0x240002b0
 8001314:	0800ff1c 	.word	0x0800ff1c
 8001318:	24000204 	.word	0x24000204
 800131c:	0800ff44 	.word	0x0800ff44
 8001320:	58021800 	.word	0x58021800
 8001324:	0800ff58 	.word	0x0800ff58

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b09c      	sub	sp, #112	; 0x70
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001332:	224c      	movs	r2, #76	; 0x4c
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00d fd80 	bl	800ee3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2220      	movs	r2, #32
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f00d fd7a 	bl	800ee3c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <SystemClock_Config+0x104>)
 800134a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800134e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001352:	2004      	movs	r0, #4
 8001354:	f008 fe60 	bl	800a018 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <SystemClock_Config+0x108>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a33      	ldr	r2, [pc, #204]	; (8001430 <SystemClock_Config+0x108>)
 8001362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <SystemClock_Config+0x108>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001374:	bf00      	nop
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <SystemClock_Config+0x108>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800137e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001382:	d1f8      	bne.n	8001376 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001384:	f008 fe38 	bl	8009ff8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <SystemClock_Config+0x104>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a27      	ldr	r2, [pc, #156]	; (800142c <SystemClock_Config+0x104>)
 800138e:	f023 0318 	bic.w	r3, r3, #24
 8001392:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001394:	2305      	movs	r3, #5
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	2302      	movs	r3, #2
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013ae:	2328      	movs	r3, #40	; 0x28
 80013b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013b6:	2303      	movs	r3, #3
 80013b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80013ba:	2304      	movs	r3, #4
 80013bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013be:	230c      	movs	r3, #12
 80013c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 80013c6:	f241 5356 	movw	r3, #5462	; 0x1556
 80013ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4618      	mov	r0, r3
 80013d2:	f008 fe7b 	bl	800a0cc <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013dc:	f000 f83a 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	233f      	movs	r3, #63	; 0x3f
 80013e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e4:	2303      	movs	r3, #3
 80013e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013f0:	2340      	movs	r3, #64	; 0x40
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013fe:	2340      	movs	r3, #64	; 0x40
 8001400:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2105      	movs	r1, #5
 8001406:	4618      	mov	r0, r3
 8001408:	f009 fa92 	bl	800a930 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001412:	f000 f81f 	bl	8001454 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001416:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800141a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800141e:	2000      	movs	r0, #0
 8001420:	f009 fc3c 	bl	800ac9c <HAL_RCC_MCOConfig>
}
 8001424:	bf00      	nop
 8001426:	3770      	adds	r7, #112	; 0x70
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	58024400 	.word	0x58024400
 8001430:	58024800 	.word	0x58024800

08001434 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <BSP_CAMERA_FrameEventCallback+0x1c>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	240002ac 	.word	0x240002ac

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e02c      	b.n	80014d2 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	891a      	ldrh	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <OV5640_RegisterBusIO+0x7c>)
 80014ac:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <OV5640_RegisterBusIO+0x80>)
 80014b2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4798      	blx	r3
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	e002      	b.n	80014d2 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	08002ce3 	.word	0x08002ce3
 80014e0:	08002d15 	.word	0x08002d15

080014e4 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d165      	bne.n	80015ca <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d80e      	bhi.n	8001522 <OV5640_Init+0x3e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00f      	beq.n	800152a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d00c      	beq.n	800152a <OV5640_Init+0x46>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d009      	beq.n	800152a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b07      	cmp	r3, #7
 800151a:	d006      	beq.n	800152a <OV5640_Init+0x46>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d003      	beq.n	800152a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	e04f      	b.n	80015ca <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e01f      	b.n	8001570 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001536:	d018      	beq.n	800156a <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001538:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <OV5640_Init+0xf0>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	885b      	ldrh	r3, [r3, #2]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f103 0018 	add.w	r0, r3, #24
 800154c:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <OV5640_Init+0xf0>)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001554:	f107 0217 	add.w	r2, r7, #23
 8001558:	2301      	movs	r3, #1
 800155a:	f001 fc0b 	bl	8002d74 <ov5640_write_reg>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001568:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2bfd      	cmp	r3, #253	; 0xfd
 8001574:	d9dc      	bls.n	8001530 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d126      	bne.n	80015ca <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f9e0 	bl	8001944 <OV5640_SetResolution>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	e01b      	b.n	80015ca <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f833 	bl	8001600 <OV5640_SetPixelFormat>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	e010      	b.n	80015ca <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80015a8:	2300      	movs	r3, #0
 80015aa:	2201      	movs	r2, #1
 80015ac:	2101      	movs	r1, #1
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fb64 	bl	8001c7c <OV5640_SetPolarities>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	e003      	b.n	80015ca <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80015ca:	69bb      	ldr	r3, [r7, #24]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	0800ffa8 	.word	0x0800ffa8

080015d8 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d103      	bne.n	80015f2 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00f      	beq.n	8001634 <OV5640_SetPixelFormat+0x34>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d00c      	beq.n	8001634 <OV5640_SetPixelFormat+0x34>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d009      	beq.n	8001634 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2b07      	cmp	r3, #7
 8001624:	d006      	beq.n	8001634 <OV5640_SetPixelFormat+0x34>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d003      	beq.n	8001634 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e16a      	b.n	800190a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	2b07      	cmp	r3, #7
 800163a:	f200 80c3 	bhi.w	80017c4 <OV5640_SetPixelFormat+0x1c4>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <OV5640_SetPixelFormat+0x44>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	080016bd 	.word	0x080016bd
 8001648:	08001665 	.word	0x08001665
 800164c:	080017c5 	.word	0x080017c5
 8001650:	080017c5 	.word	0x080017c5
 8001654:	080017c5 	.word	0x080017c5
 8001658:	080017c5 	.word	0x080017c5
 800165c:	08001715 	.word	0x08001715
 8001660:	0800176d 	.word	0x0800176d
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	e024      	b.n	80016b4 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001670:	d01d      	beq.n	80016ae <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001672:	4aa8      	ldr	r2, [pc, #672]	; (8001914 <OV5640_SetPixelFormat+0x314>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f103 0018 	add.w	r0, r3, #24
 8001686:	4aa3      	ldr	r2, [pc, #652]	; (8001914 <OV5640_SetPixelFormat+0x314>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800168e:	f107 020f 	add.w	r2, r7, #15
 8001692:	2301      	movs	r3, #1
 8001694:	f001 fb6e 	bl	8002d74 <ov5640_write_reg>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e003      	b.n	80016ae <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80016a6:	2101      	movs	r1, #1
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 fb00 	bl	8002cae <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	3301      	adds	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d9d7      	bls.n	800166a <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80016ba:	e0af      	b.n	800181c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	e024      	b.n	800170c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016c8:	d01d      	beq.n	8001706 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80016ca:	4a93      	ldr	r2, [pc, #588]	; (8001918 <OV5640_SetPixelFormat+0x318>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	885b      	ldrh	r3, [r3, #2]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f103 0018 	add.w	r0, r3, #24
 80016de:	4a8e      	ldr	r2, [pc, #568]	; (8001918 <OV5640_SetPixelFormat+0x318>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016e6:	f107 020f 	add.w	r2, r7, #15
 80016ea:	2301      	movs	r3, #1
 80016ec:	f001 fb42 	bl	8002d74 <ov5640_write_reg>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e003      	b.n	8001706 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80016fe:	2101      	movs	r1, #1
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f001 fad4 	bl	8002cae <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3301      	adds	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d9d7      	bls.n	80016c2 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001712:	e083      	b.n	800181c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	e024      	b.n	8001764 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001720:	d01d      	beq.n	800175e <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001722:	4a7e      	ldr	r2, [pc, #504]	; (800191c <OV5640_SetPixelFormat+0x31c>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	885b      	ldrh	r3, [r3, #2]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f103 0018 	add.w	r0, r3, #24
 8001736:	4a79      	ldr	r2, [pc, #484]	; (800191c <OV5640_SetPixelFormat+0x31c>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800173e:	f107 020f 	add.w	r2, r7, #15
 8001742:	2301      	movs	r3, #1
 8001744:	f001 fb16 	bl	8002d74 <ov5640_write_reg>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e003      	b.n	800175e <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001756:	2101      	movs	r1, #1
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f001 faa8 	bl	8002cae <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	3301      	adds	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d9d7      	bls.n	800171a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800176a:	e057      	b.n	800181c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	e024      	b.n	80017bc <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001778:	d01d      	beq.n	80017b6 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800177a:	4a69      	ldr	r2, [pc, #420]	; (8001920 <OV5640_SetPixelFormat+0x320>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	885b      	ldrh	r3, [r3, #2]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f103 0018 	add.w	r0, r3, #24
 800178e:	4a64      	ldr	r2, [pc, #400]	; (8001920 <OV5640_SetPixelFormat+0x320>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001796:	f107 020f 	add.w	r2, r7, #15
 800179a:	2301      	movs	r3, #1
 800179c:	f001 faea 	bl	8002d74 <ov5640_write_reg>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e003      	b.n	80017b6 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80017ae:	2101      	movs	r1, #1
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f001 fa7c 	bl	8002cae <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	3301      	adds	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d9d7      	bls.n	8001772 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 80017c2:	e02b      	b.n	800181c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e024      	b.n	8001814 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d0:	d01d      	beq.n	800180e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80017d2:	4a54      	ldr	r2, [pc, #336]	; (8001924 <OV5640_SetPixelFormat+0x324>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	885b      	ldrh	r3, [r3, #2]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f103 0018 	add.w	r0, r3, #24
 80017e6:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <OV5640_SetPixelFormat+0x324>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80017ee:	f107 020f 	add.w	r2, r7, #15
 80017f2:	2301      	movs	r3, #1
 80017f4:	f001 fabe 	bl	8002d74 <ov5640_write_reg>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e003      	b.n	800180e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001806:	2101      	movs	r1, #1
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f001 fa50 	bl	8002cae <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	3301      	adds	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d9d7      	bls.n	80017ca <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800181a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b08      	cmp	r3, #8
 8001820:	d173      	bne.n	800190a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f103 0018 	add.w	r0, r3, #24
 8001828:	f107 020f 	add.w	r2, r7, #15
 800182c:	2301      	movs	r3, #1
 800182e:	f643 0121 	movw	r1, #14369	; 0x3821
 8001832:	f001 fa88 	bl	8002d46 <ov5640_read_reg>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e062      	b.n	800190a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	f043 0320 	orr.w	r3, r3, #32
 800184a:	b2db      	uxtb	r3, r3
 800184c:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f103 0018 	add.w	r0, r3, #24
 8001854:	f107 020f 	add.w	r2, r7, #15
 8001858:	2301      	movs	r3, #1
 800185a:	f643 0121 	movw	r1, #14369	; 0x3821
 800185e:	f001 fa89 	bl	8002d74 <ov5640_write_reg>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e04c      	b.n	800190a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f103 0018 	add.w	r0, r3, #24
 8001876:	f107 020f 	add.w	r2, r7, #15
 800187a:	2301      	movs	r3, #1
 800187c:	f243 0102 	movw	r1, #12290	; 0x3002
 8001880:	f001 fa61 	bl	8002d46 <ov5640_read_reg>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e03b      	b.n	800190a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f023 031c 	bic.w	r3, r3, #28
 8001898:	b2db      	uxtb	r3, r3
 800189a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 0018 	add.w	r0, r3, #24
 80018a2:	f107 020f 	add.w	r2, r7, #15
 80018a6:	2301      	movs	r3, #1
 80018a8:	f243 0102 	movw	r1, #12290	; 0x3002
 80018ac:	f001 fa62 	bl	8002d74 <ov5640_write_reg>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e025      	b.n	800190a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f103 0018 	add.w	r0, r3, #24
 80018c4:	f107 020f 	add.w	r2, r7, #15
 80018c8:	2301      	movs	r3, #1
 80018ca:	f243 0106 	movw	r1, #12294	; 0x3006
 80018ce:	f001 fa3a 	bl	8002d46 <ov5640_read_reg>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e014      	b.n	800190a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f103 0018 	add.w	r0, r3, #24
 80018f0:	f107 020f 	add.w	r2, r7, #15
 80018f4:	2301      	movs	r3, #1
 80018f6:	f243 0106 	movw	r1, #12294	; 0x3006
 80018fa:	f001 fa3b 	bl	8002d74 <ov5640_write_reg>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001908:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800190a:	697b      	ldr	r3, [r7, #20]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	080103a0 	.word	0x080103a0
 8001918:	080103a8 	.word	0x080103a8
 800191c:	080103b0 	.word	0x080103b0
 8001920:	080103b8 	.word	0x080103b8
 8001924:	080103c0 	.word	0x080103c0

08001928 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d903      	bls.n	8001960 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e0d8      	b.n	8001b12 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b04      	cmp	r3, #4
 8001964:	f200 80d1 	bhi.w	8001b0a <OV5640_SetResolution+0x1c6>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <OV5640_SetResolution+0x2c>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001985 	.word	0x08001985
 8001974:	080019d3 	.word	0x080019d3
 8001978:	08001a21 	.word	0x08001a21
 800197c:	08001a6f 	.word	0x08001a6f
 8001980:	08001abd 	.word	0x08001abd
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e01f      	b.n	80019ca <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001990:	d018      	beq.n	80019c4 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001992:	4a62      	ldr	r2, [pc, #392]	; (8001b1c <OV5640_SetResolution+0x1d8>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	885b      	ldrh	r3, [r3, #2]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 0018 	add.w	r0, r3, #24
 80019a6:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <OV5640_SetResolution+0x1d8>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019ae:	f107 020f 	add.w	r2, r7, #15
 80019b2:	2301      	movs	r3, #1
 80019b4:	f001 f9de 	bl	8002d74 <ov5640_write_reg>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	3301      	adds	r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d9dc      	bls.n	800198a <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 80019d0:	e09f      	b.n	8001b12 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e01f      	b.n	8001a18 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019de:	d018      	beq.n	8001a12 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <OV5640_SetResolution+0x1dc>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	885b      	ldrh	r3, [r3, #2]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f103 0018 	add.w	r0, r3, #24
 80019f4:	4a4a      	ldr	r2, [pc, #296]	; (8001b20 <OV5640_SetResolution+0x1dc>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019fc:	f107 020f 	add.w	r2, r7, #15
 8001a00:	2301      	movs	r3, #1
 8001a02:	f001 f9b7 	bl	8002d74 <ov5640_write_reg>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a10:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d9dc      	bls.n	80019d8 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001a1e:	e078      	b.n	8001b12 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	e01f      	b.n	8001a66 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a2c:	d018      	beq.n	8001a60 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001a2e:	4a3d      	ldr	r2, [pc, #244]	; (8001b24 <OV5640_SetResolution+0x1e0>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	885b      	ldrh	r3, [r3, #2]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f103 0018 	add.w	r0, r3, #24
 8001a42:	4a38      	ldr	r2, [pc, #224]	; (8001b24 <OV5640_SetResolution+0x1e0>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a4a:	f107 020f 	add.w	r2, r7, #15
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f001 f990 	bl	8002d74 <ov5640_write_reg>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	3301      	adds	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d9dc      	bls.n	8001a26 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001a6c:	e051      	b.n	8001b12 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	e01f      	b.n	8001ab4 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a7a:	d018      	beq.n	8001aae <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <OV5640_SetResolution+0x1e4>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	885b      	ldrh	r3, [r3, #2]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f103 0018 	add.w	r0, r3, #24
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <OV5640_SetResolution+0x1e4>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a98:	f107 020f 	add.w	r2, r7, #15
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f001 f969 	bl	8002d74 <ov5640_write_reg>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aac:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d9dc      	bls.n	8001a74 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001aba:	e02a      	b.n	8001b12 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e01f      	b.n	8001b02 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac8:	d018      	beq.n	8001afc <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <OV5640_SetResolution+0x1e8>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	885b      	ldrh	r3, [r3, #2]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f103 0018 	add.w	r0, r3, #24
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <OV5640_SetResolution+0x1e8>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ae6:	f107 020f 	add.w	r2, r7, #15
 8001aea:	2301      	movs	r3, #1
 8001aec:	f001 f942 	bl	8002d74 <ov5640_write_reg>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afa:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	3301      	adds	r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d9dc      	bls.n	8001ac2 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001b08:	e003      	b.n	8001b12 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b0e:	617b      	str	r3, [r7, #20]
        break;
 8001b10:	bf00      	nop
    }
  }

  return ret;
 8001b12:	697b      	ldr	r3, [r7, #20]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	080103c8 	.word	0x080103c8
 8001b20:	080103d8 	.word	0x080103d8
 8001b24:	080103e8 	.word	0x080103e8
 8001b28:	080103f8 	.word	0x080103f8
 8001b2c:	08010408 	.word	0x08010408

08001b30 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f103 0018 	add.w	r0, r3, #24
 8001b40:	f107 020f 	add.w	r2, r7, #15
 8001b44:	2301      	movs	r3, #1
 8001b46:	f643 0108 	movw	r1, #14344	; 0x3808
 8001b4a:	f001 f8fc 	bl	8002d46 <ov5640_read_reg>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e08a      	b.n	8001c72 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f103 0018 	add.w	r0, r3, #24
 8001b6a:	f107 020f 	add.w	r2, r7, #15
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f643 0109 	movw	r1, #14345	; 0x3809
 8001b74:	f001 f8e7 	bl	8002d46 <ov5640_read_reg>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e075      	b.n	8001c72 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	8a7b      	ldrh	r3, [r7, #18]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f103 0018 	add.w	r0, r3, #24
 8001b96:	f107 020f 	add.w	r2, r7, #15
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f643 010a 	movw	r1, #14346	; 0x380a
 8001ba0:	f001 f8d1 	bl	8002d46 <ov5640_read_reg>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e05f      	b.n	8001c72 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 0018 	add.w	r0, r3, #24
 8001bc0:	f107 020f 	add.w	r2, r7, #15
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f643 010b 	movw	r1, #14347	; 0x380b
 8001bca:	f001 f8bc 	bl	8002d46 <ov5640_read_reg>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e04a      	b.n	8001c72 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	8a3b      	ldrh	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001be6:	8a7b      	ldrh	r3, [r7, #18]
 8001be8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001bec:	d109      	bne.n	8001c02 <OV5640_GetResolution+0xd2>
 8001bee:	8a3b      	ldrh	r3, [r7, #16]
 8001bf0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001bf4:	d105      	bne.n	8001c02 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e037      	b.n	8001c72 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001c02:	8a7b      	ldrh	r3, [r7, #18]
 8001c04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001c08:	d109      	bne.n	8001c1e <OV5640_GetResolution+0xee>
 8001c0a:	8a3b      	ldrh	r3, [r7, #16]
 8001c0c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c10:	d105      	bne.n	8001c1e <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2203      	movs	r2, #3
 8001c16:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e029      	b.n	8001c72 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001c1e:	8a7b      	ldrh	r3, [r7, #18]
 8001c20:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c24:	d109      	bne.n	8001c3a <OV5640_GetResolution+0x10a>
 8001c26:	8a3b      	ldrh	r3, [r7, #16]
 8001c28:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001c2c:	d105      	bne.n	8001c3a <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2202      	movs	r2, #2
 8001c32:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e01b      	b.n	8001c72 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001c3a:	8a7b      	ldrh	r3, [r7, #18]
 8001c3c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c40:	d108      	bne.n	8001c54 <OV5640_GetResolution+0x124>
 8001c42:	8a3b      	ldrh	r3, [r7, #16]
 8001c44:	2bf0      	cmp	r3, #240	; 0xf0
 8001c46:	d105      	bne.n	8001c54 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e00e      	b.n	8001c72 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001c54:	8a7b      	ldrh	r3, [r7, #18]
 8001c56:	2ba0      	cmp	r3, #160	; 0xa0
 8001c58:	d108      	bne.n	8001c6c <OV5640_GetResolution+0x13c>
 8001c5a:	8a3b      	ldrh	r3, [r7, #16]
 8001c5c:	2b78      	cmp	r3, #120	; 0x78
 8001c5e:	d105      	bne.n	8001c6c <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e002      	b.n	8001c72 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c70:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001c72:	697b      	ldr	r3, [r7, #20]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d011      	beq.n	8001cb8 <OV5640_SetPolarities+0x3c>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <OV5640_SetPolarities+0x24>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10b      	bne.n	8001cb8 <OV5640_SetPolarities+0x3c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <OV5640_SetPolarities+0x3c>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d006      	beq.n	8001cc0 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e01e      	b.n	8001cfe <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f103 0018 	add.w	r0, r3, #24
 8001ce4:	f107 0213 	add.w	r2, r7, #19
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f244 7140 	movw	r1, #18240	; 0x4740
 8001cee:	f001 f841 	bl	8002d74 <ov5640_write_reg>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001cfe:	697b      	ldr	r3, [r7, #20]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f103 0018 	add.w	r0, r3, #24
 8001d22:	f107 020b 	add.w	r2, r7, #11
 8001d26:	2301      	movs	r3, #1
 8001d28:	f243 0108 	movw	r1, #12296	; 0x3008
 8001d2c:	f001 f822 	bl	8002d74 <ov5640_write_reg>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e032      	b.n	8001da4 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001d3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 ffb3 	bl	8002cae <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f103 0018 	add.w	r0, r3, #24
 8001d4e:	f107 020b 	add.w	r2, r7, #11
 8001d52:	2301      	movs	r3, #1
 8001d54:	f243 010a 	movw	r1, #12298	; 0x300a
 8001d58:	f000 fff5 	bl	8002d46 <ov5640_read_reg>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e01c      	b.n	8001da4 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	021a      	lsls	r2, r3, #8
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f103 0018 	add.w	r0, r3, #24
 8001d78:	f107 020b 	add.w	r2, r7, #11
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f243 010b 	movw	r1, #12299	; 0x300b
 8001d82:	f000 ffe0 	bl	8002d46 <ov5640_read_reg>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e007      	b.n	8001da4 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	7afa      	ldrb	r2, [r7, #11]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e01f      	b.n	8001e06 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f103 0018 	add.w	r0, r3, #24
 8001e28:	f107 020f 	add.w	r2, r7, #15
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f243 4106 	movw	r1, #13318	; 0x3406
 8001e32:	f000 ff9f 	bl	8002d74 <ov5640_write_reg>
 8001e36:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001e3e:	2346      	movs	r3, #70	; 0x46
 8001e40:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f103 0018 	add.w	r0, r3, #24
 8001e48:	f107 020f 	add.w	r2, r7, #15
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f245 1190 	movw	r1, #20880	; 0x5190
 8001e52:	f000 ff8f 	bl	8002d74 <ov5640_write_reg>
 8001e56:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8001e5e:	23f8      	movs	r3, #248	; 0xf8
 8001e60:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f103 0018 	add.w	r0, r3, #24
 8001e68:	f107 020f 	add.w	r2, r7, #15
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f245 1191 	movw	r1, #20881	; 0x5191
 8001e72:	f000 ff7f 	bl	8002d74 <ov5640_write_reg>
 8001e76:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f103 0018 	add.w	r0, r3, #24
 8001e88:	f107 020f 	add.w	r2, r7, #15
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f245 1192 	movw	r1, #20882	; 0x5192
 8001e92:	f000 ff6f 	bl	8002d74 <ov5640_write_reg>
 8001e96:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 80db 	bne.w	8002056 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	2b07      	cmp	r3, #7
 8001ea6:	f200 80af 	bhi.w	8002008 <OV5640_SetLightMode+0x1f4>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <OV5640_SetLightMode+0x9c>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ed1 	.word	0x08001ed1
 8001eb4:	08001f1f 	.word	0x08001f1f
 8001eb8:	08002009 	.word	0x08002009
 8001ebc:	08001fbb 	.word	0x08001fbb
 8001ec0:	08002009 	.word	0x08002009
 8001ec4:	08002009 	.word	0x08002009
 8001ec8:	08002009 	.word	0x08002009
 8001ecc:	08001f6d 	.word	0x08001f6d
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e01f      	b.n	8001f16 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001edc:	d018      	beq.n	8001f10 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001ede:	4a61      	ldr	r2, [pc, #388]	; (8002064 <OV5640_SetLightMode+0x250>)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	885b      	ldrh	r3, [r3, #2]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 0018 	add.w	r0, r3, #24
 8001ef2:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <OV5640_SetLightMode+0x250>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001efa:	f107 020f 	add.w	r2, r7, #15
 8001efe:	2301      	movs	r3, #1
 8001f00:	f000 ff38 	bl	8002d74 <ov5640_write_reg>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	3301      	adds	r3, #1
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d9dc      	bls.n	8001ed6 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8001f1c:	e09c      	b.n	8002058 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e01f      	b.n	8001f64 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f2a:	d018      	beq.n	8001f5e <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8001f2c:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <OV5640_SetLightMode+0x254>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	885b      	ldrh	r3, [r3, #2]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 0018 	add.w	r0, r3, #24
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <OV5640_SetLightMode+0x254>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f48:	f107 020f 	add.w	r2, r7, #15
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f000 ff11 	bl	8002d74 <ov5640_write_reg>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	3301      	adds	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d9dc      	bls.n	8001f24 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8001f6a:	e075      	b.n	8002058 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e01f      	b.n	8001fb2 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f78:	d018      	beq.n	8001fac <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8001f7a:	4a3c      	ldr	r2, [pc, #240]	; (800206c <OV5640_SetLightMode+0x258>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	885b      	ldrh	r3, [r3, #2]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f103 0018 	add.w	r0, r3, #24
 8001f8e:	4a37      	ldr	r2, [pc, #220]	; (800206c <OV5640_SetLightMode+0x258>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f96:	f107 020f 	add.w	r2, r7, #15
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f000 feea 	bl	8002d74 <ov5640_write_reg>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001faa:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d9dc      	bls.n	8001f72 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8001fb8:	e04e      	b.n	8002058 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e01f      	b.n	8002000 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc6:	d018      	beq.n	8001ffa <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8001fc8:	4a29      	ldr	r2, [pc, #164]	; (8002070 <OV5640_SetLightMode+0x25c>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	885b      	ldrh	r3, [r3, #2]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f103 0018 	add.w	r0, r3, #24
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <OV5640_SetLightMode+0x25c>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001fe4:	f107 020f 	add.w	r2, r7, #15
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f000 fec3 	bl	8002d74 <ov5640_write_reg>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b06      	cmp	r3, #6
 8002004:	d9dc      	bls.n	8001fc0 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002006:	e027      	b.n	8002058 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e01f      	b.n	800204e <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002014:	d018      	beq.n	8002048 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <OV5640_SetLightMode+0x260>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	885b      	ldrh	r3, [r3, #2]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0018 	add.w	r0, r3, #24
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <OV5640_SetLightMode+0x260>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002032:	f107 020f 	add.w	r2, r7, #15
 8002036:	2301      	movs	r3, #1
 8002038:	f000 fe9c 	bl	8002d74 <ov5640_write_reg>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002046:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3301      	adds	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b06      	cmp	r3, #6
 8002052:	d9dc      	bls.n	800200e <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002054:	e000      	b.n	8002058 <OV5640_SetLightMode+0x244>
    }
  }
 8002056:	bf00      	nop
  return ret;
 8002058:	697b      	ldr	r3, [r7, #20]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	08010418 	.word	0x08010418
 8002068:	08010434 	.word	0x08010434
 800206c:	08010450 	.word	0x08010450
 8002070:	0801046c 	.word	0x0801046c
 8002074:	08010488 	.word	0x08010488

08002078 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	2b1f      	cmp	r3, #31
 8002088:	f200 81c0 	bhi.w	800240c <OV5640_SetColorEffect+0x394>
 800208c:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <OV5640_SetColorEffect+0x1c>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	08002115 	.word	0x08002115
 8002098:	0800219f 	.word	0x0800219f
 800209c:	0800240d 	.word	0x0800240d
 80020a0:	08002229 	.word	0x08002229
 80020a4:	0800240d 	.word	0x0800240d
 80020a8:	0800240d 	.word	0x0800240d
 80020ac:	0800240d 	.word	0x0800240d
 80020b0:	080022b3 	.word	0x080022b3
 80020b4:	0800240d 	.word	0x0800240d
 80020b8:	0800240d 	.word	0x0800240d
 80020bc:	0800240d 	.word	0x0800240d
 80020c0:	0800240d 	.word	0x0800240d
 80020c4:	0800240d 	.word	0x0800240d
 80020c8:	0800240d 	.word	0x0800240d
 80020cc:	0800240d 	.word	0x0800240d
 80020d0:	0800233d 	.word	0x0800233d
 80020d4:	0800240d 	.word	0x0800240d
 80020d8:	0800240d 	.word	0x0800240d
 80020dc:	0800240d 	.word	0x0800240d
 80020e0:	0800240d 	.word	0x0800240d
 80020e4:	0800240d 	.word	0x0800240d
 80020e8:	0800240d 	.word	0x0800240d
 80020ec:	0800240d 	.word	0x0800240d
 80020f0:	0800240d 	.word	0x0800240d
 80020f4:	0800240d 	.word	0x0800240d
 80020f8:	0800240d 	.word	0x0800240d
 80020fc:	0800240d 	.word	0x0800240d
 8002100:	0800240d 	.word	0x0800240d
 8002104:	0800240d 	.word	0x0800240d
 8002108:	0800240d 	.word	0x0800240d
 800210c:	0800240d 	.word	0x0800240d
 8002110:	080023c5 	.word	0x080023c5
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002114:	23ff      	movs	r3, #255	; 0xff
 8002116:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0018 	add.w	r0, r3, #24
 800211e:	f107 020b 	add.w	r2, r7, #11
 8002122:	2301      	movs	r3, #1
 8002124:	f245 0101 	movw	r1, #20481	; 0x5001
 8002128:	f000 fe24 	bl	8002d74 <ov5640_write_reg>
 800212c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10c      	bne.n	800214e <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002134:	2318      	movs	r3, #24
 8002136:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0018 	add.w	r0, r3, #24
 800213e:	f107 020b 	add.w	r2, r7, #11
 8002142:	2301      	movs	r3, #1
 8002144:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002148:	f000 fe14 	bl	8002d74 <ov5640_write_reg>
 800214c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10c      	bne.n	800216e <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002154:	23a0      	movs	r3, #160	; 0xa0
 8002156:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f103 0018 	add.w	r0, r3, #24
 800215e:	f107 020b 	add.w	r2, r7, #11
 8002162:	2301      	movs	r3, #1
 8002164:	f245 5183 	movw	r1, #21891	; 0x5583
 8002168:	f000 fe04 	bl	8002d74 <ov5640_write_reg>
 800216c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10c      	bne.n	800218e <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 0018 	add.w	r0, r3, #24
 800217e:	f107 020b 	add.w	r2, r7, #11
 8002182:	2301      	movs	r3, #1
 8002184:	f245 5184 	movw	r1, #21892	; 0x5584
 8002188:	f000 fdf4 	bl	8002d74 <ov5640_write_reg>
 800218c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 815f 	beq.w	8002454 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219a:	60fb      	str	r3, [r7, #12]
      }
      break;
 800219c:	e15a      	b.n	8002454 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 800219e:	23ff      	movs	r3, #255	; 0xff
 80021a0:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f103 0018 	add.w	r0, r3, #24
 80021a8:	f107 020b 	add.w	r2, r7, #11
 80021ac:	2301      	movs	r3, #1
 80021ae:	f245 0101 	movw	r1, #20481	; 0x5001
 80021b2:	f000 fddf 	bl	8002d74 <ov5640_write_reg>
 80021b6:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 80021be:	2318      	movs	r3, #24
 80021c0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 0018 	add.w	r0, r3, #24
 80021c8:	f107 020b 	add.w	r2, r7, #11
 80021cc:	2301      	movs	r3, #1
 80021ce:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80021d2:	f000 fdcf 	bl	8002d74 <ov5640_write_reg>
 80021d6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f103 0018 	add.w	r0, r3, #24
 80021e8:	f107 020b 	add.w	r2, r7, #11
 80021ec:	2301      	movs	r3, #1
 80021ee:	f245 5183 	movw	r1, #21891	; 0x5583
 80021f2:	f000 fdbf 	bl	8002d74 <ov5640_write_reg>
 80021f6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0018 	add.w	r0, r3, #24
 8002208:	f107 020b 	add.w	r2, r7, #11
 800220c:	2301      	movs	r3, #1
 800220e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002212:	f000 fdaf 	bl	8002d74 <ov5640_write_reg>
 8002216:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 811c 	beq.w	8002458 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002224:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002226:	e117      	b.n	8002458 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002228:	23ff      	movs	r3, #255	; 0xff
 800222a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0018 	add.w	r0, r3, #24
 8002232:	f107 020b 	add.w	r2, r7, #11
 8002236:	2301      	movs	r3, #1
 8002238:	f245 0101 	movw	r1, #20481	; 0x5001
 800223c:	f000 fd9a 	bl	8002d74 <ov5640_write_reg>
 8002240:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10c      	bne.n	8002262 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002248:	2318      	movs	r3, #24
 800224a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 0018 	add.w	r0, r3, #24
 8002252:	f107 020b 	add.w	r2, r7, #11
 8002256:	2301      	movs	r3, #1
 8002258:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800225c:	f000 fd8a 	bl	8002d74 <ov5640_write_reg>
 8002260:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002268:	2360      	movs	r3, #96	; 0x60
 800226a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 0018 	add.w	r0, r3, #24
 8002272:	f107 020b 	add.w	r2, r7, #11
 8002276:	2301      	movs	r3, #1
 8002278:	f245 5183 	movw	r1, #21891	; 0x5583
 800227c:	f000 fd7a 	bl	8002d74 <ov5640_write_reg>
 8002280:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10c      	bne.n	80022a2 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002288:	2360      	movs	r3, #96	; 0x60
 800228a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0018 	add.w	r0, r3, #24
 8002292:	f107 020b 	add.w	r2, r7, #11
 8002296:	2301      	movs	r3, #1
 8002298:	f245 5184 	movw	r1, #21892	; 0x5584
 800229c:	f000 fd6a 	bl	8002d74 <ov5640_write_reg>
 80022a0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80d9 	beq.w	800245c <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ae:	60fb      	str	r3, [r7, #12]
      }
      break;
 80022b0:	e0d4      	b.n	800245c <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 80022b2:	23ff      	movs	r3, #255	; 0xff
 80022b4:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0018 	add.w	r0, r3, #24
 80022bc:	f107 020b 	add.w	r2, r7, #11
 80022c0:	2301      	movs	r3, #1
 80022c2:	f245 0101 	movw	r1, #20481	; 0x5001
 80022c6:	f000 fd55 	bl	8002d74 <ov5640_write_reg>
 80022ca:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80022d2:	2318      	movs	r3, #24
 80022d4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f103 0018 	add.w	r0, r3, #24
 80022dc:	f107 020b 	add.w	r2, r7, #11
 80022e0:	2301      	movs	r3, #1
 80022e2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80022e6:	f000 fd45 	bl	8002d74 <ov5640_write_reg>
 80022ea:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f103 0018 	add.w	r0, r3, #24
 80022fc:	f107 020b 	add.w	r2, r7, #11
 8002300:	2301      	movs	r3, #1
 8002302:	f245 5183 	movw	r1, #21891	; 0x5583
 8002306:	f000 fd35 	bl	8002d74 <ov5640_write_reg>
 800230a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 0018 	add.w	r0, r3, #24
 800231c:	f107 020b 	add.w	r2, r7, #11
 8002320:	2301      	movs	r3, #1
 8002322:	f245 5184 	movw	r1, #21892	; 0x5584
 8002326:	f000 fd25 	bl	8002d74 <ov5640_write_reg>
 800232a:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8096 	beq.w	8002460 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002338:	60fb      	str	r3, [r7, #12]
      }
      break;
 800233a:	e091      	b.n	8002460 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 800233c:	23ff      	movs	r3, #255	; 0xff
 800233e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0018 	add.w	r0, r3, #24
 8002346:	f107 020b 	add.w	r2, r7, #11
 800234a:	2301      	movs	r3, #1
 800234c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002350:	f000 fd10 	bl	8002d74 <ov5640_write_reg>
 8002354:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 800235c:	2318      	movs	r3, #24
 800235e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f103 0018 	add.w	r0, r3, #24
 8002366:	f107 020b 	add.w	r2, r7, #11
 800236a:	2301      	movs	r3, #1
 800236c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002370:	f000 fd00 	bl	8002d74 <ov5640_write_reg>
 8002374:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10c      	bne.n	8002396 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 800237c:	2340      	movs	r3, #64	; 0x40
 800237e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f103 0018 	add.w	r0, r3, #24
 8002386:	f107 020b 	add.w	r2, r7, #11
 800238a:	2301      	movs	r3, #1
 800238c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002390:	f000 fcf0 	bl	8002d74 <ov5640_write_reg>
 8002394:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10c      	bne.n	80023b6 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0018 	add.w	r0, r3, #24
 80023a6:	f107 020b 	add.w	r2, r7, #11
 80023aa:	2301      	movs	r3, #1
 80023ac:	f245 5184 	movw	r1, #21892	; 0x5584
 80023b0:	f000 fce0 	bl	8002d74 <ov5640_write_reg>
 80023b4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d053      	beq.n	8002464 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c0:	60fb      	str	r3, [r7, #12]
      }
      break;
 80023c2:	e04f      	b.n	8002464 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 80023c4:	23ff      	movs	r3, #255	; 0xff
 80023c6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 0018 	add.w	r0, r3, #24
 80023ce:	f107 020b 	add.w	r2, r7, #11
 80023d2:	2301      	movs	r3, #1
 80023d4:	f245 0101 	movw	r1, #20481	; 0x5001
 80023d8:	f000 fccc 	bl	8002d74 <ov5640_write_reg>
 80023dc:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 80023e4:	2340      	movs	r3, #64	; 0x40
 80023e6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f103 0018 	add.w	r0, r3, #24
 80023ee:	f107 020b 	add.w	r2, r7, #11
 80023f2:	2301      	movs	r3, #1
 80023f4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023f8:	f000 fcbc 	bl	8002d74 <ov5640_write_reg>
 80023fc:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d031      	beq.n	8002468 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002408:	60fb      	str	r3, [r7, #12]
      }
      break;
 800240a:	e02d      	b.n	8002468 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 800240c:	237f      	movs	r3, #127	; 0x7f
 800240e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 0018 	add.w	r0, r3, #24
 8002416:	f107 020b 	add.w	r2, r7, #11
 800241a:	2301      	movs	r3, #1
 800241c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002420:	f000 fca8 	bl	8002d74 <ov5640_write_reg>
 8002424:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 800242c:	2300      	movs	r3, #0
 800242e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0018 	add.w	r0, r3, #24
 8002436:	f107 020b 	add.w	r2, r7, #11
 800243a:	2301      	movs	r3, #1
 800243c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002440:	f000 fc98 	bl	8002d74 <ov5640_write_reg>
 8002444:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00f      	beq.n	800246c <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002450:	60fb      	str	r3, [r7, #12]
      }

      break;
 8002452:	e00b      	b.n	800246c <OV5640_SetColorEffect+0x3f4>
      break;
 8002454:	bf00      	nop
 8002456:	e00a      	b.n	800246e <OV5640_SetColorEffect+0x3f6>
      break;
 8002458:	bf00      	nop
 800245a:	e008      	b.n	800246e <OV5640_SetColorEffect+0x3f6>
      break;
 800245c:	bf00      	nop
 800245e:	e006      	b.n	800246e <OV5640_SetColorEffect+0x3f6>
      break;
 8002460:	bf00      	nop
 8002462:	e004      	b.n	800246e <OV5640_SetColorEffect+0x3f6>
      break;
 8002464:	bf00      	nop
 8002466:	e002      	b.n	800246e <OV5640_SetColorEffect+0x3f6>
      break;
 8002468:	bf00      	nop
 800246a:	e000      	b.n	800246e <OV5640_SetColorEffect+0x3f6>
      break;
 800246c:	bf00      	nop
  }

  return ret;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002482:	4a34      	ldr	r2, [pc, #208]	; (8002554 <OV5640_SetBrightness+0xdc>)
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	ca07      	ldmia	r2, {r0, r1, r2}
 800248a:	c303      	stmia	r3!, {r0, r1}
 800248c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800248e:	23ff      	movs	r3, #255	; 0xff
 8002490:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f103 0018 	add.w	r0, r3, #24
 8002498:	f107 020f 	add.w	r2, r7, #15
 800249c:	2301      	movs	r3, #1
 800249e:	f245 0101 	movw	r1, #20481	; 0x5001
 80024a2:	f000 fc67 	bl	8002d74 <ov5640_write_reg>
 80024a6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d111      	bne.n	80024d2 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3304      	adds	r3, #4
 80024b2:	3320      	adds	r3, #32
 80024b4:	443b      	add	r3, r7
 80024b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80024ba:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0018 	add.w	r0, r3, #24
 80024c2:	f107 020f 	add.w	r2, r7, #15
 80024c6:	2301      	movs	r3, #1
 80024c8:	f245 5187 	movw	r1, #21895	; 0x5587
 80024cc:	f000 fc52 	bl	8002d74 <ov5640_write_reg>
 80024d0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 80024d8:	2304      	movs	r3, #4
 80024da:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f103 0018 	add.w	r0, r3, #24
 80024e2:	f107 020f 	add.w	r2, r7, #15
 80024e6:	2301      	movs	r3, #1
 80024e8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024ec:	f000 fc42 	bl	8002d74 <ov5640_write_reg>
 80024f0:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d127      	bne.n	8002548 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da12      	bge.n	8002524 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f103 0018 	add.w	r0, r3, #24
 8002508:	f107 020f 	add.w	r2, r7, #15
 800250c:	2301      	movs	r3, #1
 800250e:	f245 5188 	movw	r1, #21896	; 0x5588
 8002512:	f000 fc2f 	bl	8002d74 <ov5640_write_reg>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e011      	b.n	8002548 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002524:	2309      	movs	r3, #9
 8002526:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f103 0018 	add.w	r0, r3, #24
 800252e:	f107 020f 	add.w	r2, r7, #15
 8002532:	2301      	movs	r3, #1
 8002534:	f245 5188 	movw	r1, #21896	; 0x5588
 8002538:	f000 fc1c 	bl	8002d74 <ov5640_write_reg>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002546:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002548:	69fb      	ldr	r3, [r7, #28]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	0800ff60 	.word	0x0800ff60

08002558 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8002562:	4a30      	ldr	r2, [pc, #192]	; (8002624 <OV5640_SetSaturation+0xcc>)
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	ca07      	ldmia	r2, {r0, r1, r2}
 800256a:	c303      	stmia	r3!, {r0, r1}
 800256c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800256e:	23ff      	movs	r3, #255	; 0xff
 8002570:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f103 0018 	add.w	r0, r3, #24
 8002578:	f107 020f 	add.w	r2, r7, #15
 800257c:	2301      	movs	r3, #1
 800257e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002582:	f000 fbf7 	bl	8002d74 <ov5640_write_reg>
 8002586:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d111      	bne.n	80025b2 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3304      	adds	r3, #4
 8002592:	3320      	adds	r3, #32
 8002594:	443b      	add	r3, r7
 8002596:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800259a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f103 0018 	add.w	r0, r3, #24
 80025a2:	f107 020f 	add.w	r2, r7, #15
 80025a6:	2301      	movs	r3, #1
 80025a8:	f245 5183 	movw	r1, #21891	; 0x5583
 80025ac:	f000 fbe2 	bl	8002d74 <ov5640_write_reg>
 80025b0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f103 0018 	add.w	r0, r3, #24
 80025be:	f107 020f 	add.w	r2, r7, #15
 80025c2:	2301      	movs	r3, #1
 80025c4:	f245 5184 	movw	r1, #21892	; 0x5584
 80025c8:	f000 fbd4 	bl	8002d74 <ov5640_write_reg>
 80025cc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10c      	bne.n	80025ee <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 80025d4:	2302      	movs	r3, #2
 80025d6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 0018 	add.w	r0, r3, #24
 80025de:	f107 020f 	add.w	r2, r7, #15
 80025e2:	2301      	movs	r3, #1
 80025e4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025e8:	f000 fbc4 	bl	8002d74 <ov5640_write_reg>
 80025ec:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 80025f4:	2341      	movs	r3, #65	; 0x41
 80025f6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f103 0018 	add.w	r0, r3, #24
 80025fe:	f107 020f 	add.w	r2, r7, #15
 8002602:	2301      	movs	r3, #1
 8002604:	f245 5188 	movw	r1, #21896	; 0x5588
 8002608:	f000 fbb4 	bl	8002d74 <ov5640_write_reg>
 800260c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002618:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800261a:	69fb      	ldr	r3, [r7, #28]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	0800ff6c 	.word	0x0800ff6c

08002628 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8002632:	4a30      	ldr	r2, [pc, #192]	; (80026f4 <OV5640_SetContrast+0xcc>)
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	ca07      	ldmia	r2, {r0, r1, r2}
 800263a:	c303      	stmia	r3!, {r0, r1}
 800263c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800263e:	23ff      	movs	r3, #255	; 0xff
 8002640:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f103 0018 	add.w	r0, r3, #24
 8002648:	f107 020f 	add.w	r2, r7, #15
 800264c:	2301      	movs	r3, #1
 800264e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002652:	f000 fb8f 	bl	8002d74 <ov5640_write_reg>
 8002656:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 800265e:	2304      	movs	r3, #4
 8002660:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f103 0018 	add.w	r0, r3, #24
 8002668:	f107 020f 	add.w	r2, r7, #15
 800266c:	2301      	movs	r3, #1
 800266e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002672:	f000 fb7f 	bl	8002d74 <ov5640_write_reg>
 8002676:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d111      	bne.n	80026a2 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3304      	adds	r3, #4
 8002682:	3320      	adds	r3, #32
 8002684:	443b      	add	r3, r7
 8002686:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800268a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0018 	add.w	r0, r3, #24
 8002692:	f107 020f 	add.w	r2, r7, #15
 8002696:	2301      	movs	r3, #1
 8002698:	f245 5186 	movw	r1, #21894	; 0x5586
 800269c:	f000 fb6a 	bl	8002d74 <ov5640_write_reg>
 80026a0:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 0018 	add.w	r0, r3, #24
 80026ae:	f107 020f 	add.w	r2, r7, #15
 80026b2:	2301      	movs	r3, #1
 80026b4:	f245 5185 	movw	r1, #21893	; 0x5585
 80026b8:	f000 fb5c 	bl	8002d74 <ov5640_write_reg>
 80026bc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10c      	bne.n	80026de <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 80026c4:	2341      	movs	r3, #65	; 0x41
 80026c6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 0018 	add.w	r0, r3, #24
 80026ce:	f107 020f 	add.w	r2, r7, #15
 80026d2:	2301      	movs	r3, #1
 80026d4:	f245 5188 	movw	r1, #21896	; 0x5588
 80026d8:	f000 fb4c 	bl	8002d74 <ov5640_write_reg>
 80026dc:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e8:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80026ea:	69fb      	ldr	r3, [r7, #28]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	0800ff78 	.word	0x0800ff78

080026f8 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	; 0x38
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002702:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <OV5640_SetHueDegree+0xfc>)
 8002704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002708:	ca07      	ldmia	r2, {r0, r1, r2}
 800270a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800270e:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <OV5640_SetHueDegree+0x100>)
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	ca07      	ldmia	r2, {r0, r1, r2}
 8002716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800271a:	4a38      	ldr	r2, [pc, #224]	; (80027fc <OV5640_SetHueDegree+0x104>)
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	ca07      	ldmia	r2, {r0, r1, r2}
 8002722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002726:	23ff      	movs	r3, #255	; 0xff
 8002728:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f103 0018 	add.w	r0, r3, #24
 8002730:	f107 020f 	add.w	r2, r7, #15
 8002734:	2301      	movs	r3, #1
 8002736:	f245 0101 	movw	r1, #20481	; 0x5001
 800273a:	f000 fb1b 	bl	8002d74 <ov5640_write_reg>
 800273e:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 0018 	add.w	r0, r3, #24
 8002750:	f107 020f 	add.w	r2, r7, #15
 8002754:	2301      	movs	r3, #1
 8002756:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800275a:	f000 fb0b 	bl	8002d74 <ov5640_write_reg>
 800275e:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	2b00      	cmp	r3, #0
 8002764:	d111      	bne.n	800278a <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	3306      	adds	r3, #6
 800276a:	3338      	adds	r3, #56	; 0x38
 800276c:	443b      	add	r3, r7
 800276e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002772:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 0018 	add.w	r0, r3, #24
 800277a:	f107 020f 	add.w	r2, r7, #15
 800277e:	2301      	movs	r3, #1
 8002780:	f245 5181 	movw	r1, #21889	; 0x5581
 8002784:	f000 faf6 	bl	8002d74 <ov5640_write_reg>
 8002788:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3306      	adds	r3, #6
 8002794:	3338      	adds	r3, #56	; 0x38
 8002796:	443b      	add	r3, r7
 8002798:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800279c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f103 0018 	add.w	r0, r3, #24
 80027a4:	f107 020f 	add.w	r2, r7, #15
 80027a8:	2301      	movs	r3, #1
 80027aa:	f245 5182 	movw	r1, #21890	; 0x5582
 80027ae:	f000 fae1 	bl	8002d74 <ov5640_write_reg>
 80027b2:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d111      	bne.n	80027de <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	3306      	adds	r3, #6
 80027be:	3338      	adds	r3, #56	; 0x38
 80027c0:	443b      	add	r3, r7
 80027c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027c6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0018 	add.w	r0, r3, #24
 80027ce:	f107 020f 	add.w	r2, r7, #15
 80027d2:	2301      	movs	r3, #1
 80027d4:	f245 5188 	movw	r1, #21896	; 0x5588
 80027d8:	f000 facc 	bl	8002d74 <ov5640_write_reg>
 80027dc:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3738      	adds	r7, #56	; 0x38
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	0800ff84 	.word	0x0800ff84
 80027f8:	0800ff90 	.word	0x0800ff90
 80027fc:	0800ff9c 	.word	0x0800ff9c

08002800 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f103 0018 	add.w	r0, r3, #24
 8002814:	f107 020b 	add.w	r2, r7, #11
 8002818:	2301      	movs	r3, #1
 800281a:	f643 0120 	movw	r1, #14368	; 0x3820
 800281e:	f000 fa92 	bl	8002d46 <ov5640_read_reg>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e0cb      	b.n	80029c8 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	f023 0306 	bic.w	r3, r3, #6
 8002836:	b2db      	uxtb	r3, r3
 8002838:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f103 0018 	add.w	r0, r3, #24
 8002840:	f107 020a 	add.w	r2, r7, #10
 8002844:	2301      	movs	r3, #1
 8002846:	f643 0121 	movw	r1, #14369	; 0x3821
 800284a:	f000 fa7c 	bl	8002d46 <ov5640_read_reg>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	e0b5      	b.n	80029c8 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002860:	7abb      	ldrb	r3, [r7, #10]
 8002862:	f023 0306 	bic.w	r3, r3, #6
 8002866:	b2db      	uxtb	r3, r3
 8002868:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d056      	beq.n	800291e <OV5640_MirrorFlipConfig+0x11e>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d87f      	bhi.n	8002976 <OV5640_MirrorFlipConfig+0x176>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d029      	beq.n	80028d0 <OV5640_MirrorFlipConfig+0xd0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d179      	bne.n	8002976 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f103 0018 	add.w	r0, r3, #24
 8002888:	f107 020b 	add.w	r2, r7, #11
 800288c:	2301      	movs	r3, #1
 800288e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002892:	f000 fa6f 	bl	8002d74 <ov5640_write_reg>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028a0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80028a2:	e08a      	b.n	80029ba <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 80028a4:	7abb      	ldrb	r3, [r7, #10]
 80028a6:	f043 0306 	orr.w	r3, r3, #6
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f103 0018 	add.w	r0, r3, #24
 80028b4:	f107 020a 	add.w	r2, r7, #10
 80028b8:	2301      	movs	r3, #1
 80028ba:	f643 0121 	movw	r1, #14369	; 0x3821
 80028be:	f000 fa59 	bl	8002d74 <ov5640_write_reg>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d078      	beq.n	80029ba <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028cc:	60fb      	str	r3, [r7, #12]
          break;
 80028ce:	e074      	b.n	80029ba <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f043 0306 	orr.w	r3, r3, #6
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 0018 	add.w	r0, r3, #24
 80028e0:	f107 020b 	add.w	r2, r7, #11
 80028e4:	2301      	movs	r3, #1
 80028e6:	f643 0120 	movw	r1, #14368	; 0x3820
 80028ea:	f000 fa43 	bl	8002d74 <ov5640_write_reg>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f8:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80028fa:	e060      	b.n	80029be <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0018 	add.w	r0, r3, #24
 8002902:	f107 020a 	add.w	r2, r7, #10
 8002906:	2301      	movs	r3, #1
 8002908:	f643 0121 	movw	r1, #14369	; 0x3821
 800290c:	f000 fa32 	bl	8002d74 <ov5640_write_reg>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d053      	beq.n	80029be <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800291a:	60fb      	str	r3, [r7, #12]
          break;
 800291c:	e04f      	b.n	80029be <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800291e:	7afb      	ldrb	r3, [r7, #11]
 8002920:	f043 0306 	orr.w	r3, r3, #6
 8002924:	b2db      	uxtb	r3, r3
 8002926:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f103 0018 	add.w	r0, r3, #24
 800292e:	f107 020b 	add.w	r2, r7, #11
 8002932:	2301      	movs	r3, #1
 8002934:	f643 0120 	movw	r1, #14368	; 0x3820
 8002938:	f000 fa1c 	bl	8002d74 <ov5640_write_reg>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002946:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002948:	e03b      	b.n	80029c2 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 800294a:	7abb      	ldrb	r3, [r7, #10]
 800294c:	f043 0306 	orr.w	r3, r3, #6
 8002950:	b2db      	uxtb	r3, r3
 8002952:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f103 0018 	add.w	r0, r3, #24
 800295a:	f107 020a 	add.w	r2, r7, #10
 800295e:	2301      	movs	r3, #1
 8002960:	f643 0121 	movw	r1, #14369	; 0x3821
 8002964:	f000 fa06 	bl	8002d74 <ov5640_write_reg>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d029      	beq.n	80029c2 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002972:	60fb      	str	r3, [r7, #12]
          break;
 8002974:	e025      	b.n	80029c2 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f103 0018 	add.w	r0, r3, #24
 800297c:	f107 020b 	add.w	r2, r7, #11
 8002980:	2301      	movs	r3, #1
 8002982:	f643 0120 	movw	r1, #14368	; 0x3820
 8002986:	f000 f9f5 	bl	8002d74 <ov5640_write_reg>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002994:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002996:	e016      	b.n	80029c6 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 0018 	add.w	r0, r3, #24
 800299e:	f107 020a 	add.w	r2, r7, #10
 80029a2:	2301      	movs	r3, #1
 80029a4:	f643 0121 	movw	r1, #14369	; 0x3821
 80029a8:	f000 f9e4 	bl	8002d74 <ov5640_write_reg>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b6:	60fb      	str	r3, [r7, #12]
          break;
 80029b8:	e005      	b.n	80029c6 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 80029ba:	bf00      	nop
 80029bc:	e004      	b.n	80029c8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 80029c6:	bf00      	nop
      }
    }
  }

  return ret;
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff f8a2 	bl	8001b30 <OV5640_GetResolution>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	e04e      	b.n	8002a98 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b44      	cmp	r3, #68	; 0x44
 8002a02:	d112      	bne.n	8002a2a <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002a04:	2310      	movs	r3, #16
 8002a06:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f103 0018 	add.w	r0, r3, #24
 8002a0e:	f107 020b 	add.w	r2, r7, #11
 8002a12:	2301      	movs	r3, #1
 8002a14:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002a18:	f000 f9ac 	bl	8002d74 <ov5640_write_reg>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03a      	beq.n	8002a98 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e036      	b.n	8002a98 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d802      	bhi.n	8002a36 <OV5640_ZoomConfig+0x64>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002a34:	e00a      	b.n	8002a4c <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d004      	beq.n	8002a44 <OV5640_ZoomConfig+0x72>
          break;
 8002a3a:	e007      	b.n	8002a4c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	613b      	str	r3, [r7, #16]
          break;
 8002a42:	e003      	b.n	8002a4c <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	613b      	str	r3, [r7, #16]
          break;
 8002a4a:	bf00      	nop
      }

      tmp = 0x00;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f103 0018 	add.w	r0, r3, #24
 8002a56:	f107 020b 	add.w	r2, r7, #11
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002a60:	f000 f988 	bl	8002d74 <ov5640_write_reg>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	e012      	b.n	8002a98 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f103 0018 	add.w	r0, r3, #24
 8002a7e:	f107 020b 	add.w	r2, r7, #11
 8002a82:	2301      	movs	r3, #1
 8002a84:	f245 6101 	movw	r1, #22017	; 0x5601
 8002a88:	f000 f974 	bl	8002d74 <ov5640_write_reg>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a96:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002a98:	697b      	ldr	r3, [r7, #20]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	f040 80ce 	bne.w	8002c54 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f103 0018 	add.w	r0, r3, #24
 8002abe:	f107 020b 	add.w	r2, r7, #11
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f243 0138 	movw	r1, #12344	; 0x3038
 8002ac8:	f000 f954 	bl	8002d74 <ov5640_write_reg>
 8002acc:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 0018 	add.w	r0, r3, #24
 8002ada:	f107 020b 	add.w	r2, r7, #11
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f243 0139 	movw	r1, #12345	; 0x3039
 8002ae4:	f000 f946 	bl	8002d74 <ov5640_write_reg>
 8002ae8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002af0:	237c      	movs	r3, #124	; 0x7c
 8002af2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f103 0018 	add.w	r0, r3, #24
 8002afa:	f107 020b 	add.w	r2, r7, #11
 8002afe:	2301      	movs	r3, #1
 8002b00:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002b04:	f000 f936 	bl	8002d74 <ov5640_write_reg>
 8002b08:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10c      	bne.n	8002b2a <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002b10:	2301      	movs	r3, #1
 8002b12:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f103 0018 	add.w	r0, r3, #24
 8002b1a:	f107 020b 	add.w	r2, r7, #11
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002b24:	f000 f926 	bl	8002d74 <ov5640_write_reg>
 8002b28:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10c      	bne.n	8002b4a <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002b30:	2327      	movs	r3, #39	; 0x27
 8002b32:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0018 	add.w	r0, r3, #24
 8002b3a:	f107 020b 	add.w	r2, r7, #11
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002b44:	f000 f916 	bl	8002d74 <ov5640_write_reg>
 8002b48:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002b50:	2300      	movs	r3, #0
 8002b52:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0018 	add.w	r0, r3, #24
 8002b5a:	f107 020b 	add.w	r2, r7, #11
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002b64:	f000 f906 	bl	8002d74 <ov5640_write_reg>
 8002b68:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002b70:	23f6      	movs	r3, #246	; 0xf6
 8002b72:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 0018 	add.w	r0, r3, #24
 8002b7a:	f107 020b 	add.w	r2, r7, #11
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002b84:	f000 f8f6 	bl	8002d74 <ov5640_write_reg>
 8002b88:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10c      	bne.n	8002baa <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002b90:	2304      	movs	r3, #4
 8002b92:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f103 0018 	add.w	r0, r3, #24
 8002b9a:	f107 020b 	add.w	r2, r7, #11
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002ba4:	f000 f8e6 	bl	8002d74 <ov5640_write_reg>
 8002ba8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f103 0018 	add.w	r0, r3, #24
 8002bb6:	f107 020b 	add.w	r2, r7, #11
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002bc0:	f000 f8d8 	bl	8002d74 <ov5640_write_reg>
 8002bc4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10c      	bne.n	8002be6 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002bcc:	230b      	movs	r3, #11
 8002bce:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f103 0018 	add.w	r0, r3, #24
 8002bd6:	f107 020b 	add.w	r2, r7, #11
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002be0:	f000 f8c8 	bl	8002d74 <ov5640_write_reg>
 8002be4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10c      	bne.n	8002c06 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002bec:	2388      	movs	r3, #136	; 0x88
 8002bee:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f103 0018 	add.w	r0, r3, #24
 8002bf6:	f107 020b 	add.w	r2, r7, #11
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002c00:	f000 f8b8 	bl	8002d74 <ov5640_write_reg>
 8002c04:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10c      	bne.n	8002c26 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002c0c:	230b      	movs	r3, #11
 8002c0e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 0018 	add.w	r0, r3, #24
 8002c16:	f107 020b 	add.w	r2, r7, #11
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002c20:	f000 f8a8 	bl	8002d74 <ov5640_write_reg>
 8002c24:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002c2c:	2388      	movs	r3, #136	; 0x88
 8002c2e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0018 	add.w	r0, r3, #24
 8002c36:	f107 020b 	add.w	r2, r7, #11
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002c40:	f000 f898 	bl	8002d74 <ov5640_write_reg>
 8002c44:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02b      	beq.n	8002ca4 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e027      	b.n	8002ca4 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f103 0018 	add.w	r0, r3, #24
 8002c5a:	f107 020b 	add.w	r2, r7, #11
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002c64:	f000 f86f 	bl	8002d46 <ov5640_read_reg>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e016      	b.n	8002ca4 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0018 	add.w	r0, r3, #24
 8002c8a:	f107 020b 	add.w	r2, r7, #11
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002c94:	f000 f86e 	bl	8002d74 <ov5640_write_reg>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	4798      	blx	r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002cc2:	bf00      	nop
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	4798      	blx	r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d8f5      	bhi.n	8002cc4 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ce2:	b590      	push	{r4, r7, lr}
 8002ce4:	b087      	sub	sp, #28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	461a      	mov	r2, r3
 8002cee:	460b      	mov	r3, r1
 8002cf0:	817b      	strh	r3, [r7, #10]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	691c      	ldr	r4, [r3, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	8918      	ldrh	r0, [r3, #8]
 8002d02:	893b      	ldrh	r3, [r7, #8]
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	47a0      	blx	r4
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}

08002d14 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
 8002d24:	4613      	mov	r3, r2
 8002d26:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	68dc      	ldr	r4, [r3, #12]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	8918      	ldrh	r0, [r3, #8]
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	8979      	ldrh	r1, [r7, #10]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	47a0      	blx	r4
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}

08002d46 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002d46:	b590      	push	{r4, r7, lr}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	460b      	mov	r3, r1
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	4613      	mov	r3, r2
 8002d58:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685c      	ldr	r4, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6898      	ldr	r0, [r3, #8]
 8002d62:	893b      	ldrh	r3, [r7, #8]
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	47a0      	blx	r4
 8002d6a:	4603      	mov	r3, r0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd90      	pop	{r4, r7, pc}

08002d74 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	460b      	mov	r3, r1
 8002d82:	817b      	strh	r3, [r7, #10]
 8002d84:	4613      	mov	r3, r2
 8002d86:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681c      	ldr	r4, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6898      	ldr	r0, [r3, #8]
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	47a0      	blx	r4
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}
	...

08002da4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <RetargetInit+0x28>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <RetargetInit+0x2c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6898      	ldr	r0, [r3, #8]
 8002db8:	2300      	movs	r3, #0
 8002dba:	2202      	movs	r2, #2
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f00c f85d 	bl	800ee7c <setvbuf>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2405fcb0 	.word	0x2405fcb0
 8002dd0:	24000054 	.word	0x24000054

08002dd4 <_isatty>:

int _isatty(int fd) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db04      	blt.n	8002dec <_isatty+0x18>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	dc01      	bgt.n	8002dec <_isatty+0x18>
    return 1;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e005      	b.n	8002df8 <_isatty+0x24>

  errno = EBADF;
 8002dec:	f00b fffc 	bl	800ede8 <__errno>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2209      	movs	r2, #9
 8002df4:	601a      	str	r2, [r3, #0]
  return 0;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <_write>:

int _write(int fd, char* ptr, int len) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d002      	beq.n	8002e18 <_write+0x18>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d111      	bne.n	8002e3c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <_write+0x54>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	f00a f8c7 	bl	800cfb8 <HAL_UART_Transmit>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <_write+0x38>
      return len;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	e008      	b.n	8002e4a <_write+0x4a>
    else
      return EIO;
 8002e38:	2305      	movs	r3, #5
 8002e3a:	e006      	b.n	8002e4a <_write+0x4a>
  }
  errno = EBADF;
 8002e3c:	f00b ffd4 	bl	800ede8 <__errno>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2209      	movs	r2, #9
 8002e44:	601a      	str	r2, [r3, #0]
  return -1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2405fcb0 	.word	0x2405fcb0

08002e58 <_close>:

int _close(int fd) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db04      	blt.n	8002e70 <_close+0x18>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	dc01      	bgt.n	8002e70 <_close+0x18>
    return 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e006      	b.n	8002e7e <_close+0x26>

  errno = EBADF;
 8002e70:	f00b ffba 	bl	800ede8 <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2209      	movs	r2, #9
 8002e78:	601a      	str	r2, [r3, #0]
  return -1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <_read>:

int _read(int fd, char* ptr, int len) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d110      	bne.n	8002ebc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <_read+0x4c>)
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	f00a f915 	bl	800d0d4 <HAL_UART_Receive>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <_read+0x30>
      return 1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e008      	b.n	8002eca <_read+0x42>
    else
      return EIO;
 8002eb8:	2305      	movs	r3, #5
 8002eba:	e006      	b.n	8002eca <_read+0x42>
  }
  errno = EBADF;
 8002ebc:	f00b ff94 	bl	800ede8 <__errno>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2209      	movs	r2, #9
 8002ec4:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2405fcb0 	.word	0x2405fcb0

08002ed8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db08      	blt.n	8002efa <_fstat+0x22>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	dc05      	bgt.n	8002efa <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ef4:	605a      	str	r2, [r3, #4]
    return 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e005      	b.n	8002f06 <_fstat+0x2e>
  }

  errno = EBADF;
 8002efa:	f00b ff75 	bl	800ede8 <__errno>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2209      	movs	r2, #9
 8002f02:	601a      	str	r2, [r3, #0]
  return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <MX_RTC_Init+0x50>)
 8002f18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f22:	227f      	movs	r2, #127	; 0x7f
 8002f24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f28:	22ff      	movs	r2, #255	; 0xff
 8002f2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f46:	4805      	ldr	r0, [pc, #20]	; (8002f5c <MX_RTC_Init+0x4c>)
 8002f48:	f009 fec8 	bl	800ccdc <HAL_RTC_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002f52:	f7fe fa7f 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2405fcb4 	.word	0x2405fcb4
 8002f60:	58004000 	.word	0x58004000

08002f64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b0b2      	sub	sp, #200	; 0xc8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f6c:	f107 0308 	add.w	r3, r7, #8
 8002f70:	22c0      	movs	r2, #192	; 0xc0
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00b ff61 	bl	800ee3c <memset>
  if(rtcHandle->Instance==RTC)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_RTC_MspInit+0x5c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d119      	bne.n	8002fb8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f008 f8bd 	bl	800b11c <HAL_RCCEx_PeriphCLKConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002fa8:	f7fe fa54 	bl	8001454 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RTC_MspInit+0x60>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <HAL_RTC_MspInit+0x60>)
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002fb8:	bf00      	nop
 8002fba:	37c8      	adds	r7, #200	; 0xc8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	58004000 	.word	0x58004000
 8002fc4:	58024400 	.word	0x58024400

08002fc8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <BSP_I2C4_Init+0x64>)
 8002fd4:	4a16      	ldr	r2, [pc, #88]	; (8003030 <BSP_I2C4_Init+0x68>)
 8002fd6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002fd8:	4b16      	ldr	r3, [pc, #88]	; (8003034 <BSP_I2C4_Init+0x6c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11f      	bne.n	8003020 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <BSP_I2C4_Init+0x6c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <BSP_I2C4_Init+0x6c>)
 8002fe8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002fea:	4810      	ldr	r0, [pc, #64]	; (800302c <BSP_I2C4_Init+0x64>)
 8002fec:	f006 f930 	bl	8009250 <HAL_I2C_GetState>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d114      	bne.n	8003020 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <BSP_I2C4_Init+0x64>)
 8002ff8:	f000 fb60 	bl	80036bc <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002ffc:	f008 f878 	bl	800b0f0 <HAL_RCC_GetPCLK2Freq>
 8003000:	4603      	mov	r3, r0
 8003002:	490d      	ldr	r1, [pc, #52]	; (8003038 <BSP_I2C4_Init+0x70>)
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f8e3 	bl	80031d0 <I2C_GetTiming>
 800300a:	4603      	mov	r3, r0
 800300c:	4619      	mov	r1, r3
 800300e:	4807      	ldr	r0, [pc, #28]	; (800302c <BSP_I2C4_Init+0x64>)
 8003010:	f000 f838 	bl	8003084 <MX_I2C4_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800301a:	f06f 0307 	mvn.w	r3, #7
 800301e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003020:	687b      	ldr	r3, [r7, #4]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	240606e4 	.word	0x240606e4
 8003030:	58001c00 	.word	0x58001c00
 8003034:	2405fcdc 	.word	0x2405fcdc
 8003038:	000186a0 	.word	0x000186a0

0800303c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <BSP_I2C4_DeInit+0x40>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	4a0b      	ldr	r2, [pc, #44]	; (800307c <BSP_I2C4_DeInit+0x40>)
 800304e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <BSP_I2C4_DeInit+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8003058:	4809      	ldr	r0, [pc, #36]	; (8003080 <BSP_I2C4_DeInit+0x44>)
 800305a:	f000 fb9b 	bl	8003794 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800305e:	4808      	ldr	r0, [pc, #32]	; (8003080 <BSP_I2C4_DeInit+0x44>)
 8003060:	f005 fe84 	bl	8008d6c <HAL_I2C_DeInit>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800306a:	f06f 0307 	mvn.w	r3, #7
 800306e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003070:	687b      	ldr	r3, [r7, #4]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2405fcdc 	.word	0x2405fcdc
 8003080:	240606e4 	.word	0x240606e4

08003084 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f005 fdc2 	bl	8008c4c <HAL_I2C_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	e014      	b.n	80030fe <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f006 fb8a 	bl	80097f4 <HAL_I2CEx_ConfigAnalogFilter>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e008      	b.n	80030fe <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80030ec:	2100      	movs	r1, #0
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f006 fbcb 	bl	800988a <HAL_I2CEx_ConfigDigitalFilter>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60ba      	str	r2, [r7, #8]
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	81fb      	strh	r3, [r7, #14]
 8003116:	460b      	mov	r3, r1
 8003118:	81bb      	strh	r3, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800311e:	89b9      	ldrh	r1, [r7, #12]
 8003120:	89f8      	ldrh	r0, [r7, #14]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2202      	movs	r2, #2
 800312a:	f000 fb57 	bl	80037dc <I2C4_WriteReg>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00c      	b.n	8003154 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800313a:	4809      	ldr	r0, [pc, #36]	; (8003160 <BSP_I2C4_WriteReg16+0x58>)
 800313c:	f006 f896 	bl	800926c <HAL_I2C_GetError>
 8003140:	4603      	mov	r3, r0
 8003142:	2b04      	cmp	r3, #4
 8003144:	d103      	bne.n	800314e <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003146:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e002      	b.n	8003154 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800314e:	f06f 0303 	mvn.w	r3, #3
 8003152:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003154:	697b      	ldr	r3, [r7, #20]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	240606e4 	.word	0x240606e4

08003164 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	60ba      	str	r2, [r7, #8]
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	81fb      	strh	r3, [r7, #14]
 8003172:	460b      	mov	r3, r1
 8003174:	81bb      	strh	r3, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800317a:	89b9      	ldrh	r1, [r7, #12]
 800317c:	89f8      	ldrh	r0, [r7, #14]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2202      	movs	r2, #2
 8003186:	f000 fb4f 	bl	8003828 <I2C4_ReadReg>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e00c      	b.n	80031b0 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003196:	4809      	ldr	r0, [pc, #36]	; (80031bc <BSP_I2C4_ReadReg16+0x58>)
 8003198:	f006 f868 	bl	800926c <HAL_I2C_GetError>
 800319c:	4603      	mov	r3, r0
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d103      	bne.n	80031aa <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80031a2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e002      	b.n	80031b0 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80031aa:	f06f 0303 	mvn.w	r3, #3
 80031ae:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80031b0:	697b      	ldr	r3, [r7, #20]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	240606e4 	.word	0x240606e4

080031c0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80031c4:	f001 f894 	bl	80042f0 <HAL_GetTick>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d06b      	beq.n	80032bc <I2C_GetTiming+0xec>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d068      	beq.n	80032bc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	e060      	b.n	80032b2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80031f0:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <I2C_GetTiming+0xf8>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d352      	bcc.n	80032ac <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003206:	4a30      	ldr	r2, [pc, #192]	; (80032c8 <I2C_GetTiming+0xf8>)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3308      	adds	r3, #8
 8003214:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d847      	bhi.n	80032ac <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800321c:	6939      	ldr	r1, [r7, #16]
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f856 	bl	80032d0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f940 	bl	80034ac <I2C_Compute_SCLL_SCLH>
 800322c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b7f      	cmp	r3, #127	; 0x7f
 8003232:	d842      	bhi.n	80032ba <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003234:	4925      	ldr	r1, [pc, #148]	; (80032cc <I2C_GetTiming+0xfc>)
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003246:	4821      	ldr	r0, [pc, #132]	; (80032cc <I2C_GetTiming+0xfc>)
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4403      	add	r3, r0
 8003254:	3304      	adds	r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800325e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003260:	481a      	ldr	r0, [pc, #104]	; (80032cc <I2C_GetTiming+0xfc>)
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4403      	add	r3, r0
 800326e:	3308      	adds	r3, #8
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003278:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800327a:	4814      	ldr	r0, [pc, #80]	; (80032cc <I2C_GetTiming+0xfc>)
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4403      	add	r3, r0
 8003288:	330c      	adds	r3, #12
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003290:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003292:	480e      	ldr	r0, [pc, #56]	; (80032cc <I2C_GetTiming+0xfc>)
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4403      	add	r3, r0
 80032a0:	3310      	adds	r3, #16
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80032a6:	430b      	orrs	r3, r1
 80032a8:	617b      	str	r3, [r7, #20]
        }
        break;
 80032aa:	e006      	b.n	80032ba <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3301      	adds	r3, #1
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d99b      	bls.n	80031f0 <I2C_GetTiming+0x20>
 80032b8:	e000      	b.n	80032bc <I2C_GetTiming+0xec>
        break;
 80032ba:	bf00      	nop
      }
    }
  }

  return ret;
 80032bc:	697b      	ldr	r3, [r7, #20]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	080104a4 	.word	0x080104a4
 80032cc:	2405fce0 	.word	0x2405fce0

080032d0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b08f      	sub	sp, #60	; 0x3c
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80032da:	2310      	movs	r3, #16
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	085a      	lsrs	r2, r3, #1
 80032e2:	4b6e      	ldr	r3, [pc, #440]	; (800349c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80032e4:	4413      	add	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ec:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80032ee:	2332      	movs	r3, #50	; 0x32
 80032f0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80032f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80032f6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80032f8:	4a69      	ldr	r2, [pc, #420]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3324      	adds	r3, #36	; 0x24
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	330c      	adds	r3, #12
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800331c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800331e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003320:	495f      	ldr	r1, [pc, #380]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	202c      	movs	r0, #44	; 0x2c
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	440b      	add	r3, r1
 800332c:	3328      	adds	r3, #40	; 0x28
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3303      	adds	r3, #3
 8003332:	69f9      	ldr	r1, [r7, #28]
 8003334:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3310      	adds	r3, #16
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3320      	adds	r3, #32
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003360:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003362:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003364:	494e      	ldr	r1, [pc, #312]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	202c      	movs	r0, #44	; 0x2c
 800336a:	fb00 f303 	mul.w	r3, r0, r3
 800336e:	440b      	add	r3, r1
 8003370:	3328      	adds	r3, #40	; 0x28
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3304      	adds	r3, #4
 8003376:	69f9      	ldr	r1, [r7, #28]
 8003378:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003380:	4a47      	ldr	r2, [pc, #284]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3320      	adds	r3, #32
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	4a43      	ldr	r2, [pc, #268]	; (80034a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3314      	adds	r3, #20
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4403      	add	r3, r0
 80033a4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	dc01      	bgt.n	80033b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dc01      	bgt.n	80033ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033be:	e062      	b.n	8003486 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	e059      	b.n	800347a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	3301      	adds	r3, #1
 80033ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033cc:	3201      	adds	r2, #1
 80033ce:	fb03 f202 	mul.w	r2, r3, r2
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d348      	bcc.n	8003474 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	e042      	b.n	800346e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	3301      	adds	r3, #1
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	fb03 f202 	mul.w	r2, r3, r2
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fb02 f303 	mul.w	r3, r2, r3
 80033f8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d332      	bcc.n	8003468 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d82e      	bhi.n	8003468 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800340a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340e:	429a      	cmp	r2, r3
 8003410:	d02a      	beq.n	8003468 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4924      	ldr	r1, [pc, #144]	; (80034a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003424:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003426:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	491f      	ldr	r1, [pc, #124]	; (80034a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3304      	adds	r3, #4
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4919      	ldr	r1, [pc, #100]	; (80034a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3308      	adds	r3, #8
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3301      	adds	r3, #1
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800345e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b7f      	cmp	r3, #127	; 0x7f
 8003466:	d812      	bhi.n	800348e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	3301      	adds	r3, #1
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d9b9      	bls.n	80033e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	3301      	adds	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	2b0f      	cmp	r3, #15
 800347e:	d9a2      	bls.n	80033c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	3301      	adds	r3, #1
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d999      	bls.n	80033c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800348c:	e000      	b.n	8003490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800348e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003490:	373c      	adds	r7, #60	; 0x3c
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	3b9aca00 	.word	0x3b9aca00
 80034a0:	080104a4 	.word	0x080104a4
 80034a4:	240606e0 	.word	0x240606e0
 80034a8:	2405fce0 	.word	0x2405fce0

080034ac <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b093      	sub	sp, #76	; 0x4c
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	085a      	lsrs	r2, r3, #1
 80034c0:	4b7a      	ldr	r3, [pc, #488]	; (80036ac <I2C_Compute_SCLL_SCLH+0x200>)
 80034c2:	4413      	add	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80034cc:	4a78      	ldr	r2, [pc, #480]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	085a      	lsrs	r2, r3, #1
 80034dc:	4b73      	ldr	r3, [pc, #460]	; (80036ac <I2C_Compute_SCLL_SCLH+0x200>)
 80034de:	4413      	add	r3, r2
 80034e0:	4973      	ldr	r1, [pc, #460]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	202c      	movs	r0, #44	; 0x2c
 80034e6:	fb00 f202 	mul.w	r2, r0, r2
 80034ea:	440a      	add	r2, r1
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80034f4:	2332      	movs	r3, #50	; 0x32
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80034f8:	4a6d      	ldr	r2, [pc, #436]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3328      	adds	r3, #40	; 0x28
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003510:	4a67      	ldr	r2, [pc, #412]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a62      	ldr	r2, [pc, #392]	; (80036ac <I2C_Compute_SCLL_SCLH+0x200>)
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003528:	4a61      	ldr	r2, [pc, #388]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3308      	adds	r3, #8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <I2C_Compute_SCLL_SCLH+0x200>)
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003544:	2300      	movs	r3, #0
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
 8003548:	e0a3      	b.n	8003692 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800354a:	495a      	ldr	r1, [pc, #360]	; (80036b4 <I2C_Compute_SCLL_SCLH+0x208>)
 800354c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003564:	2300      	movs	r3, #0
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	e08c      	b.n	8003684 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	441a      	add	r2, r3
 8003570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003572:	3301      	adds	r3, #1
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	fb03 f101 	mul.w	r1, r3, r1
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	440b      	add	r3, r1
 8003580:	4413      	add	r3, r2
 8003582:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003584:	4a4a      	ldr	r2, [pc, #296]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3318      	adds	r3, #24
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	d971      	bls.n	800367e <I2C_Compute_SCLL_SCLH+0x1d2>
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d268      	bcs.n	800367e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b0:	e062      	b.n	8003678 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	441a      	add	r2, r3
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	3301      	adds	r3, #1
 80035bc:	6979      	ldr	r1, [r7, #20]
 80035be:	fb03 f101 	mul.w	r1, r3, r1
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	440b      	add	r3, r1
 80035c8:	4413      	add	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	441a      	add	r2, r3
 80035d2:	4937      	ldr	r1, [pc, #220]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	202c      	movs	r0, #44	; 0x2c
 80035d8:	fb00 f303 	mul.w	r3, r0, r3
 80035dc:	440b      	add	r3, r1
 80035de:	3320      	adds	r3, #32
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	441a      	add	r2, r3
 80035e4:	4932      	ldr	r1, [pc, #200]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	202c      	movs	r0, #44	; 0x2c
 80035ea:	fb00 f303 	mul.w	r3, r0, r3
 80035ee:	440b      	add	r3, r1
 80035f0:	3324      	adds	r3, #36	; 0x24
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4413      	add	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d338      	bcc.n	8003672 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	d834      	bhi.n	8003672 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003608:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <I2C_Compute_SCLL_SCLH+0x204>)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	331c      	adds	r3, #28
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	429a      	cmp	r2, r3
 800361c:	d329      	bcc.n	8003672 <I2C_Compute_SCLL_SCLH+0x1c6>
 800361e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	429a      	cmp	r2, r3
 8003624:	d225      	bcs.n	8003672 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	2b00      	cmp	r3, #0
 8003632:	da02      	bge.n	800363a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	425b      	negs	r3, r3
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800363e:	429a      	cmp	r2, r3
 8003640:	d917      	bls.n	8003672 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003646:	491b      	ldr	r1, [pc, #108]	; (80036b4 <I2C_Compute_SCLL_SCLH+0x208>)
 8003648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3310      	adds	r3, #16
 8003656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003658:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800365a:	4916      	ldr	r1, [pc, #88]	; (80036b4 <I2C_Compute_SCLL_SCLH+0x208>)
 800365c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	330c      	adds	r3, #12
 800366a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366c:	601a      	str	r2, [r3, #0]
              ret = count;
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	3301      	adds	r3, #1
 8003676:	63bb      	str	r3, [r7, #56]	; 0x38
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2bff      	cmp	r3, #255	; 0xff
 800367c:	d999      	bls.n	80035b2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003680:	3301      	adds	r3, #1
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	f67f af6f 	bls.w	800356a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	3301      	adds	r3, #1
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003698:	429a      	cmp	r2, r3
 800369a:	f4ff af56 	bcc.w	800354a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800369e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	374c      	adds	r7, #76	; 0x4c
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	3b9aca00 	.word	0x3b9aca00
 80036b0:	080104a4 	.word	0x080104a4
 80036b4:	2405fce0 	.word	0x2405fce0
 80036b8:	240606e0 	.word	0x240606e0

080036bc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80036c4:	4b31      	ldr	r3, [pc, #196]	; (800378c <I2C4_MspInit+0xd0>)
 80036c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036ca:	4a30      	ldr	r2, [pc, #192]	; (800378c <I2C4_MspInit+0xd0>)
 80036cc:	f043 0308 	orr.w	r3, r3, #8
 80036d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <I2C4_MspInit+0xd0>)
 80036d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <I2C4_MspInit+0xd0>)
 80036e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036e8:	4a28      	ldr	r2, [pc, #160]	; (800378c <I2C4_MspInit+0xd0>)
 80036ea:	f043 0308 	orr.w	r3, r3, #8
 80036ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <I2C4_MspInit+0xd0>)
 80036f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003704:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003706:	2312      	movs	r3, #18
 8003708:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800370e:	2302      	movs	r3, #2
 8003710:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003712:	2304      	movs	r3, #4
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	4619      	mov	r1, r3
 800371c:	481c      	ldr	r0, [pc, #112]	; (8003790 <I2C4_MspInit+0xd4>)
 800371e:	f004 ffa7 	bl	8008670 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003726:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003728:	2312      	movs	r3, #18
 800372a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003730:	2302      	movs	r3, #2
 8003732:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003734:	2304      	movs	r3, #4
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	4619      	mov	r1, r3
 800373e:	4814      	ldr	r0, [pc, #80]	; (8003790 <I2C4_MspInit+0xd4>)
 8003740:	f004 ff96 	bl	8008670 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <I2C4_MspInit+0xd0>)
 8003746:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800374a:	4a10      	ldr	r2, [pc, #64]	; (800378c <I2C4_MspInit+0xd0>)
 800374c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003750:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <I2C4_MspInit+0xd0>)
 8003756:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <I2C4_MspInit+0xd0>)
 8003764:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <I2C4_MspInit+0xd0>)
 800376a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <I2C4_MspInit+0xd0>)
 8003774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <I2C4_MspInit+0xd0>)
 800377a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	58024400 	.word	0x58024400
 8003790:	58020c00 	.word	0x58020c00

08003794 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800379c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4619      	mov	r1, r3
 80037a6:	480b      	ldr	r0, [pc, #44]	; (80037d4 <I2C4_MspDeInit+0x40>)
 80037a8:	f005 f912 	bl	80089d0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80037ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4619      	mov	r1, r3
 80037b6:	4807      	ldr	r0, [pc, #28]	; (80037d4 <I2C4_MspDeInit+0x40>)
 80037b8:	f005 f90a 	bl	80089d0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <I2C4_MspDeInit+0x44>)
 80037be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80037c2:	4a05      	ldr	r2, [pc, #20]	; (80037d8 <I2C4_MspDeInit+0x44>)
 80037c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	58020c00 	.word	0x58020c00
 80037d8:	58024400 	.word	0x58024400

080037dc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af04      	add	r7, sp, #16
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	4603      	mov	r3, r0
 80037e6:	81fb      	strh	r3, [r7, #14]
 80037e8:	460b      	mov	r3, r1
 80037ea:	81bb      	strh	r3, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80037f0:	8978      	ldrh	r0, [r7, #10]
 80037f2:	89ba      	ldrh	r2, [r7, #12]
 80037f4:	89f9      	ldrh	r1, [r7, #14]
 80037f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	8b3b      	ldrh	r3, [r7, #24]
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <I2C4_WriteReg+0x48>)
 8003808:	f005 faf4 	bl	8008df4 <HAL_I2C_Mem_Write>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003812:	2300      	movs	r3, #0
 8003814:	e001      	b.n	800381a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003816:	f06f 0307 	mvn.w	r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	240606e4 	.word	0x240606e4

08003828 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af04      	add	r7, sp, #16
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	4603      	mov	r3, r0
 8003832:	81fb      	strh	r3, [r7, #14]
 8003834:	460b      	mov	r3, r1
 8003836:	81bb      	strh	r3, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800383c:	8978      	ldrh	r0, [r7, #10]
 800383e:	89ba      	ldrh	r2, [r7, #12]
 8003840:	89f9      	ldrh	r1, [r7, #14]
 8003842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	8b3b      	ldrh	r3, [r7, #24]
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4603      	mov	r3, r0
 8003852:	4807      	ldr	r0, [pc, #28]	; (8003870 <I2C4_ReadReg+0x48>)
 8003854:	f005 fbe2 	bl	800901c <HAL_I2C_Mem_Read>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800385e:	2300      	movs	r3, #0
 8003860:	e001      	b.n	8003866 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003862:	f06f 0307 	mvn.w	r3, #7
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	240606e4 	.word	0x240606e4

08003874 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800388a:	f06f 0301 	mvn.w	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e02d      	b.n	80038ee <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003892:	4819      	ldr	r0, [pc, #100]	; (80038f8 <BSP_CAMERA_Init+0x84>)
 8003894:	f7fc ff32 	bl	80006fc <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003898:	f7fc fefc 	bl	8000694 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 800389c:	2000      	movs	r0, #0
 800389e:	f000 f947 	bl	8003b30 <BSP_CAMERA_HwReset>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80038a8:	f06f 0307 	mvn.w	r3, #7
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e01e      	b.n	80038ee <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	68b8      	ldr	r0, [r7, #8]
 80038b4:	f000 f9fe 	bl	8003cb4 <OV5640_Probe>
 80038b8:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80038c0:	f06f 0306 	mvn.w	r3, #6
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e012      	b.n	80038ee <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 80038c8:	490c      	ldr	r1, [pc, #48]	; (80038fc <BSP_CAMERA_Init+0x88>)
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	440b      	add	r3, r1
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80038da:	4908      	ldr	r1, [pc, #32]	; (80038fc <BSP_CAMERA_Init+0x88>)
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	440b      	add	r3, r1
 80038e8:	3304      	adds	r3, #4
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 80038ee:	697b      	ldr	r3, [r7, #20]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	240000d4 	.word	0x240000d4
 80038fc:	2406073c 	.word	0x2406073c

08003900 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003912:	f06f 0301 	mvn.w	r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e022      	b.n	8003960 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 800391a:	68bc      	ldr	r4, [r7, #8]
 800391c:	4913      	ldr	r1, [pc, #76]	; (800396c <BSP_CAMERA_Start+0x6c>)
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	440b      	add	r3, r1
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	490f      	ldr	r1, [pc, #60]	; (800396c <BSP_CAMERA_Start+0x6c>)
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	440b      	add	r3, r1
 800393a:	3304      	adds	r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4619      	mov	r1, r3
 8003940:	f000 f966 	bl	8003c10 <GetSize>
 8003944:	4603      	mov	r3, r0
 8003946:	4622      	mov	r2, r4
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4809      	ldr	r0, [pc, #36]	; (8003970 <BSP_CAMERA_Start+0x70>)
 800394c:	f000 fe8a 	bl	8004664 <HAL_DCMI_Start_DMA>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003956:	f06f 0303 	mvn.w	r3, #3
 800395a:	e002      	b.n	8003962 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003960:	697b      	ldr	r3, [r7, #20]
}
 8003962:	4618      	mov	r0, r3
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd90      	pop	{r4, r7, pc}
 800396a:	bf00      	nop
 800396c:	2406073c 	.word	0x2406073c
 8003970:	240000d4 	.word	0x240000d4

08003974 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003982:	f06f 0301 	mvn.w	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e00b      	b.n	80039a2 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 800398a:	4808      	ldr	r0, [pc, #32]	; (80039ac <BSP_CAMERA_Stop+0x38>)
 800398c:	f000 ff2c 	bl	80047e8 <HAL_DCMI_Stop>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003996:	f06f 0303 	mvn.w	r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e001      	b.n	80039a2 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	240000d4 	.word	0x240000d4

080039b0 <BSP_CAMERA_SetLightMode>:
  * @param  Instance  Camera instance.
  * @param  LightMode Light Mode to be configured
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetLightMode(uint32_t Instance, uint32_t LightMode)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <BSP_CAMERA_SetLightMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039c0:	f06f 0301 	mvn.w	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e023      	b.n	8003a10 <BSP_CAMERA_SetLightMode+0x60>
  }
  else if(Camera_Cap->LightMode == 0U)
 80039c8:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <BSP_CAMERA_SetLightMode+0x6c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <BSP_CAMERA_SetLightMode+0x2a>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80039d2:	f06f 030a 	mvn.w	r3, #10
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e01a      	b.n	8003a10 <BSP_CAMERA_SetLightMode+0x60>
  }
  else if(Camera_Drv->SetLightMode(Camera_CompObj, LightMode) < 0)
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <BSP_CAMERA_SetLightMode+0x70>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <BSP_CAMERA_SetLightMode+0x74>)
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	4610      	mov	r0, r2
 80039e8:	4798      	blx	r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da03      	bge.n	80039f8 <BSP_CAMERA_SetLightMode+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80039f0:	f06f 0304 	mvn.w	r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e00b      	b.n	8003a10 <BSP_CAMERA_SetLightMode+0x60>
  }
  else
  {
    Camera_Ctx[Instance].LightMode = LightMode;
 80039f8:	490b      	ldr	r1, [pc, #44]	; (8003a28 <BSP_CAMERA_SetLightMode+0x78>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	440b      	add	r3, r1
 8003a06:	3308      	adds	r3, #8
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003a10:	68fb      	ldr	r3, [r7, #12]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	24060770 	.word	0x24060770
 8003a20:	2406076c 	.word	0x2406076c
 8003a24:	24060738 	.word	0x24060738
 8003a28:	2406073c 	.word	0x2406073c

08003a2c <BSP_CAMERA_SetColorEffect>:
  * @param  Instance Camera instance.
  * @param  ColorEffect Effect to be configured
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetColorEffect(uint32_t Instance, uint32_t ColorEffect)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <BSP_CAMERA_SetColorEffect+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a3c:	f06f 0301 	mvn.w	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e023      	b.n	8003a8c <BSP_CAMERA_SetColorEffect+0x60>
  }
  else if(Camera_Cap->ColorEffect == 0U)
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <BSP_CAMERA_SetColorEffect+0x6c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <BSP_CAMERA_SetColorEffect+0x2a>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003a4e:	f06f 030a 	mvn.w	r3, #10
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e01a      	b.n	8003a8c <BSP_CAMERA_SetColorEffect+0x60>
  }
  else if(Camera_Drv->SetColorEffect(Camera_CompObj, ColorEffect) < 0)
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <BSP_CAMERA_SetColorEffect+0x70>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <BSP_CAMERA_SetColorEffect+0x74>)
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	6839      	ldr	r1, [r7, #0]
 8003a62:	4610      	mov	r0, r2
 8003a64:	4798      	blx	r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	da03      	bge.n	8003a74 <BSP_CAMERA_SetColorEffect+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a6c:	f06f 0304 	mvn.w	r3, #4
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e00b      	b.n	8003a8c <BSP_CAMERA_SetColorEffect+0x60>
  }
  else
  {
    Camera_Ctx[Instance].ColorEffect = ColorEffect;
 8003a74:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <BSP_CAMERA_SetColorEffect+0x78>)
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	440b      	add	r3, r1
 8003a82:	330c      	adds	r3, #12
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	24060770 	.word	0x24060770
 8003a9c:	2406076c 	.word	0x2406076c
 8003aa0:	24060738 	.word	0x24060738
 8003aa4:	2406073c 	.word	0x2406073c

08003aa8 <BSP_CAMERA_SetHueDegree>:
  * @param  Instance   Camera instance.
  * @param  HueDegree  Hue Degree
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetHueDegree(uint32_t Instance, int32_t HueDegree)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if((Instance >= CAMERA_INSTANCES_NBR) || ((HueDegree < CAMERA_HUEDEGREE_MIN) && (HueDegree > CAMERA_HUEDEGREE_MAX)))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <BSP_CAMERA_SetHueDegree+0x1e>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f113 0f06 	cmn.w	r3, #6
 8003abe:	da06      	bge.n	8003ace <BSP_CAMERA_SetHueDegree+0x26>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	dd03      	ble.n	8003ace <BSP_CAMERA_SetHueDegree+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ac6:	f06f 0301 	mvn.w	r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e023      	b.n	8003b16 <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else if(Camera_Cap->HueDegree == 0U)
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <BSP_CAMERA_SetHueDegree+0x78>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <BSP_CAMERA_SetHueDegree+0x38>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003ad8:	f06f 030a 	mvn.w	r3, #10
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e01a      	b.n	8003b16 <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else if(Camera_Drv->SetHueDegree(Camera_CompObj, HueDegree) < 0)
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <BSP_CAMERA_SetHueDegree+0x7c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <BSP_CAMERA_SetHueDegree+0x80>)
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da03      	bge.n	8003afe <BSP_CAMERA_SetHueDegree+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003af6:	f06f 0304 	mvn.w	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	e00b      	b.n	8003b16 <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else
  {
    Camera_Ctx[Instance].HueDegree = HueDegree;
 8003afe:	490b      	ldr	r1, [pc, #44]	; (8003b2c <BSP_CAMERA_SetHueDegree+0x84>)
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4413      	add	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	440b      	add	r3, r1
 8003b0c:	331c      	adds	r3, #28
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003b16:	68fb      	ldr	r3, [r7, #12]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	24060770 	.word	0x24060770
 8003b24:	2406076c 	.word	0x2406076c
 8003b28:	24060738 	.word	0x24060738
 8003b2c:	2406073c 	.word	0x2406073c

08003b30 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b42:	f06f 0301 	mvn.w	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003b48:	68fb      	ldr	r3, [r7, #12]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b68:	f06f 0301 	mvn.w	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7ff ffdb 	bl	8003b7c <BSP_CAMERA_LineEventCallback>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fd fc2c 	bl	8001434 <BSP_CAMERA_FrameEventCallback>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ffcf 	bl	8003b90 <BSP_CAMERA_VsyncEventCallback>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7ff ffce 	bl	8003ba4 <BSP_CAMERA_ErrorCallback>
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003c24:	2303      	movs	r3, #3
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	e001      	b.n	8003c2e <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d834      	bhi.n	8003c9e <GetSize+0x8e>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <GetSize+0x2c>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c51 	.word	0x08003c51
 8003c40:	08003c61 	.word	0x08003c61
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c81 	.word	0x08003c81
 8003c4c:	08003c91 	.word	0x08003c91
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	60fb      	str	r3, [r7, #12]
    break;
 8003c5e:	e01f      	b.n	8003ca0 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	60fb      	str	r3, [r7, #12]
    break;
 8003c6e:	e017      	b.n	8003ca0 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	025b      	lsls	r3, r3, #9
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	60fb      	str	r3, [r7, #12]
    break;
 8003c7e:	e00f      	b.n	8003ca0 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	60fb      	str	r3, [r7, #12]
    break;
 8003c8e:	e007      	b.n	8003ca0 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <GetSize+0xa0>)
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	60fb      	str	r3, [r7, #12]
    break;
 8003c9c:	e000      	b.n	8003ca0 <GetSize+0x90>
  default:
    break;
 8003c9e:	bf00      	nop
  }

  return (int32_t)size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	0005dc00 	.word	0x0005dc00

08003cb4 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003cbe:	2378      	movs	r3, #120	; 0x78
 8003cc0:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003cc2:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <OV5640_Probe+0xc0>)
 8003cc4:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003cc6:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <OV5640_Probe+0xc4>)
 8003cc8:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003cca:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <OV5640_Probe+0xc8>)
 8003ccc:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <OV5640_Probe+0xcc>)
 8003cd0:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <OV5640_Probe+0xd0>)
 8003cd4:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003cd6:	f107 030c 	add.w	r3, r7, #12
 8003cda:	4619      	mov	r1, r3
 8003cdc:	482a      	ldr	r0, [pc, #168]	; (8003d88 <OV5640_Probe+0xd4>)
 8003cde:	f7fd fbbf 	bl	8001460 <OV5640_RegisterBusIO>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ce8:	f06f 0304 	mvn.w	r3, #4
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	e03c      	b.n	8003d6a <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4824      	ldr	r0, [pc, #144]	; (8003d88 <OV5640_Probe+0xd4>)
 8003cf8:	f7fe f806 	bl	8001d08 <OV5640_ReadID>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d02:	f06f 0304 	mvn.w	r3, #4
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	e02f      	b.n	8003d6a <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f245 6240 	movw	r2, #22080	; 0x5640
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003d14:	f06f 0306 	mvn.w	r3, #6
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	e026      	b.n	8003d6a <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <OV5640_Probe+0xd8>)
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <OV5640_Probe+0xdc>)
 8003d20:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <OV5640_Probe+0xe0>)
 8003d24:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <OV5640_Probe+0xd4>)
 8003d26:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <OV5640_Probe+0xd8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <OV5640_Probe+0xe0>)
 8003d30:	6810      	ldr	r0, [r2, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4798      	blx	r3
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d3e:	f06f 0304 	mvn.w	r3, #4
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	e011      	b.n	8003d6a <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <OV5640_Probe+0xd8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <OV5640_Probe+0xe0>)
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	4911      	ldr	r1, [pc, #68]	; (8003d98 <OV5640_Probe+0xe4>)
 8003d52:	6809      	ldr	r1, [r1, #0]
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d5e:	f06f 0304 	mvn.w	r3, #4
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
 8003d64:	e001      	b.n	8003d6a <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3728      	adds	r7, #40	; 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	08002fc9 	.word	0x08002fc9
 8003d78:	0800303d 	.word	0x0800303d
 8003d7c:	08003165 	.word	0x08003165
 8003d80:	08003109 	.word	0x08003109
 8003d84:	080031c1 	.word	0x080031c1
 8003d88:	24060774 	.word	0x24060774
 8003d8c:	2406076c 	.word	0x2406076c
 8003d90:	24000000 	.word	0x24000000
 8003d94:	24060738 	.word	0x24060738
 8003d98:	24060770 	.word	0x24060770

08003d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_MspInit+0x30>)
 8003da4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <HAL_MspInit+0x30>)
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_MspInit+0x30>)
 8003db4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	58024400 	.word	0x58024400

08003dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dd4:	e7fe      	b.n	8003dd4 <NMI_Handler+0x4>

08003dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dda:	e7fe      	b.n	8003dda <HardFault_Handler+0x4>

08003ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003de0:	e7fe      	b.n	8003de0 <MemManage_Handler+0x4>

08003de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003de6:	e7fe      	b.n	8003de6 <BusFault_Handler+0x4>

08003de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dec:	e7fe      	b.n	8003dec <UsageFault_Handler+0x4>

08003dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e1c:	f000 fa54 	bl	80042c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <USART1_IRQHandler+0x10>)
 8003e2a:	f009 fa1b 	bl	800d264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	240607a0 	.word	0x240607a0

08003e38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <DMA2_Stream1_IRQHandler+0x10>)
 8003e3e:	f002 f9c3 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	24000124 	.word	0x24000124

08003e4c <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <DCMI_PSSI_IRQHandler+0x10>)
 8003e52:	f000 fd29 	bl	80048a8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	240000d4 	.word	0x240000d4

08003e60 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <LTDC_IRQHandler+0x10>)
 8003e66:	f005 fe2d 	bl	8009ac4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	24000204 	.word	0x24000204

08003e74 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <LTDC_ER_IRQHandler+0x10>)
 8003e7a:	f005 fe23 	bl	8009ac4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	24000204 	.word	0x24000204

08003e88 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <DMA2D_IRQHandler+0x10>)
 8003e8e:	f003 fd81 	bl	8007994 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	2400019c 	.word	0x2400019c

08003e9c <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <_sbrk+0x5c>)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <_sbrk+0x60>)
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_sbrk+0x64>)
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <_sbrk+0x68>)
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee8:	f00a ff7e 	bl	800ede8 <__errno>
 8003eec:	4603      	mov	r3, r0
 8003eee:	220c      	movs	r2, #12
 8003ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef6:	e009      	b.n	8003f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <_sbrk+0x64>)
 8003f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	24100000 	.word	0x24100000
 8003f18:	00000400 	.word	0x00000400
 8003f1c:	2406079c 	.word	0x2406079c
 8003f20:	24060848 	.word	0x24060848

08003f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f28:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <SystemInit+0xd0>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	4a31      	ldr	r2, [pc, #196]	; (8003ff4 <SystemInit+0xd0>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f38:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <SystemInit+0xd4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d807      	bhi.n	8003f54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f44:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <SystemInit+0xd4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f023 030f 	bic.w	r3, r3, #15
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <SystemInit+0xd4>)
 8003f4e:	f043 0303 	orr.w	r3, r3, #3
 8003f52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f54:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <SystemInit+0xd8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <SystemInit+0xd8>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <SystemInit+0xd8>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <SystemInit+0xd8>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4924      	ldr	r1, [pc, #144]	; (8003ffc <SystemInit+0xd8>)
 8003f6c:	4b24      	ldr	r3, [pc, #144]	; (8004000 <SystemInit+0xdc>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <SystemInit+0xd4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <SystemInit+0xd4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 030f 	bic.w	r3, r3, #15
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <SystemInit+0xd4>)
 8003f88:	f043 0303 	orr.w	r3, r3, #3
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <SystemInit+0xd8>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <SystemInit+0xd8>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003f9a:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <SystemInit+0xd8>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <SystemInit+0xd8>)
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <SystemInit+0xe0>)
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <SystemInit+0xd8>)
 8003fa8:	4a17      	ldr	r2, [pc, #92]	; (8004008 <SystemInit+0xe4>)
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <SystemInit+0xd8>)
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <SystemInit+0xe8>)
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <SystemInit+0xd8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <SystemInit+0xd8>)
 8003fba:	4a14      	ldr	r2, [pc, #80]	; (800400c <SystemInit+0xe8>)
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <SystemInit+0xd8>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <SystemInit+0xd8>)
 8003fc6:	4a11      	ldr	r2, [pc, #68]	; (800400c <SystemInit+0xe8>)
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <SystemInit+0xd8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <SystemInit+0xd8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <SystemInit+0xd8>)
 8003fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <SystemInit+0xd8>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <SystemInit+0xec>)
 8003fe4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003fe8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000ed00 	.word	0xe000ed00
 8003ff8:	52002000 	.word	0x52002000
 8003ffc:	58024400 	.word	0x58024400
 8004000:	eaf6ed7f 	.word	0xeaf6ed7f
 8004004:	02020200 	.word	0x02020200
 8004008:	01ff0000 	.word	0x01ff0000
 800400c:	01010280 	.word	0x01010280
 8004010:	52004000 	.word	0x52004000

08004014 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004018:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 800401a:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <MX_USART1_UART_Init+0x94>)
 800401c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800401e:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004026:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800402c:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 800403a:	220c      	movs	r2, #12
 800403c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 800404c:	2200      	movs	r2, #0
 800404e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004052:	2200      	movs	r2, #0
 8004054:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004056:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004058:	2200      	movs	r2, #0
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800405c:	4811      	ldr	r0, [pc, #68]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 800405e:	f008 ff5b 	bl	800cf18 <HAL_UART_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004068:	f7fd f9f4 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800406c:	2100      	movs	r1, #0
 800406e:	480d      	ldr	r0, [pc, #52]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004070:	f00a fdf0 	bl	800ec54 <HAL_UARTEx_SetTxFifoThreshold>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800407a:	f7fd f9eb 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800407e:	2100      	movs	r1, #0
 8004080:	4808      	ldr	r0, [pc, #32]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004082:	f00a fe25 	bl	800ecd0 <HAL_UARTEx_SetRxFifoThreshold>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800408c:	f7fd f9e2 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004090:	4804      	ldr	r0, [pc, #16]	; (80040a4 <MX_USART1_UART_Init+0x90>)
 8004092:	f00a fda6 	bl	800ebe2 <HAL_UARTEx_DisableFifoMode>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800409c:	f7fd f9da 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040a0:	bf00      	nop
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	240607a0 	.word	0x240607a0
 80040a8:	40011000 	.word	0x40011000

080040ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0ba      	sub	sp, #232	; 0xe8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040c4:	f107 0310 	add.w	r3, r7, #16
 80040c8:	22c0      	movs	r2, #192	; 0xc0
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00a feb5 	bl	800ee3c <memset>
  if(uartHandle->Instance==USART1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <HAL_UART_MspInit+0xd8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d14e      	bne.n	800417a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040dc:	f04f 0201 	mov.w	r2, #1
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ee:	f107 0310 	add.w	r3, r7, #16
 80040f2:	4618      	mov	r0, r3
 80040f4:	f007 f812 	bl	800b11c <HAL_RCCEx_PeriphCLKConfig>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80040fe:	f7fd f9a9 	bl	8001454 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004102:	4b21      	ldr	r3, [pc, #132]	; (8004188 <HAL_UART_MspInit+0xdc>)
 8004104:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_UART_MspInit+0xdc>)
 800410a:	f043 0310 	orr.w	r3, r3, #16
 800410e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_UART_MspInit+0xdc>)
 8004114:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_UART_MspInit+0xdc>)
 8004122:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_UART_MspInit+0xdc>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_UART_MspInit+0xdc>)
 8004132:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800413e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004158:	2307      	movs	r3, #7
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004162:	4619      	mov	r1, r3
 8004164:	4809      	ldr	r0, [pc, #36]	; (800418c <HAL_UART_MspInit+0xe0>)
 8004166:	f004 fa83 	bl	8008670 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	2025      	movs	r0, #37	; 0x25
 8004170:	f000 f9c9 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004174:	2025      	movs	r0, #37	; 0x25
 8004176:	f000 f9e0 	bl	800453a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800417a:	bf00      	nop
 800417c:	37e8      	adds	r7, #232	; 0xe8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40011000 	.word	0x40011000
 8004188:	58024400 	.word	0x58024400
 800418c:	58020000 	.word	0x58020000

08004190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004194:	f7ff fec6 	bl	8003f24 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004198:	480c      	ldr	r0, [pc, #48]	; (80041cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800419a:	490d      	ldr	r1, [pc, #52]	; (80041d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800419e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041a0:	e002      	b.n	80041a8 <LoopCopyDataInit>

080041a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041a6:	3304      	adds	r3, #4

080041a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80041a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041ac:	d3f9      	bcc.n	80041a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80041b0:	4c0a      	ldr	r4, [pc, #40]	; (80041dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80041b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041b4:	e001      	b.n	80041ba <LoopFillZerobss>

080041b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041b8:	3204      	adds	r2, #4

080041ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041bc:	d3fb      	bcc.n	80041b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80041be:	f00a fe19 	bl	800edf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041c2:	f7fd f809 	bl	80011d8 <main>
  bx  lr
 80041c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041c8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80041cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80041d0:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80041d4:	08010610 	.word	0x08010610
  ldr r2, =_sbss
 80041d8:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80041dc:	24060848 	.word	0x24060848

080041e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041e0:	e7fe      	b.n	80041e0 <ADC_IRQHandler>
	...

080041e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ea:	2003      	movs	r0, #3
 80041ec:	f000 f980 	bl	80044f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80041f0:	f006 fdbe 	bl	800ad70 <HAL_RCC_GetSysClockFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_Init+0x68>)
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	4913      	ldr	r1, [pc, #76]	; (8004250 <HAL_Init+0x6c>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_Init+0x68>)
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <HAL_Init+0x6c>)
 8004218:	5cd3      	ldrb	r3, [r2, r3]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	4a0b      	ldr	r2, [pc, #44]	; (8004254 <HAL_Init+0x70>)
 8004226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004228:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <HAL_Init+0x74>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800422e:	2000      	movs	r0, #0
 8004230:	f000 f814 	bl	800425c <HAL_InitTick>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e002      	b.n	8004244 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800423e:	f7ff fdad 	bl	8003d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	58024400 	.word	0x58024400
 8004250:	08010528 	.word	0x08010528
 8004254:	24000048 	.word	0x24000048
 8004258:	24000044 	.word	0x24000044

0800425c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <HAL_InitTick+0x60>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e021      	b.n	80042b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HAL_InitTick+0x64>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <HAL_InitTick+0x60>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4619      	mov	r1, r3
 800427a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800427e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f965 	bl	8004556 <HAL_SYSTICK_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e00e      	b.n	80042b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b0f      	cmp	r3, #15
 800429a:	d80a      	bhi.n	80042b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800429c:	2200      	movs	r2, #0
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042a4:	f000 f92f 	bl	8004506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042a8:	4a06      	ldr	r2, [pc, #24]	; (80042c4 <HAL_InitTick+0x68>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	24000050 	.word	0x24000050
 80042c0:	24000044 	.word	0x24000044
 80042c4:	2400004c 	.word	0x2400004c

080042c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_IncTick+0x20>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_IncTick+0x24>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4413      	add	r3, r2
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_IncTick+0x24>)
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	24000050 	.word	0x24000050
 80042ec:	24060834 	.word	0x24060834

080042f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return uwTick;
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <HAL_GetTick+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	24060834 	.word	0x24060834

08004308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004310:	f7ff ffee 	bl	80042f0 <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004320:	d005      	beq.n	800432e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_Delay+0x44>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800432e:	bf00      	nop
 8004330:	f7ff ffde 	bl	80042f0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d8f7      	bhi.n	8004330 <HAL_Delay+0x28>
  {
  }
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	24000050 	.word	0x24000050

08004350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <__NVIC_SetPriorityGrouping+0x40>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800436c:	4013      	ands	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <__NVIC_SetPriorityGrouping+0x44>)
 800437a:	4313      	orrs	r3, r2
 800437c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437e:	4a04      	ldr	r2, [pc, #16]	; (8004390 <__NVIC_SetPriorityGrouping+0x40>)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	60d3      	str	r3, [r2, #12]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000ed00 	.word	0xe000ed00
 8004394:	05fa0000 	.word	0x05fa0000

08004398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <__NVIC_GetPriorityGrouping+0x18>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	f003 0307 	and.w	r3, r3, #7
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db0b      	blt.n	80043de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	4907      	ldr	r1, [pc, #28]	; (80043ec <__NVIC_EnableIRQ+0x38>)
 80043ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2001      	movs	r0, #1
 80043d6:	fa00 f202 	lsl.w	r2, r0, r2
 80043da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e000e100 	.word	0xe000e100

080043f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db0a      	blt.n	800441a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	490c      	ldr	r1, [pc, #48]	; (800443c <__NVIC_SetPriority+0x4c>)
 800440a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004418:	e00a      	b.n	8004430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4908      	ldr	r1, [pc, #32]	; (8004440 <__NVIC_SetPriority+0x50>)
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3b04      	subs	r3, #4
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	440b      	add	r3, r1
 800442e:	761a      	strb	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f1c3 0307 	rsb	r3, r3, #7
 800445e:	2b04      	cmp	r3, #4
 8004460:	bf28      	it	cs
 8004462:	2304      	movcs	r3, #4
 8004464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3304      	adds	r3, #4
 800446a:	2b06      	cmp	r3, #6
 800446c:	d902      	bls.n	8004474 <NVIC_EncodePriority+0x30>
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3b03      	subs	r3, #3
 8004472:	e000      	b.n	8004476 <NVIC_EncodePriority+0x32>
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	401a      	ands	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800448c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	43d9      	mvns	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	4313      	orrs	r3, r2
         );
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044bc:	d301      	bcc.n	80044c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044be:	2301      	movs	r3, #1
 80044c0:	e00f      	b.n	80044e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <SysTick_Config+0x40>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ca:	210f      	movs	r1, #15
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044d0:	f7ff ff8e 	bl	80043f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <SysTick_Config+0x40>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <SysTick_Config+0x40>)
 80044dc:	2207      	movs	r2, #7
 80044de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	e000e010 	.word	0xe000e010

080044f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff ff29 	bl	8004350 <__NVIC_SetPriorityGrouping>
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
 8004512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004514:	f7ff ff40 	bl	8004398 <__NVIC_GetPriorityGrouping>
 8004518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	6978      	ldr	r0, [r7, #20]
 8004520:	f7ff ff90 	bl	8004444 <NVIC_EncodePriority>
 8004524:	4602      	mov	r2, r0
 8004526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff5f 	bl	80043f0 <__NVIC_SetPriority>
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	4603      	mov	r3, r0
 8004542:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff33 	bl	80043b4 <__NVIC_EnableIRQ>
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ffa4 	bl	80044ac <SysTick_Config>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e069      	b.n	8004656 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc f8b4 	bl	80006fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <HAL_DCMI_Init+0xf0>)
 80045b6:	400b      	ands	r3, r1
 80045b8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045da:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045fe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b10      	cmp	r3, #16
 800460e:	d112      	bne.n	8004636 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	7f1b      	ldrb	r3, [r3, #28]
 8004614:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7f5b      	ldrb	r3, [r3, #29]
 800461a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800461c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7f9b      	ldrb	r3, [r3, #30]
 8004622:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004624:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7fdb      	ldrb	r3, [r3, #31]
 800462c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004632:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004634:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 021e 	orr.w	r2, r2, #30
 8004644:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	ffe0f007 	.word	0xffe0f007

08004664 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_DCMI_Start_DMA+0x1c>
 800467c:	2302      	movs	r3, #2
 800467e:	e0ab      	b.n	80047d8 <HAL_DCMI_Start_DMA+0x174>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0202 	bic.w	r2, r2, #2
 80046ae:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	430a      	orrs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	4a46      	ldr	r2, [pc, #280]	; (80047e0 <HAL_DCMI_Start_DMA+0x17c>)
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	4a45      	ldr	r2, [pc, #276]	; (80047e4 <HAL_DCMI_Start_DMA+0x180>)
 80046ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d4:	2200      	movs	r2, #0
 80046d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d219      	bcs.n	800472c <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3328      	adds	r3, #40	; 0x28
 8004702:	4619      	mov	r1, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	f000 fd90 	bl	800522c <HAL_DMA_Start_IT>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d055      	beq.n	80047be <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2240      	movs	r2, #64	; 0x40
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e055      	b.n	80047d8 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004730:	4a2b      	ldr	r2, [pc, #172]	; (80047e0 <HAL_DCMI_Start_DMA+0x17c>)
 8004732:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004746:	e009      	b.n	800475c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	085a      	lsrs	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	005a      	lsls	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d2f0      	bcs.n	8004748 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	1e9a      	subs	r2, r3, #2
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3328      	adds	r3, #40	; 0x28
 800478e:	4619      	mov	r1, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	f003 fab9 	bl	8007d10 <HAL_DMAEx_MultiBufferStart_IT>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00c      	b.n	80047d8 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	080049ad 	.word	0x080049ad
 80047e4:	08004ad3 	.word	0x08004ad3

080047e8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_DCMI_Stop+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <HAL_DCMI_Stop+0xbc>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	0a5b      	lsrs	r3, r3, #9
 80047fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_DCMI_Stop+0x30>
 8004814:	2302      	movs	r3, #2
 8004816:	e03f      	b.n	8004898 <HAL_DCMI_Stop+0xb0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3b01      	subs	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	72fb      	strb	r3, [r7, #11]
      break;
 8004854:	e006      	b.n	8004864 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e9      	bne.n	8004838 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004872:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004878:	4618      	mov	r0, r3
 800487a:	f000 ff41 	bl	8005700 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004896:	7afb      	ldrb	r3, [r7, #11]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	24000044 	.word	0x24000044
 80048a4:	10624dd3 	.word	0x10624dd3

080048a8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2204      	movs	r2, #4
 80048c8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	f043 0202 	orr.w	r2, r3, #2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2204      	movs	r2, #4
 80048da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e2:	4a31      	ldr	r2, [pc, #196]	; (80049a8 <HAL_DCMI_IRQHandler+0x100>)
 80048e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 fa26 	bl	8005d3c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2202      	movs	r2, #2
 8004900:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <HAL_DCMI_IRQHandler+0x100>)
 800491c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fa0a 	bl	8005d3c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2210      	movs	r2, #16
 8004938:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff f93c 	bl	8003bb8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff f946 	bl	8003be4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01d      	beq.n	800499e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d107      	bne.n	8004980 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 021e 	bic.w	r2, r2, #30
 800497e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff f918 	bl	8003bce <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	08004ad3 	.word	0x08004ad3

080049ac <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d043      	beq.n	8004a4a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ce:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d118      	bne.n	8004a0e <DCMI_DMAXferCplt+0x62>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d015      	beq.n	8004a0e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	00da      	lsls	r2, r3, #3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4413      	add	r3, r2
 80049fa:	2200      	movs	r2, #0
 80049fc:	4619      	mov	r1, r3
 80049fe:	f003 fce5 	bl	80083cc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	1e5a      	subs	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a0c:	e044      	b.n	8004a98 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d13c      	bne.n	8004a98 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	00da      	lsls	r2, r3, #3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4413      	add	r3, r2
 8004a36:	2201      	movs	r2, #1
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f003 fcc7 	bl	80083cc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
 8004a48:	e026      	b.n	8004a98 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d006      	beq.n	8004a68 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	e017      	b.n	8004a98 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10f      	bne.n	8004a98 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	0099      	lsls	r1, r3, #2
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d112      	bne.n	8004aca <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d103      	bne.n	8004aca <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d009      	beq.n	8004afe <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff f87b 	bl	8003bfa <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b14:	f7ff fbec 	bl	80042f0 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e37f      	b.n	8005224 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a66      	ldr	r2, [pc, #408]	; (8004cc4 <HAL_DMA_Init+0x1b8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04a      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a65      	ldr	r2, [pc, #404]	; (8004cc8 <HAL_DMA_Init+0x1bc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d045      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a63      	ldr	r2, [pc, #396]	; (8004ccc <HAL_DMA_Init+0x1c0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a62      	ldr	r2, [pc, #392]	; (8004cd0 <HAL_DMA_Init+0x1c4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d03b      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a60      	ldr	r2, [pc, #384]	; (8004cd4 <HAL_DMA_Init+0x1c8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d036      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a5f      	ldr	r2, [pc, #380]	; (8004cd8 <HAL_DMA_Init+0x1cc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d031      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a5d      	ldr	r2, [pc, #372]	; (8004cdc <HAL_DMA_Init+0x1d0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02c      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a5c      	ldr	r2, [pc, #368]	; (8004ce0 <HAL_DMA_Init+0x1d4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d027      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a5a      	ldr	r2, [pc, #360]	; (8004ce4 <HAL_DMA_Init+0x1d8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d022      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a59      	ldr	r2, [pc, #356]	; (8004ce8 <HAL_DMA_Init+0x1dc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d01d      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a57      	ldr	r2, [pc, #348]	; (8004cec <HAL_DMA_Init+0x1e0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a56      	ldr	r2, [pc, #344]	; (8004cf0 <HAL_DMA_Init+0x1e4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a54      	ldr	r2, [pc, #336]	; (8004cf4 <HAL_DMA_Init+0x1e8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a53      	ldr	r2, [pc, #332]	; (8004cf8 <HAL_DMA_Init+0x1ec>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a51      	ldr	r2, [pc, #324]	; (8004cfc <HAL_DMA_Init+0x1f0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_Init+0xb8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a50      	ldr	r2, [pc, #320]	; (8004d00 <HAL_DMA_Init+0x1f4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d101      	bne.n	8004bc8 <HAL_DMA_Init+0xbc>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_DMA_Init+0xbe>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 813c 	beq.w	8004e48 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a37      	ldr	r2, [pc, #220]	; (8004cc4 <HAL_DMA_Init+0x1b8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04a      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a36      	ldr	r2, [pc, #216]	; (8004cc8 <HAL_DMA_Init+0x1bc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d045      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a34      	ldr	r2, [pc, #208]	; (8004ccc <HAL_DMA_Init+0x1c0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d040      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a33      	ldr	r2, [pc, #204]	; (8004cd0 <HAL_DMA_Init+0x1c4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d03b      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a31      	ldr	r2, [pc, #196]	; (8004cd4 <HAL_DMA_Init+0x1c8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d036      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a30      	ldr	r2, [pc, #192]	; (8004cd8 <HAL_DMA_Init+0x1cc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d031      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a2e      	ldr	r2, [pc, #184]	; (8004cdc <HAL_DMA_Init+0x1d0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d02c      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <HAL_DMA_Init+0x1d4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d027      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <HAL_DMA_Init+0x1d8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <HAL_DMA_Init+0x1dc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01d      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <HAL_DMA_Init+0x1e0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_DMA_Init+0x1e4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_DMA_Init+0x1e8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a24      	ldr	r2, [pc, #144]	; (8004cf8 <HAL_DMA_Init+0x1ec>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_DMA_Init+0x1f0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_DMA_Init+0x174>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <HAL_DMA_Init+0x1f4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d108      	bne.n	8004c92 <HAL_DMA_Init+0x186>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e007      	b.n	8004ca2 <HAL_DMA_Init+0x196>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ca2:	e02f      	b.n	8004d04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ca4:	f7ff fb24 	bl	80042f0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d928      	bls.n	8004d04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2203      	movs	r2, #3
 8004cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e2af      	b.n	8005224 <HAL_DMA_Init+0x718>
 8004cc4:	40020010 	.word	0x40020010
 8004cc8:	40020028 	.word	0x40020028
 8004ccc:	40020040 	.word	0x40020040
 8004cd0:	40020058 	.word	0x40020058
 8004cd4:	40020070 	.word	0x40020070
 8004cd8:	40020088 	.word	0x40020088
 8004cdc:	400200a0 	.word	0x400200a0
 8004ce0:	400200b8 	.word	0x400200b8
 8004ce4:	40020410 	.word	0x40020410
 8004ce8:	40020428 	.word	0x40020428
 8004cec:	40020440 	.word	0x40020440
 8004cf0:	40020458 	.word	0x40020458
 8004cf4:	40020470 	.word	0x40020470
 8004cf8:	40020488 	.word	0x40020488
 8004cfc:	400204a0 	.word	0x400204a0
 8004d00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1c8      	bne.n	8004ca4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4b73      	ldr	r3, [pc, #460]	; (8004eec <HAL_DMA_Init+0x3e0>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d107      	bne.n	8004d68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	4313      	orrs	r3, r2
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b28      	cmp	r3, #40	; 0x28
 8004d6e:	d903      	bls.n	8004d78 <HAL_DMA_Init+0x26c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b2e      	cmp	r3, #46	; 0x2e
 8004d76:	d91f      	bls.n	8004db8 <HAL_DMA_Init+0x2ac>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d7e:	d903      	bls.n	8004d88 <HAL_DMA_Init+0x27c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b42      	cmp	r3, #66	; 0x42
 8004d86:	d917      	bls.n	8004db8 <HAL_DMA_Init+0x2ac>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b46      	cmp	r3, #70	; 0x46
 8004d8e:	d903      	bls.n	8004d98 <HAL_DMA_Init+0x28c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b48      	cmp	r3, #72	; 0x48
 8004d96:	d90f      	bls.n	8004db8 <HAL_DMA_Init+0x2ac>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b4e      	cmp	r3, #78	; 0x4e
 8004d9e:	d903      	bls.n	8004da8 <HAL_DMA_Init+0x29c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b52      	cmp	r3, #82	; 0x52
 8004da6:	d907      	bls.n	8004db8 <HAL_DMA_Init+0x2ac>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b73      	cmp	r3, #115	; 0x73
 8004dae:	d905      	bls.n	8004dbc <HAL_DMA_Init+0x2b0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b77      	cmp	r3, #119	; 0x77
 8004db6:	d801      	bhi.n	8004dbc <HAL_DMA_Init+0x2b0>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <HAL_DMA_Init+0x2b2>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 0307 	bic.w	r3, r3, #7
 8004de0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d117      	bne.n	8004e24 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00e      	beq.n	8004e24 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f002 fbd6 	bl	80075b8 <DMA_CheckFifoParam>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e1ff      	b.n	8005224 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f002 fb11 	bl	8007454 <DMA_CalcBaseAndBitshift>
 8004e32:	4603      	mov	r3, r0
 8004e34:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	223f      	movs	r2, #63	; 0x3f
 8004e40:	409a      	lsls	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	e0fe      	b.n	8005046 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a28      	ldr	r2, [pc, #160]	; (8004ef0 <HAL_DMA_Init+0x3e4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d04a      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a27      	ldr	r2, [pc, #156]	; (8004ef4 <HAL_DMA_Init+0x3e8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d045      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <HAL_DMA_Init+0x3ec>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d040      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a24      	ldr	r2, [pc, #144]	; (8004efc <HAL_DMA_Init+0x3f0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d03b      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <HAL_DMA_Init+0x3f4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d036      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <HAL_DMA_Init+0x3f8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d031      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <HAL_DMA_Init+0x3fc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02c      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <HAL_DMA_Init+0x400>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d027      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1c      	ldr	r2, [pc, #112]	; (8004f10 <HAL_DMA_Init+0x404>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <HAL_DMA_Init+0x408>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <HAL_DMA_Init+0x40c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_DMA_Init+0x410>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_DMA_Init+0x414>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <HAL_DMA_Init+0x418>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_DMA_Init+0x41c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_DMA_Init+0x3dc>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <HAL_DMA_Init+0x420>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d123      	bne.n	8004f30 <HAL_DMA_Init+0x424>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e022      	b.n	8004f32 <HAL_DMA_Init+0x426>
 8004eec:	fe10803f 	.word	0xfe10803f
 8004ef0:	48022c08 	.word	0x48022c08
 8004ef4:	48022c1c 	.word	0x48022c1c
 8004ef8:	48022c30 	.word	0x48022c30
 8004efc:	48022c44 	.word	0x48022c44
 8004f00:	48022c58 	.word	0x48022c58
 8004f04:	48022c6c 	.word	0x48022c6c
 8004f08:	48022c80 	.word	0x48022c80
 8004f0c:	48022c94 	.word	0x48022c94
 8004f10:	58025408 	.word	0x58025408
 8004f14:	5802541c 	.word	0x5802541c
 8004f18:	58025430 	.word	0x58025430
 8004f1c:	58025444 	.word	0x58025444
 8004f20:	58025458 	.word	0x58025458
 8004f24:	5802546c 	.word	0x5802546c
 8004f28:	58025480 	.word	0x58025480
 8004f2c:	58025494 	.word	0x58025494
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d07e      	beq.n	8005034 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a80      	ldr	r2, [pc, #512]	; (800513c <HAL_DMA_Init+0x630>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d021      	beq.n	8004f84 <HAL_DMA_Init+0x478>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a7e      	ldr	r2, [pc, #504]	; (8005140 <HAL_DMA_Init+0x634>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01c      	beq.n	8004f84 <HAL_DMA_Init+0x478>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a7d      	ldr	r2, [pc, #500]	; (8005144 <HAL_DMA_Init+0x638>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d017      	beq.n	8004f84 <HAL_DMA_Init+0x478>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a7b      	ldr	r2, [pc, #492]	; (8005148 <HAL_DMA_Init+0x63c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d012      	beq.n	8004f84 <HAL_DMA_Init+0x478>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7a      	ldr	r2, [pc, #488]	; (800514c <HAL_DMA_Init+0x640>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00d      	beq.n	8004f84 <HAL_DMA_Init+0x478>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a78      	ldr	r2, [pc, #480]	; (8005150 <HAL_DMA_Init+0x644>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d008      	beq.n	8004f84 <HAL_DMA_Init+0x478>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a77      	ldr	r2, [pc, #476]	; (8005154 <HAL_DMA_Init+0x648>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <HAL_DMA_Init+0x478>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a75      	ldr	r2, [pc, #468]	; (8005158 <HAL_DMA_Init+0x64c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4b6e      	ldr	r3, [pc, #440]	; (800515c <HAL_DMA_Init+0x650>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d008      	beq.n	8004fc0 <HAL_DMA_Init+0x4b4>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d102      	bne.n	8004fbc <HAL_DMA_Init+0x4b0>
 8004fb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fba:	e002      	b.n	8004fc2 <HAL_DMA_Init+0x4b6>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <HAL_DMA_Init+0x4b6>
 8004fc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68d2      	ldr	r2, [r2, #12]
 8004fc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fe0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fe8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ff0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	4b56      	ldr	r3, [pc, #344]	; (8005160 <HAL_DMA_Init+0x654>)
 8005008:	4413      	add	r3, r2
 800500a:	4a56      	ldr	r2, [pc, #344]	; (8005164 <HAL_DMA_Init+0x658>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	009a      	lsls	r2, r3, #2
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f002 fa1b 	bl	8007454 <DMA_CalcBaseAndBitshift>
 800501e:	4603      	mov	r3, r0
 8005020:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2201      	movs	r2, #1
 800502c:	409a      	lsls	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	e008      	b.n	8005046 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2240      	movs	r2, #64	; 0x40
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2203      	movs	r2, #3
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0ee      	b.n	8005224 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a47      	ldr	r2, [pc, #284]	; (8005168 <HAL_DMA_Init+0x65c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d072      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a45      	ldr	r2, [pc, #276]	; (800516c <HAL_DMA_Init+0x660>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d06d      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a44      	ldr	r2, [pc, #272]	; (8005170 <HAL_DMA_Init+0x664>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d068      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a42      	ldr	r2, [pc, #264]	; (8005174 <HAL_DMA_Init+0x668>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d063      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a41      	ldr	r2, [pc, #260]	; (8005178 <HAL_DMA_Init+0x66c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d05e      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a3f      	ldr	r2, [pc, #252]	; (800517c <HAL_DMA_Init+0x670>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d059      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a3e      	ldr	r2, [pc, #248]	; (8005180 <HAL_DMA_Init+0x674>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d054      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a3c      	ldr	r2, [pc, #240]	; (8005184 <HAL_DMA_Init+0x678>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d04f      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3b      	ldr	r2, [pc, #236]	; (8005188 <HAL_DMA_Init+0x67c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d04a      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a39      	ldr	r2, [pc, #228]	; (800518c <HAL_DMA_Init+0x680>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d045      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a38      	ldr	r2, [pc, #224]	; (8005190 <HAL_DMA_Init+0x684>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d040      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a36      	ldr	r2, [pc, #216]	; (8005194 <HAL_DMA_Init+0x688>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d03b      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a35      	ldr	r2, [pc, #212]	; (8005198 <HAL_DMA_Init+0x68c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d036      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a33      	ldr	r2, [pc, #204]	; (800519c <HAL_DMA_Init+0x690>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d031      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a32      	ldr	r2, [pc, #200]	; (80051a0 <HAL_DMA_Init+0x694>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d02c      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a30      	ldr	r2, [pc, #192]	; (80051a4 <HAL_DMA_Init+0x698>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d027      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a14      	ldr	r2, [pc, #80]	; (800513c <HAL_DMA_Init+0x630>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a12      	ldr	r2, [pc, #72]	; (8005140 <HAL_DMA_Init+0x634>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01d      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a11      	ldr	r2, [pc, #68]	; (8005144 <HAL_DMA_Init+0x638>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <HAL_DMA_Init+0x63c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a0e      	ldr	r2, [pc, #56]	; (800514c <HAL_DMA_Init+0x640>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <HAL_DMA_Init+0x644>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0b      	ldr	r2, [pc, #44]	; (8005154 <HAL_DMA_Init+0x648>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_DMA_Init+0x62a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a09      	ldr	r2, [pc, #36]	; (8005158 <HAL_DMA_Init+0x64c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d138      	bne.n	80051a8 <HAL_DMA_Init+0x69c>
 8005136:	2301      	movs	r3, #1
 8005138:	e037      	b.n	80051aa <HAL_DMA_Init+0x69e>
 800513a:	bf00      	nop
 800513c:	58025408 	.word	0x58025408
 8005140:	5802541c 	.word	0x5802541c
 8005144:	58025430 	.word	0x58025430
 8005148:	58025444 	.word	0x58025444
 800514c:	58025458 	.word	0x58025458
 8005150:	5802546c 	.word	0x5802546c
 8005154:	58025480 	.word	0x58025480
 8005158:	58025494 	.word	0x58025494
 800515c:	fffe000f 	.word	0xfffe000f
 8005160:	a7fdabf8 	.word	0xa7fdabf8
 8005164:	cccccccd 	.word	0xcccccccd
 8005168:	40020010 	.word	0x40020010
 800516c:	40020028 	.word	0x40020028
 8005170:	40020040 	.word	0x40020040
 8005174:	40020058 	.word	0x40020058
 8005178:	40020070 	.word	0x40020070
 800517c:	40020088 	.word	0x40020088
 8005180:	400200a0 	.word	0x400200a0
 8005184:	400200b8 	.word	0x400200b8
 8005188:	40020410 	.word	0x40020410
 800518c:	40020428 	.word	0x40020428
 8005190:	40020440 	.word	0x40020440
 8005194:	40020458 	.word	0x40020458
 8005198:	40020470 	.word	0x40020470
 800519c:	40020488 	.word	0x40020488
 80051a0:	400204a0 	.word	0x400204a0
 80051a4:	400204b8 	.word	0x400204b8
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d032      	beq.n	8005214 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f002 fa7e 	bl	80076b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b80      	cmp	r3, #128	; 0x80
 80051ba:	d102      	bne.n	80051c2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051d6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d010      	beq.n	8005202 <HAL_DMA_Init+0x6f6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d80c      	bhi.n	8005202 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f002 fafb 	bl	80077e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	e008      	b.n	8005214 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e226      	b.n	8005696 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_DMA_Start_IT+0x2a>
 8005252:	2302      	movs	r3, #2
 8005254:	e21f      	b.n	8005696 <HAL_DMA_Start_IT+0x46a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	f040 820a 	bne.w	8005680 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a68      	ldr	r2, [pc, #416]	; (8005420 <HAL_DMA_Start_IT+0x1f4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a66      	ldr	r2, [pc, #408]	; (8005424 <HAL_DMA_Start_IT+0x1f8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a65      	ldr	r2, [pc, #404]	; (8005428 <HAL_DMA_Start_IT+0x1fc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a63      	ldr	r2, [pc, #396]	; (800542c <HAL_DMA_Start_IT+0x200>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a62      	ldr	r2, [pc, #392]	; (8005430 <HAL_DMA_Start_IT+0x204>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a60      	ldr	r2, [pc, #384]	; (8005434 <HAL_DMA_Start_IT+0x208>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a5f      	ldr	r2, [pc, #380]	; (8005438 <HAL_DMA_Start_IT+0x20c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a5d      	ldr	r2, [pc, #372]	; (800543c <HAL_DMA_Start_IT+0x210>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5c      	ldr	r2, [pc, #368]	; (8005440 <HAL_DMA_Start_IT+0x214>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5a      	ldr	r2, [pc, #360]	; (8005444 <HAL_DMA_Start_IT+0x218>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a59      	ldr	r2, [pc, #356]	; (8005448 <HAL_DMA_Start_IT+0x21c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a57      	ldr	r2, [pc, #348]	; (800544c <HAL_DMA_Start_IT+0x220>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a56      	ldr	r2, [pc, #344]	; (8005450 <HAL_DMA_Start_IT+0x224>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a54      	ldr	r2, [pc, #336]	; (8005454 <HAL_DMA_Start_IT+0x228>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a53      	ldr	r2, [pc, #332]	; (8005458 <HAL_DMA_Start_IT+0x22c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_Start_IT+0xee>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a51      	ldr	r2, [pc, #324]	; (800545c <HAL_DMA_Start_IT+0x230>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <HAL_DMA_Start_IT+0x100>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e007      	b.n	800533c <HAL_DMA_Start_IT+0x110>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f001 fea2 	bl	800708c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a34      	ldr	r2, [pc, #208]	; (8005420 <HAL_DMA_Start_IT+0x1f4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d04a      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a33      	ldr	r2, [pc, #204]	; (8005424 <HAL_DMA_Start_IT+0x1f8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d045      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a31      	ldr	r2, [pc, #196]	; (8005428 <HAL_DMA_Start_IT+0x1fc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d040      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a30      	ldr	r2, [pc, #192]	; (800542c <HAL_DMA_Start_IT+0x200>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d03b      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2e      	ldr	r2, [pc, #184]	; (8005430 <HAL_DMA_Start_IT+0x204>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d036      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2d      	ldr	r2, [pc, #180]	; (8005434 <HAL_DMA_Start_IT+0x208>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d031      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <HAL_DMA_Start_IT+0x20c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02c      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2a      	ldr	r2, [pc, #168]	; (800543c <HAL_DMA_Start_IT+0x210>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d027      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a28      	ldr	r2, [pc, #160]	; (8005440 <HAL_DMA_Start_IT+0x214>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a27      	ldr	r2, [pc, #156]	; (8005444 <HAL_DMA_Start_IT+0x218>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d01d      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a25      	ldr	r2, [pc, #148]	; (8005448 <HAL_DMA_Start_IT+0x21c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a24      	ldr	r2, [pc, #144]	; (800544c <HAL_DMA_Start_IT+0x220>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a22      	ldr	r2, [pc, #136]	; (8005450 <HAL_DMA_Start_IT+0x224>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_DMA_Start_IT+0x228>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1f      	ldr	r2, [pc, #124]	; (8005458 <HAL_DMA_Start_IT+0x22c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_DMA_Start_IT+0x1bc>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	; (800545c <HAL_DMA_Start_IT+0x230>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_DMA_Start_IT+0x1c0>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <HAL_DMA_Start_IT+0x1c2>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d036      	beq.n	8005460 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 021e 	bic.w	r2, r3, #30
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0216 	orr.w	r2, r2, #22
 8005404:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d03e      	beq.n	800548c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0208 	orr.w	r2, r2, #8
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e035      	b.n	800548c <HAL_DMA_Start_IT+0x260>
 8005420:	40020010 	.word	0x40020010
 8005424:	40020028 	.word	0x40020028
 8005428:	40020040 	.word	0x40020040
 800542c:	40020058 	.word	0x40020058
 8005430:	40020070 	.word	0x40020070
 8005434:	40020088 	.word	0x40020088
 8005438:	400200a0 	.word	0x400200a0
 800543c:	400200b8 	.word	0x400200b8
 8005440:	40020410 	.word	0x40020410
 8005444:	40020428 	.word	0x40020428
 8005448:	40020440 	.word	0x40020440
 800544c:	40020458 	.word	0x40020458
 8005450:	40020470 	.word	0x40020470
 8005454:	40020488 	.word	0x40020488
 8005458:	400204a0 	.word	0x400204a0
 800545c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 020e 	bic.w	r2, r3, #14
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 020a 	orr.w	r2, r2, #10
 8005472:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0204 	orr.w	r2, r2, #4
 800548a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a83      	ldr	r2, [pc, #524]	; (80056a0 <HAL_DMA_Start_IT+0x474>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d072      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a82      	ldr	r2, [pc, #520]	; (80056a4 <HAL_DMA_Start_IT+0x478>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d06d      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a80      	ldr	r2, [pc, #512]	; (80056a8 <HAL_DMA_Start_IT+0x47c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d068      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a7f      	ldr	r2, [pc, #508]	; (80056ac <HAL_DMA_Start_IT+0x480>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d063      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a7d      	ldr	r2, [pc, #500]	; (80056b0 <HAL_DMA_Start_IT+0x484>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d05e      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a7c      	ldr	r2, [pc, #496]	; (80056b4 <HAL_DMA_Start_IT+0x488>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d059      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a7a      	ldr	r2, [pc, #488]	; (80056b8 <HAL_DMA_Start_IT+0x48c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d054      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a79      	ldr	r2, [pc, #484]	; (80056bc <HAL_DMA_Start_IT+0x490>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d04f      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a77      	ldr	r2, [pc, #476]	; (80056c0 <HAL_DMA_Start_IT+0x494>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d04a      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a76      	ldr	r2, [pc, #472]	; (80056c4 <HAL_DMA_Start_IT+0x498>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d045      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a74      	ldr	r2, [pc, #464]	; (80056c8 <HAL_DMA_Start_IT+0x49c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d040      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a73      	ldr	r2, [pc, #460]	; (80056cc <HAL_DMA_Start_IT+0x4a0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d03b      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a71      	ldr	r2, [pc, #452]	; (80056d0 <HAL_DMA_Start_IT+0x4a4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d036      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a70      	ldr	r2, [pc, #448]	; (80056d4 <HAL_DMA_Start_IT+0x4a8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d031      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a6e      	ldr	r2, [pc, #440]	; (80056d8 <HAL_DMA_Start_IT+0x4ac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02c      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a6d      	ldr	r2, [pc, #436]	; (80056dc <HAL_DMA_Start_IT+0x4b0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d027      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <HAL_DMA_Start_IT+0x4b4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d022      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6a      	ldr	r2, [pc, #424]	; (80056e4 <HAL_DMA_Start_IT+0x4b8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d01d      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a68      	ldr	r2, [pc, #416]	; (80056e8 <HAL_DMA_Start_IT+0x4bc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d018      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a67      	ldr	r2, [pc, #412]	; (80056ec <HAL_DMA_Start_IT+0x4c0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_DMA_Start_IT+0x4c4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00e      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a64      	ldr	r2, [pc, #400]	; (80056f4 <HAL_DMA_Start_IT+0x4c8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d009      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a62      	ldr	r2, [pc, #392]	; (80056f8 <HAL_DMA_Start_IT+0x4cc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_DMA_Start_IT+0x350>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a61      	ldr	r2, [pc, #388]	; (80056fc <HAL_DMA_Start_IT+0x4d0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_DMA_Start_IT+0x354>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_DMA_Start_IT+0x356>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01a      	beq.n	80055bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a37      	ldr	r2, [pc, #220]	; (80056a0 <HAL_DMA_Start_IT+0x474>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d04a      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a36      	ldr	r2, [pc, #216]	; (80056a4 <HAL_DMA_Start_IT+0x478>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d045      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a34      	ldr	r2, [pc, #208]	; (80056a8 <HAL_DMA_Start_IT+0x47c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d040      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a33      	ldr	r2, [pc, #204]	; (80056ac <HAL_DMA_Start_IT+0x480>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d03b      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a31      	ldr	r2, [pc, #196]	; (80056b0 <HAL_DMA_Start_IT+0x484>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d036      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a30      	ldr	r2, [pc, #192]	; (80056b4 <HAL_DMA_Start_IT+0x488>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d031      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2e      	ldr	r2, [pc, #184]	; (80056b8 <HAL_DMA_Start_IT+0x48c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d02c      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a2d      	ldr	r2, [pc, #180]	; (80056bc <HAL_DMA_Start_IT+0x490>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d027      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a2b      	ldr	r2, [pc, #172]	; (80056c0 <HAL_DMA_Start_IT+0x494>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d022      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <HAL_DMA_Start_IT+0x498>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d01d      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a28      	ldr	r2, [pc, #160]	; (80056c8 <HAL_DMA_Start_IT+0x49c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d018      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a27      	ldr	r2, [pc, #156]	; (80056cc <HAL_DMA_Start_IT+0x4a0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d013      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <HAL_DMA_Start_IT+0x4a4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00e      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a24      	ldr	r2, [pc, #144]	; (80056d4 <HAL_DMA_Start_IT+0x4a8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d009      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <HAL_DMA_Start_IT+0x4ac>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_DMA_Start_IT+0x430>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a21      	ldr	r2, [pc, #132]	; (80056dc <HAL_DMA_Start_IT+0x4b0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d108      	bne.n	800566e <HAL_DMA_Start_IT+0x442>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e012      	b.n	8005694 <HAL_DMA_Start_IT+0x468>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0201 	orr.w	r2, r2, #1
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e009      	b.n	8005694 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005686:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005694:	7dfb      	ldrb	r3, [r7, #23]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40020010 	.word	0x40020010
 80056a4:	40020028 	.word	0x40020028
 80056a8:	40020040 	.word	0x40020040
 80056ac:	40020058 	.word	0x40020058
 80056b0:	40020070 	.word	0x40020070
 80056b4:	40020088 	.word	0x40020088
 80056b8:	400200a0 	.word	0x400200a0
 80056bc:	400200b8 	.word	0x400200b8
 80056c0:	40020410 	.word	0x40020410
 80056c4:	40020428 	.word	0x40020428
 80056c8:	40020440 	.word	0x40020440
 80056cc:	40020458 	.word	0x40020458
 80056d0:	40020470 	.word	0x40020470
 80056d4:	40020488 	.word	0x40020488
 80056d8:	400204a0 	.word	0x400204a0
 80056dc:	400204b8 	.word	0x400204b8
 80056e0:	58025408 	.word	0x58025408
 80056e4:	5802541c 	.word	0x5802541c
 80056e8:	58025430 	.word	0x58025430
 80056ec:	58025444 	.word	0x58025444
 80056f0:	58025458 	.word	0x58025458
 80056f4:	5802546c 	.word	0x5802546c
 80056f8:	58025480 	.word	0x58025480
 80056fc:	58025494 	.word	0x58025494

08005700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005708:	f7fe fdf2 	bl	80042f0 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e2dc      	b.n	8005cd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d008      	beq.n	8005736 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e2cd      	b.n	8005cd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a76      	ldr	r2, [pc, #472]	; (8005914 <HAL_DMA_Abort+0x214>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d04a      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a74      	ldr	r2, [pc, #464]	; (8005918 <HAL_DMA_Abort+0x218>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d045      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a73      	ldr	r2, [pc, #460]	; (800591c <HAL_DMA_Abort+0x21c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d040      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a71      	ldr	r2, [pc, #452]	; (8005920 <HAL_DMA_Abort+0x220>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d03b      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a70      	ldr	r2, [pc, #448]	; (8005924 <HAL_DMA_Abort+0x224>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d036      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a6e      	ldr	r2, [pc, #440]	; (8005928 <HAL_DMA_Abort+0x228>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d031      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a6d      	ldr	r2, [pc, #436]	; (800592c <HAL_DMA_Abort+0x22c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d02c      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6b      	ldr	r2, [pc, #428]	; (8005930 <HAL_DMA_Abort+0x230>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d027      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a6a      	ldr	r2, [pc, #424]	; (8005934 <HAL_DMA_Abort+0x234>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d022      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a68      	ldr	r2, [pc, #416]	; (8005938 <HAL_DMA_Abort+0x238>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01d      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a67      	ldr	r2, [pc, #412]	; (800593c <HAL_DMA_Abort+0x23c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d018      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a65      	ldr	r2, [pc, #404]	; (8005940 <HAL_DMA_Abort+0x240>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a64      	ldr	r2, [pc, #400]	; (8005944 <HAL_DMA_Abort+0x244>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a62      	ldr	r2, [pc, #392]	; (8005948 <HAL_DMA_Abort+0x248>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a61      	ldr	r2, [pc, #388]	; (800594c <HAL_DMA_Abort+0x24c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <HAL_DMA_Abort+0xd6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a5f      	ldr	r2, [pc, #380]	; (8005950 <HAL_DMA_Abort+0x250>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d101      	bne.n	80057da <HAL_DMA_Abort+0xda>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <HAL_DMA_Abort+0xdc>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d013      	beq.n	8005808 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 021e 	bic.w	r2, r2, #30
 80057ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e00a      	b.n	800581e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 020e 	bic.w	r2, r2, #14
 8005816:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <HAL_DMA_Abort+0x214>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d072      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a3a      	ldr	r2, [pc, #232]	; (8005918 <HAL_DMA_Abort+0x218>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d06d      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a39      	ldr	r2, [pc, #228]	; (800591c <HAL_DMA_Abort+0x21c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d068      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a37      	ldr	r2, [pc, #220]	; (8005920 <HAL_DMA_Abort+0x220>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d063      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a36      	ldr	r2, [pc, #216]	; (8005924 <HAL_DMA_Abort+0x224>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d05e      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a34      	ldr	r2, [pc, #208]	; (8005928 <HAL_DMA_Abort+0x228>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d059      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a33      	ldr	r2, [pc, #204]	; (800592c <HAL_DMA_Abort+0x22c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d054      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a31      	ldr	r2, [pc, #196]	; (8005930 <HAL_DMA_Abort+0x230>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d04f      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a30      	ldr	r2, [pc, #192]	; (8005934 <HAL_DMA_Abort+0x234>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d04a      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2e      	ldr	r2, [pc, #184]	; (8005938 <HAL_DMA_Abort+0x238>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d045      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2d      	ldr	r2, [pc, #180]	; (800593c <HAL_DMA_Abort+0x23c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d040      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2b      	ldr	r2, [pc, #172]	; (8005940 <HAL_DMA_Abort+0x240>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d03b      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2a      	ldr	r2, [pc, #168]	; (8005944 <HAL_DMA_Abort+0x244>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d036      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <HAL_DMA_Abort+0x248>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d031      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a27      	ldr	r2, [pc, #156]	; (800594c <HAL_DMA_Abort+0x24c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d02c      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a25      	ldr	r2, [pc, #148]	; (8005950 <HAL_DMA_Abort+0x250>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d027      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a24      	ldr	r2, [pc, #144]	; (8005954 <HAL_DMA_Abort+0x254>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d022      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a22      	ldr	r2, [pc, #136]	; (8005958 <HAL_DMA_Abort+0x258>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01d      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a21      	ldr	r2, [pc, #132]	; (800595c <HAL_DMA_Abort+0x25c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d018      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <HAL_DMA_Abort+0x260>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <HAL_DMA_Abort+0x264>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <HAL_DMA_Abort+0x268>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	; (800596c <HAL_DMA_Abort+0x26c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_DMA_Abort+0x20e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <HAL_DMA_Abort+0x270>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d132      	bne.n	8005974 <HAL_DMA_Abort+0x274>
 800590e:	2301      	movs	r3, #1
 8005910:	e031      	b.n	8005976 <HAL_DMA_Abort+0x276>
 8005912:	bf00      	nop
 8005914:	40020010 	.word	0x40020010
 8005918:	40020028 	.word	0x40020028
 800591c:	40020040 	.word	0x40020040
 8005920:	40020058 	.word	0x40020058
 8005924:	40020070 	.word	0x40020070
 8005928:	40020088 	.word	0x40020088
 800592c:	400200a0 	.word	0x400200a0
 8005930:	400200b8 	.word	0x400200b8
 8005934:	40020410 	.word	0x40020410
 8005938:	40020428 	.word	0x40020428
 800593c:	40020440 	.word	0x40020440
 8005940:	40020458 	.word	0x40020458
 8005944:	40020470 	.word	0x40020470
 8005948:	40020488 	.word	0x40020488
 800594c:	400204a0 	.word	0x400204a0
 8005950:	400204b8 	.word	0x400204b8
 8005954:	58025408 	.word	0x58025408
 8005958:	5802541c 	.word	0x5802541c
 800595c:	58025430 	.word	0x58025430
 8005960:	58025444 	.word	0x58025444
 8005964:	58025458 	.word	0x58025458
 8005968:	5802546c 	.word	0x5802546c
 800596c:	58025480 	.word	0x58025480
 8005970:	58025494 	.word	0x58025494
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005988:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a6d      	ldr	r2, [pc, #436]	; (8005b44 <HAL_DMA_Abort+0x444>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d04a      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a6b      	ldr	r2, [pc, #428]	; (8005b48 <HAL_DMA_Abort+0x448>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d045      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6a      	ldr	r2, [pc, #424]	; (8005b4c <HAL_DMA_Abort+0x44c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d040      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a68      	ldr	r2, [pc, #416]	; (8005b50 <HAL_DMA_Abort+0x450>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a67      	ldr	r2, [pc, #412]	; (8005b54 <HAL_DMA_Abort+0x454>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d036      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a65      	ldr	r2, [pc, #404]	; (8005b58 <HAL_DMA_Abort+0x458>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d031      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a64      	ldr	r2, [pc, #400]	; (8005b5c <HAL_DMA_Abort+0x45c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a62      	ldr	r2, [pc, #392]	; (8005b60 <HAL_DMA_Abort+0x460>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d027      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a61      	ldr	r2, [pc, #388]	; (8005b64 <HAL_DMA_Abort+0x464>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a5f      	ldr	r2, [pc, #380]	; (8005b68 <HAL_DMA_Abort+0x468>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a5e      	ldr	r2, [pc, #376]	; (8005b6c <HAL_DMA_Abort+0x46c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a5c      	ldr	r2, [pc, #368]	; (8005b70 <HAL_DMA_Abort+0x470>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5b      	ldr	r2, [pc, #364]	; (8005b74 <HAL_DMA_Abort+0x474>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a59      	ldr	r2, [pc, #356]	; (8005b78 <HAL_DMA_Abort+0x478>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a58      	ldr	r2, [pc, #352]	; (8005b7c <HAL_DMA_Abort+0x47c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_Abort+0x32a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a56      	ldr	r2, [pc, #344]	; (8005b80 <HAL_DMA_Abort+0x480>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <HAL_DMA_Abort+0x33c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <HAL_DMA_Abort+0x34c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a4c:	e013      	b.n	8005a76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a4e:	f7fe fc4f 	bl	80042f0 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d90c      	bls.n	8005a76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2203      	movs	r2, #3
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e12d      	b.n	8005cd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e5      	bne.n	8005a4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <HAL_DMA_Abort+0x444>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d04a      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	; (8005b48 <HAL_DMA_Abort+0x448>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d045      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <HAL_DMA_Abort+0x44c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d040      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <HAL_DMA_Abort+0x450>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d03b      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <HAL_DMA_Abort+0x454>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d036      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a27      	ldr	r2, [pc, #156]	; (8005b58 <HAL_DMA_Abort+0x458>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d031      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <HAL_DMA_Abort+0x45c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d02c      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <HAL_DMA_Abort+0x460>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d027      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a23      	ldr	r2, [pc, #140]	; (8005b64 <HAL_DMA_Abort+0x464>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <HAL_DMA_Abort+0x468>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01d      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a20      	ldr	r2, [pc, #128]	; (8005b6c <HAL_DMA_Abort+0x46c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <HAL_DMA_Abort+0x470>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <HAL_DMA_Abort+0x474>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <HAL_DMA_Abort+0x478>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <HAL_DMA_Abort+0x47c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_DMA_Abort+0x422>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a18      	ldr	r2, [pc, #96]	; (8005b80 <HAL_DMA_Abort+0x480>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d101      	bne.n	8005b26 <HAL_DMA_Abort+0x426>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <HAL_DMA_Abort+0x428>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d02b      	beq.n	8005b84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	223f      	movs	r2, #63	; 0x3f
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	609a      	str	r2, [r3, #8]
 8005b42:	e02a      	b.n	8005b9a <HAL_DMA_Abort+0x49a>
 8005b44:	40020010 	.word	0x40020010
 8005b48:	40020028 	.word	0x40020028
 8005b4c:	40020040 	.word	0x40020040
 8005b50:	40020058 	.word	0x40020058
 8005b54:	40020070 	.word	0x40020070
 8005b58:	40020088 	.word	0x40020088
 8005b5c:	400200a0 	.word	0x400200a0
 8005b60:	400200b8 	.word	0x400200b8
 8005b64:	40020410 	.word	0x40020410
 8005b68:	40020428 	.word	0x40020428
 8005b6c:	40020440 	.word	0x40020440
 8005b70:	40020458 	.word	0x40020458
 8005b74:	40020470 	.word	0x40020470
 8005b78:	40020488 	.word	0x40020488
 8005b7c:	400204a0 	.word	0x400204a0
 8005b80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2201      	movs	r2, #1
 8005b94:	409a      	lsls	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a4f      	ldr	r2, [pc, #316]	; (8005cdc <HAL_DMA_Abort+0x5dc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d072      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a4d      	ldr	r2, [pc, #308]	; (8005ce0 <HAL_DMA_Abort+0x5e0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d06d      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4c      	ldr	r2, [pc, #304]	; (8005ce4 <HAL_DMA_Abort+0x5e4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d068      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a4a      	ldr	r2, [pc, #296]	; (8005ce8 <HAL_DMA_Abort+0x5e8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d063      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a49      	ldr	r2, [pc, #292]	; (8005cec <HAL_DMA_Abort+0x5ec>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d05e      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a47      	ldr	r2, [pc, #284]	; (8005cf0 <HAL_DMA_Abort+0x5f0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d059      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a46      	ldr	r2, [pc, #280]	; (8005cf4 <HAL_DMA_Abort+0x5f4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d054      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a44      	ldr	r2, [pc, #272]	; (8005cf8 <HAL_DMA_Abort+0x5f8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04f      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a43      	ldr	r2, [pc, #268]	; (8005cfc <HAL_DMA_Abort+0x5fc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d04a      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a41      	ldr	r2, [pc, #260]	; (8005d00 <HAL_DMA_Abort+0x600>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d045      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a40      	ldr	r2, [pc, #256]	; (8005d04 <HAL_DMA_Abort+0x604>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d040      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a3e      	ldr	r2, [pc, #248]	; (8005d08 <HAL_DMA_Abort+0x608>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d03b      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a3d      	ldr	r2, [pc, #244]	; (8005d0c <HAL_DMA_Abort+0x60c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d036      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3b      	ldr	r2, [pc, #236]	; (8005d10 <HAL_DMA_Abort+0x610>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d031      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3a      	ldr	r2, [pc, #232]	; (8005d14 <HAL_DMA_Abort+0x614>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d02c      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a38      	ldr	r2, [pc, #224]	; (8005d18 <HAL_DMA_Abort+0x618>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d027      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <HAL_DMA_Abort+0x61c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a35      	ldr	r2, [pc, #212]	; (8005d20 <HAL_DMA_Abort+0x620>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01d      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a34      	ldr	r2, [pc, #208]	; (8005d24 <HAL_DMA_Abort+0x624>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d018      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a32      	ldr	r2, [pc, #200]	; (8005d28 <HAL_DMA_Abort+0x628>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a31      	ldr	r2, [pc, #196]	; (8005d2c <HAL_DMA_Abort+0x62c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2f      	ldr	r2, [pc, #188]	; (8005d30 <HAL_DMA_Abort+0x630>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2e      	ldr	r2, [pc, #184]	; (8005d34 <HAL_DMA_Abort+0x634>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_DMA_Abort+0x58a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <HAL_DMA_Abort+0x638>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <HAL_DMA_Abort+0x58e>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_DMA_Abort+0x590>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d015      	beq.n	8005cc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cb4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	58025408 	.word	0x58025408
 8005d20:	5802541c 	.word	0x5802541c
 8005d24:	58025430 	.word	0x58025430
 8005d28:	58025444 	.word	0x58025444
 8005d2c:	58025458 	.word	0x58025458
 8005d30:	5802546c 	.word	0x5802546c
 8005d34:	58025480 	.word	0x58025480
 8005d38:	58025494 	.word	0x58025494

08005d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e237      	b.n	80061be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d004      	beq.n	8005d64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2280      	movs	r2, #128	; 0x80
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e22c      	b.n	80061be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a5c      	ldr	r2, [pc, #368]	; (8005edc <HAL_DMA_Abort_IT+0x1a0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d04a      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a5b      	ldr	r2, [pc, #364]	; (8005ee0 <HAL_DMA_Abort_IT+0x1a4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d045      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a59      	ldr	r2, [pc, #356]	; (8005ee4 <HAL_DMA_Abort_IT+0x1a8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d040      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a58      	ldr	r2, [pc, #352]	; (8005ee8 <HAL_DMA_Abort_IT+0x1ac>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d03b      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a56      	ldr	r2, [pc, #344]	; (8005eec <HAL_DMA_Abort_IT+0x1b0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d036      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a55      	ldr	r2, [pc, #340]	; (8005ef0 <HAL_DMA_Abort_IT+0x1b4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d031      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a53      	ldr	r2, [pc, #332]	; (8005ef4 <HAL_DMA_Abort_IT+0x1b8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d02c      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <HAL_DMA_Abort_IT+0x1bc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d027      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a50      	ldr	r2, [pc, #320]	; (8005efc <HAL_DMA_Abort_IT+0x1c0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d022      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4f      	ldr	r2, [pc, #316]	; (8005f00 <HAL_DMA_Abort_IT+0x1c4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d01d      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a4d      	ldr	r2, [pc, #308]	; (8005f04 <HAL_DMA_Abort_IT+0x1c8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d018      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4c      	ldr	r2, [pc, #304]	; (8005f08 <HAL_DMA_Abort_IT+0x1cc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4a      	ldr	r2, [pc, #296]	; (8005f0c <HAL_DMA_Abort_IT+0x1d0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00e      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a49      	ldr	r2, [pc, #292]	; (8005f10 <HAL_DMA_Abort_IT+0x1d4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a47      	ldr	r2, [pc, #284]	; (8005f14 <HAL_DMA_Abort_IT+0x1d8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_DMA_Abort_IT+0xc8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a46      	ldr	r2, [pc, #280]	; (8005f18 <HAL_DMA_Abort_IT+0x1dc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_DMA_Abort_IT+0xcc>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_DMA_Abort_IT+0xce>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8086 	beq.w	8005f1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2204      	movs	r2, #4
 8005e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <HAL_DMA_Abort_IT+0x1a0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d04a      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a2e      	ldr	r2, [pc, #184]	; (8005ee0 <HAL_DMA_Abort_IT+0x1a4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d045      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <HAL_DMA_Abort_IT+0x1a8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d040      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <HAL_DMA_Abort_IT+0x1ac>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d03b      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <HAL_DMA_Abort_IT+0x1b0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d036      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <HAL_DMA_Abort_IT+0x1b4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d031      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a26      	ldr	r2, [pc, #152]	; (8005ef4 <HAL_DMA_Abort_IT+0x1b8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d02c      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <HAL_DMA_Abort_IT+0x1bc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d027      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a23      	ldr	r2, [pc, #140]	; (8005efc <HAL_DMA_Abort_IT+0x1c0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d022      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <HAL_DMA_Abort_IT+0x1c4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d01d      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <HAL_DMA_Abort_IT+0x1c8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d018      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <HAL_DMA_Abort_IT+0x1cc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_DMA_Abort_IT+0x1d0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_DMA_Abort_IT+0x1d4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <HAL_DMA_Abort_IT+0x1d8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x17c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <HAL_DMA_Abort_IT+0x1dc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d108      	bne.n	8005eca <HAL_DMA_Abort_IT+0x18e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	e178      	b.n	80061bc <HAL_DMA_Abort_IT+0x480>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e16f      	b.n	80061bc <HAL_DMA_Abort_IT+0x480>
 8005edc:	40020010 	.word	0x40020010
 8005ee0:	40020028 	.word	0x40020028
 8005ee4:	40020040 	.word	0x40020040
 8005ee8:	40020058 	.word	0x40020058
 8005eec:	40020070 	.word	0x40020070
 8005ef0:	40020088 	.word	0x40020088
 8005ef4:	400200a0 	.word	0x400200a0
 8005ef8:	400200b8 	.word	0x400200b8
 8005efc:	40020410 	.word	0x40020410
 8005f00:	40020428 	.word	0x40020428
 8005f04:	40020440 	.word	0x40020440
 8005f08:	40020458 	.word	0x40020458
 8005f0c:	40020470 	.word	0x40020470
 8005f10:	40020488 	.word	0x40020488
 8005f14:	400204a0 	.word	0x400204a0
 8005f18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 020e 	bic.w	r2, r2, #14
 8005f2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a6c      	ldr	r2, [pc, #432]	; (80060e4 <HAL_DMA_Abort_IT+0x3a8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d04a      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a6b      	ldr	r2, [pc, #428]	; (80060e8 <HAL_DMA_Abort_IT+0x3ac>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d045      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a69      	ldr	r2, [pc, #420]	; (80060ec <HAL_DMA_Abort_IT+0x3b0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d040      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a68      	ldr	r2, [pc, #416]	; (80060f0 <HAL_DMA_Abort_IT+0x3b4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d03b      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a66      	ldr	r2, [pc, #408]	; (80060f4 <HAL_DMA_Abort_IT+0x3b8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d036      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a65      	ldr	r2, [pc, #404]	; (80060f8 <HAL_DMA_Abort_IT+0x3bc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d031      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a63      	ldr	r2, [pc, #396]	; (80060fc <HAL_DMA_Abort_IT+0x3c0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d02c      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a62      	ldr	r2, [pc, #392]	; (8006100 <HAL_DMA_Abort_IT+0x3c4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d027      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a60      	ldr	r2, [pc, #384]	; (8006104 <HAL_DMA_Abort_IT+0x3c8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5f      	ldr	r2, [pc, #380]	; (8006108 <HAL_DMA_Abort_IT+0x3cc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a5d      	ldr	r2, [pc, #372]	; (800610c <HAL_DMA_Abort_IT+0x3d0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a5c      	ldr	r2, [pc, #368]	; (8006110 <HAL_DMA_Abort_IT+0x3d4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5a      	ldr	r2, [pc, #360]	; (8006114 <HAL_DMA_Abort_IT+0x3d8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a59      	ldr	r2, [pc, #356]	; (8006118 <HAL_DMA_Abort_IT+0x3dc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a57      	ldr	r2, [pc, #348]	; (800611c <HAL_DMA_Abort_IT+0x3e0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x290>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	; (8006120 <HAL_DMA_Abort_IT+0x3e4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d108      	bne.n	8005fde <HAL_DMA_Abort_IT+0x2a2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e007      	b.n	8005fee <HAL_DMA_Abort_IT+0x2b2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3c      	ldr	r2, [pc, #240]	; (80060e4 <HAL_DMA_Abort_IT+0x3a8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d072      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3a      	ldr	r2, [pc, #232]	; (80060e8 <HAL_DMA_Abort_IT+0x3ac>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d06d      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a39      	ldr	r2, [pc, #228]	; (80060ec <HAL_DMA_Abort_IT+0x3b0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d068      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a37      	ldr	r2, [pc, #220]	; (80060f0 <HAL_DMA_Abort_IT+0x3b4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d063      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a36      	ldr	r2, [pc, #216]	; (80060f4 <HAL_DMA_Abort_IT+0x3b8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d05e      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a34      	ldr	r2, [pc, #208]	; (80060f8 <HAL_DMA_Abort_IT+0x3bc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d059      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a33      	ldr	r2, [pc, #204]	; (80060fc <HAL_DMA_Abort_IT+0x3c0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d054      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a31      	ldr	r2, [pc, #196]	; (8006100 <HAL_DMA_Abort_IT+0x3c4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d04f      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a30      	ldr	r2, [pc, #192]	; (8006104 <HAL_DMA_Abort_IT+0x3c8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d04a      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2e      	ldr	r2, [pc, #184]	; (8006108 <HAL_DMA_Abort_IT+0x3cc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d045      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2d      	ldr	r2, [pc, #180]	; (800610c <HAL_DMA_Abort_IT+0x3d0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d040      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <HAL_DMA_Abort_IT+0x3d4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d03b      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <HAL_DMA_Abort_IT+0x3d8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d036      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <HAL_DMA_Abort_IT+0x3dc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d031      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a27      	ldr	r2, [pc, #156]	; (800611c <HAL_DMA_Abort_IT+0x3e0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d02c      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <HAL_DMA_Abort_IT+0x3e4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d027      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a24      	ldr	r2, [pc, #144]	; (8006124 <HAL_DMA_Abort_IT+0x3e8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a22      	ldr	r2, [pc, #136]	; (8006128 <HAL_DMA_Abort_IT+0x3ec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01d      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <HAL_DMA_Abort_IT+0x3f0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <HAL_DMA_Abort_IT+0x3f4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1e      	ldr	r2, [pc, #120]	; (8006134 <HAL_DMA_Abort_IT+0x3f8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <HAL_DMA_Abort_IT+0x3fc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_DMA_Abort_IT+0x400>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_DMA_Abort_IT+0x3a2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a19      	ldr	r2, [pc, #100]	; (8006140 <HAL_DMA_Abort_IT+0x404>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d132      	bne.n	8006144 <HAL_DMA_Abort_IT+0x408>
 80060de:	2301      	movs	r3, #1
 80060e0:	e031      	b.n	8006146 <HAL_DMA_Abort_IT+0x40a>
 80060e2:	bf00      	nop
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
 8006124:	58025408 	.word	0x58025408
 8006128:	5802541c 	.word	0x5802541c
 800612c:	58025430 	.word	0x58025430
 8006130:	58025444 	.word	0x58025444
 8006134:	58025458 	.word	0x58025458
 8006138:	5802546c 	.word	0x5802546c
 800613c:	58025480 	.word	0x58025480
 8006140:	58025494 	.word	0x58025494
 8006144:	2300      	movs	r3, #0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d028      	beq.n	800619c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006158:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006178:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00c      	beq.n	800619c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006190:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800619a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop

080061c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061d4:	4b67      	ldr	r3, [pc, #412]	; (8006374 <HAL_DMA_IRQHandler+0x1ac>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a67      	ldr	r2, [pc, #412]	; (8006378 <HAL_DMA_IRQHandler+0x1b0>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	0a9b      	lsrs	r3, r3, #10
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5f      	ldr	r2, [pc, #380]	; (800637c <HAL_DMA_IRQHandler+0x1b4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d04a      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5d      	ldr	r2, [pc, #372]	; (8006380 <HAL_DMA_IRQHandler+0x1b8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d045      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5c      	ldr	r2, [pc, #368]	; (8006384 <HAL_DMA_IRQHandler+0x1bc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d040      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5a      	ldr	r2, [pc, #360]	; (8006388 <HAL_DMA_IRQHandler+0x1c0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d03b      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a59      	ldr	r2, [pc, #356]	; (800638c <HAL_DMA_IRQHandler+0x1c4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d036      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a57      	ldr	r2, [pc, #348]	; (8006390 <HAL_DMA_IRQHandler+0x1c8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d031      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a56      	ldr	r2, [pc, #344]	; (8006394 <HAL_DMA_IRQHandler+0x1cc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d02c      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a54      	ldr	r2, [pc, #336]	; (8006398 <HAL_DMA_IRQHandler+0x1d0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d027      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a53      	ldr	r2, [pc, #332]	; (800639c <HAL_DMA_IRQHandler+0x1d4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a51      	ldr	r2, [pc, #324]	; (80063a0 <HAL_DMA_IRQHandler+0x1d8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a50      	ldr	r2, [pc, #320]	; (80063a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4e      	ldr	r2, [pc, #312]	; (80063a8 <HAL_DMA_IRQHandler+0x1e0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a4d      	ldr	r2, [pc, #308]	; (80063ac <HAL_DMA_IRQHandler+0x1e4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4b      	ldr	r2, [pc, #300]	; (80063b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4a      	ldr	r2, [pc, #296]	; (80063b4 <HAL_DMA_IRQHandler+0x1ec>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_DMA_IRQHandler+0xd2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a48      	ldr	r2, [pc, #288]	; (80063b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <HAL_DMA_IRQHandler+0xd6>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <HAL_DMA_IRQHandler+0xd8>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 842b 	beq.w	8006afc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2208      	movs	r2, #8
 80062b0:	409a      	lsls	r2, r3
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80a2 	beq.w	8006400 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2e      	ldr	r2, [pc, #184]	; (800637c <HAL_DMA_IRQHandler+0x1b4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04a      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2d      	ldr	r2, [pc, #180]	; (8006380 <HAL_DMA_IRQHandler+0x1b8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d045      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2b      	ldr	r2, [pc, #172]	; (8006384 <HAL_DMA_IRQHandler+0x1bc>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d040      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2a      	ldr	r2, [pc, #168]	; (8006388 <HAL_DMA_IRQHandler+0x1c0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d03b      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a28      	ldr	r2, [pc, #160]	; (800638c <HAL_DMA_IRQHandler+0x1c4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d036      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a27      	ldr	r2, [pc, #156]	; (8006390 <HAL_DMA_IRQHandler+0x1c8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d031      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a25      	ldr	r2, [pc, #148]	; (8006394 <HAL_DMA_IRQHandler+0x1cc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02c      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a24      	ldr	r2, [pc, #144]	; (8006398 <HAL_DMA_IRQHandler+0x1d0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d027      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a22      	ldr	r2, [pc, #136]	; (800639c <HAL_DMA_IRQHandler+0x1d4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a21      	ldr	r2, [pc, #132]	; (80063a0 <HAL_DMA_IRQHandler+0x1d8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01d      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a1f      	ldr	r2, [pc, #124]	; (80063a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1e      	ldr	r2, [pc, #120]	; (80063a8 <HAL_DMA_IRQHandler+0x1e0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <HAL_DMA_IRQHandler+0x1e4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1b      	ldr	r2, [pc, #108]	; (80063b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <HAL_DMA_IRQHandler+0x1ec>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_DMA_IRQHandler+0x194>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d12f      	bne.n	80063bc <HAL_DMA_IRQHandler+0x1f4>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	e02e      	b.n	80063d0 <HAL_DMA_IRQHandler+0x208>
 8006372:	bf00      	nop
 8006374:	24000044 	.word	0x24000044
 8006378:	1b4e81b5 	.word	0x1b4e81b5
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bf14      	ite	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	2300      	moveq	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d015      	beq.n	8006400 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	2208      	movs	r2, #8
 80063ee:	409a      	lsls	r2, r3
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f8:	f043 0201 	orr.w	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	fa22 f303 	lsr.w	r3, r2, r3
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d06e      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a69      	ldr	r2, [pc, #420]	; (80065c0 <HAL_DMA_IRQHandler+0x3f8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a67      	ldr	r2, [pc, #412]	; (80065c4 <HAL_DMA_IRQHandler+0x3fc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a66      	ldr	r2, [pc, #408]	; (80065c8 <HAL_DMA_IRQHandler+0x400>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a64      	ldr	r2, [pc, #400]	; (80065cc <HAL_DMA_IRQHandler+0x404>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a63      	ldr	r2, [pc, #396]	; (80065d0 <HAL_DMA_IRQHandler+0x408>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a61      	ldr	r2, [pc, #388]	; (80065d4 <HAL_DMA_IRQHandler+0x40c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a60      	ldr	r2, [pc, #384]	; (80065d8 <HAL_DMA_IRQHandler+0x410>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5e      	ldr	r2, [pc, #376]	; (80065dc <HAL_DMA_IRQHandler+0x414>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a5d      	ldr	r2, [pc, #372]	; (80065e0 <HAL_DMA_IRQHandler+0x418>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5b      	ldr	r2, [pc, #364]	; (80065e4 <HAL_DMA_IRQHandler+0x41c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a5a      	ldr	r2, [pc, #360]	; (80065e8 <HAL_DMA_IRQHandler+0x420>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a58      	ldr	r2, [pc, #352]	; (80065ec <HAL_DMA_IRQHandler+0x424>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a57      	ldr	r2, [pc, #348]	; (80065f0 <HAL_DMA_IRQHandler+0x428>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a55      	ldr	r2, [pc, #340]	; (80065f4 <HAL_DMA_IRQHandler+0x42c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a54      	ldr	r2, [pc, #336]	; (80065f8 <HAL_DMA_IRQHandler+0x430>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x2ee>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a52      	ldr	r2, [pc, #328]	; (80065fc <HAL_DMA_IRQHandler+0x434>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10a      	bne.n	80064cc <HAL_DMA_IRQHandler+0x304>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf14      	ite	ne
 80064c4:	2301      	movne	r3, #1
 80064c6:	2300      	moveq	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	e003      	b.n	80064d4 <HAL_DMA_IRQHandler+0x30c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	f043 0202 	orr.w	r2, r3, #2
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2204      	movs	r2, #4
 80064fe:	409a      	lsls	r2, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 808f 	beq.w	8006628 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2c      	ldr	r2, [pc, #176]	; (80065c0 <HAL_DMA_IRQHandler+0x3f8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04a      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <HAL_DMA_IRQHandler+0x3fc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d045      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <HAL_DMA_IRQHandler+0x400>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d040      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a27      	ldr	r2, [pc, #156]	; (80065cc <HAL_DMA_IRQHandler+0x404>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d03b      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a26      	ldr	r2, [pc, #152]	; (80065d0 <HAL_DMA_IRQHandler+0x408>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d036      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a24      	ldr	r2, [pc, #144]	; (80065d4 <HAL_DMA_IRQHandler+0x40c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d031      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <HAL_DMA_IRQHandler+0x410>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d02c      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a21      	ldr	r2, [pc, #132]	; (80065dc <HAL_DMA_IRQHandler+0x414>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d027      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a20      	ldr	r2, [pc, #128]	; (80065e0 <HAL_DMA_IRQHandler+0x418>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1e      	ldr	r2, [pc, #120]	; (80065e4 <HAL_DMA_IRQHandler+0x41c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01d      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <HAL_DMA_IRQHandler+0x420>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d018      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1b      	ldr	r2, [pc, #108]	; (80065ec <HAL_DMA_IRQHandler+0x424>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1a      	ldr	r2, [pc, #104]	; (80065f0 <HAL_DMA_IRQHandler+0x428>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <HAL_DMA_IRQHandler+0x42c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <HAL_DMA_IRQHandler+0x430>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_DMA_IRQHandler+0x3e2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a15      	ldr	r2, [pc, #84]	; (80065fc <HAL_DMA_IRQHandler+0x434>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d12a      	bne.n	8006600 <HAL_DMA_IRQHandler+0x438>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	e023      	b.n	8006608 <HAL_DMA_IRQHandler+0x440>
 80065c0:	40020010 	.word	0x40020010
 80065c4:	40020028 	.word	0x40020028
 80065c8:	40020040 	.word	0x40020040
 80065cc:	40020058 	.word	0x40020058
 80065d0:	40020070 	.word	0x40020070
 80065d4:	40020088 	.word	0x40020088
 80065d8:	400200a0 	.word	0x400200a0
 80065dc:	400200b8 	.word	0x400200b8
 80065e0:	40020410 	.word	0x40020410
 80065e4:	40020428 	.word	0x40020428
 80065e8:	40020440 	.word	0x40020440
 80065ec:	40020458 	.word	0x40020458
 80065f0:	40020470 	.word	0x40020470
 80065f4:	40020488 	.word	0x40020488
 80065f8:	400204a0 	.word	0x400204a0
 80065fc:	400204b8 	.word	0x400204b8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00d      	beq.n	8006628 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2204      	movs	r2, #4
 8006616:	409a      	lsls	r2, r3
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	f043 0204 	orr.w	r2, r3, #4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2210      	movs	r2, #16
 8006632:	409a      	lsls	r2, r3
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 80a6 	beq.w	800678a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a85      	ldr	r2, [pc, #532]	; (8006858 <HAL_DMA_IRQHandler+0x690>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d04a      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a83      	ldr	r2, [pc, #524]	; (800685c <HAL_DMA_IRQHandler+0x694>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d045      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a82      	ldr	r2, [pc, #520]	; (8006860 <HAL_DMA_IRQHandler+0x698>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d040      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a80      	ldr	r2, [pc, #512]	; (8006864 <HAL_DMA_IRQHandler+0x69c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d03b      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a7f      	ldr	r2, [pc, #508]	; (8006868 <HAL_DMA_IRQHandler+0x6a0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d036      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a7d      	ldr	r2, [pc, #500]	; (800686c <HAL_DMA_IRQHandler+0x6a4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d031      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7c      	ldr	r2, [pc, #496]	; (8006870 <HAL_DMA_IRQHandler+0x6a8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d02c      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a7a      	ldr	r2, [pc, #488]	; (8006874 <HAL_DMA_IRQHandler+0x6ac>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d027      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a79      	ldr	r2, [pc, #484]	; (8006878 <HAL_DMA_IRQHandler+0x6b0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d022      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a77      	ldr	r2, [pc, #476]	; (800687c <HAL_DMA_IRQHandler+0x6b4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01d      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a76      	ldr	r2, [pc, #472]	; (8006880 <HAL_DMA_IRQHandler+0x6b8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d018      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a74      	ldr	r2, [pc, #464]	; (8006884 <HAL_DMA_IRQHandler+0x6bc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a73      	ldr	r2, [pc, #460]	; (8006888 <HAL_DMA_IRQHandler+0x6c0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00e      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a71      	ldr	r2, [pc, #452]	; (800688c <HAL_DMA_IRQHandler+0x6c4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d009      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a70      	ldr	r2, [pc, #448]	; (8006890 <HAL_DMA_IRQHandler+0x6c8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d004      	beq.n	80066de <HAL_DMA_IRQHandler+0x516>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6e      	ldr	r2, [pc, #440]	; (8006894 <HAL_DMA_IRQHandler+0x6cc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d10a      	bne.n	80066f4 <HAL_DMA_IRQHandler+0x52c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e009      	b.n	8006708 <HAL_DMA_IRQHandler+0x540>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf14      	ite	ne
 8006702:	2301      	movne	r3, #1
 8006704:	2300      	moveq	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d03e      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2210      	movs	r2, #16
 8006716:	409a      	lsls	r2, r3
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d018      	beq.n	800675c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d024      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
 8006748:	e01f      	b.n	800678a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01b      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	e016      	b.n	800678a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d107      	bne.n	800677a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0208 	bic.w	r2, r2, #8
 8006778:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2220      	movs	r2, #32
 8006794:	409a      	lsls	r2, r3
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8110 	beq.w	80069c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2c      	ldr	r2, [pc, #176]	; (8006858 <HAL_DMA_IRQHandler+0x690>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04a      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2b      	ldr	r2, [pc, #172]	; (800685c <HAL_DMA_IRQHandler+0x694>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d045      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a29      	ldr	r2, [pc, #164]	; (8006860 <HAL_DMA_IRQHandler+0x698>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d040      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a28      	ldr	r2, [pc, #160]	; (8006864 <HAL_DMA_IRQHandler+0x69c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d03b      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a26      	ldr	r2, [pc, #152]	; (8006868 <HAL_DMA_IRQHandler+0x6a0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d036      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a25      	ldr	r2, [pc, #148]	; (800686c <HAL_DMA_IRQHandler+0x6a4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d031      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a23      	ldr	r2, [pc, #140]	; (8006870 <HAL_DMA_IRQHandler+0x6a8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02c      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a22      	ldr	r2, [pc, #136]	; (8006874 <HAL_DMA_IRQHandler+0x6ac>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d027      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a20      	ldr	r2, [pc, #128]	; (8006878 <HAL_DMA_IRQHandler+0x6b0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1f      	ldr	r2, [pc, #124]	; (800687c <HAL_DMA_IRQHandler+0x6b4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <HAL_DMA_IRQHandler+0x6b8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <HAL_DMA_IRQHandler+0x6bc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1a      	ldr	r2, [pc, #104]	; (8006888 <HAL_DMA_IRQHandler+0x6c0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_DMA_IRQHandler+0x6c4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a17      	ldr	r2, [pc, #92]	; (8006890 <HAL_DMA_IRQHandler+0x6c8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <HAL_DMA_IRQHandler+0x678>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a16      	ldr	r2, [pc, #88]	; (8006894 <HAL_DMA_IRQHandler+0x6cc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d12b      	bne.n	8006898 <HAL_DMA_IRQHandler+0x6d0>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf14      	ite	ne
 800684e:	2301      	movne	r3, #1
 8006850:	2300      	moveq	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	e02a      	b.n	80068ac <HAL_DMA_IRQHandler+0x6e4>
 8006856:	bf00      	nop
 8006858:	40020010 	.word	0x40020010
 800685c:	40020028 	.word	0x40020028
 8006860:	40020040 	.word	0x40020040
 8006864:	40020058 	.word	0x40020058
 8006868:	40020070 	.word	0x40020070
 800686c:	40020088 	.word	0x40020088
 8006870:	400200a0 	.word	0x400200a0
 8006874:	400200b8 	.word	0x400200b8
 8006878:	40020410 	.word	0x40020410
 800687c:	40020428 	.word	0x40020428
 8006880:	40020440 	.word	0x40020440
 8006884:	40020458 	.word	0x40020458
 8006888:	40020470 	.word	0x40020470
 800688c:	40020488 	.word	0x40020488
 8006890:	400204a0 	.word	0x400204a0
 8006894:	400204b8 	.word	0x400204b8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf14      	ite	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	2300      	moveq	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8087 	beq.w	80069c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b6:	f003 031f 	and.w	r3, r3, #31
 80068ba:	2220      	movs	r2, #32
 80068bc:	409a      	lsls	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d139      	bne.n	8006942 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0216 	bic.w	r2, r2, #22
 80068dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <HAL_DMA_IRQHandler+0x736>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0208 	bic.w	r2, r2, #8
 800690c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	223f      	movs	r2, #63	; 0x3f
 8006918:	409a      	lsls	r2, r3
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8382 	beq.w	800703c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
          }
          return;
 8006940:	e37c      	b.n	800703c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d018      	beq.n	8006982 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d108      	bne.n	8006970 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006962:	2b00      	cmp	r3, #0
 8006964:	d02c      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
 800696e:	e027      	b.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d023      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
 8006980:	e01e      	b.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10f      	bne.n	80069b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0210 	bic.w	r2, r2, #16
 800699e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 833e 	beq.w	8007046 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8088 	beq.w	8006ae8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2204      	movs	r2, #4
 80069dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a89      	ldr	r2, [pc, #548]	; (8006c0c <HAL_DMA_IRQHandler+0xa44>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d04a      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a88      	ldr	r2, [pc, #544]	; (8006c10 <HAL_DMA_IRQHandler+0xa48>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d045      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a86      	ldr	r2, [pc, #536]	; (8006c14 <HAL_DMA_IRQHandler+0xa4c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d040      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a85      	ldr	r2, [pc, #532]	; (8006c18 <HAL_DMA_IRQHandler+0xa50>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d03b      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a83      	ldr	r2, [pc, #524]	; (8006c1c <HAL_DMA_IRQHandler+0xa54>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d036      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a82      	ldr	r2, [pc, #520]	; (8006c20 <HAL_DMA_IRQHandler+0xa58>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d031      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a80      	ldr	r2, [pc, #512]	; (8006c24 <HAL_DMA_IRQHandler+0xa5c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d02c      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a7f      	ldr	r2, [pc, #508]	; (8006c28 <HAL_DMA_IRQHandler+0xa60>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d027      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a7d      	ldr	r2, [pc, #500]	; (8006c2c <HAL_DMA_IRQHandler+0xa64>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d022      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a7c      	ldr	r2, [pc, #496]	; (8006c30 <HAL_DMA_IRQHandler+0xa68>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d01d      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a7a      	ldr	r2, [pc, #488]	; (8006c34 <HAL_DMA_IRQHandler+0xa6c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d018      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a79      	ldr	r2, [pc, #484]	; (8006c38 <HAL_DMA_IRQHandler+0xa70>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d013      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a77      	ldr	r2, [pc, #476]	; (8006c3c <HAL_DMA_IRQHandler+0xa74>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a76      	ldr	r2, [pc, #472]	; (8006c40 <HAL_DMA_IRQHandler+0xa78>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d009      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a74      	ldr	r2, [pc, #464]	; (8006c44 <HAL_DMA_IRQHandler+0xa7c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x8b8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a73      	ldr	r2, [pc, #460]	; (8006c48 <HAL_DMA_IRQHandler+0xa80>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d108      	bne.n	8006a92 <HAL_DMA_IRQHandler+0x8ca>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e007      	b.n	8006aa2 <HAL_DMA_IRQHandler+0x8da>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d307      	bcc.n	8006abe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f2      	bne.n	8006aa2 <HAL_DMA_IRQHandler+0x8da>
 8006abc:	e000      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006abe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006ad6:	e003      	b.n	8006ae0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 82aa 	beq.w	8007046 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
 8006afa:	e2a4      	b.n	8007046 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a52      	ldr	r2, [pc, #328]	; (8006c4c <HAL_DMA_IRQHandler+0xa84>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d04a      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a51      	ldr	r2, [pc, #324]	; (8006c50 <HAL_DMA_IRQHandler+0xa88>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d045      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a4f      	ldr	r2, [pc, #316]	; (8006c54 <HAL_DMA_IRQHandler+0xa8c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d040      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a4e      	ldr	r2, [pc, #312]	; (8006c58 <HAL_DMA_IRQHandler+0xa90>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d03b      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a4c      	ldr	r2, [pc, #304]	; (8006c5c <HAL_DMA_IRQHandler+0xa94>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d036      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a4b      	ldr	r2, [pc, #300]	; (8006c60 <HAL_DMA_IRQHandler+0xa98>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d031      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a49      	ldr	r2, [pc, #292]	; (8006c64 <HAL_DMA_IRQHandler+0xa9c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d02c      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a48      	ldr	r2, [pc, #288]	; (8006c68 <HAL_DMA_IRQHandler+0xaa0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d027      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a46      	ldr	r2, [pc, #280]	; (8006c6c <HAL_DMA_IRQHandler+0xaa4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a45      	ldr	r2, [pc, #276]	; (8006c70 <HAL_DMA_IRQHandler+0xaa8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01d      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a43      	ldr	r2, [pc, #268]	; (8006c74 <HAL_DMA_IRQHandler+0xaac>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a42      	ldr	r2, [pc, #264]	; (8006c78 <HAL_DMA_IRQHandler+0xab0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a40      	ldr	r2, [pc, #256]	; (8006c7c <HAL_DMA_IRQHandler+0xab4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a3f      	ldr	r2, [pc, #252]	; (8006c80 <HAL_DMA_IRQHandler+0xab8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a3d      	ldr	r2, [pc, #244]	; (8006c84 <HAL_DMA_IRQHandler+0xabc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x9d4>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3c      	ldr	r2, [pc, #240]	; (8006c88 <HAL_DMA_IRQHandler+0xac0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_DMA_IRQHandler+0x9d8>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_DMA_IRQHandler+0x9da>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 824f 	beq.w	8007046 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2204      	movs	r2, #4
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80dd 	beq.w	8006d80 <HAL_DMA_IRQHandler+0xbb8>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80d7 	beq.w	8006d80 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2204      	movs	r2, #4
 8006bdc:	409a      	lsls	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d059      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d14a      	bne.n	8006c8c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 8220 	beq.w	8007040 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c08:	e21a      	b.n	8007040 <HAL_DMA_IRQHandler+0xe78>
 8006c0a:	bf00      	nop
 8006c0c:	40020010 	.word	0x40020010
 8006c10:	40020028 	.word	0x40020028
 8006c14:	40020040 	.word	0x40020040
 8006c18:	40020058 	.word	0x40020058
 8006c1c:	40020070 	.word	0x40020070
 8006c20:	40020088 	.word	0x40020088
 8006c24:	400200a0 	.word	0x400200a0
 8006c28:	400200b8 	.word	0x400200b8
 8006c2c:	40020410 	.word	0x40020410
 8006c30:	40020428 	.word	0x40020428
 8006c34:	40020440 	.word	0x40020440
 8006c38:	40020458 	.word	0x40020458
 8006c3c:	40020470 	.word	0x40020470
 8006c40:	40020488 	.word	0x40020488
 8006c44:	400204a0 	.word	0x400204a0
 8006c48:	400204b8 	.word	0x400204b8
 8006c4c:	48022c08 	.word	0x48022c08
 8006c50:	48022c1c 	.word	0x48022c1c
 8006c54:	48022c30 	.word	0x48022c30
 8006c58:	48022c44 	.word	0x48022c44
 8006c5c:	48022c58 	.word	0x48022c58
 8006c60:	48022c6c 	.word	0x48022c6c
 8006c64:	48022c80 	.word	0x48022c80
 8006c68:	48022c94 	.word	0x48022c94
 8006c6c:	58025408 	.word	0x58025408
 8006c70:	5802541c 	.word	0x5802541c
 8006c74:	58025430 	.word	0x58025430
 8006c78:	58025444 	.word	0x58025444
 8006c7c:	58025458 	.word	0x58025458
 8006c80:	5802546c 	.word	0x5802546c
 8006c84:	58025480 	.word	0x58025480
 8006c88:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 81d5 	beq.w	8007040 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c9e:	e1cf      	b.n	8007040 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d160      	bne.n	8006d6c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a7f      	ldr	r2, [pc, #508]	; (8006eac <HAL_DMA_IRQHandler+0xce4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d04a      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a7d      	ldr	r2, [pc, #500]	; (8006eb0 <HAL_DMA_IRQHandler+0xce8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d045      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a7c      	ldr	r2, [pc, #496]	; (8006eb4 <HAL_DMA_IRQHandler+0xcec>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d040      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a7a      	ldr	r2, [pc, #488]	; (8006eb8 <HAL_DMA_IRQHandler+0xcf0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d03b      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a79      	ldr	r2, [pc, #484]	; (8006ebc <HAL_DMA_IRQHandler+0xcf4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d036      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a77      	ldr	r2, [pc, #476]	; (8006ec0 <HAL_DMA_IRQHandler+0xcf8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d031      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a76      	ldr	r2, [pc, #472]	; (8006ec4 <HAL_DMA_IRQHandler+0xcfc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d02c      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a74      	ldr	r2, [pc, #464]	; (8006ec8 <HAL_DMA_IRQHandler+0xd00>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d027      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a73      	ldr	r2, [pc, #460]	; (8006ecc <HAL_DMA_IRQHandler+0xd04>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a71      	ldr	r2, [pc, #452]	; (8006ed0 <HAL_DMA_IRQHandler+0xd08>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01d      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a70      	ldr	r2, [pc, #448]	; (8006ed4 <HAL_DMA_IRQHandler+0xd0c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a6e      	ldr	r2, [pc, #440]	; (8006ed8 <HAL_DMA_IRQHandler+0xd10>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a6d      	ldr	r2, [pc, #436]	; (8006edc <HAL_DMA_IRQHandler+0xd14>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a6b      	ldr	r2, [pc, #428]	; (8006ee0 <HAL_DMA_IRQHandler+0xd18>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6a      	ldr	r2, [pc, #424]	; (8006ee4 <HAL_DMA_IRQHandler+0xd1c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_DMA_IRQHandler+0xb82>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a68      	ldr	r2, [pc, #416]	; (8006ee8 <HAL_DMA_IRQHandler+0xd20>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d108      	bne.n	8006d5c <HAL_DMA_IRQHandler+0xb94>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0208 	bic.w	r2, r2, #8
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	e007      	b.n	8006d6c <HAL_DMA_IRQHandler+0xba4>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0204 	bic.w	r2, r2, #4
 8006d6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8165 	beq.w	8007040 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d7e:	e15f      	b.n	8007040 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	2202      	movs	r2, #2
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80c5 	beq.w	8006f20 <HAL_DMA_IRQHandler+0xd58>
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80bf 	beq.w	8006f20 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2202      	movs	r2, #2
 8006dac:	409a      	lsls	r2, r3
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d018      	beq.n	8006dee <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 813a 	beq.w	8007044 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd8:	e134      	b.n	8007044 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8130 	beq.w	8007044 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dec:	e12a      	b.n	8007044 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8089 	bne.w	8006f0c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a2b      	ldr	r2, [pc, #172]	; (8006eac <HAL_DMA_IRQHandler+0xce4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d04a      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a29      	ldr	r2, [pc, #164]	; (8006eb0 <HAL_DMA_IRQHandler+0xce8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d045      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a28      	ldr	r2, [pc, #160]	; (8006eb4 <HAL_DMA_IRQHandler+0xcec>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d040      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <HAL_DMA_IRQHandler+0xcf0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d03b      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <HAL_DMA_IRQHandler+0xcf4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d036      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a23      	ldr	r2, [pc, #140]	; (8006ec0 <HAL_DMA_IRQHandler+0xcf8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d031      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <HAL_DMA_IRQHandler+0xcfc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d02c      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a20      	ldr	r2, [pc, #128]	; (8006ec8 <HAL_DMA_IRQHandler+0xd00>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d027      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a1f      	ldr	r2, [pc, #124]	; (8006ecc <HAL_DMA_IRQHandler+0xd04>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d022      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1d      	ldr	r2, [pc, #116]	; (8006ed0 <HAL_DMA_IRQHandler+0xd08>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01d      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1c      	ldr	r2, [pc, #112]	; (8006ed4 <HAL_DMA_IRQHandler+0xd0c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d018      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <HAL_DMA_IRQHandler+0xd10>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a19      	ldr	r2, [pc, #100]	; (8006edc <HAL_DMA_IRQHandler+0xd14>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <HAL_DMA_IRQHandler+0xd18>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <HAL_DMA_IRQHandler+0xd1c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xcd2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <HAL_DMA_IRQHandler+0xd20>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d128      	bne.n	8006eec <HAL_DMA_IRQHandler+0xd24>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0214 	bic.w	r2, r2, #20
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e027      	b.n	8006efc <HAL_DMA_IRQHandler+0xd34>
 8006eac:	40020010 	.word	0x40020010
 8006eb0:	40020028 	.word	0x40020028
 8006eb4:	40020040 	.word	0x40020040
 8006eb8:	40020058 	.word	0x40020058
 8006ebc:	40020070 	.word	0x40020070
 8006ec0:	40020088 	.word	0x40020088
 8006ec4:	400200a0 	.word	0x400200a0
 8006ec8:	400200b8 	.word	0x400200b8
 8006ecc:	40020410 	.word	0x40020410
 8006ed0:	40020428 	.word	0x40020428
 8006ed4:	40020440 	.word	0x40020440
 8006ed8:	40020458 	.word	0x40020458
 8006edc:	40020470 	.word	0x40020470
 8006ee0:	40020488 	.word	0x40020488
 8006ee4:	400204a0 	.word	0x400204a0
 8006ee8:	400204b8 	.word	0x400204b8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 020a 	bic.w	r2, r2, #10
 8006efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8097 	beq.w	8007044 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f1e:	e091      	b.n	8007044 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	2208      	movs	r2, #8
 8006f2a:	409a      	lsls	r2, r3
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 8088 	beq.w	8007046 <HAL_DMA_IRQHandler+0xe7e>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8082 	beq.w	8007046 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a41      	ldr	r2, [pc, #260]	; (800704c <HAL_DMA_IRQHandler+0xe84>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d04a      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a3f      	ldr	r2, [pc, #252]	; (8007050 <HAL_DMA_IRQHandler+0xe88>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d045      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a3e      	ldr	r2, [pc, #248]	; (8007054 <HAL_DMA_IRQHandler+0xe8c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d040      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <HAL_DMA_IRQHandler+0xe90>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d03b      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a3b      	ldr	r2, [pc, #236]	; (800705c <HAL_DMA_IRQHandler+0xe94>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d036      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a39      	ldr	r2, [pc, #228]	; (8007060 <HAL_DMA_IRQHandler+0xe98>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d031      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a38      	ldr	r2, [pc, #224]	; (8007064 <HAL_DMA_IRQHandler+0xe9c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d02c      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a36      	ldr	r2, [pc, #216]	; (8007068 <HAL_DMA_IRQHandler+0xea0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d027      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a35      	ldr	r2, [pc, #212]	; (800706c <HAL_DMA_IRQHandler+0xea4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d022      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a33      	ldr	r2, [pc, #204]	; (8007070 <HAL_DMA_IRQHandler+0xea8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01d      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a32      	ldr	r2, [pc, #200]	; (8007074 <HAL_DMA_IRQHandler+0xeac>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d018      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a30      	ldr	r2, [pc, #192]	; (8007078 <HAL_DMA_IRQHandler+0xeb0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <HAL_DMA_IRQHandler+0xeb4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00e      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2d      	ldr	r2, [pc, #180]	; (8007080 <HAL_DMA_IRQHandler+0xeb8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2c      	ldr	r2, [pc, #176]	; (8007084 <HAL_DMA_IRQHandler+0xebc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d004      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0xe1a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a2a      	ldr	r2, [pc, #168]	; (8007088 <HAL_DMA_IRQHandler+0xec0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d108      	bne.n	8006ff4 <HAL_DMA_IRQHandler+0xe2c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 021c 	bic.w	r2, r2, #28
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e007      	b.n	8007004 <HAL_DMA_IRQHandler+0xe3c>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 020e 	bic.w	r2, r2, #14
 8007002:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2201      	movs	r2, #1
 800700e:	409a      	lsls	r2, r3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
 800703a:	e004      	b.n	8007046 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800703c:	bf00      	nop
 800703e:	e002      	b.n	8007046 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007040:	bf00      	nop
 8007042:	e000      	b.n	8007046 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007044:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007046:	3728      	adds	r7, #40	; 0x28
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40020010 	.word	0x40020010
 8007050:	40020028 	.word	0x40020028
 8007054:	40020040 	.word	0x40020040
 8007058:	40020058 	.word	0x40020058
 800705c:	40020070 	.word	0x40020070
 8007060:	40020088 	.word	0x40020088
 8007064:	400200a0 	.word	0x400200a0
 8007068:	400200b8 	.word	0x400200b8
 800706c:	40020410 	.word	0x40020410
 8007070:	40020428 	.word	0x40020428
 8007074:	40020440 	.word	0x40020440
 8007078:	40020458 	.word	0x40020458
 800707c:	40020470 	.word	0x40020470
 8007080:	40020488 	.word	0x40020488
 8007084:	400204a0 	.word	0x400204a0
 8007088:	400204b8 	.word	0x400204b8

0800708c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a7f      	ldr	r2, [pc, #508]	; (80072a8 <DMA_SetConfig+0x21c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d072      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a7d      	ldr	r2, [pc, #500]	; (80072ac <DMA_SetConfig+0x220>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d06d      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a7c      	ldr	r2, [pc, #496]	; (80072b0 <DMA_SetConfig+0x224>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d068      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7a      	ldr	r2, [pc, #488]	; (80072b4 <DMA_SetConfig+0x228>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d063      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a79      	ldr	r2, [pc, #484]	; (80072b8 <DMA_SetConfig+0x22c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d05e      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a77      	ldr	r2, [pc, #476]	; (80072bc <DMA_SetConfig+0x230>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d059      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a76      	ldr	r2, [pc, #472]	; (80072c0 <DMA_SetConfig+0x234>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d054      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a74      	ldr	r2, [pc, #464]	; (80072c4 <DMA_SetConfig+0x238>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d04f      	beq.n	8007196 <DMA_SetConfig+0x10a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a73      	ldr	r2, [pc, #460]	; (80072c8 <DMA_SetConfig+0x23c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d04a      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a71      	ldr	r2, [pc, #452]	; (80072cc <DMA_SetConfig+0x240>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d045      	beq.n	8007196 <DMA_SetConfig+0x10a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a70      	ldr	r2, [pc, #448]	; (80072d0 <DMA_SetConfig+0x244>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d040      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a6e      	ldr	r2, [pc, #440]	; (80072d4 <DMA_SetConfig+0x248>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d03b      	beq.n	8007196 <DMA_SetConfig+0x10a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a6d      	ldr	r2, [pc, #436]	; (80072d8 <DMA_SetConfig+0x24c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d036      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a6b      	ldr	r2, [pc, #428]	; (80072dc <DMA_SetConfig+0x250>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d031      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6a      	ldr	r2, [pc, #424]	; (80072e0 <DMA_SetConfig+0x254>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d02c      	beq.n	8007196 <DMA_SetConfig+0x10a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a68      	ldr	r2, [pc, #416]	; (80072e4 <DMA_SetConfig+0x258>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d027      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a67      	ldr	r2, [pc, #412]	; (80072e8 <DMA_SetConfig+0x25c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d022      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a65      	ldr	r2, [pc, #404]	; (80072ec <DMA_SetConfig+0x260>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01d      	beq.n	8007196 <DMA_SetConfig+0x10a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a64      	ldr	r2, [pc, #400]	; (80072f0 <DMA_SetConfig+0x264>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d018      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a62      	ldr	r2, [pc, #392]	; (80072f4 <DMA_SetConfig+0x268>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <DMA_SetConfig+0x10a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a61      	ldr	r2, [pc, #388]	; (80072f8 <DMA_SetConfig+0x26c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00e      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a5f      	ldr	r2, [pc, #380]	; (80072fc <DMA_SetConfig+0x270>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d009      	beq.n	8007196 <DMA_SetConfig+0x10a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a5e      	ldr	r2, [pc, #376]	; (8007300 <DMA_SetConfig+0x274>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d004      	beq.n	8007196 <DMA_SetConfig+0x10a>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5c      	ldr	r2, [pc, #368]	; (8007304 <DMA_SetConfig+0x278>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d101      	bne.n	800719a <DMA_SetConfig+0x10e>
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <DMA_SetConfig+0x110>
 800719a:	2300      	movs	r3, #0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00d      	beq.n	80071bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a39      	ldr	r2, [pc, #228]	; (80072a8 <DMA_SetConfig+0x21c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d04a      	beq.n	800725c <DMA_SetConfig+0x1d0>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a38      	ldr	r2, [pc, #224]	; (80072ac <DMA_SetConfig+0x220>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d045      	beq.n	800725c <DMA_SetConfig+0x1d0>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a36      	ldr	r2, [pc, #216]	; (80072b0 <DMA_SetConfig+0x224>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d040      	beq.n	800725c <DMA_SetConfig+0x1d0>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a35      	ldr	r2, [pc, #212]	; (80072b4 <DMA_SetConfig+0x228>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d03b      	beq.n	800725c <DMA_SetConfig+0x1d0>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a33      	ldr	r2, [pc, #204]	; (80072b8 <DMA_SetConfig+0x22c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d036      	beq.n	800725c <DMA_SetConfig+0x1d0>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a32      	ldr	r2, [pc, #200]	; (80072bc <DMA_SetConfig+0x230>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d031      	beq.n	800725c <DMA_SetConfig+0x1d0>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a30      	ldr	r2, [pc, #192]	; (80072c0 <DMA_SetConfig+0x234>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d02c      	beq.n	800725c <DMA_SetConfig+0x1d0>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a2f      	ldr	r2, [pc, #188]	; (80072c4 <DMA_SetConfig+0x238>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d027      	beq.n	800725c <DMA_SetConfig+0x1d0>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <DMA_SetConfig+0x23c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d022      	beq.n	800725c <DMA_SetConfig+0x1d0>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <DMA_SetConfig+0x240>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d01d      	beq.n	800725c <DMA_SetConfig+0x1d0>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2a      	ldr	r2, [pc, #168]	; (80072d0 <DMA_SetConfig+0x244>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d018      	beq.n	800725c <DMA_SetConfig+0x1d0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a29      	ldr	r2, [pc, #164]	; (80072d4 <DMA_SetConfig+0x248>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <DMA_SetConfig+0x1d0>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <DMA_SetConfig+0x24c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00e      	beq.n	800725c <DMA_SetConfig+0x1d0>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a26      	ldr	r2, [pc, #152]	; (80072dc <DMA_SetConfig+0x250>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d009      	beq.n	800725c <DMA_SetConfig+0x1d0>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <DMA_SetConfig+0x254>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <DMA_SetConfig+0x1d0>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a23      	ldr	r2, [pc, #140]	; (80072e4 <DMA_SetConfig+0x258>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d101      	bne.n	8007260 <DMA_SetConfig+0x1d4>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <DMA_SetConfig+0x1d6>
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d059      	beq.n	800731a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726a:	f003 031f 	and.w	r3, r3, #31
 800726e:	223f      	movs	r2, #63	; 0x3f
 8007270:	409a      	lsls	r2, r3
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007284:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d138      	bne.n	8007308 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072a6:	e0ae      	b.n	8007406 <DMA_SetConfig+0x37a>
 80072a8:	40020010 	.word	0x40020010
 80072ac:	40020028 	.word	0x40020028
 80072b0:	40020040 	.word	0x40020040
 80072b4:	40020058 	.word	0x40020058
 80072b8:	40020070 	.word	0x40020070
 80072bc:	40020088 	.word	0x40020088
 80072c0:	400200a0 	.word	0x400200a0
 80072c4:	400200b8 	.word	0x400200b8
 80072c8:	40020410 	.word	0x40020410
 80072cc:	40020428 	.word	0x40020428
 80072d0:	40020440 	.word	0x40020440
 80072d4:	40020458 	.word	0x40020458
 80072d8:	40020470 	.word	0x40020470
 80072dc:	40020488 	.word	0x40020488
 80072e0:	400204a0 	.word	0x400204a0
 80072e4:	400204b8 	.word	0x400204b8
 80072e8:	58025408 	.word	0x58025408
 80072ec:	5802541c 	.word	0x5802541c
 80072f0:	58025430 	.word	0x58025430
 80072f4:	58025444 	.word	0x58025444
 80072f8:	58025458 	.word	0x58025458
 80072fc:	5802546c 	.word	0x5802546c
 8007300:	58025480 	.word	0x58025480
 8007304:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
}
 8007318:	e075      	b.n	8007406 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a3d      	ldr	r2, [pc, #244]	; (8007414 <DMA_SetConfig+0x388>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d04a      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a3b      	ldr	r2, [pc, #236]	; (8007418 <DMA_SetConfig+0x38c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d045      	beq.n	80073ba <DMA_SetConfig+0x32e>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a3a      	ldr	r2, [pc, #232]	; (800741c <DMA_SetConfig+0x390>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d040      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a38      	ldr	r2, [pc, #224]	; (8007420 <DMA_SetConfig+0x394>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d03b      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a37      	ldr	r2, [pc, #220]	; (8007424 <DMA_SetConfig+0x398>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d036      	beq.n	80073ba <DMA_SetConfig+0x32e>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a35      	ldr	r2, [pc, #212]	; (8007428 <DMA_SetConfig+0x39c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d031      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a34      	ldr	r2, [pc, #208]	; (800742c <DMA_SetConfig+0x3a0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d02c      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a32      	ldr	r2, [pc, #200]	; (8007430 <DMA_SetConfig+0x3a4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d027      	beq.n	80073ba <DMA_SetConfig+0x32e>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a31      	ldr	r2, [pc, #196]	; (8007434 <DMA_SetConfig+0x3a8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d022      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <DMA_SetConfig+0x3ac>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01d      	beq.n	80073ba <DMA_SetConfig+0x32e>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2e      	ldr	r2, [pc, #184]	; (800743c <DMA_SetConfig+0x3b0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d018      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2c      	ldr	r2, [pc, #176]	; (8007440 <DMA_SetConfig+0x3b4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <DMA_SetConfig+0x32e>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2b      	ldr	r2, [pc, #172]	; (8007444 <DMA_SetConfig+0x3b8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00e      	beq.n	80073ba <DMA_SetConfig+0x32e>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a29      	ldr	r2, [pc, #164]	; (8007448 <DMA_SetConfig+0x3bc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d009      	beq.n	80073ba <DMA_SetConfig+0x32e>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a28      	ldr	r2, [pc, #160]	; (800744c <DMA_SetConfig+0x3c0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <DMA_SetConfig+0x32e>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a26      	ldr	r2, [pc, #152]	; (8007450 <DMA_SetConfig+0x3c4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <DMA_SetConfig+0x332>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <DMA_SetConfig+0x334>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d020      	beq.n	8007406 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	2201      	movs	r2, #1
 80073ce:	409a      	lsls	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d108      	bne.n	80073f6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	60da      	str	r2, [r3, #12]
}
 80073f4:	e007      	b.n	8007406 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	60da      	str	r2, [r3, #12]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	48022c08 	.word	0x48022c08
 8007418:	48022c1c 	.word	0x48022c1c
 800741c:	48022c30 	.word	0x48022c30
 8007420:	48022c44 	.word	0x48022c44
 8007424:	48022c58 	.word	0x48022c58
 8007428:	48022c6c 	.word	0x48022c6c
 800742c:	48022c80 	.word	0x48022c80
 8007430:	48022c94 	.word	0x48022c94
 8007434:	58025408 	.word	0x58025408
 8007438:	5802541c 	.word	0x5802541c
 800743c:	58025430 	.word	0x58025430
 8007440:	58025444 	.word	0x58025444
 8007444:	58025458 	.word	0x58025458
 8007448:	5802546c 	.word	0x5802546c
 800744c:	58025480 	.word	0x58025480
 8007450:	58025494 	.word	0x58025494

08007454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a42      	ldr	r2, [pc, #264]	; (800756c <DMA_CalcBaseAndBitshift+0x118>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d04a      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a41      	ldr	r2, [pc, #260]	; (8007570 <DMA_CalcBaseAndBitshift+0x11c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d045      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a3f      	ldr	r2, [pc, #252]	; (8007574 <DMA_CalcBaseAndBitshift+0x120>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d040      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a3e      	ldr	r2, [pc, #248]	; (8007578 <DMA_CalcBaseAndBitshift+0x124>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d03b      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3c      	ldr	r2, [pc, #240]	; (800757c <DMA_CalcBaseAndBitshift+0x128>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d036      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3b      	ldr	r2, [pc, #236]	; (8007580 <DMA_CalcBaseAndBitshift+0x12c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d031      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a39      	ldr	r2, [pc, #228]	; (8007584 <DMA_CalcBaseAndBitshift+0x130>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d02c      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a38      	ldr	r2, [pc, #224]	; (8007588 <DMA_CalcBaseAndBitshift+0x134>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d027      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a36      	ldr	r2, [pc, #216]	; (800758c <DMA_CalcBaseAndBitshift+0x138>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d022      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a35      	ldr	r2, [pc, #212]	; (8007590 <DMA_CalcBaseAndBitshift+0x13c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d01d      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a33      	ldr	r2, [pc, #204]	; (8007594 <DMA_CalcBaseAndBitshift+0x140>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a32      	ldr	r2, [pc, #200]	; (8007598 <DMA_CalcBaseAndBitshift+0x144>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a30      	ldr	r2, [pc, #192]	; (800759c <DMA_CalcBaseAndBitshift+0x148>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00e      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a2f      	ldr	r2, [pc, #188]	; (80075a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d009      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2d      	ldr	r2, [pc, #180]	; (80075a4 <DMA_CalcBaseAndBitshift+0x150>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <DMA_CalcBaseAndBitshift+0xa8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2c      	ldr	r2, [pc, #176]	; (80075a8 <DMA_CalcBaseAndBitshift+0x154>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d101      	bne.n	8007500 <DMA_CalcBaseAndBitshift+0xac>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e000      	b.n	8007502 <DMA_CalcBaseAndBitshift+0xae>
 8007500:	2300      	movs	r3, #0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d024      	beq.n	8007550 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	3b10      	subs	r3, #16
 800750e:	4a27      	ldr	r2, [pc, #156]	; (80075ac <DMA_CalcBaseAndBitshift+0x158>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	091b      	lsrs	r3, r3, #4
 8007516:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	4a24      	ldr	r2, [pc, #144]	; (80075b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007520:	5cd3      	ldrb	r3, [r2, r3]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b03      	cmp	r3, #3
 800752c:	d908      	bls.n	8007540 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	4b1f      	ldr	r3, [pc, #124]	; (80075b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007536:	4013      	ands	r3, r2
 8007538:	1d1a      	adds	r2, r3, #4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	659a      	str	r2, [r3, #88]	; 0x58
 800753e:	e00d      	b.n	800755c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	4b1b      	ldr	r3, [pc, #108]	; (80075b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007548:	4013      	ands	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6593      	str	r3, [r2, #88]	; 0x58
 800754e:	e005      	b.n	800755c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40020010 	.word	0x40020010
 8007570:	40020028 	.word	0x40020028
 8007574:	40020040 	.word	0x40020040
 8007578:	40020058 	.word	0x40020058
 800757c:	40020070 	.word	0x40020070
 8007580:	40020088 	.word	0x40020088
 8007584:	400200a0 	.word	0x400200a0
 8007588:	400200b8 	.word	0x400200b8
 800758c:	40020410 	.word	0x40020410
 8007590:	40020428 	.word	0x40020428
 8007594:	40020440 	.word	0x40020440
 8007598:	40020458 	.word	0x40020458
 800759c:	40020470 	.word	0x40020470
 80075a0:	40020488 	.word	0x40020488
 80075a4:	400204a0 	.word	0x400204a0
 80075a8:	400204b8 	.word	0x400204b8
 80075ac:	aaaaaaab 	.word	0xaaaaaaab
 80075b0:	08010538 	.word	0x08010538
 80075b4:	fffffc00 	.word	0xfffffc00

080075b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d120      	bne.n	800760e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d858      	bhi.n	8007686 <DMA_CheckFifoParam+0xce>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <DMA_CheckFifoParam+0x24>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	080075ed 	.word	0x080075ed
 80075e0:	080075ff 	.word	0x080075ff
 80075e4:	080075ed 	.word	0x080075ed
 80075e8:	08007687 	.word	0x08007687
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d048      	beq.n	800768a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075fc:	e045      	b.n	800768a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007606:	d142      	bne.n	800768e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800760c:	e03f      	b.n	800768e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007616:	d123      	bne.n	8007660 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	2b03      	cmp	r3, #3
 800761e:	d838      	bhi.n	8007692 <DMA_CheckFifoParam+0xda>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <DMA_CheckFifoParam+0x70>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	08007639 	.word	0x08007639
 800762c:	0800763f 	.word	0x0800763f
 8007630:	08007639 	.word	0x08007639
 8007634:	08007651 	.word	0x08007651
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
        break;
 800763c:	e030      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d025      	beq.n	8007696 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800764e:	e022      	b.n	8007696 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007658:	d11f      	bne.n	800769a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800765e:	e01c      	b.n	800769a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	2b02      	cmp	r3, #2
 8007666:	d902      	bls.n	800766e <DMA_CheckFifoParam+0xb6>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d003      	beq.n	8007674 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800766c:	e018      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
        break;
 8007672:	e015      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00e      	beq.n	800769e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	73fb      	strb	r3, [r7, #15]
    break;
 8007684:	e00b      	b.n	800769e <DMA_CheckFifoParam+0xe6>
        break;
 8007686:	bf00      	nop
 8007688:	e00a      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
        break;
 800768a:	bf00      	nop
 800768c:	e008      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
        break;
 800768e:	bf00      	nop
 8007690:	e006      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007692:	bf00      	nop
 8007694:	e004      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007696:	bf00      	nop
 8007698:	e002      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
        break;
 800769a:	bf00      	nop
 800769c:	e000      	b.n	80076a0 <DMA_CheckFifoParam+0xe8>
    break;
 800769e:	bf00      	nop
    }
  }

  return status;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop

080076b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a38      	ldr	r2, [pc, #224]	; (80077a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d022      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a36      	ldr	r2, [pc, #216]	; (80077a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d01d      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a35      	ldr	r2, [pc, #212]	; (80077ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d018      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a33      	ldr	r2, [pc, #204]	; (80077b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a32      	ldr	r2, [pc, #200]	; (80077b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00e      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a30      	ldr	r2, [pc, #192]	; (80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d009      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a2f      	ldr	r2, [pc, #188]	; (80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d004      	beq.n	800770e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a2d      	ldr	r2, [pc, #180]	; (80077c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d101      	bne.n	8007712 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007712:	2300      	movs	r3, #0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	3b08      	subs	r3, #8
 8007720:	4a28      	ldr	r2, [pc, #160]	; (80077c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	091b      	lsrs	r3, r3, #4
 8007728:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4b26      	ldr	r3, [pc, #152]	; (80077c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a24      	ldr	r2, [pc, #144]	; (80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800773c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	2201      	movs	r2, #1
 8007746:	409a      	lsls	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800774c:	e024      	b.n	8007798 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	3b10      	subs	r3, #16
 8007756:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007758:	fba2 2303 	umull	r2, r3, r2, r3
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a1c      	ldr	r2, [pc, #112]	; (80077d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d806      	bhi.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d902      	bls.n	8007776 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3308      	adds	r3, #8
 8007774:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4b18      	ldr	r3, [pc, #96]	; (80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007788:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	2201      	movs	r2, #1
 8007792:	409a      	lsls	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	58025408 	.word	0x58025408
 80077a8:	5802541c 	.word	0x5802541c
 80077ac:	58025430 	.word	0x58025430
 80077b0:	58025444 	.word	0x58025444
 80077b4:	58025458 	.word	0x58025458
 80077b8:	5802546c 	.word	0x5802546c
 80077bc:	58025480 	.word	0x58025480
 80077c0:	58025494 	.word	0x58025494
 80077c4:	cccccccd 	.word	0xcccccccd
 80077c8:	16009600 	.word	0x16009600
 80077cc:	58025880 	.word	0x58025880
 80077d0:	aaaaaaab 	.word	0xaaaaaaab
 80077d4:	400204b8 	.word	0x400204b8
 80077d8:	4002040f 	.word	0x4002040f
 80077dc:	10008200 	.word	0x10008200
 80077e0:	40020880 	.word	0x40020880

080077e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d04a      	beq.n	8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d847      	bhi.n	8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a25      	ldr	r2, [pc, #148]	; (800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d022      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a24      	ldr	r2, [pc, #144]	; (80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d01d      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a22      	ldr	r2, [pc, #136]	; (80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d018      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a21      	ldr	r2, [pc, #132]	; (80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d013      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a1f      	ldr	r2, [pc, #124]	; (80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00e      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1e      	ldr	r2, [pc, #120]	; (80078b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d009      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d004      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d101      	bne.n	8007854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007854:	2300      	movs	r3, #0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4b17      	ldr	r3, [pc, #92]	; (80078bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a15      	ldr	r2, [pc, #84]	; (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800786c:	671a      	str	r2, [r3, #112]	; 0x70
 800786e:	e009      	b.n	8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	461a      	mov	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a11      	ldr	r2, [pc, #68]	; (80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007882:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b01      	subs	r3, #1
 8007888:	2201      	movs	r2, #1
 800788a:	409a      	lsls	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	58025408 	.word	0x58025408
 80078a0:	5802541c 	.word	0x5802541c
 80078a4:	58025430 	.word	0x58025430
 80078a8:	58025444 	.word	0x58025444
 80078ac:	58025458 	.word	0x58025458
 80078b0:	5802546c 	.word	0x5802546c
 80078b4:	58025480 	.word	0x58025480
 80078b8:	58025494 	.word	0x58025494
 80078bc:	1600963f 	.word	0x1600963f
 80078c0:	58025940 	.word	0x58025940
 80078c4:	1000823f 	.word	0x1000823f
 80078c8:	40020940 	.word	0x40020940

080078cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e04f      	b.n	800797e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7f9 f86a 	bl	80009cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <HAL_DMA2D_Init+0xbc>)
 8007908:	4013      	ands	r3, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6851      	ldr	r1, [r2, #4]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	69d2      	ldr	r2, [r2, #28]
 8007912:	4311      	orrs	r1, r2
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	430b      	orrs	r3, r1
 800791a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007922:	4b1a      	ldr	r3, [pc, #104]	; (800798c <HAL_DMA2D_Init+0xc0>)
 8007924:	4013      	ands	r3, r2
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6891      	ldr	r1, [r2, #8]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6992      	ldr	r2, [r2, #24]
 800792e:	4311      	orrs	r1, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6812      	ldr	r2, [r2, #0]
 8007934:	430b      	orrs	r3, r1
 8007936:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800793e:	4b14      	ldr	r3, [pc, #80]	; (8007990 <HAL_DMA2D_Init+0xc4>)
 8007940:	4013      	ands	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68d1      	ldr	r1, [r2, #12]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	430b      	orrs	r3, r1
 800794c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007954:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	051a      	lsls	r2, r3, #20
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	055b      	lsls	r3, r3, #21
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	fff8ffbf 	.word	0xfff8ffbf
 800798c:	fffffef8 	.word	0xfffffef8
 8007990:	ffff0000 	.word	0xffff0000

08007994 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d026      	beq.n	8007a04 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d021      	beq.n	8007a04 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079d4:	f043 0201 	orr.w	r2, r3, #1
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2201      	movs	r2, #1
 80079e2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2204      	movs	r2, #4
 80079e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d026      	beq.n	8007a5c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d021      	beq.n	8007a5c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a26:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a34:	f043 0202 	orr.w	r2, r3, #2
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2204      	movs	r2, #4
 8007a40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d026      	beq.n	8007ab4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d021      	beq.n	8007ab4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2208      	movs	r2, #8
 8007a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a8c:	f043 0204 	orr.w	r2, r3, #4
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2204      	movs	r2, #4
 8007a98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d013      	beq.n	8007ae6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2204      	movs	r2, #4
 8007ade:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f853 	bl	8007b8c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d024      	beq.n	8007b3a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01f      	beq.n	8007b3a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b08:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0310 	and.w	r3, r3, #16
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01f      	beq.n	8007b84 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01a      	beq.n	8007b84 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b5c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2210      	movs	r2, #16
 8007b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f80e 	bl	8007ba0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_DMA2D_ConfigLayer+0x24>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e092      	b.n	8007cfe <HAL_DMA2D_ConfigLayer+0x14a>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	4613      	mov	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	3328      	adds	r3, #40	; 0x28
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007c0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007c18:	4b3c      	ldr	r3, [pc, #240]	; (8007d0c <HAL_DMA2D_ConfigLayer+0x158>)
 8007c1a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b0a      	cmp	r3, #10
 8007c22:	d003      	beq.n	8007c2c <HAL_DMA2D_ConfigLayer+0x78>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d107      	bne.n	8007c3c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	e005      	b.n	8007c48 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	061b      	lsls	r3, r3, #24
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d120      	bne.n	8007c90 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	43db      	mvns	r3, r3
 8007c58:	ea02 0103 	and.w	r1, r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b0a      	cmp	r3, #10
 8007c76:	d003      	beq.n	8007c80 <HAL_DMA2D_ConfigLayer+0xcc>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	d135      	bne.n	8007cec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007c8c:	629a      	str	r2, [r3, #40]	; 0x28
 8007c8e:	e02d      	b.n	8007cec <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b0b      	cmp	r3, #11
 8007c96:	d109      	bne.n	8007cac <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	049b      	lsls	r3, r3, #18
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007caa:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69da      	ldr	r2, [r3, #28]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	43db      	mvns	r3, r3
 8007cb6:	ea02 0103 	and.w	r1, r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	6812      	ldr	r2, [r2, #0]
 8007ccc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b0a      	cmp	r3, #10
 8007cd4:	d003      	beq.n	8007cde <HAL_DMA2D_ConfigLayer+0x12a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d106      	bne.n	8007cec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007cea:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	ff33000f 	.word	0xff33000f

08007d10 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d105      	bne.n	8007d36 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e315      	b.n	8008362 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e30e      	b.n	8008362 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	f040 82fd 	bne.w	8008354 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a82      	ldr	r2, [pc, #520]	; (8007f78 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d04a      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a81      	ldr	r2, [pc, #516]	; (8007f7c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d045      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a7f      	ldr	r2, [pc, #508]	; (8007f80 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d040      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a7e      	ldr	r2, [pc, #504]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d03b      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7c      	ldr	r2, [pc, #496]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d036      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a7b      	ldr	r2, [pc, #492]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d031      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a79      	ldr	r2, [pc, #484]	; (8007f90 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d02c      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a78      	ldr	r2, [pc, #480]	; (8007f94 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d027      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a76      	ldr	r2, [pc, #472]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d022      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a75      	ldr	r2, [pc, #468]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d01d      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a73      	ldr	r2, [pc, #460]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d018      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a72      	ldr	r2, [pc, #456]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d013      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a70      	ldr	r2, [pc, #448]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00e      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a6f      	ldr	r2, [pc, #444]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d009      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a6d      	ldr	r2, [pc, #436]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a6c      	ldr	r2, [pc, #432]	; (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d101      	bne.n	8007e0c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d018      	beq.n	8007e44 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007e20:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	3308      	adds	r3, #8
 8007e30:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e36:	f003 031f 	and.w	r3, r3, #31
 8007e3a:	223f      	movs	r2, #63	; 0x3f
 8007e3c:	409a      	lsls	r2, r3
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	e018      	b.n	8007e76 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6819      	ldr	r1, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	f248 0320 	movw	r3, #32800	; 0x8020
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	3304      	adds	r3, #4
 8007e64:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6a:	f003 031f 	and.w	r3, r3, #31
 8007e6e:	2201      	movs	r2, #1
 8007e70:	409a      	lsls	r2, r3
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fb41 	bl	8008504 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a3c      	ldr	r2, [pc, #240]	; (8007f78 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d072      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a3a      	ldr	r2, [pc, #232]	; (8007f7c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d06d      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a39      	ldr	r2, [pc, #228]	; (8007f80 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d068      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a37      	ldr	r2, [pc, #220]	; (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d063      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a36      	ldr	r2, [pc, #216]	; (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d05e      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a34      	ldr	r2, [pc, #208]	; (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d059      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a33      	ldr	r2, [pc, #204]	; (8007f90 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d054      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a31      	ldr	r2, [pc, #196]	; (8007f94 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d04f      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a30      	ldr	r2, [pc, #192]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d04a      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a2e      	ldr	r2, [pc, #184]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d045      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a2d      	ldr	r2, [pc, #180]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d040      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d03b      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d036      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a28      	ldr	r2, [pc, #160]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d031      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a27      	ldr	r2, [pc, #156]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d02c      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d027      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a24      	ldr	r2, [pc, #144]	; (8007fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d022      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d01d      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d018      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1f      	ldr	r2, [pc, #124]	; (8007fc4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1e      	ldr	r2, [pc, #120]	; (8007fc8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00e      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1c      	ldr	r2, [pc, #112]	; (8007fcc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d009      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a1b      	ldr	r2, [pc, #108]	; (8007fd0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d004      	beq.n	8007f72 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a19      	ldr	r2, [pc, #100]	; (8007fd4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d132      	bne.n	8007fd8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e031      	b.n	8007fda <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8007f76:	bf00      	nop
 8007f78:	40020010 	.word	0x40020010
 8007f7c:	40020028 	.word	0x40020028
 8007f80:	40020040 	.word	0x40020040
 8007f84:	40020058 	.word	0x40020058
 8007f88:	40020070 	.word	0x40020070
 8007f8c:	40020088 	.word	0x40020088
 8007f90:	400200a0 	.word	0x400200a0
 8007f94:	400200b8 	.word	0x400200b8
 8007f98:	40020410 	.word	0x40020410
 8007f9c:	40020428 	.word	0x40020428
 8007fa0:	40020440 	.word	0x40020440
 8007fa4:	40020458 	.word	0x40020458
 8007fa8:	40020470 	.word	0x40020470
 8007fac:	40020488 	.word	0x40020488
 8007fb0:	400204a0 	.word	0x400204a0
 8007fb4:	400204b8 	.word	0x400204b8
 8007fb8:	58025408 	.word	0x58025408
 8007fbc:	5802541c 	.word	0x5802541c
 8007fc0:	58025430 	.word	0x58025430
 8007fc4:	58025444 	.word	0x58025444
 8007fc8:	58025458 	.word	0x58025458
 8007fcc:	5802546c 	.word	0x5802546c
 8007fd0:	58025480 	.word	0x58025480
 8007fd4:	58025494 	.word	0x58025494
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00d      	beq.n	8007ffa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007fe6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ff8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a3b      	ldr	r2, [pc, #236]	; (80080ec <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d04a      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a39      	ldr	r2, [pc, #228]	; (80080f0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d045      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a38      	ldr	r2, [pc, #224]	; (80080f4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d040      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a36      	ldr	r2, [pc, #216]	; (80080f8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d03b      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a35      	ldr	r2, [pc, #212]	; (80080fc <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d036      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a33      	ldr	r2, [pc, #204]	; (8008100 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d031      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a32      	ldr	r2, [pc, #200]	; (8008104 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d02c      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a30      	ldr	r2, [pc, #192]	; (8008108 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d027      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a2f      	ldr	r2, [pc, #188]	; (800810c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d022      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a2d      	ldr	r2, [pc, #180]	; (8008110 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01d      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a2c      	ldr	r2, [pc, #176]	; (8008114 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d018      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a2a      	ldr	r2, [pc, #168]	; (8008118 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a29      	ldr	r2, [pc, #164]	; (800811c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00e      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a27      	ldr	r2, [pc, #156]	; (8008120 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a26      	ldr	r2, [pc, #152]	; (8008124 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a24      	ldr	r2, [pc, #144]	; (8008128 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d101      	bne.n	800809e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d043      	beq.n	800812c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f023 021e 	bic.w	r2, r3, #30
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0216 	orr.w	r2, r2, #22
 80080b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695a      	ldr	r2, [r3, #20]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080c6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d043      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0208 	orr.w	r2, r2, #8
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	e03a      	b.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 80080ea:	bf00      	nop
 80080ec:	40020010 	.word	0x40020010
 80080f0:	40020028 	.word	0x40020028
 80080f4:	40020040 	.word	0x40020040
 80080f8:	40020058 	.word	0x40020058
 80080fc:	40020070 	.word	0x40020070
 8008100:	40020088 	.word	0x40020088
 8008104:	400200a0 	.word	0x400200a0
 8008108:	400200b8 	.word	0x400200b8
 800810c:	40020410 	.word	0x40020410
 8008110:	40020428 	.word	0x40020428
 8008114:	40020440 	.word	0x40020440
 8008118:	40020458 	.word	0x40020458
 800811c:	40020470 	.word	0x40020470
 8008120:	40020488 	.word	0x40020488
 8008124:	400204a0 	.word	0x400204a0
 8008128:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f023 020e 	bic.w	r2, r3, #14
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 020a 	orr.w	r2, r2, #10
 800813e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0204 	orr.w	r2, r2, #4
 800815e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a81      	ldr	r2, [pc, #516]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d072      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a80      	ldr	r2, [pc, #512]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d06d      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a7e      	ldr	r2, [pc, #504]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d068      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a7d      	ldr	r2, [pc, #500]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d063      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a7b      	ldr	r2, [pc, #492]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d05e      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a7a      	ldr	r2, [pc, #488]	; (8008380 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d059      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a78      	ldr	r2, [pc, #480]	; (8008384 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d054      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a77      	ldr	r2, [pc, #476]	; (8008388 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d04f      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a75      	ldr	r2, [pc, #468]	; (800838c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d04a      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a74      	ldr	r2, [pc, #464]	; (8008390 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d045      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a72      	ldr	r2, [pc, #456]	; (8008394 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d040      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a71      	ldr	r2, [pc, #452]	; (8008398 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d03b      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a6f      	ldr	r2, [pc, #444]	; (800839c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d036      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a6e      	ldr	r2, [pc, #440]	; (80083a0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d031      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a6c      	ldr	r2, [pc, #432]	; (80083a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d02c      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a6b      	ldr	r2, [pc, #428]	; (80083a8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d027      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a69      	ldr	r2, [pc, #420]	; (80083ac <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d022      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a68      	ldr	r2, [pc, #416]	; (80083b0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d01d      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a66      	ldr	r2, [pc, #408]	; (80083b4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d018      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a65      	ldr	r2, [pc, #404]	; (80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d013      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a63      	ldr	r2, [pc, #396]	; (80083bc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00e      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a62      	ldr	r2, [pc, #392]	; (80083c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d009      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a60      	ldr	r2, [pc, #384]	; (80083c4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d004      	beq.n	8008250 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a5f      	ldr	r2, [pc, #380]	; (80083c8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d101      	bne.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01a      	beq.n	8008290 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d007      	beq.n	8008278 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008276:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800828e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a35      	ldr	r2, [pc, #212]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d04a      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a34      	ldr	r2, [pc, #208]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d045      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a32      	ldr	r2, [pc, #200]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d040      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a31      	ldr	r2, [pc, #196]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d03b      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a2f      	ldr	r2, [pc, #188]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d036      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a2e      	ldr	r2, [pc, #184]	; (8008380 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d031      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2c      	ldr	r2, [pc, #176]	; (8008384 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d02c      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a2b      	ldr	r2, [pc, #172]	; (8008388 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d027      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a29      	ldr	r2, [pc, #164]	; (800838c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d022      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a28      	ldr	r2, [pc, #160]	; (8008390 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d01d      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a26      	ldr	r2, [pc, #152]	; (8008394 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d018      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a25      	ldr	r2, [pc, #148]	; (8008398 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d013      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a23      	ldr	r2, [pc, #140]	; (800839c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00e      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a22      	ldr	r2, [pc, #136]	; (80083a0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d009      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a20      	ldr	r2, [pc, #128]	; (80083a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a1f      	ldr	r2, [pc, #124]	; (80083a8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d108      	bne.n	8008342 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e00e      	b.n	8008360 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f042 0201 	orr.w	r2, r2, #1
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	e005      	b.n	8008360 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800835a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	40020010 	.word	0x40020010
 8008370:	40020028 	.word	0x40020028
 8008374:	40020040 	.word	0x40020040
 8008378:	40020058 	.word	0x40020058
 800837c:	40020070 	.word	0x40020070
 8008380:	40020088 	.word	0x40020088
 8008384:	400200a0 	.word	0x400200a0
 8008388:	400200b8 	.word	0x400200b8
 800838c:	40020410 	.word	0x40020410
 8008390:	40020428 	.word	0x40020428
 8008394:	40020440 	.word	0x40020440
 8008398:	40020458 	.word	0x40020458
 800839c:	40020470 	.word	0x40020470
 80083a0:	40020488 	.word	0x40020488
 80083a4:	400204a0 	.word	0x400204a0
 80083a8:	400204b8 	.word	0x400204b8
 80083ac:	58025408 	.word	0x58025408
 80083b0:	5802541c 	.word	0x5802541c
 80083b4:	58025430 	.word	0x58025430
 80083b8:	58025444 	.word	0x58025444
 80083bc:	58025458 	.word	0x58025458
 80083c0:	5802546c 	.word	0x5802546c
 80083c4:	58025480 	.word	0x58025480
 80083c8:	58025494 	.word	0x58025494

080083cc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a39      	ldr	r2, [pc, #228]	; (80084c4 <HAL_DMAEx_ChangeMemory+0xf8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d04a      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a37      	ldr	r2, [pc, #220]	; (80084c8 <HAL_DMAEx_ChangeMemory+0xfc>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d045      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a36      	ldr	r2, [pc, #216]	; (80084cc <HAL_DMAEx_ChangeMemory+0x100>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d040      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a34      	ldr	r2, [pc, #208]	; (80084d0 <HAL_DMAEx_ChangeMemory+0x104>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d03b      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a33      	ldr	r2, [pc, #204]	; (80084d4 <HAL_DMAEx_ChangeMemory+0x108>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d036      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a31      	ldr	r2, [pc, #196]	; (80084d8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d031      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a30      	ldr	r2, [pc, #192]	; (80084dc <HAL_DMAEx_ChangeMemory+0x110>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d02c      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a2e      	ldr	r2, [pc, #184]	; (80084e0 <HAL_DMAEx_ChangeMemory+0x114>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d027      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a2d      	ldr	r2, [pc, #180]	; (80084e4 <HAL_DMAEx_ChangeMemory+0x118>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d022      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a2b      	ldr	r2, [pc, #172]	; (80084e8 <HAL_DMAEx_ChangeMemory+0x11c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01d      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a2a      	ldr	r2, [pc, #168]	; (80084ec <HAL_DMAEx_ChangeMemory+0x120>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d018      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a28      	ldr	r2, [pc, #160]	; (80084f0 <HAL_DMAEx_ChangeMemory+0x124>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d013      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a27      	ldr	r2, [pc, #156]	; (80084f4 <HAL_DMAEx_ChangeMemory+0x128>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00e      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a25      	ldr	r2, [pc, #148]	; (80084f8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d009      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a24      	ldr	r2, [pc, #144]	; (80084fc <HAL_DMAEx_ChangeMemory+0x130>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d004      	beq.n	800847a <HAL_DMAEx_ChangeMemory+0xae>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a22      	ldr	r2, [pc, #136]	; (8008500 <HAL_DMAEx_ChangeMemory+0x134>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d101      	bne.n	800847e <HAL_DMAEx_ChangeMemory+0xb2>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <HAL_DMAEx_ChangeMemory+0xb4>
 800847e:	2300      	movs	r3, #0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00c      	beq.n	800849e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	60da      	str	r2, [r3, #12]
 8008492:	e010      	b.n	80084b6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	611a      	str	r2, [r3, #16]
 800849c:	e00b      	b.n	80084b6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	60da      	str	r2, [r3, #12]
 80084ac:	e003      	b.n	80084b6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	40020010 	.word	0x40020010
 80084c8:	40020028 	.word	0x40020028
 80084cc:	40020040 	.word	0x40020040
 80084d0:	40020058 	.word	0x40020058
 80084d4:	40020070 	.word	0x40020070
 80084d8:	40020088 	.word	0x40020088
 80084dc:	400200a0 	.word	0x400200a0
 80084e0:	400200b8 	.word	0x400200b8
 80084e4:	40020410 	.word	0x40020410
 80084e8:	40020428 	.word	0x40020428
 80084ec:	40020440 	.word	0x40020440
 80084f0:	40020458 	.word	0x40020458
 80084f4:	40020470 	.word	0x40020470
 80084f8:	40020488 	.word	0x40020488
 80084fc:	400204a0 	.word	0x400204a0
 8008500:	400204b8 	.word	0x400204b8

08008504 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a46      	ldr	r2, [pc, #280]	; (8008630 <DMA_MultiBufferSetConfig+0x12c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d04a      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a44      	ldr	r2, [pc, #272]	; (8008634 <DMA_MultiBufferSetConfig+0x130>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d045      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a43      	ldr	r2, [pc, #268]	; (8008638 <DMA_MultiBufferSetConfig+0x134>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d040      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a41      	ldr	r2, [pc, #260]	; (800863c <DMA_MultiBufferSetConfig+0x138>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d03b      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a40      	ldr	r2, [pc, #256]	; (8008640 <DMA_MultiBufferSetConfig+0x13c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d036      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a3e      	ldr	r2, [pc, #248]	; (8008644 <DMA_MultiBufferSetConfig+0x140>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d031      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3d      	ldr	r2, [pc, #244]	; (8008648 <DMA_MultiBufferSetConfig+0x144>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d02c      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a3b      	ldr	r2, [pc, #236]	; (800864c <DMA_MultiBufferSetConfig+0x148>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d027      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a3a      	ldr	r2, [pc, #232]	; (8008650 <DMA_MultiBufferSetConfig+0x14c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d022      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a38      	ldr	r2, [pc, #224]	; (8008654 <DMA_MultiBufferSetConfig+0x150>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01d      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a37      	ldr	r2, [pc, #220]	; (8008658 <DMA_MultiBufferSetConfig+0x154>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d018      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a35      	ldr	r2, [pc, #212]	; (800865c <DMA_MultiBufferSetConfig+0x158>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a34      	ldr	r2, [pc, #208]	; (8008660 <DMA_MultiBufferSetConfig+0x15c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00e      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a32      	ldr	r2, [pc, #200]	; (8008664 <DMA_MultiBufferSetConfig+0x160>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d009      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a31      	ldr	r2, [pc, #196]	; (8008668 <DMA_MultiBufferSetConfig+0x164>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d004      	beq.n	80085b2 <DMA_MultiBufferSetConfig+0xae>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a2f      	ldr	r2, [pc, #188]	; (800866c <DMA_MultiBufferSetConfig+0x168>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d101      	bne.n	80085b6 <DMA_MultiBufferSetConfig+0xb2>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e000      	b.n	80085b8 <DMA_MultiBufferSetConfig+0xb4>
 80085b6:	2300      	movs	r3, #0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d019      	beq.n	80085f0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b40      	cmp	r3, #64	; 0x40
 80085ca:	d108      	bne.n	80085de <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80085dc:	e021      	b.n	8008622 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	60da      	str	r2, [r3, #12]
}
 80085ee:	e018      	b.n	8008622 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	d108      	bne.n	8008612 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	60da      	str	r2, [r3, #12]
}
 8008610:	e007      	b.n	8008622 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	60da      	str	r2, [r3, #12]
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	40020010 	.word	0x40020010
 8008634:	40020028 	.word	0x40020028
 8008638:	40020040 	.word	0x40020040
 800863c:	40020058 	.word	0x40020058
 8008640:	40020070 	.word	0x40020070
 8008644:	40020088 	.word	0x40020088
 8008648:	400200a0 	.word	0x400200a0
 800864c:	400200b8 	.word	0x400200b8
 8008650:	40020410 	.word	0x40020410
 8008654:	40020428 	.word	0x40020428
 8008658:	40020440 	.word	0x40020440
 800865c:	40020458 	.word	0x40020458
 8008660:	40020470 	.word	0x40020470
 8008664:	40020488 	.word	0x40020488
 8008668:	400204a0 	.word	0x400204a0
 800866c:	400204b8 	.word	0x400204b8

08008670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008670:	b480      	push	{r7}
 8008672:	b089      	sub	sp, #36	; 0x24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800867a:	2300      	movs	r3, #0
 800867c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800867e:	4b89      	ldr	r3, [pc, #548]	; (80088a4 <HAL_GPIO_Init+0x234>)
 8008680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008682:	e194      	b.n	80089ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	2101      	movs	r1, #1
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	4013      	ands	r3, r2
 8008692:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 8186 	beq.w	80089a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d005      	beq.n	80086b4 <HAL_GPIO_Init+0x44>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d130      	bne.n	8008716 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	2203      	movs	r2, #3
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	43db      	mvns	r3, r3
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	4013      	ands	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	4313      	orrs	r3, r2
 80086dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086ea:	2201      	movs	r2, #1
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	43db      	mvns	r3, r3
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	4013      	ands	r3, r2
 80086f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	091b      	lsrs	r3, r3, #4
 8008700:	f003 0201 	and.w	r2, r3, #1
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	fa02 f303 	lsl.w	r3, r2, r3
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4313      	orrs	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b03      	cmp	r3, #3
 8008720:	d017      	beq.n	8008752 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	2203      	movs	r2, #3
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	43db      	mvns	r3, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4013      	ands	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	fa02 f303 	lsl.w	r3, r2, r3
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	4313      	orrs	r3, r2
 800874a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d123      	bne.n	80087a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	08da      	lsrs	r2, r3, #3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3208      	adds	r2, #8
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	220f      	movs	r2, #15
 8008776:	fa02 f303 	lsl.w	r3, r2, r3
 800877a:	43db      	mvns	r3, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4013      	ands	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	691a      	ldr	r2, [r3, #16]
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	fa02 f303 	lsl.w	r3, r2, r3
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	4313      	orrs	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	08da      	lsrs	r2, r3, #3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3208      	adds	r2, #8
 80087a0:	69b9      	ldr	r1, [r7, #24]
 80087a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	2203      	movs	r2, #3
 80087b2:	fa02 f303 	lsl.w	r3, r2, r3
 80087b6:	43db      	mvns	r3, r3
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	4013      	ands	r3, r2
 80087bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f003 0203 	and.w	r2, r3, #3
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	fa02 f303 	lsl.w	r3, r2, r3
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80e0 	beq.w	80089a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087e8:	4b2f      	ldr	r3, [pc, #188]	; (80088a8 <HAL_GPIO_Init+0x238>)
 80087ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80087ee:	4a2e      	ldr	r2, [pc, #184]	; (80088a8 <HAL_GPIO_Init+0x238>)
 80087f0:	f043 0302 	orr.w	r3, r3, #2
 80087f4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80087f8:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <HAL_GPIO_Init+0x238>)
 80087fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008806:	4a29      	ldr	r2, [pc, #164]	; (80088ac <HAL_GPIO_Init+0x23c>)
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	089b      	lsrs	r3, r3, #2
 800880c:	3302      	adds	r3, #2
 800880e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	220f      	movs	r2, #15
 800881e:	fa02 f303 	lsl.w	r3, r2, r3
 8008822:	43db      	mvns	r3, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4013      	ands	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a20      	ldr	r2, [pc, #128]	; (80088b0 <HAL_GPIO_Init+0x240>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d052      	beq.n	80088d8 <HAL_GPIO_Init+0x268>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <HAL_GPIO_Init+0x244>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d031      	beq.n	800889e <HAL_GPIO_Init+0x22e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1e      	ldr	r2, [pc, #120]	; (80088b8 <HAL_GPIO_Init+0x248>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d02b      	beq.n	800889a <HAL_GPIO_Init+0x22a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a1d      	ldr	r2, [pc, #116]	; (80088bc <HAL_GPIO_Init+0x24c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d025      	beq.n	8008896 <HAL_GPIO_Init+0x226>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <HAL_GPIO_Init+0x250>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d01f      	beq.n	8008892 <HAL_GPIO_Init+0x222>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1b      	ldr	r2, [pc, #108]	; (80088c4 <HAL_GPIO_Init+0x254>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d019      	beq.n	800888e <HAL_GPIO_Init+0x21e>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <HAL_GPIO_Init+0x258>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <HAL_GPIO_Init+0x21a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a19      	ldr	r2, [pc, #100]	; (80088cc <HAL_GPIO_Init+0x25c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00d      	beq.n	8008886 <HAL_GPIO_Init+0x216>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a18      	ldr	r2, [pc, #96]	; (80088d0 <HAL_GPIO_Init+0x260>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d007      	beq.n	8008882 <HAL_GPIO_Init+0x212>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a17      	ldr	r2, [pc, #92]	; (80088d4 <HAL_GPIO_Init+0x264>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d101      	bne.n	800887e <HAL_GPIO_Init+0x20e>
 800887a:	2309      	movs	r3, #9
 800887c:	e02d      	b.n	80088da <HAL_GPIO_Init+0x26a>
 800887e:	230a      	movs	r3, #10
 8008880:	e02b      	b.n	80088da <HAL_GPIO_Init+0x26a>
 8008882:	2308      	movs	r3, #8
 8008884:	e029      	b.n	80088da <HAL_GPIO_Init+0x26a>
 8008886:	2307      	movs	r3, #7
 8008888:	e027      	b.n	80088da <HAL_GPIO_Init+0x26a>
 800888a:	2306      	movs	r3, #6
 800888c:	e025      	b.n	80088da <HAL_GPIO_Init+0x26a>
 800888e:	2305      	movs	r3, #5
 8008890:	e023      	b.n	80088da <HAL_GPIO_Init+0x26a>
 8008892:	2304      	movs	r3, #4
 8008894:	e021      	b.n	80088da <HAL_GPIO_Init+0x26a>
 8008896:	2303      	movs	r3, #3
 8008898:	e01f      	b.n	80088da <HAL_GPIO_Init+0x26a>
 800889a:	2302      	movs	r3, #2
 800889c:	e01d      	b.n	80088da <HAL_GPIO_Init+0x26a>
 800889e:	2301      	movs	r3, #1
 80088a0:	e01b      	b.n	80088da <HAL_GPIO_Init+0x26a>
 80088a2:	bf00      	nop
 80088a4:	58000080 	.word	0x58000080
 80088a8:	58024400 	.word	0x58024400
 80088ac:	58000400 	.word	0x58000400
 80088b0:	58020000 	.word	0x58020000
 80088b4:	58020400 	.word	0x58020400
 80088b8:	58020800 	.word	0x58020800
 80088bc:	58020c00 	.word	0x58020c00
 80088c0:	58021000 	.word	0x58021000
 80088c4:	58021400 	.word	0x58021400
 80088c8:	58021800 	.word	0x58021800
 80088cc:	58021c00 	.word	0x58021c00
 80088d0:	58022000 	.word	0x58022000
 80088d4:	58022400 	.word	0x58022400
 80088d8:	2300      	movs	r3, #0
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	f002 0203 	and.w	r2, r2, #3
 80088e0:	0092      	lsls	r2, r2, #2
 80088e2:	4093      	lsls	r3, r2
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ea:	4938      	ldr	r1, [pc, #224]	; (80089cc <HAL_GPIO_Init+0x35c>)
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	089b      	lsrs	r3, r3, #2
 80088f0:	3302      	adds	r3, #2
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	43db      	mvns	r3, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	4013      	ands	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800891e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	43db      	mvns	r3, r3
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	4013      	ands	r3, r2
 8008936:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800894c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	43db      	mvns	r3, r3
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	4013      	ands	r3, r2
 8008962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	4313      	orrs	r3, r2
 8008976:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	43db      	mvns	r3, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4013      	ands	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	3301      	adds	r3, #1
 80089ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f47f ae63 	bne.w	8008684 <HAL_GPIO_Init+0x14>
  }
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	3724      	adds	r7, #36	; 0x24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	58000400 	.word	0x58000400

080089d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089de:	4b75      	ldr	r3, [pc, #468]	; (8008bb4 <HAL_GPIO_DeInit+0x1e4>)
 80089e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80089e2:	e0d9      	b.n	8008b98 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80089e4:	2201      	movs	r2, #1
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	4013      	ands	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80cc 	beq.w	8008b92 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80089fa:	4a6f      	ldr	r2, [pc, #444]	; (8008bb8 <HAL_GPIO_DeInit+0x1e8>)
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	089b      	lsrs	r3, r3, #2
 8008a00:	3302      	adds	r3, #2
 8008a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a06:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	220f      	movs	r2, #15
 8008a12:	fa02 f303 	lsl.w	r3, r2, r3
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a67      	ldr	r2, [pc, #412]	; (8008bbc <HAL_GPIO_DeInit+0x1ec>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d037      	beq.n	8008a94 <HAL_GPIO_DeInit+0xc4>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a66      	ldr	r2, [pc, #408]	; (8008bc0 <HAL_GPIO_DeInit+0x1f0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d031      	beq.n	8008a90 <HAL_GPIO_DeInit+0xc0>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a65      	ldr	r2, [pc, #404]	; (8008bc4 <HAL_GPIO_DeInit+0x1f4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d02b      	beq.n	8008a8c <HAL_GPIO_DeInit+0xbc>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a64      	ldr	r2, [pc, #400]	; (8008bc8 <HAL_GPIO_DeInit+0x1f8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d025      	beq.n	8008a88 <HAL_GPIO_DeInit+0xb8>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a63      	ldr	r2, [pc, #396]	; (8008bcc <HAL_GPIO_DeInit+0x1fc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d01f      	beq.n	8008a84 <HAL_GPIO_DeInit+0xb4>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a62      	ldr	r2, [pc, #392]	; (8008bd0 <HAL_GPIO_DeInit+0x200>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d019      	beq.n	8008a80 <HAL_GPIO_DeInit+0xb0>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a61      	ldr	r2, [pc, #388]	; (8008bd4 <HAL_GPIO_DeInit+0x204>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d013      	beq.n	8008a7c <HAL_GPIO_DeInit+0xac>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a60      	ldr	r2, [pc, #384]	; (8008bd8 <HAL_GPIO_DeInit+0x208>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00d      	beq.n	8008a78 <HAL_GPIO_DeInit+0xa8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a5f      	ldr	r2, [pc, #380]	; (8008bdc <HAL_GPIO_DeInit+0x20c>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d007      	beq.n	8008a74 <HAL_GPIO_DeInit+0xa4>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a5e      	ldr	r2, [pc, #376]	; (8008be0 <HAL_GPIO_DeInit+0x210>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d101      	bne.n	8008a70 <HAL_GPIO_DeInit+0xa0>
 8008a6c:	2309      	movs	r3, #9
 8008a6e:	e012      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a70:	230a      	movs	r3, #10
 8008a72:	e010      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a74:	2308      	movs	r3, #8
 8008a76:	e00e      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a78:	2307      	movs	r3, #7
 8008a7a:	e00c      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a7c:	2306      	movs	r3, #6
 8008a7e:	e00a      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a80:	2305      	movs	r3, #5
 8008a82:	e008      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a84:	2304      	movs	r3, #4
 8008a86:	e006      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e004      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e002      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <HAL_GPIO_DeInit+0xc6>
 8008a94:	2300      	movs	r3, #0
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	f002 0203 	and.w	r2, r2, #3
 8008a9c:	0092      	lsls	r2, r2, #2
 8008a9e:	4093      	lsls	r3, r2
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d136      	bne.n	8008b14 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	43db      	mvns	r3, r3
 8008aae:	401a      	ands	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	43db      	mvns	r3, r3
 8008abc:	401a      	ands	r2, r3
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	43db      	mvns	r3, r3
 8008acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	43db      	mvns	r3, r3
 8008ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	220f      	movs	r2, #15
 8008af0:	fa02 f303 	lsl.w	r3, r2, r3
 8008af4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008af6:	4a30      	ldr	r2, [pc, #192]	; (8008bb8 <HAL_GPIO_DeInit+0x1e8>)
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	089b      	lsrs	r3, r3, #2
 8008afc:	3302      	adds	r3, #2
 8008afe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	43da      	mvns	r2, r3
 8008b06:	482c      	ldr	r0, [pc, #176]	; (8008bb8 <HAL_GPIO_DeInit+0x1e8>)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	089b      	lsrs	r3, r3, #2
 8008b0c:	400a      	ands	r2, r1
 8008b0e:	3302      	adds	r3, #2
 8008b10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	2103      	movs	r1, #3
 8008b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	08da      	lsrs	r2, r3, #3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3208      	adds	r2, #8
 8008b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	220f      	movs	r2, #15
 8008b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b42:	43db      	mvns	r3, r3
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	08d2      	lsrs	r2, r2, #3
 8008b48:	4019      	ands	r1, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3208      	adds	r2, #8
 8008b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	2103      	movs	r1, #3
 8008b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	fa01 f303 	lsl.w	r3, r1, r3
 8008b74:	43db      	mvns	r3, r3
 8008b76:	401a      	ands	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	2103      	movs	r1, #3
 8008b86:	fa01 f303 	lsl.w	r3, r1, r3
 8008b8a:	43db      	mvns	r3, r3
 8008b8c:	401a      	ands	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	3301      	adds	r3, #1
 8008b96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f47f af1f 	bne.w	80089e4 <HAL_GPIO_DeInit+0x14>
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	58000080 	.word	0x58000080
 8008bb8:	58000400 	.word	0x58000400
 8008bbc:	58020000 	.word	0x58020000
 8008bc0:	58020400 	.word	0x58020400
 8008bc4:	58020800 	.word	0x58020800
 8008bc8:	58020c00 	.word	0x58020c00
 8008bcc:	58021000 	.word	0x58021000
 8008bd0:	58021400 	.word	0x58021400
 8008bd4:	58021800 	.word	0x58021800
 8008bd8:	58021c00 	.word	0x58021c00
 8008bdc:	58022000 	.word	0x58022000
 8008be0:	58022400 	.word	0x58022400

08008be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	807b      	strh	r3, [r7, #2]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bf4:	787b      	ldrb	r3, [r7, #1]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bfa:	887a      	ldrh	r2, [r7, #2]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c00:	e003      	b.n	8008c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c02:	887b      	ldrh	r3, [r7, #2]
 8008c04:	041a      	lsls	r2, r3, #16
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	619a      	str	r2, [r3, #24]
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008c28:	887a      	ldrh	r2, [r7, #2]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	041a      	lsls	r2, r3, #16
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	43d9      	mvns	r1, r3
 8008c34:	887b      	ldrh	r3, [r7, #2]
 8008c36:	400b      	ands	r3, r1
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	619a      	str	r2, [r3, #24]
}
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
	...

08008c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e07f      	b.n	8008d5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f8a9 	bl	8008dca <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2224      	movs	r2, #36	; 0x24
 8008c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0201 	bic.w	r2, r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d107      	bne.n	8008cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	e006      	b.n	8008cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d104      	bne.n	8008ce6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ce4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6859      	ldr	r1, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b1d      	ldr	r3, [pc, #116]	; (8008d68 <HAL_I2C_Init+0x11c>)
 8008cf2:	430b      	orrs	r3, r1
 8008cf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	69d9      	ldr	r1, [r3, #28]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1a      	ldr	r2, [r3, #32]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	02008000 	.word	0x02008000

08008d6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e021      	b.n	8008dc2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2224      	movs	r2, #36	; 0x24
 8008d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0201 	bic.w	r2, r2, #1
 8008d94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f821 	bl	8008dde <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	4611      	mov	r1, r2
 8008e00:	461a      	mov	r2, r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	817b      	strh	r3, [r7, #10]
 8008e06:	460b      	mov	r3, r1
 8008e08:	813b      	strh	r3, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	f040 80f9 	bne.w	800900e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <HAL_I2C_Mem_Write+0x34>
 8008e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d105      	bne.n	8008e34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e0ed      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_I2C_Mem_Write+0x4e>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e0e6      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e4a:	f7fb fa51 	bl	80042f0 <HAL_GetTick>
 8008e4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	2319      	movs	r3, #25
 8008e56:	2201      	movs	r2, #1
 8008e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fadd 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e0d1      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2221      	movs	r2, #33	; 0x21
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2240      	movs	r2, #64	; 0x40
 8008e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a3a      	ldr	r2, [r7, #32]
 8008e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e94:	88f8      	ldrh	r0, [r7, #6]
 8008e96:	893a      	ldrh	r2, [r7, #8]
 8008e98:	8979      	ldrh	r1, [r7, #10]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f9ed 	bl	8009284 <I2C_RequestMemoryWrite>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e0a9      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2bff      	cmp	r3, #255	; 0xff
 8008ec4:	d90e      	bls.n	8008ee4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	22ff      	movs	r2, #255	; 0xff
 8008eca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	8979      	ldrh	r1, [r7, #10]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 fc57 	bl	8009790 <I2C_TransferConfig>
 8008ee2:	e00f      	b.n	8008f04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	8979      	ldrh	r1, [r7, #10]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 fc46 	bl	8009790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 fad6 	bl	80094ba <I2C_WaitOnTXISFlagUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e07b      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d034      	beq.n	8008fbc <HAL_I2C_Mem_Write+0x1c8>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d130      	bne.n	8008fbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	2200      	movs	r2, #0
 8008f62:	2180      	movs	r1, #128	; 0x80
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fa59 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e04d      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	2bff      	cmp	r3, #255	; 0xff
 8008f7c:	d90e      	bls.n	8008f9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	22ff      	movs	r2, #255	; 0xff
 8008f82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	8979      	ldrh	r1, [r7, #10]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 fbfb 	bl	8009790 <I2C_TransferConfig>
 8008f9a:	e00f      	b.n	8008fbc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	8979      	ldrh	r1, [r7, #10]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fbea 	bl	8009790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d19e      	bne.n	8008f04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fabc 	bl	8009548 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e01a      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6859      	ldr	r1, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <HAL_I2C_Mem_Write+0x224>)
 8008fee:	400b      	ands	r3, r1
 8008ff0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e000      	b.n	8009010 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800900e:	2302      	movs	r3, #2
  }
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	fe00e800 	.word	0xfe00e800

0800901c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af02      	add	r7, sp, #8
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	4608      	mov	r0, r1
 8009026:	4611      	mov	r1, r2
 8009028:	461a      	mov	r2, r3
 800902a:	4603      	mov	r3, r0
 800902c:	817b      	strh	r3, [r7, #10]
 800902e:	460b      	mov	r3, r1
 8009030:	813b      	strh	r3, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b20      	cmp	r3, #32
 8009040:	f040 80fd 	bne.w	800923e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <HAL_I2C_Mem_Read+0x34>
 800904a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d105      	bne.n	800905c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009056:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e0f1      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <HAL_I2C_Mem_Read+0x4e>
 8009066:	2302      	movs	r3, #2
 8009068:	e0ea      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009072:	f7fb f93d 	bl	80042f0 <HAL_GetTick>
 8009076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	2319      	movs	r3, #25
 800907e:	2201      	movs	r2, #1
 8009080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 f9c9 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0d5      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2222      	movs	r2, #34	; 0x22
 8009098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2240      	movs	r2, #64	; 0x40
 80090a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a3a      	ldr	r2, [r7, #32]
 80090ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090bc:	88f8      	ldrh	r0, [r7, #6]
 80090be:	893a      	ldrh	r2, [r7, #8]
 80090c0:	8979      	ldrh	r1, [r7, #10]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	4603      	mov	r3, r0
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f92d 	bl	800932c <I2C_RequestMemoryRead>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e0ad      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2bff      	cmp	r3, #255	; 0xff
 80090ec:	d90e      	bls.n	800910c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	22ff      	movs	r2, #255	; 0xff
 80090f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	8979      	ldrh	r1, [r7, #10]
 80090fc:	4b52      	ldr	r3, [pc, #328]	; (8009248 <HAL_I2C_Mem_Read+0x22c>)
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 fb43 	bl	8009790 <I2C_TransferConfig>
 800910a:	e00f      	b.n	800912c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911a:	b2da      	uxtb	r2, r3
 800911c:	8979      	ldrh	r1, [r7, #10]
 800911e:	4b4a      	ldr	r3, [pc, #296]	; (8009248 <HAL_I2C_Mem_Read+0x22c>)
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 fb32 	bl	8009790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	2200      	movs	r2, #0
 8009134:	2104      	movs	r1, #4
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 f970 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e07c      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	b2d2      	uxtb	r2, r2
 8009152:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009162:	3b01      	subs	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917c:	b29b      	uxth	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d034      	beq.n	80091ec <HAL_I2C_Mem_Read+0x1d0>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009186:	2b00      	cmp	r3, #0
 8009188:	d130      	bne.n	80091ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	2200      	movs	r2, #0
 8009192:	2180      	movs	r1, #128	; 0x80
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f941 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e04d      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2bff      	cmp	r3, #255	; 0xff
 80091ac:	d90e      	bls.n	80091cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	22ff      	movs	r2, #255	; 0xff
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	8979      	ldrh	r1, [r7, #10]
 80091bc:	2300      	movs	r3, #0
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 fae3 	bl	8009790 <I2C_TransferConfig>
 80091ca:	e00f      	b.n	80091ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	8979      	ldrh	r1, [r7, #10]
 80091de:	2300      	movs	r3, #0
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 fad2 	bl	8009790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d19a      	bne.n	800912c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 f9a4 	bl	8009548 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e01a      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2220      	movs	r2, #32
 8009210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6859      	ldr	r1, [r3, #4]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	4b0b      	ldr	r3, [pc, #44]	; (800924c <HAL_I2C_Mem_Read+0x230>)
 800921e:	400b      	ands	r3, r1
 8009220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2220      	movs	r2, #32
 8009226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	e000      	b.n	8009240 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800923e:	2302      	movs	r3, #2
  }
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	80002400 	.word	0x80002400
 800924c:	fe00e800 	.word	0xfe00e800

08009250 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800925e:	b2db      	uxtb	r3, r3
}
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af02      	add	r7, sp, #8
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	461a      	mov	r2, r3
 8009292:	4603      	mov	r3, r0
 8009294:	817b      	strh	r3, [r7, #10]
 8009296:	460b      	mov	r3, r1
 8009298:	813b      	strh	r3, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	8979      	ldrh	r1, [r7, #10]
 80092a4:	4b20      	ldr	r3, [pc, #128]	; (8009328 <I2C_RequestMemoryWrite+0xa4>)
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 fa6f 	bl	8009790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092b2:	69fa      	ldr	r2, [r7, #28]
 80092b4:	69b9      	ldr	r1, [r7, #24]
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 f8ff 	bl	80094ba <I2C_WaitOnTXISFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e02c      	b.n	8009320 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d105      	bne.n	80092d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092cc:	893b      	ldrh	r3, [r7, #8]
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	629a      	str	r2, [r3, #40]	; 0x28
 80092d6:	e015      	b.n	8009304 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80092d8:	893b      	ldrh	r3, [r7, #8]
 80092da:	0a1b      	lsrs	r3, r3, #8
 80092dc:	b29b      	uxth	r3, r3
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092e6:	69fa      	ldr	r2, [r7, #28]
 80092e8:	69b9      	ldr	r1, [r7, #24]
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f8e5 	bl	80094ba <I2C_WaitOnTXISFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e012      	b.n	8009320 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092fa:	893b      	ldrh	r3, [r7, #8]
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2200      	movs	r2, #0
 800930c:	2180      	movs	r1, #128	; 0x80
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f884 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	80002000 	.word	0x80002000

0800932c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af02      	add	r7, sp, #8
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	4608      	mov	r0, r1
 8009336:	4611      	mov	r1, r2
 8009338:	461a      	mov	r2, r3
 800933a:	4603      	mov	r3, r0
 800933c:	817b      	strh	r3, [r7, #10]
 800933e:	460b      	mov	r3, r1
 8009340:	813b      	strh	r3, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	b2da      	uxtb	r2, r3
 800934a:	8979      	ldrh	r1, [r7, #10]
 800934c:	4b20      	ldr	r3, [pc, #128]	; (80093d0 <I2C_RequestMemoryRead+0xa4>)
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	2300      	movs	r3, #0
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fa1c 	bl	8009790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	69b9      	ldr	r1, [r7, #24]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f8ac 	bl	80094ba <I2C_WaitOnTXISFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e02c      	b.n	80093c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d105      	bne.n	800937e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009372:	893b      	ldrh	r3, [r7, #8]
 8009374:	b2da      	uxtb	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	629a      	str	r2, [r3, #40]	; 0x28
 800937c:	e015      	b.n	80093aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800937e:	893b      	ldrh	r3, [r7, #8]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	b29b      	uxth	r3, r3
 8009384:	b2da      	uxtb	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	69b9      	ldr	r1, [r7, #24]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f892 	bl	80094ba <I2C_WaitOnTXISFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e012      	b.n	80093c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80093a0:	893b      	ldrh	r3, [r7, #8]
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2200      	movs	r2, #0
 80093b2:	2140      	movs	r1, #64	; 0x40
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 f831 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e000      	b.n	80093c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	80002000 	.word	0x80002000

080093d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d103      	bne.n	80093f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d007      	beq.n	8009410 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0201 	orr.w	r2, r2, #1
 800940e:	619a      	str	r2, [r3, #24]
  }
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	4613      	mov	r3, r2
 800942a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800942c:	e031      	b.n	8009492 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009434:	d02d      	beq.n	8009492 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009436:	f7fa ff5b 	bl	80042f0 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	429a      	cmp	r2, r3
 8009444:	d302      	bcc.n	800944c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d122      	bne.n	8009492 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4013      	ands	r3, r2
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	429a      	cmp	r2, r3
 800945a:	bf0c      	ite	eq
 800945c:	2301      	moveq	r3, #1
 800945e:	2300      	movne	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	429a      	cmp	r2, r3
 8009468:	d113      	bne.n	8009492 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946e:	f043 0220 	orr.w	r2, r3, #32
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e00f      	b.n	80094b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699a      	ldr	r2, [r3, #24]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4013      	ands	r3, r2
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	429a      	cmp	r2, r3
 80094a0:	bf0c      	ite	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	2300      	movne	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d0be      	beq.n	800942e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094c6:	e033      	b.n	8009530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	68b9      	ldr	r1, [r7, #8]
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 f87f 	bl	80095d0 <I2C_IsErrorOccurred>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e031      	b.n	8009540 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e2:	d025      	beq.n	8009530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094e4:	f7fa ff04 	bl	80042f0 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d302      	bcc.n	80094fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d11a      	bne.n	8009530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b02      	cmp	r3, #2
 8009506:	d013      	beq.n	8009530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950c:	f043 0220 	orr.w	r2, r3, #32
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2220      	movs	r2, #32
 8009518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e007      	b.n	8009540 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b02      	cmp	r3, #2
 800953c:	d1c4      	bne.n	80094c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009554:	e02f      	b.n	80095b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f838 	bl	80095d0 <I2C_IsErrorOccurred>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e02d      	b.n	80095c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800956a:	f7fa fec1 	bl	80042f0 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	429a      	cmp	r2, r3
 8009578:	d302      	bcc.n	8009580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d11a      	bne.n	80095b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f003 0320 	and.w	r3, r3, #32
 800958a:	2b20      	cmp	r3, #32
 800958c:	d013      	beq.n	80095b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009592:	f043 0220 	orr.w	r2, r3, #32
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2220      	movs	r2, #32
 800959e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e007      	b.n	80095c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d1c8      	bne.n	8009556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	; 0x28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d068      	beq.n	80096ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2210      	movs	r2, #16
 8009602:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009604:	e049      	b.n	800969a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800960c:	d045      	beq.n	800969a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800960e:	f7fa fe6f 	bl	80042f0 <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	429a      	cmp	r2, r3
 800961c:	d302      	bcc.n	8009624 <I2C_IsErrorOccurred+0x54>
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d13a      	bne.n	800969a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800962e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009636:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009646:	d121      	bne.n	800968c <I2C_IsErrorOccurred+0xbc>
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800964e:	d01d      	beq.n	800968c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009650:	7cfb      	ldrb	r3, [r7, #19]
 8009652:	2b20      	cmp	r3, #32
 8009654:	d01a      	beq.n	800968c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009664:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009666:	f7fa fe43 	bl	80042f0 <HAL_GetTick>
 800966a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800966c:	e00e      	b.n	800968c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800966e:	f7fa fe3f 	bl	80042f0 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	2b19      	cmp	r3, #25
 800967a:	d907      	bls.n	800968c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	f043 0320 	orr.w	r3, r3, #32
 8009682:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800968a:	e006      	b.n	800969a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b20      	cmp	r3, #32
 8009698:	d1e9      	bne.n	800966e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	f003 0320 	and.w	r3, r3, #32
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	d003      	beq.n	80096b0 <I2C_IsErrorOccurred+0xe0>
 80096a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0aa      	beq.n	8009606 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80096b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d103      	bne.n	80096c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2220      	movs	r2, #32
 80096be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	f043 0304 	orr.w	r3, r3, #4
 80096c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00b      	beq.n	80096f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00b      	beq.n	800971a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	f043 0308 	orr.w	r3, r3, #8
 8009708:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009712:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	f043 0302 	orr.w	r3, r3, #2
 800972a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800973c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01c      	beq.n	800977e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff fe45 	bl	80093d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6859      	ldr	r1, [r3, #4]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b0d      	ldr	r3, [pc, #52]	; (800978c <I2C_IsErrorOccurred+0x1bc>)
 8009756:	400b      	ands	r3, r1
 8009758:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	431a      	orrs	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2220      	movs	r2, #32
 800976a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800977e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009782:	4618      	mov	r0, r3
 8009784:	3728      	adds	r7, #40	; 0x28
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	fe00e800 	.word	0xfe00e800

08009790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	607b      	str	r3, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	817b      	strh	r3, [r7, #10]
 800979e:	4613      	mov	r3, r2
 80097a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097a2:	897b      	ldrh	r3, [r7, #10]
 80097a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097a8:	7a7b      	ldrb	r3, [r7, #9]
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	0d5b      	lsrs	r3, r3, #21
 80097ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80097ce:	4b08      	ldr	r3, [pc, #32]	; (80097f0 <I2C_TransferConfig+0x60>)
 80097d0:	430b      	orrs	r3, r1
 80097d2:	43db      	mvns	r3, r3
 80097d4:	ea02 0103 	and.w	r1, r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	430a      	orrs	r2, r1
 80097e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	03ff63ff 	.word	0x03ff63ff

080097f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b20      	cmp	r3, #32
 8009808:	d138      	bne.n	800987c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009814:	2302      	movs	r3, #2
 8009816:	e032      	b.n	800987e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2224      	movs	r2, #36	; 0x24
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0201 	bic.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6819      	ldr	r1, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	e000      	b.n	800987e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800987c:	2302      	movs	r3, #2
  }
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800988a:	b480      	push	{r7}
 800988c:	b085      	sub	sp, #20
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b20      	cmp	r3, #32
 800989e:	d139      	bne.n	8009914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e033      	b.n	8009916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2224      	movs	r2, #36	; 0x24
 80098ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80098dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	021b      	lsls	r3, r3, #8
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e000      	b.n	8009916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009914:	2302      	movs	r3, #2
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
	...

08009924 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e0bf      	b.n	8009ab6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7f7 fb6e 	bl	800102c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009966:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6999      	ldr	r1, [r3, #24]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800997c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6899      	ldr	r1, [r3, #8]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	4b4a      	ldr	r3, [pc, #296]	; (8009ac0 <HAL_LTDC_Init+0x19c>)
 8009998:	400b      	ands	r3, r1
 800999a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	041b      	lsls	r3, r3, #16
 80099a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6899      	ldr	r1, [r3, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68d9      	ldr	r1, [r3, #12]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4b3e      	ldr	r3, [pc, #248]	; (8009ac0 <HAL_LTDC_Init+0x19c>)
 80099c6:	400b      	ands	r3, r1
 80099c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	041b      	lsls	r3, r3, #16
 80099d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68d9      	ldr	r1, [r3, #12]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a1a      	ldr	r2, [r3, #32]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6919      	ldr	r1, [r3, #16]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b33      	ldr	r3, [pc, #204]	; (8009ac0 <HAL_LTDC_Init+0x19c>)
 80099f4:	400b      	ands	r3, r1
 80099f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	041b      	lsls	r3, r3, #16
 80099fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6919      	ldr	r1, [r3, #16]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6959      	ldr	r1, [r3, #20]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4b27      	ldr	r3, [pc, #156]	; (8009ac0 <HAL_LTDC_Init+0x19c>)
 8009a22:	400b      	ands	r3, r1
 8009a24:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	041b      	lsls	r3, r3, #16
 8009a2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6959      	ldr	r1, [r3, #20]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a4a:	021b      	lsls	r3, r3, #8
 8009a4c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a54:	041b      	lsls	r3, r3, #16
 8009a56:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 0206 	orr.w	r2, r2, #6
 8009a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0201 	orr.w	r2, r2, #1
 8009aa2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	f000f800 	.word	0xf000f800

08009ac4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ada:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f003 0304 	and.w	r3, r3, #4
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d023      	beq.n	8009b2e <HAL_LTDC_IRQHandler+0x6a>
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f003 0304 	and.w	r3, r3, #4
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01e      	beq.n	8009b2e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0204 	bic.w	r2, r2, #4
 8009afe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2204      	movs	r2, #4
 8009b06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b0e:	f043 0201 	orr.w	r2, r3, #1
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2204      	movs	r2, #4
 8009b1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f86f 	bl	8009c0c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f003 0302 	and.w	r3, r3, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d023      	beq.n	8009b80 <HAL_LTDC_IRQHandler+0xbc>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d01e      	beq.n	8009b80 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0202 	bic.w	r2, r2, #2
 8009b50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2202      	movs	r2, #2
 8009b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b60:	f043 0202 	orr.w	r2, r3, #2
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2204      	movs	r2, #4
 8009b6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f846 	bl	8009c0c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01b      	beq.n	8009bc2 <HAL_LTDC_IRQHandler+0xfe>
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d016      	beq.n	8009bc2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 0201 	bic.w	r2, r2, #1
 8009ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f82f 	bl	8009c20 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f003 0308 	and.w	r3, r3, #8
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01b      	beq.n	8009c04 <HAL_LTDC_IRQHandler+0x140>
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f003 0308 	and.w	r3, r3, #8
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d016      	beq.n	8009c04 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0208 	bic.w	r2, r2, #8
 8009be4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2208      	movs	r2, #8
 8009bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f818 	bl	8009c34 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009c04:	bf00      	nop
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c48:	b5b0      	push	{r4, r5, r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d101      	bne.n	8009c62 <HAL_LTDC_ConfigLayer+0x1a>
 8009c5e:	2302      	movs	r3, #2
 8009c60:	e02c      	b.n	8009cbc <HAL_LTDC_ConfigLayer+0x74>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2134      	movs	r1, #52	; 0x34
 8009c78:	fb01 f303 	mul.w	r3, r1, r3
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	4614      	mov	r4, r2
 8009c86:	461d      	mov	r5, r3
 8009c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 f811 	bl	8009cc4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bdb0      	pop	{r4, r5, r7, pc}

08009cc4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b089      	sub	sp, #36	; 0x24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	0c1b      	lsrs	r3, r3, #16
 8009cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ce0:	4413      	add	r3, r2
 8009ce2:	041b      	lsls	r3, r3, #16
 8009ce4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	01db      	lsls	r3, r3, #7
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3384      	adds	r3, #132	; 0x84
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	6812      	ldr	r2, [r2, #0]
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	01d2      	lsls	r2, r2, #7
 8009d00:	440a      	add	r2, r1
 8009d02:	3284      	adds	r2, #132	; 0x84
 8009d04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009d08:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	0c1b      	lsrs	r3, r3, #16
 8009d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d1a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d1c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4619      	mov	r1, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	01db      	lsls	r3, r3, #7
 8009d28:	440b      	add	r3, r1
 8009d2a:	3384      	adds	r3, #132	; 0x84
 8009d2c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d32:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	68da      	ldr	r2, [r3, #12]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d42:	4413      	add	r3, r2
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	01db      	lsls	r3, r3, #7
 8009d52:	4413      	add	r3, r2
 8009d54:	3384      	adds	r3, #132	; 0x84
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	01d2      	lsls	r2, r2, #7
 8009d62:	440a      	add	r2, r1
 8009d64:	3284      	adds	r2, #132	; 0x84
 8009d66:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009d6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d7a:	4413      	add	r3, r2
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4619      	mov	r1, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	01db      	lsls	r3, r3, #7
 8009d88:	440b      	add	r3, r1
 8009d8a:	3384      	adds	r3, #132	; 0x84
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	01db      	lsls	r3, r3, #7
 8009d9e:	4413      	add	r3, r2
 8009da0:	3384      	adds	r3, #132	; 0x84
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	6812      	ldr	r2, [r2, #0]
 8009da8:	4611      	mov	r1, r2
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	01d2      	lsls	r2, r2, #7
 8009dae:	440a      	add	r2, r1
 8009db0:	3284      	adds	r2, #132	; 0x84
 8009db2:	f023 0307 	bic.w	r3, r3, #7
 8009db6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	01db      	lsls	r3, r3, #7
 8009dc2:	4413      	add	r3, r2
 8009dc4:	3384      	adds	r3, #132	; 0x84
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009dde:	041b      	lsls	r3, r3, #16
 8009de0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	061b      	lsls	r3, r3, #24
 8009de8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	01db      	lsls	r3, r3, #7
 8009df4:	4413      	add	r3, r2
 8009df6:	3384      	adds	r3, #132	; 0x84
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	01db      	lsls	r3, r3, #7
 8009e04:	4413      	add	r3, r2
 8009e06:	3384      	adds	r3, #132	; 0x84
 8009e08:	461a      	mov	r2, r3
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e14:	461a      	mov	r2, r3
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4619      	mov	r1, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	01db      	lsls	r3, r3, #7
 8009e28:	440b      	add	r3, r1
 8009e2a:	3384      	adds	r3, #132	; 0x84
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	01db      	lsls	r3, r3, #7
 8009e3e:	4413      	add	r3, r2
 8009e40:	3384      	adds	r3, #132	; 0x84
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	6812      	ldr	r2, [r2, #0]
 8009e48:	4611      	mov	r1, r2
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	01d2      	lsls	r2, r2, #7
 8009e4e:	440a      	add	r2, r1
 8009e50:	3284      	adds	r2, #132	; 0x84
 8009e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	01db      	lsls	r3, r3, #7
 8009e62:	4413      	add	r3, r2
 8009e64:	3384      	adds	r3, #132	; 0x84
 8009e66:	461a      	mov	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	01db      	lsls	r3, r3, #7
 8009e78:	4413      	add	r3, r2
 8009e7a:	3384      	adds	r3, #132	; 0x84
 8009e7c:	69da      	ldr	r2, [r3, #28]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4619      	mov	r1, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	01db      	lsls	r3, r3, #7
 8009e88:	440b      	add	r3, r1
 8009e8a:	3384      	adds	r3, #132	; 0x84
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4b58      	ldr	r3, [pc, #352]	; (8009ff0 <LTDC_SetConfig+0x32c>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	69da      	ldr	r2, [r3, #28]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	68f9      	ldr	r1, [r7, #12]
 8009e9e:	6809      	ldr	r1, [r1, #0]
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	01c9      	lsls	r1, r1, #7
 8009ea6:	4401      	add	r1, r0
 8009ea8:	3184      	adds	r1, #132	; 0x84
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	01db      	lsls	r3, r3, #7
 8009eb8:	4413      	add	r3, r2
 8009eba:	3384      	adds	r3, #132	; 0x84
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	01db      	lsls	r3, r3, #7
 8009ec8:	4413      	add	r3, r2
 8009eca:	3384      	adds	r3, #132	; 0x84
 8009ecc:	461a      	mov	r2, r3
 8009ece:	2300      	movs	r3, #0
 8009ed0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	01db      	lsls	r3, r3, #7
 8009edc:	4413      	add	r3, r2
 8009ede:	3384      	adds	r3, #132	; 0x84
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	61fb      	str	r3, [r7, #28]
 8009ef4:	e01b      	b.n	8009f2e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d102      	bne.n	8009f04 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009efe:	2303      	movs	r3, #3
 8009f00:	61fb      	str	r3, [r7, #28]
 8009f02:	e014      	b.n	8009f2e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d00b      	beq.n	8009f24 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d007      	beq.n	8009f24 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d003      	beq.n	8009f24 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009f20:	2b07      	cmp	r3, #7
 8009f22:	d102      	bne.n	8009f2a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009f24:	2302      	movs	r3, #2
 8009f26:	61fb      	str	r3, [r7, #28]
 8009f28:	e001      	b.n	8009f2e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	01db      	lsls	r3, r3, #7
 8009f38:	4413      	add	r3, r2
 8009f3a:	3384      	adds	r3, #132	; 0x84
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	6812      	ldr	r2, [r2, #0]
 8009f42:	4611      	mov	r1, r2
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	01d2      	lsls	r2, r2, #7
 8009f48:	440a      	add	r2, r1
 8009f4a:	3284      	adds	r2, #132	; 0x84
 8009f4c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009f50:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	fb02 f303 	mul.w	r3, r2, r3
 8009f5c:	041a      	lsls	r2, r3, #16
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	6859      	ldr	r1, [r3, #4]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	1acb      	subs	r3, r1, r3
 8009f68:	69f9      	ldr	r1, [r7, #28]
 8009f6a:	fb01 f303 	mul.w	r3, r1, r3
 8009f6e:	3307      	adds	r3, #7
 8009f70:	68f9      	ldr	r1, [r7, #12]
 8009f72:	6809      	ldr	r1, [r1, #0]
 8009f74:	4608      	mov	r0, r1
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	01c9      	lsls	r1, r1, #7
 8009f7a:	4401      	add	r1, r0
 8009f7c:	3184      	adds	r1, #132	; 0x84
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	01db      	lsls	r3, r3, #7
 8009f8c:	4413      	add	r3, r2
 8009f8e:	3384      	adds	r3, #132	; 0x84
 8009f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4619      	mov	r1, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	01db      	lsls	r3, r3, #7
 8009f9c:	440b      	add	r3, r1
 8009f9e:	3384      	adds	r3, #132	; 0x84
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <LTDC_SetConfig+0x330>)
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	461a      	mov	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	01db      	lsls	r3, r3, #7
 8009fb2:	4413      	add	r3, r2
 8009fb4:	3384      	adds	r3, #132	; 0x84
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	01db      	lsls	r3, r3, #7
 8009fc8:	4413      	add	r3, r2
 8009fca:	3384      	adds	r3, #132	; 0x84
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	6812      	ldr	r2, [r2, #0]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	01d2      	lsls	r2, r2, #7
 8009fd8:	440a      	add	r2, r1
 8009fda:	3284      	adds	r2, #132	; 0x84
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	6013      	str	r3, [r2, #0]
}
 8009fe2:	bf00      	nop
 8009fe4:	3724      	adds	r7, #36	; 0x24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	fffff8f8 	.word	0xfffff8f8
 8009ff4:	fffff800 	.word	0xfffff800

08009ff8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a04      	ldr	r2, [pc, #16]	; (800a014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a006:	6013      	str	r3, [r2, #0]
}
 800a008:	bf00      	nop
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	58024800 	.word	0x58024800

0800a018 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a020:	4b29      	ldr	r3, [pc, #164]	; (800a0c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	2b06      	cmp	r3, #6
 800a02a:	d00a      	beq.n	800a042 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a02c:	4b26      	ldr	r3, [pc, #152]	; (800a0c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d001      	beq.n	800a03e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e040      	b.n	800a0c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	e03e      	b.n	800a0c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a042:	4b21      	ldr	r3, [pc, #132]	; (800a0c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a04a:	491f      	ldr	r1, [pc, #124]	; (800a0c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a052:	f7fa f94d 	bl	80042f0 <HAL_GetTick>
 800a056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a058:	e009      	b.n	800a06e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a05a:	f7fa f949 	bl	80042f0 <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a068:	d901      	bls.n	800a06e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e028      	b.n	800a0c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a06e:	4b16      	ldr	r3, [pc, #88]	; (800a0c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a07a:	d1ee      	bne.n	800a05a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b1e      	cmp	r3, #30
 800a080:	d008      	beq.n	800a094 <HAL_PWREx_ConfigSupply+0x7c>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b2e      	cmp	r3, #46	; 0x2e
 800a086:	d005      	beq.n	800a094 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b1d      	cmp	r3, #29
 800a08c:	d002      	beq.n	800a094 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b2d      	cmp	r3, #45	; 0x2d
 800a092:	d114      	bne.n	800a0be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a094:	f7fa f92c 	bl	80042f0 <HAL_GetTick>
 800a098:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a09a:	e009      	b.n	800a0b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a09c:	f7fa f928 	bl	80042f0 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0aa:	d901      	bls.n	800a0b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e007      	b.n	800a0c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a0b0:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0bc:	d1ee      	bne.n	800a09c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	58024800 	.word	0x58024800

0800a0cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08c      	sub	sp, #48	; 0x30
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f000 bc1f 	b.w	800a91e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 80b3 	beq.w	800a254 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0ee:	4b95      	ldr	r3, [pc, #596]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0f8:	4b92      	ldr	r3, [pc, #584]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	2b10      	cmp	r3, #16
 800a102:	d007      	beq.n	800a114 <HAL_RCC_OscConfig+0x48>
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	2b18      	cmp	r3, #24
 800a108:	d112      	bne.n	800a130 <HAL_RCC_OscConfig+0x64>
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d10d      	bne.n	800a130 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a114:	4b8b      	ldr	r3, [pc, #556]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8098 	beq.w	800a252 <HAL_RCC_OscConfig+0x186>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f040 8093 	bne.w	800a252 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e3f6      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a138:	d106      	bne.n	800a148 <HAL_RCC_OscConfig+0x7c>
 800a13a:	4b82      	ldr	r3, [pc, #520]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a81      	ldr	r2, [pc, #516]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	e058      	b.n	800a1fa <HAL_RCC_OscConfig+0x12e>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d112      	bne.n	800a176 <HAL_RCC_OscConfig+0xaa>
 800a150:	4b7c      	ldr	r3, [pc, #496]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a7b      	ldr	r2, [pc, #492]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	4b79      	ldr	r3, [pc, #484]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a78      	ldr	r2, [pc, #480]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	4b76      	ldr	r3, [pc, #472]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a75      	ldr	r2, [pc, #468]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a16e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	e041      	b.n	800a1fa <HAL_RCC_OscConfig+0x12e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a17e:	d112      	bne.n	800a1a6 <HAL_RCC_OscConfig+0xda>
 800a180:	4b70      	ldr	r3, [pc, #448]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a6f      	ldr	r2, [pc, #444]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	4b6d      	ldr	r3, [pc, #436]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a6c      	ldr	r2, [pc, #432]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a192:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	4b6a      	ldr	r3, [pc, #424]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a69      	ldr	r2, [pc, #420]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a19e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	e029      	b.n	800a1fa <HAL_RCC_OscConfig+0x12e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a1ae:	d112      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x10a>
 800a1b0:	4b64      	ldr	r3, [pc, #400]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a63      	ldr	r2, [pc, #396]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	4b61      	ldr	r3, [pc, #388]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a60      	ldr	r2, [pc, #384]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	4b5e      	ldr	r3, [pc, #376]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a5d      	ldr	r2, [pc, #372]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	e011      	b.n	800a1fa <HAL_RCC_OscConfig+0x12e>
 800a1d6:	4b5b      	ldr	r3, [pc, #364]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a5a      	ldr	r2, [pc, #360]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	4b58      	ldr	r3, [pc, #352]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a57      	ldr	r2, [pc, #348]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	4b55      	ldr	r3, [pc, #340]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a54      	ldr	r2, [pc, #336]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a1f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d013      	beq.n	800a22a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a202:	f7fa f875 	bl	80042f0 <HAL_GetTick>
 800a206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a208:	e008      	b.n	800a21c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a20a:	f7fa f871 	bl	80042f0 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b64      	cmp	r3, #100	; 0x64
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e380      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a21c:	4b49      	ldr	r3, [pc, #292]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0f0      	beq.n	800a20a <HAL_RCC_OscConfig+0x13e>
 800a228:	e014      	b.n	800a254 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a22a:	f7fa f861 	bl	80042f0 <HAL_GetTick>
 800a22e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a230:	e008      	b.n	800a244 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a232:	f7fa f85d 	bl	80042f0 <HAL_GetTick>
 800a236:	4602      	mov	r2, r0
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	2b64      	cmp	r3, #100	; 0x64
 800a23e:	d901      	bls.n	800a244 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e36c      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a244:	4b3f      	ldr	r3, [pc, #252]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1f0      	bne.n	800a232 <HAL_RCC_OscConfig+0x166>
 800a250:	e000      	b.n	800a254 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a252:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 808c 	beq.w	800a37a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a262:	4b38      	ldr	r3, [pc, #224]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a26a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a26c:	4b35      	ldr	r3, [pc, #212]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a270:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <HAL_RCC_OscConfig+0x1bc>
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	2b18      	cmp	r3, #24
 800a27c:	d137      	bne.n	800a2ee <HAL_RCC_OscConfig+0x222>
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	f003 0303 	and.w	r3, r3, #3
 800a284:	2b00      	cmp	r3, #0
 800a286:	d132      	bne.n	800a2ee <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a288:	4b2e      	ldr	r3, [pc, #184]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	d005      	beq.n	800a2a0 <HAL_RCC_OscConfig+0x1d4>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e33e      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2a0:	4b28      	ldr	r3, [pc, #160]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f023 0219 	bic.w	r2, r3, #25
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	4925      	ldr	r1, [pc, #148]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b2:	f7fa f81d 	bl	80042f0 <HAL_GetTick>
 800a2b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2b8:	e008      	b.n	800a2cc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2ba:	f7fa f819 	bl	80042f0 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e328      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2cc:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0f0      	beq.n	800a2ba <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	061b      	lsls	r3, r3, #24
 800a2e6:	4917      	ldr	r1, [pc, #92]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2ec:	e045      	b.n	800a37a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d028      	beq.n	800a348 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2f6:	4b13      	ldr	r3, [pc, #76]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f023 0219 	bic.w	r2, r3, #25
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	4910      	ldr	r1, [pc, #64]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a304:	4313      	orrs	r3, r2
 800a306:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a308:	f7f9 fff2 	bl	80042f0 <HAL_GetTick>
 800a30c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a310:	f7f9 ffee 	bl	80042f0 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e2fd      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a322:	4b08      	ldr	r3, [pc, #32]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0f0      	beq.n	800a310 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	061b      	lsls	r3, r3, #24
 800a33c:	4901      	ldr	r1, [pc, #4]	; (800a344 <HAL_RCC_OscConfig+0x278>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	604b      	str	r3, [r1, #4]
 800a342:	e01a      	b.n	800a37a <HAL_RCC_OscConfig+0x2ae>
 800a344:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a348:	4b97      	ldr	r3, [pc, #604]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a96      	ldr	r2, [pc, #600]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a34e:	f023 0301 	bic.w	r3, r3, #1
 800a352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a354:	f7f9 ffcc 	bl	80042f0 <HAL_GetTick>
 800a358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a35c:	f7f9 ffc8 	bl	80042f0 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b02      	cmp	r3, #2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e2d7      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a36e:	4b8e      	ldr	r3, [pc, #568]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1f0      	bne.n	800a35c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0310 	and.w	r3, r3, #16
 800a382:	2b00      	cmp	r3, #0
 800a384:	d06a      	beq.n	800a45c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a386:	4b88      	ldr	r3, [pc, #544]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a38e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a390:	4b85      	ldr	r3, [pc, #532]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a394:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d007      	beq.n	800a3ac <HAL_RCC_OscConfig+0x2e0>
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	2b18      	cmp	r3, #24
 800a3a0:	d11b      	bne.n	800a3da <HAL_RCC_OscConfig+0x30e>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f003 0303 	and.w	r3, r3, #3
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d116      	bne.n	800a3da <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3ac:	4b7e      	ldr	r3, [pc, #504]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x2f8>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	2b80      	cmp	r3, #128	; 0x80
 800a3be:	d001      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e2ac      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3c4:	4b78      	ldr	r3, [pc, #480]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	061b      	lsls	r3, r3, #24
 800a3d2:	4975      	ldr	r1, [pc, #468]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3d8:	e040      	b.n	800a45c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d023      	beq.n	800a42a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a3e2:	4b71      	ldr	r3, [pc, #452]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a70      	ldr	r2, [pc, #448]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ee:	f7f9 ff7f 	bl	80042f0 <HAL_GetTick>
 800a3f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3f4:	e008      	b.n	800a408 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3f6:	f7f9 ff7b 	bl	80042f0 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d901      	bls.n	800a408 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e28a      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a408:	4b67      	ldr	r3, [pc, #412]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0f0      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a414:	4b64      	ldr	r3, [pc, #400]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	061b      	lsls	r3, r3, #24
 800a422:	4961      	ldr	r1, [pc, #388]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a424:	4313      	orrs	r3, r2
 800a426:	60cb      	str	r3, [r1, #12]
 800a428:	e018      	b.n	800a45c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a42a:	4b5f      	ldr	r3, [pc, #380]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a5e      	ldr	r2, [pc, #376]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a436:	f7f9 ff5b 	bl	80042f0 <HAL_GetTick>
 800a43a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a43c:	e008      	b.n	800a450 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a43e:	f7f9 ff57 	bl	80042f0 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d901      	bls.n	800a450 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e266      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a450:	4b55      	ldr	r3, [pc, #340]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f0      	bne.n	800a43e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0308 	and.w	r3, r3, #8
 800a464:	2b00      	cmp	r3, #0
 800a466:	d036      	beq.n	800a4d6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d019      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a470:	4b4d      	ldr	r3, [pc, #308]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a474:	4a4c      	ldr	r2, [pc, #304]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a476:	f043 0301 	orr.w	r3, r3, #1
 800a47a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a47c:	f7f9 ff38 	bl	80042f0 <HAL_GetTick>
 800a480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a482:	e008      	b.n	800a496 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a484:	f7f9 ff34 	bl	80042f0 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d901      	bls.n	800a496 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a492:	2303      	movs	r3, #3
 800a494:	e243      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a496:	4b44      	ldr	r3, [pc, #272]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0f0      	beq.n	800a484 <HAL_RCC_OscConfig+0x3b8>
 800a4a2:	e018      	b.n	800a4d6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4a4:	4b40      	ldr	r3, [pc, #256]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4a8:	4a3f      	ldr	r2, [pc, #252]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a4aa:	f023 0301 	bic.w	r3, r3, #1
 800a4ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4b0:	f7f9 ff1e 	bl	80042f0 <HAL_GetTick>
 800a4b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4b6:	e008      	b.n	800a4ca <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4b8:	f7f9 ff1a 	bl	80042f0 <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d901      	bls.n	800a4ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e229      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4ca:	4b37      	ldr	r3, [pc, #220]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1f0      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0320 	and.w	r3, r3, #32
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d036      	beq.n	800a550 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d019      	beq.n	800a51e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a4ea:	4b2f      	ldr	r3, [pc, #188]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a2e      	ldr	r2, [pc, #184]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a4f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4f6:	f7f9 fefb 	bl	80042f0 <HAL_GetTick>
 800a4fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4fc:	e008      	b.n	800a510 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4fe:	f7f9 fef7 	bl	80042f0 <HAL_GetTick>
 800a502:	4602      	mov	r2, r0
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d901      	bls.n	800a510 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e206      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a510:	4b25      	ldr	r3, [pc, #148]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0f0      	beq.n	800a4fe <HAL_RCC_OscConfig+0x432>
 800a51c:	e018      	b.n	800a550 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a51e:	4b22      	ldr	r3, [pc, #136]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a21      	ldr	r2, [pc, #132]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a528:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a52a:	f7f9 fee1 	bl	80042f0 <HAL_GetTick>
 800a52e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a530:	e008      	b.n	800a544 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a532:	f7f9 fedd 	bl	80042f0 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d901      	bls.n	800a544 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e1ec      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a544:	4b18      	ldr	r3, [pc, #96]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1f0      	bne.n	800a532 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80af 	beq.w	800a6bc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a55e:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <HAL_RCC_OscConfig+0x4e0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a12      	ldr	r2, [pc, #72]	; (800a5ac <HAL_RCC_OscConfig+0x4e0>)
 800a564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a568:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a56a:	f7f9 fec1 	bl	80042f0 <HAL_GetTick>
 800a56e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a570:	e008      	b.n	800a584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a572:	f7f9 febd 	bl	80042f0 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b64      	cmp	r3, #100	; 0x64
 800a57e:	d901      	bls.n	800a584 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e1cc      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a584:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <HAL_RCC_OscConfig+0x4e0>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0f0      	beq.n	800a572 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d10b      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x4e4>
 800a598:	4b03      	ldr	r3, [pc, #12]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59c:	4a02      	ldr	r2, [pc, #8]	; (800a5a8 <HAL_RCC_OscConfig+0x4dc>)
 800a59e:	f043 0301 	orr.w	r3, r3, #1
 800a5a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a5a4:	e05b      	b.n	800a65e <HAL_RCC_OscConfig+0x592>
 800a5a6:	bf00      	nop
 800a5a8:	58024400 	.word	0x58024400
 800a5ac:	58024800 	.word	0x58024800
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d112      	bne.n	800a5de <HAL_RCC_OscConfig+0x512>
 800a5b8:	4b9d      	ldr	r3, [pc, #628]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5bc:	4a9c      	ldr	r2, [pc, #624]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5be:	f023 0301 	bic.w	r3, r3, #1
 800a5c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a5c4:	4b9a      	ldr	r3, [pc, #616]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c8:	4a99      	ldr	r2, [pc, #612]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a5d0:	4b97      	ldr	r3, [pc, #604]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d4:	4a96      	ldr	r2, [pc, #600]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5d6:	f023 0304 	bic.w	r3, r3, #4
 800a5da:	6713      	str	r3, [r2, #112]	; 0x70
 800a5dc:	e03f      	b.n	800a65e <HAL_RCC_OscConfig+0x592>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	d112      	bne.n	800a60c <HAL_RCC_OscConfig+0x540>
 800a5e6:	4b92      	ldr	r3, [pc, #584]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ea:	4a91      	ldr	r2, [pc, #580]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5ec:	f043 0304 	orr.w	r3, r3, #4
 800a5f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a5f2:	4b8f      	ldr	r3, [pc, #572]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f6:	4a8e      	ldr	r2, [pc, #568]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a5f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5fc:	6713      	str	r3, [r2, #112]	; 0x70
 800a5fe:	4b8c      	ldr	r3, [pc, #560]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a602:	4a8b      	ldr	r2, [pc, #556]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a604:	f043 0301 	orr.w	r3, r3, #1
 800a608:	6713      	str	r3, [r2, #112]	; 0x70
 800a60a:	e028      	b.n	800a65e <HAL_RCC_OscConfig+0x592>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	2b85      	cmp	r3, #133	; 0x85
 800a612:	d112      	bne.n	800a63a <HAL_RCC_OscConfig+0x56e>
 800a614:	4b86      	ldr	r3, [pc, #536]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a618:	4a85      	ldr	r2, [pc, #532]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a61a:	f043 0304 	orr.w	r3, r3, #4
 800a61e:	6713      	str	r3, [r2, #112]	; 0x70
 800a620:	4b83      	ldr	r3, [pc, #524]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a624:	4a82      	ldr	r2, [pc, #520]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62a:	6713      	str	r3, [r2, #112]	; 0x70
 800a62c:	4b80      	ldr	r3, [pc, #512]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a630:	4a7f      	ldr	r2, [pc, #508]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a632:	f043 0301 	orr.w	r3, r3, #1
 800a636:	6713      	str	r3, [r2, #112]	; 0x70
 800a638:	e011      	b.n	800a65e <HAL_RCC_OscConfig+0x592>
 800a63a:	4b7d      	ldr	r3, [pc, #500]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63e:	4a7c      	ldr	r2, [pc, #496]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a640:	f023 0301 	bic.w	r3, r3, #1
 800a644:	6713      	str	r3, [r2, #112]	; 0x70
 800a646:	4b7a      	ldr	r3, [pc, #488]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a64a:	4a79      	ldr	r2, [pc, #484]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a64c:	f023 0304 	bic.w	r3, r3, #4
 800a650:	6713      	str	r3, [r2, #112]	; 0x70
 800a652:	4b77      	ldr	r3, [pc, #476]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a656:	4a76      	ldr	r2, [pc, #472]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a65c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d015      	beq.n	800a692 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a666:	f7f9 fe43 	bl	80042f0 <HAL_GetTick>
 800a66a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a66c:	e00a      	b.n	800a684 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a66e:	f7f9 fe3f 	bl	80042f0 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d901      	bls.n	800a684 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e14c      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a684:	4b6a      	ldr	r3, [pc, #424]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a688:	f003 0302 	and.w	r3, r3, #2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0ee      	beq.n	800a66e <HAL_RCC_OscConfig+0x5a2>
 800a690:	e014      	b.n	800a6bc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a692:	f7f9 fe2d 	bl	80042f0 <HAL_GetTick>
 800a696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a698:	e00a      	b.n	800a6b0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a69a:	f7f9 fe29 	bl	80042f0 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d901      	bls.n	800a6b0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e136      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6b0:	4b5f      	ldr	r3, [pc, #380]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1ee      	bne.n	800a69a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 812b 	beq.w	800a91c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a6c6:	4b5a      	ldr	r3, [pc, #360]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6ce:	2b18      	cmp	r3, #24
 800a6d0:	f000 80bb 	beq.w	800a84a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	f040 8095 	bne.w	800a808 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6de:	4b54      	ldr	r3, [pc, #336]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a53      	ldr	r2, [pc, #332]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a6e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ea:	f7f9 fe01 	bl	80042f0 <HAL_GetTick>
 800a6ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6f0:	e008      	b.n	800a704 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f2:	f7f9 fdfd 	bl	80042f0 <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d901      	bls.n	800a704 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e10c      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a704:	4b4a      	ldr	r3, [pc, #296]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1f0      	bne.n	800a6f2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a710:	4b47      	ldr	r3, [pc, #284]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a714:	4b47      	ldr	r3, [pc, #284]	; (800a834 <HAL_RCC_OscConfig+0x768>)
 800a716:	4013      	ands	r3, r2
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a720:	0112      	lsls	r2, r2, #4
 800a722:	430a      	orrs	r2, r1
 800a724:	4942      	ldr	r1, [pc, #264]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a726:	4313      	orrs	r3, r2
 800a728:	628b      	str	r3, [r1, #40]	; 0x28
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72e:	3b01      	subs	r3, #1
 800a730:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a738:	3b01      	subs	r3, #1
 800a73a:	025b      	lsls	r3, r3, #9
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	431a      	orrs	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a744:	3b01      	subs	r3, #1
 800a746:	041b      	lsls	r3, r3, #16
 800a748:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a74c:	431a      	orrs	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a752:	3b01      	subs	r3, #1
 800a754:	061b      	lsls	r3, r3, #24
 800a756:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a75a:	4935      	ldr	r1, [pc, #212]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a760:	4b33      	ldr	r3, [pc, #204]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	4a32      	ldr	r2, [pc, #200]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a766:	f023 0301 	bic.w	r3, r3, #1
 800a76a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a76c:	4b30      	ldr	r3, [pc, #192]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a76e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a770:	4b31      	ldr	r3, [pc, #196]	; (800a838 <HAL_RCC_OscConfig+0x76c>)
 800a772:	4013      	ands	r3, r2
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a778:	00d2      	lsls	r2, r2, #3
 800a77a:	492d      	ldr	r1, [pc, #180]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a780:	4b2b      	ldr	r3, [pc, #172]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f023 020c 	bic.w	r2, r3, #12
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	4928      	ldr	r1, [pc, #160]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a78e:	4313      	orrs	r3, r2
 800a790:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a792:	4b27      	ldr	r3, [pc, #156]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	f023 0202 	bic.w	r2, r3, #2
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a79e:	4924      	ldr	r1, [pc, #144]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a7a4:	4b22      	ldr	r3, [pc, #136]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	4a21      	ldr	r2, [pc, #132]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7b0:	4b1f      	ldr	r3, [pc, #124]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b4:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	4a1b      	ldr	r2, [pc, #108]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a7c8:	4b19      	ldr	r3, [pc, #100]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7cc:	4a18      	ldr	r2, [pc, #96]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7d4:	4b16      	ldr	r3, [pc, #88]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a15      	ldr	r2, [pc, #84]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e0:	f7f9 fd86 	bl	80042f0 <HAL_GetTick>
 800a7e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7e6:	e008      	b.n	800a7fa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7e8:	f7f9 fd82 	bl	80042f0 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d901      	bls.n	800a7fa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e091      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7fa:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0f0      	beq.n	800a7e8 <HAL_RCC_OscConfig+0x71c>
 800a806:	e089      	b.n	800a91c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a808:	4b09      	ldr	r3, [pc, #36]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a08      	ldr	r2, [pc, #32]	; (800a830 <HAL_RCC_OscConfig+0x764>)
 800a80e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a814:	f7f9 fd6c 	bl	80042f0 <HAL_GetTick>
 800a818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a81a:	e00f      	b.n	800a83c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a81c:	f7f9 fd68 	bl	80042f0 <HAL_GetTick>
 800a820:	4602      	mov	r2, r0
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	2b02      	cmp	r3, #2
 800a828:	d908      	bls.n	800a83c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e077      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
 800a82e:	bf00      	nop
 800a830:	58024400 	.word	0x58024400
 800a834:	fffffc0c 	.word	0xfffffc0c
 800a838:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a83c:	4b3a      	ldr	r3, [pc, #232]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e9      	bne.n	800a81c <HAL_RCC_OscConfig+0x750>
 800a848:	e068      	b.n	800a91c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a84a:	4b37      	ldr	r3, [pc, #220]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a850:	4b35      	ldr	r3, [pc, #212]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a854:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d031      	beq.n	800a8c2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	f003 0203 	and.w	r2, r3, #3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a868:	429a      	cmp	r2, r3
 800a86a:	d12a      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	091b      	lsrs	r3, r3, #4
 800a870:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a878:	429a      	cmp	r2, r3
 800a87a:	d122      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a888:	429a      	cmp	r2, r3
 800a88a:	d11a      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	0a5b      	lsrs	r3, r3, #9
 800a890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a898:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d111      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	0c1b      	lsrs	r3, r3, #16
 800a8a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d108      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	0e1b      	lsrs	r3, r3, #24
 800a8b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d001      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e02b      	b.n	800a91e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a8c6:	4b18      	ldr	r3, [pc, #96]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ca:	08db      	lsrs	r3, r3, #3
 800a8cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8d0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d01f      	beq.n	800a91c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a8dc:	4b12      	ldr	r3, [pc, #72]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e0:	4a11      	ldr	r2, [pc, #68]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a8e2:	f023 0301 	bic.w	r3, r3, #1
 800a8e6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8e8:	f7f9 fd02 	bl	80042f0 <HAL_GetTick>
 800a8ec:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a8ee:	bf00      	nop
 800a8f0:	f7f9 fcfe 	bl	80042f0 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d0f9      	beq.n	800a8f0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a8fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a900:	4b0a      	ldr	r3, [pc, #40]	; (800a92c <HAL_RCC_OscConfig+0x860>)
 800a902:	4013      	ands	r3, r2
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a908:	00d2      	lsls	r2, r2, #3
 800a90a:	4907      	ldr	r1, [pc, #28]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a90c:	4313      	orrs	r3, r2
 800a90e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	4a04      	ldr	r2, [pc, #16]	; (800a928 <HAL_RCC_OscConfig+0x85c>)
 800a916:	f043 0301 	orr.w	r3, r3, #1
 800a91a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3730      	adds	r7, #48	; 0x30
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	58024400 	.word	0x58024400
 800a92c:	ffff0007 	.word	0xffff0007

0800a930 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e19c      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a944:	4b8a      	ldr	r3, [pc, #552]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 030f 	and.w	r3, r3, #15
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d910      	bls.n	800a974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a952:	4b87      	ldr	r3, [pc, #540]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f023 020f 	bic.w	r2, r3, #15
 800a95a:	4985      	ldr	r1, [pc, #532]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	4313      	orrs	r3, r2
 800a960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a962:	4b83      	ldr	r3, [pc, #524]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d001      	beq.n	800a974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e184      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d010      	beq.n	800a9a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	4b7b      	ldr	r3, [pc, #492]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d908      	bls.n	800a9a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a990:	4b78      	ldr	r3, [pc, #480]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	4975      	ldr	r1, [pc, #468]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0308 	and.w	r3, r3, #8
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d010      	beq.n	800a9d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	695a      	ldr	r2, [r3, #20]
 800a9b2:	4b70      	ldr	r3, [pc, #448]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d908      	bls.n	800a9d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9be:	4b6d      	ldr	r3, [pc, #436]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a9c0:	69db      	ldr	r3, [r3, #28]
 800a9c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	496a      	ldr	r1, [pc, #424]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0310 	and.w	r3, r3, #16
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d010      	beq.n	800a9fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	699a      	ldr	r2, [r3, #24]
 800a9e0:	4b64      	ldr	r3, [pc, #400]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d908      	bls.n	800a9fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9ec:	4b61      	ldr	r3, [pc, #388]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	495e      	ldr	r1, [pc, #376]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d010      	beq.n	800aa2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	69da      	ldr	r2, [r3, #28]
 800aa0e:	4b59      	ldr	r3, [pc, #356]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d908      	bls.n	800aa2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa1a:	4b56      	ldr	r3, [pc, #344]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	4953      	ldr	r1, [pc, #332]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d010      	beq.n	800aa5a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	68da      	ldr	r2, [r3, #12]
 800aa3c:	4b4d      	ldr	r3, [pc, #308]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d908      	bls.n	800aa5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa48:	4b4a      	ldr	r3, [pc, #296]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	f023 020f 	bic.w	r2, r3, #15
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	4947      	ldr	r1, [pc, #284]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d055      	beq.n	800ab12 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa66:	4b43      	ldr	r3, [pc, #268]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	4940      	ldr	r1, [pc, #256]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa74:	4313      	orrs	r3, r2
 800aa76:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d107      	bne.n	800aa90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa80:	4b3c      	ldr	r3, [pc, #240]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d121      	bne.n	800aad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e0f6      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d107      	bne.n	800aaa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa98:	4b36      	ldr	r3, [pc, #216]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d115      	bne.n	800aad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e0ea      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d107      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aab0:	4b30      	ldr	r3, [pc, #192]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e0de      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aac0:	4b2c      	ldr	r3, [pc, #176]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e0d6      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	f023 0207 	bic.w	r2, r3, #7
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	4925      	ldr	r1, [pc, #148]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aae2:	f7f9 fc05 	bl	80042f0 <HAL_GetTick>
 800aae6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aae8:	e00a      	b.n	800ab00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaea:	f7f9 fc01 	bl	80042f0 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d901      	bls.n	800ab00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e0be      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab00:	4b1c      	ldr	r3, [pc, #112]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d1eb      	bne.n	800aaea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d010      	beq.n	800ab40 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	4b14      	ldr	r3, [pc, #80]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	f003 030f 	and.w	r3, r3, #15
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d208      	bcs.n	800ab40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab2e:	4b11      	ldr	r3, [pc, #68]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f023 020f 	bic.w	r2, r3, #15
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	490e      	ldr	r1, [pc, #56]	; (800ab74 <HAL_RCC_ClockConfig+0x244>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 030f 	and.w	r3, r3, #15
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d214      	bcs.n	800ab78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab4e:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f023 020f 	bic.w	r2, r3, #15
 800ab56:	4906      	ldr	r1, [pc, #24]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab5e:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <HAL_RCC_ClockConfig+0x240>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 030f 	and.w	r3, r3, #15
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d005      	beq.n	800ab78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e086      	b.n	800ac7e <HAL_RCC_ClockConfig+0x34e>
 800ab70:	52002000 	.word	0x52002000
 800ab74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d010      	beq.n	800aba6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691a      	ldr	r2, [r3, #16]
 800ab88:	4b3f      	ldr	r3, [pc, #252]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d208      	bcs.n	800aba6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab94:	4b3c      	ldr	r3, [pc, #240]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	4939      	ldr	r1, [pc, #228]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d010      	beq.n	800abd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	695a      	ldr	r2, [r3, #20]
 800abb6:	4b34      	ldr	r3, [pc, #208]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d208      	bcs.n	800abd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abc2:	4b31      	ldr	r3, [pc, #196]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	492e      	ldr	r1, [pc, #184]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800abd0:	4313      	orrs	r3, r2
 800abd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0310 	and.w	r3, r3, #16
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d010      	beq.n	800ac02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	699a      	ldr	r2, [r3, #24]
 800abe4:	4b28      	ldr	r3, [pc, #160]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abec:	429a      	cmp	r2, r3
 800abee:	d208      	bcs.n	800ac02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abf0:	4b25      	ldr	r3, [pc, #148]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	4922      	ldr	r1, [pc, #136]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d010      	beq.n	800ac30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	69da      	ldr	r2, [r3, #28]
 800ac12:	4b1d      	ldr	r3, [pc, #116]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d208      	bcs.n	800ac30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac1e:	4b1a      	ldr	r3, [pc, #104]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	4917      	ldr	r1, [pc, #92]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800ac30:	f000 f89e 	bl	800ad70 <HAL_RCC_GetSysClockFreq>
 800ac34:	4602      	mov	r2, r0
 800ac36:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	0a1b      	lsrs	r3, r3, #8
 800ac3c:	f003 030f 	and.w	r3, r3, #15
 800ac40:	4912      	ldr	r1, [pc, #72]	; (800ac8c <HAL_RCC_ClockConfig+0x35c>)
 800ac42:	5ccb      	ldrb	r3, [r1, r3]
 800ac44:	f003 031f 	and.w	r3, r3, #31
 800ac48:	fa22 f303 	lsr.w	r3, r2, r3
 800ac4c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ac4e:	4b0e      	ldr	r3, [pc, #56]	; (800ac88 <HAL_RCC_ClockConfig+0x358>)
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f003 030f 	and.w	r3, r3, #15
 800ac56:	4a0d      	ldr	r2, [pc, #52]	; (800ac8c <HAL_RCC_ClockConfig+0x35c>)
 800ac58:	5cd3      	ldrb	r3, [r2, r3]
 800ac5a:	f003 031f 	and.w	r3, r3, #31
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	fa22 f303 	lsr.w	r3, r2, r3
 800ac64:	4a0a      	ldr	r2, [pc, #40]	; (800ac90 <HAL_RCC_ClockConfig+0x360>)
 800ac66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac68:	4a0a      	ldr	r2, [pc, #40]	; (800ac94 <HAL_RCC_ClockConfig+0x364>)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <HAL_RCC_ClockConfig+0x368>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7f9 faf2 	bl	800425c <HAL_InitTick>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3718      	adds	r7, #24
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	58024400 	.word	0x58024400
 800ac8c:	08010528 	.word	0x08010528
 800ac90:	24000048 	.word	0x24000048
 800ac94:	24000044 	.word	0x24000044
 800ac98:	2400004c 	.word	0x2400004c

0800ac9c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08c      	sub	sp, #48	; 0x30
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d12a      	bne.n	800ad04 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800acae:	4b2d      	ldr	r3, [pc, #180]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800acb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800acb4:	4a2b      	ldr	r2, [pc, #172]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800acbe:	4b29      	ldr	r3, [pc, #164]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800acc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	61bb      	str	r3, [r7, #24]
 800acca:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800accc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acd2:	2302      	movs	r3, #2
 800acd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd6:	2303      	movs	r3, #3
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800acde:	2300      	movs	r3, #0
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ace2:	f107 031c 	add.w	r3, r7, #28
 800ace6:	4619      	mov	r1, r3
 800ace8:	481f      	ldr	r0, [pc, #124]	; (800ad68 <HAL_RCC_MCOConfig+0xcc>)
 800acea:	f7fd fcc1 	bl	8008670 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800acee:	4b1d      	ldr	r3, [pc, #116]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800acf6:	68b9      	ldr	r1, [r7, #8]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	430b      	orrs	r3, r1
 800acfc:	4919      	ldr	r1, [pc, #100]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800ad02:	e02a      	b.n	800ad5a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800ad04:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800ad06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad0a:	4a16      	ldr	r2, [pc, #88]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800ad0c:	f043 0304 	orr.w	r3, r3, #4
 800ad10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800ad14:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800ad16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800ad22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad28:	2302      	movs	r3, #2
 800ad2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ad34:	2300      	movs	r3, #0
 800ad36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ad38:	f107 031c 	add.w	r3, r7, #28
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	480b      	ldr	r0, [pc, #44]	; (800ad6c <HAL_RCC_MCOConfig+0xd0>)
 800ad40:	f7fd fc96 	bl	8008670 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800ad44:	4b07      	ldr	r3, [pc, #28]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	01d9      	lsls	r1, r3, #7
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	430b      	orrs	r3, r1
 800ad54:	4903      	ldr	r1, [pc, #12]	; (800ad64 <HAL_RCC_MCOConfig+0xc8>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	610b      	str	r3, [r1, #16]
}
 800ad5a:	bf00      	nop
 800ad5c:	3730      	adds	r7, #48	; 0x30
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	58024400 	.word	0x58024400
 800ad68:	58020000 	.word	0x58020000
 800ad6c:	58020800 	.word	0x58020800

0800ad70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b089      	sub	sp, #36	; 0x24
 800ad74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad76:	4bb3      	ldr	r3, [pc, #716]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad7e:	2b18      	cmp	r3, #24
 800ad80:	f200 8155 	bhi.w	800b02e <HAL_RCC_GetSysClockFreq+0x2be>
 800ad84:	a201      	add	r2, pc, #4	; (adr r2, 800ad8c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ad86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8a:	bf00      	nop
 800ad8c:	0800adf1 	.word	0x0800adf1
 800ad90:	0800b02f 	.word	0x0800b02f
 800ad94:	0800b02f 	.word	0x0800b02f
 800ad98:	0800b02f 	.word	0x0800b02f
 800ad9c:	0800b02f 	.word	0x0800b02f
 800ada0:	0800b02f 	.word	0x0800b02f
 800ada4:	0800b02f 	.word	0x0800b02f
 800ada8:	0800b02f 	.word	0x0800b02f
 800adac:	0800ae17 	.word	0x0800ae17
 800adb0:	0800b02f 	.word	0x0800b02f
 800adb4:	0800b02f 	.word	0x0800b02f
 800adb8:	0800b02f 	.word	0x0800b02f
 800adbc:	0800b02f 	.word	0x0800b02f
 800adc0:	0800b02f 	.word	0x0800b02f
 800adc4:	0800b02f 	.word	0x0800b02f
 800adc8:	0800b02f 	.word	0x0800b02f
 800adcc:	0800ae1d 	.word	0x0800ae1d
 800add0:	0800b02f 	.word	0x0800b02f
 800add4:	0800b02f 	.word	0x0800b02f
 800add8:	0800b02f 	.word	0x0800b02f
 800addc:	0800b02f 	.word	0x0800b02f
 800ade0:	0800b02f 	.word	0x0800b02f
 800ade4:	0800b02f 	.word	0x0800b02f
 800ade8:	0800b02f 	.word	0x0800b02f
 800adec:	0800ae23 	.word	0x0800ae23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adf0:	4b94      	ldr	r3, [pc, #592]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0320 	and.w	r3, r3, #32
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d009      	beq.n	800ae10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adfc:	4b91      	ldr	r3, [pc, #580]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	08db      	lsrs	r3, r3, #3
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	4a90      	ldr	r2, [pc, #576]	; (800b048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ae0e:	e111      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ae10:	4b8d      	ldr	r3, [pc, #564]	; (800b048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae12:	61bb      	str	r3, [r7, #24]
      break;
 800ae14:	e10e      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ae16:	4b8d      	ldr	r3, [pc, #564]	; (800b04c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae18:	61bb      	str	r3, [r7, #24]
      break;
 800ae1a:	e10b      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ae1c:	4b8c      	ldr	r3, [pc, #560]	; (800b050 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ae1e:	61bb      	str	r3, [r7, #24]
      break;
 800ae20:	e108      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae22:	4b88      	ldr	r3, [pc, #544]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	f003 0303 	and.w	r3, r3, #3
 800ae2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ae2c:	4b85      	ldr	r3, [pc, #532]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae30:	091b      	lsrs	r3, r3, #4
 800ae32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ae38:	4b82      	ldr	r3, [pc, #520]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae42:	4b80      	ldr	r3, [pc, #512]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae46:	08db      	lsrs	r3, r3, #3
 800ae48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	fb02 f303 	mul.w	r3, r2, r3
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80e1 	beq.w	800b028 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	f000 8083 	beq.w	800af74 <HAL_RCC_GetSysClockFreq+0x204>
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	f200 80a1 	bhi.w	800afb8 <HAL_RCC_GetSysClockFreq+0x248>
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <HAL_RCC_GetSysClockFreq+0x114>
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d056      	beq.n	800af30 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ae82:	e099      	b.n	800afb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae84:	4b6f      	ldr	r3, [pc, #444]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0320 	and.w	r3, r3, #32
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d02d      	beq.n	800aeec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae90:	4b6c      	ldr	r3, [pc, #432]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	08db      	lsrs	r3, r3, #3
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	4a6b      	ldr	r2, [pc, #428]	; (800b048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aea0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	ee07 3a90 	vmov	s15, r3
 800aea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeba:	4b62      	ldr	r3, [pc, #392]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeca:	ed97 6a02 	vldr	s12, [r7, #8]
 800aece:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aeea:	e087      	b.n	800affc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b058 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefe:	4b51      	ldr	r3, [pc, #324]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af12:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af2e:	e065      	b.n	800affc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b05c <HAL_RCC_GetSysClockFreq+0x2ec>
 800af3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af42:	4b40      	ldr	r3, [pc, #256]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af52:	ed97 6a02 	vldr	s12, [r7, #8]
 800af56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af72:	e043      	b.n	800affc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b060 <HAL_RCC_GetSysClockFreq+0x2f0>
 800af82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af86:	4b2f      	ldr	r3, [pc, #188]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af96:	ed97 6a02 	vldr	s12, [r7, #8]
 800af9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800afb6:	e021      	b.n	800affc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b05c <HAL_RCC_GetSysClockFreq+0x2ec>
 800afc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afca:	4b1e      	ldr	r3, [pc, #120]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afda:	ed97 6a02 	vldr	s12, [r7, #8]
 800afde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800affa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800affc:	4b11      	ldr	r3, [pc, #68]	; (800b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	0a5b      	lsrs	r3, r3, #9
 800b002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b006:	3301      	adds	r3, #1
 800b008:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	ee07 3a90 	vmov	s15, r3
 800b010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b014:	edd7 6a07 	vldr	s13, [r7, #28]
 800b018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b020:	ee17 3a90 	vmov	r3, s15
 800b024:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b026:	e005      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	61bb      	str	r3, [r7, #24]
      break;
 800b02c:	e002      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b02e:	4b07      	ldr	r3, [pc, #28]	; (800b04c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b030:	61bb      	str	r3, [r7, #24]
      break;
 800b032:	bf00      	nop
  }

  return sysclockfreq;
 800b034:	69bb      	ldr	r3, [r7, #24]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3724      	adds	r7, #36	; 0x24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	58024400 	.word	0x58024400
 800b048:	03d09000 	.word	0x03d09000
 800b04c:	003d0900 	.word	0x003d0900
 800b050:	016e3600 	.word	0x016e3600
 800b054:	46000000 	.word	0x46000000
 800b058:	4c742400 	.word	0x4c742400
 800b05c:	4a742400 	.word	0x4a742400
 800b060:	4bb71b00 	.word	0x4bb71b00

0800b064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b06a:	f7ff fe81 	bl	800ad70 <HAL_RCC_GetSysClockFreq>
 800b06e:	4602      	mov	r2, r0
 800b070:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	0a1b      	lsrs	r3, r3, #8
 800b076:	f003 030f 	and.w	r3, r3, #15
 800b07a:	490f      	ldr	r1, [pc, #60]	; (800b0b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b07c:	5ccb      	ldrb	r3, [r1, r3]
 800b07e:	f003 031f 	and.w	r3, r3, #31
 800b082:	fa22 f303 	lsr.w	r3, r2, r3
 800b086:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b088:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	f003 030f 	and.w	r3, r3, #15
 800b090:	4a09      	ldr	r2, [pc, #36]	; (800b0b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b092:	5cd3      	ldrb	r3, [r2, r3]
 800b094:	f003 031f 	and.w	r3, r3, #31
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	fa22 f303 	lsr.w	r3, r2, r3
 800b09e:	4a07      	ldr	r2, [pc, #28]	; (800b0bc <HAL_RCC_GetHCLKFreq+0x58>)
 800b0a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0a2:	4a07      	ldr	r2, [pc, #28]	; (800b0c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b0a8:	4b04      	ldr	r3, [pc, #16]	; (800b0bc <HAL_RCC_GetHCLKFreq+0x58>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	58024400 	.word	0x58024400
 800b0b8:	08010528 	.word	0x08010528
 800b0bc:	24000048 	.word	0x24000048
 800b0c0:	24000044 	.word	0x24000044

0800b0c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b0c8:	f7ff ffcc 	bl	800b064 <HAL_RCC_GetHCLKFreq>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	091b      	lsrs	r3, r3, #4
 800b0d4:	f003 0307 	and.w	r3, r3, #7
 800b0d8:	4904      	ldr	r1, [pc, #16]	; (800b0ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800b0da:	5ccb      	ldrb	r3, [r1, r3]
 800b0dc:	f003 031f 	and.w	r3, r3, #31
 800b0e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	58024400 	.word	0x58024400
 800b0ec:	08010528 	.word	0x08010528

0800b0f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b0f4:	f7ff ffb6 	bl	800b064 <HAL_RCC_GetHCLKFreq>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	4b06      	ldr	r3, [pc, #24]	; (800b114 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	f003 0307 	and.w	r3, r3, #7
 800b104:	4904      	ldr	r1, [pc, #16]	; (800b118 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b106:	5ccb      	ldrb	r3, [r1, r3]
 800b108:	f003 031f 	and.w	r3, r3, #31
 800b10c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b110:	4618      	mov	r0, r3
 800b112:	bd80      	pop	{r7, pc}
 800b114:	58024400 	.word	0x58024400
 800b118:	08010528 	.word	0x08010528

0800b11c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b120:	b0c8      	sub	sp, #288	; 0x120
 800b122:	af00      	add	r7, sp, #0
 800b124:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b128:	2300      	movs	r3, #0
 800b12a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b12e:	2300      	movs	r3, #0
 800b130:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b140:	2500      	movs	r5, #0
 800b142:	ea54 0305 	orrs.w	r3, r4, r5
 800b146:	d049      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b14e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b152:	d02f      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b158:	d828      	bhi.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b15a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b15e:	d01a      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b164:	d822      	bhi.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b16a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b16e:	d007      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b170:	e01c      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b172:	4ba7      	ldr	r3, [pc, #668]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b176:	4aa6      	ldr	r2, [pc, #664]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b17c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b17e:	e01a      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b184:	3308      	adds	r3, #8
 800b186:	2102      	movs	r1, #2
 800b188:	4618      	mov	r0, r3
 800b18a:	f001 fc43 	bl	800ca14 <RCCEx_PLL2_Config>
 800b18e:	4603      	mov	r3, r0
 800b190:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b194:	e00f      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b19a:	3328      	adds	r3, #40	; 0x28
 800b19c:	2102      	movs	r1, #2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f001 fcea 	bl	800cb78 <RCCEx_PLL3_Config>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b1aa:	e004      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b1b2:	e000      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10a      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b1be:	4b94      	ldr	r3, [pc, #592]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1cc:	4a90      	ldr	r2, [pc, #576]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	6513      	str	r3, [r2, #80]	; 0x50
 800b1d2:	e003      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b1d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b1e8:	f04f 0900 	mov.w	r9, #0
 800b1ec:	ea58 0309 	orrs.w	r3, r8, r9
 800b1f0:	d047      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b1f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d82a      	bhi.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b1fc:	a201      	add	r2, pc, #4	; (adr r2, 800b204 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b202:	bf00      	nop
 800b204:	0800b219 	.word	0x0800b219
 800b208:	0800b227 	.word	0x0800b227
 800b20c:	0800b23d 	.word	0x0800b23d
 800b210:	0800b25b 	.word	0x0800b25b
 800b214:	0800b25b 	.word	0x0800b25b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b218:	4b7d      	ldr	r3, [pc, #500]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	4a7c      	ldr	r2, [pc, #496]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b21e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b224:	e01a      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b22a:	3308      	adds	r3, #8
 800b22c:	2100      	movs	r1, #0
 800b22e:	4618      	mov	r0, r3
 800b230:	f001 fbf0 	bl	800ca14 <RCCEx_PLL2_Config>
 800b234:	4603      	mov	r3, r0
 800b236:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b23a:	e00f      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b240:	3328      	adds	r3, #40	; 0x28
 800b242:	2100      	movs	r1, #0
 800b244:	4618      	mov	r0, r3
 800b246:	f001 fc97 	bl	800cb78 <RCCEx_PLL3_Config>
 800b24a:	4603      	mov	r3, r0
 800b24c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b250:	e004      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b258:	e000      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b25a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b25c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b264:	4b6a      	ldr	r3, [pc, #424]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b268:	f023 0107 	bic.w	r1, r3, #7
 800b26c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b272:	4a67      	ldr	r2, [pc, #412]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b274:	430b      	orrs	r3, r1
 800b276:	6513      	str	r3, [r2, #80]	; 0x50
 800b278:	e003      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b27e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b28e:	f04f 0b00 	mov.w	fp, #0
 800b292:	ea5a 030b 	orrs.w	r3, sl, fp
 800b296:	d054      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b29c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b29e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b2a2:	d036      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b2a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b2a8:	d82f      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b2aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ae:	d032      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b2b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2b4:	d829      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b2b6:	2bc0      	cmp	r3, #192	; 0xc0
 800b2b8:	d02f      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b2ba:	2bc0      	cmp	r3, #192	; 0xc0
 800b2bc:	d825      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b2be:	2b80      	cmp	r3, #128	; 0x80
 800b2c0:	d018      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b2c2:	2b80      	cmp	r3, #128	; 0x80
 800b2c4:	d821      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b2ca:	2b40      	cmp	r3, #64	; 0x40
 800b2cc:	d007      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b2ce:	e01c      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2d0:	4b4f      	ldr	r3, [pc, #316]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d4:	4a4e      	ldr	r2, [pc, #312]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b2dc:	e01e      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f001 fb94 	bl	800ca14 <RCCEx_PLL2_Config>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b2f2:	e013      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2f8:	3328      	adds	r3, #40	; 0x28
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f001 fc3b 	bl	800cb78 <RCCEx_PLL3_Config>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b308:	e008      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b310:	e004      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b312:	bf00      	nop
 800b314:	e002      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b316:	bf00      	nop
 800b318:	e000      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b31c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b324:	4b3a      	ldr	r3, [pc, #232]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b328:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b332:	4a37      	ldr	r2, [pc, #220]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b334:	430b      	orrs	r3, r1
 800b336:	6513      	str	r3, [r2, #80]	; 0x50
 800b338:	e003      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b33a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b33e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b34e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b352:	2300      	movs	r3, #0
 800b354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b358:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b35c:	460b      	mov	r3, r1
 800b35e:	4313      	orrs	r3, r2
 800b360:	d05c      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b368:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b36c:	d03b      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b36e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b372:	d834      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b378:	d037      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b37a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b37e:	d82e      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b380:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b384:	d033      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b386:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b38a:	d828      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b38c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b390:	d01a      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b396:	d822      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3a0:	d007      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b3a2:	e01c      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3a4:	4b1a      	ldr	r3, [pc, #104]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	4a19      	ldr	r2, [pc, #100]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b3b0:	e01e      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 fb2a 	bl	800ca14 <RCCEx_PLL2_Config>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b3c6:	e013      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3cc:	3328      	adds	r3, #40	; 0x28
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f001 fbd1 	bl	800cb78 <RCCEx_PLL3_Config>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b3dc:	e008      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b3e4:	e004      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b3e6:	bf00      	nop
 800b3e8:	e002      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b3ea:	bf00      	nop
 800b3ec:	e000      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b3ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10d      	bne.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3fc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b406:	4a02      	ldr	r2, [pc, #8]	; (800b410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b408:	430b      	orrs	r3, r1
 800b40a:	6513      	str	r3, [r2, #80]	; 0x50
 800b40c:	e006      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b40e:	bf00      	nop
 800b410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b418:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b428:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b42c:	2300      	movs	r3, #0
 800b42e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b432:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b436:	460b      	mov	r3, r1
 800b438:	4313      	orrs	r3, r2
 800b43a:	d03a      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b442:	2b30      	cmp	r3, #48	; 0x30
 800b444:	d01f      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b446:	2b30      	cmp	r3, #48	; 0x30
 800b448:	d819      	bhi.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b44a:	2b20      	cmp	r3, #32
 800b44c:	d00c      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b44e:	2b20      	cmp	r3, #32
 800b450:	d815      	bhi.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d019      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b456:	2b10      	cmp	r3, #16
 800b458:	d111      	bne.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b45a:	4bae      	ldr	r3, [pc, #696]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	4aad      	ldr	r2, [pc, #692]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b464:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b466:	e011      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b46c:	3308      	adds	r3, #8
 800b46e:	2102      	movs	r1, #2
 800b470:	4618      	mov	r0, r3
 800b472:	f001 facf 	bl	800ca14 <RCCEx_PLL2_Config>
 800b476:	4603      	mov	r3, r0
 800b478:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b47c:	e006      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b484:	e002      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b486:	bf00      	nop
 800b488:	e000      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b48a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b48c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10a      	bne.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b494:	4b9f      	ldr	r3, [pc, #636]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b498:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a2:	4a9c      	ldr	r2, [pc, #624]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4a8:	e003      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b4be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b4c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	d051      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b4d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4dc:	d035      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b4de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4e2:	d82e      	bhi.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b4e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4e8:	d031      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b4ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4ee:	d828      	bhi.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b4f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4f4:	d01a      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b4f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4fa:	d822      	bhi.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b504:	d007      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b506:	e01c      	b.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b508:	4b82      	ldr	r3, [pc, #520]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	4a81      	ldr	r2, [pc, #516]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b50e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b514:	e01c      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b51a:	3308      	adds	r3, #8
 800b51c:	2100      	movs	r1, #0
 800b51e:	4618      	mov	r0, r3
 800b520:	f001 fa78 	bl	800ca14 <RCCEx_PLL2_Config>
 800b524:	4603      	mov	r3, r0
 800b526:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b52a:	e011      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b52c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b530:	3328      	adds	r3, #40	; 0x28
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f001 fb1f 	bl	800cb78 <RCCEx_PLL3_Config>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b540:	e006      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b548:	e002      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b54a:	bf00      	nop
 800b54c:	e000      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b54e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b550:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b558:	4b6e      	ldr	r3, [pc, #440]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b566:	4a6b      	ldr	r2, [pc, #428]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b568:	430b      	orrs	r3, r1
 800b56a:	6513      	str	r3, [r2, #80]	; 0x50
 800b56c:	e003      	b.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b56e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b572:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b586:	2300      	movs	r3, #0
 800b588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b58c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b590:	460b      	mov	r3, r1
 800b592:	4313      	orrs	r3, r2
 800b594:	d053      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b59c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5a0:	d033      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b5a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5a6:	d82c      	bhi.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b5a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5ac:	d02f      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b5ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5b2:	d826      	bhi.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b5b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5b8:	d02b      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b5ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5be:	d820      	bhi.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b5c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5c4:	d012      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ca:	d81a      	bhi.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d022      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5d4:	d115      	bne.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5da:	3308      	adds	r3, #8
 800b5dc:	2101      	movs	r1, #1
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f001 fa18 	bl	800ca14 <RCCEx_PLL2_Config>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b5ea:	e015      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5f0:	3328      	adds	r3, #40	; 0x28
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 fabf 	bl	800cb78 <RCCEx_PLL3_Config>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b600:	e00a      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b608:	e006      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b60a:	bf00      	nop
 800b60c:	e004      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b60e:	bf00      	nop
 800b610:	e002      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b616:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10a      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b620:	4b3c      	ldr	r3, [pc, #240]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b624:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b62c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b62e:	4a39      	ldr	r2, [pc, #228]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b630:	430b      	orrs	r3, r1
 800b632:	6513      	str	r3, [r2, #80]	; 0x50
 800b634:	e003      	b.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b636:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b63a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b63e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b64a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b64e:	2300      	movs	r3, #0
 800b650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b654:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b658:	460b      	mov	r3, r1
 800b65a:	4313      	orrs	r3, r2
 800b65c:	d060      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b666:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b66a:	d039      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b66c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b670:	d832      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b676:	d035      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b67c:	d82c      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b682:	d031      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b688:	d826      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b68a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b68e:	d02d      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b690:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b694:	d820      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b69a:	d012      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a0:	d81a      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d024      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b6a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6aa:	d115      	bne.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f001 f9ad 	bl	800ca14 <RCCEx_PLL2_Config>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b6c0:	e017      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6c6:	3328      	adds	r3, #40	; 0x28
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f001 fa54 	bl	800cb78 <RCCEx_PLL3_Config>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b6d6:	e00c      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b6de:	e008      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b6e0:	bf00      	nop
 800b6e2:	e006      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b6e4:	bf00      	nop
 800b6e6:	e004      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b6e8:	bf00      	nop
 800b6ea:	e002      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b6ec:	bf00      	nop
 800b6ee:	e000      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10e      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b6fa:	4b06      	ldr	r3, [pc, #24]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b70a:	4a02      	ldr	r2, [pc, #8]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b70c:	430b      	orrs	r3, r1
 800b70e:	6593      	str	r3, [r2, #88]	; 0x58
 800b710:	e006      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b712:	bf00      	nop
 800b714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b71c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b72c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b730:	2300      	movs	r3, #0
 800b732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b73a:	460b      	mov	r3, r1
 800b73c:	4313      	orrs	r3, r2
 800b73e:	d037      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b74a:	d00e      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b74c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b750:	d816      	bhi.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d018      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b75a:	d111      	bne.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b75c:	4bc4      	ldr	r3, [pc, #784]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	4ac3      	ldr	r2, [pc, #780]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b768:	e00f      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b76e:	3308      	adds	r3, #8
 800b770:	2101      	movs	r1, #1
 800b772:	4618      	mov	r0, r3
 800b774:	f001 f94e 	bl	800ca14 <RCCEx_PLL2_Config>
 800b778:	4603      	mov	r3, r0
 800b77a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b77e:	e004      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b786:	e000      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b78a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b792:	4bb7      	ldr	r3, [pc, #732]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b796:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b79e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7a0:	4ab3      	ldr	r2, [pc, #716]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7a2:	430b      	orrs	r3, r1
 800b7a4:	6513      	str	r3, [r2, #80]	; 0x50
 800b7a6:	e003      	b.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b7bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b7c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	d039      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d81c      	bhi.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b7da:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b81d 	.word	0x0800b81d
 800b7e4:	0800b7f1 	.word	0x0800b7f1
 800b7e8:	0800b7ff 	.word	0x0800b7ff
 800b7ec:	0800b81d 	.word	0x0800b81d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f0:	4b9f      	ldr	r3, [pc, #636]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	4a9e      	ldr	r2, [pc, #632]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b7fc:	e00f      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b802:	3308      	adds	r3, #8
 800b804:	2102      	movs	r1, #2
 800b806:	4618      	mov	r0, r3
 800b808:	f001 f904 	bl	800ca14 <RCCEx_PLL2_Config>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b812:	e004      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b81a:	e000      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b81e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10a      	bne.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b826:	4b92      	ldr	r3, [pc, #584]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b82a:	f023 0103 	bic.w	r1, r3, #3
 800b82e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b834:	4a8e      	ldr	r2, [pc, #568]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b836:	430b      	orrs	r3, r1
 800b838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b83a:	e003      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b840:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b850:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b854:	2300      	movs	r3, #0
 800b856:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b85a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b85e:	460b      	mov	r3, r1
 800b860:	4313      	orrs	r3, r2
 800b862:	f000 8099 	beq.w	800b998 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b866:	4b83      	ldr	r3, [pc, #524]	; (800ba74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a82      	ldr	r2, [pc, #520]	; (800ba74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b86c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b870:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b872:	f7f8 fd3d 	bl	80042f0 <HAL_GetTick>
 800b876:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b87a:	e00b      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b87c:	f7f8 fd38 	bl	80042f0 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	2b64      	cmp	r3, #100	; 0x64
 800b88a:	d903      	bls.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b892:	e005      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b894:	4b77      	ldr	r3, [pc, #476]	; (800ba74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0ed      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d173      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8a8:	4b71      	ldr	r3, [pc, #452]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8b4:	4053      	eors	r3, r2
 800b8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d015      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8be:	4b6c      	ldr	r3, [pc, #432]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8ca:	4b69      	ldr	r3, [pc, #420]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ce:	4a68      	ldr	r2, [pc, #416]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b8d6:	4b66      	ldr	r3, [pc, #408]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	4a65      	ldr	r2, [pc, #404]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b8e2:	4a63      	ldr	r2, [pc, #396]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b8ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f6:	d118      	bne.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8f8:	f7f8 fcfa 	bl	80042f0 <HAL_GetTick>
 800b8fc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b900:	e00d      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b902:	f7f8 fcf5 	bl	80042f0 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b90c:	1ad2      	subs	r2, r2, r3
 800b90e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b912:	429a      	cmp	r2, r3
 800b914:	d903      	bls.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800b91c:	e005      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b91e:	4b54      	ldr	r3, [pc, #336]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0eb      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b92a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d129      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b93e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b942:	d10e      	bne.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b944:	4b4a      	ldr	r3, [pc, #296]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b94c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b950:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b954:	091a      	lsrs	r2, r3, #4
 800b956:	4b48      	ldr	r3, [pc, #288]	; (800ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b958:	4013      	ands	r3, r2
 800b95a:	4a45      	ldr	r2, [pc, #276]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b95c:	430b      	orrs	r3, r1
 800b95e:	6113      	str	r3, [r2, #16]
 800b960:	e005      	b.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b962:	4b43      	ldr	r3, [pc, #268]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	4a42      	ldr	r2, [pc, #264]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b968:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b96c:	6113      	str	r3, [r2, #16]
 800b96e:	4b40      	ldr	r3, [pc, #256]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b970:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b97a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b97e:	4a3c      	ldr	r2, [pc, #240]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b980:	430b      	orrs	r3, r1
 800b982:	6713      	str	r3, [r2, #112]	; 0x70
 800b984:	e008      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b98a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800b98e:	e003      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b994:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f002 0301 	and.w	r3, r2, #1
 800b9a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	f000 8090 	beq.w	800bada <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9c2:	2b28      	cmp	r3, #40	; 0x28
 800b9c4:	d870      	bhi.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b9c6:	a201      	add	r2, pc, #4	; (adr r2, 800b9cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9cc:	0800bab1 	.word	0x0800bab1
 800b9d0:	0800baa9 	.word	0x0800baa9
 800b9d4:	0800baa9 	.word	0x0800baa9
 800b9d8:	0800baa9 	.word	0x0800baa9
 800b9dc:	0800baa9 	.word	0x0800baa9
 800b9e0:	0800baa9 	.word	0x0800baa9
 800b9e4:	0800baa9 	.word	0x0800baa9
 800b9e8:	0800baa9 	.word	0x0800baa9
 800b9ec:	0800ba7d 	.word	0x0800ba7d
 800b9f0:	0800baa9 	.word	0x0800baa9
 800b9f4:	0800baa9 	.word	0x0800baa9
 800b9f8:	0800baa9 	.word	0x0800baa9
 800b9fc:	0800baa9 	.word	0x0800baa9
 800ba00:	0800baa9 	.word	0x0800baa9
 800ba04:	0800baa9 	.word	0x0800baa9
 800ba08:	0800baa9 	.word	0x0800baa9
 800ba0c:	0800ba93 	.word	0x0800ba93
 800ba10:	0800baa9 	.word	0x0800baa9
 800ba14:	0800baa9 	.word	0x0800baa9
 800ba18:	0800baa9 	.word	0x0800baa9
 800ba1c:	0800baa9 	.word	0x0800baa9
 800ba20:	0800baa9 	.word	0x0800baa9
 800ba24:	0800baa9 	.word	0x0800baa9
 800ba28:	0800baa9 	.word	0x0800baa9
 800ba2c:	0800bab1 	.word	0x0800bab1
 800ba30:	0800baa9 	.word	0x0800baa9
 800ba34:	0800baa9 	.word	0x0800baa9
 800ba38:	0800baa9 	.word	0x0800baa9
 800ba3c:	0800baa9 	.word	0x0800baa9
 800ba40:	0800baa9 	.word	0x0800baa9
 800ba44:	0800baa9 	.word	0x0800baa9
 800ba48:	0800baa9 	.word	0x0800baa9
 800ba4c:	0800bab1 	.word	0x0800bab1
 800ba50:	0800baa9 	.word	0x0800baa9
 800ba54:	0800baa9 	.word	0x0800baa9
 800ba58:	0800baa9 	.word	0x0800baa9
 800ba5c:	0800baa9 	.word	0x0800baa9
 800ba60:	0800baa9 	.word	0x0800baa9
 800ba64:	0800baa9 	.word	0x0800baa9
 800ba68:	0800baa9 	.word	0x0800baa9
 800ba6c:	0800bab1 	.word	0x0800bab1
 800ba70:	58024400 	.word	0x58024400
 800ba74:	58024800 	.word	0x58024800
 800ba78:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba80:	3308      	adds	r3, #8
 800ba82:	2101      	movs	r1, #1
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 ffc5 	bl	800ca14 <RCCEx_PLL2_Config>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba90:	e00f      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba96:	3328      	adds	r3, #40	; 0x28
 800ba98:	2101      	movs	r1, #1
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 f86c 	bl	800cb78 <RCCEx_PLL3_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800baa6:	e004      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800baae:	e000      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10b      	bne.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800baba:	4bc0      	ldr	r3, [pc, #768]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800babc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800babe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baca:	4abc      	ldr	r2, [pc, #752]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bacc:	430b      	orrs	r3, r1
 800bace:	6553      	str	r3, [r2, #84]	; 0x54
 800bad0:	e003      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bad6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f002 0302 	and.w	r3, r2, #2
 800bae6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800baea:	2300      	movs	r3, #0
 800baec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800baf0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800baf4:	460b      	mov	r3, r1
 800baf6:	4313      	orrs	r3, r2
 800baf8:	d043      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bafa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb02:	2b05      	cmp	r3, #5
 800bb04:	d824      	bhi.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bb06:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0c:	0800bb59 	.word	0x0800bb59
 800bb10:	0800bb25 	.word	0x0800bb25
 800bb14:	0800bb3b 	.word	0x0800bb3b
 800bb18:	0800bb59 	.word	0x0800bb59
 800bb1c:	0800bb59 	.word	0x0800bb59
 800bb20:	0800bb59 	.word	0x0800bb59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb28:	3308      	adds	r3, #8
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 ff71 	bl	800ca14 <RCCEx_PLL2_Config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb38:	e00f      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb3e:	3328      	adds	r3, #40	; 0x28
 800bb40:	2101      	movs	r1, #1
 800bb42:	4618      	mov	r0, r3
 800bb44:	f001 f818 	bl	800cb78 <RCCEx_PLL3_Config>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb4e:	e004      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb56:	e000      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bb58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10b      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb62:	4b96      	ldr	r3, [pc, #600]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb66:	f023 0107 	bic.w	r1, r3, #7
 800bb6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb72:	4a92      	ldr	r2, [pc, #584]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb74:	430b      	orrs	r3, r1
 800bb76:	6553      	str	r3, [r2, #84]	; 0x54
 800bb78:	e003      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	f002 0304 	and.w	r3, r2, #4
 800bb8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb92:	2300      	movs	r3, #0
 800bb94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb98:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	d043      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbaa:	2b05      	cmp	r3, #5
 800bbac:	d824      	bhi.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bc01 	.word	0x0800bc01
 800bbb8:	0800bbcd 	.word	0x0800bbcd
 800bbbc:	0800bbe3 	.word	0x0800bbe3
 800bbc0:	0800bc01 	.word	0x0800bc01
 800bbc4:	0800bc01 	.word	0x0800bc01
 800bbc8:	0800bc01 	.word	0x0800bc01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 ff1d 	bl	800ca14 <RCCEx_PLL2_Config>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bbe0:	e00f      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbe6:	3328      	adds	r3, #40	; 0x28
 800bbe8:	2101      	movs	r1, #1
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 ffc4 	bl	800cb78 <RCCEx_PLL3_Config>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bbf6:	e004      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bbfe:	e000      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800bc00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10b      	bne.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc0a:	4b6c      	ldr	r3, [pc, #432]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0e:	f023 0107 	bic.w	r1, r3, #7
 800bc12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc1a:	4a68      	ldr	r2, [pc, #416]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc1c:	430b      	orrs	r3, r1
 800bc1e:	6593      	str	r3, [r2, #88]	; 0x58
 800bc20:	e003      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f002 0320 	and.w	r3, r2, #32
 800bc36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc44:	460b      	mov	r3, r1
 800bc46:	4313      	orrs	r3, r2
 800bc48:	d055      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc56:	d033      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bc58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc5c:	d82c      	bhi.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc62:	d02f      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bc64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc68:	d826      	bhi.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc6e:	d02b      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bc70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc74:	d820      	bhi.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc7a:	d012      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800bc7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc80:	d81a      	bhi.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d022      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800bc86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc8a:	d115      	bne.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc90:	3308      	adds	r3, #8
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 febd 	bl	800ca14 <RCCEx_PLL2_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bca0:	e015      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bca6:	3328      	adds	r3, #40	; 0x28
 800bca8:	2102      	movs	r1, #2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 ff64 	bl	800cb78 <RCCEx_PLL3_Config>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcb6:	e00a      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bcbe:	e006      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bcc0:	bf00      	nop
 800bcc2:	e004      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bcc4:	bf00      	nop
 800bcc6:	e002      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bcc8:	bf00      	nop
 800bcca:	e000      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10b      	bne.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcd6:	4b39      	ldr	r3, [pc, #228]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bce6:	4a35      	ldr	r2, [pc, #212]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bce8:	430b      	orrs	r3, r1
 800bcea:	6553      	str	r3, [r2, #84]	; 0x54
 800bcec:	e003      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bcf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd06:	2300      	movs	r3, #0
 800bd08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4313      	orrs	r3, r2
 800bd14:	d058      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd22:	d033      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bd24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd28:	d82c      	bhi.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bd2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2e:	d02f      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bd30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd34:	d826      	bhi.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bd36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd3a:	d02b      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bd3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd40:	d820      	bhi.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bd42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd46:	d012      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800bd48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd4c:	d81a      	bhi.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d022      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800bd52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd56:	d115      	bne.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd5c:	3308      	adds	r3, #8
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 fe57 	bl	800ca14 <RCCEx_PLL2_Config>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd6c:	e015      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd72:	3328      	adds	r3, #40	; 0x28
 800bd74:	2102      	movs	r1, #2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 fefe 	bl	800cb78 <RCCEx_PLL3_Config>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd82:	e00a      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd8a:	e006      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd8c:	bf00      	nop
 800bd8e:	e004      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd90:	bf00      	nop
 800bd92:	e002      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd94:	bf00      	nop
 800bd96:	e000      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bd98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10e      	bne.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bda2:	4b06      	ldr	r3, [pc, #24]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bda4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bdaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdb2:	4a02      	ldr	r2, [pc, #8]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	6593      	str	r3, [r2, #88]	; 0x58
 800bdb8:	e006      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bdba:	bf00      	nop
 800bdbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bdc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bdd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bde2:	460b      	mov	r3, r1
 800bde4:	4313      	orrs	r3, r2
 800bde6:	d055      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bde8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bdf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bdf4:	d033      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800bdf6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bdfa:	d82c      	bhi.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bdfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be00:	d02f      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800be02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be06:	d826      	bhi.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800be08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be0c:	d02b      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800be0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be12:	d820      	bhi.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800be14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be18:	d012      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800be1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be1e:	d81a      	bhi.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800be20:	2b00      	cmp	r3, #0
 800be22:	d022      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800be24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be28:	d115      	bne.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be2e:	3308      	adds	r3, #8
 800be30:	2100      	movs	r1, #0
 800be32:	4618      	mov	r0, r3
 800be34:	f000 fdee 	bl	800ca14 <RCCEx_PLL2_Config>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be3e:	e015      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be44:	3328      	adds	r3, #40	; 0x28
 800be46:	2102      	movs	r1, #2
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 fe95 	bl	800cb78 <RCCEx_PLL3_Config>
 800be4e:	4603      	mov	r3, r0
 800be50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be54:	e00a      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be5c:	e006      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be5e:	bf00      	nop
 800be60:	e004      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be62:	bf00      	nop
 800be64:	e002      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be66:	bf00      	nop
 800be68:	e000      	b.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800be6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10b      	bne.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be74:	4ba1      	ldr	r3, [pc, #644]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800be76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be78:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800be7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800be84:	4a9d      	ldr	r2, [pc, #628]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800be86:	430b      	orrs	r3, r1
 800be88:	6593      	str	r3, [r2, #88]	; 0x58
 800be8a:	e003      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f002 0308 	and.w	r3, r2, #8
 800bea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800beaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800beae:	460b      	mov	r3, r1
 800beb0:	4313      	orrs	r3, r2
 800beb2:	d01e      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800beb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800beb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec0:	d10c      	bne.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bec6:	3328      	adds	r3, #40	; 0x28
 800bec8:	2102      	movs	r1, #2
 800beca:	4618      	mov	r0, r3
 800becc:	f000 fe54 	bl	800cb78 <RCCEx_PLL3_Config>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d002      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bedc:	4b87      	ldr	r3, [pc, #540]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beec:	4a83      	ldr	r2, [pc, #524]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800beee:	430b      	orrs	r3, r1
 800bef0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f002 0310 	and.w	r3, r2, #16
 800befe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf02:	2300      	movs	r3, #0
 800bf04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	d01e      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf1e:	d10c      	bne.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf24:	3328      	adds	r3, #40	; 0x28
 800bf26:	2102      	movs	r1, #2
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 fe25 	bl	800cb78 <RCCEx_PLL3_Config>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf3a:	4b70      	ldr	r3, [pc, #448]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bf3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf4a:	4a6c      	ldr	r2, [pc, #432]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bf4c:	430b      	orrs	r3, r1
 800bf4e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf60:	2300      	movs	r3, #0
 800bf62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	d03e      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bf70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf7c:	d022      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800bf7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf82:	d81b      	bhi.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800bf88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf8c:	d00b      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800bf8e:	e015      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf94:	3308      	adds	r3, #8
 800bf96:	2100      	movs	r1, #0
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f000 fd3b 	bl	800ca14 <RCCEx_PLL2_Config>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfa4:	e00f      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfaa:	3328      	adds	r3, #40	; 0x28
 800bfac:	2102      	movs	r1, #2
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 fde2 	bl	800cb78 <RCCEx_PLL3_Config>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfba:	e004      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bfc2:	e000      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800bfc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10b      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bfce:	4b4b      	ldr	r3, [pc, #300]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bfd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bfd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bfde:	4a47      	ldr	r2, [pc, #284]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	6593      	str	r3, [r2, #88]	; 0x58
 800bfe4:	e003      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bfee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bffa:	67bb      	str	r3, [r7, #120]	; 0x78
 800bffc:	2300      	movs	r3, #0
 800bffe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c000:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c004:	460b      	mov	r3, r1
 800c006:	4313      	orrs	r3, r2
 800c008:	d03b      	beq.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c012:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c016:	d01f      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c018:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c01c:	d818      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c01e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c022:	d003      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c028:	d007      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c02a:	e011      	b.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c02c:	4b33      	ldr	r3, [pc, #204]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	4a32      	ldr	r2, [pc, #200]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c038:	e00f      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c03e:	3328      	adds	r3, #40	; 0x28
 800c040:	2101      	movs	r1, #1
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fd98 	bl	800cb78 <RCCEx_PLL3_Config>
 800c048:	4603      	mov	r3, r0
 800c04a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c04e:	e004      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c056:	e000      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c05a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c062:	4b26      	ldr	r3, [pc, #152]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c066:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c072:	4a22      	ldr	r2, [pc, #136]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c074:	430b      	orrs	r3, r1
 800c076:	6553      	str	r3, [r2, #84]	; 0x54
 800c078:	e003      	b.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c07a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c07e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c08e:	673b      	str	r3, [r7, #112]	; 0x70
 800c090:	2300      	movs	r3, #0
 800c092:	677b      	str	r3, [r7, #116]	; 0x74
 800c094:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c098:	460b      	mov	r3, r1
 800c09a:	4313      	orrs	r3, r2
 800c09c:	d034      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c09e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ac:	d007      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c0ae:	e011      	b.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0b0:	4b12      	ldr	r3, [pc, #72]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	4a11      	ldr	r2, [pc, #68]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0bc:	e00e      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	2102      	movs	r1, #2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fca4 	bl	800ca14 <RCCEx_PLL2_Config>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0d2:	e003      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10d      	bne.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c0e4:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c0ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f2:	4a02      	ldr	r2, [pc, #8]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0f4:	430b      	orrs	r3, r1
 800c0f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0f8:	e006      	b.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c0fa:	bf00      	nop
 800c0fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c100:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c104:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c110:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c114:	66bb      	str	r3, [r7, #104]	; 0x68
 800c116:	2300      	movs	r3, #0
 800c118:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c11a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c11e:	460b      	mov	r3, r1
 800c120:	4313      	orrs	r3, r2
 800c122:	d00c      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c128:	3328      	adds	r3, #40	; 0x28
 800c12a:	2102      	movs	r1, #2
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 fd23 	bl	800cb78 <RCCEx_PLL3_Config>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c13e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c14a:	663b      	str	r3, [r7, #96]	; 0x60
 800c14c:	2300      	movs	r3, #0
 800c14e:	667b      	str	r3, [r7, #100]	; 0x64
 800c150:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c154:	460b      	mov	r3, r1
 800c156:	4313      	orrs	r3, r2
 800c158:	d038      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c166:	d018      	beq.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c16c:	d811      	bhi.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c16e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c172:	d014      	beq.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c178:	d80b      	bhi.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d011      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c182:	d106      	bne.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c184:	4bc3      	ldr	r3, [pc, #780]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	4ac2      	ldr	r2, [pc, #776]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c18a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c18e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c190:	e008      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c198:	e004      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c19a:	bf00      	nop
 800c19c:	e002      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c19e:	bf00      	nop
 800c1a0:	e000      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c1a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1ac:	4bb9      	ldr	r3, [pc, #740]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1bc:	4ab5      	ldr	r2, [pc, #724]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1be:	430b      	orrs	r3, r1
 800c1c0:	6553      	str	r3, [r2, #84]	; 0x54
 800c1c2:	e003      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c1cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c1d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1da:	2300      	movs	r3, #0
 800c1dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	d009      	beq.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c1e8:	4baa      	ldr	r3, [pc, #680]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1f6:	4aa7      	ldr	r2, [pc, #668]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c1f8:	430b      	orrs	r3, r1
 800c1fa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c204:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c208:	653b      	str	r3, [r7, #80]	; 0x50
 800c20a:	2300      	movs	r3, #0
 800c20c:	657b      	str	r3, [r7, #84]	; 0x54
 800c20e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c212:	460b      	mov	r3, r1
 800c214:	4313      	orrs	r3, r2
 800c216:	d009      	beq.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c218:	4b9e      	ldr	r3, [pc, #632]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c21c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c226:	4a9b      	ldr	r2, [pc, #620]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c228:	430b      	orrs	r3, r1
 800c22a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c238:	64bb      	str	r3, [r7, #72]	; 0x48
 800c23a:	2300      	movs	r3, #0
 800c23c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c23e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c242:	460b      	mov	r3, r1
 800c244:	4313      	orrs	r3, r2
 800c246:	d009      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c248:	4b92      	ldr	r3, [pc, #584]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c24a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c24c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c256:	4a8f      	ldr	r2, [pc, #572]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c258:	430b      	orrs	r3, r1
 800c25a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c25c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c268:	643b      	str	r3, [r7, #64]	; 0x40
 800c26a:	2300      	movs	r3, #0
 800c26c:	647b      	str	r3, [r7, #68]	; 0x44
 800c26e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c272:	460b      	mov	r3, r1
 800c274:	4313      	orrs	r3, r2
 800c276:	d00e      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c278:	4b86      	ldr	r3, [pc, #536]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	4a85      	ldr	r2, [pc, #532]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c27e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c282:	6113      	str	r3, [r2, #16]
 800c284:	4b83      	ldr	r3, [pc, #524]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c286:	6919      	ldr	r1, [r3, #16]
 800c288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c28c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c290:	4a80      	ldr	r2, [pc, #512]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c292:	430b      	orrs	r3, r1
 800c294:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c2a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	d009      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2b2:	4b78      	ldr	r3, [pc, #480]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c0:	4a74      	ldr	r2, [pc, #464]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c2c2:	430b      	orrs	r3, r1
 800c2c4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c2d2:	633b      	str	r3, [r7, #48]	; 0x30
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	d00a      	beq.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c2e2:	4b6c      	ldr	r3, [pc, #432]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2f2:	4a68      	ldr	r2, [pc, #416]	; (800c494 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c2f4:	430b      	orrs	r3, r1
 800c2f6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	2100      	movs	r1, #0
 800c302:	62b9      	str	r1, [r7, #40]	; 0x28
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c30a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c30e:	460b      	mov	r3, r1
 800c310:	4313      	orrs	r3, r2
 800c312:	d011      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c318:	3308      	adds	r3, #8
 800c31a:	2100      	movs	r1, #0
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fb79 	bl	800ca14 <RCCEx_PLL2_Config>
 800c322:	4603      	mov	r3, r0
 800c324:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c328:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d003      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c330:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c334:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	2100      	movs	r1, #0
 800c342:	6239      	str	r1, [r7, #32]
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	627b      	str	r3, [r7, #36]	; 0x24
 800c34a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c34e:	460b      	mov	r3, r1
 800c350:	4313      	orrs	r3, r2
 800c352:	d011      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c358:	3308      	adds	r3, #8
 800c35a:	2101      	movs	r1, #1
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 fb59 	bl	800ca14 <RCCEx_PLL2_Config>
 800c362:	4603      	mov	r3, r0
 800c364:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c374:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	2100      	movs	r1, #0
 800c382:	61b9      	str	r1, [r7, #24]
 800c384:	f003 0304 	and.w	r3, r3, #4
 800c388:	61fb      	str	r3, [r7, #28]
 800c38a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c38e:	460b      	mov	r3, r1
 800c390:	4313      	orrs	r3, r2
 800c392:	d011      	beq.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c398:	3308      	adds	r3, #8
 800c39a:	2102      	movs	r1, #2
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 fb39 	bl	800ca14 <RCCEx_PLL2_Config>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c3a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d003      	beq.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c3b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	6139      	str	r1, [r7, #16]
 800c3c4:	f003 0308 	and.w	r3, r3, #8
 800c3c8:	617b      	str	r3, [r7, #20]
 800c3ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	d011      	beq.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3d8:	3328      	adds	r3, #40	; 0x28
 800c3da:	2100      	movs	r1, #0
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f000 fbcb 	bl	800cb78 <RCCEx_PLL3_Config>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c3e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d003      	beq.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	2100      	movs	r1, #0
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	f003 0310 	and.w	r3, r3, #16
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c40e:	460b      	mov	r3, r1
 800c410:	4313      	orrs	r3, r2
 800c412:	d011      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c418:	3328      	adds	r3, #40	; 0x28
 800c41a:	2101      	movs	r1, #1
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 fbab 	bl	800cb78 <RCCEx_PLL3_Config>
 800c422:	4603      	mov	r3, r0
 800c424:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c428:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d003      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c430:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c434:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	2100      	movs	r1, #0
 800c442:	6039      	str	r1, [r7, #0]
 800c444:	f003 0320 	and.w	r3, r3, #32
 800c448:	607b      	str	r3, [r7, #4]
 800c44a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c44e:	460b      	mov	r3, r1
 800c450:	4313      	orrs	r3, r2
 800c452:	d011      	beq.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c458:	3328      	adds	r3, #40	; 0x28
 800c45a:	2102      	movs	r1, #2
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fb8b 	bl	800cb78 <RCCEx_PLL3_Config>
 800c462:	4603      	mov	r3, r0
 800c464:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d003      	beq.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c474:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c478:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	e000      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c484:	2301      	movs	r3, #1
}
 800c486:	4618      	mov	r0, r3
 800c488:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c48c:	46bd      	mov	sp, r7
 800c48e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c492:	bf00      	nop
 800c494:	58024400 	.word	0x58024400

0800c498 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c49c:	f7fe fde2 	bl	800b064 <HAL_RCC_GetHCLKFreq>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	4b06      	ldr	r3, [pc, #24]	; (800c4bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	091b      	lsrs	r3, r3, #4
 800c4a8:	f003 0307 	and.w	r3, r3, #7
 800c4ac:	4904      	ldr	r1, [pc, #16]	; (800c4c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c4ae:	5ccb      	ldrb	r3, [r1, r3]
 800c4b0:	f003 031f 	and.w	r3, r3, #31
 800c4b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	58024400 	.word	0x58024400
 800c4c0:	08010528 	.word	0x08010528

0800c4c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b089      	sub	sp, #36	; 0x24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4cc:	4ba1      	ldr	r3, [pc, #644]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d0:	f003 0303 	and.w	r3, r3, #3
 800c4d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c4d6:	4b9f      	ldr	r3, [pc, #636]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4da:	0b1b      	lsrs	r3, r3, #12
 800c4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c4e2:	4b9c      	ldr	r3, [pc, #624]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	091b      	lsrs	r3, r3, #4
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c4ee:	4b99      	ldr	r3, [pc, #612]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f2:	08db      	lsrs	r3, r3, #3
 800c4f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	fb02 f303 	mul.w	r3, r2, r3
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c506:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 8111 	beq.w	800c734 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	2b02      	cmp	r3, #2
 800c516:	f000 8083 	beq.w	800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	f200 80a1 	bhi.w	800c664 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d056      	beq.n	800c5dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c52e:	e099      	b.n	800c664 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c530:	4b88      	ldr	r3, [pc, #544]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0320 	and.w	r3, r3, #32
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d02d      	beq.n	800c598 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c53c:	4b85      	ldr	r3, [pc, #532]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	08db      	lsrs	r3, r3, #3
 800c542:	f003 0303 	and.w	r3, r3, #3
 800c546:	4a84      	ldr	r2, [pc, #528]	; (800c758 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c548:	fa22 f303 	lsr.w	r3, r2, r3
 800c54c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	ee07 3a90 	vmov	s15, r3
 800c554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	ee07 3a90 	vmov	s15, r3
 800c55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c566:	4b7b      	ldr	r3, [pc, #492]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c56e:	ee07 3a90 	vmov	s15, r3
 800c572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c576:	ed97 6a03 	vldr	s12, [r7, #12]
 800c57a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c592:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c596:	e087      	b.n	800c6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5aa:	4b6a      	ldr	r3, [pc, #424]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b2:	ee07 3a90 	vmov	s15, r3
 800c5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5da:	e065      	b.n	800c6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ee:	4b59      	ldr	r3, [pc, #356]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c602:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c61e:	e043      	b.n	800c6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	ee07 3a90 	vmov	s15, r3
 800c626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c62a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c632:	4b48      	ldr	r3, [pc, #288]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c63a:	ee07 3a90 	vmov	s15, r3
 800c63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c642:	ed97 6a03 	vldr	s12, [r7, #12]
 800c646:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c662:	e021      	b.n	800c6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c676:	4b37      	ldr	r3, [pc, #220]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c67e:	ee07 3a90 	vmov	s15, r3
 800c682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c686:	ed97 6a03 	vldr	s12, [r7, #12]
 800c68a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c6a8:	4b2a      	ldr	r3, [pc, #168]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	0a5b      	lsrs	r3, r3, #9
 800c6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b2:	ee07 3a90 	vmov	s15, r3
 800c6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6ce:	ee17 2a90 	vmov	r2, s15
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c6d6:	4b1f      	ldr	r3, [pc, #124]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6da:	0c1b      	lsrs	r3, r3, #16
 800c6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6e0:	ee07 3a90 	vmov	s15, r3
 800c6e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6fc:	ee17 2a90 	vmov	r2, s15
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c704:	4b13      	ldr	r3, [pc, #76]	; (800c754 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c708:	0e1b      	lsrs	r3, r3, #24
 800c70a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c71a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c71e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c72a:	ee17 2a90 	vmov	r2, s15
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c732:	e008      	b.n	800c746 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	609a      	str	r2, [r3, #8]
}
 800c746:	bf00      	nop
 800c748:	3724      	adds	r7, #36	; 0x24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	58024400 	.word	0x58024400
 800c758:	03d09000 	.word	0x03d09000
 800c75c:	46000000 	.word	0x46000000
 800c760:	4c742400 	.word	0x4c742400
 800c764:	4a742400 	.word	0x4a742400
 800c768:	4bb71b00 	.word	0x4bb71b00

0800c76c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b089      	sub	sp, #36	; 0x24
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c774:	4ba1      	ldr	r3, [pc, #644]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c778:	f003 0303 	and.w	r3, r3, #3
 800c77c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c77e:	4b9f      	ldr	r3, [pc, #636]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c782:	0d1b      	lsrs	r3, r3, #20
 800c784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c788:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c78a:	4b9c      	ldr	r3, [pc, #624]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78e:	0a1b      	lsrs	r3, r3, #8
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c796:	4b99      	ldr	r3, [pc, #612]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c79a:	08db      	lsrs	r3, r3, #3
 800c79c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	fb02 f303 	mul.w	r3, r2, r3
 800c7a6:	ee07 3a90 	vmov	s15, r3
 800c7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 8111 	beq.w	800c9dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	f000 8083 	beq.w	800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	f200 80a1 	bhi.w	800c90c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d003      	beq.n	800c7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d056      	beq.n	800c884 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c7d6:	e099      	b.n	800c90c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7d8:	4b88      	ldr	r3, [pc, #544]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f003 0320 	and.w	r3, r3, #32
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d02d      	beq.n	800c840 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7e4:	4b85      	ldr	r3, [pc, #532]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	08db      	lsrs	r3, r3, #3
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	4a84      	ldr	r2, [pc, #528]	; (800ca00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	ee07 3a90 	vmov	s15, r3
 800c7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	ee07 3a90 	vmov	s15, r3
 800c806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c80e:	4b7b      	ldr	r3, [pc, #492]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c816:	ee07 3a90 	vmov	s15, r3
 800c81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c822:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c83a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c83e:	e087      	b.n	800c950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	ee07 3a90 	vmov	s15, r3
 800c846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c852:	4b6a      	ldr	r3, [pc, #424]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c85a:	ee07 3a90 	vmov	s15, r3
 800c85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c862:	ed97 6a03 	vldr	s12, [r7, #12]
 800c866:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c87e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c882:	e065      	b.n	800c950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	ee07 3a90 	vmov	s15, r3
 800c88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c88e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c896:	4b59      	ldr	r3, [pc, #356]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c89e:	ee07 3a90 	vmov	s15, r3
 800c8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8c6:	e043      	b.n	800c950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8da:	4b48      	ldr	r3, [pc, #288]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e2:	ee07 3a90 	vmov	s15, r3
 800c8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c90a:	e021      	b.n	800c950 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c916:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c91e:	4b37      	ldr	r3, [pc, #220]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c926:	ee07 3a90 	vmov	s15, r3
 800c92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c92e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c932:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c94a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c94e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c950:	4b2a      	ldr	r3, [pc, #168]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c954:	0a5b      	lsrs	r3, r3, #9
 800c956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95a:	ee07 3a90 	vmov	s15, r3
 800c95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c96a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c96e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c976:	ee17 2a90 	vmov	r2, s15
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c97e:	4b1f      	ldr	r3, [pc, #124]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c982:	0c1b      	lsrs	r3, r3, #16
 800c984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c988:	ee07 3a90 	vmov	s15, r3
 800c98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c994:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c998:	edd7 6a07 	vldr	s13, [r7, #28]
 800c99c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9a4:	ee17 2a90 	vmov	r2, s15
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c9ac:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b0:	0e1b      	lsrs	r3, r3, #24
 800c9b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9d2:	ee17 2a90 	vmov	r2, s15
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c9da:	e008      	b.n	800c9ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	609a      	str	r2, [r3, #8]
}
 800c9ee:	bf00      	nop
 800c9f0:	3724      	adds	r7, #36	; 0x24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	58024400 	.word	0x58024400
 800ca00:	03d09000 	.word	0x03d09000
 800ca04:	46000000 	.word	0x46000000
 800ca08:	4c742400 	.word	0x4c742400
 800ca0c:	4a742400 	.word	0x4a742400
 800ca10:	4bb71b00 	.word	0x4bb71b00

0800ca14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca22:	4b53      	ldr	r3, [pc, #332]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800ca24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d101      	bne.n	800ca32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e099      	b.n	800cb66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ca32:	4b4f      	ldr	r3, [pc, #316]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a4e      	ldr	r2, [pc, #312]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800ca38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca3e:	f7f7 fc57 	bl	80042f0 <HAL_GetTick>
 800ca42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca44:	e008      	b.n	800ca58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca46:	f7f7 fc53 	bl	80042f0 <HAL_GetTick>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	2b02      	cmp	r3, #2
 800ca52:	d901      	bls.n	800ca58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca54:	2303      	movs	r3, #3
 800ca56:	e086      	b.n	800cb66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca58:	4b45      	ldr	r3, [pc, #276]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1f0      	bne.n	800ca46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ca64:	4b42      	ldr	r3, [pc, #264]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800ca66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	031b      	lsls	r3, r3, #12
 800ca72:	493f      	ldr	r1, [pc, #252]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	628b      	str	r3, [r1, #40]	; 0x28
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	025b      	lsls	r3, r3, #9
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	041b      	lsls	r3, r3, #16
 800ca96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca9a:	431a      	orrs	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	061b      	lsls	r3, r3, #24
 800caa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800caa8:	4931      	ldr	r1, [pc, #196]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800caaa:	4313      	orrs	r3, r2
 800caac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800caae:	4b30      	ldr	r3, [pc, #192]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	492d      	ldr	r1, [pc, #180]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cac0:	4b2b      	ldr	r3, [pc, #172]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac4:	f023 0220 	bic.w	r2, r3, #32
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	4928      	ldr	r1, [pc, #160]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cace:	4313      	orrs	r3, r2
 800cad0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cad2:	4b27      	ldr	r3, [pc, #156]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad6:	4a26      	ldr	r2, [pc, #152]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cad8:	f023 0310 	bic.w	r3, r3, #16
 800cadc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cade:	4b24      	ldr	r3, [pc, #144]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cae2:	4b24      	ldr	r3, [pc, #144]	; (800cb74 <RCCEx_PLL2_Config+0x160>)
 800cae4:	4013      	ands	r3, r2
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	69d2      	ldr	r2, [r2, #28]
 800caea:	00d2      	lsls	r2, r2, #3
 800caec:	4920      	ldr	r1, [pc, #128]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800caee:	4313      	orrs	r3, r2
 800caf0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800caf2:	4b1f      	ldr	r3, [pc, #124]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800caf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf6:	4a1e      	ldr	r2, [pc, #120]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800caf8:	f043 0310 	orr.w	r3, r3, #16
 800cafc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cb04:	4b1a      	ldr	r3, [pc, #104]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb08:	4a19      	ldr	r2, [pc, #100]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb10:	e00f      	b.n	800cb32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d106      	bne.n	800cb26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cb18:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1c:	4a14      	ldr	r2, [pc, #80]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb24:	e005      	b.n	800cb32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cb26:	4b12      	ldr	r3, [pc, #72]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	4a11      	ldr	r2, [pc, #68]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cb32:	4b0f      	ldr	r3, [pc, #60]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a0e      	ldr	r2, [pc, #56]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb3e:	f7f7 fbd7 	bl	80042f0 <HAL_GetTick>
 800cb42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb44:	e008      	b.n	800cb58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb46:	f7f7 fbd3 	bl	80042f0 <HAL_GetTick>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d901      	bls.n	800cb58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e006      	b.n	800cb66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb58:	4b05      	ldr	r3, [pc, #20]	; (800cb70 <RCCEx_PLL2_Config+0x15c>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d0f0      	beq.n	800cb46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	58024400 	.word	0x58024400
 800cb74:	ffff0007 	.word	0xffff0007

0800cb78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb86:	4b53      	ldr	r3, [pc, #332]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8a:	f003 0303 	and.w	r3, r3, #3
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d101      	bne.n	800cb96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e099      	b.n	800ccca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb96:	4b4f      	ldr	r3, [pc, #316]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a4e      	ldr	r2, [pc, #312]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cb9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cba2:	f7f7 fba5 	bl	80042f0 <HAL_GetTick>
 800cba6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cba8:	e008      	b.n	800cbbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbaa:	f7f7 fba1 	bl	80042f0 <HAL_GetTick>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d901      	bls.n	800cbbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e086      	b.n	800ccca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cbbc:	4b45      	ldr	r3, [pc, #276]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1f0      	bne.n	800cbaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cbc8:	4b42      	ldr	r3, [pc, #264]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbcc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	051b      	lsls	r3, r3, #20
 800cbd6:	493f      	ldr	r1, [pc, #252]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	628b      	str	r3, [r1, #40]	; 0x28
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	025b      	lsls	r3, r3, #9
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	431a      	orrs	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	041b      	lsls	r3, r3, #16
 800cbfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	061b      	lsls	r3, r3, #24
 800cc08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc0c:	4931      	ldr	r1, [pc, #196]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cc12:	4b30      	ldr	r3, [pc, #192]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	492d      	ldr	r1, [pc, #180]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc20:	4313      	orrs	r3, r2
 800cc22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cc24:	4b2b      	ldr	r3, [pc, #172]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	4928      	ldr	r1, [pc, #160]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc32:	4313      	orrs	r3, r2
 800cc34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cc36:	4b27      	ldr	r3, [pc, #156]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3a:	4a26      	ldr	r2, [pc, #152]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cc42:	4b24      	ldr	r3, [pc, #144]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc46:	4b24      	ldr	r3, [pc, #144]	; (800ccd8 <RCCEx_PLL3_Config+0x160>)
 800cc48:	4013      	ands	r3, r2
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	69d2      	ldr	r2, [r2, #28]
 800cc4e:	00d2      	lsls	r2, r2, #3
 800cc50:	4920      	ldr	r1, [pc, #128]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc52:	4313      	orrs	r3, r2
 800cc54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cc56:	4b1f      	ldr	r3, [pc, #124]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5a:	4a1e      	ldr	r2, [pc, #120]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d106      	bne.n	800cc76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cc68:	4b1a      	ldr	r3, [pc, #104]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6c:	4a19      	ldr	r2, [pc, #100]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cc72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc74:	e00f      	b.n	800cc96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d106      	bne.n	800cc8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cc7c:	4b15      	ldr	r3, [pc, #84]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc80:	4a14      	ldr	r2, [pc, #80]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc88:	e005      	b.n	800cc96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cc8a:	4b12      	ldr	r3, [pc, #72]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8e:	4a11      	ldr	r2, [pc, #68]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cc96:	4b0f      	ldr	r3, [pc, #60]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a0e      	ldr	r2, [pc, #56]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800cc9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cca2:	f7f7 fb25 	bl	80042f0 <HAL_GetTick>
 800cca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cca8:	e008      	b.n	800ccbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccaa:	f7f7 fb21 	bl	80042f0 <HAL_GetTick>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d901      	bls.n	800ccbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e006      	b.n	800ccca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ccbc:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <RCCEx_PLL3_Config+0x15c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d0f0      	beq.n	800ccaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	58024400 	.word	0x58024400
 800ccd8:	ffff0007 	.word	0xffff0007

0800ccdc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d074      	beq.n	800cdd8 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d106      	bne.n	800cd08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7f6 f92e 	bl	8002f64 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2202      	movs	r2, #2
 800cd0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f003 0310 	and.w	r3, r3, #16
 800cd1a:	2b10      	cmp	r3, #16
 800cd1c:	d053      	beq.n	800cdc6 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	22ca      	movs	r2, #202	; 0xca
 800cd24:	625a      	str	r2, [r3, #36]	; 0x24
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2253      	movs	r2, #83	; 0x53
 800cd2c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f87e 	bl	800ce30 <RTC_EnterInitMode>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d124      	bne.n	800cd88 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6999      	ldr	r1, [r3, #24]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	4b26      	ldr	r3, [pc, #152]	; (800cde4 <HAL_RTC_Init+0x108>)
 800cd4a:	400b      	ands	r3, r1
 800cd4c:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6999      	ldr	r1, [r3, #24]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	431a      	orrs	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	699b      	ldr	r3, [r3, #24]
 800cd62:	431a      	orrs	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	430a      	orrs	r2, r1
 800cd6a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	0419      	lsls	r1, r3, #16
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68da      	ldr	r2, [r3, #12]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	430a      	orrs	r2, r1
 800cd7c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f88c 	bl	800ce9c <RTC_ExitInitMode>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d116      	bne.n	800cdbc <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	699a      	ldr	r2, [r3, #24]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800cd9c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6999      	ldr	r1, [r3, #24]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a1a      	ldr	r2, [r3, #32]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	431a      	orrs	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	431a      	orrs	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	430a      	orrs	r2, r1
 800cdba:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	22ff      	movs	r2, #255	; 0xff
 800cdc2:	625a      	str	r2, [r3, #36]	; 0x24
 800cdc4:	e001      	b.n	800cdca <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d103      	bne.n	800cdd8 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	fb8fffbf 	.word	0xfb8fffbf

0800cde8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a0d      	ldr	r2, [pc, #52]	; (800ce2c <HAL_RTC_WaitForSynchro+0x44>)
 800cdf6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800cdf8:	f7f7 fa7a 	bl	80042f0 <HAL_GetTick>
 800cdfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800cdfe:	e009      	b.n	800ce14 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce00:	f7f7 fa76 	bl	80042f0 <HAL_GetTick>
 800ce04:	4602      	mov	r2, r0
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce0e:	d901      	bls.n	800ce14 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e007      	b.n	800ce24 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	f003 0320 	and.w	r3, r3, #32
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0ee      	beq.n	800ce00 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	0001005f 	.word	0x0001005f

0800ce30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d123      	bne.n	800ce92 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68da      	ldr	r2, [r3, #12]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce58:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ce5a:	f7f7 fa49 	bl	80042f0 <HAL_GetTick>
 800ce5e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ce60:	e00d      	b.n	800ce7e <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ce62:	f7f7 fa45 	bl	80042f0 <HAL_GetTick>
 800ce66:	4602      	mov	r2, r0
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce70:	d905      	bls.n	800ce7e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800ce72:	2303      	movs	r3, #3
 800ce74:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2203      	movs	r2, #3
 800ce7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <RTC_EnterInitMode+0x62>
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
 800ce8e:	2b03      	cmp	r3, #3
 800ce90:	d1e7      	bne.n	800ce62 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cea8:	4b1a      	ldr	r3, [pc, #104]	; (800cf14 <RTC_ExitInitMode+0x78>)
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	4a19      	ldr	r2, [pc, #100]	; (800cf14 <RTC_ExitInitMode+0x78>)
 800ceae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceb2:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ceb4:	4b17      	ldr	r3, [pc, #92]	; (800cf14 <RTC_ExitInitMode+0x78>)
 800ceb6:	699b      	ldr	r3, [r3, #24]
 800ceb8:	f003 0320 	and.w	r3, r3, #32
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10c      	bne.n	800ceda <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff ff91 	bl	800cde8 <HAL_RTC_WaitForSynchro>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d01e      	beq.n	800cf0a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2203      	movs	r2, #3
 800ced0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800ced4:	2303      	movs	r3, #3
 800ced6:	73fb      	strb	r3, [r7, #15]
 800ced8:	e017      	b.n	800cf0a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ceda:	4b0e      	ldr	r3, [pc, #56]	; (800cf14 <RTC_ExitInitMode+0x78>)
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	4a0d      	ldr	r2, [pc, #52]	; (800cf14 <RTC_ExitInitMode+0x78>)
 800cee0:	f023 0320 	bic.w	r3, r3, #32
 800cee4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff ff7e 	bl	800cde8 <HAL_RTC_WaitForSynchro>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2203      	movs	r2, #3
 800cef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cefe:	4b05      	ldr	r3, [pc, #20]	; (800cf14 <RTC_ExitInitMode+0x78>)
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	4a04      	ldr	r2, [pc, #16]	; (800cf14 <RTC_ExitInitMode+0x78>)
 800cf04:	f043 0320 	orr.w	r3, r3, #32
 800cf08:	6193      	str	r3, [r2, #24]
  }

  return status;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	58004000 	.word	0x58004000

0800cf18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	e042      	b.n	800cfb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d106      	bne.n	800cf42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7f7 f8b5 	bl	80040ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2224      	movs	r2, #36	; 0x24
 800cf46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f022 0201 	bic.w	r2, r2, #1
 800cf58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fd5c 	bl	800da18 <UART_SetConfig>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d101      	bne.n	800cf6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e022      	b.n	800cfb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f001 fbbc 	bl	800e6f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	685a      	ldr	r2, [r3, #4]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689a      	ldr	r2, [r3, #8]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f042 0201 	orr.w	r2, r2, #1
 800cfa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f001 fc43 	bl	800e834 <UART_CheckIdleState>
 800cfae:	4603      	mov	r3, r0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08a      	sub	sp, #40	; 0x28
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	603b      	str	r3, [r7, #0]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfce:	2b20      	cmp	r3, #32
 800cfd0:	d17b      	bne.n	800d0ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <HAL_UART_Transmit+0x26>
 800cfd8:	88fb      	ldrh	r3, [r7, #6]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e074      	b.n	800d0cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2221      	movs	r2, #33	; 0x21
 800cfee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cff2:	f7f7 f97d 	bl	80042f0 <HAL_GetTick>
 800cff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	88fa      	ldrh	r2, [r7, #6]
 800cffc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	88fa      	ldrh	r2, [r7, #6]
 800d004:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d010:	d108      	bne.n	800d024 <HAL_UART_Transmit+0x6c>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d104      	bne.n	800d024 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d01a:	2300      	movs	r3, #0
 800d01c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	61bb      	str	r3, [r7, #24]
 800d022:	e003      	b.n	800d02c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d028:	2300      	movs	r3, #0
 800d02a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d02c:	e030      	b.n	800d090 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2200      	movs	r2, #0
 800d036:	2180      	movs	r1, #128	; 0x80
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f001 fca5 	bl	800e988 <UART_WaitOnFlagUntilTimeout>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d005      	beq.n	800d050 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2220      	movs	r2, #32
 800d048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e03d      	b.n	800d0cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10b      	bne.n	800d06e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	3302      	adds	r3, #2
 800d06a:	61bb      	str	r3, [r7, #24]
 800d06c:	e007      	b.n	800d07e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	781a      	ldrb	r2, [r3, #0]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	3301      	adds	r3, #1
 800d07c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d084:	b29b      	uxth	r3, r3
 800d086:	3b01      	subs	r3, #1
 800d088:	b29a      	uxth	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d096:	b29b      	uxth	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1c8      	bne.n	800d02e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	2140      	movs	r1, #64	; 0x40
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f001 fc6e 	bl	800e988 <UART_WaitOnFlagUntilTimeout>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d005      	beq.n	800d0be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2220      	movs	r2, #32
 800d0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e006      	b.n	800d0cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2220      	movs	r2, #32
 800d0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e000      	b.n	800d0cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d0ca:	2302      	movs	r3, #2
  }
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3720      	adds	r7, #32
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08a      	sub	sp, #40	; 0x28
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	603b      	str	r3, [r7, #0]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0ea:	2b20      	cmp	r3, #32
 800d0ec:	f040 80b5 	bne.w	800d25a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <HAL_UART_Receive+0x28>
 800d0f6:	88fb      	ldrh	r3, [r7, #6]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e0ad      	b.n	800d25c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2222      	movs	r2, #34	; 0x22
 800d10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d116:	f7f7 f8eb 	bl	80042f0 <HAL_GetTick>
 800d11a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	88fa      	ldrh	r2, [r7, #6]
 800d120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	88fa      	ldrh	r2, [r7, #6]
 800d128:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d134:	d10e      	bne.n	800d154 <HAL_UART_Receive+0x80>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d105      	bne.n	800d14a <HAL_UART_Receive+0x76>
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d148:	e02d      	b.n	800d1a6 <HAL_UART_Receive+0xd2>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	22ff      	movs	r2, #255	; 0xff
 800d14e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d152:	e028      	b.n	800d1a6 <HAL_UART_Receive+0xd2>
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10d      	bne.n	800d178 <HAL_UART_Receive+0xa4>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d104      	bne.n	800d16e <HAL_UART_Receive+0x9a>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	22ff      	movs	r2, #255	; 0xff
 800d168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d16c:	e01b      	b.n	800d1a6 <HAL_UART_Receive+0xd2>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	227f      	movs	r2, #127	; 0x7f
 800d172:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d176:	e016      	b.n	800d1a6 <HAL_UART_Receive+0xd2>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d180:	d10d      	bne.n	800d19e <HAL_UART_Receive+0xca>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d104      	bne.n	800d194 <HAL_UART_Receive+0xc0>
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	227f      	movs	r2, #127	; 0x7f
 800d18e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d192:	e008      	b.n	800d1a6 <HAL_UART_Receive+0xd2>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	223f      	movs	r2, #63	; 0x3f
 800d198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d19c:	e003      	b.n	800d1a6 <HAL_UART_Receive+0xd2>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1ac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1b6:	d108      	bne.n	800d1ca <HAL_UART_Receive+0xf6>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d104      	bne.n	800d1ca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	61bb      	str	r3, [r7, #24]
 800d1c8:	e003      	b.n	800d1d2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d1d2:	e036      	b.n	800d242 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	2120      	movs	r1, #32
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f001 fbd2 	bl	800e988 <UART_WaitOnFlagUntilTimeout>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d005      	beq.n	800d1f6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2220      	movs	r2, #32
 800d1ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e032      	b.n	800d25c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10c      	bne.n	800d216 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d202:	b29a      	uxth	r2, r3
 800d204:	8a7b      	ldrh	r3, [r7, #18]
 800d206:	4013      	ands	r3, r2
 800d208:	b29a      	uxth	r2, r3
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	3302      	adds	r3, #2
 800d212:	61bb      	str	r3, [r7, #24]
 800d214:	e00c      	b.n	800d230 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	8a7b      	ldrh	r3, [r7, #18]
 800d220:	b2db      	uxtb	r3, r3
 800d222:	4013      	ands	r3, r2
 800d224:	b2da      	uxtb	r2, r3
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	3301      	adds	r3, #1
 800d22e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d236:	b29b      	uxth	r3, r3
 800d238:	3b01      	subs	r3, #1
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d248:	b29b      	uxth	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1c2      	bne.n	800d1d4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2220      	movs	r2, #32
 800d252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	e000      	b.n	800d25c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d25a:	2302      	movs	r3, #2
  }
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3720      	adds	r7, #32
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b0ba      	sub	sp, #232	; 0xe8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d28a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d28e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d292:	4013      	ands	r3, r2
 800d294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d11b      	bne.n	800d2d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2a4:	f003 0320 	and.w	r3, r3, #32
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d015      	beq.n	800d2d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2b0:	f003 0320 	and.w	r3, r3, #32
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d105      	bne.n	800d2c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d2b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d009      	beq.n	800d2d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f000 8377 	beq.w	800d9bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
      }
      return;
 800d2d6:	e371      	b.n	800d9bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d2d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 8123 	beq.w	800d528 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d2e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d2e6:	4b8d      	ldr	r3, [pc, #564]	; (800d51c <HAL_UART_IRQHandler+0x2b8>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d106      	bne.n	800d2fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d2ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d2f2:	4b8b      	ldr	r3, [pc, #556]	; (800d520 <HAL_UART_IRQHandler+0x2bc>)
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 8116 	beq.w	800d528 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	2b00      	cmp	r3, #0
 800d306:	d011      	beq.n	800d32c <HAL_UART_IRQHandler+0xc8>
 800d308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2201      	movs	r2, #1
 800d31a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d322:	f043 0201 	orr.w	r2, r3, #1
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d330:	f003 0302 	and.w	r3, r3, #2
 800d334:	2b00      	cmp	r3, #0
 800d336:	d011      	beq.n	800d35c <HAL_UART_IRQHandler+0xf8>
 800d338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00b      	beq.n	800d35c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2202      	movs	r2, #2
 800d34a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d352:	f043 0204 	orr.w	r2, r3, #4
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d011      	beq.n	800d38c <HAL_UART_IRQHandler+0x128>
 800d368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d36c:	f003 0301 	and.w	r3, r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00b      	beq.n	800d38c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2204      	movs	r2, #4
 800d37a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d382:	f043 0202 	orr.w	r2, r3, #2
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d390:	f003 0308 	and.w	r3, r3, #8
 800d394:	2b00      	cmp	r3, #0
 800d396:	d017      	beq.n	800d3c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d39c:	f003 0320 	and.w	r3, r3, #32
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d105      	bne.n	800d3b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d3a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d3a8:	4b5c      	ldr	r3, [pc, #368]	; (800d51c <HAL_UART_IRQHandler+0x2b8>)
 800d3aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2208      	movs	r2, #8
 800d3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3be:	f043 0208 	orr.w	r2, r3, #8
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d012      	beq.n	800d3fa <HAL_UART_IRQHandler+0x196>
 800d3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00c      	beq.n	800d3fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3f0:	f043 0220 	orr.w	r2, r3, #32
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d400:	2b00      	cmp	r3, #0
 800d402:	f000 82dd 	beq.w	800d9c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d40a:	f003 0320 	and.w	r3, r3, #32
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d013      	beq.n	800d43a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d416:	f003 0320 	and.w	r3, r3, #32
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d105      	bne.n	800d42a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d41e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d426:	2b00      	cmp	r3, #0
 800d428:	d007      	beq.n	800d43a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44e:	2b40      	cmp	r3, #64	; 0x40
 800d450:	d005      	beq.n	800d45e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d456:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d054      	beq.n	800d508 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f001 fafa 	bl	800ea58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d46e:	2b40      	cmp	r3, #64	; 0x40
 800d470:	d146      	bne.n	800d500 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d480:	e853 3f00 	ldrex	r3, [r3]
 800d484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d48c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3308      	adds	r3, #8
 800d49a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d49e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d4a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d4aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d4ae:	e841 2300 	strex	r3, r2, [r1]
 800d4b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d4b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1d9      	bne.n	800d472 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d017      	beq.n	800d4f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ce:	4a15      	ldr	r2, [pc, #84]	; (800d524 <HAL_UART_IRQHandler+0x2c0>)
 800d4d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7f8 fc2f 	bl	8005d3c <HAL_DMA_Abort_IT>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d019      	beq.n	800d518 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4f6:	e00f      	b.n	800d518 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fa77 	bl	800d9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4fe:	e00b      	b.n	800d518 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fa73 	bl	800d9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d506:	e007      	b.n	800d518 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fa6f 	bl	800d9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d516:	e253      	b.n	800d9c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d518:	bf00      	nop
    return;
 800d51a:	e251      	b.n	800d9c0 <HAL_UART_IRQHandler+0x75c>
 800d51c:	10000001 	.word	0x10000001
 800d520:	04000120 	.word	0x04000120
 800d524:	0800eb25 	.word	0x0800eb25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	f040 81e7 	bne.w	800d900 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d536:	f003 0310 	and.w	r3, r3, #16
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f000 81e0 	beq.w	800d900 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d544:	f003 0310 	and.w	r3, r3, #16
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 81d9 	beq.w	800d900 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2210      	movs	r2, #16
 800d554:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d560:	2b40      	cmp	r3, #64	; 0x40
 800d562:	f040 8151 	bne.w	800d808 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a96      	ldr	r2, [pc, #600]	; (800d7c8 <HAL_UART_IRQHandler+0x564>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d068      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a93      	ldr	r2, [pc, #588]	; (800d7cc <HAL_UART_IRQHandler+0x568>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d061      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a91      	ldr	r2, [pc, #580]	; (800d7d0 <HAL_UART_IRQHandler+0x56c>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d05a      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a8e      	ldr	r2, [pc, #568]	; (800d7d4 <HAL_UART_IRQHandler+0x570>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d053      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a8c      	ldr	r2, [pc, #560]	; (800d7d8 <HAL_UART_IRQHandler+0x574>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d04c      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a89      	ldr	r2, [pc, #548]	; (800d7dc <HAL_UART_IRQHandler+0x578>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d045      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a87      	ldr	r2, [pc, #540]	; (800d7e0 <HAL_UART_IRQHandler+0x57c>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d03e      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a84      	ldr	r2, [pc, #528]	; (800d7e4 <HAL_UART_IRQHandler+0x580>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d037      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a82      	ldr	r2, [pc, #520]	; (800d7e8 <HAL_UART_IRQHandler+0x584>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d030      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a7f      	ldr	r2, [pc, #508]	; (800d7ec <HAL_UART_IRQHandler+0x588>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d029      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a7d      	ldr	r2, [pc, #500]	; (800d7f0 <HAL_UART_IRQHandler+0x58c>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d022      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a7a      	ldr	r2, [pc, #488]	; (800d7f4 <HAL_UART_IRQHandler+0x590>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d01b      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a78      	ldr	r2, [pc, #480]	; (800d7f8 <HAL_UART_IRQHandler+0x594>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d014      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a75      	ldr	r2, [pc, #468]	; (800d7fc <HAL_UART_IRQHandler+0x598>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d00d      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a73      	ldr	r2, [pc, #460]	; (800d800 <HAL_UART_IRQHandler+0x59c>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d006      	beq.n	800d646 <HAL_UART_IRQHandler+0x3e2>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a70      	ldr	r2, [pc, #448]	; (800d804 <HAL_UART_IRQHandler+0x5a0>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d106      	bne.n	800d654 <HAL_UART_IRQHandler+0x3f0>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	b29b      	uxth	r3, r3
 800d652:	e005      	b.n	800d660 <HAL_UART_IRQHandler+0x3fc>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f000 81ab 	beq.w	800d9c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d674:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d678:	429a      	cmp	r2, r3
 800d67a:	f080 81a3 	bcs.w	800d9c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d684:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d68e:	69db      	ldr	r3, [r3, #28]
 800d690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d694:	f000 8087 	beq.w	800d7a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6a4:	e853 3f00 	ldrex	r3, [r3]
 800d6a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d6ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d6c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d6c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d6ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d6d2:	e841 2300 	strex	r3, r2, [r1]
 800d6d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d6da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1da      	bne.n	800d698 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d6f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6f4:	f023 0301 	bic.w	r3, r3, #1
 800d6f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3308      	adds	r3, #8
 800d702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d706:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d70a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d70e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1e1      	bne.n	800d6e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	3308      	adds	r3, #8
 800d724:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d728:	e853 3f00 	ldrex	r3, [r3]
 800d72c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d72e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3308      	adds	r3, #8
 800d73e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d742:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d744:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d748:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d74a:	e841 2300 	strex	r3, r2, [r1]
 800d74e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e3      	bne.n	800d71e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2220      	movs	r2, #32
 800d75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d76c:	e853 3f00 	ldrex	r3, [r3]
 800d770:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d774:	f023 0310 	bic.w	r3, r3, #16
 800d778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d786:	65bb      	str	r3, [r7, #88]	; 0x58
 800d788:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d78c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d78e:	e841 2300 	strex	r3, r2, [r1]
 800d792:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1e4      	bne.n	800d764 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7f7 ffad 	bl	8005700 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2202      	movs	r2, #2
 800d7aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f91d 	bl	800da00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7c6:	e0fd      	b.n	800d9c4 <HAL_UART_IRQHandler+0x760>
 800d7c8:	40020010 	.word	0x40020010
 800d7cc:	40020028 	.word	0x40020028
 800d7d0:	40020040 	.word	0x40020040
 800d7d4:	40020058 	.word	0x40020058
 800d7d8:	40020070 	.word	0x40020070
 800d7dc:	40020088 	.word	0x40020088
 800d7e0:	400200a0 	.word	0x400200a0
 800d7e4:	400200b8 	.word	0x400200b8
 800d7e8:	40020410 	.word	0x40020410
 800d7ec:	40020428 	.word	0x40020428
 800d7f0:	40020440 	.word	0x40020440
 800d7f4:	40020458 	.word	0x40020458
 800d7f8:	40020470 	.word	0x40020470
 800d7fc:	40020488 	.word	0x40020488
 800d800:	400204a0 	.word	0x400204a0
 800d804:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d814:	b29b      	uxth	r3, r3
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d822:	b29b      	uxth	r3, r3
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80cf 	beq.w	800d9c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d82a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 80ca 	beq.w	800d9c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	e853 3f00 	ldrex	r3, [r3]
 800d840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	461a      	mov	r2, r3
 800d852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d856:	647b      	str	r3, [r7, #68]	; 0x44
 800d858:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d85c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d85e:	e841 2300 	strex	r3, r2, [r1]
 800d862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e4      	bne.n	800d834 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3308      	adds	r3, #8
 800d870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	e853 3f00 	ldrex	r3, [r3]
 800d878:	623b      	str	r3, [r7, #32]
   return(result);
 800d87a:	6a3a      	ldr	r2, [r7, #32]
 800d87c:	4b55      	ldr	r3, [pc, #340]	; (800d9d4 <HAL_UART_IRQHandler+0x770>)
 800d87e:	4013      	ands	r3, r2
 800d880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3308      	adds	r3, #8
 800d88a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d88e:	633a      	str	r2, [r7, #48]	; 0x30
 800d890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d896:	e841 2300 	strex	r3, r2, [r1]
 800d89a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e3      	bne.n	800d86a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	e853 3f00 	ldrex	r3, [r3]
 800d8c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f023 0310 	bic.w	r3, r3, #16
 800d8ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d8d8:	61fb      	str	r3, [r7, #28]
 800d8da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8dc:	69b9      	ldr	r1, [r7, #24]
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	e841 2300 	strex	r3, r2, [r1]
 800d8e4:	617b      	str	r3, [r7, #20]
   return(result);
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1e4      	bne.n	800d8b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d8f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f881 	bl	800da00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8fe:	e063      	b.n	800d9c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00e      	beq.n	800d92a <HAL_UART_IRQHandler+0x6c6>
 800d90c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d008      	beq.n	800d92a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f001 f93f 	bl	800eba6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d928:	e051      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d92a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d932:	2b00      	cmp	r3, #0
 800d934:	d014      	beq.n	800d960 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d105      	bne.n	800d94e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d008      	beq.n	800d960 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d952:	2b00      	cmp	r3, #0
 800d954:	d03a      	beq.n	800d9cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	4798      	blx	r3
    }
    return;
 800d95e:	e035      	b.n	800d9cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d009      	beq.n	800d980 <HAL_UART_IRQHandler+0x71c>
 800d96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d974:	2b00      	cmp	r3, #0
 800d976:	d003      	beq.n	800d980 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f001 f8e9 	bl	800eb50 <UART_EndTransmit_IT>
    return;
 800d97e:	e026      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d009      	beq.n	800d9a0 <HAL_UART_IRQHandler+0x73c>
 800d98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d990:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 f918 	bl	800ebce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d99e:	e016      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d010      	beq.n	800d9ce <HAL_UART_IRQHandler+0x76a>
 800d9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	da0c      	bge.n	800d9ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f001 f900 	bl	800ebba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9ba:	e008      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
      return;
 800d9bc:	bf00      	nop
 800d9be:	e006      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
    return;
 800d9c0:	bf00      	nop
 800d9c2:	e004      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
      return;
 800d9c4:	bf00      	nop
 800d9c6:	e002      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
      return;
 800d9c8:	bf00      	nop
 800d9ca:	e000      	b.n	800d9ce <HAL_UART_IRQHandler+0x76a>
    return;
 800d9cc:	bf00      	nop
  }
}
 800d9ce:	37e8      	adds	r7, #232	; 0xe8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	effffffe 	.word	0xeffffffe

0800d9d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da1c:	b092      	sub	sp, #72	; 0x48
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	689a      	ldr	r2, [r3, #8]
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	431a      	orrs	r2, r3
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	695b      	ldr	r3, [r3, #20]
 800da36:	431a      	orrs	r2, r3
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	69db      	ldr	r3, [r3, #28]
 800da3c:	4313      	orrs	r3, r2
 800da3e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	4bbe      	ldr	r3, [pc, #760]	; (800dd40 <UART_SetConfig+0x328>)
 800da48:	4013      	ands	r3, r2
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	6812      	ldr	r2, [r2, #0]
 800da4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da50:	430b      	orrs	r3, r1
 800da52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	430a      	orrs	r2, r1
 800da68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4ab3      	ldr	r2, [pc, #716]	; (800dd44 <UART_SetConfig+0x32c>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d004      	beq.n	800da84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	6a1b      	ldr	r3, [r3, #32]
 800da7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da80:	4313      	orrs	r3, r2
 800da82:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689a      	ldr	r2, [r3, #8]
 800da8a:	4baf      	ldr	r3, [pc, #700]	; (800dd48 <UART_SetConfig+0x330>)
 800da8c:	4013      	ands	r3, r2
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	6812      	ldr	r2, [r2, #0]
 800da92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da94:	430b      	orrs	r3, r1
 800da96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9e:	f023 010f 	bic.w	r1, r3, #15
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	430a      	orrs	r2, r1
 800daac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4aa6      	ldr	r2, [pc, #664]	; (800dd4c <UART_SetConfig+0x334>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d177      	bne.n	800dba8 <UART_SetConfig+0x190>
 800dab8:	4ba5      	ldr	r3, [pc, #660]	; (800dd50 <UART_SetConfig+0x338>)
 800daba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dabc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dac0:	2b28      	cmp	r3, #40	; 0x28
 800dac2:	d86d      	bhi.n	800dba0 <UART_SetConfig+0x188>
 800dac4:	a201      	add	r2, pc, #4	; (adr r2, 800dacc <UART_SetConfig+0xb4>)
 800dac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daca:	bf00      	nop
 800dacc:	0800db71 	.word	0x0800db71
 800dad0:	0800dba1 	.word	0x0800dba1
 800dad4:	0800dba1 	.word	0x0800dba1
 800dad8:	0800dba1 	.word	0x0800dba1
 800dadc:	0800dba1 	.word	0x0800dba1
 800dae0:	0800dba1 	.word	0x0800dba1
 800dae4:	0800dba1 	.word	0x0800dba1
 800dae8:	0800dba1 	.word	0x0800dba1
 800daec:	0800db79 	.word	0x0800db79
 800daf0:	0800dba1 	.word	0x0800dba1
 800daf4:	0800dba1 	.word	0x0800dba1
 800daf8:	0800dba1 	.word	0x0800dba1
 800dafc:	0800dba1 	.word	0x0800dba1
 800db00:	0800dba1 	.word	0x0800dba1
 800db04:	0800dba1 	.word	0x0800dba1
 800db08:	0800dba1 	.word	0x0800dba1
 800db0c:	0800db81 	.word	0x0800db81
 800db10:	0800dba1 	.word	0x0800dba1
 800db14:	0800dba1 	.word	0x0800dba1
 800db18:	0800dba1 	.word	0x0800dba1
 800db1c:	0800dba1 	.word	0x0800dba1
 800db20:	0800dba1 	.word	0x0800dba1
 800db24:	0800dba1 	.word	0x0800dba1
 800db28:	0800dba1 	.word	0x0800dba1
 800db2c:	0800db89 	.word	0x0800db89
 800db30:	0800dba1 	.word	0x0800dba1
 800db34:	0800dba1 	.word	0x0800dba1
 800db38:	0800dba1 	.word	0x0800dba1
 800db3c:	0800dba1 	.word	0x0800dba1
 800db40:	0800dba1 	.word	0x0800dba1
 800db44:	0800dba1 	.word	0x0800dba1
 800db48:	0800dba1 	.word	0x0800dba1
 800db4c:	0800db91 	.word	0x0800db91
 800db50:	0800dba1 	.word	0x0800dba1
 800db54:	0800dba1 	.word	0x0800dba1
 800db58:	0800dba1 	.word	0x0800dba1
 800db5c:	0800dba1 	.word	0x0800dba1
 800db60:	0800dba1 	.word	0x0800dba1
 800db64:	0800dba1 	.word	0x0800dba1
 800db68:	0800dba1 	.word	0x0800dba1
 800db6c:	0800db99 	.word	0x0800db99
 800db70:	2301      	movs	r3, #1
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db76:	e326      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800db78:	2304      	movs	r3, #4
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7e:	e322      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800db80:	2308      	movs	r3, #8
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db86:	e31e      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800db88:	2310      	movs	r3, #16
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8e:	e31a      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800db90:	2320      	movs	r3, #32
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db96:	e316      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9e:	e312      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dba0:	2380      	movs	r3, #128	; 0x80
 800dba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba6:	e30e      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a69      	ldr	r2, [pc, #420]	; (800dd54 <UART_SetConfig+0x33c>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d130      	bne.n	800dc14 <UART_SetConfig+0x1fc>
 800dbb2:	4b67      	ldr	r3, [pc, #412]	; (800dd50 <UART_SetConfig+0x338>)
 800dbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb6:	f003 0307 	and.w	r3, r3, #7
 800dbba:	2b05      	cmp	r3, #5
 800dbbc:	d826      	bhi.n	800dc0c <UART_SetConfig+0x1f4>
 800dbbe:	a201      	add	r2, pc, #4	; (adr r2, 800dbc4 <UART_SetConfig+0x1ac>)
 800dbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc4:	0800dbdd 	.word	0x0800dbdd
 800dbc8:	0800dbe5 	.word	0x0800dbe5
 800dbcc:	0800dbed 	.word	0x0800dbed
 800dbd0:	0800dbf5 	.word	0x0800dbf5
 800dbd4:	0800dbfd 	.word	0x0800dbfd
 800dbd8:	0800dc05 	.word	0x0800dc05
 800dbdc:	2300      	movs	r3, #0
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe2:	e2f0      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dbe4:	2304      	movs	r3, #4
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbea:	e2ec      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dbec:	2308      	movs	r3, #8
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e2e8      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dbf4:	2310      	movs	r3, #16
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfa:	e2e4      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dbfc:	2320      	movs	r3, #32
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc02:	e2e0      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc04:	2340      	movs	r3, #64	; 0x40
 800dc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0a:	e2dc      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc0c:	2380      	movs	r3, #128	; 0x80
 800dc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc12:	e2d8      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4a4f      	ldr	r2, [pc, #316]	; (800dd58 <UART_SetConfig+0x340>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d130      	bne.n	800dc80 <UART_SetConfig+0x268>
 800dc1e:	4b4c      	ldr	r3, [pc, #304]	; (800dd50 <UART_SetConfig+0x338>)
 800dc20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc22:	f003 0307 	and.w	r3, r3, #7
 800dc26:	2b05      	cmp	r3, #5
 800dc28:	d826      	bhi.n	800dc78 <UART_SetConfig+0x260>
 800dc2a:	a201      	add	r2, pc, #4	; (adr r2, 800dc30 <UART_SetConfig+0x218>)
 800dc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc30:	0800dc49 	.word	0x0800dc49
 800dc34:	0800dc51 	.word	0x0800dc51
 800dc38:	0800dc59 	.word	0x0800dc59
 800dc3c:	0800dc61 	.word	0x0800dc61
 800dc40:	0800dc69 	.word	0x0800dc69
 800dc44:	0800dc71 	.word	0x0800dc71
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e2ba      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc50:	2304      	movs	r3, #4
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e2b6      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc58:	2308      	movs	r3, #8
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e2b2      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc60:	2310      	movs	r3, #16
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc66:	e2ae      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc68:	2320      	movs	r3, #32
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e2aa      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc70:	2340      	movs	r3, #64	; 0x40
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e2a6      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc78:	2380      	movs	r3, #128	; 0x80
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7e:	e2a2      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a35      	ldr	r2, [pc, #212]	; (800dd5c <UART_SetConfig+0x344>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d130      	bne.n	800dcec <UART_SetConfig+0x2d4>
 800dc8a:	4b31      	ldr	r3, [pc, #196]	; (800dd50 <UART_SetConfig+0x338>)
 800dc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc8e:	f003 0307 	and.w	r3, r3, #7
 800dc92:	2b05      	cmp	r3, #5
 800dc94:	d826      	bhi.n	800dce4 <UART_SetConfig+0x2cc>
 800dc96:	a201      	add	r2, pc, #4	; (adr r2, 800dc9c <UART_SetConfig+0x284>)
 800dc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc9c:	0800dcb5 	.word	0x0800dcb5
 800dca0:	0800dcbd 	.word	0x0800dcbd
 800dca4:	0800dcc5 	.word	0x0800dcc5
 800dca8:	0800dccd 	.word	0x0800dccd
 800dcac:	0800dcd5 	.word	0x0800dcd5
 800dcb0:	0800dcdd 	.word	0x0800dcdd
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcba:	e284      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dcbc:	2304      	movs	r3, #4
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc2:	e280      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dcc4:	2308      	movs	r3, #8
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcca:	e27c      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dccc:	2310      	movs	r3, #16
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd2:	e278      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dcd4:	2320      	movs	r3, #32
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcda:	e274      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dcdc:	2340      	movs	r3, #64	; 0x40
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e270      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dce4:	2380      	movs	r3, #128	; 0x80
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e26c      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a1b      	ldr	r2, [pc, #108]	; (800dd60 <UART_SetConfig+0x348>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d142      	bne.n	800dd7c <UART_SetConfig+0x364>
 800dcf6:	4b16      	ldr	r3, [pc, #88]	; (800dd50 <UART_SetConfig+0x338>)
 800dcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfa:	f003 0307 	and.w	r3, r3, #7
 800dcfe:	2b05      	cmp	r3, #5
 800dd00:	d838      	bhi.n	800dd74 <UART_SetConfig+0x35c>
 800dd02:	a201      	add	r2, pc, #4	; (adr r2, 800dd08 <UART_SetConfig+0x2f0>)
 800dd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd08:	0800dd21 	.word	0x0800dd21
 800dd0c:	0800dd29 	.word	0x0800dd29
 800dd10:	0800dd31 	.word	0x0800dd31
 800dd14:	0800dd39 	.word	0x0800dd39
 800dd18:	0800dd65 	.word	0x0800dd65
 800dd1c:	0800dd6d 	.word	0x0800dd6d
 800dd20:	2300      	movs	r3, #0
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd26:	e24e      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dd28:	2304      	movs	r3, #4
 800dd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2e:	e24a      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dd30:	2308      	movs	r3, #8
 800dd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd36:	e246      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dd38:	2310      	movs	r3, #16
 800dd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3e:	e242      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dd40:	cfff69f3 	.word	0xcfff69f3
 800dd44:	58000c00 	.word	0x58000c00
 800dd48:	11fff4ff 	.word	0x11fff4ff
 800dd4c:	40011000 	.word	0x40011000
 800dd50:	58024400 	.word	0x58024400
 800dd54:	40004400 	.word	0x40004400
 800dd58:	40004800 	.word	0x40004800
 800dd5c:	40004c00 	.word	0x40004c00
 800dd60:	40005000 	.word	0x40005000
 800dd64:	2320      	movs	r3, #32
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e22c      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dd6c:	2340      	movs	r3, #64	; 0x40
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e228      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dd74:	2380      	movs	r3, #128	; 0x80
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7a:	e224      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4ab1      	ldr	r2, [pc, #708]	; (800e048 <UART_SetConfig+0x630>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d176      	bne.n	800de74 <UART_SetConfig+0x45c>
 800dd86:	4bb1      	ldr	r3, [pc, #708]	; (800e04c <UART_SetConfig+0x634>)
 800dd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd8e:	2b28      	cmp	r3, #40	; 0x28
 800dd90:	d86c      	bhi.n	800de6c <UART_SetConfig+0x454>
 800dd92:	a201      	add	r2, pc, #4	; (adr r2, 800dd98 <UART_SetConfig+0x380>)
 800dd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd98:	0800de3d 	.word	0x0800de3d
 800dd9c:	0800de6d 	.word	0x0800de6d
 800dda0:	0800de6d 	.word	0x0800de6d
 800dda4:	0800de6d 	.word	0x0800de6d
 800dda8:	0800de6d 	.word	0x0800de6d
 800ddac:	0800de6d 	.word	0x0800de6d
 800ddb0:	0800de6d 	.word	0x0800de6d
 800ddb4:	0800de6d 	.word	0x0800de6d
 800ddb8:	0800de45 	.word	0x0800de45
 800ddbc:	0800de6d 	.word	0x0800de6d
 800ddc0:	0800de6d 	.word	0x0800de6d
 800ddc4:	0800de6d 	.word	0x0800de6d
 800ddc8:	0800de6d 	.word	0x0800de6d
 800ddcc:	0800de6d 	.word	0x0800de6d
 800ddd0:	0800de6d 	.word	0x0800de6d
 800ddd4:	0800de6d 	.word	0x0800de6d
 800ddd8:	0800de4d 	.word	0x0800de4d
 800dddc:	0800de6d 	.word	0x0800de6d
 800dde0:	0800de6d 	.word	0x0800de6d
 800dde4:	0800de6d 	.word	0x0800de6d
 800dde8:	0800de6d 	.word	0x0800de6d
 800ddec:	0800de6d 	.word	0x0800de6d
 800ddf0:	0800de6d 	.word	0x0800de6d
 800ddf4:	0800de6d 	.word	0x0800de6d
 800ddf8:	0800de55 	.word	0x0800de55
 800ddfc:	0800de6d 	.word	0x0800de6d
 800de00:	0800de6d 	.word	0x0800de6d
 800de04:	0800de6d 	.word	0x0800de6d
 800de08:	0800de6d 	.word	0x0800de6d
 800de0c:	0800de6d 	.word	0x0800de6d
 800de10:	0800de6d 	.word	0x0800de6d
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	0800de5d 	.word	0x0800de5d
 800de1c:	0800de6d 	.word	0x0800de6d
 800de20:	0800de6d 	.word	0x0800de6d
 800de24:	0800de6d 	.word	0x0800de6d
 800de28:	0800de6d 	.word	0x0800de6d
 800de2c:	0800de6d 	.word	0x0800de6d
 800de30:	0800de6d 	.word	0x0800de6d
 800de34:	0800de6d 	.word	0x0800de6d
 800de38:	0800de65 	.word	0x0800de65
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e1c0      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800de44:	2304      	movs	r3, #4
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e1bc      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800de4c:	2308      	movs	r3, #8
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e1b8      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800de54:	2310      	movs	r3, #16
 800de56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5a:	e1b4      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800de5c:	2320      	movs	r3, #32
 800de5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de62:	e1b0      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800de64:	2340      	movs	r3, #64	; 0x40
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6a:	e1ac      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800de6c:	2380      	movs	r3, #128	; 0x80
 800de6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de72:	e1a8      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a75      	ldr	r2, [pc, #468]	; (800e050 <UART_SetConfig+0x638>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d130      	bne.n	800dee0 <UART_SetConfig+0x4c8>
 800de7e:	4b73      	ldr	r3, [pc, #460]	; (800e04c <UART_SetConfig+0x634>)
 800de80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de82:	f003 0307 	and.w	r3, r3, #7
 800de86:	2b05      	cmp	r3, #5
 800de88:	d826      	bhi.n	800ded8 <UART_SetConfig+0x4c0>
 800de8a:	a201      	add	r2, pc, #4	; (adr r2, 800de90 <UART_SetConfig+0x478>)
 800de8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de90:	0800dea9 	.word	0x0800dea9
 800de94:	0800deb1 	.word	0x0800deb1
 800de98:	0800deb9 	.word	0x0800deb9
 800de9c:	0800dec1 	.word	0x0800dec1
 800dea0:	0800dec9 	.word	0x0800dec9
 800dea4:	0800ded1 	.word	0x0800ded1
 800dea8:	2300      	movs	r3, #0
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e18a      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800deb0:	2304      	movs	r3, #4
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e186      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800deb8:	2308      	movs	r3, #8
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e182      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dec0:	2310      	movs	r3, #16
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec6:	e17e      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dec8:	2320      	movs	r3, #32
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dece:	e17a      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800ded0:	2340      	movs	r3, #64	; 0x40
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e176      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800ded8:	2380      	movs	r3, #128	; 0x80
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e172      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a5b      	ldr	r2, [pc, #364]	; (800e054 <UART_SetConfig+0x63c>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d130      	bne.n	800df4c <UART_SetConfig+0x534>
 800deea:	4b58      	ldr	r3, [pc, #352]	; (800e04c <UART_SetConfig+0x634>)
 800deec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b05      	cmp	r3, #5
 800def4:	d826      	bhi.n	800df44 <UART_SetConfig+0x52c>
 800def6:	a201      	add	r2, pc, #4	; (adr r2, 800defc <UART_SetConfig+0x4e4>)
 800def8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defc:	0800df15 	.word	0x0800df15
 800df00:	0800df1d 	.word	0x0800df1d
 800df04:	0800df25 	.word	0x0800df25
 800df08:	0800df2d 	.word	0x0800df2d
 800df0c:	0800df35 	.word	0x0800df35
 800df10:	0800df3d 	.word	0x0800df3d
 800df14:	2300      	movs	r3, #0
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e154      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e150      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2a:	e14c      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800df2c:	2310      	movs	r3, #16
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df32:	e148      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800df34:	2320      	movs	r3, #32
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3a:	e144      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800df3c:	2340      	movs	r3, #64	; 0x40
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df42:	e140      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800df44:	2380      	movs	r3, #128	; 0x80
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4a:	e13c      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a41      	ldr	r2, [pc, #260]	; (800e058 <UART_SetConfig+0x640>)
 800df52:	4293      	cmp	r3, r2
 800df54:	f040 8082 	bne.w	800e05c <UART_SetConfig+0x644>
 800df58:	4b3c      	ldr	r3, [pc, #240]	; (800e04c <UART_SetConfig+0x634>)
 800df5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df60:	2b28      	cmp	r3, #40	; 0x28
 800df62:	d86d      	bhi.n	800e040 <UART_SetConfig+0x628>
 800df64:	a201      	add	r2, pc, #4	; (adr r2, 800df6c <UART_SetConfig+0x554>)
 800df66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6a:	bf00      	nop
 800df6c:	0800e011 	.word	0x0800e011
 800df70:	0800e041 	.word	0x0800e041
 800df74:	0800e041 	.word	0x0800e041
 800df78:	0800e041 	.word	0x0800e041
 800df7c:	0800e041 	.word	0x0800e041
 800df80:	0800e041 	.word	0x0800e041
 800df84:	0800e041 	.word	0x0800e041
 800df88:	0800e041 	.word	0x0800e041
 800df8c:	0800e019 	.word	0x0800e019
 800df90:	0800e041 	.word	0x0800e041
 800df94:	0800e041 	.word	0x0800e041
 800df98:	0800e041 	.word	0x0800e041
 800df9c:	0800e041 	.word	0x0800e041
 800dfa0:	0800e041 	.word	0x0800e041
 800dfa4:	0800e041 	.word	0x0800e041
 800dfa8:	0800e041 	.word	0x0800e041
 800dfac:	0800e021 	.word	0x0800e021
 800dfb0:	0800e041 	.word	0x0800e041
 800dfb4:	0800e041 	.word	0x0800e041
 800dfb8:	0800e041 	.word	0x0800e041
 800dfbc:	0800e041 	.word	0x0800e041
 800dfc0:	0800e041 	.word	0x0800e041
 800dfc4:	0800e041 	.word	0x0800e041
 800dfc8:	0800e041 	.word	0x0800e041
 800dfcc:	0800e029 	.word	0x0800e029
 800dfd0:	0800e041 	.word	0x0800e041
 800dfd4:	0800e041 	.word	0x0800e041
 800dfd8:	0800e041 	.word	0x0800e041
 800dfdc:	0800e041 	.word	0x0800e041
 800dfe0:	0800e041 	.word	0x0800e041
 800dfe4:	0800e041 	.word	0x0800e041
 800dfe8:	0800e041 	.word	0x0800e041
 800dfec:	0800e031 	.word	0x0800e031
 800dff0:	0800e041 	.word	0x0800e041
 800dff4:	0800e041 	.word	0x0800e041
 800dff8:	0800e041 	.word	0x0800e041
 800dffc:	0800e041 	.word	0x0800e041
 800e000:	0800e041 	.word	0x0800e041
 800e004:	0800e041 	.word	0x0800e041
 800e008:	0800e041 	.word	0x0800e041
 800e00c:	0800e039 	.word	0x0800e039
 800e010:	2301      	movs	r3, #1
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e0d6      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e018:	2304      	movs	r3, #4
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01e:	e0d2      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e020:	2308      	movs	r3, #8
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e026:	e0ce      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e028:	2310      	movs	r3, #16
 800e02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02e:	e0ca      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e030:	2320      	movs	r3, #32
 800e032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e036:	e0c6      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e038:	2340      	movs	r3, #64	; 0x40
 800e03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03e:	e0c2      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e040:	2380      	movs	r3, #128	; 0x80
 800e042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e046:	e0be      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e048:	40011400 	.word	0x40011400
 800e04c:	58024400 	.word	0x58024400
 800e050:	40007800 	.word	0x40007800
 800e054:	40007c00 	.word	0x40007c00
 800e058:	40011800 	.word	0x40011800
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4aad      	ldr	r2, [pc, #692]	; (800e318 <UART_SetConfig+0x900>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d176      	bne.n	800e154 <UART_SetConfig+0x73c>
 800e066:	4bad      	ldr	r3, [pc, #692]	; (800e31c <UART_SetConfig+0x904>)
 800e068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e06a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e06e:	2b28      	cmp	r3, #40	; 0x28
 800e070:	d86c      	bhi.n	800e14c <UART_SetConfig+0x734>
 800e072:	a201      	add	r2, pc, #4	; (adr r2, 800e078 <UART_SetConfig+0x660>)
 800e074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e078:	0800e11d 	.word	0x0800e11d
 800e07c:	0800e14d 	.word	0x0800e14d
 800e080:	0800e14d 	.word	0x0800e14d
 800e084:	0800e14d 	.word	0x0800e14d
 800e088:	0800e14d 	.word	0x0800e14d
 800e08c:	0800e14d 	.word	0x0800e14d
 800e090:	0800e14d 	.word	0x0800e14d
 800e094:	0800e14d 	.word	0x0800e14d
 800e098:	0800e125 	.word	0x0800e125
 800e09c:	0800e14d 	.word	0x0800e14d
 800e0a0:	0800e14d 	.word	0x0800e14d
 800e0a4:	0800e14d 	.word	0x0800e14d
 800e0a8:	0800e14d 	.word	0x0800e14d
 800e0ac:	0800e14d 	.word	0x0800e14d
 800e0b0:	0800e14d 	.word	0x0800e14d
 800e0b4:	0800e14d 	.word	0x0800e14d
 800e0b8:	0800e12d 	.word	0x0800e12d
 800e0bc:	0800e14d 	.word	0x0800e14d
 800e0c0:	0800e14d 	.word	0x0800e14d
 800e0c4:	0800e14d 	.word	0x0800e14d
 800e0c8:	0800e14d 	.word	0x0800e14d
 800e0cc:	0800e14d 	.word	0x0800e14d
 800e0d0:	0800e14d 	.word	0x0800e14d
 800e0d4:	0800e14d 	.word	0x0800e14d
 800e0d8:	0800e135 	.word	0x0800e135
 800e0dc:	0800e14d 	.word	0x0800e14d
 800e0e0:	0800e14d 	.word	0x0800e14d
 800e0e4:	0800e14d 	.word	0x0800e14d
 800e0e8:	0800e14d 	.word	0x0800e14d
 800e0ec:	0800e14d 	.word	0x0800e14d
 800e0f0:	0800e14d 	.word	0x0800e14d
 800e0f4:	0800e14d 	.word	0x0800e14d
 800e0f8:	0800e13d 	.word	0x0800e13d
 800e0fc:	0800e14d 	.word	0x0800e14d
 800e100:	0800e14d 	.word	0x0800e14d
 800e104:	0800e14d 	.word	0x0800e14d
 800e108:	0800e14d 	.word	0x0800e14d
 800e10c:	0800e14d 	.word	0x0800e14d
 800e110:	0800e14d 	.word	0x0800e14d
 800e114:	0800e14d 	.word	0x0800e14d
 800e118:	0800e145 	.word	0x0800e145
 800e11c:	2301      	movs	r3, #1
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e050      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e124:	2304      	movs	r3, #4
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e04c      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e12c:	2308      	movs	r3, #8
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e048      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e134:	2310      	movs	r3, #16
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13a:	e044      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e13c:	2320      	movs	r3, #32
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e142:	e040      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e144:	2340      	movs	r3, #64	; 0x40
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14a:	e03c      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e14c:	2380      	movs	r3, #128	; 0x80
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e038      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a71      	ldr	r2, [pc, #452]	; (800e320 <UART_SetConfig+0x908>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d130      	bne.n	800e1c0 <UART_SetConfig+0x7a8>
 800e15e:	4b6f      	ldr	r3, [pc, #444]	; (800e31c <UART_SetConfig+0x904>)
 800e160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e162:	f003 0307 	and.w	r3, r3, #7
 800e166:	2b05      	cmp	r3, #5
 800e168:	d826      	bhi.n	800e1b8 <UART_SetConfig+0x7a0>
 800e16a:	a201      	add	r2, pc, #4	; (adr r2, 800e170 <UART_SetConfig+0x758>)
 800e16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e170:	0800e189 	.word	0x0800e189
 800e174:	0800e191 	.word	0x0800e191
 800e178:	0800e199 	.word	0x0800e199
 800e17c:	0800e1a1 	.word	0x0800e1a1
 800e180:	0800e1a9 	.word	0x0800e1a9
 800e184:	0800e1b1 	.word	0x0800e1b1
 800e188:	2302      	movs	r3, #2
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e01a      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e190:	2304      	movs	r3, #4
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e016      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e198:	2308      	movs	r3, #8
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e012      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a6:	e00e      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e1a8:	2320      	movs	r3, #32
 800e1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ae:	e00a      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e1b0:	2340      	movs	r3, #64	; 0x40
 800e1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b6:	e006      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e1b8:	2380      	movs	r3, #128	; 0x80
 800e1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1be:	e002      	b.n	800e1c6 <UART_SetConfig+0x7ae>
 800e1c0:	2380      	movs	r3, #128	; 0x80
 800e1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a55      	ldr	r2, [pc, #340]	; (800e320 <UART_SetConfig+0x908>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	f040 80f8 	bne.w	800e3c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e1d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e1d6:	2b20      	cmp	r3, #32
 800e1d8:	dc46      	bgt.n	800e268 <UART_SetConfig+0x850>
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	db75      	blt.n	800e2ca <UART_SetConfig+0x8b2>
 800e1de:	3b02      	subs	r3, #2
 800e1e0:	2b1e      	cmp	r3, #30
 800e1e2:	d872      	bhi.n	800e2ca <UART_SetConfig+0x8b2>
 800e1e4:	a201      	add	r2, pc, #4	; (adr r2, 800e1ec <UART_SetConfig+0x7d4>)
 800e1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ea:	bf00      	nop
 800e1ec:	0800e26f 	.word	0x0800e26f
 800e1f0:	0800e2cb 	.word	0x0800e2cb
 800e1f4:	0800e277 	.word	0x0800e277
 800e1f8:	0800e2cb 	.word	0x0800e2cb
 800e1fc:	0800e2cb 	.word	0x0800e2cb
 800e200:	0800e2cb 	.word	0x0800e2cb
 800e204:	0800e287 	.word	0x0800e287
 800e208:	0800e2cb 	.word	0x0800e2cb
 800e20c:	0800e2cb 	.word	0x0800e2cb
 800e210:	0800e2cb 	.word	0x0800e2cb
 800e214:	0800e2cb 	.word	0x0800e2cb
 800e218:	0800e2cb 	.word	0x0800e2cb
 800e21c:	0800e2cb 	.word	0x0800e2cb
 800e220:	0800e2cb 	.word	0x0800e2cb
 800e224:	0800e297 	.word	0x0800e297
 800e228:	0800e2cb 	.word	0x0800e2cb
 800e22c:	0800e2cb 	.word	0x0800e2cb
 800e230:	0800e2cb 	.word	0x0800e2cb
 800e234:	0800e2cb 	.word	0x0800e2cb
 800e238:	0800e2cb 	.word	0x0800e2cb
 800e23c:	0800e2cb 	.word	0x0800e2cb
 800e240:	0800e2cb 	.word	0x0800e2cb
 800e244:	0800e2cb 	.word	0x0800e2cb
 800e248:	0800e2cb 	.word	0x0800e2cb
 800e24c:	0800e2cb 	.word	0x0800e2cb
 800e250:	0800e2cb 	.word	0x0800e2cb
 800e254:	0800e2cb 	.word	0x0800e2cb
 800e258:	0800e2cb 	.word	0x0800e2cb
 800e25c:	0800e2cb 	.word	0x0800e2cb
 800e260:	0800e2cb 	.word	0x0800e2cb
 800e264:	0800e2bd 	.word	0x0800e2bd
 800e268:	2b40      	cmp	r3, #64	; 0x40
 800e26a:	d02a      	beq.n	800e2c2 <UART_SetConfig+0x8aa>
 800e26c:	e02d      	b.n	800e2ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e26e:	f7fe f913 	bl	800c498 <HAL_RCCEx_GetD3PCLK1Freq>
 800e272:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e274:	e02f      	b.n	800e2d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe f922 	bl	800c4c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e284:	e027      	b.n	800e2d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e286:	f107 0318 	add.w	r3, r7, #24
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7fe fa6e 	bl	800c76c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e294:	e01f      	b.n	800e2d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e296:	4b21      	ldr	r3, [pc, #132]	; (800e31c <UART_SetConfig+0x904>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f003 0320 	and.w	r3, r3, #32
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d009      	beq.n	800e2b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2a2:	4b1e      	ldr	r3, [pc, #120]	; (800e31c <UART_SetConfig+0x904>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	08db      	lsrs	r3, r3, #3
 800e2a8:	f003 0303 	and.w	r3, r3, #3
 800e2ac:	4a1d      	ldr	r2, [pc, #116]	; (800e324 <UART_SetConfig+0x90c>)
 800e2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2b4:	e00f      	b.n	800e2d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e2b6:	4b1b      	ldr	r3, [pc, #108]	; (800e324 <UART_SetConfig+0x90c>)
 800e2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ba:	e00c      	b.n	800e2d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2bc:	4b1a      	ldr	r3, [pc, #104]	; (800e328 <UART_SetConfig+0x910>)
 800e2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2c0:	e009      	b.n	800e2d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2c8:	e005      	b.n	800e2d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e2d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f000 81ee 	beq.w	800e6ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e2:	4a12      	ldr	r2, [pc, #72]	; (800e32c <UART_SetConfig+0x914>)
 800e2e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	685a      	ldr	r2, [r3, #4]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	4413      	add	r3, r2
 800e2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d305      	bcc.n	800e30e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d910      	bls.n	800e330 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e314:	e1d1      	b.n	800e6ba <UART_SetConfig+0xca2>
 800e316:	bf00      	nop
 800e318:	40011c00 	.word	0x40011c00
 800e31c:	58024400 	.word	0x58024400
 800e320:	58000c00 	.word	0x58000c00
 800e324:	03d09000 	.word	0x03d09000
 800e328:	003d0900 	.word	0x003d0900
 800e32c:	08010540 	.word	0x08010540
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e332:	2200      	movs	r2, #0
 800e334:	60bb      	str	r3, [r7, #8]
 800e336:	60fa      	str	r2, [r7, #12]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33c:	4ac0      	ldr	r2, [pc, #768]	; (800e640 <UART_SetConfig+0xc28>)
 800e33e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e342:	b29b      	uxth	r3, r3
 800e344:	2200      	movs	r2, #0
 800e346:	603b      	str	r3, [r7, #0]
 800e348:	607a      	str	r2, [r7, #4]
 800e34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e34e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e352:	f7f2 f81d 	bl	8000390 <__aeabi_uldivmod>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	4610      	mov	r0, r2
 800e35c:	4619      	mov	r1, r3
 800e35e:	f04f 0200 	mov.w	r2, #0
 800e362:	f04f 0300 	mov.w	r3, #0
 800e366:	020b      	lsls	r3, r1, #8
 800e368:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e36c:	0202      	lsls	r2, r0, #8
 800e36e:	6979      	ldr	r1, [r7, #20]
 800e370:	6849      	ldr	r1, [r1, #4]
 800e372:	0849      	lsrs	r1, r1, #1
 800e374:	2000      	movs	r0, #0
 800e376:	460c      	mov	r4, r1
 800e378:	4605      	mov	r5, r0
 800e37a:	eb12 0804 	adds.w	r8, r2, r4
 800e37e:	eb43 0905 	adc.w	r9, r3, r5
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	469a      	mov	sl, r3
 800e38a:	4693      	mov	fp, r2
 800e38c:	4652      	mov	r2, sl
 800e38e:	465b      	mov	r3, fp
 800e390:	4640      	mov	r0, r8
 800e392:	4649      	mov	r1, r9
 800e394:	f7f1 fffc 	bl	8000390 <__aeabi_uldivmod>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	4613      	mov	r3, r2
 800e39e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3a6:	d308      	bcc.n	800e3ba <UART_SetConfig+0x9a2>
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3ae:	d204      	bcs.n	800e3ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3b6:	60da      	str	r2, [r3, #12]
 800e3b8:	e17f      	b.n	800e6ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3c0:	e17b      	b.n	800e6ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	69db      	ldr	r3, [r3, #28]
 800e3c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3ca:	f040 80bd 	bne.w	800e548 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e3ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e3d2:	2b20      	cmp	r3, #32
 800e3d4:	dc48      	bgt.n	800e468 <UART_SetConfig+0xa50>
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	db7b      	blt.n	800e4d2 <UART_SetConfig+0xaba>
 800e3da:	2b20      	cmp	r3, #32
 800e3dc:	d879      	bhi.n	800e4d2 <UART_SetConfig+0xaba>
 800e3de:	a201      	add	r2, pc, #4	; (adr r2, 800e3e4 <UART_SetConfig+0x9cc>)
 800e3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e4:	0800e46f 	.word	0x0800e46f
 800e3e8:	0800e477 	.word	0x0800e477
 800e3ec:	0800e4d3 	.word	0x0800e4d3
 800e3f0:	0800e4d3 	.word	0x0800e4d3
 800e3f4:	0800e47f 	.word	0x0800e47f
 800e3f8:	0800e4d3 	.word	0x0800e4d3
 800e3fc:	0800e4d3 	.word	0x0800e4d3
 800e400:	0800e4d3 	.word	0x0800e4d3
 800e404:	0800e48f 	.word	0x0800e48f
 800e408:	0800e4d3 	.word	0x0800e4d3
 800e40c:	0800e4d3 	.word	0x0800e4d3
 800e410:	0800e4d3 	.word	0x0800e4d3
 800e414:	0800e4d3 	.word	0x0800e4d3
 800e418:	0800e4d3 	.word	0x0800e4d3
 800e41c:	0800e4d3 	.word	0x0800e4d3
 800e420:	0800e4d3 	.word	0x0800e4d3
 800e424:	0800e49f 	.word	0x0800e49f
 800e428:	0800e4d3 	.word	0x0800e4d3
 800e42c:	0800e4d3 	.word	0x0800e4d3
 800e430:	0800e4d3 	.word	0x0800e4d3
 800e434:	0800e4d3 	.word	0x0800e4d3
 800e438:	0800e4d3 	.word	0x0800e4d3
 800e43c:	0800e4d3 	.word	0x0800e4d3
 800e440:	0800e4d3 	.word	0x0800e4d3
 800e444:	0800e4d3 	.word	0x0800e4d3
 800e448:	0800e4d3 	.word	0x0800e4d3
 800e44c:	0800e4d3 	.word	0x0800e4d3
 800e450:	0800e4d3 	.word	0x0800e4d3
 800e454:	0800e4d3 	.word	0x0800e4d3
 800e458:	0800e4d3 	.word	0x0800e4d3
 800e45c:	0800e4d3 	.word	0x0800e4d3
 800e460:	0800e4d3 	.word	0x0800e4d3
 800e464:	0800e4c5 	.word	0x0800e4c5
 800e468:	2b40      	cmp	r3, #64	; 0x40
 800e46a:	d02e      	beq.n	800e4ca <UART_SetConfig+0xab2>
 800e46c:	e031      	b.n	800e4d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e46e:	f7fc fe29 	bl	800b0c4 <HAL_RCC_GetPCLK1Freq>
 800e472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e474:	e033      	b.n	800e4de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e476:	f7fc fe3b 	bl	800b0f0 <HAL_RCC_GetPCLK2Freq>
 800e47a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e47c:	e02f      	b.n	800e4de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e47e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e482:	4618      	mov	r0, r3
 800e484:	f7fe f81e 	bl	800c4c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e48c:	e027      	b.n	800e4de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e48e:	f107 0318 	add.w	r3, r7, #24
 800e492:	4618      	mov	r0, r3
 800e494:	f7fe f96a 	bl	800c76c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e49c:	e01f      	b.n	800e4de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e49e:	4b69      	ldr	r3, [pc, #420]	; (800e644 <UART_SetConfig+0xc2c>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f003 0320 	and.w	r3, r3, #32
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d009      	beq.n	800e4be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4aa:	4b66      	ldr	r3, [pc, #408]	; (800e644 <UART_SetConfig+0xc2c>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	08db      	lsrs	r3, r3, #3
 800e4b0:	f003 0303 	and.w	r3, r3, #3
 800e4b4:	4a64      	ldr	r2, [pc, #400]	; (800e648 <UART_SetConfig+0xc30>)
 800e4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4bc:	e00f      	b.n	800e4de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e4be:	4b62      	ldr	r3, [pc, #392]	; (800e648 <UART_SetConfig+0xc30>)
 800e4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c2:	e00c      	b.n	800e4de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4c4:	4b61      	ldr	r3, [pc, #388]	; (800e64c <UART_SetConfig+0xc34>)
 800e4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c8:	e009      	b.n	800e4de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d0:	e005      	b.n	800e4de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e4dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 80ea 	beq.w	800e6ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ea:	4a55      	ldr	r2, [pc, #340]	; (800e640 <UART_SetConfig+0xc28>)
 800e4ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4f8:	005a      	lsls	r2, r3, #1
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	085b      	lsrs	r3, r3, #1
 800e500:	441a      	add	r2, r3
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	fbb2 f3f3 	udiv	r3, r2, r3
 800e50a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	2b0f      	cmp	r3, #15
 800e510:	d916      	bls.n	800e540 <UART_SetConfig+0xb28>
 800e512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e518:	d212      	bcs.n	800e540 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	f023 030f 	bic.w	r3, r3, #15
 800e522:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	085b      	lsrs	r3, r3, #1
 800e528:	b29b      	uxth	r3, r3
 800e52a:	f003 0307 	and.w	r3, r3, #7
 800e52e:	b29a      	uxth	r2, r3
 800e530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e532:	4313      	orrs	r3, r2
 800e534:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e53c:	60da      	str	r2, [r3, #12]
 800e53e:	e0bc      	b.n	800e6ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e546:	e0b8      	b.n	800e6ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e548:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e54c:	2b20      	cmp	r3, #32
 800e54e:	dc4b      	bgt.n	800e5e8 <UART_SetConfig+0xbd0>
 800e550:	2b00      	cmp	r3, #0
 800e552:	f2c0 8087 	blt.w	800e664 <UART_SetConfig+0xc4c>
 800e556:	2b20      	cmp	r3, #32
 800e558:	f200 8084 	bhi.w	800e664 <UART_SetConfig+0xc4c>
 800e55c:	a201      	add	r2, pc, #4	; (adr r2, 800e564 <UART_SetConfig+0xb4c>)
 800e55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e562:	bf00      	nop
 800e564:	0800e5ef 	.word	0x0800e5ef
 800e568:	0800e5f7 	.word	0x0800e5f7
 800e56c:	0800e665 	.word	0x0800e665
 800e570:	0800e665 	.word	0x0800e665
 800e574:	0800e5ff 	.word	0x0800e5ff
 800e578:	0800e665 	.word	0x0800e665
 800e57c:	0800e665 	.word	0x0800e665
 800e580:	0800e665 	.word	0x0800e665
 800e584:	0800e60f 	.word	0x0800e60f
 800e588:	0800e665 	.word	0x0800e665
 800e58c:	0800e665 	.word	0x0800e665
 800e590:	0800e665 	.word	0x0800e665
 800e594:	0800e665 	.word	0x0800e665
 800e598:	0800e665 	.word	0x0800e665
 800e59c:	0800e665 	.word	0x0800e665
 800e5a0:	0800e665 	.word	0x0800e665
 800e5a4:	0800e61f 	.word	0x0800e61f
 800e5a8:	0800e665 	.word	0x0800e665
 800e5ac:	0800e665 	.word	0x0800e665
 800e5b0:	0800e665 	.word	0x0800e665
 800e5b4:	0800e665 	.word	0x0800e665
 800e5b8:	0800e665 	.word	0x0800e665
 800e5bc:	0800e665 	.word	0x0800e665
 800e5c0:	0800e665 	.word	0x0800e665
 800e5c4:	0800e665 	.word	0x0800e665
 800e5c8:	0800e665 	.word	0x0800e665
 800e5cc:	0800e665 	.word	0x0800e665
 800e5d0:	0800e665 	.word	0x0800e665
 800e5d4:	0800e665 	.word	0x0800e665
 800e5d8:	0800e665 	.word	0x0800e665
 800e5dc:	0800e665 	.word	0x0800e665
 800e5e0:	0800e665 	.word	0x0800e665
 800e5e4:	0800e657 	.word	0x0800e657
 800e5e8:	2b40      	cmp	r3, #64	; 0x40
 800e5ea:	d037      	beq.n	800e65c <UART_SetConfig+0xc44>
 800e5ec:	e03a      	b.n	800e664 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5ee:	f7fc fd69 	bl	800b0c4 <HAL_RCC_GetPCLK1Freq>
 800e5f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5f4:	e03c      	b.n	800e670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5f6:	f7fc fd7b 	bl	800b0f0 <HAL_RCC_GetPCLK2Freq>
 800e5fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5fc:	e038      	b.n	800e670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e602:	4618      	mov	r0, r3
 800e604:	f7fd ff5e 	bl	800c4c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e60c:	e030      	b.n	800e670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e60e:	f107 0318 	add.w	r3, r7, #24
 800e612:	4618      	mov	r0, r3
 800e614:	f7fe f8aa 	bl	800c76c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e61c:	e028      	b.n	800e670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e61e:	4b09      	ldr	r3, [pc, #36]	; (800e644 <UART_SetConfig+0xc2c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 0320 	and.w	r3, r3, #32
 800e626:	2b00      	cmp	r3, #0
 800e628:	d012      	beq.n	800e650 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e62a:	4b06      	ldr	r3, [pc, #24]	; (800e644 <UART_SetConfig+0xc2c>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	08db      	lsrs	r3, r3, #3
 800e630:	f003 0303 	and.w	r3, r3, #3
 800e634:	4a04      	ldr	r2, [pc, #16]	; (800e648 <UART_SetConfig+0xc30>)
 800e636:	fa22 f303 	lsr.w	r3, r2, r3
 800e63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e63c:	e018      	b.n	800e670 <UART_SetConfig+0xc58>
 800e63e:	bf00      	nop
 800e640:	08010540 	.word	0x08010540
 800e644:	58024400 	.word	0x58024400
 800e648:	03d09000 	.word	0x03d09000
 800e64c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e650:	4b24      	ldr	r3, [pc, #144]	; (800e6e4 <UART_SetConfig+0xccc>)
 800e652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e654:	e00c      	b.n	800e670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e656:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <UART_SetConfig+0xcd0>)
 800e658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e65a:	e009      	b.n	800e670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e65c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e662:	e005      	b.n	800e670 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e668:	2301      	movs	r3, #1
 800e66a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e66e:	bf00      	nop
    }

    if (pclk != 0U)
 800e670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e672:	2b00      	cmp	r3, #0
 800e674:	d021      	beq.n	800e6ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67a:	4a1c      	ldr	r2, [pc, #112]	; (800e6ec <UART_SetConfig+0xcd4>)
 800e67c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e680:	461a      	mov	r2, r3
 800e682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e684:	fbb3 f2f2 	udiv	r2, r3, r2
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	085b      	lsrs	r3, r3, #1
 800e68e:	441a      	add	r2, r3
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	fbb2 f3f3 	udiv	r3, r2, r3
 800e698:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69c:	2b0f      	cmp	r3, #15
 800e69e:	d909      	bls.n	800e6b4 <UART_SetConfig+0xc9c>
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6a6:	d205      	bcs.n	800e6b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	60da      	str	r2, [r3, #12]
 800e6b2:	e002      	b.n	800e6ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e6d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3748      	adds	r7, #72	; 0x48
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6e4:	03d09000 	.word	0x03d09000
 800e6e8:	003d0900 	.word	0x003d0900
 800e6ec:	08010540 	.word	0x08010540

0800e6f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00a      	beq.n	800e71a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	430a      	orrs	r2, r1
 800e718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71e:	f003 0302 	and.w	r3, r3, #2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00a      	beq.n	800e73c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	430a      	orrs	r2, r1
 800e73a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e740:	f003 0304 	and.w	r3, r3, #4
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00a      	beq.n	800e75e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	430a      	orrs	r2, r1
 800e75c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e762:	f003 0308 	and.w	r3, r3, #8
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	430a      	orrs	r2, r1
 800e77e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e784:	f003 0310 	and.w	r3, r3, #16
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00a      	beq.n	800e7a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a6:	f003 0320 	and.w	r3, r3, #32
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00a      	beq.n	800e7c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	430a      	orrs	r2, r1
 800e7c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d01a      	beq.n	800e806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	430a      	orrs	r2, r1
 800e7e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7ee:	d10a      	bne.n	800e806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	430a      	orrs	r2, r1
 800e804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00a      	beq.n	800e828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	430a      	orrs	r2, r1
 800e826:	605a      	str	r2, [r3, #4]
  }
}
 800e828:	bf00      	nop
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b098      	sub	sp, #96	; 0x60
 800e838:	af02      	add	r7, sp, #8
 800e83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e844:	f7f5 fd54 	bl	80042f0 <HAL_GetTick>
 800e848:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f003 0308 	and.w	r3, r3, #8
 800e854:	2b08      	cmp	r3, #8
 800e856:	d12f      	bne.n	800e8b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e860:	2200      	movs	r2, #0
 800e862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 f88e 	bl	800e988 <UART_WaitOnFlagUntilTimeout>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d022      	beq.n	800e8b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	e853 3f00 	ldrex	r3, [r3]
 800e87e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e886:	653b      	str	r3, [r7, #80]	; 0x50
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	461a      	mov	r2, r3
 800e88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e890:	647b      	str	r3, [r7, #68]	; 0x44
 800e892:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e894:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e898:	e841 2300 	strex	r3, r2, [r1]
 800e89c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1e6      	bne.n	800e872 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2220      	movs	r2, #32
 800e8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e063      	b.n	800e980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f003 0304 	and.w	r3, r3, #4
 800e8c2:	2b04      	cmp	r3, #4
 800e8c4:	d149      	bne.n	800e95a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e8c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f857 	bl	800e988 <UART_WaitOnFlagUntilTimeout>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d03c      	beq.n	800e95a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e8f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8fe:	633b      	str	r3, [r7, #48]	; 0x30
 800e900:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e6      	bne.n	800e8e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3308      	adds	r3, #8
 800e918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	e853 3f00 	ldrex	r3, [r3]
 800e920:	60fb      	str	r3, [r7, #12]
   return(result);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f023 0301 	bic.w	r3, r3, #1
 800e928:	64bb      	str	r3, [r7, #72]	; 0x48
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3308      	adds	r3, #8
 800e930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e932:	61fa      	str	r2, [r7, #28]
 800e934:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e936:	69b9      	ldr	r1, [r7, #24]
 800e938:	69fa      	ldr	r2, [r7, #28]
 800e93a:	e841 2300 	strex	r3, r2, [r1]
 800e93e:	617b      	str	r3, [r7, #20]
   return(result);
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1e5      	bne.n	800e912 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2220      	movs	r2, #32
 800e94a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e956:	2303      	movs	r3, #3
 800e958:	e012      	b.n	800e980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2220      	movs	r2, #32
 800e95e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2220      	movs	r2, #32
 800e966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3758      	adds	r7, #88	; 0x58
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	603b      	str	r3, [r7, #0]
 800e994:	4613      	mov	r3, r2
 800e996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e998:	e049      	b.n	800ea2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9a0:	d045      	beq.n	800ea2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9a2:	f7f5 fca5 	bl	80042f0 <HAL_GetTick>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	69ba      	ldr	r2, [r7, #24]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d302      	bcc.n	800e9b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	e048      	b.n	800ea4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f003 0304 	and.w	r3, r3, #4
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d031      	beq.n	800ea2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	69db      	ldr	r3, [r3, #28]
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	2b08      	cmp	r3, #8
 800e9d6:	d110      	bne.n	800e9fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2208      	movs	r2, #8
 800e9de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f000 f839 	bl	800ea58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2208      	movs	r2, #8
 800e9ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e029      	b.n	800ea4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	69db      	ldr	r3, [r3, #28]
 800ea00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea08:	d111      	bne.n	800ea2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f000 f81f 	bl	800ea58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2220      	movs	r2, #32
 800ea1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	e00f      	b.n	800ea4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	69da      	ldr	r2, [r3, #28]
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	4013      	ands	r3, r2
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	bf0c      	ite	eq
 800ea3e:	2301      	moveq	r3, #1
 800ea40:	2300      	movne	r3, #0
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	461a      	mov	r2, r3
 800ea46:	79fb      	ldrb	r3, [r7, #7]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d0a6      	beq.n	800e99a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3710      	adds	r7, #16
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b095      	sub	sp, #84	; 0x54
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea68:	e853 3f00 	ldrex	r3, [r3]
 800ea6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ea80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea86:	e841 2300 	strex	r3, r2, [r1]
 800ea8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1e6      	bne.n	800ea60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	3308      	adds	r3, #8
 800ea98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9a:	6a3b      	ldr	r3, [r7, #32]
 800ea9c:	e853 3f00 	ldrex	r3, [r3]
 800eaa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800eaa2:	69fa      	ldr	r2, [r7, #28]
 800eaa4:	4b1e      	ldr	r3, [pc, #120]	; (800eb20 <UART_EndRxTransfer+0xc8>)
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	3308      	adds	r3, #8
 800eab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaba:	e841 2300 	strex	r3, r2, [r1]
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1e5      	bne.n	800ea92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d118      	bne.n	800eb00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	e853 3f00 	ldrex	r3, [r3]
 800eada:	60bb      	str	r3, [r7, #8]
   return(result);
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	f023 0310 	bic.w	r3, r3, #16
 800eae2:	647b      	str	r3, [r7, #68]	; 0x44
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	461a      	mov	r2, r3
 800eaea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaec:	61bb      	str	r3, [r7, #24]
 800eaee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf0:	6979      	ldr	r1, [r7, #20]
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	e841 2300 	strex	r3, r2, [r1]
 800eaf8:	613b      	str	r3, [r7, #16]
   return(result);
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1e6      	bne.n	800eace <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2220      	movs	r2, #32
 800eb04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eb14:	bf00      	nop
 800eb16:	3754      	adds	r7, #84	; 0x54
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	effffffe 	.word	0xeffffffe

0800eb24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7fe ff52 	bl	800d9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb48:	bf00      	nop
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	e853 3f00 	ldrex	r3, [r3]
 800eb64:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb6c:	61fb      	str	r3, [r7, #28]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	461a      	mov	r2, r3
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	61bb      	str	r3, [r7, #24]
 800eb78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7a:	6979      	ldr	r1, [r7, #20]
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	e841 2300 	strex	r3, r2, [r1]
 800eb82:	613b      	str	r3, [r7, #16]
   return(result);
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1e6      	bne.n	800eb58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2220      	movs	r2, #32
 800eb8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7fe ff1d 	bl	800d9d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb9e:	bf00      	nop
 800eba0:	3720      	adds	r7, #32
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b083      	sub	sp, #12
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ebae:	bf00      	nop
 800ebb0:	370c      	adds	r7, #12
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr

0800ebba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ebba:	b480      	push	{r7}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ebc2:	bf00      	nop
 800ebc4:	370c      	adds	r7, #12
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr

0800ebce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ebce:	b480      	push	{r7}
 800ebd0:	b083      	sub	sp, #12
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ebd6:	bf00      	nop
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr

0800ebe2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b085      	sub	sp, #20
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d101      	bne.n	800ebf8 <HAL_UARTEx_DisableFifoMode+0x16>
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	e027      	b.n	800ec48 <HAL_UARTEx_DisableFifoMode+0x66>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2224      	movs	r2, #36	; 0x24
 800ec04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f022 0201 	bic.w	r2, r2, #1
 800ec1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2220      	movs	r2, #32
 800ec3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3714      	adds	r7, #20
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d101      	bne.n	800ec6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec68:	2302      	movs	r3, #2
 800ec6a:	e02d      	b.n	800ecc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2224      	movs	r2, #36	; 0x24
 800ec78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f022 0201 	bic.w	r2, r2, #1
 800ec92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	683a      	ldr	r2, [r7, #0]
 800eca4:	430a      	orrs	r2, r1
 800eca6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 f84f 	bl	800ed4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d101      	bne.n	800ece8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ece4:	2302      	movs	r3, #2
 800ece6:	e02d      	b.n	800ed44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2224      	movs	r2, #36	; 0x24
 800ecf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f022 0201 	bic.w	r2, r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	430a      	orrs	r2, r1
 800ed22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f811 	bl	800ed4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2220      	movs	r2, #32
 800ed36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed42:	2300      	movs	r3, #0
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b085      	sub	sp, #20
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d108      	bne.n	800ed6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed6c:	e031      	b.n	800edd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed6e:	2310      	movs	r3, #16
 800ed70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed72:	2310      	movs	r3, #16
 800ed74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	0e5b      	lsrs	r3, r3, #25
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	f003 0307 	and.w	r3, r3, #7
 800ed84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	0f5b      	lsrs	r3, r3, #29
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	f003 0307 	and.w	r3, r3, #7
 800ed94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed96:	7bbb      	ldrb	r3, [r7, #14]
 800ed98:	7b3a      	ldrb	r2, [r7, #12]
 800ed9a:	4911      	ldr	r1, [pc, #68]	; (800ede0 <UARTEx_SetNbDataToProcess+0x94>)
 800ed9c:	5c8a      	ldrb	r2, [r1, r2]
 800ed9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eda2:	7b3a      	ldrb	r2, [r7, #12]
 800eda4:	490f      	ldr	r1, [pc, #60]	; (800ede4 <UARTEx_SetNbDataToProcess+0x98>)
 800eda6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eda8:	fb93 f3f2 	sdiv	r3, r3, r2
 800edac:	b29a      	uxth	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	7b7a      	ldrb	r2, [r7, #13]
 800edb8:	4909      	ldr	r1, [pc, #36]	; (800ede0 <UARTEx_SetNbDataToProcess+0x94>)
 800edba:	5c8a      	ldrb	r2, [r1, r2]
 800edbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800edc0:	7b7a      	ldrb	r2, [r7, #13]
 800edc2:	4908      	ldr	r1, [pc, #32]	; (800ede4 <UARTEx_SetNbDataToProcess+0x98>)
 800edc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800edca:	b29a      	uxth	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800edd2:	bf00      	nop
 800edd4:	3714      	adds	r7, #20
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	08010558 	.word	0x08010558
 800ede4:	08010560 	.word	0x08010560

0800ede8 <__errno>:
 800ede8:	4b01      	ldr	r3, [pc, #4]	; (800edf0 <__errno+0x8>)
 800edea:	6818      	ldr	r0, [r3, #0]
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop
 800edf0:	24000054 	.word	0x24000054

0800edf4 <__libc_init_array>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	4d0d      	ldr	r5, [pc, #52]	; (800ee2c <__libc_init_array+0x38>)
 800edf8:	4c0d      	ldr	r4, [pc, #52]	; (800ee30 <__libc_init_array+0x3c>)
 800edfa:	1b64      	subs	r4, r4, r5
 800edfc:	10a4      	asrs	r4, r4, #2
 800edfe:	2600      	movs	r6, #0
 800ee00:	42a6      	cmp	r6, r4
 800ee02:	d109      	bne.n	800ee18 <__libc_init_array+0x24>
 800ee04:	4d0b      	ldr	r5, [pc, #44]	; (800ee34 <__libc_init_array+0x40>)
 800ee06:	4c0c      	ldr	r4, [pc, #48]	; (800ee38 <__libc_init_array+0x44>)
 800ee08:	f001 f87c 	bl	800ff04 <_init>
 800ee0c:	1b64      	subs	r4, r4, r5
 800ee0e:	10a4      	asrs	r4, r4, #2
 800ee10:	2600      	movs	r6, #0
 800ee12:	42a6      	cmp	r6, r4
 800ee14:	d105      	bne.n	800ee22 <__libc_init_array+0x2e>
 800ee16:	bd70      	pop	{r4, r5, r6, pc}
 800ee18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee1c:	4798      	blx	r3
 800ee1e:	3601      	adds	r6, #1
 800ee20:	e7ee      	b.n	800ee00 <__libc_init_array+0xc>
 800ee22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee26:	4798      	blx	r3
 800ee28:	3601      	adds	r6, #1
 800ee2a:	e7f2      	b.n	800ee12 <__libc_init_array+0x1e>
 800ee2c:	08010608 	.word	0x08010608
 800ee30:	08010608 	.word	0x08010608
 800ee34:	08010608 	.word	0x08010608
 800ee38:	0801060c 	.word	0x0801060c

0800ee3c <memset>:
 800ee3c:	4402      	add	r2, r0
 800ee3e:	4603      	mov	r3, r0
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d100      	bne.n	800ee46 <memset+0xa>
 800ee44:	4770      	bx	lr
 800ee46:	f803 1b01 	strb.w	r1, [r3], #1
 800ee4a:	e7f9      	b.n	800ee40 <memset+0x4>

0800ee4c <iprintf>:
 800ee4c:	b40f      	push	{r0, r1, r2, r3}
 800ee4e:	4b0a      	ldr	r3, [pc, #40]	; (800ee78 <iprintf+0x2c>)
 800ee50:	b513      	push	{r0, r1, r4, lr}
 800ee52:	681c      	ldr	r4, [r3, #0]
 800ee54:	b124      	cbz	r4, 800ee60 <iprintf+0x14>
 800ee56:	69a3      	ldr	r3, [r4, #24]
 800ee58:	b913      	cbnz	r3, 800ee60 <iprintf+0x14>
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f000 f9ee 	bl	800f23c <__sinit>
 800ee60:	ab05      	add	r3, sp, #20
 800ee62:	9a04      	ldr	r2, [sp, #16]
 800ee64:	68a1      	ldr	r1, [r4, #8]
 800ee66:	9301      	str	r3, [sp, #4]
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f000 fbff 	bl	800f66c <_vfiprintf_r>
 800ee6e:	b002      	add	sp, #8
 800ee70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee74:	b004      	add	sp, #16
 800ee76:	4770      	bx	lr
 800ee78:	24000054 	.word	0x24000054

0800ee7c <setvbuf>:
 800ee7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee80:	461d      	mov	r5, r3
 800ee82:	4b5d      	ldr	r3, [pc, #372]	; (800eff8 <setvbuf+0x17c>)
 800ee84:	681f      	ldr	r7, [r3, #0]
 800ee86:	4604      	mov	r4, r0
 800ee88:	460e      	mov	r6, r1
 800ee8a:	4690      	mov	r8, r2
 800ee8c:	b127      	cbz	r7, 800ee98 <setvbuf+0x1c>
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	b913      	cbnz	r3, 800ee98 <setvbuf+0x1c>
 800ee92:	4638      	mov	r0, r7
 800ee94:	f000 f9d2 	bl	800f23c <__sinit>
 800ee98:	4b58      	ldr	r3, [pc, #352]	; (800effc <setvbuf+0x180>)
 800ee9a:	429c      	cmp	r4, r3
 800ee9c:	d167      	bne.n	800ef6e <setvbuf+0xf2>
 800ee9e:	687c      	ldr	r4, [r7, #4]
 800eea0:	f1b8 0f02 	cmp.w	r8, #2
 800eea4:	d006      	beq.n	800eeb4 <setvbuf+0x38>
 800eea6:	f1b8 0f01 	cmp.w	r8, #1
 800eeaa:	f200 809f 	bhi.w	800efec <setvbuf+0x170>
 800eeae:	2d00      	cmp	r5, #0
 800eeb0:	f2c0 809c 	blt.w	800efec <setvbuf+0x170>
 800eeb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeb6:	07db      	lsls	r3, r3, #31
 800eeb8:	d405      	bmi.n	800eec6 <setvbuf+0x4a>
 800eeba:	89a3      	ldrh	r3, [r4, #12]
 800eebc:	0598      	lsls	r0, r3, #22
 800eebe:	d402      	bmi.n	800eec6 <setvbuf+0x4a>
 800eec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eec2:	f000 fa59 	bl	800f378 <__retarget_lock_acquire_recursive>
 800eec6:	4621      	mov	r1, r4
 800eec8:	4638      	mov	r0, r7
 800eeca:	f000 f923 	bl	800f114 <_fflush_r>
 800eece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eed0:	b141      	cbz	r1, 800eee4 <setvbuf+0x68>
 800eed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eed6:	4299      	cmp	r1, r3
 800eed8:	d002      	beq.n	800eee0 <setvbuf+0x64>
 800eeda:	4638      	mov	r0, r7
 800eedc:	f000 fabc 	bl	800f458 <_free_r>
 800eee0:	2300      	movs	r3, #0
 800eee2:	6363      	str	r3, [r4, #52]	; 0x34
 800eee4:	2300      	movs	r3, #0
 800eee6:	61a3      	str	r3, [r4, #24]
 800eee8:	6063      	str	r3, [r4, #4]
 800eeea:	89a3      	ldrh	r3, [r4, #12]
 800eeec:	0619      	lsls	r1, r3, #24
 800eeee:	d503      	bpl.n	800eef8 <setvbuf+0x7c>
 800eef0:	6921      	ldr	r1, [r4, #16]
 800eef2:	4638      	mov	r0, r7
 800eef4:	f000 fab0 	bl	800f458 <_free_r>
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800eefe:	f023 0303 	bic.w	r3, r3, #3
 800ef02:	f1b8 0f02 	cmp.w	r8, #2
 800ef06:	81a3      	strh	r3, [r4, #12]
 800ef08:	d06c      	beq.n	800efe4 <setvbuf+0x168>
 800ef0a:	ab01      	add	r3, sp, #4
 800ef0c:	466a      	mov	r2, sp
 800ef0e:	4621      	mov	r1, r4
 800ef10:	4638      	mov	r0, r7
 800ef12:	f000 fa33 	bl	800f37c <__swhatbuf_r>
 800ef16:	89a3      	ldrh	r3, [r4, #12]
 800ef18:	4318      	orrs	r0, r3
 800ef1a:	81a0      	strh	r0, [r4, #12]
 800ef1c:	2d00      	cmp	r5, #0
 800ef1e:	d130      	bne.n	800ef82 <setvbuf+0x106>
 800ef20:	9d00      	ldr	r5, [sp, #0]
 800ef22:	4628      	mov	r0, r5
 800ef24:	f000 fa90 	bl	800f448 <malloc>
 800ef28:	4606      	mov	r6, r0
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d155      	bne.n	800efda <setvbuf+0x15e>
 800ef2e:	f8dd 9000 	ldr.w	r9, [sp]
 800ef32:	45a9      	cmp	r9, r5
 800ef34:	d14a      	bne.n	800efcc <setvbuf+0x150>
 800ef36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	60a2      	str	r2, [r4, #8]
 800ef3e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ef42:	6022      	str	r2, [r4, #0]
 800ef44:	6122      	str	r2, [r4, #16]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef4c:	6162      	str	r2, [r4, #20]
 800ef4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef50:	f043 0302 	orr.w	r3, r3, #2
 800ef54:	07d2      	lsls	r2, r2, #31
 800ef56:	81a3      	strh	r3, [r4, #12]
 800ef58:	d405      	bmi.n	800ef66 <setvbuf+0xea>
 800ef5a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ef5e:	d102      	bne.n	800ef66 <setvbuf+0xea>
 800ef60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef62:	f000 fa0a 	bl	800f37a <__retarget_lock_release_recursive>
 800ef66:	4628      	mov	r0, r5
 800ef68:	b003      	add	sp, #12
 800ef6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef6e:	4b24      	ldr	r3, [pc, #144]	; (800f000 <setvbuf+0x184>)
 800ef70:	429c      	cmp	r4, r3
 800ef72:	d101      	bne.n	800ef78 <setvbuf+0xfc>
 800ef74:	68bc      	ldr	r4, [r7, #8]
 800ef76:	e793      	b.n	800eea0 <setvbuf+0x24>
 800ef78:	4b22      	ldr	r3, [pc, #136]	; (800f004 <setvbuf+0x188>)
 800ef7a:	429c      	cmp	r4, r3
 800ef7c:	bf08      	it	eq
 800ef7e:	68fc      	ldreq	r4, [r7, #12]
 800ef80:	e78e      	b.n	800eea0 <setvbuf+0x24>
 800ef82:	2e00      	cmp	r6, #0
 800ef84:	d0cd      	beq.n	800ef22 <setvbuf+0xa6>
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	b913      	cbnz	r3, 800ef90 <setvbuf+0x114>
 800ef8a:	4638      	mov	r0, r7
 800ef8c:	f000 f956 	bl	800f23c <__sinit>
 800ef90:	f1b8 0f01 	cmp.w	r8, #1
 800ef94:	bf08      	it	eq
 800ef96:	89a3      	ldrheq	r3, [r4, #12]
 800ef98:	6026      	str	r6, [r4, #0]
 800ef9a:	bf04      	itt	eq
 800ef9c:	f043 0301 	orreq.w	r3, r3, #1
 800efa0:	81a3      	strheq	r3, [r4, #12]
 800efa2:	89a2      	ldrh	r2, [r4, #12]
 800efa4:	f012 0308 	ands.w	r3, r2, #8
 800efa8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800efac:	d01c      	beq.n	800efe8 <setvbuf+0x16c>
 800efae:	07d3      	lsls	r3, r2, #31
 800efb0:	bf41      	itttt	mi
 800efb2:	2300      	movmi	r3, #0
 800efb4:	426d      	negmi	r5, r5
 800efb6:	60a3      	strmi	r3, [r4, #8]
 800efb8:	61a5      	strmi	r5, [r4, #24]
 800efba:	bf58      	it	pl
 800efbc:	60a5      	strpl	r5, [r4, #8]
 800efbe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800efc0:	f015 0501 	ands.w	r5, r5, #1
 800efc4:	d115      	bne.n	800eff2 <setvbuf+0x176>
 800efc6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800efca:	e7c8      	b.n	800ef5e <setvbuf+0xe2>
 800efcc:	4648      	mov	r0, r9
 800efce:	f000 fa3b 	bl	800f448 <malloc>
 800efd2:	4606      	mov	r6, r0
 800efd4:	2800      	cmp	r0, #0
 800efd6:	d0ae      	beq.n	800ef36 <setvbuf+0xba>
 800efd8:	464d      	mov	r5, r9
 800efda:	89a3      	ldrh	r3, [r4, #12]
 800efdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efe0:	81a3      	strh	r3, [r4, #12]
 800efe2:	e7d0      	b.n	800ef86 <setvbuf+0x10a>
 800efe4:	2500      	movs	r5, #0
 800efe6:	e7a8      	b.n	800ef3a <setvbuf+0xbe>
 800efe8:	60a3      	str	r3, [r4, #8]
 800efea:	e7e8      	b.n	800efbe <setvbuf+0x142>
 800efec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eff0:	e7b9      	b.n	800ef66 <setvbuf+0xea>
 800eff2:	2500      	movs	r5, #0
 800eff4:	e7b7      	b.n	800ef66 <setvbuf+0xea>
 800eff6:	bf00      	nop
 800eff8:	24000054 	.word	0x24000054
 800effc:	0801058c 	.word	0x0801058c
 800f000:	080105ac 	.word	0x080105ac
 800f004:	0801056c 	.word	0x0801056c

0800f008 <__sflush_r>:
 800f008:	898a      	ldrh	r2, [r1, #12]
 800f00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f00e:	4605      	mov	r5, r0
 800f010:	0710      	lsls	r0, r2, #28
 800f012:	460c      	mov	r4, r1
 800f014:	d458      	bmi.n	800f0c8 <__sflush_r+0xc0>
 800f016:	684b      	ldr	r3, [r1, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	dc05      	bgt.n	800f028 <__sflush_r+0x20>
 800f01c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f01e:	2b00      	cmp	r3, #0
 800f020:	dc02      	bgt.n	800f028 <__sflush_r+0x20>
 800f022:	2000      	movs	r0, #0
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f02a:	2e00      	cmp	r6, #0
 800f02c:	d0f9      	beq.n	800f022 <__sflush_r+0x1a>
 800f02e:	2300      	movs	r3, #0
 800f030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f034:	682f      	ldr	r7, [r5, #0]
 800f036:	602b      	str	r3, [r5, #0]
 800f038:	d032      	beq.n	800f0a0 <__sflush_r+0x98>
 800f03a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f03c:	89a3      	ldrh	r3, [r4, #12]
 800f03e:	075a      	lsls	r2, r3, #29
 800f040:	d505      	bpl.n	800f04e <__sflush_r+0x46>
 800f042:	6863      	ldr	r3, [r4, #4]
 800f044:	1ac0      	subs	r0, r0, r3
 800f046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f048:	b10b      	cbz	r3, 800f04e <__sflush_r+0x46>
 800f04a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f04c:	1ac0      	subs	r0, r0, r3
 800f04e:	2300      	movs	r3, #0
 800f050:	4602      	mov	r2, r0
 800f052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f054:	6a21      	ldr	r1, [r4, #32]
 800f056:	4628      	mov	r0, r5
 800f058:	47b0      	blx	r6
 800f05a:	1c43      	adds	r3, r0, #1
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	d106      	bne.n	800f06e <__sflush_r+0x66>
 800f060:	6829      	ldr	r1, [r5, #0]
 800f062:	291d      	cmp	r1, #29
 800f064:	d82c      	bhi.n	800f0c0 <__sflush_r+0xb8>
 800f066:	4a2a      	ldr	r2, [pc, #168]	; (800f110 <__sflush_r+0x108>)
 800f068:	40ca      	lsrs	r2, r1
 800f06a:	07d6      	lsls	r6, r2, #31
 800f06c:	d528      	bpl.n	800f0c0 <__sflush_r+0xb8>
 800f06e:	2200      	movs	r2, #0
 800f070:	6062      	str	r2, [r4, #4]
 800f072:	04d9      	lsls	r1, r3, #19
 800f074:	6922      	ldr	r2, [r4, #16]
 800f076:	6022      	str	r2, [r4, #0]
 800f078:	d504      	bpl.n	800f084 <__sflush_r+0x7c>
 800f07a:	1c42      	adds	r2, r0, #1
 800f07c:	d101      	bne.n	800f082 <__sflush_r+0x7a>
 800f07e:	682b      	ldr	r3, [r5, #0]
 800f080:	b903      	cbnz	r3, 800f084 <__sflush_r+0x7c>
 800f082:	6560      	str	r0, [r4, #84]	; 0x54
 800f084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f086:	602f      	str	r7, [r5, #0]
 800f088:	2900      	cmp	r1, #0
 800f08a:	d0ca      	beq.n	800f022 <__sflush_r+0x1a>
 800f08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f090:	4299      	cmp	r1, r3
 800f092:	d002      	beq.n	800f09a <__sflush_r+0x92>
 800f094:	4628      	mov	r0, r5
 800f096:	f000 f9df 	bl	800f458 <_free_r>
 800f09a:	2000      	movs	r0, #0
 800f09c:	6360      	str	r0, [r4, #52]	; 0x34
 800f09e:	e7c1      	b.n	800f024 <__sflush_r+0x1c>
 800f0a0:	6a21      	ldr	r1, [r4, #32]
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	47b0      	blx	r6
 800f0a8:	1c41      	adds	r1, r0, #1
 800f0aa:	d1c7      	bne.n	800f03c <__sflush_r+0x34>
 800f0ac:	682b      	ldr	r3, [r5, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d0c4      	beq.n	800f03c <__sflush_r+0x34>
 800f0b2:	2b1d      	cmp	r3, #29
 800f0b4:	d001      	beq.n	800f0ba <__sflush_r+0xb2>
 800f0b6:	2b16      	cmp	r3, #22
 800f0b8:	d101      	bne.n	800f0be <__sflush_r+0xb6>
 800f0ba:	602f      	str	r7, [r5, #0]
 800f0bc:	e7b1      	b.n	800f022 <__sflush_r+0x1a>
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	e7ad      	b.n	800f024 <__sflush_r+0x1c>
 800f0c8:	690f      	ldr	r7, [r1, #16]
 800f0ca:	2f00      	cmp	r7, #0
 800f0cc:	d0a9      	beq.n	800f022 <__sflush_r+0x1a>
 800f0ce:	0793      	lsls	r3, r2, #30
 800f0d0:	680e      	ldr	r6, [r1, #0]
 800f0d2:	bf08      	it	eq
 800f0d4:	694b      	ldreq	r3, [r1, #20]
 800f0d6:	600f      	str	r7, [r1, #0]
 800f0d8:	bf18      	it	ne
 800f0da:	2300      	movne	r3, #0
 800f0dc:	eba6 0807 	sub.w	r8, r6, r7
 800f0e0:	608b      	str	r3, [r1, #8]
 800f0e2:	f1b8 0f00 	cmp.w	r8, #0
 800f0e6:	dd9c      	ble.n	800f022 <__sflush_r+0x1a>
 800f0e8:	6a21      	ldr	r1, [r4, #32]
 800f0ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0ec:	4643      	mov	r3, r8
 800f0ee:	463a      	mov	r2, r7
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	47b0      	blx	r6
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	dc06      	bgt.n	800f106 <__sflush_r+0xfe>
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0fe:	81a3      	strh	r3, [r4, #12]
 800f100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f104:	e78e      	b.n	800f024 <__sflush_r+0x1c>
 800f106:	4407      	add	r7, r0
 800f108:	eba8 0800 	sub.w	r8, r8, r0
 800f10c:	e7e9      	b.n	800f0e2 <__sflush_r+0xda>
 800f10e:	bf00      	nop
 800f110:	20400001 	.word	0x20400001

0800f114 <_fflush_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	690b      	ldr	r3, [r1, #16]
 800f118:	4605      	mov	r5, r0
 800f11a:	460c      	mov	r4, r1
 800f11c:	b913      	cbnz	r3, 800f124 <_fflush_r+0x10>
 800f11e:	2500      	movs	r5, #0
 800f120:	4628      	mov	r0, r5
 800f122:	bd38      	pop	{r3, r4, r5, pc}
 800f124:	b118      	cbz	r0, 800f12e <_fflush_r+0x1a>
 800f126:	6983      	ldr	r3, [r0, #24]
 800f128:	b90b      	cbnz	r3, 800f12e <_fflush_r+0x1a>
 800f12a:	f000 f887 	bl	800f23c <__sinit>
 800f12e:	4b14      	ldr	r3, [pc, #80]	; (800f180 <_fflush_r+0x6c>)
 800f130:	429c      	cmp	r4, r3
 800f132:	d11b      	bne.n	800f16c <_fflush_r+0x58>
 800f134:	686c      	ldr	r4, [r5, #4]
 800f136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d0ef      	beq.n	800f11e <_fflush_r+0xa>
 800f13e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f140:	07d0      	lsls	r0, r2, #31
 800f142:	d404      	bmi.n	800f14e <_fflush_r+0x3a>
 800f144:	0599      	lsls	r1, r3, #22
 800f146:	d402      	bmi.n	800f14e <_fflush_r+0x3a>
 800f148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f14a:	f000 f915 	bl	800f378 <__retarget_lock_acquire_recursive>
 800f14e:	4628      	mov	r0, r5
 800f150:	4621      	mov	r1, r4
 800f152:	f7ff ff59 	bl	800f008 <__sflush_r>
 800f156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f158:	07da      	lsls	r2, r3, #31
 800f15a:	4605      	mov	r5, r0
 800f15c:	d4e0      	bmi.n	800f120 <_fflush_r+0xc>
 800f15e:	89a3      	ldrh	r3, [r4, #12]
 800f160:	059b      	lsls	r3, r3, #22
 800f162:	d4dd      	bmi.n	800f120 <_fflush_r+0xc>
 800f164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f166:	f000 f908 	bl	800f37a <__retarget_lock_release_recursive>
 800f16a:	e7d9      	b.n	800f120 <_fflush_r+0xc>
 800f16c:	4b05      	ldr	r3, [pc, #20]	; (800f184 <_fflush_r+0x70>)
 800f16e:	429c      	cmp	r4, r3
 800f170:	d101      	bne.n	800f176 <_fflush_r+0x62>
 800f172:	68ac      	ldr	r4, [r5, #8]
 800f174:	e7df      	b.n	800f136 <_fflush_r+0x22>
 800f176:	4b04      	ldr	r3, [pc, #16]	; (800f188 <_fflush_r+0x74>)
 800f178:	429c      	cmp	r4, r3
 800f17a:	bf08      	it	eq
 800f17c:	68ec      	ldreq	r4, [r5, #12]
 800f17e:	e7da      	b.n	800f136 <_fflush_r+0x22>
 800f180:	0801058c 	.word	0x0801058c
 800f184:	080105ac 	.word	0x080105ac
 800f188:	0801056c 	.word	0x0801056c

0800f18c <std>:
 800f18c:	2300      	movs	r3, #0
 800f18e:	b510      	push	{r4, lr}
 800f190:	4604      	mov	r4, r0
 800f192:	e9c0 3300 	strd	r3, r3, [r0]
 800f196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f19a:	6083      	str	r3, [r0, #8]
 800f19c:	8181      	strh	r1, [r0, #12]
 800f19e:	6643      	str	r3, [r0, #100]	; 0x64
 800f1a0:	81c2      	strh	r2, [r0, #14]
 800f1a2:	6183      	str	r3, [r0, #24]
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	2208      	movs	r2, #8
 800f1a8:	305c      	adds	r0, #92	; 0x5c
 800f1aa:	f7ff fe47 	bl	800ee3c <memset>
 800f1ae:	4b05      	ldr	r3, [pc, #20]	; (800f1c4 <std+0x38>)
 800f1b0:	6263      	str	r3, [r4, #36]	; 0x24
 800f1b2:	4b05      	ldr	r3, [pc, #20]	; (800f1c8 <std+0x3c>)
 800f1b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f1b6:	4b05      	ldr	r3, [pc, #20]	; (800f1cc <std+0x40>)
 800f1b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1ba:	4b05      	ldr	r3, [pc, #20]	; (800f1d0 <std+0x44>)
 800f1bc:	6224      	str	r4, [r4, #32]
 800f1be:	6323      	str	r3, [r4, #48]	; 0x30
 800f1c0:	bd10      	pop	{r4, pc}
 800f1c2:	bf00      	nop
 800f1c4:	0800fc15 	.word	0x0800fc15
 800f1c8:	0800fc37 	.word	0x0800fc37
 800f1cc:	0800fc6f 	.word	0x0800fc6f
 800f1d0:	0800fc93 	.word	0x0800fc93

0800f1d4 <_cleanup_r>:
 800f1d4:	4901      	ldr	r1, [pc, #4]	; (800f1dc <_cleanup_r+0x8>)
 800f1d6:	f000 b8af 	b.w	800f338 <_fwalk_reent>
 800f1da:	bf00      	nop
 800f1dc:	0800f115 	.word	0x0800f115

0800f1e0 <__sfmoreglue>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	2268      	movs	r2, #104	; 0x68
 800f1e4:	1e4d      	subs	r5, r1, #1
 800f1e6:	4355      	muls	r5, r2
 800f1e8:	460e      	mov	r6, r1
 800f1ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1ee:	f000 f99f 	bl	800f530 <_malloc_r>
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	b140      	cbz	r0, 800f208 <__sfmoreglue+0x28>
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	e9c0 1600 	strd	r1, r6, [r0]
 800f1fc:	300c      	adds	r0, #12
 800f1fe:	60a0      	str	r0, [r4, #8]
 800f200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f204:	f7ff fe1a 	bl	800ee3c <memset>
 800f208:	4620      	mov	r0, r4
 800f20a:	bd70      	pop	{r4, r5, r6, pc}

0800f20c <__sfp_lock_acquire>:
 800f20c:	4801      	ldr	r0, [pc, #4]	; (800f214 <__sfp_lock_acquire+0x8>)
 800f20e:	f000 b8b3 	b.w	800f378 <__retarget_lock_acquire_recursive>
 800f212:	bf00      	nop
 800f214:	24060839 	.word	0x24060839

0800f218 <__sfp_lock_release>:
 800f218:	4801      	ldr	r0, [pc, #4]	; (800f220 <__sfp_lock_release+0x8>)
 800f21a:	f000 b8ae 	b.w	800f37a <__retarget_lock_release_recursive>
 800f21e:	bf00      	nop
 800f220:	24060839 	.word	0x24060839

0800f224 <__sinit_lock_acquire>:
 800f224:	4801      	ldr	r0, [pc, #4]	; (800f22c <__sinit_lock_acquire+0x8>)
 800f226:	f000 b8a7 	b.w	800f378 <__retarget_lock_acquire_recursive>
 800f22a:	bf00      	nop
 800f22c:	2406083a 	.word	0x2406083a

0800f230 <__sinit_lock_release>:
 800f230:	4801      	ldr	r0, [pc, #4]	; (800f238 <__sinit_lock_release+0x8>)
 800f232:	f000 b8a2 	b.w	800f37a <__retarget_lock_release_recursive>
 800f236:	bf00      	nop
 800f238:	2406083a 	.word	0x2406083a

0800f23c <__sinit>:
 800f23c:	b510      	push	{r4, lr}
 800f23e:	4604      	mov	r4, r0
 800f240:	f7ff fff0 	bl	800f224 <__sinit_lock_acquire>
 800f244:	69a3      	ldr	r3, [r4, #24]
 800f246:	b11b      	cbz	r3, 800f250 <__sinit+0x14>
 800f248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f24c:	f7ff bff0 	b.w	800f230 <__sinit_lock_release>
 800f250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f254:	6523      	str	r3, [r4, #80]	; 0x50
 800f256:	4b13      	ldr	r3, [pc, #76]	; (800f2a4 <__sinit+0x68>)
 800f258:	4a13      	ldr	r2, [pc, #76]	; (800f2a8 <__sinit+0x6c>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f25e:	42a3      	cmp	r3, r4
 800f260:	bf04      	itt	eq
 800f262:	2301      	moveq	r3, #1
 800f264:	61a3      	streq	r3, [r4, #24]
 800f266:	4620      	mov	r0, r4
 800f268:	f000 f820 	bl	800f2ac <__sfp>
 800f26c:	6060      	str	r0, [r4, #4]
 800f26e:	4620      	mov	r0, r4
 800f270:	f000 f81c 	bl	800f2ac <__sfp>
 800f274:	60a0      	str	r0, [r4, #8]
 800f276:	4620      	mov	r0, r4
 800f278:	f000 f818 	bl	800f2ac <__sfp>
 800f27c:	2200      	movs	r2, #0
 800f27e:	60e0      	str	r0, [r4, #12]
 800f280:	2104      	movs	r1, #4
 800f282:	6860      	ldr	r0, [r4, #4]
 800f284:	f7ff ff82 	bl	800f18c <std>
 800f288:	68a0      	ldr	r0, [r4, #8]
 800f28a:	2201      	movs	r2, #1
 800f28c:	2109      	movs	r1, #9
 800f28e:	f7ff ff7d 	bl	800f18c <std>
 800f292:	68e0      	ldr	r0, [r4, #12]
 800f294:	2202      	movs	r2, #2
 800f296:	2112      	movs	r1, #18
 800f298:	f7ff ff78 	bl	800f18c <std>
 800f29c:	2301      	movs	r3, #1
 800f29e:	61a3      	str	r3, [r4, #24]
 800f2a0:	e7d2      	b.n	800f248 <__sinit+0xc>
 800f2a2:	bf00      	nop
 800f2a4:	08010568 	.word	0x08010568
 800f2a8:	0800f1d5 	.word	0x0800f1d5

0800f2ac <__sfp>:
 800f2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ae:	4607      	mov	r7, r0
 800f2b0:	f7ff ffac 	bl	800f20c <__sfp_lock_acquire>
 800f2b4:	4b1e      	ldr	r3, [pc, #120]	; (800f330 <__sfp+0x84>)
 800f2b6:	681e      	ldr	r6, [r3, #0]
 800f2b8:	69b3      	ldr	r3, [r6, #24]
 800f2ba:	b913      	cbnz	r3, 800f2c2 <__sfp+0x16>
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f7ff ffbd 	bl	800f23c <__sinit>
 800f2c2:	3648      	adds	r6, #72	; 0x48
 800f2c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	d503      	bpl.n	800f2d4 <__sfp+0x28>
 800f2cc:	6833      	ldr	r3, [r6, #0]
 800f2ce:	b30b      	cbz	r3, 800f314 <__sfp+0x68>
 800f2d0:	6836      	ldr	r6, [r6, #0]
 800f2d2:	e7f7      	b.n	800f2c4 <__sfp+0x18>
 800f2d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f2d8:	b9d5      	cbnz	r5, 800f310 <__sfp+0x64>
 800f2da:	4b16      	ldr	r3, [pc, #88]	; (800f334 <__sfp+0x88>)
 800f2dc:	60e3      	str	r3, [r4, #12]
 800f2de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f2e2:	6665      	str	r5, [r4, #100]	; 0x64
 800f2e4:	f000 f847 	bl	800f376 <__retarget_lock_init_recursive>
 800f2e8:	f7ff ff96 	bl	800f218 <__sfp_lock_release>
 800f2ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f2f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2f4:	6025      	str	r5, [r4, #0]
 800f2f6:	61a5      	str	r5, [r4, #24]
 800f2f8:	2208      	movs	r2, #8
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f300:	f7ff fd9c 	bl	800ee3c <memset>
 800f304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f30c:	4620      	mov	r0, r4
 800f30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f310:	3468      	adds	r4, #104	; 0x68
 800f312:	e7d9      	b.n	800f2c8 <__sfp+0x1c>
 800f314:	2104      	movs	r1, #4
 800f316:	4638      	mov	r0, r7
 800f318:	f7ff ff62 	bl	800f1e0 <__sfmoreglue>
 800f31c:	4604      	mov	r4, r0
 800f31e:	6030      	str	r0, [r6, #0]
 800f320:	2800      	cmp	r0, #0
 800f322:	d1d5      	bne.n	800f2d0 <__sfp+0x24>
 800f324:	f7ff ff78 	bl	800f218 <__sfp_lock_release>
 800f328:	230c      	movs	r3, #12
 800f32a:	603b      	str	r3, [r7, #0]
 800f32c:	e7ee      	b.n	800f30c <__sfp+0x60>
 800f32e:	bf00      	nop
 800f330:	08010568 	.word	0x08010568
 800f334:	ffff0001 	.word	0xffff0001

0800f338 <_fwalk_reent>:
 800f338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f33c:	4606      	mov	r6, r0
 800f33e:	4688      	mov	r8, r1
 800f340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f344:	2700      	movs	r7, #0
 800f346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f34a:	f1b9 0901 	subs.w	r9, r9, #1
 800f34e:	d505      	bpl.n	800f35c <_fwalk_reent+0x24>
 800f350:	6824      	ldr	r4, [r4, #0]
 800f352:	2c00      	cmp	r4, #0
 800f354:	d1f7      	bne.n	800f346 <_fwalk_reent+0xe>
 800f356:	4638      	mov	r0, r7
 800f358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f35c:	89ab      	ldrh	r3, [r5, #12]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d907      	bls.n	800f372 <_fwalk_reent+0x3a>
 800f362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f366:	3301      	adds	r3, #1
 800f368:	d003      	beq.n	800f372 <_fwalk_reent+0x3a>
 800f36a:	4629      	mov	r1, r5
 800f36c:	4630      	mov	r0, r6
 800f36e:	47c0      	blx	r8
 800f370:	4307      	orrs	r7, r0
 800f372:	3568      	adds	r5, #104	; 0x68
 800f374:	e7e9      	b.n	800f34a <_fwalk_reent+0x12>

0800f376 <__retarget_lock_init_recursive>:
 800f376:	4770      	bx	lr

0800f378 <__retarget_lock_acquire_recursive>:
 800f378:	4770      	bx	lr

0800f37a <__retarget_lock_release_recursive>:
 800f37a:	4770      	bx	lr

0800f37c <__swhatbuf_r>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	460e      	mov	r6, r1
 800f380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f384:	2900      	cmp	r1, #0
 800f386:	b096      	sub	sp, #88	; 0x58
 800f388:	4614      	mov	r4, r2
 800f38a:	461d      	mov	r5, r3
 800f38c:	da08      	bge.n	800f3a0 <__swhatbuf_r+0x24>
 800f38e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f392:	2200      	movs	r2, #0
 800f394:	602a      	str	r2, [r5, #0]
 800f396:	061a      	lsls	r2, r3, #24
 800f398:	d410      	bmi.n	800f3bc <__swhatbuf_r+0x40>
 800f39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f39e:	e00e      	b.n	800f3be <__swhatbuf_r+0x42>
 800f3a0:	466a      	mov	r2, sp
 800f3a2:	f000 fd5d 	bl	800fe60 <_fstat_r>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	dbf1      	blt.n	800f38e <__swhatbuf_r+0x12>
 800f3aa:	9a01      	ldr	r2, [sp, #4]
 800f3ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f3b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f3b4:	425a      	negs	r2, r3
 800f3b6:	415a      	adcs	r2, r3
 800f3b8:	602a      	str	r2, [r5, #0]
 800f3ba:	e7ee      	b.n	800f39a <__swhatbuf_r+0x1e>
 800f3bc:	2340      	movs	r3, #64	; 0x40
 800f3be:	2000      	movs	r0, #0
 800f3c0:	6023      	str	r3, [r4, #0]
 800f3c2:	b016      	add	sp, #88	; 0x58
 800f3c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f3c8 <__smakebuf_r>:
 800f3c8:	898b      	ldrh	r3, [r1, #12]
 800f3ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3cc:	079d      	lsls	r5, r3, #30
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	460c      	mov	r4, r1
 800f3d2:	d507      	bpl.n	800f3e4 <__smakebuf_r+0x1c>
 800f3d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	6123      	str	r3, [r4, #16]
 800f3dc:	2301      	movs	r3, #1
 800f3de:	6163      	str	r3, [r4, #20]
 800f3e0:	b002      	add	sp, #8
 800f3e2:	bd70      	pop	{r4, r5, r6, pc}
 800f3e4:	ab01      	add	r3, sp, #4
 800f3e6:	466a      	mov	r2, sp
 800f3e8:	f7ff ffc8 	bl	800f37c <__swhatbuf_r>
 800f3ec:	9900      	ldr	r1, [sp, #0]
 800f3ee:	4605      	mov	r5, r0
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f000 f89d 	bl	800f530 <_malloc_r>
 800f3f6:	b948      	cbnz	r0, 800f40c <__smakebuf_r+0x44>
 800f3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3fc:	059a      	lsls	r2, r3, #22
 800f3fe:	d4ef      	bmi.n	800f3e0 <__smakebuf_r+0x18>
 800f400:	f023 0303 	bic.w	r3, r3, #3
 800f404:	f043 0302 	orr.w	r3, r3, #2
 800f408:	81a3      	strh	r3, [r4, #12]
 800f40a:	e7e3      	b.n	800f3d4 <__smakebuf_r+0xc>
 800f40c:	4b0d      	ldr	r3, [pc, #52]	; (800f444 <__smakebuf_r+0x7c>)
 800f40e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	6020      	str	r0, [r4, #0]
 800f414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f418:	81a3      	strh	r3, [r4, #12]
 800f41a:	9b00      	ldr	r3, [sp, #0]
 800f41c:	6163      	str	r3, [r4, #20]
 800f41e:	9b01      	ldr	r3, [sp, #4]
 800f420:	6120      	str	r0, [r4, #16]
 800f422:	b15b      	cbz	r3, 800f43c <__smakebuf_r+0x74>
 800f424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f428:	4630      	mov	r0, r6
 800f42a:	f000 fd2b 	bl	800fe84 <_isatty_r>
 800f42e:	b128      	cbz	r0, 800f43c <__smakebuf_r+0x74>
 800f430:	89a3      	ldrh	r3, [r4, #12]
 800f432:	f023 0303 	bic.w	r3, r3, #3
 800f436:	f043 0301 	orr.w	r3, r3, #1
 800f43a:	81a3      	strh	r3, [r4, #12]
 800f43c:	89a0      	ldrh	r0, [r4, #12]
 800f43e:	4305      	orrs	r5, r0
 800f440:	81a5      	strh	r5, [r4, #12]
 800f442:	e7cd      	b.n	800f3e0 <__smakebuf_r+0x18>
 800f444:	0800f1d5 	.word	0x0800f1d5

0800f448 <malloc>:
 800f448:	4b02      	ldr	r3, [pc, #8]	; (800f454 <malloc+0xc>)
 800f44a:	4601      	mov	r1, r0
 800f44c:	6818      	ldr	r0, [r3, #0]
 800f44e:	f000 b86f 	b.w	800f530 <_malloc_r>
 800f452:	bf00      	nop
 800f454:	24000054 	.word	0x24000054

0800f458 <_free_r>:
 800f458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f45a:	2900      	cmp	r1, #0
 800f45c:	d044      	beq.n	800f4e8 <_free_r+0x90>
 800f45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f462:	9001      	str	r0, [sp, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	f1a1 0404 	sub.w	r4, r1, #4
 800f46a:	bfb8      	it	lt
 800f46c:	18e4      	addlt	r4, r4, r3
 800f46e:	f000 fd2b 	bl	800fec8 <__malloc_lock>
 800f472:	4a1e      	ldr	r2, [pc, #120]	; (800f4ec <_free_r+0x94>)
 800f474:	9801      	ldr	r0, [sp, #4]
 800f476:	6813      	ldr	r3, [r2, #0]
 800f478:	b933      	cbnz	r3, 800f488 <_free_r+0x30>
 800f47a:	6063      	str	r3, [r4, #4]
 800f47c:	6014      	str	r4, [r2, #0]
 800f47e:	b003      	add	sp, #12
 800f480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f484:	f000 bd26 	b.w	800fed4 <__malloc_unlock>
 800f488:	42a3      	cmp	r3, r4
 800f48a:	d908      	bls.n	800f49e <_free_r+0x46>
 800f48c:	6825      	ldr	r5, [r4, #0]
 800f48e:	1961      	adds	r1, r4, r5
 800f490:	428b      	cmp	r3, r1
 800f492:	bf01      	itttt	eq
 800f494:	6819      	ldreq	r1, [r3, #0]
 800f496:	685b      	ldreq	r3, [r3, #4]
 800f498:	1949      	addeq	r1, r1, r5
 800f49a:	6021      	streq	r1, [r4, #0]
 800f49c:	e7ed      	b.n	800f47a <_free_r+0x22>
 800f49e:	461a      	mov	r2, r3
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	b10b      	cbz	r3, 800f4a8 <_free_r+0x50>
 800f4a4:	42a3      	cmp	r3, r4
 800f4a6:	d9fa      	bls.n	800f49e <_free_r+0x46>
 800f4a8:	6811      	ldr	r1, [r2, #0]
 800f4aa:	1855      	adds	r5, r2, r1
 800f4ac:	42a5      	cmp	r5, r4
 800f4ae:	d10b      	bne.n	800f4c8 <_free_r+0x70>
 800f4b0:	6824      	ldr	r4, [r4, #0]
 800f4b2:	4421      	add	r1, r4
 800f4b4:	1854      	adds	r4, r2, r1
 800f4b6:	42a3      	cmp	r3, r4
 800f4b8:	6011      	str	r1, [r2, #0]
 800f4ba:	d1e0      	bne.n	800f47e <_free_r+0x26>
 800f4bc:	681c      	ldr	r4, [r3, #0]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	6053      	str	r3, [r2, #4]
 800f4c2:	4421      	add	r1, r4
 800f4c4:	6011      	str	r1, [r2, #0]
 800f4c6:	e7da      	b.n	800f47e <_free_r+0x26>
 800f4c8:	d902      	bls.n	800f4d0 <_free_r+0x78>
 800f4ca:	230c      	movs	r3, #12
 800f4cc:	6003      	str	r3, [r0, #0]
 800f4ce:	e7d6      	b.n	800f47e <_free_r+0x26>
 800f4d0:	6825      	ldr	r5, [r4, #0]
 800f4d2:	1961      	adds	r1, r4, r5
 800f4d4:	428b      	cmp	r3, r1
 800f4d6:	bf04      	itt	eq
 800f4d8:	6819      	ldreq	r1, [r3, #0]
 800f4da:	685b      	ldreq	r3, [r3, #4]
 800f4dc:	6063      	str	r3, [r4, #4]
 800f4de:	bf04      	itt	eq
 800f4e0:	1949      	addeq	r1, r1, r5
 800f4e2:	6021      	streq	r1, [r4, #0]
 800f4e4:	6054      	str	r4, [r2, #4]
 800f4e6:	e7ca      	b.n	800f47e <_free_r+0x26>
 800f4e8:	b003      	add	sp, #12
 800f4ea:	bd30      	pop	{r4, r5, pc}
 800f4ec:	2406083c 	.word	0x2406083c

0800f4f0 <sbrk_aligned>:
 800f4f0:	b570      	push	{r4, r5, r6, lr}
 800f4f2:	4e0e      	ldr	r6, [pc, #56]	; (800f52c <sbrk_aligned+0x3c>)
 800f4f4:	460c      	mov	r4, r1
 800f4f6:	6831      	ldr	r1, [r6, #0]
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	b911      	cbnz	r1, 800f502 <sbrk_aligned+0x12>
 800f4fc:	f000 fb7a 	bl	800fbf4 <_sbrk_r>
 800f500:	6030      	str	r0, [r6, #0]
 800f502:	4621      	mov	r1, r4
 800f504:	4628      	mov	r0, r5
 800f506:	f000 fb75 	bl	800fbf4 <_sbrk_r>
 800f50a:	1c43      	adds	r3, r0, #1
 800f50c:	d00a      	beq.n	800f524 <sbrk_aligned+0x34>
 800f50e:	1cc4      	adds	r4, r0, #3
 800f510:	f024 0403 	bic.w	r4, r4, #3
 800f514:	42a0      	cmp	r0, r4
 800f516:	d007      	beq.n	800f528 <sbrk_aligned+0x38>
 800f518:	1a21      	subs	r1, r4, r0
 800f51a:	4628      	mov	r0, r5
 800f51c:	f000 fb6a 	bl	800fbf4 <_sbrk_r>
 800f520:	3001      	adds	r0, #1
 800f522:	d101      	bne.n	800f528 <sbrk_aligned+0x38>
 800f524:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f528:	4620      	mov	r0, r4
 800f52a:	bd70      	pop	{r4, r5, r6, pc}
 800f52c:	24060840 	.word	0x24060840

0800f530 <_malloc_r>:
 800f530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f534:	1ccd      	adds	r5, r1, #3
 800f536:	f025 0503 	bic.w	r5, r5, #3
 800f53a:	3508      	adds	r5, #8
 800f53c:	2d0c      	cmp	r5, #12
 800f53e:	bf38      	it	cc
 800f540:	250c      	movcc	r5, #12
 800f542:	2d00      	cmp	r5, #0
 800f544:	4607      	mov	r7, r0
 800f546:	db01      	blt.n	800f54c <_malloc_r+0x1c>
 800f548:	42a9      	cmp	r1, r5
 800f54a:	d905      	bls.n	800f558 <_malloc_r+0x28>
 800f54c:	230c      	movs	r3, #12
 800f54e:	603b      	str	r3, [r7, #0]
 800f550:	2600      	movs	r6, #0
 800f552:	4630      	mov	r0, r6
 800f554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f558:	4e2e      	ldr	r6, [pc, #184]	; (800f614 <_malloc_r+0xe4>)
 800f55a:	f000 fcb5 	bl	800fec8 <__malloc_lock>
 800f55e:	6833      	ldr	r3, [r6, #0]
 800f560:	461c      	mov	r4, r3
 800f562:	bb34      	cbnz	r4, 800f5b2 <_malloc_r+0x82>
 800f564:	4629      	mov	r1, r5
 800f566:	4638      	mov	r0, r7
 800f568:	f7ff ffc2 	bl	800f4f0 <sbrk_aligned>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	4604      	mov	r4, r0
 800f570:	d14d      	bne.n	800f60e <_malloc_r+0xde>
 800f572:	6834      	ldr	r4, [r6, #0]
 800f574:	4626      	mov	r6, r4
 800f576:	2e00      	cmp	r6, #0
 800f578:	d140      	bne.n	800f5fc <_malloc_r+0xcc>
 800f57a:	6823      	ldr	r3, [r4, #0]
 800f57c:	4631      	mov	r1, r6
 800f57e:	4638      	mov	r0, r7
 800f580:	eb04 0803 	add.w	r8, r4, r3
 800f584:	f000 fb36 	bl	800fbf4 <_sbrk_r>
 800f588:	4580      	cmp	r8, r0
 800f58a:	d13a      	bne.n	800f602 <_malloc_r+0xd2>
 800f58c:	6821      	ldr	r1, [r4, #0]
 800f58e:	3503      	adds	r5, #3
 800f590:	1a6d      	subs	r5, r5, r1
 800f592:	f025 0503 	bic.w	r5, r5, #3
 800f596:	3508      	adds	r5, #8
 800f598:	2d0c      	cmp	r5, #12
 800f59a:	bf38      	it	cc
 800f59c:	250c      	movcc	r5, #12
 800f59e:	4629      	mov	r1, r5
 800f5a0:	4638      	mov	r0, r7
 800f5a2:	f7ff ffa5 	bl	800f4f0 <sbrk_aligned>
 800f5a6:	3001      	adds	r0, #1
 800f5a8:	d02b      	beq.n	800f602 <_malloc_r+0xd2>
 800f5aa:	6823      	ldr	r3, [r4, #0]
 800f5ac:	442b      	add	r3, r5
 800f5ae:	6023      	str	r3, [r4, #0]
 800f5b0:	e00e      	b.n	800f5d0 <_malloc_r+0xa0>
 800f5b2:	6822      	ldr	r2, [r4, #0]
 800f5b4:	1b52      	subs	r2, r2, r5
 800f5b6:	d41e      	bmi.n	800f5f6 <_malloc_r+0xc6>
 800f5b8:	2a0b      	cmp	r2, #11
 800f5ba:	d916      	bls.n	800f5ea <_malloc_r+0xba>
 800f5bc:	1961      	adds	r1, r4, r5
 800f5be:	42a3      	cmp	r3, r4
 800f5c0:	6025      	str	r5, [r4, #0]
 800f5c2:	bf18      	it	ne
 800f5c4:	6059      	strne	r1, [r3, #4]
 800f5c6:	6863      	ldr	r3, [r4, #4]
 800f5c8:	bf08      	it	eq
 800f5ca:	6031      	streq	r1, [r6, #0]
 800f5cc:	5162      	str	r2, [r4, r5]
 800f5ce:	604b      	str	r3, [r1, #4]
 800f5d0:	4638      	mov	r0, r7
 800f5d2:	f104 060b 	add.w	r6, r4, #11
 800f5d6:	f000 fc7d 	bl	800fed4 <__malloc_unlock>
 800f5da:	f026 0607 	bic.w	r6, r6, #7
 800f5de:	1d23      	adds	r3, r4, #4
 800f5e0:	1af2      	subs	r2, r6, r3
 800f5e2:	d0b6      	beq.n	800f552 <_malloc_r+0x22>
 800f5e4:	1b9b      	subs	r3, r3, r6
 800f5e6:	50a3      	str	r3, [r4, r2]
 800f5e8:	e7b3      	b.n	800f552 <_malloc_r+0x22>
 800f5ea:	6862      	ldr	r2, [r4, #4]
 800f5ec:	42a3      	cmp	r3, r4
 800f5ee:	bf0c      	ite	eq
 800f5f0:	6032      	streq	r2, [r6, #0]
 800f5f2:	605a      	strne	r2, [r3, #4]
 800f5f4:	e7ec      	b.n	800f5d0 <_malloc_r+0xa0>
 800f5f6:	4623      	mov	r3, r4
 800f5f8:	6864      	ldr	r4, [r4, #4]
 800f5fa:	e7b2      	b.n	800f562 <_malloc_r+0x32>
 800f5fc:	4634      	mov	r4, r6
 800f5fe:	6876      	ldr	r6, [r6, #4]
 800f600:	e7b9      	b.n	800f576 <_malloc_r+0x46>
 800f602:	230c      	movs	r3, #12
 800f604:	603b      	str	r3, [r7, #0]
 800f606:	4638      	mov	r0, r7
 800f608:	f000 fc64 	bl	800fed4 <__malloc_unlock>
 800f60c:	e7a1      	b.n	800f552 <_malloc_r+0x22>
 800f60e:	6025      	str	r5, [r4, #0]
 800f610:	e7de      	b.n	800f5d0 <_malloc_r+0xa0>
 800f612:	bf00      	nop
 800f614:	2406083c 	.word	0x2406083c

0800f618 <__sfputc_r>:
 800f618:	6893      	ldr	r3, [r2, #8]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	b410      	push	{r4}
 800f620:	6093      	str	r3, [r2, #8]
 800f622:	da08      	bge.n	800f636 <__sfputc_r+0x1e>
 800f624:	6994      	ldr	r4, [r2, #24]
 800f626:	42a3      	cmp	r3, r4
 800f628:	db01      	blt.n	800f62e <__sfputc_r+0x16>
 800f62a:	290a      	cmp	r1, #10
 800f62c:	d103      	bne.n	800f636 <__sfputc_r+0x1e>
 800f62e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f632:	f000 bb33 	b.w	800fc9c <__swbuf_r>
 800f636:	6813      	ldr	r3, [r2, #0]
 800f638:	1c58      	adds	r0, r3, #1
 800f63a:	6010      	str	r0, [r2, #0]
 800f63c:	7019      	strb	r1, [r3, #0]
 800f63e:	4608      	mov	r0, r1
 800f640:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f644:	4770      	bx	lr

0800f646 <__sfputs_r>:
 800f646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f648:	4606      	mov	r6, r0
 800f64a:	460f      	mov	r7, r1
 800f64c:	4614      	mov	r4, r2
 800f64e:	18d5      	adds	r5, r2, r3
 800f650:	42ac      	cmp	r4, r5
 800f652:	d101      	bne.n	800f658 <__sfputs_r+0x12>
 800f654:	2000      	movs	r0, #0
 800f656:	e007      	b.n	800f668 <__sfputs_r+0x22>
 800f658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65c:	463a      	mov	r2, r7
 800f65e:	4630      	mov	r0, r6
 800f660:	f7ff ffda 	bl	800f618 <__sfputc_r>
 800f664:	1c43      	adds	r3, r0, #1
 800f666:	d1f3      	bne.n	800f650 <__sfputs_r+0xa>
 800f668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f66c <_vfiprintf_r>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	460d      	mov	r5, r1
 800f672:	b09d      	sub	sp, #116	; 0x74
 800f674:	4614      	mov	r4, r2
 800f676:	4698      	mov	r8, r3
 800f678:	4606      	mov	r6, r0
 800f67a:	b118      	cbz	r0, 800f684 <_vfiprintf_r+0x18>
 800f67c:	6983      	ldr	r3, [r0, #24]
 800f67e:	b90b      	cbnz	r3, 800f684 <_vfiprintf_r+0x18>
 800f680:	f7ff fddc 	bl	800f23c <__sinit>
 800f684:	4b89      	ldr	r3, [pc, #548]	; (800f8ac <_vfiprintf_r+0x240>)
 800f686:	429d      	cmp	r5, r3
 800f688:	d11b      	bne.n	800f6c2 <_vfiprintf_r+0x56>
 800f68a:	6875      	ldr	r5, [r6, #4]
 800f68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f68e:	07d9      	lsls	r1, r3, #31
 800f690:	d405      	bmi.n	800f69e <_vfiprintf_r+0x32>
 800f692:	89ab      	ldrh	r3, [r5, #12]
 800f694:	059a      	lsls	r2, r3, #22
 800f696:	d402      	bmi.n	800f69e <_vfiprintf_r+0x32>
 800f698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f69a:	f7ff fe6d 	bl	800f378 <__retarget_lock_acquire_recursive>
 800f69e:	89ab      	ldrh	r3, [r5, #12]
 800f6a0:	071b      	lsls	r3, r3, #28
 800f6a2:	d501      	bpl.n	800f6a8 <_vfiprintf_r+0x3c>
 800f6a4:	692b      	ldr	r3, [r5, #16]
 800f6a6:	b9eb      	cbnz	r3, 800f6e4 <_vfiprintf_r+0x78>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	f000 fb5a 	bl	800fd64 <__swsetup_r>
 800f6b0:	b1c0      	cbz	r0, 800f6e4 <_vfiprintf_r+0x78>
 800f6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6b4:	07dc      	lsls	r4, r3, #31
 800f6b6:	d50e      	bpl.n	800f6d6 <_vfiprintf_r+0x6a>
 800f6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6bc:	b01d      	add	sp, #116	; 0x74
 800f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c2:	4b7b      	ldr	r3, [pc, #492]	; (800f8b0 <_vfiprintf_r+0x244>)
 800f6c4:	429d      	cmp	r5, r3
 800f6c6:	d101      	bne.n	800f6cc <_vfiprintf_r+0x60>
 800f6c8:	68b5      	ldr	r5, [r6, #8]
 800f6ca:	e7df      	b.n	800f68c <_vfiprintf_r+0x20>
 800f6cc:	4b79      	ldr	r3, [pc, #484]	; (800f8b4 <_vfiprintf_r+0x248>)
 800f6ce:	429d      	cmp	r5, r3
 800f6d0:	bf08      	it	eq
 800f6d2:	68f5      	ldreq	r5, [r6, #12]
 800f6d4:	e7da      	b.n	800f68c <_vfiprintf_r+0x20>
 800f6d6:	89ab      	ldrh	r3, [r5, #12]
 800f6d8:	0598      	lsls	r0, r3, #22
 800f6da:	d4ed      	bmi.n	800f6b8 <_vfiprintf_r+0x4c>
 800f6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6de:	f7ff fe4c 	bl	800f37a <__retarget_lock_release_recursive>
 800f6e2:	e7e9      	b.n	800f6b8 <_vfiprintf_r+0x4c>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6e8:	2320      	movs	r3, #32
 800f6ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6f2:	2330      	movs	r3, #48	; 0x30
 800f6f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f8b8 <_vfiprintf_r+0x24c>
 800f6f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6fc:	f04f 0901 	mov.w	r9, #1
 800f700:	4623      	mov	r3, r4
 800f702:	469a      	mov	sl, r3
 800f704:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f708:	b10a      	cbz	r2, 800f70e <_vfiprintf_r+0xa2>
 800f70a:	2a25      	cmp	r2, #37	; 0x25
 800f70c:	d1f9      	bne.n	800f702 <_vfiprintf_r+0x96>
 800f70e:	ebba 0b04 	subs.w	fp, sl, r4
 800f712:	d00b      	beq.n	800f72c <_vfiprintf_r+0xc0>
 800f714:	465b      	mov	r3, fp
 800f716:	4622      	mov	r2, r4
 800f718:	4629      	mov	r1, r5
 800f71a:	4630      	mov	r0, r6
 800f71c:	f7ff ff93 	bl	800f646 <__sfputs_r>
 800f720:	3001      	adds	r0, #1
 800f722:	f000 80aa 	beq.w	800f87a <_vfiprintf_r+0x20e>
 800f726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f728:	445a      	add	r2, fp
 800f72a:	9209      	str	r2, [sp, #36]	; 0x24
 800f72c:	f89a 3000 	ldrb.w	r3, [sl]
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 80a2 	beq.w	800f87a <_vfiprintf_r+0x20e>
 800f736:	2300      	movs	r3, #0
 800f738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f73c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f740:	f10a 0a01 	add.w	sl, sl, #1
 800f744:	9304      	str	r3, [sp, #16]
 800f746:	9307      	str	r3, [sp, #28]
 800f748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f74c:	931a      	str	r3, [sp, #104]	; 0x68
 800f74e:	4654      	mov	r4, sl
 800f750:	2205      	movs	r2, #5
 800f752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f756:	4858      	ldr	r0, [pc, #352]	; (800f8b8 <_vfiprintf_r+0x24c>)
 800f758:	f7f0 fdca 	bl	80002f0 <memchr>
 800f75c:	9a04      	ldr	r2, [sp, #16]
 800f75e:	b9d8      	cbnz	r0, 800f798 <_vfiprintf_r+0x12c>
 800f760:	06d1      	lsls	r1, r2, #27
 800f762:	bf44      	itt	mi
 800f764:	2320      	movmi	r3, #32
 800f766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f76a:	0713      	lsls	r3, r2, #28
 800f76c:	bf44      	itt	mi
 800f76e:	232b      	movmi	r3, #43	; 0x2b
 800f770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f774:	f89a 3000 	ldrb.w	r3, [sl]
 800f778:	2b2a      	cmp	r3, #42	; 0x2a
 800f77a:	d015      	beq.n	800f7a8 <_vfiprintf_r+0x13c>
 800f77c:	9a07      	ldr	r2, [sp, #28]
 800f77e:	4654      	mov	r4, sl
 800f780:	2000      	movs	r0, #0
 800f782:	f04f 0c0a 	mov.w	ip, #10
 800f786:	4621      	mov	r1, r4
 800f788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f78c:	3b30      	subs	r3, #48	; 0x30
 800f78e:	2b09      	cmp	r3, #9
 800f790:	d94e      	bls.n	800f830 <_vfiprintf_r+0x1c4>
 800f792:	b1b0      	cbz	r0, 800f7c2 <_vfiprintf_r+0x156>
 800f794:	9207      	str	r2, [sp, #28]
 800f796:	e014      	b.n	800f7c2 <_vfiprintf_r+0x156>
 800f798:	eba0 0308 	sub.w	r3, r0, r8
 800f79c:	fa09 f303 	lsl.w	r3, r9, r3
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	46a2      	mov	sl, r4
 800f7a6:	e7d2      	b.n	800f74e <_vfiprintf_r+0xe2>
 800f7a8:	9b03      	ldr	r3, [sp, #12]
 800f7aa:	1d19      	adds	r1, r3, #4
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	9103      	str	r1, [sp, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	bfbb      	ittet	lt
 800f7b4:	425b      	neglt	r3, r3
 800f7b6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7ba:	9307      	strge	r3, [sp, #28]
 800f7bc:	9307      	strlt	r3, [sp, #28]
 800f7be:	bfb8      	it	lt
 800f7c0:	9204      	strlt	r2, [sp, #16]
 800f7c2:	7823      	ldrb	r3, [r4, #0]
 800f7c4:	2b2e      	cmp	r3, #46	; 0x2e
 800f7c6:	d10c      	bne.n	800f7e2 <_vfiprintf_r+0x176>
 800f7c8:	7863      	ldrb	r3, [r4, #1]
 800f7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800f7cc:	d135      	bne.n	800f83a <_vfiprintf_r+0x1ce>
 800f7ce:	9b03      	ldr	r3, [sp, #12]
 800f7d0:	1d1a      	adds	r2, r3, #4
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	9203      	str	r2, [sp, #12]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	bfb8      	it	lt
 800f7da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f7de:	3402      	adds	r4, #2
 800f7e0:	9305      	str	r3, [sp, #20]
 800f7e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f8c8 <_vfiprintf_r+0x25c>
 800f7e6:	7821      	ldrb	r1, [r4, #0]
 800f7e8:	2203      	movs	r2, #3
 800f7ea:	4650      	mov	r0, sl
 800f7ec:	f7f0 fd80 	bl	80002f0 <memchr>
 800f7f0:	b140      	cbz	r0, 800f804 <_vfiprintf_r+0x198>
 800f7f2:	2340      	movs	r3, #64	; 0x40
 800f7f4:	eba0 000a 	sub.w	r0, r0, sl
 800f7f8:	fa03 f000 	lsl.w	r0, r3, r0
 800f7fc:	9b04      	ldr	r3, [sp, #16]
 800f7fe:	4303      	orrs	r3, r0
 800f800:	3401      	adds	r4, #1
 800f802:	9304      	str	r3, [sp, #16]
 800f804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f808:	482c      	ldr	r0, [pc, #176]	; (800f8bc <_vfiprintf_r+0x250>)
 800f80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f80e:	2206      	movs	r2, #6
 800f810:	f7f0 fd6e 	bl	80002f0 <memchr>
 800f814:	2800      	cmp	r0, #0
 800f816:	d03f      	beq.n	800f898 <_vfiprintf_r+0x22c>
 800f818:	4b29      	ldr	r3, [pc, #164]	; (800f8c0 <_vfiprintf_r+0x254>)
 800f81a:	bb1b      	cbnz	r3, 800f864 <_vfiprintf_r+0x1f8>
 800f81c:	9b03      	ldr	r3, [sp, #12]
 800f81e:	3307      	adds	r3, #7
 800f820:	f023 0307 	bic.w	r3, r3, #7
 800f824:	3308      	adds	r3, #8
 800f826:	9303      	str	r3, [sp, #12]
 800f828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f82a:	443b      	add	r3, r7
 800f82c:	9309      	str	r3, [sp, #36]	; 0x24
 800f82e:	e767      	b.n	800f700 <_vfiprintf_r+0x94>
 800f830:	fb0c 3202 	mla	r2, ip, r2, r3
 800f834:	460c      	mov	r4, r1
 800f836:	2001      	movs	r0, #1
 800f838:	e7a5      	b.n	800f786 <_vfiprintf_r+0x11a>
 800f83a:	2300      	movs	r3, #0
 800f83c:	3401      	adds	r4, #1
 800f83e:	9305      	str	r3, [sp, #20]
 800f840:	4619      	mov	r1, r3
 800f842:	f04f 0c0a 	mov.w	ip, #10
 800f846:	4620      	mov	r0, r4
 800f848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f84c:	3a30      	subs	r2, #48	; 0x30
 800f84e:	2a09      	cmp	r2, #9
 800f850:	d903      	bls.n	800f85a <_vfiprintf_r+0x1ee>
 800f852:	2b00      	cmp	r3, #0
 800f854:	d0c5      	beq.n	800f7e2 <_vfiprintf_r+0x176>
 800f856:	9105      	str	r1, [sp, #20]
 800f858:	e7c3      	b.n	800f7e2 <_vfiprintf_r+0x176>
 800f85a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f85e:	4604      	mov	r4, r0
 800f860:	2301      	movs	r3, #1
 800f862:	e7f0      	b.n	800f846 <_vfiprintf_r+0x1da>
 800f864:	ab03      	add	r3, sp, #12
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	462a      	mov	r2, r5
 800f86a:	4b16      	ldr	r3, [pc, #88]	; (800f8c4 <_vfiprintf_r+0x258>)
 800f86c:	a904      	add	r1, sp, #16
 800f86e:	4630      	mov	r0, r6
 800f870:	f3af 8000 	nop.w
 800f874:	4607      	mov	r7, r0
 800f876:	1c78      	adds	r0, r7, #1
 800f878:	d1d6      	bne.n	800f828 <_vfiprintf_r+0x1bc>
 800f87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f87c:	07d9      	lsls	r1, r3, #31
 800f87e:	d405      	bmi.n	800f88c <_vfiprintf_r+0x220>
 800f880:	89ab      	ldrh	r3, [r5, #12]
 800f882:	059a      	lsls	r2, r3, #22
 800f884:	d402      	bmi.n	800f88c <_vfiprintf_r+0x220>
 800f886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f888:	f7ff fd77 	bl	800f37a <__retarget_lock_release_recursive>
 800f88c:	89ab      	ldrh	r3, [r5, #12]
 800f88e:	065b      	lsls	r3, r3, #25
 800f890:	f53f af12 	bmi.w	800f6b8 <_vfiprintf_r+0x4c>
 800f894:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f896:	e711      	b.n	800f6bc <_vfiprintf_r+0x50>
 800f898:	ab03      	add	r3, sp, #12
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	462a      	mov	r2, r5
 800f89e:	4b09      	ldr	r3, [pc, #36]	; (800f8c4 <_vfiprintf_r+0x258>)
 800f8a0:	a904      	add	r1, sp, #16
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f000 f880 	bl	800f9a8 <_printf_i>
 800f8a8:	e7e4      	b.n	800f874 <_vfiprintf_r+0x208>
 800f8aa:	bf00      	nop
 800f8ac:	0801058c 	.word	0x0801058c
 800f8b0:	080105ac 	.word	0x080105ac
 800f8b4:	0801056c 	.word	0x0801056c
 800f8b8:	080105cc 	.word	0x080105cc
 800f8bc:	080105d6 	.word	0x080105d6
 800f8c0:	00000000 	.word	0x00000000
 800f8c4:	0800f647 	.word	0x0800f647
 800f8c8:	080105d2 	.word	0x080105d2

0800f8cc <_printf_common>:
 800f8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8d0:	4616      	mov	r6, r2
 800f8d2:	4699      	mov	r9, r3
 800f8d4:	688a      	ldr	r2, [r1, #8]
 800f8d6:	690b      	ldr	r3, [r1, #16]
 800f8d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	bfb8      	it	lt
 800f8e0:	4613      	movlt	r3, r2
 800f8e2:	6033      	str	r3, [r6, #0]
 800f8e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8e8:	4607      	mov	r7, r0
 800f8ea:	460c      	mov	r4, r1
 800f8ec:	b10a      	cbz	r2, 800f8f2 <_printf_common+0x26>
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	6033      	str	r3, [r6, #0]
 800f8f2:	6823      	ldr	r3, [r4, #0]
 800f8f4:	0699      	lsls	r1, r3, #26
 800f8f6:	bf42      	ittt	mi
 800f8f8:	6833      	ldrmi	r3, [r6, #0]
 800f8fa:	3302      	addmi	r3, #2
 800f8fc:	6033      	strmi	r3, [r6, #0]
 800f8fe:	6825      	ldr	r5, [r4, #0]
 800f900:	f015 0506 	ands.w	r5, r5, #6
 800f904:	d106      	bne.n	800f914 <_printf_common+0x48>
 800f906:	f104 0a19 	add.w	sl, r4, #25
 800f90a:	68e3      	ldr	r3, [r4, #12]
 800f90c:	6832      	ldr	r2, [r6, #0]
 800f90e:	1a9b      	subs	r3, r3, r2
 800f910:	42ab      	cmp	r3, r5
 800f912:	dc26      	bgt.n	800f962 <_printf_common+0x96>
 800f914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f918:	1e13      	subs	r3, r2, #0
 800f91a:	6822      	ldr	r2, [r4, #0]
 800f91c:	bf18      	it	ne
 800f91e:	2301      	movne	r3, #1
 800f920:	0692      	lsls	r2, r2, #26
 800f922:	d42b      	bmi.n	800f97c <_printf_common+0xb0>
 800f924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f928:	4649      	mov	r1, r9
 800f92a:	4638      	mov	r0, r7
 800f92c:	47c0      	blx	r8
 800f92e:	3001      	adds	r0, #1
 800f930:	d01e      	beq.n	800f970 <_printf_common+0xa4>
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	68e5      	ldr	r5, [r4, #12]
 800f936:	6832      	ldr	r2, [r6, #0]
 800f938:	f003 0306 	and.w	r3, r3, #6
 800f93c:	2b04      	cmp	r3, #4
 800f93e:	bf08      	it	eq
 800f940:	1aad      	subeq	r5, r5, r2
 800f942:	68a3      	ldr	r3, [r4, #8]
 800f944:	6922      	ldr	r2, [r4, #16]
 800f946:	bf0c      	ite	eq
 800f948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f94c:	2500      	movne	r5, #0
 800f94e:	4293      	cmp	r3, r2
 800f950:	bfc4      	itt	gt
 800f952:	1a9b      	subgt	r3, r3, r2
 800f954:	18ed      	addgt	r5, r5, r3
 800f956:	2600      	movs	r6, #0
 800f958:	341a      	adds	r4, #26
 800f95a:	42b5      	cmp	r5, r6
 800f95c:	d11a      	bne.n	800f994 <_printf_common+0xc8>
 800f95e:	2000      	movs	r0, #0
 800f960:	e008      	b.n	800f974 <_printf_common+0xa8>
 800f962:	2301      	movs	r3, #1
 800f964:	4652      	mov	r2, sl
 800f966:	4649      	mov	r1, r9
 800f968:	4638      	mov	r0, r7
 800f96a:	47c0      	blx	r8
 800f96c:	3001      	adds	r0, #1
 800f96e:	d103      	bne.n	800f978 <_printf_common+0xac>
 800f970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f978:	3501      	adds	r5, #1
 800f97a:	e7c6      	b.n	800f90a <_printf_common+0x3e>
 800f97c:	18e1      	adds	r1, r4, r3
 800f97e:	1c5a      	adds	r2, r3, #1
 800f980:	2030      	movs	r0, #48	; 0x30
 800f982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f986:	4422      	add	r2, r4
 800f988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f98c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f990:	3302      	adds	r3, #2
 800f992:	e7c7      	b.n	800f924 <_printf_common+0x58>
 800f994:	2301      	movs	r3, #1
 800f996:	4622      	mov	r2, r4
 800f998:	4649      	mov	r1, r9
 800f99a:	4638      	mov	r0, r7
 800f99c:	47c0      	blx	r8
 800f99e:	3001      	adds	r0, #1
 800f9a0:	d0e6      	beq.n	800f970 <_printf_common+0xa4>
 800f9a2:	3601      	adds	r6, #1
 800f9a4:	e7d9      	b.n	800f95a <_printf_common+0x8e>
	...

0800f9a8 <_printf_i>:
 800f9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ac:	7e0f      	ldrb	r7, [r1, #24]
 800f9ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9b0:	2f78      	cmp	r7, #120	; 0x78
 800f9b2:	4691      	mov	r9, r2
 800f9b4:	4680      	mov	r8, r0
 800f9b6:	460c      	mov	r4, r1
 800f9b8:	469a      	mov	sl, r3
 800f9ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9be:	d807      	bhi.n	800f9d0 <_printf_i+0x28>
 800f9c0:	2f62      	cmp	r7, #98	; 0x62
 800f9c2:	d80a      	bhi.n	800f9da <_printf_i+0x32>
 800f9c4:	2f00      	cmp	r7, #0
 800f9c6:	f000 80d8 	beq.w	800fb7a <_printf_i+0x1d2>
 800f9ca:	2f58      	cmp	r7, #88	; 0x58
 800f9cc:	f000 80a3 	beq.w	800fb16 <_printf_i+0x16e>
 800f9d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9d8:	e03a      	b.n	800fa50 <_printf_i+0xa8>
 800f9da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9de:	2b15      	cmp	r3, #21
 800f9e0:	d8f6      	bhi.n	800f9d0 <_printf_i+0x28>
 800f9e2:	a101      	add	r1, pc, #4	; (adr r1, 800f9e8 <_printf_i+0x40>)
 800f9e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9e8:	0800fa41 	.word	0x0800fa41
 800f9ec:	0800fa55 	.word	0x0800fa55
 800f9f0:	0800f9d1 	.word	0x0800f9d1
 800f9f4:	0800f9d1 	.word	0x0800f9d1
 800f9f8:	0800f9d1 	.word	0x0800f9d1
 800f9fc:	0800f9d1 	.word	0x0800f9d1
 800fa00:	0800fa55 	.word	0x0800fa55
 800fa04:	0800f9d1 	.word	0x0800f9d1
 800fa08:	0800f9d1 	.word	0x0800f9d1
 800fa0c:	0800f9d1 	.word	0x0800f9d1
 800fa10:	0800f9d1 	.word	0x0800f9d1
 800fa14:	0800fb61 	.word	0x0800fb61
 800fa18:	0800fa85 	.word	0x0800fa85
 800fa1c:	0800fb43 	.word	0x0800fb43
 800fa20:	0800f9d1 	.word	0x0800f9d1
 800fa24:	0800f9d1 	.word	0x0800f9d1
 800fa28:	0800fb83 	.word	0x0800fb83
 800fa2c:	0800f9d1 	.word	0x0800f9d1
 800fa30:	0800fa85 	.word	0x0800fa85
 800fa34:	0800f9d1 	.word	0x0800f9d1
 800fa38:	0800f9d1 	.word	0x0800f9d1
 800fa3c:	0800fb4b 	.word	0x0800fb4b
 800fa40:	682b      	ldr	r3, [r5, #0]
 800fa42:	1d1a      	adds	r2, r3, #4
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	602a      	str	r2, [r5, #0]
 800fa48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa50:	2301      	movs	r3, #1
 800fa52:	e0a3      	b.n	800fb9c <_printf_i+0x1f4>
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	6829      	ldr	r1, [r5, #0]
 800fa58:	0606      	lsls	r6, r0, #24
 800fa5a:	f101 0304 	add.w	r3, r1, #4
 800fa5e:	d50a      	bpl.n	800fa76 <_printf_i+0xce>
 800fa60:	680e      	ldr	r6, [r1, #0]
 800fa62:	602b      	str	r3, [r5, #0]
 800fa64:	2e00      	cmp	r6, #0
 800fa66:	da03      	bge.n	800fa70 <_printf_i+0xc8>
 800fa68:	232d      	movs	r3, #45	; 0x2d
 800fa6a:	4276      	negs	r6, r6
 800fa6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa70:	485e      	ldr	r0, [pc, #376]	; (800fbec <_printf_i+0x244>)
 800fa72:	230a      	movs	r3, #10
 800fa74:	e019      	b.n	800faaa <_printf_i+0x102>
 800fa76:	680e      	ldr	r6, [r1, #0]
 800fa78:	602b      	str	r3, [r5, #0]
 800fa7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa7e:	bf18      	it	ne
 800fa80:	b236      	sxthne	r6, r6
 800fa82:	e7ef      	b.n	800fa64 <_printf_i+0xbc>
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	6820      	ldr	r0, [r4, #0]
 800fa88:	1d19      	adds	r1, r3, #4
 800fa8a:	6029      	str	r1, [r5, #0]
 800fa8c:	0601      	lsls	r1, r0, #24
 800fa8e:	d501      	bpl.n	800fa94 <_printf_i+0xec>
 800fa90:	681e      	ldr	r6, [r3, #0]
 800fa92:	e002      	b.n	800fa9a <_printf_i+0xf2>
 800fa94:	0646      	lsls	r6, r0, #25
 800fa96:	d5fb      	bpl.n	800fa90 <_printf_i+0xe8>
 800fa98:	881e      	ldrh	r6, [r3, #0]
 800fa9a:	4854      	ldr	r0, [pc, #336]	; (800fbec <_printf_i+0x244>)
 800fa9c:	2f6f      	cmp	r7, #111	; 0x6f
 800fa9e:	bf0c      	ite	eq
 800faa0:	2308      	moveq	r3, #8
 800faa2:	230a      	movne	r3, #10
 800faa4:	2100      	movs	r1, #0
 800faa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800faaa:	6865      	ldr	r5, [r4, #4]
 800faac:	60a5      	str	r5, [r4, #8]
 800faae:	2d00      	cmp	r5, #0
 800fab0:	bfa2      	ittt	ge
 800fab2:	6821      	ldrge	r1, [r4, #0]
 800fab4:	f021 0104 	bicge.w	r1, r1, #4
 800fab8:	6021      	strge	r1, [r4, #0]
 800faba:	b90e      	cbnz	r6, 800fac0 <_printf_i+0x118>
 800fabc:	2d00      	cmp	r5, #0
 800fabe:	d04d      	beq.n	800fb5c <_printf_i+0x1b4>
 800fac0:	4615      	mov	r5, r2
 800fac2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fac6:	fb03 6711 	mls	r7, r3, r1, r6
 800faca:	5dc7      	ldrb	r7, [r0, r7]
 800facc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fad0:	4637      	mov	r7, r6
 800fad2:	42bb      	cmp	r3, r7
 800fad4:	460e      	mov	r6, r1
 800fad6:	d9f4      	bls.n	800fac2 <_printf_i+0x11a>
 800fad8:	2b08      	cmp	r3, #8
 800fada:	d10b      	bne.n	800faf4 <_printf_i+0x14c>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	07de      	lsls	r6, r3, #31
 800fae0:	d508      	bpl.n	800faf4 <_printf_i+0x14c>
 800fae2:	6923      	ldr	r3, [r4, #16]
 800fae4:	6861      	ldr	r1, [r4, #4]
 800fae6:	4299      	cmp	r1, r3
 800fae8:	bfde      	ittt	le
 800faea:	2330      	movle	r3, #48	; 0x30
 800faec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800faf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800faf4:	1b52      	subs	r2, r2, r5
 800faf6:	6122      	str	r2, [r4, #16]
 800faf8:	f8cd a000 	str.w	sl, [sp]
 800fafc:	464b      	mov	r3, r9
 800fafe:	aa03      	add	r2, sp, #12
 800fb00:	4621      	mov	r1, r4
 800fb02:	4640      	mov	r0, r8
 800fb04:	f7ff fee2 	bl	800f8cc <_printf_common>
 800fb08:	3001      	adds	r0, #1
 800fb0a:	d14c      	bne.n	800fba6 <_printf_i+0x1fe>
 800fb0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb10:	b004      	add	sp, #16
 800fb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb16:	4835      	ldr	r0, [pc, #212]	; (800fbec <_printf_i+0x244>)
 800fb18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb1c:	6829      	ldr	r1, [r5, #0]
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb24:	6029      	str	r1, [r5, #0]
 800fb26:	061d      	lsls	r5, r3, #24
 800fb28:	d514      	bpl.n	800fb54 <_printf_i+0x1ac>
 800fb2a:	07df      	lsls	r7, r3, #31
 800fb2c:	bf44      	itt	mi
 800fb2e:	f043 0320 	orrmi.w	r3, r3, #32
 800fb32:	6023      	strmi	r3, [r4, #0]
 800fb34:	b91e      	cbnz	r6, 800fb3e <_printf_i+0x196>
 800fb36:	6823      	ldr	r3, [r4, #0]
 800fb38:	f023 0320 	bic.w	r3, r3, #32
 800fb3c:	6023      	str	r3, [r4, #0]
 800fb3e:	2310      	movs	r3, #16
 800fb40:	e7b0      	b.n	800faa4 <_printf_i+0xfc>
 800fb42:	6823      	ldr	r3, [r4, #0]
 800fb44:	f043 0320 	orr.w	r3, r3, #32
 800fb48:	6023      	str	r3, [r4, #0]
 800fb4a:	2378      	movs	r3, #120	; 0x78
 800fb4c:	4828      	ldr	r0, [pc, #160]	; (800fbf0 <_printf_i+0x248>)
 800fb4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb52:	e7e3      	b.n	800fb1c <_printf_i+0x174>
 800fb54:	0659      	lsls	r1, r3, #25
 800fb56:	bf48      	it	mi
 800fb58:	b2b6      	uxthmi	r6, r6
 800fb5a:	e7e6      	b.n	800fb2a <_printf_i+0x182>
 800fb5c:	4615      	mov	r5, r2
 800fb5e:	e7bb      	b.n	800fad8 <_printf_i+0x130>
 800fb60:	682b      	ldr	r3, [r5, #0]
 800fb62:	6826      	ldr	r6, [r4, #0]
 800fb64:	6961      	ldr	r1, [r4, #20]
 800fb66:	1d18      	adds	r0, r3, #4
 800fb68:	6028      	str	r0, [r5, #0]
 800fb6a:	0635      	lsls	r5, r6, #24
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	d501      	bpl.n	800fb74 <_printf_i+0x1cc>
 800fb70:	6019      	str	r1, [r3, #0]
 800fb72:	e002      	b.n	800fb7a <_printf_i+0x1d2>
 800fb74:	0670      	lsls	r0, r6, #25
 800fb76:	d5fb      	bpl.n	800fb70 <_printf_i+0x1c8>
 800fb78:	8019      	strh	r1, [r3, #0]
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	6123      	str	r3, [r4, #16]
 800fb7e:	4615      	mov	r5, r2
 800fb80:	e7ba      	b.n	800faf8 <_printf_i+0x150>
 800fb82:	682b      	ldr	r3, [r5, #0]
 800fb84:	1d1a      	adds	r2, r3, #4
 800fb86:	602a      	str	r2, [r5, #0]
 800fb88:	681d      	ldr	r5, [r3, #0]
 800fb8a:	6862      	ldr	r2, [r4, #4]
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f7f0 fbae 	bl	80002f0 <memchr>
 800fb94:	b108      	cbz	r0, 800fb9a <_printf_i+0x1f2>
 800fb96:	1b40      	subs	r0, r0, r5
 800fb98:	6060      	str	r0, [r4, #4]
 800fb9a:	6863      	ldr	r3, [r4, #4]
 800fb9c:	6123      	str	r3, [r4, #16]
 800fb9e:	2300      	movs	r3, #0
 800fba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fba4:	e7a8      	b.n	800faf8 <_printf_i+0x150>
 800fba6:	6923      	ldr	r3, [r4, #16]
 800fba8:	462a      	mov	r2, r5
 800fbaa:	4649      	mov	r1, r9
 800fbac:	4640      	mov	r0, r8
 800fbae:	47d0      	blx	sl
 800fbb0:	3001      	adds	r0, #1
 800fbb2:	d0ab      	beq.n	800fb0c <_printf_i+0x164>
 800fbb4:	6823      	ldr	r3, [r4, #0]
 800fbb6:	079b      	lsls	r3, r3, #30
 800fbb8:	d413      	bmi.n	800fbe2 <_printf_i+0x23a>
 800fbba:	68e0      	ldr	r0, [r4, #12]
 800fbbc:	9b03      	ldr	r3, [sp, #12]
 800fbbe:	4298      	cmp	r0, r3
 800fbc0:	bfb8      	it	lt
 800fbc2:	4618      	movlt	r0, r3
 800fbc4:	e7a4      	b.n	800fb10 <_printf_i+0x168>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	4632      	mov	r2, r6
 800fbca:	4649      	mov	r1, r9
 800fbcc:	4640      	mov	r0, r8
 800fbce:	47d0      	blx	sl
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	d09b      	beq.n	800fb0c <_printf_i+0x164>
 800fbd4:	3501      	adds	r5, #1
 800fbd6:	68e3      	ldr	r3, [r4, #12]
 800fbd8:	9903      	ldr	r1, [sp, #12]
 800fbda:	1a5b      	subs	r3, r3, r1
 800fbdc:	42ab      	cmp	r3, r5
 800fbde:	dcf2      	bgt.n	800fbc6 <_printf_i+0x21e>
 800fbe0:	e7eb      	b.n	800fbba <_printf_i+0x212>
 800fbe2:	2500      	movs	r5, #0
 800fbe4:	f104 0619 	add.w	r6, r4, #25
 800fbe8:	e7f5      	b.n	800fbd6 <_printf_i+0x22e>
 800fbea:	bf00      	nop
 800fbec:	080105dd 	.word	0x080105dd
 800fbf0:	080105ee 	.word	0x080105ee

0800fbf4 <_sbrk_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d06      	ldr	r5, [pc, #24]	; (800fc10 <_sbrk_r+0x1c>)
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	4608      	mov	r0, r1
 800fbfe:	602b      	str	r3, [r5, #0]
 800fc00:	f7f4 f95a 	bl	8003eb8 <_sbrk>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d102      	bne.n	800fc0e <_sbrk_r+0x1a>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	b103      	cbz	r3, 800fc0e <_sbrk_r+0x1a>
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	bd38      	pop	{r3, r4, r5, pc}
 800fc10:	24060844 	.word	0x24060844

0800fc14 <__sread>:
 800fc14:	b510      	push	{r4, lr}
 800fc16:	460c      	mov	r4, r1
 800fc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc1c:	f000 f960 	bl	800fee0 <_read_r>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	bfab      	itete	ge
 800fc24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc26:	89a3      	ldrhlt	r3, [r4, #12]
 800fc28:	181b      	addge	r3, r3, r0
 800fc2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc2e:	bfac      	ite	ge
 800fc30:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc32:	81a3      	strhlt	r3, [r4, #12]
 800fc34:	bd10      	pop	{r4, pc}

0800fc36 <__swrite>:
 800fc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc3a:	461f      	mov	r7, r3
 800fc3c:	898b      	ldrh	r3, [r1, #12]
 800fc3e:	05db      	lsls	r3, r3, #23
 800fc40:	4605      	mov	r5, r0
 800fc42:	460c      	mov	r4, r1
 800fc44:	4616      	mov	r6, r2
 800fc46:	d505      	bpl.n	800fc54 <__swrite+0x1e>
 800fc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc4c:	2302      	movs	r3, #2
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f000 f928 	bl	800fea4 <_lseek_r>
 800fc54:	89a3      	ldrh	r3, [r4, #12]
 800fc56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	4632      	mov	r2, r6
 800fc62:	463b      	mov	r3, r7
 800fc64:	4628      	mov	r0, r5
 800fc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6a:	f000 b869 	b.w	800fd40 <_write_r>

0800fc6e <__sseek>:
 800fc6e:	b510      	push	{r4, lr}
 800fc70:	460c      	mov	r4, r1
 800fc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc76:	f000 f915 	bl	800fea4 <_lseek_r>
 800fc7a:	1c43      	adds	r3, r0, #1
 800fc7c:	89a3      	ldrh	r3, [r4, #12]
 800fc7e:	bf15      	itete	ne
 800fc80:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc8a:	81a3      	strheq	r3, [r4, #12]
 800fc8c:	bf18      	it	ne
 800fc8e:	81a3      	strhne	r3, [r4, #12]
 800fc90:	bd10      	pop	{r4, pc}

0800fc92 <__sclose>:
 800fc92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc96:	f000 b8d3 	b.w	800fe40 <_close_r>
	...

0800fc9c <__swbuf_r>:
 800fc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc9e:	460e      	mov	r6, r1
 800fca0:	4614      	mov	r4, r2
 800fca2:	4605      	mov	r5, r0
 800fca4:	b118      	cbz	r0, 800fcae <__swbuf_r+0x12>
 800fca6:	6983      	ldr	r3, [r0, #24]
 800fca8:	b90b      	cbnz	r3, 800fcae <__swbuf_r+0x12>
 800fcaa:	f7ff fac7 	bl	800f23c <__sinit>
 800fcae:	4b21      	ldr	r3, [pc, #132]	; (800fd34 <__swbuf_r+0x98>)
 800fcb0:	429c      	cmp	r4, r3
 800fcb2:	d12b      	bne.n	800fd0c <__swbuf_r+0x70>
 800fcb4:	686c      	ldr	r4, [r5, #4]
 800fcb6:	69a3      	ldr	r3, [r4, #24]
 800fcb8:	60a3      	str	r3, [r4, #8]
 800fcba:	89a3      	ldrh	r3, [r4, #12]
 800fcbc:	071a      	lsls	r2, r3, #28
 800fcbe:	d52f      	bpl.n	800fd20 <__swbuf_r+0x84>
 800fcc0:	6923      	ldr	r3, [r4, #16]
 800fcc2:	b36b      	cbz	r3, 800fd20 <__swbuf_r+0x84>
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	6820      	ldr	r0, [r4, #0]
 800fcc8:	1ac0      	subs	r0, r0, r3
 800fcca:	6963      	ldr	r3, [r4, #20]
 800fccc:	b2f6      	uxtb	r6, r6
 800fcce:	4283      	cmp	r3, r0
 800fcd0:	4637      	mov	r7, r6
 800fcd2:	dc04      	bgt.n	800fcde <__swbuf_r+0x42>
 800fcd4:	4621      	mov	r1, r4
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f7ff fa1c 	bl	800f114 <_fflush_r>
 800fcdc:	bb30      	cbnz	r0, 800fd2c <__swbuf_r+0x90>
 800fcde:	68a3      	ldr	r3, [r4, #8]
 800fce0:	3b01      	subs	r3, #1
 800fce2:	60a3      	str	r3, [r4, #8]
 800fce4:	6823      	ldr	r3, [r4, #0]
 800fce6:	1c5a      	adds	r2, r3, #1
 800fce8:	6022      	str	r2, [r4, #0]
 800fcea:	701e      	strb	r6, [r3, #0]
 800fcec:	6963      	ldr	r3, [r4, #20]
 800fcee:	3001      	adds	r0, #1
 800fcf0:	4283      	cmp	r3, r0
 800fcf2:	d004      	beq.n	800fcfe <__swbuf_r+0x62>
 800fcf4:	89a3      	ldrh	r3, [r4, #12]
 800fcf6:	07db      	lsls	r3, r3, #31
 800fcf8:	d506      	bpl.n	800fd08 <__swbuf_r+0x6c>
 800fcfa:	2e0a      	cmp	r6, #10
 800fcfc:	d104      	bne.n	800fd08 <__swbuf_r+0x6c>
 800fcfe:	4621      	mov	r1, r4
 800fd00:	4628      	mov	r0, r5
 800fd02:	f7ff fa07 	bl	800f114 <_fflush_r>
 800fd06:	b988      	cbnz	r0, 800fd2c <__swbuf_r+0x90>
 800fd08:	4638      	mov	r0, r7
 800fd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <__swbuf_r+0x9c>)
 800fd0e:	429c      	cmp	r4, r3
 800fd10:	d101      	bne.n	800fd16 <__swbuf_r+0x7a>
 800fd12:	68ac      	ldr	r4, [r5, #8]
 800fd14:	e7cf      	b.n	800fcb6 <__swbuf_r+0x1a>
 800fd16:	4b09      	ldr	r3, [pc, #36]	; (800fd3c <__swbuf_r+0xa0>)
 800fd18:	429c      	cmp	r4, r3
 800fd1a:	bf08      	it	eq
 800fd1c:	68ec      	ldreq	r4, [r5, #12]
 800fd1e:	e7ca      	b.n	800fcb6 <__swbuf_r+0x1a>
 800fd20:	4621      	mov	r1, r4
 800fd22:	4628      	mov	r0, r5
 800fd24:	f000 f81e 	bl	800fd64 <__swsetup_r>
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d0cb      	beq.n	800fcc4 <__swbuf_r+0x28>
 800fd2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fd30:	e7ea      	b.n	800fd08 <__swbuf_r+0x6c>
 800fd32:	bf00      	nop
 800fd34:	0801058c 	.word	0x0801058c
 800fd38:	080105ac 	.word	0x080105ac
 800fd3c:	0801056c 	.word	0x0801056c

0800fd40 <_write_r>:
 800fd40:	b538      	push	{r3, r4, r5, lr}
 800fd42:	4d07      	ldr	r5, [pc, #28]	; (800fd60 <_write_r+0x20>)
 800fd44:	4604      	mov	r4, r0
 800fd46:	4608      	mov	r0, r1
 800fd48:	4611      	mov	r1, r2
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	602a      	str	r2, [r5, #0]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	f7f3 f856 	bl	8002e00 <_write>
 800fd54:	1c43      	adds	r3, r0, #1
 800fd56:	d102      	bne.n	800fd5e <_write_r+0x1e>
 800fd58:	682b      	ldr	r3, [r5, #0]
 800fd5a:	b103      	cbz	r3, 800fd5e <_write_r+0x1e>
 800fd5c:	6023      	str	r3, [r4, #0]
 800fd5e:	bd38      	pop	{r3, r4, r5, pc}
 800fd60:	24060844 	.word	0x24060844

0800fd64 <__swsetup_r>:
 800fd64:	4b32      	ldr	r3, [pc, #200]	; (800fe30 <__swsetup_r+0xcc>)
 800fd66:	b570      	push	{r4, r5, r6, lr}
 800fd68:	681d      	ldr	r5, [r3, #0]
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	b125      	cbz	r5, 800fd7a <__swsetup_r+0x16>
 800fd70:	69ab      	ldr	r3, [r5, #24]
 800fd72:	b913      	cbnz	r3, 800fd7a <__swsetup_r+0x16>
 800fd74:	4628      	mov	r0, r5
 800fd76:	f7ff fa61 	bl	800f23c <__sinit>
 800fd7a:	4b2e      	ldr	r3, [pc, #184]	; (800fe34 <__swsetup_r+0xd0>)
 800fd7c:	429c      	cmp	r4, r3
 800fd7e:	d10f      	bne.n	800fda0 <__swsetup_r+0x3c>
 800fd80:	686c      	ldr	r4, [r5, #4]
 800fd82:	89a3      	ldrh	r3, [r4, #12]
 800fd84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd88:	0719      	lsls	r1, r3, #28
 800fd8a:	d42c      	bmi.n	800fde6 <__swsetup_r+0x82>
 800fd8c:	06dd      	lsls	r5, r3, #27
 800fd8e:	d411      	bmi.n	800fdb4 <__swsetup_r+0x50>
 800fd90:	2309      	movs	r3, #9
 800fd92:	6033      	str	r3, [r6, #0]
 800fd94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd98:	81a3      	strh	r3, [r4, #12]
 800fd9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd9e:	e03e      	b.n	800fe1e <__swsetup_r+0xba>
 800fda0:	4b25      	ldr	r3, [pc, #148]	; (800fe38 <__swsetup_r+0xd4>)
 800fda2:	429c      	cmp	r4, r3
 800fda4:	d101      	bne.n	800fdaa <__swsetup_r+0x46>
 800fda6:	68ac      	ldr	r4, [r5, #8]
 800fda8:	e7eb      	b.n	800fd82 <__swsetup_r+0x1e>
 800fdaa:	4b24      	ldr	r3, [pc, #144]	; (800fe3c <__swsetup_r+0xd8>)
 800fdac:	429c      	cmp	r4, r3
 800fdae:	bf08      	it	eq
 800fdb0:	68ec      	ldreq	r4, [r5, #12]
 800fdb2:	e7e6      	b.n	800fd82 <__swsetup_r+0x1e>
 800fdb4:	0758      	lsls	r0, r3, #29
 800fdb6:	d512      	bpl.n	800fdde <__swsetup_r+0x7a>
 800fdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdba:	b141      	cbz	r1, 800fdce <__swsetup_r+0x6a>
 800fdbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdc0:	4299      	cmp	r1, r3
 800fdc2:	d002      	beq.n	800fdca <__swsetup_r+0x66>
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7ff fb47 	bl	800f458 <_free_r>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	6363      	str	r3, [r4, #52]	; 0x34
 800fdce:	89a3      	ldrh	r3, [r4, #12]
 800fdd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fdd4:	81a3      	strh	r3, [r4, #12]
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	6063      	str	r3, [r4, #4]
 800fdda:	6923      	ldr	r3, [r4, #16]
 800fddc:	6023      	str	r3, [r4, #0]
 800fdde:	89a3      	ldrh	r3, [r4, #12]
 800fde0:	f043 0308 	orr.w	r3, r3, #8
 800fde4:	81a3      	strh	r3, [r4, #12]
 800fde6:	6923      	ldr	r3, [r4, #16]
 800fde8:	b94b      	cbnz	r3, 800fdfe <__swsetup_r+0x9a>
 800fdea:	89a3      	ldrh	r3, [r4, #12]
 800fdec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fdf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdf4:	d003      	beq.n	800fdfe <__swsetup_r+0x9a>
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7ff fae5 	bl	800f3c8 <__smakebuf_r>
 800fdfe:	89a0      	ldrh	r0, [r4, #12]
 800fe00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe04:	f010 0301 	ands.w	r3, r0, #1
 800fe08:	d00a      	beq.n	800fe20 <__swsetup_r+0xbc>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	60a3      	str	r3, [r4, #8]
 800fe0e:	6963      	ldr	r3, [r4, #20]
 800fe10:	425b      	negs	r3, r3
 800fe12:	61a3      	str	r3, [r4, #24]
 800fe14:	6923      	ldr	r3, [r4, #16]
 800fe16:	b943      	cbnz	r3, 800fe2a <__swsetup_r+0xc6>
 800fe18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fe1c:	d1ba      	bne.n	800fd94 <__swsetup_r+0x30>
 800fe1e:	bd70      	pop	{r4, r5, r6, pc}
 800fe20:	0781      	lsls	r1, r0, #30
 800fe22:	bf58      	it	pl
 800fe24:	6963      	ldrpl	r3, [r4, #20]
 800fe26:	60a3      	str	r3, [r4, #8]
 800fe28:	e7f4      	b.n	800fe14 <__swsetup_r+0xb0>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	e7f7      	b.n	800fe1e <__swsetup_r+0xba>
 800fe2e:	bf00      	nop
 800fe30:	24000054 	.word	0x24000054
 800fe34:	0801058c 	.word	0x0801058c
 800fe38:	080105ac 	.word	0x080105ac
 800fe3c:	0801056c 	.word	0x0801056c

0800fe40 <_close_r>:
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	4d06      	ldr	r5, [pc, #24]	; (800fe5c <_close_r+0x1c>)
 800fe44:	2300      	movs	r3, #0
 800fe46:	4604      	mov	r4, r0
 800fe48:	4608      	mov	r0, r1
 800fe4a:	602b      	str	r3, [r5, #0]
 800fe4c:	f7f3 f804 	bl	8002e58 <_close>
 800fe50:	1c43      	adds	r3, r0, #1
 800fe52:	d102      	bne.n	800fe5a <_close_r+0x1a>
 800fe54:	682b      	ldr	r3, [r5, #0]
 800fe56:	b103      	cbz	r3, 800fe5a <_close_r+0x1a>
 800fe58:	6023      	str	r3, [r4, #0]
 800fe5a:	bd38      	pop	{r3, r4, r5, pc}
 800fe5c:	24060844 	.word	0x24060844

0800fe60 <_fstat_r>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	4d07      	ldr	r5, [pc, #28]	; (800fe80 <_fstat_r+0x20>)
 800fe64:	2300      	movs	r3, #0
 800fe66:	4604      	mov	r4, r0
 800fe68:	4608      	mov	r0, r1
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	602b      	str	r3, [r5, #0]
 800fe6e:	f7f3 f833 	bl	8002ed8 <_fstat>
 800fe72:	1c43      	adds	r3, r0, #1
 800fe74:	d102      	bne.n	800fe7c <_fstat_r+0x1c>
 800fe76:	682b      	ldr	r3, [r5, #0]
 800fe78:	b103      	cbz	r3, 800fe7c <_fstat_r+0x1c>
 800fe7a:	6023      	str	r3, [r4, #0]
 800fe7c:	bd38      	pop	{r3, r4, r5, pc}
 800fe7e:	bf00      	nop
 800fe80:	24060844 	.word	0x24060844

0800fe84 <_isatty_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d06      	ldr	r5, [pc, #24]	; (800fea0 <_isatty_r+0x1c>)
 800fe88:	2300      	movs	r3, #0
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	602b      	str	r3, [r5, #0]
 800fe90:	f7f2 ffa0 	bl	8002dd4 <_isatty>
 800fe94:	1c43      	adds	r3, r0, #1
 800fe96:	d102      	bne.n	800fe9e <_isatty_r+0x1a>
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	b103      	cbz	r3, 800fe9e <_isatty_r+0x1a>
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	24060844 	.word	0x24060844

0800fea4 <_lseek_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4d07      	ldr	r5, [pc, #28]	; (800fec4 <_lseek_r+0x20>)
 800fea8:	4604      	mov	r4, r0
 800feaa:	4608      	mov	r0, r1
 800feac:	4611      	mov	r1, r2
 800feae:	2200      	movs	r2, #0
 800feb0:	602a      	str	r2, [r5, #0]
 800feb2:	461a      	mov	r2, r3
 800feb4:	f7f3 fff2 	bl	8003e9c <_lseek>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_lseek_r+0x1e>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_lseek_r+0x1e>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	24060844 	.word	0x24060844

0800fec8 <__malloc_lock>:
 800fec8:	4801      	ldr	r0, [pc, #4]	; (800fed0 <__malloc_lock+0x8>)
 800feca:	f7ff ba55 	b.w	800f378 <__retarget_lock_acquire_recursive>
 800fece:	bf00      	nop
 800fed0:	24060838 	.word	0x24060838

0800fed4 <__malloc_unlock>:
 800fed4:	4801      	ldr	r0, [pc, #4]	; (800fedc <__malloc_unlock+0x8>)
 800fed6:	f7ff ba50 	b.w	800f37a <__retarget_lock_release_recursive>
 800feda:	bf00      	nop
 800fedc:	24060838 	.word	0x24060838

0800fee0 <_read_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	4d07      	ldr	r5, [pc, #28]	; (800ff00 <_read_r+0x20>)
 800fee4:	4604      	mov	r4, r0
 800fee6:	4608      	mov	r0, r1
 800fee8:	4611      	mov	r1, r2
 800feea:	2200      	movs	r2, #0
 800feec:	602a      	str	r2, [r5, #0]
 800feee:	461a      	mov	r2, r3
 800fef0:	f7f2 ffca 	bl	8002e88 <_read>
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	d102      	bne.n	800fefe <_read_r+0x1e>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	b103      	cbz	r3, 800fefe <_read_r+0x1e>
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
 800ff00:	24060844 	.word	0x24060844

0800ff04 <_init>:
 800ff04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff06:	bf00      	nop
 800ff08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff0a:	bc08      	pop	{r3}
 800ff0c:	469e      	mov	lr, r3
 800ff0e:	4770      	bx	lr

0800ff10 <_fini>:
 800ff10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff12:	bf00      	nop
 800ff14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff16:	bc08      	pop	{r3}
 800ff18:	469e      	mov	lr, r3
 800ff1a:	4770      	bx	lr
