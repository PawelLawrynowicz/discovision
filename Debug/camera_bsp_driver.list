
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fad4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800fd80  0800fd80  0001fd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080103ec  080103ec  000203ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080103f4  080103f4  000203f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080103f8  080103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  080103fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc8  240000b8  080104b4  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e80  080104b4  00030e80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000277bf  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f37  00000000  00000000  000578a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019f8  00000000  00000000  0005c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017f0  00000000  00000000  0005e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e03  00000000  00000000  0005f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002768c  00000000  00000000  000987cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152a52  00000000  00000000  000bfe57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002128a9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000708c  00000000  00000000  002128fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	240000b8 	.word	0x240000b8
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800fd68 	.word	0x0800fd68

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	240000bc 	.word	0x240000bc
 80002e8:	0800fd68 	.word	0x0800fd68

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_DCMI_Init+0x60>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_DCMI_Init+0x64>)
 80005f8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_DCMI_Init+0x60>)
 8000602:	2220      	movs	r2, #32
 8000604:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DCMI_Init+0x60>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DCMI_Init+0x60>)
 800060e:	2240      	movs	r2, #64	; 0x40
 8000610:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_DCMI_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_DCMI_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_DCMI_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_DCMI_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_DCMI_Init+0x60>)
 800063e:	f003 ff89 	bl	8004554 <HAL_DCMI_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000648:	f000 ffcc 	bl	80015e4 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	240000d4 	.word	0x240000d4
 8000654:	48020000 	.word	0x48020000

08000658 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a76      	ldr	r2, [pc, #472]	; (8000850 <HAL_DCMI_MspInit+0x1f8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	f040 80e5 	bne.w	8000846 <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800067c:	4b75      	ldr	r3, [pc, #468]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800067e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000682:	4a74      	ldr	r2, [pc, #464]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800068c:	4b71      	ldr	r3, [pc, #452]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800068e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	623b      	str	r3, [r7, #32]
 8000698:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b6e      	ldr	r3, [pc, #440]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800069c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a0:	4a6c      	ldr	r2, [pc, #432]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006be:	4a65      	ldr	r2, [pc, #404]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c8:	4b62      	ldr	r3, [pc, #392]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006dc:	4a5d      	ldr	r2, [pc, #372]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e6:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b57      	ldr	r3, [pc, #348]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fa:	4a56      	ldr	r2, [pc, #344]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000704:	4b53      	ldr	r3, [pc, #332]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000718:	4a4e      	ldr	r2, [pc, #312]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 8000730:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000742:	230d      	movs	r3, #13
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <HAL_DCMI_MspInit+0x200>)
 800074e:	f008 f93b 	bl	80089c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000764:	230d      	movs	r3, #13
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	483b      	ldr	r0, [pc, #236]	; (800085c <HAL_DCMI_MspInit+0x204>)
 8000770:	f008 f92a 	bl	80089c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000784:	230d      	movs	r3, #13
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4834      	ldr	r0, [pc, #208]	; (8000860 <HAL_DCMI_MspInit+0x208>)
 8000790:	f008 f91a 	bl	80089c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000794:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007a6:	230d      	movs	r3, #13
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	482c      	ldr	r0, [pc, #176]	; (8000864 <HAL_DCMI_MspInit+0x20c>)
 80007b2:	f008 f909 	bl	80089c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007b6:	2350      	movs	r3, #80	; 0x50
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c6:	230d      	movs	r3, #13
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4825      	ldr	r0, [pc, #148]	; (8000868 <HAL_DCMI_MspInit+0x210>)
 80007d2:	f008 f8f9 	bl	80089c8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <HAL_DCMI_MspInit+0x218>)
 80007da:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007de:	224b      	movs	r2, #75	; 0x4b
 80007e0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000800:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000804:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800080e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000812:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800081c:	f004 f968 	bl	8004af0 <HAL_DMA_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8000826:	f000 fedd 	bl	80015e4 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800082e:	649a      	str	r2, [r3, #72]	; 0x48
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	204e      	movs	r0, #78	; 0x4e
 800083c:	f003 fe55 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8000840:	204e      	movs	r0, #78	; 0x4e
 8000842:	f003 fe6c 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000846:	bf00      	nop
 8000848:	3738      	adds	r7, #56	; 0x38
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	48020000 	.word	0x48020000
 8000854:	58024400 	.word	0x58024400
 8000858:	58020400 	.word	0x58020400
 800085c:	58021800 	.word	0x58021800
 8000860:	58020c00 	.word	0x58020c00
 8000864:	58020800 	.word	0x58020800
 8000868:	58020000 	.word	0x58020000
 800086c:	24000124 	.word	0x24000124
 8000870:	40020428 	.word	0x40020428

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_DMA_Init+0x3c>)
 800087c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x3c>)
 800088c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2039      	movs	r0, #57	; 0x39
 800089e:	f003 fe24 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a2:	2039      	movs	r0, #57	; 0x39
 80008a4:	f003 fe3b 	bl	800451e <HAL_NVIC_EnableIRQ>

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024400 	.word	0x58024400

080008b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_DMA2D_Init+0x74>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008c4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008da:	2201      	movs	r2, #1
 80008dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008fe:	f006 ffd7 	bl	80078b0 <HAL_DMA2D_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 fe6c 	bl	80015e4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800090c:	2101      	movs	r1, #1
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_DMA2D_Init+0x70>)
 8000910:	f007 fa56 	bl	8007dc0 <HAL_DMA2D_ConfigLayer>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 fe63 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2400019c 	.word	0x2400019c
 8000928:	52001000 	.word	0x52001000

0800092c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_DMA2D_MspInit+0x48>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d116      	bne.n	800096c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000940:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000950:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	205a      	movs	r0, #90	; 0x5a
 8000962:	f003 fdc2 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000966:	205a      	movs	r0, #90	; 0x5a
 8000968:	f003 fdd9 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	52001000 	.word	0x52001000
 8000978:	58024400 	.word	0x58024400

0800097c <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <DMA2D_Convert+0x4c>)
 8000996:	f006 ffef 	bl	8007978 <HAL_DMA2D_Start>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <DMA2D_Convert+0x2c>
    Error_Handler();
 80009a4:	f000 fe1e 	bl	80015e4 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 80009a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <DMA2D_Convert+0x4c>)
 80009ae:	f007 f80e 	bl	80079ce <HAL_DMA2D_PollForTransfer>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <DMA2D_Convert+0x44>
    Error_Handler();
 80009bc:	f000 fe12 	bl	80015e4 <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2400019c 	.word	0x2400019c

080009cc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 80009e6:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <MX_FMC_Init+0x10c>)
 80009e8:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <MX_FMC_Init+0x110>)
 80009ea:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <MX_FMC_Init+0x10c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80009f2:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <MX_FMC_Init+0x10c>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <MX_FMC_Init+0x10c>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a00:	2210      	movs	r2, #16
 8000a02:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a10:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a18:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a1e:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a34:	2307      	movs	r3, #7
 8000a36:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000a3c:	2306      	movs	r3, #6
 8000a3e:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000a40:	2303      	movs	r3, #3
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a54:	f00c fc0c 	bl	800d270 <HAL_SDRAM_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000a5e:	f000 fdc1 	bl	80015e4 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000a62:	2301      	movs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000a66:	2308      	movs	r3, #8
 8000a68:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a7c:	f00c fc34 	bl	800d2e8 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000a80:	2001      	movs	r0, #1
 8000a82:	f003 fc33 	bl	80042ec <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000a86:	2302      	movs	r3, #2
 8000a88:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a90:	4619      	mov	r1, r3
 8000a92:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000a94:	f00c fc28 	bl	800d2e8 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000aaa:	f00c fc1d 	bl	800d2e8 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000aae:	2304      	movs	r3, #4
 8000ab0:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000ab2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000ab6:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000ac2:	f00c fc11 	bl	800d2e8 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000ac6:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <MX_FMC_Init+0x10c>)
 8000acc:	f00c fc41 	bl	800d352 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000204 	.word	0x24000204
 8000adc:	52004140 	.word	0x52004140

08000ae0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b0b8      	sub	sp, #224	; 0xe0
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000af6:	4b58      	ldr	r3, [pc, #352]	; (8000c58 <HAL_FMC_MspInit+0x178>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f040 80a7 	bne.w	8000c4e <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000b00:	4b55      	ldr	r3, [pc, #340]	; (8000c58 <HAL_FMC_MspInit+0x178>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	22c0      	movs	r2, #192	; 0xc0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00e fcdc 	bl	800f4cc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8000b20:	2318      	movs	r3, #24
 8000b22:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000b24:	23c8      	movs	r3, #200	; 0xc8
 8000b26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00a fc95 	bl	800b474 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000b50:	f000 fd48 	bl	80015e4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b54:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <HAL_FMC_MspInit+0x17c>)
 8000b56:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000b5a:	4a40      	ldr	r2, [pc, #256]	; (8000c5c <HAL_FMC_MspInit+0x17c>)
 8000b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b60:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000b64:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <HAL_FMC_MspInit+0x17c>)
 8000b66:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000b72:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b96:	4619      	mov	r1, r3
 8000b98:	4831      	ldr	r0, [pc, #196]	; (8000c60 <HAL_FMC_MspInit+0x180>)
 8000b9a:	f007 ff15 	bl	80089c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000b9e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bb8:	230c      	movs	r3, #12
 8000bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4827      	ldr	r0, [pc, #156]	; (8000c64 <HAL_FMC_MspInit+0x184>)
 8000bc6:	f007 feff 	bl	80089c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000bca:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000bce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000be4:	230c      	movs	r3, #12
 8000be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481d      	ldr	r0, [pc, #116]	; (8000c68 <HAL_FMC_MspInit+0x188>)
 8000bf2:	f007 fee9 	bl	80089c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000bf6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c10:	230c      	movs	r3, #12
 8000c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <HAL_FMC_MspInit+0x18c>)
 8000c1e:	f007 fed3 	bl	80089c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000c22:	23e0      	movs	r3, #224	; 0xe0
 8000c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c44:	4619      	mov	r1, r3
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <HAL_FMC_MspInit+0x190>)
 8000c48:	f007 febe 	bl	80089c8 <HAL_GPIO_Init>
 8000c4c:	e000      	b.n	8000c50 <HAL_FMC_MspInit+0x170>
    return;
 8000c4e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c50:	37e0      	adds	r7, #224	; 0xe0
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000238 	.word	0x24000238
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58021800 	.word	0x58021800
 8000c64:	58020c00 	.word	0x58020c00
 8000c68:	58021000 	.word	0x58021000
 8000c6c:	58021400 	.word	0x58021400
 8000c70:	58021c00 	.word	0x58021c00

08000c74 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000c7c:	f7ff ff30 	bl	8000ae0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c9e:	4bc0      	ldr	r3, [pc, #768]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000ca0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca4:	4abe      	ldr	r2, [pc, #760]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cae:	4bbc      	ldr	r3, [pc, #752]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000cb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	4bb8      	ldr	r3, [pc, #736]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000cbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc2:	4ab7      	ldr	r2, [pc, #732]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ccc:	4bb4      	ldr	r3, [pc, #720]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000cce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	4bb1      	ldr	r3, [pc, #708]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000cdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce0:	4aaf      	ldr	r2, [pc, #700]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cea:	4bad      	ldr	r3, [pc, #692]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000cec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf4:	623b      	str	r3, [r7, #32]
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cf8:	4ba9      	ldr	r3, [pc, #676]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cfe:	4aa8      	ldr	r2, [pc, #672]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d08:	4ba5      	ldr	r3, [pc, #660]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	4ba2      	ldr	r3, [pc, #648]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1c:	4aa0      	ldr	r2, [pc, #640]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d26:	4b9e      	ldr	r3, [pc, #632]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b9a      	ldr	r3, [pc, #616]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3a:	4a99      	ldr	r2, [pc, #612]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d44:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4b93      	ldr	r3, [pc, #588]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d58:	4a91      	ldr	r2, [pc, #580]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d62:	4b8f      	ldr	r3, [pc, #572]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d70:	4b8b      	ldr	r3, [pc, #556]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d76:	4a8a      	ldr	r2, [pc, #552]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d80:	4b87      	ldr	r3, [pc, #540]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b84      	ldr	r3, [pc, #528]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d94:	4a82      	ldr	r2, [pc, #520]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d9e:	4b80      	ldr	r3, [pc, #512]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dac:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000dae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db2:	4a7b      	ldr	r2, [pc, #492]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dbc:	4b78      	ldr	r3, [pc, #480]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000dbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc2:	f003 0320 	and.w	r3, r3, #32
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	4b75      	ldr	r3, [pc, #468]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000dcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd0:	4a73      	ldr	r2, [pc, #460]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dda:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <MX_GPIO_Init+0x318>)
 8000ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	210e      	movs	r1, #14
 8000dec:	486d      	ldr	r0, [pc, #436]	; (8000fa4 <MX_GPIO_Init+0x31c>)
 8000dee:	f008 f8a5 	bl	8008f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f640 0104 	movw	r1, #2052	; 0x804
 8000df8:	486b      	ldr	r0, [pc, #428]	; (8000fa8 <MX_GPIO_Init+0x320>)
 8000dfa:	f008 f89f 	bl	8008f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e04:	4869      	ldr	r0, [pc, #420]	; (8000fac <MX_GPIO_Init+0x324>)
 8000e06:	f008 f899 	bl	8008f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4866      	ldr	r0, [pc, #408]	; (8000fa8 <MX_GPIO_Init+0x320>)
 8000e10:	f008 f894 	bl	8008f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2106      	movs	r1, #6
 8000e18:	4864      	ldr	r0, [pc, #400]	; (8000fac <MX_GPIO_Init+0x324>)
 8000e1a:	f008 f88f 	bl	8008f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000e1e:	2330      	movs	r3, #48	; 0x30
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	485c      	ldr	r0, [pc, #368]	; (8000fa4 <MX_GPIO_Init+0x31c>)
 8000e34:	f007 fdc8 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000e38:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4854      	ldr	r0, [pc, #336]	; (8000fa8 <MX_GPIO_Init+0x320>)
 8000e56:	f007 fdb7 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000e6c:	2309      	movs	r3, #9
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e74:	4619      	mov	r1, r3
 8000e76:	484c      	ldr	r0, [pc, #304]	; (8000fa8 <MX_GPIO_Init+0x320>)
 8000e78:	f007 fda6 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e94:	4619      	mov	r1, r3
 8000e96:	4846      	ldr	r0, [pc, #280]	; (8000fb0 <MX_GPIO_Init+0x328>)
 8000e98:	f007 fd96 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000e9c:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	483e      	ldr	r0, [pc, #248]	; (8000fb4 <MX_GPIO_Init+0x32c>)
 8000eba:	f007 fd85 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000ebe:	230e      	movs	r3, #14
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4833      	ldr	r0, [pc, #204]	; (8000fa4 <MX_GPIO_Init+0x31c>)
 8000ed6:	f007 fd77 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000eda:	f640 030c 	movw	r3, #2060	; 0x80c
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <MX_GPIO_Init+0x320>)
 8000ef4:	f007 fd68 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4827      	ldr	r0, [pc, #156]	; (8000fb0 <MX_GPIO_Init+0x328>)
 8000f14:	f007 fd58 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <MX_GPIO_Init+0x31c>)
 8000f30:	f007 fd4a 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f46:	2305      	movs	r3, #5
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4816      	ldr	r0, [pc, #88]	; (8000fac <MX_GPIO_Init+0x324>)
 8000f52:	f007 fd39 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000f56:	f640 0306 	movw	r3, #2054	; 0x806
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480f      	ldr	r0, [pc, #60]	; (8000fac <MX_GPIO_Init+0x324>)
 8000f70:	f007 fd2a 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <MX_GPIO_Init+0x32c>)
 8000f8c:	f007 fd1c 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e00c      	b.n	8000fb8 <MX_GPIO_Init+0x330>
 8000f9e:	bf00      	nop
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58022000 	.word	0x58022000
 8000fa8:	58021800 	.word	0x58021800
 8000fac:	58020000 	.word	0x58020000
 8000fb0:	58020c00 	.word	0x58020c00
 8000fb4:	58020800 	.word	0x58020800
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4842      	ldr	r0, [pc, #264]	; (80010d4 <MX_GPIO_Init+0x44c>)
 8000fca:	f007 fcfd 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000fce:	2340      	movs	r3, #64	; 0x40
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fde:	230a      	movs	r3, #10
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483b      	ldr	r0, [pc, #236]	; (80010d8 <MX_GPIO_Init+0x450>)
 8000fea:	f007 fced 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ffe:	2305      	movs	r3, #5
 8001000:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001006:	4619      	mov	r1, r3
 8001008:	4834      	ldr	r0, [pc, #208]	; (80010dc <MX_GPIO_Init+0x454>)
 800100a:	f007 fcdd 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 800100e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001014:	2312      	movs	r3, #18
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001020:	2304      	movs	r3, #4
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	482d      	ldr	r0, [pc, #180]	; (80010e0 <MX_GPIO_Init+0x458>)
 800102c:	f007 fccc 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8001030:	2322      	movs	r3, #34	; 0x22
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001040:	230a      	movs	r3, #10
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <MX_GPIO_Init+0x454>)
 800104c:	f007 fcbc 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001050:	2304      	movs	r3, #4
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001054:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001062:	4619      	mov	r1, r3
 8001064:	481f      	ldr	r0, [pc, #124]	; (80010e4 <MX_GPIO_Init+0x45c>)
 8001066:	f007 fcaf 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 800106a:	2308      	movs	r3, #8
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800107a:	2309      	movs	r3, #9
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	4817      	ldr	r0, [pc, #92]	; (80010e4 <MX_GPIO_Init+0x45c>)
 8001086:	f007 fc9f 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 800108a:	2309      	movs	r3, #9
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800109a:	2305      	movs	r3, #5
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <MX_GPIO_Init+0x44c>)
 80010a6:	f007 fc8f 	bl	80089c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80010aa:	2304      	movs	r3, #4
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80010ba:	2309      	movs	r3, #9
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c2:	4619      	mov	r1, r3
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <MX_GPIO_Init+0x460>)
 80010c6:	f007 fc7f 	bl	80089c8 <HAL_GPIO_Init>

}
 80010ca:	bf00      	nop
 80010cc:	3740      	adds	r7, #64	; 0x40
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	58020000 	.word	0x58020000
 80010d8:	58021800 	.word	0x58021800
 80010dc:	58020800 	.word	0x58020800
 80010e0:	58020c00 	.word	0x58020c00
 80010e4:	58021c00 	.word	0x58021c00
 80010e8:	58020400 	.word	0x58020400

080010ec <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2234      	movs	r2, #52	; 0x34
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00e f9e7 	bl	800f4cc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001100:	4a38      	ldr	r2, [pc, #224]	; (80011e4 <MX_LTDC_Init+0xf8>)
 8001102:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800110a:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_LTDC_Init+0xf4>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001112:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001116:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <MX_LTDC_Init+0xf4>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001120:	2207      	movs	r2, #7
 8001122:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001126:	2203      	movs	r2, #3
 8001128:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <MX_LTDC_Init+0xf4>)
 800112c:	220e      	movs	r2, #14
 800112e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001132:	2205      	movs	r2, #5
 8001134:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001138:	f240 228e 	movw	r2, #654	; 0x28e
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001140:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001148:	f44f 7225 	mov.w	r2, #660	; 0x294
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001150:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001154:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <MX_LTDC_Init+0xf4>)
 8001170:	f008 fd84 	bl	8009c7c <HAL_LTDC_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800117a:	f000 fa33 	bl	80015e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800118e:	2302      	movs	r3, #2
 8001190:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800119a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011a0:	2305      	movs	r3, #5
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_LTDC_Init+0xf4>)
 80011ca:	f008 fee9 	bl	8009fa0 <HAL_LTDC_ConfigLayer>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80011d4:	f000 fa06 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3738      	adds	r7, #56	; 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2400023c 	.word	0x2400023c
 80011e4:	50001000 	.word	0x50001000

080011e8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0bc      	sub	sp, #240	; 0xf0
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	22c0      	movs	r2, #192	; 0xc0
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f00e f95f 	bl	800f4cc <memset>
  if(ltdcHandle->Instance==LTDC)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a5b      	ldr	r2, [pc, #364]	; (8001380 <HAL_LTDC_MspInit+0x198>)
 8001214:	4293      	cmp	r3, r2
 8001216:	f040 80ae 	bne.w	8001376 <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800121a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001226:	2318      	movs	r3, #24
 8001228:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800122a:	23c0      	movs	r3, #192	; 0xc0
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 800122e:	2311      	movs	r3, #17
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001232:	2302      	movs	r3, #2
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 8001236:	2310      	movs	r3, #16
 8001238:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800123a:	2300      	movs	r3, #0
 800123c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800123e:	2300      	movs	r3, #0
 8001240:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8001242:	f241 5356 	movw	r3, #5462	; 0x1556
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4618      	mov	r0, r3
 800124e:	f00a f911 	bl	800b474 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001258:	f000 f9c4 	bl	80015e4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800125c:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 800125e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 800126e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 800127c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001280:	4a40      	ldr	r2, [pc, #256]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800128a:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 800128c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001298:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 800129a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129e:	4a39      	ldr	r2, [pc, #228]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 80012a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 80012aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 80012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012bc:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_LTDC_MspInit+0x19c>)
 80012c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ec:	230e      	movs	r3, #14
 80012ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012f6:	4619      	mov	r1, r3
 80012f8:	4823      	ldr	r0, [pc, #140]	; (8001388 <HAL_LTDC_MspInit+0x1a0>)
 80012fa:	f007 fb65 	bl	80089c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80012fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001318:	230e      	movs	r3, #14
 800131a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800131e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001322:	4619      	mov	r1, r3
 8001324:	4819      	ldr	r0, [pc, #100]	; (800138c <HAL_LTDC_MspInit+0x1a4>)
 8001326:	f007 fb4f 	bl	80089c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 800132a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800132e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001344:	230e      	movs	r3, #14
 8001346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800134a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800134e:	4619      	mov	r1, r3
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <HAL_LTDC_MspInit+0x1a8>)
 8001352:	f007 fb39 	bl	80089c8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2058      	movs	r0, #88	; 0x58
 800135c:	f003 f8c5 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001360:	2058      	movs	r0, #88	; 0x58
 8001362:	f003 f8dc 	bl	800451e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2059      	movs	r0, #89	; 0x59
 800136c:	f003 f8bd 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001370:	2059      	movs	r0, #89	; 0x59
 8001372:	f003 f8d4 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	37f0      	adds	r7, #240	; 0xf0
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	50001000 	.word	0x50001000
 8001384:	58024400 	.word	0x58024400
 8001388:	58022800 	.word	0x58022800
 800138c:	58022400 	.word	0x58022400
 8001390:	58022000 	.word	0x58022000

08001394 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	; 0x40
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2234      	movs	r2, #52	; 0x34
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00e f891 	bl	800f4cc <memset>
	pLayerCfg.WindowX0 = 28;
 80013aa:	231c      	movs	r3, #28
 80013ac:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 80013ae:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80013b2:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 80013b4:	2306      	movs	r3, #6
 80013b6:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 80013b8:	f44f 738b 	mov.w	r3, #278	; 0x116
 80013bc:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80013c2:	23ff      	movs	r3, #255	; 0xff
 80013c4:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013d0:	2305      	movs	r3, #5
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 80013d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 80013de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <LTDC_Init_from_buffer+0x84>)
 8001400:	f008 fdce 	bl	8009fa0 <HAL_LTDC_ConfigLayer>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 800140a:	f000 f8eb 	bl	80015e4 <Error_Handler>
	}
}
 800140e:	bf00      	nop
 8001410:	3740      	adds	r7, #64	; 0x40
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2400023c 	.word	0x2400023c

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f002 fed2 	bl	80041c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f844 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f7ff fc2e 	bl	8000c88 <MX_GPIO_Init>
  MX_DMA_Init();
 800142c:	f7ff fa22 	bl	8000874 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001430:	f002 fde2 	bl	8003ff8 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8001434:	f7ff fa3e 	bl	80008b4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001438:	f7ff fe58 	bl	80010ec <MX_LTDC_Init>
  MX_DCMI_Init();
 800143c:	f7ff f8d8 	bl	80005f0 <MX_DCMI_Init>
  MX_RTC_Init();
 8001440:	f001 fe18 	bl	8003074 <MX_RTC_Init>
  MX_FMC_Init();
 8001444:	f7ff fac2 	bl	80009cc <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8001448:	4815      	ldr	r0, [pc, #84]	; (80014a0 <main+0x84>)
 800144a:	f001 fd73 	bl	8002f34 <RetargetInit>


  BSP_CAMERA_PwrDown(0);
 800144e:	2000      	movs	r0, #0
 8001450:	f002 fb73 	bl	8003b3a <BSP_CAMERA_PwrDown>
  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) != BSP_ERROR_NONE){
 8001454:	2200      	movs	r2, #0
 8001456:	2102      	movs	r1, #2
 8001458:	2000      	movs	r0, #0
 800145a:	f002 fabd 	bl	80039d8 <BSP_CAMERA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <main+0x4c>
	  Error_Handler();
 8001464:	f000 f8be 	bl	80015e4 <Error_Handler>
  }
  HAL_Delay(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146c:	f002 ff3e 	bl	80042ec <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <main+0x88>)
 8001472:	f7ff ff8f 	bl	8001394 <LTDC_Init_from_buffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	BSP_CAMERA_Start(0, (uint8_t*)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 8001476:	2202      	movs	r2, #2
 8001478:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800147c:	2000      	movs	r0, #0
 800147e:	f002 faf1 	bl	8003a64 <BSP_CAMERA_Start>
	while(camera_frame_ready == 0) {};
 8001482:	bf00      	nop
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <main+0x8c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0fb      	beq.n	8001484 <main+0x68>
	BSP_CAMERA_Stop(0);
 800148c:	2000      	movs	r0, #0
 800148e:	f002 fb23 	bl	8003ad8 <BSP_CAMERA_Stop>
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <main+0x90>)
 8001498:	f007 fd69 	bl	8008f6e <HAL_GPIO_TogglePin>
	BSP_CAMERA_Start(0, (uint8_t*)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 800149c:	e7eb      	b.n	8001476 <main+0x5a>
 800149e:	bf00      	nop
 80014a0:	24000dd8 	.word	0x24000dd8
 80014a4:	d005fa00 	.word	0xd005fa00
 80014a8:	240002e4 	.word	0x240002e4
 80014ac:	58021800 	.word	0x58021800

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09c      	sub	sp, #112	; 0x70
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	224c      	movs	r2, #76	; 0x4c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f00e f804 	bl	800f4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2220      	movs	r2, #32
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00d fffe 	bl	800f4cc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <SystemClock_Config+0x104>)
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014da:	2004      	movs	r0, #4
 80014dc:	f008 ff48 	bl	800a370 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <SystemClock_Config+0x108>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <SystemClock_Config+0x108>)
 80014ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <SystemClock_Config+0x108>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014fc:	bf00      	nop
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <SystemClock_Config+0x108>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800150a:	d1f8      	bne.n	80014fe <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800150c:	f008 ff20 	bl	800a350 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <SystemClock_Config+0x104>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <SystemClock_Config+0x104>)
 8001516:	f023 0318 	bic.w	r3, r3, #24
 800151a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800151c:	2305      	movs	r3, #5
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	2302      	movs	r3, #2
 8001530:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001532:	2303      	movs	r3, #3
 8001534:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 69;
 8001536:	2345      	movs	r3, #69	; 0x45
 8001538:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800153a:	2302      	movs	r3, #2
 800153c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 800153e:	230c      	movs	r3, #12
 8001540:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 16;
 8001542:	2310      	movs	r3, #16
 8001544:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001546:	230c      	movs	r3, #12
 8001548:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800154a:	2300      	movs	r3, #0
 800154c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 800154e:	f241 5356 	movw	r3, #5462	; 0x1556
 8001552:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4618      	mov	r0, r3
 800155a:	f008 ff63 	bl	800a424 <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001564:	f000 f83e 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	233f      	movs	r3, #63	; 0x3f
 800156a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	2303      	movs	r3, #3
 800156e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800157c:	2340      	movs	r3, #64	; 0x40
 800157e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001586:	2340      	movs	r3, #64	; 0x40
 8001588:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2107      	movs	r1, #7
 800158e:	4618      	mov	r0, r3
 8001590:	f009 fb7a 	bl	800ac88 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800159a:	f000 f823 	bl	80015e4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800159e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015a2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80015a6:	2000      	movs	r0, #0
 80015a8:	f009 fd24 	bl	800aff4 <HAL_RCC_MCOConfig>
}
 80015ac:	bf00      	nop
 80015ae:	3770      	adds	r7, #112	; 0x70
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58024800 	.word	0x58024800

080015bc <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <BSP_CAMERA_FrameEventCallback+0x20>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
	DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 80015ca:	4905      	ldr	r1, [pc, #20]	; (80015e0 <BSP_CAMERA_FrameEventCallback+0x24>)
 80015cc:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 80015d0:	f7ff f9d4 	bl	800097c <DMA2D_Convert>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	240002e4 	.word	0x240002e4
 80015e0:	d005fa00 	.word	0xd005fa00

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e02c      	b.n	8001662 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	891a      	ldrh	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <OV5640_RegisterBusIO+0x7c>)
 800163c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <OV5640_RegisterBusIO+0x80>)
 8001642:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4798      	blx	r3
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	e002      	b.n	8001662 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001660:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	08002e73 	.word	0x08002e73
 8001670:	08002ea5 	.word	0x08002ea5

08001674 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800168a:	2b00      	cmp	r3, #0
 800168c:	d165      	bne.n	800175a <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d80e      	bhi.n	80016b2 <OV5640_Init+0x3e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00f      	beq.n	80016ba <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d00c      	beq.n	80016ba <OV5640_Init+0x46>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d009      	beq.n	80016ba <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	d006      	beq.n	80016ba <OV5640_Init+0x46>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d003      	beq.n	80016ba <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	e04f      	b.n	800175a <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e01f      	b.n	8001700 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016c6:	d018      	beq.n	80016fa <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 80016c8:	4a26      	ldr	r2, [pc, #152]	; (8001764 <OV5640_Init+0xf0>)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	885b      	ldrh	r3, [r3, #2]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f103 0018 	add.w	r0, r3, #24
 80016dc:	4a21      	ldr	r2, [pc, #132]	; (8001764 <OV5640_Init+0xf0>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016e4:	f107 0217 	add.w	r2, r7, #23
 80016e8:	2301      	movs	r3, #1
 80016ea:	f001 fc0b 	bl	8002f04 <ov5640_write_reg>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f8:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2bfd      	cmp	r3, #253	; 0xfd
 8001704:	d9dc      	bls.n	80016c0 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d126      	bne.n	800175a <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f9e0 	bl	8001ad4 <OV5640_SetResolution>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	e01b      	b.n	800175a <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f833 	bl	8001790 <OV5640_SetPixelFormat>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	e010      	b.n	800175a <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001738:	2300      	movs	r3, #0
 800173a:	2201      	movs	r2, #1
 800173c:	2101      	movs	r1, #1
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fb64 	bl	8001e0c <OV5640_SetPolarities>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	e003      	b.n	800175a <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 800175a:	69bb      	ldr	r3, [r7, #24]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	0800fdc8 	.word	0x0800fdc8

08001768 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001776:	2b01      	cmp	r3, #1
 8001778:	d103      	bne.n	8001782 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00f      	beq.n	80017c4 <OV5640_SetPixelFormat+0x34>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d00c      	beq.n	80017c4 <OV5640_SetPixelFormat+0x34>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d009      	beq.n	80017c4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b07      	cmp	r3, #7
 80017b4:	d006      	beq.n	80017c4 <OV5640_SetPixelFormat+0x34>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d003      	beq.n	80017c4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e16a      	b.n	8001a9a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	2b07      	cmp	r3, #7
 80017ca:	f200 80c3 	bhi.w	8001954 <OV5640_SetPixelFormat+0x1c4>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <OV5640_SetPixelFormat+0x44>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	0800184d 	.word	0x0800184d
 80017d8:	080017f5 	.word	0x080017f5
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	080018a5 	.word	0x080018a5
 80017f0:	080018fd 	.word	0x080018fd
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	e024      	b.n	8001844 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001800:	d01d      	beq.n	800183e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001802:	4aa8      	ldr	r2, [pc, #672]	; (8001aa4 <OV5640_SetPixelFormat+0x314>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	885b      	ldrh	r3, [r3, #2]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 0018 	add.w	r0, r3, #24
 8001816:	4aa3      	ldr	r2, [pc, #652]	; (8001aa4 <OV5640_SetPixelFormat+0x314>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800181e:	f107 020f 	add.w	r2, r7, #15
 8001822:	2301      	movs	r3, #1
 8001824:	f001 fb6e 	bl	8002f04 <ov5640_write_reg>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e003      	b.n	800183e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001836:	2101      	movs	r1, #1
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f001 fb00 	bl	8002e3e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	3301      	adds	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d9d7      	bls.n	80017fa <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800184a:	e0af      	b.n	80019ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e024      	b.n	800189c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001858:	d01d      	beq.n	8001896 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800185a:	4a93      	ldr	r2, [pc, #588]	; (8001aa8 <OV5640_SetPixelFormat+0x318>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	885b      	ldrh	r3, [r3, #2]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f103 0018 	add.w	r0, r3, #24
 800186e:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <OV5640_SetPixelFormat+0x318>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001876:	f107 020f 	add.w	r2, r7, #15
 800187a:	2301      	movs	r3, #1
 800187c:	f001 fb42 	bl	8002f04 <ov5640_write_reg>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e003      	b.n	8001896 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800188e:	2101      	movs	r1, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f001 fad4 	bl	8002e3e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3301      	adds	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d9d7      	bls.n	8001852 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80018a2:	e083      	b.n	80019ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	e024      	b.n	80018f4 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b0:	d01d      	beq.n	80018ee <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80018b2:	4a7e      	ldr	r2, [pc, #504]	; (8001aac <OV5640_SetPixelFormat+0x31c>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	885b      	ldrh	r3, [r3, #2]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f103 0018 	add.w	r0, r3, #24
 80018c6:	4a79      	ldr	r2, [pc, #484]	; (8001aac <OV5640_SetPixelFormat+0x31c>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80018ce:	f107 020f 	add.w	r2, r7, #15
 80018d2:	2301      	movs	r3, #1
 80018d4:	f001 fb16 	bl	8002f04 <ov5640_write_reg>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e003      	b.n	80018ee <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80018e6:	2101      	movs	r1, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f001 faa8 	bl	8002e3e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3301      	adds	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d9d7      	bls.n	80018aa <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80018fa:	e057      	b.n	80019ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	e024      	b.n	800194c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001908:	d01d      	beq.n	8001946 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800190a:	4a69      	ldr	r2, [pc, #420]	; (8001ab0 <OV5640_SetPixelFormat+0x320>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	885b      	ldrh	r3, [r3, #2]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f103 0018 	add.w	r0, r3, #24
 800191e:	4a64      	ldr	r2, [pc, #400]	; (8001ab0 <OV5640_SetPixelFormat+0x320>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001926:	f107 020f 	add.w	r2, r7, #15
 800192a:	2301      	movs	r3, #1
 800192c:	f001 faea 	bl	8002f04 <ov5640_write_reg>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e003      	b.n	8001946 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800193e:	2101      	movs	r1, #1
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f001 fa7c 	bl	8002e3e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	3301      	adds	r3, #1
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d9d7      	bls.n	8001902 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001952:	e02b      	b.n	80019ac <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	e024      	b.n	80019a4 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d01d      	beq.n	800199e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001962:	4a54      	ldr	r2, [pc, #336]	; (8001ab4 <OV5640_SetPixelFormat+0x324>)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	885b      	ldrh	r3, [r3, #2]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f103 0018 	add.w	r0, r3, #24
 8001976:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <OV5640_SetPixelFormat+0x324>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800197e:	f107 020f 	add.w	r2, r7, #15
 8001982:	2301      	movs	r3, #1
 8001984:	f001 fabe 	bl	8002f04 <ov5640_write_reg>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e003      	b.n	800199e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001996:	2101      	movs	r1, #1
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f001 fa50 	bl	8002e3e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	3301      	adds	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d9d7      	bls.n	800195a <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80019aa:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d173      	bne.n	8001a9a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f103 0018 	add.w	r0, r3, #24
 80019b8:	f107 020f 	add.w	r2, r7, #15
 80019bc:	2301      	movs	r3, #1
 80019be:	f643 0121 	movw	r1, #14369	; 0x3821
 80019c2:	f001 fa88 	bl	8002ed6 <ov5640_read_reg>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e062      	b.n	8001a9a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f103 0018 	add.w	r0, r3, #24
 80019e4:	f107 020f 	add.w	r2, r7, #15
 80019e8:	2301      	movs	r3, #1
 80019ea:	f643 0121 	movw	r1, #14369	; 0x3821
 80019ee:	f001 fa89 	bl	8002f04 <ov5640_write_reg>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e04c      	b.n	8001a9a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f103 0018 	add.w	r0, r3, #24
 8001a06:	f107 020f 	add.w	r2, r7, #15
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f243 0102 	movw	r1, #12290	; 0x3002
 8001a10:	f001 fa61 	bl	8002ed6 <ov5640_read_reg>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e03b      	b.n	8001a9a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	f023 031c 	bic.w	r3, r3, #28
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f103 0018 	add.w	r0, r3, #24
 8001a32:	f107 020f 	add.w	r2, r7, #15
 8001a36:	2301      	movs	r3, #1
 8001a38:	f243 0102 	movw	r1, #12290	; 0x3002
 8001a3c:	f001 fa62 	bl	8002f04 <ov5640_write_reg>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e025      	b.n	8001a9a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f103 0018 	add.w	r0, r3, #24
 8001a54:	f107 020f 	add.w	r2, r7, #15
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f243 0106 	movw	r1, #12294	; 0x3006
 8001a5e:	f001 fa3a 	bl	8002ed6 <ov5640_read_reg>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e014      	b.n	8001a9a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f103 0018 	add.w	r0, r3, #24
 8001a80:	f107 020f 	add.w	r2, r7, #15
 8001a84:	2301      	movs	r3, #1
 8001a86:	f243 0106 	movw	r1, #12294	; 0x3006
 8001a8a:	f001 fa3b 	bl	8002f04 <ov5640_write_reg>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a98:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001a9a:	697b      	ldr	r3, [r7, #20]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	080101c0 	.word	0x080101c0
 8001aa8:	080101c8 	.word	0x080101c8
 8001aac:	080101d0 	.word	0x080101d0
 8001ab0:	080101d8 	.word	0x080101d8
 8001ab4:	080101e0 	.word	0x080101e0

08001ab8 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d903      	bls.n	8001af0 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e0d8      	b.n	8001ca2 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	f200 80d1 	bhi.w	8001c9a <OV5640_SetResolution+0x1c6>
 8001af8:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <OV5640_SetResolution+0x2c>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001b15 	.word	0x08001b15
 8001b04:	08001b63 	.word	0x08001b63
 8001b08:	08001bb1 	.word	0x08001bb1
 8001b0c:	08001bff 	.word	0x08001bff
 8001b10:	08001c4d 	.word	0x08001c4d
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	e01f      	b.n	8001b5a <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b20:	d018      	beq.n	8001b54 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001b22:	4a62      	ldr	r2, [pc, #392]	; (8001cac <OV5640_SetResolution+0x1d8>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	885b      	ldrh	r3, [r3, #2]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f103 0018 	add.w	r0, r3, #24
 8001b36:	4a5d      	ldr	r2, [pc, #372]	; (8001cac <OV5640_SetResolution+0x1d8>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b3e:	f107 020f 	add.w	r2, r7, #15
 8001b42:	2301      	movs	r3, #1
 8001b44:	f001 f9de 	bl	8002f04 <ov5640_write_reg>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b52:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3301      	adds	r3, #1
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d9dc      	bls.n	8001b1a <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001b60:	e09f      	b.n	8001ca2 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e01f      	b.n	8001ba8 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b6e:	d018      	beq.n	8001ba2 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001b70:	4a4f      	ldr	r2, [pc, #316]	; (8001cb0 <OV5640_SetResolution+0x1dc>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	885b      	ldrh	r3, [r3, #2]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f103 0018 	add.w	r0, r3, #24
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <OV5640_SetResolution+0x1dc>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b8c:	f107 020f 	add.w	r2, r7, #15
 8001b90:	2301      	movs	r3, #1
 8001b92:	f001 f9b7 	bl	8002f04 <ov5640_write_reg>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d9dc      	bls.n	8001b68 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001bae:	e078      	b.n	8001ca2 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e01f      	b.n	8001bf6 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bbc:	d018      	beq.n	8001bf0 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <OV5640_SetResolution+0x1e0>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	885b      	ldrh	r3, [r3, #2]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f103 0018 	add.w	r0, r3, #24
 8001bd2:	4a38      	ldr	r2, [pc, #224]	; (8001cb4 <OV5640_SetResolution+0x1e0>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001bda:	f107 020f 	add.w	r2, r7, #15
 8001bde:	2301      	movs	r3, #1
 8001be0:	f001 f990 	bl	8002f04 <ov5640_write_reg>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bee:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d9dc      	bls.n	8001bb6 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001bfc:	e051      	b.n	8001ca2 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e01f      	b.n	8001c44 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0a:	d018      	beq.n	8001c3e <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <OV5640_SetResolution+0x1e4>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	885b      	ldrh	r3, [r3, #2]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f103 0018 	add.w	r0, r3, #24
 8001c20:	4a25      	ldr	r2, [pc, #148]	; (8001cb8 <OV5640_SetResolution+0x1e4>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c28:	f107 020f 	add.w	r2, r7, #15
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f001 f969 	bl	8002f04 <ov5640_write_reg>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c3c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	3301      	adds	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d9dc      	bls.n	8001c04 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001c4a:	e02a      	b.n	8001ca2 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	e01f      	b.n	8001c92 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c58:	d018      	beq.n	8001c8c <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <OV5640_SetResolution+0x1e8>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	885b      	ldrh	r3, [r3, #2]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f103 0018 	add.w	r0, r3, #24
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <OV5640_SetResolution+0x1e8>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c76:	f107 020f 	add.w	r2, r7, #15
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f001 f942 	bl	8002f04 <ov5640_write_reg>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d9dc      	bls.n	8001c52 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001c98:	e003      	b.n	8001ca2 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c9e:	617b      	str	r3, [r7, #20]
        break;
 8001ca0:	bf00      	nop
    }
  }

  return ret;
 8001ca2:	697b      	ldr	r3, [r7, #20]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	080101e8 	.word	0x080101e8
 8001cb0:	080101f8 	.word	0x080101f8
 8001cb4:	08010208 	.word	0x08010208
 8001cb8:	08010218 	.word	0x08010218
 8001cbc:	08010228 	.word	0x08010228

08001cc0 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f103 0018 	add.w	r0, r3, #24
 8001cd0:	f107 020f 	add.w	r2, r7, #15
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f643 0108 	movw	r1, #14344	; 0x3808
 8001cda:	f001 f8fc 	bl	8002ed6 <ov5640_read_reg>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e08a      	b.n	8001e02 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f103 0018 	add.w	r0, r3, #24
 8001cfa:	f107 020f 	add.w	r2, r7, #15
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f643 0109 	movw	r1, #14345	; 0x3809
 8001d04:	f001 f8e7 	bl	8002ed6 <ov5640_read_reg>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	e075      	b.n	8001e02 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	8a7b      	ldrh	r3, [r7, #18]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f103 0018 	add.w	r0, r3, #24
 8001d26:	f107 020f 	add.w	r2, r7, #15
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f643 010a 	movw	r1, #14346	; 0x380a
 8001d30:	f001 f8d1 	bl	8002ed6 <ov5640_read_reg>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e05f      	b.n	8001e02 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f103 0018 	add.w	r0, r3, #24
 8001d50:	f107 020f 	add.w	r2, r7, #15
 8001d54:	2301      	movs	r3, #1
 8001d56:	f643 010b 	movw	r1, #14347	; 0x380b
 8001d5a:	f001 f8bc 	bl	8002ed6 <ov5640_read_reg>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e04a      	b.n	8001e02 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	8a3b      	ldrh	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001d76:	8a7b      	ldrh	r3, [r7, #18]
 8001d78:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001d7c:	d109      	bne.n	8001d92 <OV5640_GetResolution+0xd2>
 8001d7e:	8a3b      	ldrh	r3, [r7, #16]
 8001d80:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001d84:	d105      	bne.n	8001d92 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e037      	b.n	8001e02 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001d92:	8a7b      	ldrh	r3, [r7, #18]
 8001d94:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001d98:	d109      	bne.n	8001dae <OV5640_GetResolution+0xee>
 8001d9a:	8a3b      	ldrh	r3, [r7, #16]
 8001d9c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001da0:	d105      	bne.n	8001dae <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2203      	movs	r2, #3
 8001da6:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e029      	b.n	8001e02 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001dae:	8a7b      	ldrh	r3, [r7, #18]
 8001db0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001db4:	d109      	bne.n	8001dca <OV5640_GetResolution+0x10a>
 8001db6:	8a3b      	ldrh	r3, [r7, #16]
 8001db8:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001dbc:	d105      	bne.n	8001dca <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e01b      	b.n	8001e02 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001dca:	8a7b      	ldrh	r3, [r7, #18]
 8001dcc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001dd0:	d108      	bne.n	8001de4 <OV5640_GetResolution+0x124>
 8001dd2:	8a3b      	ldrh	r3, [r7, #16]
 8001dd4:	2bf0      	cmp	r3, #240	; 0xf0
 8001dd6:	d105      	bne.n	8001de4 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e00e      	b.n	8001e02 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001de4:	8a7b      	ldrh	r3, [r7, #18]
 8001de6:	2ba0      	cmp	r3, #160	; 0xa0
 8001de8:	d108      	bne.n	8001dfc <OV5640_GetResolution+0x13c>
 8001dea:	8a3b      	ldrh	r3, [r7, #16]
 8001dec:	2b78      	cmp	r3, #120	; 0x78
 8001dee:	d105      	bne.n	8001dfc <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e002      	b.n	8001e02 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e00:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001e02:	697b      	ldr	r3, [r7, #20]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d011      	beq.n	8001e48 <OV5640_SetPolarities+0x3c>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <OV5640_SetPolarities+0x24>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d10b      	bne.n	8001e48 <OV5640_SetPolarities+0x3c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <OV5640_SetPolarities+0x3c>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d006      	beq.n	8001e50 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e01e      	b.n	8001e8e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f103 0018 	add.w	r0, r3, #24
 8001e74:	f107 0213 	add.w	r2, r7, #19
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f244 7140 	movw	r1, #18240	; 0x4740
 8001e7e:	f001 f841 	bl	8002f04 <ov5640_write_reg>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001e8e:	697b      	ldr	r3, [r7, #20]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f103 0018 	add.w	r0, r3, #24
 8001eb2:	f107 020b 	add.w	r2, r7, #11
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f243 0108 	movw	r1, #12296	; 0x3008
 8001ebc:	f001 f822 	bl	8002f04 <ov5640_write_reg>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e032      	b.n	8001f34 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001ece:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 ffb3 	bl	8002e3e <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f103 0018 	add.w	r0, r3, #24
 8001ede:	f107 020b 	add.w	r2, r7, #11
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f243 010a 	movw	r1, #12298	; 0x300a
 8001ee8:	f000 fff5 	bl	8002ed6 <ov5640_read_reg>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e01c      	b.n	8001f34 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	021a      	lsls	r2, r3, #8
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 0018 	add.w	r0, r3, #24
 8001f08:	f107 020b 	add.w	r2, r7, #11
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f243 010b 	movw	r1, #12299	; 0x300b
 8001f12:	f000 ffe0 	bl	8002ed6 <ov5640_read_reg>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e007      	b.n	8001f34 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	7afa      	ldrb	r2, [r7, #11]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001f34:	68fb      	ldr	r3, [r7, #12]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e01f      	b.n	8001f96 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2201      	movs	r2, #1
 8001f66:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f103 0018 	add.w	r0, r3, #24
 8001fb8:	f107 020f 	add.w	r2, r7, #15
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f243 4106 	movw	r1, #13318	; 0x3406
 8001fc2:	f000 ff9f 	bl	8002f04 <ov5640_write_reg>
 8001fc6:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001fce:	2346      	movs	r3, #70	; 0x46
 8001fd0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f103 0018 	add.w	r0, r3, #24
 8001fd8:	f107 020f 	add.w	r2, r7, #15
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f245 1190 	movw	r1, #20880	; 0x5190
 8001fe2:	f000 ff8f 	bl	8002f04 <ov5640_write_reg>
 8001fe6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8001fee:	23f8      	movs	r3, #248	; 0xf8
 8001ff0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f103 0018 	add.w	r0, r3, #24
 8001ff8:	f107 020f 	add.w	r2, r7, #15
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f245 1191 	movw	r1, #20881	; 0x5191
 8002002:	f000 ff7f 	bl	8002f04 <ov5640_write_reg>
 8002006:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 800200e:	2304      	movs	r3, #4
 8002010:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0018 	add.w	r0, r3, #24
 8002018:	f107 020f 	add.w	r2, r7, #15
 800201c:	2301      	movs	r3, #1
 800201e:	f245 1192 	movw	r1, #20882	; 0x5192
 8002022:	f000 ff6f 	bl	8002f04 <ov5640_write_reg>
 8002026:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 80db 	bne.w	80021e6 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3b01      	subs	r3, #1
 8002034:	2b07      	cmp	r3, #7
 8002036:	f200 80af 	bhi.w	8002198 <OV5640_SetLightMode+0x1f4>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <OV5640_SetLightMode+0x9c>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002061 	.word	0x08002061
 8002044:	080020af 	.word	0x080020af
 8002048:	08002199 	.word	0x08002199
 800204c:	0800214b 	.word	0x0800214b
 8002050:	08002199 	.word	0x08002199
 8002054:	08002199 	.word	0x08002199
 8002058:	08002199 	.word	0x08002199
 800205c:	080020fd 	.word	0x080020fd
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e01f      	b.n	80020a6 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800206c:	d018      	beq.n	80020a0 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800206e:	4a61      	ldr	r2, [pc, #388]	; (80021f4 <OV5640_SetLightMode+0x250>)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	885b      	ldrh	r3, [r3, #2]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f103 0018 	add.w	r0, r3, #24
 8002082:	4a5c      	ldr	r2, [pc, #368]	; (80021f4 <OV5640_SetLightMode+0x250>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800208a:	f107 020f 	add.w	r2, r7, #15
 800208e:	2301      	movs	r3, #1
 8002090:	f000 ff38 	bl	8002f04 <ov5640_write_reg>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800209e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	3301      	adds	r3, #1
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d9dc      	bls.n	8002066 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 80020ac:	e09c      	b.n	80021e8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e01f      	b.n	80020f4 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ba:	d018      	beq.n	80020ee <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <OV5640_SetLightMode+0x254>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f103 0018 	add.w	r0, r3, #24
 80020d0:	4a49      	ldr	r2, [pc, #292]	; (80021f8 <OV5640_SetLightMode+0x254>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80020d8:	f107 020f 	add.w	r2, r7, #15
 80020dc:	2301      	movs	r3, #1
 80020de:	f000 ff11 	bl	8002f04 <ov5640_write_reg>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ec:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	3301      	adds	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d9dc      	bls.n	80020b4 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 80020fa:	e075      	b.n	80021e8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e01f      	b.n	8002142 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002108:	d018      	beq.n	800213c <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800210a:	4a3c      	ldr	r2, [pc, #240]	; (80021fc <OV5640_SetLightMode+0x258>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 0018 	add.w	r0, r3, #24
 800211e:	4a37      	ldr	r2, [pc, #220]	; (80021fc <OV5640_SetLightMode+0x258>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002126:	f107 020f 	add.w	r2, r7, #15
 800212a:	2301      	movs	r3, #1
 800212c:	f000 feea 	bl	8002f04 <ov5640_write_reg>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	3301      	adds	r3, #1
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b06      	cmp	r3, #6
 8002146:	d9dc      	bls.n	8002102 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002148:	e04e      	b.n	80021e8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e01f      	b.n	8002190 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002156:	d018      	beq.n	800218a <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002158:	4a29      	ldr	r2, [pc, #164]	; (8002200 <OV5640_SetLightMode+0x25c>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	885b      	ldrh	r3, [r3, #2]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f103 0018 	add.w	r0, r3, #24
 800216c:	4a24      	ldr	r2, [pc, #144]	; (8002200 <OV5640_SetLightMode+0x25c>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002174:	f107 020f 	add.w	r2, r7, #15
 8002178:	2301      	movs	r3, #1
 800217a:	f000 fec3 	bl	8002f04 <ov5640_write_reg>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002188:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	3301      	adds	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d9dc      	bls.n	8002150 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002196:	e027      	b.n	80021e8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e01f      	b.n	80021de <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a4:	d018      	beq.n	80021d8 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <OV5640_SetLightMode+0x260>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	885b      	ldrh	r3, [r3, #2]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 0018 	add.w	r0, r3, #24
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <OV5640_SetLightMode+0x260>)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021c2:	f107 020f 	add.w	r2, r7, #15
 80021c6:	2301      	movs	r3, #1
 80021c8:	f000 fe9c 	bl	8002f04 <ov5640_write_reg>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	3301      	adds	r3, #1
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d9dc      	bls.n	800219e <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 80021e4:	e000      	b.n	80021e8 <OV5640_SetLightMode+0x244>
    }
  }
 80021e6:	bf00      	nop
  return ret;
 80021e8:	697b      	ldr	r3, [r7, #20]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	08010238 	.word	0x08010238
 80021f8:	08010254 	.word	0x08010254
 80021fc:	08010270 	.word	0x08010270
 8002200:	0801028c 	.word	0x0801028c
 8002204:	080102a8 	.word	0x080102a8

08002208 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	3b01      	subs	r3, #1
 8002216:	2b1f      	cmp	r3, #31
 8002218:	f200 81c0 	bhi.w	800259c <OV5640_SetColorEffect+0x394>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <OV5640_SetColorEffect+0x1c>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	080022a5 	.word	0x080022a5
 8002228:	0800232f 	.word	0x0800232f
 800222c:	0800259d 	.word	0x0800259d
 8002230:	080023b9 	.word	0x080023b9
 8002234:	0800259d 	.word	0x0800259d
 8002238:	0800259d 	.word	0x0800259d
 800223c:	0800259d 	.word	0x0800259d
 8002240:	08002443 	.word	0x08002443
 8002244:	0800259d 	.word	0x0800259d
 8002248:	0800259d 	.word	0x0800259d
 800224c:	0800259d 	.word	0x0800259d
 8002250:	0800259d 	.word	0x0800259d
 8002254:	0800259d 	.word	0x0800259d
 8002258:	0800259d 	.word	0x0800259d
 800225c:	0800259d 	.word	0x0800259d
 8002260:	080024cd 	.word	0x080024cd
 8002264:	0800259d 	.word	0x0800259d
 8002268:	0800259d 	.word	0x0800259d
 800226c:	0800259d 	.word	0x0800259d
 8002270:	0800259d 	.word	0x0800259d
 8002274:	0800259d 	.word	0x0800259d
 8002278:	0800259d 	.word	0x0800259d
 800227c:	0800259d 	.word	0x0800259d
 8002280:	0800259d 	.word	0x0800259d
 8002284:	0800259d 	.word	0x0800259d
 8002288:	0800259d 	.word	0x0800259d
 800228c:	0800259d 	.word	0x0800259d
 8002290:	0800259d 	.word	0x0800259d
 8002294:	0800259d 	.word	0x0800259d
 8002298:	0800259d 	.word	0x0800259d
 800229c:	0800259d 	.word	0x0800259d
 80022a0:	08002555 	.word	0x08002555
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 80022a4:	23ff      	movs	r3, #255	; 0xff
 80022a6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f103 0018 	add.w	r0, r3, #24
 80022ae:	f107 020b 	add.w	r2, r7, #11
 80022b2:	2301      	movs	r3, #1
 80022b4:	f245 0101 	movw	r1, #20481	; 0x5001
 80022b8:	f000 fe24 	bl	8002f04 <ov5640_write_reg>
 80022bc:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10c      	bne.n	80022de <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 80022c4:	2318      	movs	r3, #24
 80022c6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0018 	add.w	r0, r3, #24
 80022ce:	f107 020b 	add.w	r2, r7, #11
 80022d2:	2301      	movs	r3, #1
 80022d4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80022d8:	f000 fe14 	bl	8002f04 <ov5640_write_reg>
 80022dc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10c      	bne.n	80022fe <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 80022e4:	23a0      	movs	r3, #160	; 0xa0
 80022e6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0018 	add.w	r0, r3, #24
 80022ee:	f107 020b 	add.w	r2, r7, #11
 80022f2:	2301      	movs	r3, #1
 80022f4:	f245 5183 	movw	r1, #21891	; 0x5583
 80022f8:	f000 fe04 	bl	8002f04 <ov5640_write_reg>
 80022fc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10c      	bne.n	800231e <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002304:	2340      	movs	r3, #64	; 0x40
 8002306:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f103 0018 	add.w	r0, r3, #24
 800230e:	f107 020b 	add.w	r2, r7, #11
 8002312:	2301      	movs	r3, #1
 8002314:	f245 5184 	movw	r1, #21892	; 0x5584
 8002318:	f000 fdf4 	bl	8002f04 <ov5640_write_reg>
 800231c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 815f 	beq.w	80025e4 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800232a:	60fb      	str	r3, [r7, #12]
      }
      break;
 800232c:	e15a      	b.n	80025e4 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 800232e:	23ff      	movs	r3, #255	; 0xff
 8002330:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f103 0018 	add.w	r0, r3, #24
 8002338:	f107 020b 	add.w	r2, r7, #11
 800233c:	2301      	movs	r3, #1
 800233e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002342:	f000 fddf 	bl	8002f04 <ov5640_write_reg>
 8002346:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 800234e:	2318      	movs	r3, #24
 8002350:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 0018 	add.w	r0, r3, #24
 8002358:	f107 020b 	add.w	r2, r7, #11
 800235c:	2301      	movs	r3, #1
 800235e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002362:	f000 fdcf 	bl	8002f04 <ov5640_write_reg>
 8002366:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f103 0018 	add.w	r0, r3, #24
 8002378:	f107 020b 	add.w	r2, r7, #11
 800237c:	2301      	movs	r3, #1
 800237e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002382:	f000 fdbf 	bl	8002f04 <ov5640_write_reg>
 8002386:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f103 0018 	add.w	r0, r3, #24
 8002398:	f107 020b 	add.w	r2, r7, #11
 800239c:	2301      	movs	r3, #1
 800239e:	f245 5184 	movw	r1, #21892	; 0x5584
 80023a2:	f000 fdaf 	bl	8002f04 <ov5640_write_reg>
 80023a6:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 811c 	beq.w	80025e8 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023b4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80023b6:	e117      	b.n	80025e8 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 80023b8:	23ff      	movs	r3, #255	; 0xff
 80023ba:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 0018 	add.w	r0, r3, #24
 80023c2:	f107 020b 	add.w	r2, r7, #11
 80023c6:	2301      	movs	r3, #1
 80023c8:	f245 0101 	movw	r1, #20481	; 0x5001
 80023cc:	f000 fd9a 	bl	8002f04 <ov5640_write_reg>
 80023d0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10c      	bne.n	80023f2 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 80023d8:	2318      	movs	r3, #24
 80023da:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0018 	add.w	r0, r3, #24
 80023e2:	f107 020b 	add.w	r2, r7, #11
 80023e6:	2301      	movs	r3, #1
 80023e8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023ec:	f000 fd8a 	bl	8002f04 <ov5640_write_reg>
 80023f0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10c      	bne.n	8002412 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 80023f8:	2360      	movs	r3, #96	; 0x60
 80023fa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f103 0018 	add.w	r0, r3, #24
 8002402:	f107 020b 	add.w	r2, r7, #11
 8002406:	2301      	movs	r3, #1
 8002408:	f245 5183 	movw	r1, #21891	; 0x5583
 800240c:	f000 fd7a 	bl	8002f04 <ov5640_write_reg>
 8002410:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10c      	bne.n	8002432 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002418:	2360      	movs	r3, #96	; 0x60
 800241a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0018 	add.w	r0, r3, #24
 8002422:	f107 020b 	add.w	r2, r7, #11
 8002426:	2301      	movs	r3, #1
 8002428:	f245 5184 	movw	r1, #21892	; 0x5584
 800242c:	f000 fd6a 	bl	8002f04 <ov5640_write_reg>
 8002430:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80d9 	beq.w	80025ec <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002440:	e0d4      	b.n	80025ec <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8002442:	23ff      	movs	r3, #255	; 0xff
 8002444:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 0018 	add.w	r0, r3, #24
 800244c:	f107 020b 	add.w	r2, r7, #11
 8002450:	2301      	movs	r3, #1
 8002452:	f245 0101 	movw	r1, #20481	; 0x5001
 8002456:	f000 fd55 	bl	8002f04 <ov5640_write_reg>
 800245a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8002462:	2318      	movs	r3, #24
 8002464:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f103 0018 	add.w	r0, r3, #24
 800246c:	f107 020b 	add.w	r2, r7, #11
 8002470:	2301      	movs	r3, #1
 8002472:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002476:	f000 fd45 	bl	8002f04 <ov5640_write_reg>
 800247a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f103 0018 	add.w	r0, r3, #24
 800248c:	f107 020b 	add.w	r2, r7, #11
 8002490:	2301      	movs	r3, #1
 8002492:	f245 5183 	movw	r1, #21891	; 0x5583
 8002496:	f000 fd35 	bl	8002f04 <ov5640_write_reg>
 800249a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f103 0018 	add.w	r0, r3, #24
 80024ac:	f107 020b 	add.w	r2, r7, #11
 80024b0:	2301      	movs	r3, #1
 80024b2:	f245 5184 	movw	r1, #21892	; 0x5584
 80024b6:	f000 fd25 	bl	8002f04 <ov5640_write_reg>
 80024ba:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8096 	beq.w	80025f0 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80024ca:	e091      	b.n	80025f0 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 80024cc:	23ff      	movs	r3, #255	; 0xff
 80024ce:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0018 	add.w	r0, r3, #24
 80024d6:	f107 020b 	add.w	r2, r7, #11
 80024da:	2301      	movs	r3, #1
 80024dc:	f245 0101 	movw	r1, #20481	; 0x5001
 80024e0:	f000 fd10 	bl	8002f04 <ov5640_write_reg>
 80024e4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10c      	bne.n	8002506 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 80024ec:	2318      	movs	r3, #24
 80024ee:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f103 0018 	add.w	r0, r3, #24
 80024f6:	f107 020b 	add.w	r2, r7, #11
 80024fa:	2301      	movs	r3, #1
 80024fc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002500:	f000 fd00 	bl	8002f04 <ov5640_write_reg>
 8002504:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10c      	bne.n	8002526 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 800250c:	2340      	movs	r3, #64	; 0x40
 800250e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f103 0018 	add.w	r0, r3, #24
 8002516:	f107 020b 	add.w	r2, r7, #11
 800251a:	2301      	movs	r3, #1
 800251c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002520:	f000 fcf0 	bl	8002f04 <ov5640_write_reg>
 8002524:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 800252c:	23a0      	movs	r3, #160	; 0xa0
 800252e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f103 0018 	add.w	r0, r3, #24
 8002536:	f107 020b 	add.w	r2, r7, #11
 800253a:	2301      	movs	r3, #1
 800253c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002540:	f000 fce0 	bl	8002f04 <ov5640_write_reg>
 8002544:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d053      	beq.n	80025f4 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002550:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002552:	e04f      	b.n	80025f4 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002554:	23ff      	movs	r3, #255	; 0xff
 8002556:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f103 0018 	add.w	r0, r3, #24
 800255e:	f107 020b 	add.w	r2, r7, #11
 8002562:	2301      	movs	r3, #1
 8002564:	f245 0101 	movw	r1, #20481	; 0x5001
 8002568:	f000 fccc 	bl	8002f04 <ov5640_write_reg>
 800256c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10c      	bne.n	800258e <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002574:	2340      	movs	r3, #64	; 0x40
 8002576:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0018 	add.w	r0, r3, #24
 800257e:	f107 020b 	add.w	r2, r7, #11
 8002582:	2301      	movs	r3, #1
 8002584:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002588:	f000 fcbc 	bl	8002f04 <ov5640_write_reg>
 800258c:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d031      	beq.n	80025f8 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002598:	60fb      	str	r3, [r7, #12]
      }
      break;
 800259a:	e02d      	b.n	80025f8 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 800259c:	237f      	movs	r3, #127	; 0x7f
 800259e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f103 0018 	add.w	r0, r3, #24
 80025a6:	f107 020b 	add.w	r2, r7, #11
 80025aa:	2301      	movs	r3, #1
 80025ac:	f245 0101 	movw	r1, #20481	; 0x5001
 80025b0:	f000 fca8 	bl	8002f04 <ov5640_write_reg>
 80025b4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10c      	bne.n	80025d6 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 80025bc:	2300      	movs	r3, #0
 80025be:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f103 0018 	add.w	r0, r3, #24
 80025c6:	f107 020b 	add.w	r2, r7, #11
 80025ca:	2301      	movs	r3, #1
 80025cc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025d0:	f000 fc98 	bl	8002f04 <ov5640_write_reg>
 80025d4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00f      	beq.n	80025fc <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e0:	60fb      	str	r3, [r7, #12]
      }

      break;
 80025e2:	e00b      	b.n	80025fc <OV5640_SetColorEffect+0x3f4>
      break;
 80025e4:	bf00      	nop
 80025e6:	e00a      	b.n	80025fe <OV5640_SetColorEffect+0x3f6>
      break;
 80025e8:	bf00      	nop
 80025ea:	e008      	b.n	80025fe <OV5640_SetColorEffect+0x3f6>
      break;
 80025ec:	bf00      	nop
 80025ee:	e006      	b.n	80025fe <OV5640_SetColorEffect+0x3f6>
      break;
 80025f0:	bf00      	nop
 80025f2:	e004      	b.n	80025fe <OV5640_SetColorEffect+0x3f6>
      break;
 80025f4:	bf00      	nop
 80025f6:	e002      	b.n	80025fe <OV5640_SetColorEffect+0x3f6>
      break;
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <OV5640_SetColorEffect+0x3f6>
      break;
 80025fc:	bf00      	nop
  }

  return ret;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002612:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <OV5640_SetBrightness+0xdc>)
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	ca07      	ldmia	r2, {r0, r1, r2}
 800261a:	c303      	stmia	r3!, {r0, r1}
 800261c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800261e:	23ff      	movs	r3, #255	; 0xff
 8002620:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f103 0018 	add.w	r0, r3, #24
 8002628:	f107 020f 	add.w	r2, r7, #15
 800262c:	2301      	movs	r3, #1
 800262e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002632:	f000 fc67 	bl	8002f04 <ov5640_write_reg>
 8002636:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d111      	bne.n	8002662 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	3304      	adds	r3, #4
 8002642:	3320      	adds	r3, #32
 8002644:	443b      	add	r3, r7
 8002646:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800264a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 0018 	add.w	r0, r3, #24
 8002652:	f107 020f 	add.w	r2, r7, #15
 8002656:	2301      	movs	r3, #1
 8002658:	f245 5187 	movw	r1, #21895	; 0x5587
 800265c:	f000 fc52 	bl	8002f04 <ov5640_write_reg>
 8002660:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10c      	bne.n	8002682 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002668:	2304      	movs	r3, #4
 800266a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f103 0018 	add.w	r0, r3, #24
 8002672:	f107 020f 	add.w	r2, r7, #15
 8002676:	2301      	movs	r3, #1
 8002678:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800267c:	f000 fc42 	bl	8002f04 <ov5640_write_reg>
 8002680:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d127      	bne.n	80026d8 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	da12      	bge.n	80026b4 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f103 0018 	add.w	r0, r3, #24
 8002698:	f107 020f 	add.w	r2, r7, #15
 800269c:	2301      	movs	r3, #1
 800269e:	f245 5188 	movw	r1, #21896	; 0x5588
 80026a2:	f000 fc2f 	bl	8002f04 <ov5640_write_reg>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e011      	b.n	80026d8 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 80026b4:	2309      	movs	r3, #9
 80026b6:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f103 0018 	add.w	r0, r3, #24
 80026be:	f107 020f 	add.w	r2, r7, #15
 80026c2:	2301      	movs	r3, #1
 80026c4:	f245 5188 	movw	r1, #21896	; 0x5588
 80026c8:	f000 fc1c 	bl	8002f04 <ov5640_write_reg>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80026d8:	69fb      	ldr	r3, [r7, #28]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800fd80 	.word	0x0800fd80

080026e8 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80026f2:	4a30      	ldr	r2, [pc, #192]	; (80027b4 <OV5640_SetSaturation+0xcc>)
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026fa:	c303      	stmia	r3!, {r0, r1}
 80026fc:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 0018 	add.w	r0, r3, #24
 8002708:	f107 020f 	add.w	r2, r7, #15
 800270c:	2301      	movs	r3, #1
 800270e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002712:	f000 fbf7 	bl	8002f04 <ov5640_write_reg>
 8002716:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d111      	bne.n	8002742 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3304      	adds	r3, #4
 8002722:	3320      	adds	r3, #32
 8002724:	443b      	add	r3, r7
 8002726:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800272a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f103 0018 	add.w	r0, r3, #24
 8002732:	f107 020f 	add.w	r2, r7, #15
 8002736:	2301      	movs	r3, #1
 8002738:	f245 5183 	movw	r1, #21891	; 0x5583
 800273c:	f000 fbe2 	bl	8002f04 <ov5640_write_reg>
 8002740:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 0018 	add.w	r0, r3, #24
 800274e:	f107 020f 	add.w	r2, r7, #15
 8002752:	2301      	movs	r3, #1
 8002754:	f245 5184 	movw	r1, #21892	; 0x5584
 8002758:	f000 fbd4 	bl	8002f04 <ov5640_write_reg>
 800275c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002764:	2302      	movs	r3, #2
 8002766:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 0018 	add.w	r0, r3, #24
 800276e:	f107 020f 	add.w	r2, r7, #15
 8002772:	2301      	movs	r3, #1
 8002774:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002778:	f000 fbc4 	bl	8002f04 <ov5640_write_reg>
 800277c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10c      	bne.n	800279e <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002784:	2341      	movs	r3, #65	; 0x41
 8002786:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0018 	add.w	r0, r3, #24
 800278e:	f107 020f 	add.w	r2, r7, #15
 8002792:	2301      	movs	r3, #1
 8002794:	f245 5188 	movw	r1, #21896	; 0x5588
 8002798:	f000 fbb4 	bl	8002f04 <ov5640_write_reg>
 800279c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a8:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80027aa:	69fb      	ldr	r3, [r7, #28]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	0800fd8c 	.word	0x0800fd8c

080027b8 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80027c2:	4a30      	ldr	r2, [pc, #192]	; (8002884 <OV5640_SetContrast+0xcc>)
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ca:	c303      	stmia	r3!, {r0, r1}
 80027cc:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80027ce:	23ff      	movs	r3, #255	; 0xff
 80027d0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0018 	add.w	r0, r3, #24
 80027d8:	f107 020f 	add.w	r2, r7, #15
 80027dc:	2301      	movs	r3, #1
 80027de:	f245 0101 	movw	r1, #20481	; 0x5001
 80027e2:	f000 fb8f 	bl	8002f04 <ov5640_write_reg>
 80027e6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80027ee:	2304      	movs	r3, #4
 80027f0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f103 0018 	add.w	r0, r3, #24
 80027f8:	f107 020f 	add.w	r2, r7, #15
 80027fc:	2301      	movs	r3, #1
 80027fe:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002802:	f000 fb7f 	bl	8002f04 <ov5640_write_reg>
 8002806:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d111      	bne.n	8002832 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3304      	adds	r3, #4
 8002812:	3320      	adds	r3, #32
 8002814:	443b      	add	r3, r7
 8002816:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800281a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f103 0018 	add.w	r0, r3, #24
 8002822:	f107 020f 	add.w	r2, r7, #15
 8002826:	2301      	movs	r3, #1
 8002828:	f245 5186 	movw	r1, #21894	; 0x5586
 800282c:	f000 fb6a 	bl	8002f04 <ov5640_write_reg>
 8002830:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0018 	add.w	r0, r3, #24
 800283e:	f107 020f 	add.w	r2, r7, #15
 8002842:	2301      	movs	r3, #1
 8002844:	f245 5185 	movw	r1, #21893	; 0x5585
 8002848:	f000 fb5c 	bl	8002f04 <ov5640_write_reg>
 800284c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10c      	bne.n	800286e <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002854:	2341      	movs	r3, #65	; 0x41
 8002856:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0018 	add.w	r0, r3, #24
 800285e:	f107 020f 	add.w	r2, r7, #15
 8002862:	2301      	movs	r3, #1
 8002864:	f245 5188 	movw	r1, #21896	; 0x5588
 8002868:	f000 fb4c 	bl	8002f04 <ov5640_write_reg>
 800286c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002878:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800287a:	69fb      	ldr	r3, [r7, #28]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0800fd98 	.word	0x0800fd98

08002888 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002892:	4a3c      	ldr	r2, [pc, #240]	; (8002984 <OV5640_SetHueDegree+0xfc>)
 8002894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002898:	ca07      	ldmia	r2, {r0, r1, r2}
 800289a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800289e:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <OV5640_SetHueDegree+0x100>)
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80028aa:	4a38      	ldr	r2, [pc, #224]	; (800298c <OV5640_SetHueDegree+0x104>)
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80028b6:	23ff      	movs	r3, #255	; 0xff
 80028b8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f103 0018 	add.w	r0, r3, #24
 80028c0:	f107 020f 	add.w	r2, r7, #15
 80028c4:	2301      	movs	r3, #1
 80028c6:	f245 0101 	movw	r1, #20481	; 0x5001
 80028ca:	f000 fb1b 	bl	8002f04 <ov5640_write_reg>
 80028ce:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 80028d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 0018 	add.w	r0, r3, #24
 80028e0:	f107 020f 	add.w	r2, r7, #15
 80028e4:	2301      	movs	r3, #1
 80028e6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028ea:	f000 fb0b 	bl	8002f04 <ov5640_write_reg>
 80028ee:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d111      	bne.n	800291a <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	3306      	adds	r3, #6
 80028fa:	3338      	adds	r3, #56	; 0x38
 80028fc:	443b      	add	r3, r7
 80028fe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002902:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f103 0018 	add.w	r0, r3, #24
 800290a:	f107 020f 	add.w	r2, r7, #15
 800290e:	2301      	movs	r3, #1
 8002910:	f245 5181 	movw	r1, #21889	; 0x5581
 8002914:	f000 faf6 	bl	8002f04 <ov5640_write_reg>
 8002918:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	3306      	adds	r3, #6
 8002924:	3338      	adds	r3, #56	; 0x38
 8002926:	443b      	add	r3, r7
 8002928:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800292c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f103 0018 	add.w	r0, r3, #24
 8002934:	f107 020f 	add.w	r2, r7, #15
 8002938:	2301      	movs	r3, #1
 800293a:	f245 5182 	movw	r1, #21890	; 0x5582
 800293e:	f000 fae1 	bl	8002f04 <ov5640_write_reg>
 8002942:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002946:	2b00      	cmp	r3, #0
 8002948:	d111      	bne.n	800296e <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	3306      	adds	r3, #6
 800294e:	3338      	adds	r3, #56	; 0x38
 8002950:	443b      	add	r3, r7
 8002952:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002956:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f103 0018 	add.w	r0, r3, #24
 800295e:	f107 020f 	add.w	r2, r7, #15
 8002962:	2301      	movs	r3, #1
 8002964:	f245 5188 	movw	r1, #21896	; 0x5588
 8002968:	f000 facc 	bl	8002f04 <ov5640_write_reg>
 800296c:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800297c:	4618      	mov	r0, r3
 800297e:	3738      	adds	r7, #56	; 0x38
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	0800fda4 	.word	0x0800fda4
 8002988:	0800fdb0 	.word	0x0800fdb0
 800298c:	0800fdbc 	.word	0x0800fdbc

08002990 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f103 0018 	add.w	r0, r3, #24
 80029a4:	f107 020b 	add.w	r2, r7, #11
 80029a8:	2301      	movs	r3, #1
 80029aa:	f643 0120 	movw	r1, #14368	; 0x3820
 80029ae:	f000 fa92 	bl	8002ed6 <ov5640_read_reg>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e0cb      	b.n	8002b58 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 80029c0:	7afb      	ldrb	r3, [r7, #11]
 80029c2:	f023 0306 	bic.w	r3, r3, #6
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f103 0018 	add.w	r0, r3, #24
 80029d0:	f107 020a 	add.w	r2, r7, #10
 80029d4:	2301      	movs	r3, #1
 80029d6:	f643 0121 	movw	r1, #14369	; 0x3821
 80029da:	f000 fa7c 	bl	8002ed6 <ov5640_read_reg>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e0b5      	b.n	8002b58 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80029f0:	7abb      	ldrb	r3, [r7, #10]
 80029f2:	f023 0306 	bic.w	r3, r3, #6
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d056      	beq.n	8002aae <OV5640_MirrorFlipConfig+0x11e>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d87f      	bhi.n	8002b06 <OV5640_MirrorFlipConfig+0x176>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d029      	beq.n	8002a60 <OV5640_MirrorFlipConfig+0xd0>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d179      	bne.n	8002b06 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f103 0018 	add.w	r0, r3, #24
 8002a18:	f107 020b 	add.w	r2, r7, #11
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002a22:	f000 fa6f 	bl	8002f04 <ov5640_write_reg>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a30:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002a32:	e08a      	b.n	8002b4a <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002a34:	7abb      	ldrb	r3, [r7, #10]
 8002a36:	f043 0306 	orr.w	r3, r3, #6
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 0018 	add.w	r0, r3, #24
 8002a44:	f107 020a 	add.w	r2, r7, #10
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f643 0121 	movw	r1, #14369	; 0x3821
 8002a4e:	f000 fa59 	bl	8002f04 <ov5640_write_reg>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d078      	beq.n	8002b4a <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a5c:	60fb      	str	r3, [r7, #12]
          break;
 8002a5e:	e074      	b.n	8002b4a <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	f043 0306 	orr.w	r3, r3, #6
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f103 0018 	add.w	r0, r3, #24
 8002a70:	f107 020b 	add.w	r2, r7, #11
 8002a74:	2301      	movs	r3, #1
 8002a76:	f643 0120 	movw	r1, #14368	; 0x3820
 8002a7a:	f000 fa43 	bl	8002f04 <ov5640_write_reg>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a88:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002a8a:	e060      	b.n	8002b4e <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0018 	add.w	r0, r3, #24
 8002a92:	f107 020a 	add.w	r2, r7, #10
 8002a96:	2301      	movs	r3, #1
 8002a98:	f643 0121 	movw	r1, #14369	; 0x3821
 8002a9c:	f000 fa32 	bl	8002f04 <ov5640_write_reg>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d053      	beq.n	8002b4e <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aaa:	60fb      	str	r3, [r7, #12]
          break;
 8002aac:	e04f      	b.n	8002b4e <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	f043 0306 	orr.w	r3, r3, #6
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f103 0018 	add.w	r0, r3, #24
 8002abe:	f107 020b 	add.w	r2, r7, #11
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f643 0120 	movw	r1, #14368	; 0x3820
 8002ac8:	f000 fa1c 	bl	8002f04 <ov5640_write_reg>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad6:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ad8:	e03b      	b.n	8002b52 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002ada:	7abb      	ldrb	r3, [r7, #10]
 8002adc:	f043 0306 	orr.w	r3, r3, #6
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f103 0018 	add.w	r0, r3, #24
 8002aea:	f107 020a 	add.w	r2, r7, #10
 8002aee:	2301      	movs	r3, #1
 8002af0:	f643 0121 	movw	r1, #14369	; 0x3821
 8002af4:	f000 fa06 	bl	8002f04 <ov5640_write_reg>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d029      	beq.n	8002b52 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b02:	60fb      	str	r3, [r7, #12]
          break;
 8002b04:	e025      	b.n	8002b52 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0018 	add.w	r0, r3, #24
 8002b0c:	f107 020b 	add.w	r2, r7, #11
 8002b10:	2301      	movs	r3, #1
 8002b12:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b16:	f000 f9f5 	bl	8002f04 <ov5640_write_reg>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b24:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b26:	e016      	b.n	8002b56 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f103 0018 	add.w	r0, r3, #24
 8002b2e:	f107 020a 	add.w	r2, r7, #10
 8002b32:	2301      	movs	r3, #1
 8002b34:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b38:	f000 f9e4 	bl	8002f04 <ov5640_write_reg>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b46:	60fb      	str	r3, [r7, #12]
          break;
 8002b48:	e005      	b.n	8002b56 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002b4a:	bf00      	nop
 8002b4c:	e004      	b.n	8002b58 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002b56:	bf00      	nop
      }
    }
  }

  return ret;
 8002b58:	68fb      	ldr	r3, [r7, #12]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff f8a2 	bl	8001cc0 <OV5640_GetResolution>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e04e      	b.n	8002c28 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b44      	cmp	r3, #68	; 0x44
 8002b92:	d112      	bne.n	8002bba <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002b94:	2310      	movs	r3, #16
 8002b96:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f103 0018 	add.w	r0, r3, #24
 8002b9e:	f107 020b 	add.w	r2, r7, #11
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002ba8:	f000 f9ac 	bl	8002f04 <ov5640_write_reg>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d03a      	beq.n	8002c28 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e036      	b.n	8002c28 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d802      	bhi.n	8002bc6 <OV5640_ZoomConfig+0x64>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002bc4:	e00a      	b.n	8002bdc <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d004      	beq.n	8002bd4 <OV5640_ZoomConfig+0x72>
          break;
 8002bca:	e007      	b.n	8002bdc <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	613b      	str	r3, [r7, #16]
          break;
 8002bd2:	e003      	b.n	8002bdc <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
          break;
 8002bda:	bf00      	nop
      }

      tmp = 0x00;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0018 	add.w	r0, r3, #24
 8002be6:	f107 020b 	add.w	r2, r7, #11
 8002bea:	2301      	movs	r3, #1
 8002bec:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002bf0:	f000 f988 	bl	8002f04 <ov5640_write_reg>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e012      	b.n	8002c28 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f103 0018 	add.w	r0, r3, #24
 8002c0e:	f107 020b 	add.w	r2, r7, #11
 8002c12:	2301      	movs	r3, #1
 8002c14:	f245 6101 	movw	r1, #22017	; 0x5601
 8002c18:	f000 f974 	bl	8002f04 <ov5640_write_reg>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c26:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002c28:	697b      	ldr	r3, [r7, #20]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	f040 80ce 	bne.w	8002de4 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f103 0018 	add.w	r0, r3, #24
 8002c4e:	f107 020b 	add.w	r2, r7, #11
 8002c52:	2301      	movs	r3, #1
 8002c54:	f243 0138 	movw	r1, #12344	; 0x3038
 8002c58:	f000 f954 	bl	8002f04 <ov5640_write_reg>
 8002c5c:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f103 0018 	add.w	r0, r3, #24
 8002c6a:	f107 020b 	add.w	r2, r7, #11
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f243 0139 	movw	r1, #12345	; 0x3039
 8002c74:	f000 f946 	bl	8002f04 <ov5640_write_reg>
 8002c78:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10c      	bne.n	8002c9a <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002c80:	237c      	movs	r3, #124	; 0x7c
 8002c82:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0018 	add.w	r0, r3, #24
 8002c8a:	f107 020b 	add.w	r2, r7, #11
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002c94:	f000 f936 	bl	8002f04 <ov5640_write_reg>
 8002c98:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10c      	bne.n	8002cba <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f103 0018 	add.w	r0, r3, #24
 8002caa:	f107 020b 	add.w	r2, r7, #11
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002cb4:	f000 f926 	bl	8002f04 <ov5640_write_reg>
 8002cb8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10c      	bne.n	8002cda <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002cc0:	2327      	movs	r3, #39	; 0x27
 8002cc2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f103 0018 	add.w	r0, r3, #24
 8002cca:	f107 020b 	add.w	r2, r7, #11
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002cd4:	f000 f916 	bl	8002f04 <ov5640_write_reg>
 8002cd8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10c      	bne.n	8002cfa <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 0018 	add.w	r0, r3, #24
 8002cea:	f107 020b 	add.w	r2, r7, #11
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002cf4:	f000 f906 	bl	8002f04 <ov5640_write_reg>
 8002cf8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10c      	bne.n	8002d1a <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002d00:	23f6      	movs	r3, #246	; 0xf6
 8002d02:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f103 0018 	add.w	r0, r3, #24
 8002d0a:	f107 020b 	add.w	r2, r7, #11
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002d14:	f000 f8f6 	bl	8002f04 <ov5640_write_reg>
 8002d18:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10c      	bne.n	8002d3a <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002d20:	2304      	movs	r3, #4
 8002d22:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f103 0018 	add.w	r0, r3, #24
 8002d2a:	f107 020b 	add.w	r2, r7, #11
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002d34:	f000 f8e6 	bl	8002f04 <ov5640_write_reg>
 8002d38:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f103 0018 	add.w	r0, r3, #24
 8002d46:	f107 020b 	add.w	r2, r7, #11
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002d50:	f000 f8d8 	bl	8002f04 <ov5640_write_reg>
 8002d54:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10c      	bne.n	8002d76 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002d5c:	230b      	movs	r3, #11
 8002d5e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f103 0018 	add.w	r0, r3, #24
 8002d66:	f107 020b 	add.w	r2, r7, #11
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002d70:	f000 f8c8 	bl	8002f04 <ov5640_write_reg>
 8002d74:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10c      	bne.n	8002d96 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002d7c:	2388      	movs	r3, #136	; 0x88
 8002d7e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f103 0018 	add.w	r0, r3, #24
 8002d86:	f107 020b 	add.w	r2, r7, #11
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002d90:	f000 f8b8 	bl	8002f04 <ov5640_write_reg>
 8002d94:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10c      	bne.n	8002db6 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002d9c:	230b      	movs	r3, #11
 8002d9e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f103 0018 	add.w	r0, r3, #24
 8002da6:	f107 020b 	add.w	r2, r7, #11
 8002daa:	2301      	movs	r3, #1
 8002dac:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002db0:	f000 f8a8 	bl	8002f04 <ov5640_write_reg>
 8002db4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10c      	bne.n	8002dd6 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002dbc:	2388      	movs	r3, #136	; 0x88
 8002dbe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 0018 	add.w	r0, r3, #24
 8002dc6:	f107 020b 	add.w	r2, r7, #11
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002dd0:	f000 f898 	bl	8002f04 <ov5640_write_reg>
 8002dd4:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02b      	beq.n	8002e34 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e027      	b.n	8002e34 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f103 0018 	add.w	r0, r3, #24
 8002dea:	f107 020b 	add.w	r2, r7, #11
 8002dee:	2301      	movs	r3, #1
 8002df0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002df4:	f000 f86f 	bl	8002ed6 <ov5640_read_reg>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e016      	b.n	8002e34 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f103 0018 	add.w	r0, r3, #24
 8002e1a:	f107 020b 	add.w	r2, r7, #11
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002e24:	f000 f86e 	bl	8002f04 <ov5640_write_reg>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e32:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002e34:	68fb      	ldr	r3, [r7, #12]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	4798      	blx	r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002e52:	bf00      	nop
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	4798      	blx	r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8f5      	bhi.n	8002e54 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e72:	b590      	push	{r4, r7, lr}
 8002e74:	b087      	sub	sp, #28
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	460b      	mov	r3, r1
 8002e80:	817b      	strh	r3, [r7, #10]
 8002e82:	4613      	mov	r3, r2
 8002e84:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	691c      	ldr	r4, [r3, #16]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	8918      	ldrh	r0, [r3, #8]
 8002e92:	893b      	ldrh	r3, [r7, #8]
 8002e94:	8979      	ldrh	r1, [r7, #10]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	47a0      	blx	r4
 8002e9a:	4603      	mov	r3, r0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd90      	pop	{r4, r7, pc}

08002ea4 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	817b      	strh	r3, [r7, #10]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	68dc      	ldr	r4, [r3, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	8918      	ldrh	r0, [r3, #8]
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	47a0      	blx	r4
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002ed6:	b590      	push	{r4, r7, lr}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685c      	ldr	r4, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6898      	ldr	r0, [r3, #8]
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	8979      	ldrh	r1, [r7, #10]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	47a0      	blx	r4
 8002efa:	4603      	mov	r3, r0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	460b      	mov	r3, r1
 8002f12:	817b      	strh	r3, [r7, #10]
 8002f14:	4613      	mov	r3, r2
 8002f16:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681c      	ldr	r4, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6898      	ldr	r0, [r3, #8]
 8002f20:	893b      	ldrh	r3, [r7, #8]
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	47a0      	blx	r4
 8002f28:	4603      	mov	r3, r0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
	...

08002f34 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002f3c:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <RetargetInit+0x28>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <RetargetInit+0x2c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6898      	ldr	r0, [r3, #8]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f00c fac5 	bl	800f4dc <setvbuf>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	240002e8 	.word	0x240002e8
 8002f60:	24000054 	.word	0x24000054

08002f64 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d002      	beq.n	8002f7c <_write+0x18>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d111      	bne.n	8002fa0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <_write+0x54>)
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	f00a fa5a 	bl	800d442 <HAL_UART_Transmit>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <_write+0x38>
      return len;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	e008      	b.n	8002fae <_write+0x4a>
    else
      return EIO;
 8002f9c:	2305      	movs	r3, #5
 8002f9e:	e006      	b.n	8002fae <_write+0x4a>
  }
  errno = EBADF;
 8002fa0:	f00c fa6a 	bl	800f478 <__errno>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2209      	movs	r2, #9
 8002fa8:	601a      	str	r2, [r3, #0]
  return -1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	240002e8 	.word	0x240002e8

08002fbc <_close>:

int _close(int fd) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db04      	blt.n	8002fd4 <_close+0x18>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	dc01      	bgt.n	8002fd4 <_close+0x18>
    return 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e006      	b.n	8002fe2 <_close+0x26>

  errno = EBADF;
 8002fd4:	f00c fa50 	bl	800f478 <__errno>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2209      	movs	r2, #9
 8002fdc:	601a      	str	r2, [r3, #0]
  return -1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <_read>:

int _read(int fd, char* ptr, int len) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d110      	bne.n	8003020 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <_read+0x4c>)
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003006:	2201      	movs	r2, #1
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	f00a faa8 	bl	800d55e <HAL_UART_Receive>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <_read+0x30>
      return 1;
 8003018:	2301      	movs	r3, #1
 800301a:	e008      	b.n	800302e <_read+0x42>
    else
      return EIO;
 800301c:	2305      	movs	r3, #5
 800301e:	e006      	b.n	800302e <_read+0x42>
  }
  errno = EBADF;
 8003020:	f00c fa2a 	bl	800f478 <__errno>
 8003024:	4603      	mov	r3, r0
 8003026:	2209      	movs	r2, #9
 8003028:	601a      	str	r2, [r3, #0]
  return -1;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	240002e8 	.word	0x240002e8

0800303c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db08      	blt.n	800305e <_fstat+0x22>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	dc05      	bgt.n	800305e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003058:	605a      	str	r2, [r3, #4]
    return 0;
 800305a:	2300      	movs	r3, #0
 800305c:	e005      	b.n	800306a <_fstat+0x2e>
  }

  errno = EBADF;
 800305e:	f00c fa0b 	bl	800f478 <__errno>
 8003062:	4603      	mov	r3, r0
 8003064:	2209      	movs	r2, #9
 8003066:	601a      	str	r2, [r3, #0]
  return 0;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <MX_RTC_Init+0x4c>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <MX_RTC_Init+0x50>)
 800307c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <MX_RTC_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <MX_RTC_Init+0x4c>)
 8003086:	227f      	movs	r2, #127	; 0x7f
 8003088:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <MX_RTC_Init+0x4c>)
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <MX_RTC_Init+0x4c>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <MX_RTC_Init+0x4c>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <MX_RTC_Init+0x4c>)
 800309e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030a2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <MX_RTC_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030aa:	4805      	ldr	r0, [pc, #20]	; (80030c0 <MX_RTC_Init+0x4c>)
 80030ac:	f009 ffc2 	bl	800d034 <HAL_RTC_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80030b6:	f7fe fa95 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	240002ec 	.word	0x240002ec
 80030c4:	58004000 	.word	0x58004000

080030c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0b2      	sub	sp, #200	; 0xc8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d0:	f107 0308 	add.w	r3, r7, #8
 80030d4:	22c0      	movs	r2, #192	; 0xc0
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f00c f9f7 	bl	800f4cc <memset>
  if(rtcHandle->Instance==RTC)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_RTC_MspInit+0x5c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d119      	bne.n	800311c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030fc:	f107 0308 	add.w	r3, r7, #8
 8003100:	4618      	mov	r0, r3
 8003102:	f008 f9b7 	bl	800b474 <HAL_RCCEx_PeriphCLKConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800310c:	f7fe fa6a 	bl	80015e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RTC_MspInit+0x60>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_RTC_MspInit+0x60>)
 8003116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800311c:	bf00      	nop
 800311e:	37c8      	adds	r7, #200	; 0xc8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	58004000 	.word	0x58004000
 8003128:	58024400 	.word	0x58024400

0800312c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <BSP_I2C4_Init+0x64>)
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <BSP_I2C4_Init+0x68>)
 800313a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <BSP_I2C4_Init+0x6c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11f      	bne.n	8003184 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <BSP_I2C4_Init+0x6c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a13      	ldr	r2, [pc, #76]	; (8003198 <BSP_I2C4_Init+0x6c>)
 800314c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800314e:	4810      	ldr	r0, [pc, #64]	; (8003190 <BSP_I2C4_Init+0x64>)
 8003150:	f006 fa2a 	bl	80095a8 <HAL_I2C_GetState>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d114      	bne.n	8003184 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800315a:	480d      	ldr	r0, [pc, #52]	; (8003190 <BSP_I2C4_Init+0x64>)
 800315c:	f000 fb60 	bl	8003820 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003160:	f008 f972 	bl	800b448 <HAL_RCC_GetPCLK2Freq>
 8003164:	4603      	mov	r3, r0
 8003166:	490d      	ldr	r1, [pc, #52]	; (800319c <BSP_I2C4_Init+0x70>)
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f8e3 	bl	8003334 <I2C_GetTiming>
 800316e:	4603      	mov	r3, r0
 8003170:	4619      	mov	r1, r3
 8003172:	4807      	ldr	r0, [pc, #28]	; (8003190 <BSP_I2C4_Init+0x64>)
 8003174:	f000 f838 	bl	80031e8 <MX_I2C4_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800317e:	f06f 0307 	mvn.w	r3, #7
 8003182:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	24000d1c 	.word	0x24000d1c
 8003194:	58001c00 	.word	0x58001c00
 8003198:	24000314 	.word	0x24000314
 800319c:	000186a0 	.word	0x000186a0

080031a0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <BSP_I2C4_DeInit+0x40>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <BSP_I2C4_DeInit+0x40>)
 80031b2:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <BSP_I2C4_DeInit+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80031bc:	4809      	ldr	r0, [pc, #36]	; (80031e4 <BSP_I2C4_DeInit+0x44>)
 80031be:	f000 fb9b 	bl	80038f8 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80031c2:	4808      	ldr	r0, [pc, #32]	; (80031e4 <BSP_I2C4_DeInit+0x44>)
 80031c4:	f005 ff7e 	bl	80090c4 <HAL_I2C_DeInit>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80031ce:	f06f 0307 	mvn.w	r3, #7
 80031d2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80031d4:	687b      	ldr	r3, [r7, #4]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	24000314 	.word	0x24000314
 80031e4:	24000d1c 	.word	0x24000d1c

080031e8 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f005 febc 	bl	8008fa4 <HAL_I2C_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e014      	b.n	8003262 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f006 fc84 	bl	8009b4c <HAL_I2CEx_ConfigAnalogFilter>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e008      	b.n	8003262 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003250:	2100      	movs	r1, #0
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f006 fcc5 	bl	8009be2 <HAL_I2CEx_ConfigDigitalFilter>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60ba      	str	r2, [r7, #8]
 8003274:	461a      	mov	r2, r3
 8003276:	4603      	mov	r3, r0
 8003278:	81fb      	strh	r3, [r7, #14]
 800327a:	460b      	mov	r3, r1
 800327c:	81bb      	strh	r3, [r7, #12]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003282:	89b9      	ldrh	r1, [r7, #12]
 8003284:	89f8      	ldrh	r0, [r7, #14]
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2202      	movs	r2, #2
 800328e:	f000 fb57 	bl	8003940 <I2C4_WriteReg>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e00c      	b.n	80032b8 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800329e:	4809      	ldr	r0, [pc, #36]	; (80032c4 <BSP_I2C4_WriteReg16+0x58>)
 80032a0:	f006 f990 	bl	80095c4 <HAL_I2C_GetError>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d103      	bne.n	80032b2 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80032aa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e002      	b.n	80032b8 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80032b2:	f06f 0303 	mvn.w	r3, #3
 80032b6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80032b8:	697b      	ldr	r3, [r7, #20]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	24000d1c 	.word	0x24000d1c

080032c8 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60ba      	str	r2, [r7, #8]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	81fb      	strh	r3, [r7, #14]
 80032d6:	460b      	mov	r3, r1
 80032d8:	81bb      	strh	r3, [r7, #12]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80032de:	89b9      	ldrh	r1, [r7, #12]
 80032e0:	89f8      	ldrh	r0, [r7, #14]
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f000 fb4f 	bl	800398c <I2C4_ReadReg>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e00c      	b.n	8003314 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80032fa:	4809      	ldr	r0, [pc, #36]	; (8003320 <BSP_I2C4_ReadReg16+0x58>)
 80032fc:	f006 f962 	bl	80095c4 <HAL_I2C_GetError>
 8003300:	4603      	mov	r3, r0
 8003302:	2b04      	cmp	r3, #4
 8003304:	d103      	bne.n	800330e <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003306:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e002      	b.n	8003314 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800330e:	f06f 0303 	mvn.w	r3, #3
 8003312:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003314:	697b      	ldr	r3, [r7, #20]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	24000d1c 	.word	0x24000d1c

08003324 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003328:	f000 ffd4 	bl	80042d4 <HAL_GetTick>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d06b      	beq.n	8003420 <I2C_GetTiming+0xec>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d068      	beq.n	8003420 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e060      	b.n	8003416 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003354:	4a35      	ldr	r2, [pc, #212]	; (800342c <I2C_GetTiming+0xf8>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d352      	bcc.n	8003410 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800336a:	4a30      	ldr	r2, [pc, #192]	; (800342c <I2C_GetTiming+0xf8>)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	3308      	adds	r3, #8
 8003378:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d847      	bhi.n	8003410 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003380:	6939      	ldr	r1, [r7, #16]
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f856 	bl	8003434 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f940 	bl	8003610 <I2C_Compute_SCLL_SCLH>
 8003390:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b7f      	cmp	r3, #127	; 0x7f
 8003396:	d842      	bhi.n	800341e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003398:	4925      	ldr	r1, [pc, #148]	; (8003430 <I2C_GetTiming+0xfc>)
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80033aa:	4821      	ldr	r0, [pc, #132]	; (8003430 <I2C_GetTiming+0xfc>)
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4403      	add	r3, r0
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	051b      	lsls	r3, r3, #20
 80033be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80033c2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80033c4:	481a      	ldr	r0, [pc, #104]	; (8003430 <I2C_GetTiming+0xfc>)
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4403      	add	r3, r0
 80033d2:	3308      	adds	r3, #8
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80033dc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80033de:	4814      	ldr	r0, [pc, #80]	; (8003430 <I2C_GetTiming+0xfc>)
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4403      	add	r3, r0
 80033ec:	330c      	adds	r3, #12
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80033f4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80033f6:	480e      	ldr	r0, [pc, #56]	; (8003430 <I2C_GetTiming+0xfc>)
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4403      	add	r3, r0
 8003404:	3310      	adds	r3, #16
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800340a:	430b      	orrs	r3, r1
 800340c:	617b      	str	r3, [r7, #20]
        }
        break;
 800340e:	e006      	b.n	800341e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	3301      	adds	r3, #1
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d99b      	bls.n	8003354 <I2C_GetTiming+0x20>
 800341c:	e000      	b.n	8003420 <I2C_GetTiming+0xec>
        break;
 800341e:	bf00      	nop
      }
    }
  }

  return ret;
 8003420:	697b      	ldr	r3, [r7, #20]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	080102c4 	.word	0x080102c4
 8003430:	24000318 	.word	0x24000318

08003434 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003434:	b480      	push	{r7}
 8003436:	b08f      	sub	sp, #60	; 0x3c
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800343e:	2310      	movs	r3, #16
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	085a      	lsrs	r2, r3, #1
 8003446:	4b6e      	ldr	r3, [pc, #440]	; (8003600 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003448:	4413      	add	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003450:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003452:	2332      	movs	r3, #50	; 0x32
 8003454:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003456:	f44f 7382 	mov.w	r3, #260	; 0x104
 800345a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800345c:	4a69      	ldr	r2, [pc, #420]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3324      	adds	r3, #36	; 0x24
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	4a65      	ldr	r2, [pc, #404]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	330c      	adds	r3, #12
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003480:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003482:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003484:	495f      	ldr	r1, [pc, #380]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	202c      	movs	r0, #44	; 0x2c
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	440b      	add	r3, r1
 8003490:	3328      	adds	r3, #40	; 0x28
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3303      	adds	r3, #3
 8003496:	69f9      	ldr	r1, [r7, #28]
 8003498:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3310      	adds	r3, #16
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	4a54      	ldr	r2, [pc, #336]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3320      	adds	r3, #32
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80034c4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80034c6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80034c8:	494e      	ldr	r1, [pc, #312]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	202c      	movs	r0, #44	; 0x2c
 80034ce:	fb00 f303 	mul.w	r3, r0, r3
 80034d2:	440b      	add	r3, r1
 80034d4:	3328      	adds	r3, #40	; 0x28
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3304      	adds	r3, #4
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80034e4:	4a47      	ldr	r2, [pc, #284]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3320      	adds	r3, #32
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	4a43      	ldr	r2, [pc, #268]	; (8003604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	212c      	movs	r1, #44	; 0x2c
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	3314      	adds	r3, #20
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4403      	add	r3, r0
 8003508:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	2b00      	cmp	r3, #0
 800350e:	dc01      	bgt.n	8003514 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	2b00      	cmp	r3, #0
 8003518:	dc01      	bgt.n	800351e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	e062      	b.n	80035ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	e059      	b.n	80035de <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	3301      	adds	r3, #1
 800352e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003530:	3201      	adds	r2, #1
 8003532:	fb03 f202 	mul.w	r2, r3, r2
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	429a      	cmp	r2, r3
 8003544:	d348      	bcc.n	80035d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	e042      	b.n	80035d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	3301      	adds	r3, #1
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	fb03 f202 	mul.w	r2, r3, r2
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d332      	bcc.n	80035cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	d82e      	bhi.n	80035cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800356e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	429a      	cmp	r2, r3
 8003574:	d02a      	beq.n	80035cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4924      	ldr	r1, [pc, #144]	; (800360c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003588:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	491f      	ldr	r1, [pc, #124]	; (800360c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3304      	adds	r3, #4
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4919      	ldr	r1, [pc, #100]	; (800360c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3308      	adds	r3, #8
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4a11      	ldr	r2, [pc, #68]	; (8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035c2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b7f      	cmp	r3, #127	; 0x7f
 80035ca:	d812      	bhi.n	80035f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	3301      	adds	r3, #1
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d9b9      	bls.n	800354c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	3301      	adds	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	2b0f      	cmp	r3, #15
 80035e2:	d9a2      	bls.n	800352a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	3301      	adds	r3, #1
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d999      	bls.n	8003524 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80035f0:	e000      	b.n	80035f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80035f2:	bf00      	nop
          }
        }
      }
    }
  }
}
 80035f4:	373c      	adds	r7, #60	; 0x3c
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	3b9aca00 	.word	0x3b9aca00
 8003604:	080102c4 	.word	0x080102c4
 8003608:	24000d18 	.word	0x24000d18
 800360c:	24000318 	.word	0x24000318

08003610 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003610:	b480      	push	{r7}
 8003612:	b093      	sub	sp, #76	; 0x4c
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800361e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	085a      	lsrs	r2, r3, #1
 8003624:	4b7a      	ldr	r3, [pc, #488]	; (8003810 <I2C_Compute_SCLL_SCLH+0x200>)
 8003626:	4413      	add	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	fbb3 f3f2 	udiv	r3, r3, r2
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003630:	4a78      	ldr	r2, [pc, #480]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	085a      	lsrs	r2, r3, #1
 8003640:	4b73      	ldr	r3, [pc, #460]	; (8003810 <I2C_Compute_SCLL_SCLH+0x200>)
 8003642:	4413      	add	r3, r2
 8003644:	4973      	ldr	r1, [pc, #460]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	fb00 f202 	mul.w	r2, r0, r2
 800364e:	440a      	add	r2, r1
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	fbb3 f3f2 	udiv	r3, r3, r2
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003658:	2332      	movs	r3, #50	; 0x32
 800365a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800365c:	4a6d      	ldr	r2, [pc, #436]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3328      	adds	r3, #40	; 0x28
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003674:	4a67      	ldr	r2, [pc, #412]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a62      	ldr	r2, [pc, #392]	; (8003810 <I2C_Compute_SCLL_SCLH+0x200>)
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800368c:	4a61      	ldr	r2, [pc, #388]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3308      	adds	r3, #8
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5c      	ldr	r2, [pc, #368]	; (8003810 <I2C_Compute_SCLL_SCLH+0x200>)
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
 80036ac:	e0a3      	b.n	80037f6 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80036ae:	495a      	ldr	r1, [pc, #360]	; (8003818 <I2C_Compute_SCLL_SCLH+0x208>)
 80036b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036cc:	e08c      	b.n	80037e8 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	441a      	add	r2, r3
 80036d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d6:	3301      	adds	r3, #1
 80036d8:	6979      	ldr	r1, [r7, #20]
 80036da:	fb03 f101 	mul.w	r1, r3, r1
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	440b      	add	r3, r1
 80036e4:	4413      	add	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80036e8:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3318      	adds	r3, #24
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d971      	bls.n	80037e2 <I2C_Compute_SCLL_SCLH+0x1d2>
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	1ad2      	subs	r2, r2, r3
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370c:	429a      	cmp	r2, r3
 800370e:	d268      	bcs.n	80037e2 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003710:	2300      	movs	r3, #0
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38
 8003714:	e062      	b.n	80037dc <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	441a      	add	r2, r3
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	3301      	adds	r3, #1
 8003720:	6979      	ldr	r1, [r7, #20]
 8003722:	fb03 f101 	mul.w	r1, r3, r1
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	440b      	add	r3, r1
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	441a      	add	r2, r3
 8003736:	4937      	ldr	r1, [pc, #220]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	202c      	movs	r0, #44	; 0x2c
 800373c:	fb00 f303 	mul.w	r3, r0, r3
 8003740:	440b      	add	r3, r1
 8003742:	3320      	adds	r3, #32
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	441a      	add	r2, r3
 8003748:	4932      	ldr	r1, [pc, #200]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	202c      	movs	r0, #44	; 0x2c
 800374e:	fb00 f303 	mul.w	r3, r0, r3
 8003752:	440b      	add	r3, r1
 8003754:	3324      	adds	r3, #36	; 0x24
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4413      	add	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	429a      	cmp	r2, r3
 8003762:	d338      	bcc.n	80037d6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	d834      	bhi.n	80037d6 <I2C_Compute_SCLL_SCLH+0x1c6>
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <I2C_Compute_SCLL_SCLH+0x204>)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	331c      	adds	r3, #28
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	429a      	cmp	r2, r3
 8003780:	d329      	bcc.n	80037d6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	429a      	cmp	r2, r3
 8003788:	d225      	bcs.n	80037d6 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	2b00      	cmp	r3, #0
 8003796:	da02      	bge.n	800379e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	425b      	negs	r3, r3
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d917      	bls.n	80037d6 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80037aa:	491b      	ldr	r1, [pc, #108]	; (8003818 <I2C_Compute_SCLL_SCLH+0x208>)
 80037ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	3310      	adds	r3, #16
 80037ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037bc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80037be:	4916      	ldr	r1, [pc, #88]	; (8003818 <I2C_Compute_SCLL_SCLH+0x208>)
 80037c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	330c      	adds	r3, #12
 80037ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d0:	601a      	str	r2, [r3, #0]
              ret = count;
 80037d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	3301      	adds	r3, #1
 80037da:	63bb      	str	r3, [r7, #56]	; 0x38
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	2bff      	cmp	r3, #255	; 0xff
 80037e0:	d999      	bls.n	8003716 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80037e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e4:	3301      	adds	r3, #1
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	2bff      	cmp	r3, #255	; 0xff
 80037ec:	f67f af6f 	bls.w	80036ce <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	3301      	adds	r3, #1
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <I2C_Compute_SCLL_SCLH+0x20c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fc:	429a      	cmp	r2, r3
 80037fe:	f4ff af56 	bcc.w	80036ae <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003804:	4618      	mov	r0, r3
 8003806:	374c      	adds	r7, #76	; 0x4c
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	3b9aca00 	.word	0x3b9aca00
 8003814:	080102c4 	.word	0x080102c4
 8003818:	24000318 	.word	0x24000318
 800381c:	24000d18 	.word	0x24000d18

08003820 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003828:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <I2C4_MspInit+0xd0>)
 800382a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800382e:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <I2C4_MspInit+0xd0>)
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <I2C4_MspInit+0xd0>)
 800383a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <I2C4_MspInit+0xd0>)
 8003848:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800384c:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <I2C4_MspInit+0xd0>)
 800384e:	f043 0308 	orr.w	r3, r3, #8
 8003852:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <I2C4_MspInit+0xd0>)
 8003858:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003868:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800386a:	2312      	movs	r3, #18
 800386c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003872:	2302      	movs	r3, #2
 8003874:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003876:	2304      	movs	r3, #4
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	4619      	mov	r1, r3
 8003880:	481c      	ldr	r0, [pc, #112]	; (80038f4 <I2C4_MspInit+0xd4>)
 8003882:	f005 f8a1 	bl	80089c8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800388a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800388c:	2312      	movs	r3, #18
 800388e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003894:	2302      	movs	r3, #2
 8003896:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003898:	2304      	movs	r3, #4
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4619      	mov	r1, r3
 80038a2:	4814      	ldr	r0, [pc, #80]	; (80038f4 <I2C4_MspInit+0xd4>)
 80038a4:	f005 f890 	bl	80089c8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <I2C4_MspInit+0xd0>)
 80038aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038ae:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <I2C4_MspInit+0xd0>)
 80038b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <I2C4_MspInit+0xd0>)
 80038ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <I2C4_MspInit+0xd0>)
 80038c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038cc:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <I2C4_MspInit+0xd0>)
 80038ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <I2C4_MspInit+0xd0>)
 80038d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <I2C4_MspInit+0xd0>)
 80038de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80038e6:	bf00      	nop
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	58024400 	.word	0x58024400
 80038f4:	58020c00 	.word	0x58020c00

080038f8 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003904:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4619      	mov	r1, r3
 800390a:	480b      	ldr	r0, [pc, #44]	; (8003938 <I2C4_MspDeInit+0x40>)
 800390c:	f005 fa0c 	bl	8008d28 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003914:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4619      	mov	r1, r3
 800391a:	4807      	ldr	r0, [pc, #28]	; (8003938 <I2C4_MspDeInit+0x40>)
 800391c:	f005 fa04 	bl	8008d28 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <I2C4_MspDeInit+0x44>)
 8003922:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <I2C4_MspDeInit+0x44>)
 8003928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	58020c00 	.word	0x58020c00
 800393c:	58024400 	.word	0x58024400

08003940 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af04      	add	r7, sp, #16
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	4603      	mov	r3, r0
 800394a:	81fb      	strh	r3, [r7, #14]
 800394c:	460b      	mov	r3, r1
 800394e:	81bb      	strh	r3, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003954:	8978      	ldrh	r0, [r7, #10]
 8003956:	89ba      	ldrh	r2, [r7, #12]
 8003958:	89f9      	ldrh	r1, [r7, #14]
 800395a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800395e:	9302      	str	r3, [sp, #8]
 8003960:	8b3b      	ldrh	r3, [r7, #24]
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4603      	mov	r3, r0
 800396a:	4807      	ldr	r0, [pc, #28]	; (8003988 <I2C4_WriteReg+0x48>)
 800396c:	f005 fbee 	bl	800914c <HAL_I2C_Mem_Write>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003976:	2300      	movs	r3, #0
 8003978:	e001      	b.n	800397e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800397a:	f06f 0307 	mvn.w	r3, #7
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	24000d1c 	.word	0x24000d1c

0800398c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af04      	add	r7, sp, #16
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	4603      	mov	r3, r0
 8003996:	81fb      	strh	r3, [r7, #14]
 8003998:	460b      	mov	r3, r1
 800399a:	81bb      	strh	r3, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80039a0:	8978      	ldrh	r0, [r7, #10]
 80039a2:	89ba      	ldrh	r2, [r7, #12]
 80039a4:	89f9      	ldrh	r1, [r7, #14]
 80039a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039aa:	9302      	str	r3, [sp, #8]
 80039ac:	8b3b      	ldrh	r3, [r7, #24]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	4807      	ldr	r0, [pc, #28]	; (80039d4 <I2C4_ReadReg+0x48>)
 80039b8:	f005 fcdc 	bl	8009374 <HAL_I2C_Mem_Read>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e001      	b.n	80039ca <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80039c6:	f06f 0307 	mvn.w	r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	24000d1c 	.word	0x24000d1c

080039d8 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039ee:	f06f 0301 	mvn.w	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e02d      	b.n	8003a52 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 80039f6:	4819      	ldr	r0, [pc, #100]	; (8003a5c <BSP_CAMERA_Init+0x84>)
 80039f8:	f7fc fe2e 	bl	8000658 <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 80039fc:	f7fc fdf8 	bl	80005f0 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003a00:	2000      	movs	r0, #0
 8003a02:	f000 f887 	bl	8003b14 <BSP_CAMERA_HwReset>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003a0c:	f06f 0307 	mvn.w	r3, #7
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e01e      	b.n	8003a52 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	68b8      	ldr	r0, [r7, #8]
 8003a18:	f000 f93e 	bl	8003c98 <OV5640_Probe>
 8003a1c:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003a24:	f06f 0306 	mvn.w	r3, #6
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e012      	b.n	8003a52 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003a2c:	490c      	ldr	r1, [pc, #48]	; (8003a60 <BSP_CAMERA_Init+0x88>)
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	440b      	add	r3, r1
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <BSP_CAMERA_Init+0x88>)
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003a52:	697b      	ldr	r3, [r7, #20]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	240000d4 	.word	0x240000d4
 8003a60:	24000d74 	.word	0x24000d74

08003a64 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a76:	f06f 0301 	mvn.w	r3, #1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e022      	b.n	8003ac4 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003a7e:	68bc      	ldr	r4, [r7, #8]
 8003a80:	4913      	ldr	r1, [pc, #76]	; (8003ad0 <BSP_CAMERA_Start+0x6c>)
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	440b      	add	r3, r1
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	490f      	ldr	r1, [pc, #60]	; (8003ad0 <BSP_CAMERA_Start+0x6c>)
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f000 f8a6 	bl	8003bf4 <GetSize>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4622      	mov	r2, r4
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <BSP_CAMERA_Start+0x70>)
 8003ab0:	f000 fdca 	bl	8004648 <HAL_DCMI_Start_DMA>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003aba:	f06f 0303 	mvn.w	r3, #3
 8003abe:	e002      	b.n	8003ac6 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003ac4:	697b      	ldr	r3, [r7, #20]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd90      	pop	{r4, r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	24000d74 	.word	0x24000d74
 8003ad4:	240000d4 	.word	0x240000d4

08003ad8 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ae6:	f06f 0301 	mvn.w	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e00b      	b.n	8003b06 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003aee:	4808      	ldr	r0, [pc, #32]	; (8003b10 <BSP_CAMERA_Stop+0x38>)
 8003af0:	f000 fe6c 	bl	80047cc <HAL_DCMI_Stop>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003afa:	f06f 0303 	mvn.w	r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	e001      	b.n	8003b06 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	240000d4 	.word	0x240000d4

08003b14 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b26:	f06f 0301 	mvn.w	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b4c:	f06f 0301 	mvn.w	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7ff ffdb 	bl	8003b60 <BSP_CAMERA_LineEventCallback>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f7fd fcfe 	bl	80015bc <BSP_CAMERA_FrameEventCallback>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7ff ffcf 	bl	8003b74 <BSP_CAMERA_VsyncEventCallback>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7ff ffce 	bl	8003b88 <BSP_CAMERA_ErrorCallback>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003c08:	2303      	movs	r3, #3
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	e001      	b.n	8003c12 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003c0e:	2302      	movs	r3, #2
 8003c10:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d834      	bhi.n	8003c82 <GetSize+0x8e>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <GetSize+0x2c>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c35 	.word	0x08003c35
 8003c24:	08003c45 	.word	0x08003c45
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c65 	.word	0x08003c65
 8003c30:	08003c75 	.word	0x08003c75
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	60fb      	str	r3, [r7, #12]
    break;
 8003c42:	e01f      	b.n	8003c84 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	089b      	lsrs	r3, r3, #2
 8003c50:	60fb      	str	r3, [r7, #12]
    break;
 8003c52:	e017      	b.n	8003c84 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	4613      	mov	r3, r2
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	025b      	lsls	r3, r3, #9
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	60fb      	str	r3, [r7, #12]
    break;
 8003c62:	e00f      	b.n	8003c84 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	60fb      	str	r3, [r7, #12]
    break;
 8003c72:	e007      	b.n	8003c84 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <GetSize+0xa0>)
 8003c78:	fb02 f303 	mul.w	r3, r2, r3
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	60fb      	str	r3, [r7, #12]
    break;
 8003c80:	e000      	b.n	8003c84 <GetSize+0x90>
  default:
    break;
 8003c82:	bf00      	nop
  }

  return (int32_t)size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	0005dc00 	.word	0x0005dc00

08003c98 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003ca2:	2378      	movs	r3, #120	; 0x78
 8003ca4:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <OV5640_Probe+0xc0>)
 8003ca8:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003caa:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <OV5640_Probe+0xc4>)
 8003cac:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003cae:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <OV5640_Probe+0xc8>)
 8003cb0:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003cb2:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <OV5640_Probe+0xcc>)
 8003cb4:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <OV5640_Probe+0xd0>)
 8003cb8:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	482a      	ldr	r0, [pc, #168]	; (8003d6c <OV5640_Probe+0xd4>)
 8003cc2:	f7fd fc95 	bl	80015f0 <OV5640_RegisterBusIO>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ccc:	f06f 0304 	mvn.w	r3, #4
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e03c      	b.n	8003d4e <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4824      	ldr	r0, [pc, #144]	; (8003d6c <OV5640_Probe+0xd4>)
 8003cdc:	f7fe f8dc 	bl	8001e98 <OV5640_ReadID>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ce6:	f06f 0304 	mvn.w	r3, #4
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	e02f      	b.n	8003d4e <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f245 6240 	movw	r2, #22080	; 0x5640
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003cf8:	f06f 0306 	mvn.w	r3, #6
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	e026      	b.n	8003d4e <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <OV5640_Probe+0xd8>)
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <OV5640_Probe+0xdc>)
 8003d04:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <OV5640_Probe+0xe0>)
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <OV5640_Probe+0xd4>)
 8003d0a:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <OV5640_Probe+0xd8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <OV5640_Probe+0xe0>)
 8003d14:	6810      	ldr	r0, [r2, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4798      	blx	r3
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d22:	f06f 0304 	mvn.w	r3, #4
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
 8003d28:	e011      	b.n	8003d4e <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <OV5640_Probe+0xd8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <OV5640_Probe+0xe0>)
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	4911      	ldr	r1, [pc, #68]	; (8003d7c <OV5640_Probe+0xe4>)
 8003d36:	6809      	ldr	r1, [r1, #0]
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d42:	f06f 0304 	mvn.w	r3, #4
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
 8003d48:	e001      	b.n	8003d4e <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3728      	adds	r7, #40	; 0x28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	0800312d 	.word	0x0800312d
 8003d5c:	080031a1 	.word	0x080031a1
 8003d60:	080032c9 	.word	0x080032c9
 8003d64:	0800326d 	.word	0x0800326d
 8003d68:	08003325 	.word	0x08003325
 8003d6c:	24000dac 	.word	0x24000dac
 8003d70:	24000da4 	.word	0x24000da4
 8003d74:	24000000 	.word	0x24000000
 8003d78:	24000d70 	.word	0x24000d70
 8003d7c:	24000da8 	.word	0x24000da8

08003d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_MspInit+0x30>)
 8003d88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <HAL_MspInit+0x30>)
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_MspInit+0x30>)
 8003d98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	58024400 	.word	0x58024400

08003db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <NMI_Handler+0x4>

08003dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dbe:	e7fe      	b.n	8003dbe <HardFault_Handler+0x4>

08003dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dc4:	e7fe      	b.n	8003dc4 <MemManage_Handler+0x4>

08003dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dca:	e7fe      	b.n	8003dca <BusFault_Handler+0x4>

08003dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dd0:	e7fe      	b.n	8003dd0 <UsageFault_Handler+0x4>

08003dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e00:	f000 fa54 	bl	80042ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e04:	bf00      	nop
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e0c:	4802      	ldr	r0, [pc, #8]	; (8003e18 <USART1_IRQHandler+0x10>)
 8003e0e:	f009 fc6f 	bl	800d6f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	24000dd8 	.word	0x24000dd8

08003e1c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <DMA2_Stream1_IRQHandler+0x10>)
 8003e22:	f002 f9c3 	bl	80061ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	24000124 	.word	0x24000124

08003e30 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <DCMI_PSSI_IRQHandler+0x10>)
 8003e36:	f000 fd29 	bl	800488c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	240000d4 	.word	0x240000d4

08003e44 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e48:	4802      	ldr	r0, [pc, #8]	; (8003e54 <LTDC_IRQHandler+0x10>)
 8003e4a:	f005 ffe7 	bl	8009e1c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	2400023c 	.word	0x2400023c

08003e58 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <LTDC_ER_IRQHandler+0x10>)
 8003e5e:	f005 ffdd 	bl	8009e1c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2400023c 	.word	0x2400023c

08003e6c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <DMA2D_IRQHandler+0x10>)
 8003e72:	f003 fe95 	bl	8007ba0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2400019c 	.word	0x2400019c

08003e80 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <_sbrk+0x5c>)
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <_sbrk+0x60>)
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <_sbrk+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_sbrk+0x64>)
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <_sbrk+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ecc:	f00b fad4 	bl	800f478 <__errno>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eda:	e009      	b.n	8003ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <_sbrk+0x64>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <_sbrk+0x64>)
 8003eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	24100000 	.word	0x24100000
 8003efc:	00000400 	.word	0x00000400
 8003f00:	24000dd4 	.word	0x24000dd4
 8003f04:	24000e80 	.word	0x24000e80

08003f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <SystemInit+0xd0>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	4a31      	ldr	r2, [pc, #196]	; (8003fd8 <SystemInit+0xd0>)
 8003f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <SystemInit+0xd4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d807      	bhi.n	8003f38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f28:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <SystemInit+0xd4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 030f 	bic.w	r3, r3, #15
 8003f30:	4a2a      	ldr	r2, [pc, #168]	; (8003fdc <SystemInit+0xd4>)
 8003f32:	f043 0303 	orr.w	r3, r3, #3
 8003f36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <SystemInit+0xd8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a28      	ldr	r2, [pc, #160]	; (8003fe0 <SystemInit+0xd8>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f44:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <SystemInit+0xd8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f4a:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <SystemInit+0xd8>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4924      	ldr	r1, [pc, #144]	; (8003fe0 <SystemInit+0xd8>)
 8003f50:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <SystemInit+0xdc>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <SystemInit+0xd4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f62:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <SystemInit+0xd4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 030f 	bic.w	r3, r3, #15
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <SystemInit+0xd4>)
 8003f6c:	f043 0303 	orr.w	r3, r3, #3
 8003f70:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003f72:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <SystemInit+0xd8>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <SystemInit+0xd8>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <SystemInit+0xd8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f84:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <SystemInit+0xd8>)
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <SystemInit+0xe0>)
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <SystemInit+0xd8>)
 8003f8c:	4a17      	ldr	r2, [pc, #92]	; (8003fec <SystemInit+0xe4>)
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <SystemInit+0xd8>)
 8003f92:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <SystemInit+0xe8>)
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <SystemInit+0xd8>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <SystemInit+0xd8>)
 8003f9e:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <SystemInit+0xe8>)
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <SystemInit+0xd8>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <SystemInit+0xd8>)
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <SystemInit+0xe8>)
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <SystemInit+0xd8>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <SystemInit+0xd8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <SystemInit+0xd8>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <SystemInit+0xd8>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <SystemInit+0xec>)
 8003fc8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003fcc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000ed00 	.word	0xe000ed00
 8003fdc:	52002000 	.word	0x52002000
 8003fe0:	58024400 	.word	0x58024400
 8003fe4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fe8:	02020200 	.word	0x02020200
 8003fec:	01ff0000 	.word	0x01ff0000
 8003ff0:	01010280 	.word	0x01010280
 8003ff4:	52004000 	.word	0x52004000

08003ff8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ffc:	4b22      	ldr	r3, [pc, #136]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8003ffe:	4a23      	ldr	r2, [pc, #140]	; (800408c <MX_USART1_UART_Init+0x94>)
 8004000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800400a:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <MX_USART1_UART_Init+0x90>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <MX_USART1_UART_Init+0x90>)
 800401e:	220c      	movs	r2, #12
 8004020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <MX_USART1_UART_Init+0x90>)
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004030:	2200      	movs	r2, #0
 8004032:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004036:	2200      	movs	r2, #0
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <MX_USART1_UART_Init+0x90>)
 800403c:	2200      	movs	r2, #0
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004040:	4811      	ldr	r0, [pc, #68]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004042:	f009 f9ae 	bl	800d3a2 <HAL_UART_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800404c:	f7fd faca 	bl	80015e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004050:	2100      	movs	r1, #0
 8004052:	480d      	ldr	r0, [pc, #52]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004054:	f00b f844 	bl	800f0e0 <HAL_UARTEx_SetTxFifoThreshold>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800405e:	f7fd fac1 	bl	80015e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004062:	2100      	movs	r1, #0
 8004064:	4808      	ldr	r0, [pc, #32]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004066:	f00b f879 	bl	800f15c <HAL_UARTEx_SetRxFifoThreshold>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004070:	f7fd fab8 	bl	80015e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004074:	4804      	ldr	r0, [pc, #16]	; (8004088 <MX_USART1_UART_Init+0x90>)
 8004076:	f00a fffa 	bl	800f06e <HAL_UARTEx_DisableFifoMode>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004080:	f7fd fab0 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	24000dd8 	.word	0x24000dd8
 800408c:	40011000 	.word	0x40011000

08004090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b0ba      	sub	sp, #232	; 0xe8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004098:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040a8:	f107 0310 	add.w	r3, r7, #16
 80040ac:	22c0      	movs	r2, #192	; 0xc0
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f00b fa0b 	bl	800f4cc <memset>
  if(uartHandle->Instance==USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <HAL_UART_MspInit+0xd8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d14e      	bne.n	800415e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040c0:	f04f 0201 	mov.w	r2, #1
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	4618      	mov	r0, r3
 80040d8:	f007 f9cc 	bl	800b474 <HAL_RCCEx_PeriphCLKConfig>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80040e2:	f7fd fa7f 	bl	80015e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <HAL_UART_MspInit+0xdc>)
 80040e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <HAL_UART_MspInit+0xdc>)
 80040ee:	f043 0310 	orr.w	r3, r3, #16
 80040f2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_UART_MspInit+0xdc>)
 80040f8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	4b19      	ldr	r3, [pc, #100]	; (800416c <HAL_UART_MspInit+0xdc>)
 8004106:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800410a:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_UART_MspInit+0xdc>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_UART_MspInit+0xdc>)
 8004116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8004122:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412a:	2302      	movs	r3, #2
 800412c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800413c:	2307      	movs	r3, #7
 800413e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004142:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004146:	4619      	mov	r1, r3
 8004148:	4809      	ldr	r0, [pc, #36]	; (8004170 <HAL_UART_MspInit+0xe0>)
 800414a:	f004 fc3d 	bl	80089c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	2025      	movs	r0, #37	; 0x25
 8004154:	f000 f9c9 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004158:	2025      	movs	r0, #37	; 0x25
 800415a:	f000 f9e0 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800415e:	bf00      	nop
 8004160:	37e8      	adds	r7, #232	; 0xe8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40011000 	.word	0x40011000
 800416c:	58024400 	.word	0x58024400
 8004170:	58020000 	.word	0x58020000

08004174 <Reset_Handler>:
 8004174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041ac <LoopFillZerobss+0xe>
 8004178:	f7ff fec6 	bl	8003f08 <SystemInit>
 800417c:	480c      	ldr	r0, [pc, #48]	; (80041b0 <LoopFillZerobss+0x12>)
 800417e:	490d      	ldr	r1, [pc, #52]	; (80041b4 <LoopFillZerobss+0x16>)
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <LoopFillZerobss+0x1a>)
 8004182:	2300      	movs	r3, #0
 8004184:	e002      	b.n	800418c <LoopCopyDataInit>

08004186 <CopyDataInit>:
 8004186:	58d4      	ldr	r4, [r2, r3]
 8004188:	50c4      	str	r4, [r0, r3]
 800418a:	3304      	adds	r3, #4

0800418c <LoopCopyDataInit>:
 800418c:	18c4      	adds	r4, r0, r3
 800418e:	428c      	cmp	r4, r1
 8004190:	d3f9      	bcc.n	8004186 <CopyDataInit>
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <LoopFillZerobss+0x1e>)
 8004194:	4c0a      	ldr	r4, [pc, #40]	; (80041c0 <LoopFillZerobss+0x22>)
 8004196:	2300      	movs	r3, #0
 8004198:	e001      	b.n	800419e <LoopFillZerobss>

0800419a <FillZerobss>:
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	3204      	adds	r2, #4

0800419e <LoopFillZerobss>:
 800419e:	42a2      	cmp	r2, r4
 80041a0:	d3fb      	bcc.n	800419a <FillZerobss>
 80041a2:	f00b f96f 	bl	800f484 <__libc_init_array>
 80041a6:	f7fd f939 	bl	800141c <main>
 80041aa:	4770      	bx	lr
 80041ac:	24100000 	.word	0x24100000
 80041b0:	24000000 	.word	0x24000000
 80041b4:	240000b8 	.word	0x240000b8
 80041b8:	080103fc 	.word	0x080103fc
 80041bc:	240000b8 	.word	0x240000b8
 80041c0:	24000e80 	.word	0x24000e80

080041c4 <ADC_IRQHandler>:
 80041c4:	e7fe      	b.n	80041c4 <ADC_IRQHandler>
	...

080041c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ce:	2003      	movs	r0, #3
 80041d0:	f000 f980 	bl	80044d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80041d4:	f006 ff78 	bl	800b0c8 <HAL_RCC_GetSysClockFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_Init+0x68>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	4913      	ldr	r1, [pc, #76]	; (8004234 <HAL_Init+0x6c>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_Init+0x68>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_Init+0x6c>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <HAL_Init+0x70>)
 800420a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800420c:	4a0b      	ldr	r2, [pc, #44]	; (800423c <HAL_Init+0x74>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004212:	2000      	movs	r0, #0
 8004214:	f000 f814 	bl	8004240 <HAL_InitTick>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e002      	b.n	8004228 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004222:	f7ff fdad 	bl	8003d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	58024400 	.word	0x58024400
 8004234:	08010348 	.word	0x08010348
 8004238:	24000048 	.word	0x24000048
 800423c:	24000044 	.word	0x24000044

08004240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_InitTick+0x60>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e021      	b.n	8004298 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_InitTick+0x64>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_InitTick+0x60>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004262:	fbb3 f3f1 	udiv	r3, r3, r1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f965 	bl	800453a <HAL_SYSTICK_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00e      	b.n	8004298 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d80a      	bhi.n	8004296 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004280:	2200      	movs	r2, #0
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004288:	f000 f92f 	bl	80044ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800428c:	4a06      	ldr	r2, [pc, #24]	; (80042a8 <HAL_InitTick+0x68>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	24000050 	.word	0x24000050
 80042a4:	24000044 	.word	0x24000044
 80042a8:	2400004c 	.word	0x2400004c

080042ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_IncTick+0x20>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x24>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_IncTick+0x24>)
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	24000050 	.word	0x24000050
 80042d0:	24000e6c 	.word	0x24000e6c

080042d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return uwTick;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_GetTick+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	24000e6c 	.word	0x24000e6c

080042ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff ffee 	bl	80042d4 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004304:	d005      	beq.n	8004312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_Delay+0x44>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004312:	bf00      	nop
 8004314:	f7ff ffde 	bl	80042d4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d8f7      	bhi.n	8004314 <HAL_Delay+0x28>
  {
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	24000050 	.word	0x24000050

08004334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <__NVIC_SetPriorityGrouping+0x40>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 800435e:	4313      	orrs	r3, r2
 8004360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <__NVIC_SetPriorityGrouping+0x40>)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	60d3      	str	r3, [r2, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	e000ed00 	.word	0xe000ed00
 8004378:	05fa0000 	.word	0x05fa0000

0800437c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <__NVIC_EnableIRQ+0x38>)
 80043b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	; (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a0:	d301      	bcc.n	80044a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <SysTick_Config+0x40>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ae:	210f      	movs	r1, #15
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044b4:	f7ff ff8e 	bl	80043d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <SysTick_Config+0x40>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <SysTick_Config+0x40>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010

080044d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff29 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044f8:	f7ff ff40 	bl	800437c <__NVIC_GetPriorityGrouping>
 80044fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	6978      	ldr	r0, [r7, #20]
 8004504:	f7ff ff90 	bl	8004428 <NVIC_EncodePriority>
 8004508:	4602      	mov	r2, r0
 800450a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff5f 	bl	80043d4 <__NVIC_SetPriority>
}
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	4603      	mov	r3, r0
 8004526:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff33 	bl	8004398 <__NVIC_EnableIRQ>
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ffa4 	bl	8004490 <SysTick_Config>
 8004548:	4603      	mov	r3, r0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e069      	b.n	800463a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc f870 	bl	8000658 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b2a      	ldr	r3, [pc, #168]	; (8004644 <HAL_DCMI_Init+0xf0>)
 800459a:	400b      	ands	r3, r1
 800459c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045be:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045e2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d112      	bne.n	800461a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7f1b      	ldrb	r3, [r3, #28]
 80045f8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7f5b      	ldrb	r3, [r3, #29]
 80045fe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004600:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7f9b      	ldrb	r3, [r3, #30]
 8004606:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004608:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7fdb      	ldrb	r3, [r3, #31]
 8004610:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004616:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004618:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 021e 	orr.w	r2, r2, #30
 8004628:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	ffe0f007 	.word	0xffe0f007

08004648 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_DCMI_Start_DMA+0x1c>
 8004660:	2302      	movs	r3, #2
 8004662:	e0ab      	b.n	80047bc <HAL_DCMI_Start_DMA+0x174>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004682:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0202 	bic.w	r2, r2, #2
 8004692:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a8:	4a46      	ldr	r2, [pc, #280]	; (80047c4 <HAL_DCMI_Start_DMA+0x17c>)
 80046aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b0:	4a45      	ldr	r2, [pc, #276]	; (80047c8 <HAL_DCMI_Start_DMA+0x180>)
 80046b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b8:	2200      	movs	r2, #0
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046da:	d219      	bcs.n	8004710 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3328      	adds	r3, #40	; 0x28
 80046e6:	4619      	mov	r1, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	f000 fd90 	bl	8005210 <HAL_DMA_Start_IT>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d055      	beq.n	80047a2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e055      	b.n	80047bc <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <HAL_DCMI_Start_DMA+0x17c>)
 8004716:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800472a:	e009      	b.n	8004740 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	085a      	lsrs	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	005a      	lsls	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d2f0      	bcs.n	800472c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	1e9a      	subs	r2, r3, #2
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3328      	adds	r3, #40	; 0x28
 8004772:	4619      	mov	r1, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f003 fc73 	bl	8008068 <HAL_DMAEx_MultiBufferStart_IT>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00c      	beq.n	80047a2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2240      	movs	r2, #64	; 0x40
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e00c      	b.n	80047bc <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	08004991 	.word	0x08004991
 80047c8:	08004ab7 	.word	0x08004ab7

080047cc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_DCMI_Stop+0xb8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2b      	ldr	r2, [pc, #172]	; (8004888 <HAL_DCMI_Stop+0xbc>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	0a5b      	lsrs	r3, r3, #9
 80047e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_DCMI_Stop+0x30>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e03f      	b.n	800487c <HAL_DCMI_Stop+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	72fb      	strb	r3, [r7, #11]
      break;
 8004838:	e006      	b.n	8004848 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e9      	bne.n	800481c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004856:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	4618      	mov	r0, r3
 800485e:	f000 ff41 	bl	80056e4 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800487a:	7afb      	ldrb	r3, [r7, #11]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	24000044 	.word	0x24000044
 8004888:	10624dd3 	.word	0x10624dd3

0800488c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2204      	movs	r2, #4
 80048ac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	f043 0202 	orr.w	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2204      	movs	r2, #4
 80048be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c6:	4a31      	ldr	r2, [pc, #196]	; (800498c <HAL_DCMI_IRQHandler+0x100>)
 80048c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 fa26 	bl	8005d20 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2202      	movs	r2, #2
 80048e4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	f043 0201 	orr.w	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2204      	movs	r2, #4
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fe:	4a23      	ldr	r2, [pc, #140]	; (800498c <HAL_DCMI_IRQHandler+0x100>)
 8004900:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004906:	4618      	mov	r0, r3
 8004908:	f001 fa0a 	bl	8005d20 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d006      	beq.n	8004924 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff f93c 	bl	8003b9c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2208      	movs	r2, #8
 8004934:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff f946 	bl	8003bc8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01d      	beq.n	8004982 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b02      	cmp	r3, #2
 8004952:	d107      	bne.n	8004964 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 021e 	bic.w	r2, r2, #30
 8004962:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff f918 	bl	8003bb2 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	08004ab7 	.word	0x08004ab7

08004990 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d043      	beq.n	8004a2e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d118      	bne.n	80049f2 <DCMI_DMAXferCplt+0x62>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d015      	beq.n	80049f2 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	00da      	lsls	r2, r3, #3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	2200      	movs	r2, #0
 80049e0:	4619      	mov	r1, r3
 80049e2:	f003 fe9f 	bl	8008724 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	1e5a      	subs	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
 80049f0:	e044      	b.n	8004a7c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d13c      	bne.n	8004a7c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	00da      	lsls	r2, r3, #3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f003 fe81 	bl	8008724 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a2c:	e026      	b.n	8004a7c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d006      	beq.n	8004a4c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e017      	b.n	8004a7c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10f      	bne.n	8004a7c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	0099      	lsls	r1, r3, #2
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	440a      	add	r2, r1
 8004a72:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d112      	bne.n	8004aae <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d103      	bne.n	8004aae <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d009      	beq.n	8004ae2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff f87b 	bl	8003bde <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff fbec 	bl	80042d4 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e37f      	b.n	8005208 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a66      	ldr	r2, [pc, #408]	; (8004ca8 <HAL_DMA_Init+0x1b8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d04a      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a65      	ldr	r2, [pc, #404]	; (8004cac <HAL_DMA_Init+0x1bc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d045      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a63      	ldr	r2, [pc, #396]	; (8004cb0 <HAL_DMA_Init+0x1c0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d040      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a62      	ldr	r2, [pc, #392]	; (8004cb4 <HAL_DMA_Init+0x1c4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d03b      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a60      	ldr	r2, [pc, #384]	; (8004cb8 <HAL_DMA_Init+0x1c8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d036      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5f      	ldr	r2, [pc, #380]	; (8004cbc <HAL_DMA_Init+0x1cc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5d      	ldr	r2, [pc, #372]	; (8004cc0 <HAL_DMA_Init+0x1d0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5c      	ldr	r2, [pc, #368]	; (8004cc4 <HAL_DMA_Init+0x1d4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d027      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5a      	ldr	r2, [pc, #360]	; (8004cc8 <HAL_DMA_Init+0x1d8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a59      	ldr	r2, [pc, #356]	; (8004ccc <HAL_DMA_Init+0x1dc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a57      	ldr	r2, [pc, #348]	; (8004cd0 <HAL_DMA_Init+0x1e0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a56      	ldr	r2, [pc, #344]	; (8004cd4 <HAL_DMA_Init+0x1e4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a54      	ldr	r2, [pc, #336]	; (8004cd8 <HAL_DMA_Init+0x1e8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a53      	ldr	r2, [pc, #332]	; (8004cdc <HAL_DMA_Init+0x1ec>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_DMA_Init+0x1f0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_Init+0xb8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_DMA_Init+0x1f4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_DMA_Init+0xbc>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_DMA_Init+0xbe>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 813c 	beq.w	8004e2c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a37      	ldr	r2, [pc, #220]	; (8004ca8 <HAL_DMA_Init+0x1b8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d04a      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a36      	ldr	r2, [pc, #216]	; (8004cac <HAL_DMA_Init+0x1bc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d045      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a34      	ldr	r2, [pc, #208]	; (8004cb0 <HAL_DMA_Init+0x1c0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d040      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a33      	ldr	r2, [pc, #204]	; (8004cb4 <HAL_DMA_Init+0x1c4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d03b      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_DMA_Init+0x1c8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a30      	ldr	r2, [pc, #192]	; (8004cbc <HAL_DMA_Init+0x1cc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d031      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2e      	ldr	r2, [pc, #184]	; (8004cc0 <HAL_DMA_Init+0x1d0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02c      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2d      	ldr	r2, [pc, #180]	; (8004cc4 <HAL_DMA_Init+0x1d4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d027      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <HAL_DMA_Init+0x1d8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d022      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <HAL_DMA_Init+0x1dc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <HAL_DMA_Init+0x1e0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <HAL_DMA_Init+0x1e4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <HAL_DMA_Init+0x1e8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <HAL_DMA_Init+0x1ec>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_DMA_Init+0x1f0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_DMA_Init+0x174>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <HAL_DMA_Init+0x1f4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <HAL_DMA_Init+0x186>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e007      	b.n	8004c86 <HAL_DMA_Init+0x196>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c86:	e02f      	b.n	8004ce8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c88:	f7ff fb24 	bl	80042d4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	d928      	bls.n	8004ce8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e2af      	b.n	8005208 <HAL_DMA_Init+0x718>
 8004ca8:	40020010 	.word	0x40020010
 8004cac:	40020028 	.word	0x40020028
 8004cb0:	40020040 	.word	0x40020040
 8004cb4:	40020058 	.word	0x40020058
 8004cb8:	40020070 	.word	0x40020070
 8004cbc:	40020088 	.word	0x40020088
 8004cc0:	400200a0 	.word	0x400200a0
 8004cc4:	400200b8 	.word	0x400200b8
 8004cc8:	40020410 	.word	0x40020410
 8004ccc:	40020428 	.word	0x40020428
 8004cd0:	40020440 	.word	0x40020440
 8004cd4:	40020458 	.word	0x40020458
 8004cd8:	40020470 	.word	0x40020470
 8004cdc:	40020488 	.word	0x40020488
 8004ce0:	400204a0 	.word	0x400204a0
 8004ce4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1c8      	bne.n	8004c88 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4b73      	ldr	r3, [pc, #460]	; (8004ed0 <HAL_DMA_Init+0x3e0>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d26:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d107      	bne.n	8004d4c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	4313      	orrs	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b28      	cmp	r3, #40	; 0x28
 8004d52:	d903      	bls.n	8004d5c <HAL_DMA_Init+0x26c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b2e      	cmp	r3, #46	; 0x2e
 8004d5a:	d91f      	bls.n	8004d9c <HAL_DMA_Init+0x2ac>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b3e      	cmp	r3, #62	; 0x3e
 8004d62:	d903      	bls.n	8004d6c <HAL_DMA_Init+0x27c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b42      	cmp	r3, #66	; 0x42
 8004d6a:	d917      	bls.n	8004d9c <HAL_DMA_Init+0x2ac>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b46      	cmp	r3, #70	; 0x46
 8004d72:	d903      	bls.n	8004d7c <HAL_DMA_Init+0x28c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b48      	cmp	r3, #72	; 0x48
 8004d7a:	d90f      	bls.n	8004d9c <HAL_DMA_Init+0x2ac>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b4e      	cmp	r3, #78	; 0x4e
 8004d82:	d903      	bls.n	8004d8c <HAL_DMA_Init+0x29c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b52      	cmp	r3, #82	; 0x52
 8004d8a:	d907      	bls.n	8004d9c <HAL_DMA_Init+0x2ac>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b73      	cmp	r3, #115	; 0x73
 8004d92:	d905      	bls.n	8004da0 <HAL_DMA_Init+0x2b0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b77      	cmp	r3, #119	; 0x77
 8004d9a:	d801      	bhi.n	8004da0 <HAL_DMA_Init+0x2b0>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_DMA_Init+0x2b2>
 8004da0:	2300      	movs	r3, #0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0307 	bic.w	r3, r3, #7
 8004dc4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d117      	bne.n	8004e08 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00e      	beq.n	8004e08 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f002 fbd6 	bl	800759c <DMA_CheckFifoParam>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2240      	movs	r2, #64	; 0x40
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e1ff      	b.n	8005208 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f002 fb11 	bl	8007438 <DMA_CalcBaseAndBitshift>
 8004e16:	4603      	mov	r3, r0
 8004e18:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	223f      	movs	r2, #63	; 0x3f
 8004e24:	409a      	lsls	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	609a      	str	r2, [r3, #8]
 8004e2a:	e0fe      	b.n	800502a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <HAL_DMA_Init+0x3e4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d04a      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <HAL_DMA_Init+0x3e8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d045      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a25      	ldr	r2, [pc, #148]	; (8004edc <HAL_DMA_Init+0x3ec>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d040      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a24      	ldr	r2, [pc, #144]	; (8004ee0 <HAL_DMA_Init+0x3f0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d03b      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <HAL_DMA_Init+0x3f4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d036      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <HAL_DMA_Init+0x3f8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d031      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <HAL_DMA_Init+0x3fc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02c      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <HAL_DMA_Init+0x400>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d027      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1c      	ldr	r2, [pc, #112]	; (8004ef4 <HAL_DMA_Init+0x404>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <HAL_DMA_Init+0x408>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01d      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <HAL_DMA_Init+0x40c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_DMA_Init+0x410>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <HAL_DMA_Init+0x414>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <HAL_DMA_Init+0x418>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <HAL_DMA_Init+0x41c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_DMA_Init+0x3dc>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <HAL_DMA_Init+0x420>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d123      	bne.n	8004f14 <HAL_DMA_Init+0x424>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e022      	b.n	8004f16 <HAL_DMA_Init+0x426>
 8004ed0:	fe10803f 	.word	0xfe10803f
 8004ed4:	48022c08 	.word	0x48022c08
 8004ed8:	48022c1c 	.word	0x48022c1c
 8004edc:	48022c30 	.word	0x48022c30
 8004ee0:	48022c44 	.word	0x48022c44
 8004ee4:	48022c58 	.word	0x48022c58
 8004ee8:	48022c6c 	.word	0x48022c6c
 8004eec:	48022c80 	.word	0x48022c80
 8004ef0:	48022c94 	.word	0x48022c94
 8004ef4:	58025408 	.word	0x58025408
 8004ef8:	5802541c 	.word	0x5802541c
 8004efc:	58025430 	.word	0x58025430
 8004f00:	58025444 	.word	0x58025444
 8004f04:	58025458 	.word	0x58025458
 8004f08:	5802546c 	.word	0x5802546c
 8004f0c:	58025480 	.word	0x58025480
 8004f10:	58025494 	.word	0x58025494
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d07e      	beq.n	8005018 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a80      	ldr	r2, [pc, #512]	; (8005120 <HAL_DMA_Init+0x630>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d021      	beq.n	8004f68 <HAL_DMA_Init+0x478>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a7e      	ldr	r2, [pc, #504]	; (8005124 <HAL_DMA_Init+0x634>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01c      	beq.n	8004f68 <HAL_DMA_Init+0x478>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7d      	ldr	r2, [pc, #500]	; (8005128 <HAL_DMA_Init+0x638>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d017      	beq.n	8004f68 <HAL_DMA_Init+0x478>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a7b      	ldr	r2, [pc, #492]	; (800512c <HAL_DMA_Init+0x63c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d012      	beq.n	8004f68 <HAL_DMA_Init+0x478>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a7a      	ldr	r2, [pc, #488]	; (8005130 <HAL_DMA_Init+0x640>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00d      	beq.n	8004f68 <HAL_DMA_Init+0x478>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a78      	ldr	r2, [pc, #480]	; (8005134 <HAL_DMA_Init+0x644>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d008      	beq.n	8004f68 <HAL_DMA_Init+0x478>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a77      	ldr	r2, [pc, #476]	; (8005138 <HAL_DMA_Init+0x648>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <HAL_DMA_Init+0x478>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a75      	ldr	r2, [pc, #468]	; (800513c <HAL_DMA_Init+0x64c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4b6e      	ldr	r3, [pc, #440]	; (8005140 <HAL_DMA_Init+0x650>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d008      	beq.n	8004fa4 <HAL_DMA_Init+0x4b4>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d102      	bne.n	8004fa0 <HAL_DMA_Init+0x4b0>
 8004f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f9e:	e002      	b.n	8004fa6 <HAL_DMA_Init+0x4b6>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e000      	b.n	8004fa6 <HAL_DMA_Init+0x4b6>
 8004fa4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68d2      	ldr	r2, [r2, #12]
 8004faa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b56      	ldr	r3, [pc, #344]	; (8005144 <HAL_DMA_Init+0x654>)
 8004fec:	4413      	add	r3, r2
 8004fee:	4a56      	ldr	r2, [pc, #344]	; (8005148 <HAL_DMA_Init+0x658>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	009a      	lsls	r2, r3, #2
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 fa1b 	bl	8007438 <DMA_CalcBaseAndBitshift>
 8005002:	4603      	mov	r3, r0
 8005004:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2201      	movs	r2, #1
 8005010:	409a      	lsls	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	e008      	b.n	800502a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2203      	movs	r2, #3
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e0ee      	b.n	8005208 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a47      	ldr	r2, [pc, #284]	; (800514c <HAL_DMA_Init+0x65c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d072      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a45      	ldr	r2, [pc, #276]	; (8005150 <HAL_DMA_Init+0x660>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d06d      	beq.n	800511a <HAL_DMA_Init+0x62a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a44      	ldr	r2, [pc, #272]	; (8005154 <HAL_DMA_Init+0x664>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d068      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a42      	ldr	r2, [pc, #264]	; (8005158 <HAL_DMA_Init+0x668>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d063      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a41      	ldr	r2, [pc, #260]	; (800515c <HAL_DMA_Init+0x66c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d05e      	beq.n	800511a <HAL_DMA_Init+0x62a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <HAL_DMA_Init+0x670>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d059      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3e      	ldr	r2, [pc, #248]	; (8005164 <HAL_DMA_Init+0x674>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d054      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3c      	ldr	r2, [pc, #240]	; (8005168 <HAL_DMA_Init+0x678>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d04f      	beq.n	800511a <HAL_DMA_Init+0x62a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3b      	ldr	r2, [pc, #236]	; (800516c <HAL_DMA_Init+0x67c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d04a      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a39      	ldr	r2, [pc, #228]	; (8005170 <HAL_DMA_Init+0x680>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d045      	beq.n	800511a <HAL_DMA_Init+0x62a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a38      	ldr	r2, [pc, #224]	; (8005174 <HAL_DMA_Init+0x684>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d040      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a36      	ldr	r2, [pc, #216]	; (8005178 <HAL_DMA_Init+0x688>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d03b      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a35      	ldr	r2, [pc, #212]	; (800517c <HAL_DMA_Init+0x68c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d036      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a33      	ldr	r2, [pc, #204]	; (8005180 <HAL_DMA_Init+0x690>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d031      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a32      	ldr	r2, [pc, #200]	; (8005184 <HAL_DMA_Init+0x694>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d02c      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a30      	ldr	r2, [pc, #192]	; (8005188 <HAL_DMA_Init+0x698>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d027      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a14      	ldr	r2, [pc, #80]	; (8005120 <HAL_DMA_Init+0x630>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d022      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a12      	ldr	r2, [pc, #72]	; (8005124 <HAL_DMA_Init+0x634>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01d      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a11      	ldr	r2, [pc, #68]	; (8005128 <HAL_DMA_Init+0x638>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d018      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a0f      	ldr	r2, [pc, #60]	; (800512c <HAL_DMA_Init+0x63c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0e      	ldr	r2, [pc, #56]	; (8005130 <HAL_DMA_Init+0x640>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_DMA_Init+0x62a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0c      	ldr	r2, [pc, #48]	; (8005134 <HAL_DMA_Init+0x644>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a0b      	ldr	r2, [pc, #44]	; (8005138 <HAL_DMA_Init+0x648>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_DMA_Init+0x62a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a09      	ldr	r2, [pc, #36]	; (800513c <HAL_DMA_Init+0x64c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d138      	bne.n	800518c <HAL_DMA_Init+0x69c>
 800511a:	2301      	movs	r3, #1
 800511c:	e037      	b.n	800518e <HAL_DMA_Init+0x69e>
 800511e:	bf00      	nop
 8005120:	58025408 	.word	0x58025408
 8005124:	5802541c 	.word	0x5802541c
 8005128:	58025430 	.word	0x58025430
 800512c:	58025444 	.word	0x58025444
 8005130:	58025458 	.word	0x58025458
 8005134:	5802546c 	.word	0x5802546c
 8005138:	58025480 	.word	0x58025480
 800513c:	58025494 	.word	0x58025494
 8005140:	fffe000f 	.word	0xfffe000f
 8005144:	a7fdabf8 	.word	0xa7fdabf8
 8005148:	cccccccd 	.word	0xcccccccd
 800514c:	40020010 	.word	0x40020010
 8005150:	40020028 	.word	0x40020028
 8005154:	40020040 	.word	0x40020040
 8005158:	40020058 	.word	0x40020058
 800515c:	40020070 	.word	0x40020070
 8005160:	40020088 	.word	0x40020088
 8005164:	400200a0 	.word	0x400200a0
 8005168:	400200b8 	.word	0x400200b8
 800516c:	40020410 	.word	0x40020410
 8005170:	40020428 	.word	0x40020428
 8005174:	40020440 	.word	0x40020440
 8005178:	40020458 	.word	0x40020458
 800517c:	40020470 	.word	0x40020470
 8005180:	40020488 	.word	0x40020488
 8005184:	400204a0 	.word	0x400204a0
 8005188:	400204b8 	.word	0x400204b8
 800518c:	2300      	movs	r3, #0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d032      	beq.n	80051f8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f002 fa7e 	bl	8007694 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d102      	bne.n	80051a6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051ba:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d010      	beq.n	80051e6 <HAL_DMA_Init+0x6f6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d80c      	bhi.n	80051e6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f002 fafb 	bl	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051e2:	605a      	str	r2, [r3, #4]
 80051e4:	e008      	b.n	80051f8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e226      	b.n	800567a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_DMA_Start_IT+0x2a>
 8005236:	2302      	movs	r3, #2
 8005238:	e21f      	b.n	800567a <HAL_DMA_Start_IT+0x46a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	f040 820a 	bne.w	8005664 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a68      	ldr	r2, [pc, #416]	; (8005404 <HAL_DMA_Start_IT+0x1f4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d04a      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a66      	ldr	r2, [pc, #408]	; (8005408 <HAL_DMA_Start_IT+0x1f8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a65      	ldr	r2, [pc, #404]	; (800540c <HAL_DMA_Start_IT+0x1fc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d040      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a63      	ldr	r2, [pc, #396]	; (8005410 <HAL_DMA_Start_IT+0x200>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d03b      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a62      	ldr	r2, [pc, #392]	; (8005414 <HAL_DMA_Start_IT+0x204>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d036      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a60      	ldr	r2, [pc, #384]	; (8005418 <HAL_DMA_Start_IT+0x208>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a5f      	ldr	r2, [pc, #380]	; (800541c <HAL_DMA_Start_IT+0x20c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d02c      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a5d      	ldr	r2, [pc, #372]	; (8005420 <HAL_DMA_Start_IT+0x210>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d027      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a5c      	ldr	r2, [pc, #368]	; (8005424 <HAL_DMA_Start_IT+0x214>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5a      	ldr	r2, [pc, #360]	; (8005428 <HAL_DMA_Start_IT+0x218>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a59      	ldr	r2, [pc, #356]	; (800542c <HAL_DMA_Start_IT+0x21c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a57      	ldr	r2, [pc, #348]	; (8005430 <HAL_DMA_Start_IT+0x220>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a56      	ldr	r2, [pc, #344]	; (8005434 <HAL_DMA_Start_IT+0x224>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a54      	ldr	r2, [pc, #336]	; (8005438 <HAL_DMA_Start_IT+0x228>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a53      	ldr	r2, [pc, #332]	; (800543c <HAL_DMA_Start_IT+0x22c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_DMA_Start_IT+0xee>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a51      	ldr	r2, [pc, #324]	; (8005440 <HAL_DMA_Start_IT+0x230>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d108      	bne.n	8005310 <HAL_DMA_Start_IT+0x100>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e007      	b.n	8005320 <HAL_DMA_Start_IT+0x110>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f001 fea2 	bl	8007070 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a34      	ldr	r2, [pc, #208]	; (8005404 <HAL_DMA_Start_IT+0x1f4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d04a      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a33      	ldr	r2, [pc, #204]	; (8005408 <HAL_DMA_Start_IT+0x1f8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d045      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a31      	ldr	r2, [pc, #196]	; (800540c <HAL_DMA_Start_IT+0x1fc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d040      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a30      	ldr	r2, [pc, #192]	; (8005410 <HAL_DMA_Start_IT+0x200>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d03b      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2e      	ldr	r2, [pc, #184]	; (8005414 <HAL_DMA_Start_IT+0x204>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d036      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2d      	ldr	r2, [pc, #180]	; (8005418 <HAL_DMA_Start_IT+0x208>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d031      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2b      	ldr	r2, [pc, #172]	; (800541c <HAL_DMA_Start_IT+0x20c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d02c      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <HAL_DMA_Start_IT+0x210>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d027      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a28      	ldr	r2, [pc, #160]	; (8005424 <HAL_DMA_Start_IT+0x214>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d022      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a27      	ldr	r2, [pc, #156]	; (8005428 <HAL_DMA_Start_IT+0x218>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d01d      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a25      	ldr	r2, [pc, #148]	; (800542c <HAL_DMA_Start_IT+0x21c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a24      	ldr	r2, [pc, #144]	; (8005430 <HAL_DMA_Start_IT+0x220>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_DMA_Start_IT+0x224>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a21      	ldr	r2, [pc, #132]	; (8005438 <HAL_DMA_Start_IT+0x228>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_DMA_Start_IT+0x22c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_DMA_Start_IT+0x1bc>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_DMA_Start_IT+0x230>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d101      	bne.n	80053d0 <HAL_DMA_Start_IT+0x1c0>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <HAL_DMA_Start_IT+0x1c2>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d036      	beq.n	8005444 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f023 021e 	bic.w	r2, r3, #30
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0216 	orr.w	r2, r2, #22
 80053e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d03e      	beq.n	8005470 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0208 	orr.w	r2, r2, #8
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e035      	b.n	8005470 <HAL_DMA_Start_IT+0x260>
 8005404:	40020010 	.word	0x40020010
 8005408:	40020028 	.word	0x40020028
 800540c:	40020040 	.word	0x40020040
 8005410:	40020058 	.word	0x40020058
 8005414:	40020070 	.word	0x40020070
 8005418:	40020088 	.word	0x40020088
 800541c:	400200a0 	.word	0x400200a0
 8005420:	400200b8 	.word	0x400200b8
 8005424:	40020410 	.word	0x40020410
 8005428:	40020428 	.word	0x40020428
 800542c:	40020440 	.word	0x40020440
 8005430:	40020458 	.word	0x40020458
 8005434:	40020470 	.word	0x40020470
 8005438:	40020488 	.word	0x40020488
 800543c:	400204a0 	.word	0x400204a0
 8005440:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 020e 	bic.w	r2, r3, #14
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 020a 	orr.w	r2, r2, #10
 8005456:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0204 	orr.w	r2, r2, #4
 800546e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a83      	ldr	r2, [pc, #524]	; (8005684 <HAL_DMA_Start_IT+0x474>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d072      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a82      	ldr	r2, [pc, #520]	; (8005688 <HAL_DMA_Start_IT+0x478>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d06d      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a80      	ldr	r2, [pc, #512]	; (800568c <HAL_DMA_Start_IT+0x47c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d068      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7f      	ldr	r2, [pc, #508]	; (8005690 <HAL_DMA_Start_IT+0x480>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d063      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7d      	ldr	r2, [pc, #500]	; (8005694 <HAL_DMA_Start_IT+0x484>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d05e      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a7c      	ldr	r2, [pc, #496]	; (8005698 <HAL_DMA_Start_IT+0x488>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d059      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a7a      	ldr	r2, [pc, #488]	; (800569c <HAL_DMA_Start_IT+0x48c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d054      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a79      	ldr	r2, [pc, #484]	; (80056a0 <HAL_DMA_Start_IT+0x490>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d04f      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a77      	ldr	r2, [pc, #476]	; (80056a4 <HAL_DMA_Start_IT+0x494>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a76      	ldr	r2, [pc, #472]	; (80056a8 <HAL_DMA_Start_IT+0x498>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a74      	ldr	r2, [pc, #464]	; (80056ac <HAL_DMA_Start_IT+0x49c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a73      	ldr	r2, [pc, #460]	; (80056b0 <HAL_DMA_Start_IT+0x4a0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a71      	ldr	r2, [pc, #452]	; (80056b4 <HAL_DMA_Start_IT+0x4a4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a70      	ldr	r2, [pc, #448]	; (80056b8 <HAL_DMA_Start_IT+0x4a8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6e      	ldr	r2, [pc, #440]	; (80056bc <HAL_DMA_Start_IT+0x4ac>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6d      	ldr	r2, [pc, #436]	; (80056c0 <HAL_DMA_Start_IT+0x4b0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a6b      	ldr	r2, [pc, #428]	; (80056c4 <HAL_DMA_Start_IT+0x4b4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6a      	ldr	r2, [pc, #424]	; (80056c8 <HAL_DMA_Start_IT+0x4b8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a68      	ldr	r2, [pc, #416]	; (80056cc <HAL_DMA_Start_IT+0x4bc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a67      	ldr	r2, [pc, #412]	; (80056d0 <HAL_DMA_Start_IT+0x4c0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a65      	ldr	r2, [pc, #404]	; (80056d4 <HAL_DMA_Start_IT+0x4c4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a64      	ldr	r2, [pc, #400]	; (80056d8 <HAL_DMA_Start_IT+0x4c8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a62      	ldr	r2, [pc, #392]	; (80056dc <HAL_DMA_Start_IT+0x4cc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_Start_IT+0x350>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a61      	ldr	r2, [pc, #388]	; (80056e0 <HAL_DMA_Start_IT+0x4d0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d101      	bne.n	8005564 <HAL_DMA_Start_IT+0x354>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_DMA_Start_IT+0x356>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01a      	beq.n	80055a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005586:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a37      	ldr	r2, [pc, #220]	; (8005684 <HAL_DMA_Start_IT+0x474>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04a      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a36      	ldr	r2, [pc, #216]	; (8005688 <HAL_DMA_Start_IT+0x478>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d045      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a34      	ldr	r2, [pc, #208]	; (800568c <HAL_DMA_Start_IT+0x47c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d040      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a33      	ldr	r2, [pc, #204]	; (8005690 <HAL_DMA_Start_IT+0x480>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d03b      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a31      	ldr	r2, [pc, #196]	; (8005694 <HAL_DMA_Start_IT+0x484>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d036      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a30      	ldr	r2, [pc, #192]	; (8005698 <HAL_DMA_Start_IT+0x488>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d031      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	; (800569c <HAL_DMA_Start_IT+0x48c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02c      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HAL_DMA_Start_IT+0x490>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d027      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2b      	ldr	r2, [pc, #172]	; (80056a4 <HAL_DMA_Start_IT+0x494>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d022      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2a      	ldr	r2, [pc, #168]	; (80056a8 <HAL_DMA_Start_IT+0x498>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d01d      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a28      	ldr	r2, [pc, #160]	; (80056ac <HAL_DMA_Start_IT+0x49c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <HAL_DMA_Start_IT+0x4a0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <HAL_DMA_Start_IT+0x4a4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a24      	ldr	r2, [pc, #144]	; (80056b8 <HAL_DMA_Start_IT+0x4a8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a22      	ldr	r2, [pc, #136]	; (80056bc <HAL_DMA_Start_IT+0x4ac>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_DMA_Start_IT+0x430>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <HAL_DMA_Start_IT+0x4b0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d108      	bne.n	8005652 <HAL_DMA_Start_IT+0x442>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e012      	b.n	8005678 <HAL_DMA_Start_IT+0x468>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e009      	b.n	8005678 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40020010 	.word	0x40020010
 8005688:	40020028 	.word	0x40020028
 800568c:	40020040 	.word	0x40020040
 8005690:	40020058 	.word	0x40020058
 8005694:	40020070 	.word	0x40020070
 8005698:	40020088 	.word	0x40020088
 800569c:	400200a0 	.word	0x400200a0
 80056a0:	400200b8 	.word	0x400200b8
 80056a4:	40020410 	.word	0x40020410
 80056a8:	40020428 	.word	0x40020428
 80056ac:	40020440 	.word	0x40020440
 80056b0:	40020458 	.word	0x40020458
 80056b4:	40020470 	.word	0x40020470
 80056b8:	40020488 	.word	0x40020488
 80056bc:	400204a0 	.word	0x400204a0
 80056c0:	400204b8 	.word	0x400204b8
 80056c4:	58025408 	.word	0x58025408
 80056c8:	5802541c 	.word	0x5802541c
 80056cc:	58025430 	.word	0x58025430
 80056d0:	58025444 	.word	0x58025444
 80056d4:	58025458 	.word	0x58025458
 80056d8:	5802546c 	.word	0x5802546c
 80056dc:	58025480 	.word	0x58025480
 80056e0:	58025494 	.word	0x58025494

080056e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80056ec:	f7fe fdf2 	bl	80042d4 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e2dc      	b.n	8005cb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d008      	beq.n	800571a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2280      	movs	r2, #128	; 0x80
 800570c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e2cd      	b.n	8005cb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a76      	ldr	r2, [pc, #472]	; (80058f8 <HAL_DMA_Abort+0x214>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d04a      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a74      	ldr	r2, [pc, #464]	; (80058fc <HAL_DMA_Abort+0x218>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d045      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	; (8005900 <HAL_DMA_Abort+0x21c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d040      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a71      	ldr	r2, [pc, #452]	; (8005904 <HAL_DMA_Abort+0x220>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d03b      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a70      	ldr	r2, [pc, #448]	; (8005908 <HAL_DMA_Abort+0x224>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d036      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a6e      	ldr	r2, [pc, #440]	; (800590c <HAL_DMA_Abort+0x228>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d031      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a6d      	ldr	r2, [pc, #436]	; (8005910 <HAL_DMA_Abort+0x22c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d02c      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a6b      	ldr	r2, [pc, #428]	; (8005914 <HAL_DMA_Abort+0x230>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d027      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a6a      	ldr	r2, [pc, #424]	; (8005918 <HAL_DMA_Abort+0x234>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d022      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a68      	ldr	r2, [pc, #416]	; (800591c <HAL_DMA_Abort+0x238>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01d      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a67      	ldr	r2, [pc, #412]	; (8005920 <HAL_DMA_Abort+0x23c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d018      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a65      	ldr	r2, [pc, #404]	; (8005924 <HAL_DMA_Abort+0x240>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a64      	ldr	r2, [pc, #400]	; (8005928 <HAL_DMA_Abort+0x244>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a62      	ldr	r2, [pc, #392]	; (800592c <HAL_DMA_Abort+0x248>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a61      	ldr	r2, [pc, #388]	; (8005930 <HAL_DMA_Abort+0x24c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_DMA_Abort+0xd6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a5f      	ldr	r2, [pc, #380]	; (8005934 <HAL_DMA_Abort+0x250>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d101      	bne.n	80057be <HAL_DMA_Abort+0xda>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <HAL_DMA_Abort+0xdc>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 021e 	bic.w	r2, r2, #30
 80057d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e00a      	b.n	8005802 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 020e 	bic.w	r2, r2, #14
 80057fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3c      	ldr	r2, [pc, #240]	; (80058f8 <HAL_DMA_Abort+0x214>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d072      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <HAL_DMA_Abort+0x218>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d06d      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a39      	ldr	r2, [pc, #228]	; (8005900 <HAL_DMA_Abort+0x21c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d068      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a37      	ldr	r2, [pc, #220]	; (8005904 <HAL_DMA_Abort+0x220>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d063      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a36      	ldr	r2, [pc, #216]	; (8005908 <HAL_DMA_Abort+0x224>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d05e      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a34      	ldr	r2, [pc, #208]	; (800590c <HAL_DMA_Abort+0x228>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d059      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a33      	ldr	r2, [pc, #204]	; (8005910 <HAL_DMA_Abort+0x22c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d054      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a31      	ldr	r2, [pc, #196]	; (8005914 <HAL_DMA_Abort+0x230>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d04f      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a30      	ldr	r2, [pc, #192]	; (8005918 <HAL_DMA_Abort+0x234>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d04a      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2e      	ldr	r2, [pc, #184]	; (800591c <HAL_DMA_Abort+0x238>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d045      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a2d      	ldr	r2, [pc, #180]	; (8005920 <HAL_DMA_Abort+0x23c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d040      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2b      	ldr	r2, [pc, #172]	; (8005924 <HAL_DMA_Abort+0x240>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d03b      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2a      	ldr	r2, [pc, #168]	; (8005928 <HAL_DMA_Abort+0x244>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d036      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a28      	ldr	r2, [pc, #160]	; (800592c <HAL_DMA_Abort+0x248>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d031      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a27      	ldr	r2, [pc, #156]	; (8005930 <HAL_DMA_Abort+0x24c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d02c      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a25      	ldr	r2, [pc, #148]	; (8005934 <HAL_DMA_Abort+0x250>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d027      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a24      	ldr	r2, [pc, #144]	; (8005938 <HAL_DMA_Abort+0x254>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d022      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a22      	ldr	r2, [pc, #136]	; (800593c <HAL_DMA_Abort+0x258>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01d      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a21      	ldr	r2, [pc, #132]	; (8005940 <HAL_DMA_Abort+0x25c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d018      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1f      	ldr	r2, [pc, #124]	; (8005944 <HAL_DMA_Abort+0x260>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <HAL_DMA_Abort+0x264>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1c      	ldr	r2, [pc, #112]	; (800594c <HAL_DMA_Abort+0x268>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <HAL_DMA_Abort+0x26c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_DMA_Abort+0x20e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a19      	ldr	r2, [pc, #100]	; (8005954 <HAL_DMA_Abort+0x270>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d132      	bne.n	8005958 <HAL_DMA_Abort+0x274>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e031      	b.n	800595a <HAL_DMA_Abort+0x276>
 80058f6:	bf00      	nop
 80058f8:	40020010 	.word	0x40020010
 80058fc:	40020028 	.word	0x40020028
 8005900:	40020040 	.word	0x40020040
 8005904:	40020058 	.word	0x40020058
 8005908:	40020070 	.word	0x40020070
 800590c:	40020088 	.word	0x40020088
 8005910:	400200a0 	.word	0x400200a0
 8005914:	400200b8 	.word	0x400200b8
 8005918:	40020410 	.word	0x40020410
 800591c:	40020428 	.word	0x40020428
 8005920:	40020440 	.word	0x40020440
 8005924:	40020458 	.word	0x40020458
 8005928:	40020470 	.word	0x40020470
 800592c:	40020488 	.word	0x40020488
 8005930:	400204a0 	.word	0x400204a0
 8005934:	400204b8 	.word	0x400204b8
 8005938:	58025408 	.word	0x58025408
 800593c:	5802541c 	.word	0x5802541c
 8005940:	58025430 	.word	0x58025430
 8005944:	58025444 	.word	0x58025444
 8005948:	58025458 	.word	0x58025458
 800594c:	5802546c 	.word	0x5802546c
 8005950:	58025480 	.word	0x58025480
 8005954:	58025494 	.word	0x58025494
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800596c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a6d      	ldr	r2, [pc, #436]	; (8005b28 <HAL_DMA_Abort+0x444>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d04a      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a6b      	ldr	r2, [pc, #428]	; (8005b2c <HAL_DMA_Abort+0x448>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d045      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6a      	ldr	r2, [pc, #424]	; (8005b30 <HAL_DMA_Abort+0x44c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d040      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a68      	ldr	r2, [pc, #416]	; (8005b34 <HAL_DMA_Abort+0x450>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d03b      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a67      	ldr	r2, [pc, #412]	; (8005b38 <HAL_DMA_Abort+0x454>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d036      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a65      	ldr	r2, [pc, #404]	; (8005b3c <HAL_DMA_Abort+0x458>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a64      	ldr	r2, [pc, #400]	; (8005b40 <HAL_DMA_Abort+0x45c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d02c      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a62      	ldr	r2, [pc, #392]	; (8005b44 <HAL_DMA_Abort+0x460>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d027      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a61      	ldr	r2, [pc, #388]	; (8005b48 <HAL_DMA_Abort+0x464>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a5f      	ldr	r2, [pc, #380]	; (8005b4c <HAL_DMA_Abort+0x468>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a5e      	ldr	r2, [pc, #376]	; (8005b50 <HAL_DMA_Abort+0x46c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a5c      	ldr	r2, [pc, #368]	; (8005b54 <HAL_DMA_Abort+0x470>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a5b      	ldr	r2, [pc, #364]	; (8005b58 <HAL_DMA_Abort+0x474>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a59      	ldr	r2, [pc, #356]	; (8005b5c <HAL_DMA_Abort+0x478>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a58      	ldr	r2, [pc, #352]	; (8005b60 <HAL_DMA_Abort+0x47c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_DMA_Abort+0x32a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a56      	ldr	r2, [pc, #344]	; (8005b64 <HAL_DMA_Abort+0x480>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <HAL_DMA_Abort+0x33c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e007      	b.n	8005a30 <HAL_DMA_Abort+0x34c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a30:	e013      	b.n	8005a5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a32:	f7fe fc4f 	bl	80042d4 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b05      	cmp	r3, #5
 8005a3e:	d90c      	bls.n	8005a5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2203      	movs	r2, #3
 8005a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e12d      	b.n	8005cb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e5      	bne.n	8005a32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2f      	ldr	r2, [pc, #188]	; (8005b28 <HAL_DMA_Abort+0x444>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d04a      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2d      	ldr	r2, [pc, #180]	; (8005b2c <HAL_DMA_Abort+0x448>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d045      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2c      	ldr	r2, [pc, #176]	; (8005b30 <HAL_DMA_Abort+0x44c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d040      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <HAL_DMA_Abort+0x450>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d03b      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <HAL_DMA_Abort+0x454>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d036      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <HAL_DMA_Abort+0x458>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d031      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <HAL_DMA_Abort+0x45c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d02c      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <HAL_DMA_Abort+0x460>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d027      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <HAL_DMA_Abort+0x464>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <HAL_DMA_Abort+0x468>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a20      	ldr	r2, [pc, #128]	; (8005b50 <HAL_DMA_Abort+0x46c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <HAL_DMA_Abort+0x470>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <HAL_DMA_Abort+0x474>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_DMA_Abort+0x478>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_DMA_Abort+0x47c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_DMA_Abort+0x422>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_DMA_Abort+0x480>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d101      	bne.n	8005b0a <HAL_DMA_Abort+0x426>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <HAL_DMA_Abort+0x428>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02b      	beq.n	8005b68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	f003 031f 	and.w	r3, r3, #31
 8005b1e:	223f      	movs	r2, #63	; 0x3f
 8005b20:	409a      	lsls	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	609a      	str	r2, [r3, #8]
 8005b26:	e02a      	b.n	8005b7e <HAL_DMA_Abort+0x49a>
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	2201      	movs	r2, #1
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a4f      	ldr	r2, [pc, #316]	; (8005cc0 <HAL_DMA_Abort+0x5dc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d072      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a4d      	ldr	r2, [pc, #308]	; (8005cc4 <HAL_DMA_Abort+0x5e0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d06d      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a4c      	ldr	r2, [pc, #304]	; (8005cc8 <HAL_DMA_Abort+0x5e4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d068      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a4a      	ldr	r2, [pc, #296]	; (8005ccc <HAL_DMA_Abort+0x5e8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d063      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a49      	ldr	r2, [pc, #292]	; (8005cd0 <HAL_DMA_Abort+0x5ec>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d05e      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a47      	ldr	r2, [pc, #284]	; (8005cd4 <HAL_DMA_Abort+0x5f0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d059      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a46      	ldr	r2, [pc, #280]	; (8005cd8 <HAL_DMA_Abort+0x5f4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d054      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a44      	ldr	r2, [pc, #272]	; (8005cdc <HAL_DMA_Abort+0x5f8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d04f      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a43      	ldr	r2, [pc, #268]	; (8005ce0 <HAL_DMA_Abort+0x5fc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d04a      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a41      	ldr	r2, [pc, #260]	; (8005ce4 <HAL_DMA_Abort+0x600>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d045      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a40      	ldr	r2, [pc, #256]	; (8005ce8 <HAL_DMA_Abort+0x604>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d040      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a3e      	ldr	r2, [pc, #248]	; (8005cec <HAL_DMA_Abort+0x608>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d03b      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a3d      	ldr	r2, [pc, #244]	; (8005cf0 <HAL_DMA_Abort+0x60c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d036      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a3b      	ldr	r2, [pc, #236]	; (8005cf4 <HAL_DMA_Abort+0x610>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d031      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a3a      	ldr	r2, [pc, #232]	; (8005cf8 <HAL_DMA_Abort+0x614>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d02c      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a38      	ldr	r2, [pc, #224]	; (8005cfc <HAL_DMA_Abort+0x618>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d027      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a37      	ldr	r2, [pc, #220]	; (8005d00 <HAL_DMA_Abort+0x61c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a35      	ldr	r2, [pc, #212]	; (8005d04 <HAL_DMA_Abort+0x620>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01d      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a34      	ldr	r2, [pc, #208]	; (8005d08 <HAL_DMA_Abort+0x624>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a32      	ldr	r2, [pc, #200]	; (8005d0c <HAL_DMA_Abort+0x628>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a31      	ldr	r2, [pc, #196]	; (8005d10 <HAL_DMA_Abort+0x62c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2f      	ldr	r2, [pc, #188]	; (8005d14 <HAL_DMA_Abort+0x630>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2e      	ldr	r2, [pc, #184]	; (8005d18 <HAL_DMA_Abort+0x634>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_DMA_Abort+0x58a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2c      	ldr	r2, [pc, #176]	; (8005d1c <HAL_DMA_Abort+0x638>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <HAL_DMA_Abort+0x58e>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <HAL_DMA_Abort+0x590>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d015      	beq.n	8005ca4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ca2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40020010 	.word	0x40020010
 8005cc4:	40020028 	.word	0x40020028
 8005cc8:	40020040 	.word	0x40020040
 8005ccc:	40020058 	.word	0x40020058
 8005cd0:	40020070 	.word	0x40020070
 8005cd4:	40020088 	.word	0x40020088
 8005cd8:	400200a0 	.word	0x400200a0
 8005cdc:	400200b8 	.word	0x400200b8
 8005ce0:	40020410 	.word	0x40020410
 8005ce4:	40020428 	.word	0x40020428
 8005ce8:	40020440 	.word	0x40020440
 8005cec:	40020458 	.word	0x40020458
 8005cf0:	40020470 	.word	0x40020470
 8005cf4:	40020488 	.word	0x40020488
 8005cf8:	400204a0 	.word	0x400204a0
 8005cfc:	400204b8 	.word	0x400204b8
 8005d00:	58025408 	.word	0x58025408
 8005d04:	5802541c 	.word	0x5802541c
 8005d08:	58025430 	.word	0x58025430
 8005d0c:	58025444 	.word	0x58025444
 8005d10:	58025458 	.word	0x58025458
 8005d14:	5802546c 	.word	0x5802546c
 8005d18:	58025480 	.word	0x58025480
 8005d1c:	58025494 	.word	0x58025494

08005d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e237      	b.n	80061a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d004      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2280      	movs	r2, #128	; 0x80
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e22c      	b.n	80061a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5c      	ldr	r2, [pc, #368]	; (8005ec0 <HAL_DMA_Abort_IT+0x1a0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d04a      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a5b      	ldr	r2, [pc, #364]	; (8005ec4 <HAL_DMA_Abort_IT+0x1a4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d045      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a59      	ldr	r2, [pc, #356]	; (8005ec8 <HAL_DMA_Abort_IT+0x1a8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d040      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a58      	ldr	r2, [pc, #352]	; (8005ecc <HAL_DMA_Abort_IT+0x1ac>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d03b      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a56      	ldr	r2, [pc, #344]	; (8005ed0 <HAL_DMA_Abort_IT+0x1b0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d036      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a55      	ldr	r2, [pc, #340]	; (8005ed4 <HAL_DMA_Abort_IT+0x1b4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d031      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a53      	ldr	r2, [pc, #332]	; (8005ed8 <HAL_DMA_Abort_IT+0x1b8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d02c      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a52      	ldr	r2, [pc, #328]	; (8005edc <HAL_DMA_Abort_IT+0x1bc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d027      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a50      	ldr	r2, [pc, #320]	; (8005ee0 <HAL_DMA_Abort_IT+0x1c0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d022      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a4f      	ldr	r2, [pc, #316]	; (8005ee4 <HAL_DMA_Abort_IT+0x1c4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d01d      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a4d      	ldr	r2, [pc, #308]	; (8005ee8 <HAL_DMA_Abort_IT+0x1c8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d018      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4c      	ldr	r2, [pc, #304]	; (8005eec <HAL_DMA_Abort_IT+0x1cc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d013      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4a      	ldr	r2, [pc, #296]	; (8005ef0 <HAL_DMA_Abort_IT+0x1d0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00e      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a49      	ldr	r2, [pc, #292]	; (8005ef4 <HAL_DMA_Abort_IT+0x1d4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d009      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a47      	ldr	r2, [pc, #284]	; (8005ef8 <HAL_DMA_Abort_IT+0x1d8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <HAL_DMA_Abort_IT+0xc8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a46      	ldr	r2, [pc, #280]	; (8005efc <HAL_DMA_Abort_IT+0x1dc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d101      	bne.n	8005dec <HAL_DMA_Abort_IT+0xcc>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_DMA_Abort_IT+0xce>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8086 	beq.w	8005f00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2204      	movs	r2, #4
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2f      	ldr	r2, [pc, #188]	; (8005ec0 <HAL_DMA_Abort_IT+0x1a0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d04a      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2e      	ldr	r2, [pc, #184]	; (8005ec4 <HAL_DMA_Abort_IT+0x1a4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d045      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2c      	ldr	r2, [pc, #176]	; (8005ec8 <HAL_DMA_Abort_IT+0x1a8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d040      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <HAL_DMA_Abort_IT+0x1ac>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d03b      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a29      	ldr	r2, [pc, #164]	; (8005ed0 <HAL_DMA_Abort_IT+0x1b0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d036      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <HAL_DMA_Abort_IT+0x1b4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d031      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a26      	ldr	r2, [pc, #152]	; (8005ed8 <HAL_DMA_Abort_IT+0x1b8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d02c      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a25      	ldr	r2, [pc, #148]	; (8005edc <HAL_DMA_Abort_IT+0x1bc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d027      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a23      	ldr	r2, [pc, #140]	; (8005ee0 <HAL_DMA_Abort_IT+0x1c0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d022      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a22      	ldr	r2, [pc, #136]	; (8005ee4 <HAL_DMA_Abort_IT+0x1c4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d01d      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a20      	ldr	r2, [pc, #128]	; (8005ee8 <HAL_DMA_Abort_IT+0x1c8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d018      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1f      	ldr	r2, [pc, #124]	; (8005eec <HAL_DMA_Abort_IT+0x1cc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <HAL_DMA_Abort_IT+0x1d0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00e      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1c      	ldr	r2, [pc, #112]	; (8005ef4 <HAL_DMA_Abort_IT+0x1d4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d009      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ef8 <HAL_DMA_Abort_IT+0x1d8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x17c>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a19      	ldr	r2, [pc, #100]	; (8005efc <HAL_DMA_Abort_IT+0x1dc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <HAL_DMA_Abort_IT+0x18e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e178      	b.n	80061a0 <HAL_DMA_Abort_IT+0x480>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e16f      	b.n	80061a0 <HAL_DMA_Abort_IT+0x480>
 8005ec0:	40020010 	.word	0x40020010
 8005ec4:	40020028 	.word	0x40020028
 8005ec8:	40020040 	.word	0x40020040
 8005ecc:	40020058 	.word	0x40020058
 8005ed0:	40020070 	.word	0x40020070
 8005ed4:	40020088 	.word	0x40020088
 8005ed8:	400200a0 	.word	0x400200a0
 8005edc:	400200b8 	.word	0x400200b8
 8005ee0:	40020410 	.word	0x40020410
 8005ee4:	40020428 	.word	0x40020428
 8005ee8:	40020440 	.word	0x40020440
 8005eec:	40020458 	.word	0x40020458
 8005ef0:	40020470 	.word	0x40020470
 8005ef4:	40020488 	.word	0x40020488
 8005ef8:	400204a0 	.word	0x400204a0
 8005efc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 020e 	bic.w	r2, r2, #14
 8005f0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a6c      	ldr	r2, [pc, #432]	; (80060c8 <HAL_DMA_Abort_IT+0x3a8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d04a      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a6b      	ldr	r2, [pc, #428]	; (80060cc <HAL_DMA_Abort_IT+0x3ac>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d045      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a69      	ldr	r2, [pc, #420]	; (80060d0 <HAL_DMA_Abort_IT+0x3b0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d040      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a68      	ldr	r2, [pc, #416]	; (80060d4 <HAL_DMA_Abort_IT+0x3b4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d03b      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a66      	ldr	r2, [pc, #408]	; (80060d8 <HAL_DMA_Abort_IT+0x3b8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d036      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a65      	ldr	r2, [pc, #404]	; (80060dc <HAL_DMA_Abort_IT+0x3bc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d031      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a63      	ldr	r2, [pc, #396]	; (80060e0 <HAL_DMA_Abort_IT+0x3c0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02c      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a62      	ldr	r2, [pc, #392]	; (80060e4 <HAL_DMA_Abort_IT+0x3c4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d027      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a60      	ldr	r2, [pc, #384]	; (80060e8 <HAL_DMA_Abort_IT+0x3c8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5f      	ldr	r2, [pc, #380]	; (80060ec <HAL_DMA_Abort_IT+0x3cc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d01d      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a5d      	ldr	r2, [pc, #372]	; (80060f0 <HAL_DMA_Abort_IT+0x3d0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a5c      	ldr	r2, [pc, #368]	; (80060f4 <HAL_DMA_Abort_IT+0x3d4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5a      	ldr	r2, [pc, #360]	; (80060f8 <HAL_DMA_Abort_IT+0x3d8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a59      	ldr	r2, [pc, #356]	; (80060fc <HAL_DMA_Abort_IT+0x3dc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a57      	ldr	r2, [pc, #348]	; (8006100 <HAL_DMA_Abort_IT+0x3e0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0x290>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a56      	ldr	r2, [pc, #344]	; (8006104 <HAL_DMA_Abort_IT+0x3e4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <HAL_DMA_Abort_IT+0x2a2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e007      	b.n	8005fd2 <HAL_DMA_Abort_IT+0x2b2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0201 	bic.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <HAL_DMA_Abort_IT+0x3a8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d072      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3a      	ldr	r2, [pc, #232]	; (80060cc <HAL_DMA_Abort_IT+0x3ac>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d06d      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a39      	ldr	r2, [pc, #228]	; (80060d0 <HAL_DMA_Abort_IT+0x3b0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d068      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a37      	ldr	r2, [pc, #220]	; (80060d4 <HAL_DMA_Abort_IT+0x3b4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d063      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a36      	ldr	r2, [pc, #216]	; (80060d8 <HAL_DMA_Abort_IT+0x3b8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d05e      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a34      	ldr	r2, [pc, #208]	; (80060dc <HAL_DMA_Abort_IT+0x3bc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d059      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a33      	ldr	r2, [pc, #204]	; (80060e0 <HAL_DMA_Abort_IT+0x3c0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d054      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a31      	ldr	r2, [pc, #196]	; (80060e4 <HAL_DMA_Abort_IT+0x3c4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d04f      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <HAL_DMA_Abort_IT+0x3c8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d04a      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <HAL_DMA_Abort_IT+0x3cc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d045      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <HAL_DMA_Abort_IT+0x3d0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d040      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2b      	ldr	r2, [pc, #172]	; (80060f4 <HAL_DMA_Abort_IT+0x3d4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d03b      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <HAL_DMA_Abort_IT+0x3d8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d036      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a28      	ldr	r2, [pc, #160]	; (80060fc <HAL_DMA_Abort_IT+0x3dc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d031      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a27      	ldr	r2, [pc, #156]	; (8006100 <HAL_DMA_Abort_IT+0x3e0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d02c      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <HAL_DMA_Abort_IT+0x3e4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d027      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a24      	ldr	r2, [pc, #144]	; (8006108 <HAL_DMA_Abort_IT+0x3e8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d022      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a22      	ldr	r2, [pc, #136]	; (800610c <HAL_DMA_Abort_IT+0x3ec>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d01d      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <HAL_DMA_Abort_IT+0x3f0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d018      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <HAL_DMA_Abort_IT+0x3f4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_DMA_Abort_IT+0x3f8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <HAL_DMA_Abort_IT+0x3fc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d009      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <HAL_DMA_Abort_IT+0x400>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_DMA_Abort_IT+0x3a2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_DMA_Abort_IT+0x404>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d132      	bne.n	8006128 <HAL_DMA_Abort_IT+0x408>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e031      	b.n	800612a <HAL_DMA_Abort_IT+0x40a>
 80060c6:	bf00      	nop
 80060c8:	40020010 	.word	0x40020010
 80060cc:	40020028 	.word	0x40020028
 80060d0:	40020040 	.word	0x40020040
 80060d4:	40020058 	.word	0x40020058
 80060d8:	40020070 	.word	0x40020070
 80060dc:	40020088 	.word	0x40020088
 80060e0:	400200a0 	.word	0x400200a0
 80060e4:	400200b8 	.word	0x400200b8
 80060e8:	40020410 	.word	0x40020410
 80060ec:	40020428 	.word	0x40020428
 80060f0:	40020440 	.word	0x40020440
 80060f4:	40020458 	.word	0x40020458
 80060f8:	40020470 	.word	0x40020470
 80060fc:	40020488 	.word	0x40020488
 8006100:	400204a0 	.word	0x400204a0
 8006104:	400204b8 	.word	0x400204b8
 8006108:	58025408 	.word	0x58025408
 800610c:	5802541c 	.word	0x5802541c
 8006110:	58025430 	.word	0x58025430
 8006114:	58025444 	.word	0x58025444
 8006118:	58025458 	.word	0x58025458
 800611c:	5802546c 	.word	0x5802546c
 8006120:	58025480 	.word	0x58025480
 8006124:	58025494 	.word	0x58025494
 8006128:	2300      	movs	r3, #0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d028      	beq.n	8006180 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800613c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006142:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2201      	movs	r2, #1
 800614e:	409a      	lsls	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800615c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00c      	beq.n	8006180 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006174:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800617e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	; 0x28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061b8:	4b67      	ldr	r3, [pc, #412]	; (8006358 <HAL_DMA_IRQHandler+0x1ac>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a67      	ldr	r2, [pc, #412]	; (800635c <HAL_DMA_IRQHandler+0x1b0>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	0a9b      	lsrs	r3, r3, #10
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a5f      	ldr	r2, [pc, #380]	; (8006360 <HAL_DMA_IRQHandler+0x1b4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a5d      	ldr	r2, [pc, #372]	; (8006364 <HAL_DMA_IRQHandler+0x1b8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a5c      	ldr	r2, [pc, #368]	; (8006368 <HAL_DMA_IRQHandler+0x1bc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5a      	ldr	r2, [pc, #360]	; (800636c <HAL_DMA_IRQHandler+0x1c0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a59      	ldr	r2, [pc, #356]	; (8006370 <HAL_DMA_IRQHandler+0x1c4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a57      	ldr	r2, [pc, #348]	; (8006374 <HAL_DMA_IRQHandler+0x1c8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a56      	ldr	r2, [pc, #344]	; (8006378 <HAL_DMA_IRQHandler+0x1cc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a54      	ldr	r2, [pc, #336]	; (800637c <HAL_DMA_IRQHandler+0x1d0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a53      	ldr	r2, [pc, #332]	; (8006380 <HAL_DMA_IRQHandler+0x1d4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a51      	ldr	r2, [pc, #324]	; (8006384 <HAL_DMA_IRQHandler+0x1d8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a50      	ldr	r2, [pc, #320]	; (8006388 <HAL_DMA_IRQHandler+0x1dc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a4e      	ldr	r2, [pc, #312]	; (800638c <HAL_DMA_IRQHandler+0x1e0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a4d      	ldr	r2, [pc, #308]	; (8006390 <HAL_DMA_IRQHandler+0x1e4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a4b      	ldr	r2, [pc, #300]	; (8006394 <HAL_DMA_IRQHandler+0x1e8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a4a      	ldr	r2, [pc, #296]	; (8006398 <HAL_DMA_IRQHandler+0x1ec>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_IRQHandler+0xd2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a48      	ldr	r2, [pc, #288]	; (800639c <HAL_DMA_IRQHandler+0x1f0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d101      	bne.n	8006282 <HAL_DMA_IRQHandler+0xd6>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <HAL_DMA_IRQHandler+0xd8>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 842b 	beq.w	8006ae0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	2208      	movs	r2, #8
 8006294:	409a      	lsls	r2, r3
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80a2 	beq.w	80063e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a2e      	ldr	r2, [pc, #184]	; (8006360 <HAL_DMA_IRQHandler+0x1b4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d04a      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a2d      	ldr	r2, [pc, #180]	; (8006364 <HAL_DMA_IRQHandler+0x1b8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d045      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a2b      	ldr	r2, [pc, #172]	; (8006368 <HAL_DMA_IRQHandler+0x1bc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d040      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a2a      	ldr	r2, [pc, #168]	; (800636c <HAL_DMA_IRQHandler+0x1c0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d03b      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a28      	ldr	r2, [pc, #160]	; (8006370 <HAL_DMA_IRQHandler+0x1c4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d036      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a27      	ldr	r2, [pc, #156]	; (8006374 <HAL_DMA_IRQHandler+0x1c8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d031      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a25      	ldr	r2, [pc, #148]	; (8006378 <HAL_DMA_IRQHandler+0x1cc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d02c      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a24      	ldr	r2, [pc, #144]	; (800637c <HAL_DMA_IRQHandler+0x1d0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d027      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <HAL_DMA_IRQHandler+0x1d4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d022      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a21      	ldr	r2, [pc, #132]	; (8006384 <HAL_DMA_IRQHandler+0x1d8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d01d      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1f      	ldr	r2, [pc, #124]	; (8006388 <HAL_DMA_IRQHandler+0x1dc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d018      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <HAL_DMA_IRQHandler+0x1e0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <HAL_DMA_IRQHandler+0x1e4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00e      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <HAL_DMA_IRQHandler+0x1e8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d009      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a19      	ldr	r2, [pc, #100]	; (8006398 <HAL_DMA_IRQHandler+0x1ec>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_DMA_IRQHandler+0x194>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a18      	ldr	r2, [pc, #96]	; (800639c <HAL_DMA_IRQHandler+0x1f0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d12f      	bne.n	80063a0 <HAL_DMA_IRQHandler+0x1f4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf14      	ite	ne
 800634e:	2301      	movne	r3, #1
 8006350:	2300      	moveq	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e02e      	b.n	80063b4 <HAL_DMA_IRQHandler+0x208>
 8006356:	bf00      	nop
 8006358:	24000044 	.word	0x24000044
 800635c:	1b4e81b5 	.word	0x1b4e81b5
 8006360:	40020010 	.word	0x40020010
 8006364:	40020028 	.word	0x40020028
 8006368:	40020040 	.word	0x40020040
 800636c:	40020058 	.word	0x40020058
 8006370:	40020070 	.word	0x40020070
 8006374:	40020088 	.word	0x40020088
 8006378:	400200a0 	.word	0x400200a0
 800637c:	400200b8 	.word	0x400200b8
 8006380:	40020410 	.word	0x40020410
 8006384:	40020428 	.word	0x40020428
 8006388:	40020440 	.word	0x40020440
 800638c:	40020458 	.word	0x40020458
 8006390:	40020470 	.word	0x40020470
 8006394:	40020488 	.word	0x40020488
 8006398:	400204a0 	.word	0x400204a0
 800639c:	400204b8 	.word	0x400204b8
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d015      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0204 	bic.w	r2, r2, #4
 80063c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2208      	movs	r2, #8
 80063d2:	409a      	lsls	r2, r3
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063dc:	f043 0201 	orr.w	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d06e      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a69      	ldr	r2, [pc, #420]	; (80065a4 <HAL_DMA_IRQHandler+0x3f8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a67      	ldr	r2, [pc, #412]	; (80065a8 <HAL_DMA_IRQHandler+0x3fc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a66      	ldr	r2, [pc, #408]	; (80065ac <HAL_DMA_IRQHandler+0x400>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a64      	ldr	r2, [pc, #400]	; (80065b0 <HAL_DMA_IRQHandler+0x404>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a63      	ldr	r2, [pc, #396]	; (80065b4 <HAL_DMA_IRQHandler+0x408>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a61      	ldr	r2, [pc, #388]	; (80065b8 <HAL_DMA_IRQHandler+0x40c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a60      	ldr	r2, [pc, #384]	; (80065bc <HAL_DMA_IRQHandler+0x410>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a5e      	ldr	r2, [pc, #376]	; (80065c0 <HAL_DMA_IRQHandler+0x414>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a5d      	ldr	r2, [pc, #372]	; (80065c4 <HAL_DMA_IRQHandler+0x418>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a5b      	ldr	r2, [pc, #364]	; (80065c8 <HAL_DMA_IRQHandler+0x41c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a5a      	ldr	r2, [pc, #360]	; (80065cc <HAL_DMA_IRQHandler+0x420>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a58      	ldr	r2, [pc, #352]	; (80065d0 <HAL_DMA_IRQHandler+0x424>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a57      	ldr	r2, [pc, #348]	; (80065d4 <HAL_DMA_IRQHandler+0x428>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a55      	ldr	r2, [pc, #340]	; (80065d8 <HAL_DMA_IRQHandler+0x42c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a54      	ldr	r2, [pc, #336]	; (80065dc <HAL_DMA_IRQHandler+0x430>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_IRQHandler+0x2ee>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a52      	ldr	r2, [pc, #328]	; (80065e0 <HAL_DMA_IRQHandler+0x434>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d10a      	bne.n	80064b0 <HAL_DMA_IRQHandler+0x304>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bf14      	ite	ne
 80064a8:	2301      	movne	r3, #1
 80064aa:	2300      	moveq	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	e003      	b.n	80064b8 <HAL_DMA_IRQHandler+0x30c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2201      	movs	r2, #1
 80064c6:	409a      	lsls	r2, r3
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	f043 0202 	orr.w	r2, r3, #2
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2204      	movs	r2, #4
 80064e2:	409a      	lsls	r2, r3
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 808f 	beq.w	800660c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <HAL_DMA_IRQHandler+0x3f8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d04a      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <HAL_DMA_IRQHandler+0x3fc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d045      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a29      	ldr	r2, [pc, #164]	; (80065ac <HAL_DMA_IRQHandler+0x400>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d040      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <HAL_DMA_IRQHandler+0x404>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d03b      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <HAL_DMA_IRQHandler+0x408>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d036      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a24      	ldr	r2, [pc, #144]	; (80065b8 <HAL_DMA_IRQHandler+0x40c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d031      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a23      	ldr	r2, [pc, #140]	; (80065bc <HAL_DMA_IRQHandler+0x410>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d02c      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <HAL_DMA_IRQHandler+0x414>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d027      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <HAL_DMA_IRQHandler+0x418>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d022      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <HAL_DMA_IRQHandler+0x41c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01d      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <HAL_DMA_IRQHandler+0x420>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d018      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <HAL_DMA_IRQHandler+0x424>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <HAL_DMA_IRQHandler+0x428>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00e      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <HAL_DMA_IRQHandler+0x42c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d009      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a17      	ldr	r2, [pc, #92]	; (80065dc <HAL_DMA_IRQHandler+0x430>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d004      	beq.n	800658e <HAL_DMA_IRQHandler+0x3e2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <HAL_DMA_IRQHandler+0x434>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d12a      	bne.n	80065e4 <HAL_DMA_IRQHandler+0x438>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e023      	b.n	80065ec <HAL_DMA_IRQHandler+0x440>
 80065a4:	40020010 	.word	0x40020010
 80065a8:	40020028 	.word	0x40020028
 80065ac:	40020040 	.word	0x40020040
 80065b0:	40020058 	.word	0x40020058
 80065b4:	40020070 	.word	0x40020070
 80065b8:	40020088 	.word	0x40020088
 80065bc:	400200a0 	.word	0x400200a0
 80065c0:	400200b8 	.word	0x400200b8
 80065c4:	40020410 	.word	0x40020410
 80065c8:	40020428 	.word	0x40020428
 80065cc:	40020440 	.word	0x40020440
 80065d0:	40020458 	.word	0x40020458
 80065d4:	40020470 	.word	0x40020470
 80065d8:	40020488 	.word	0x40020488
 80065dc:	400204a0 	.word	0x400204a0
 80065e0:	400204b8 	.word	0x400204b8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2204      	movs	r2, #4
 80065fa:	409a      	lsls	r2, r3
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	f043 0204 	orr.w	r2, r3, #4
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2210      	movs	r2, #16
 8006616:	409a      	lsls	r2, r3
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80a6 	beq.w	800676e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a85      	ldr	r2, [pc, #532]	; (800683c <HAL_DMA_IRQHandler+0x690>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d04a      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a83      	ldr	r2, [pc, #524]	; (8006840 <HAL_DMA_IRQHandler+0x694>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d045      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a82      	ldr	r2, [pc, #520]	; (8006844 <HAL_DMA_IRQHandler+0x698>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d040      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a80      	ldr	r2, [pc, #512]	; (8006848 <HAL_DMA_IRQHandler+0x69c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d03b      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a7f      	ldr	r2, [pc, #508]	; (800684c <HAL_DMA_IRQHandler+0x6a0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d036      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a7d      	ldr	r2, [pc, #500]	; (8006850 <HAL_DMA_IRQHandler+0x6a4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d031      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a7c      	ldr	r2, [pc, #496]	; (8006854 <HAL_DMA_IRQHandler+0x6a8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d02c      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a7a      	ldr	r2, [pc, #488]	; (8006858 <HAL_DMA_IRQHandler+0x6ac>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d027      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a79      	ldr	r2, [pc, #484]	; (800685c <HAL_DMA_IRQHandler+0x6b0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d022      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a77      	ldr	r2, [pc, #476]	; (8006860 <HAL_DMA_IRQHandler+0x6b4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01d      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a76      	ldr	r2, [pc, #472]	; (8006864 <HAL_DMA_IRQHandler+0x6b8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a74      	ldr	r2, [pc, #464]	; (8006868 <HAL_DMA_IRQHandler+0x6bc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a73      	ldr	r2, [pc, #460]	; (800686c <HAL_DMA_IRQHandler+0x6c0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a71      	ldr	r2, [pc, #452]	; (8006870 <HAL_DMA_IRQHandler+0x6c4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a70      	ldr	r2, [pc, #448]	; (8006874 <HAL_DMA_IRQHandler+0x6c8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x516>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a6e      	ldr	r2, [pc, #440]	; (8006878 <HAL_DMA_IRQHandler+0x6cc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d10a      	bne.n	80066d8 <HAL_DMA_IRQHandler+0x52c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e009      	b.n	80066ec <HAL_DMA_IRQHandler+0x540>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d03e      	beq.n	800676e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2210      	movs	r2, #16
 80066fa:	409a      	lsls	r2, r3
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d018      	beq.n	8006740 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d108      	bne.n	800672e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d024      	beq.n	800676e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
 800672c:	e01f      	b.n	800676e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01b      	beq.n	800676e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
 800673e:	e016      	b.n	800676e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d107      	bne.n	800675e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0208 	bic.w	r2, r2, #8
 800675c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2220      	movs	r2, #32
 8006778:	409a      	lsls	r2, r3
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	4013      	ands	r3, r2
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 8110 	beq.w	80069a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2c      	ldr	r2, [pc, #176]	; (800683c <HAL_DMA_IRQHandler+0x690>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d04a      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2b      	ldr	r2, [pc, #172]	; (8006840 <HAL_DMA_IRQHandler+0x694>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d045      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a29      	ldr	r2, [pc, #164]	; (8006844 <HAL_DMA_IRQHandler+0x698>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d040      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a28      	ldr	r2, [pc, #160]	; (8006848 <HAL_DMA_IRQHandler+0x69c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d03b      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <HAL_DMA_IRQHandler+0x6a0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d036      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a25      	ldr	r2, [pc, #148]	; (8006850 <HAL_DMA_IRQHandler+0x6a4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d031      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a23      	ldr	r2, [pc, #140]	; (8006854 <HAL_DMA_IRQHandler+0x6a8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d02c      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a22      	ldr	r2, [pc, #136]	; (8006858 <HAL_DMA_IRQHandler+0x6ac>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d027      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a20      	ldr	r2, [pc, #128]	; (800685c <HAL_DMA_IRQHandler+0x6b0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <HAL_DMA_IRQHandler+0x6b4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d01d      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <HAL_DMA_IRQHandler+0x6b8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1c      	ldr	r2, [pc, #112]	; (8006868 <HAL_DMA_IRQHandler+0x6bc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1a      	ldr	r2, [pc, #104]	; (800686c <HAL_DMA_IRQHandler+0x6c0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a19      	ldr	r2, [pc, #100]	; (8006870 <HAL_DMA_IRQHandler+0x6c4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a17      	ldr	r2, [pc, #92]	; (8006874 <HAL_DMA_IRQHandler+0x6c8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_DMA_IRQHandler+0x678>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a16      	ldr	r2, [pc, #88]	; (8006878 <HAL_DMA_IRQHandler+0x6cc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d12b      	bne.n	800687c <HAL_DMA_IRQHandler+0x6d0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0310 	and.w	r3, r3, #16
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf14      	ite	ne
 8006832:	2301      	movne	r3, #1
 8006834:	2300      	moveq	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	e02a      	b.n	8006890 <HAL_DMA_IRQHandler+0x6e4>
 800683a:	bf00      	nop
 800683c:	40020010 	.word	0x40020010
 8006840:	40020028 	.word	0x40020028
 8006844:	40020040 	.word	0x40020040
 8006848:	40020058 	.word	0x40020058
 800684c:	40020070 	.word	0x40020070
 8006850:	40020088 	.word	0x40020088
 8006854:	400200a0 	.word	0x400200a0
 8006858:	400200b8 	.word	0x400200b8
 800685c:	40020410 	.word	0x40020410
 8006860:	40020428 	.word	0x40020428
 8006864:	40020440 	.word	0x40020440
 8006868:	40020458 	.word	0x40020458
 800686c:	40020470 	.word	0x40020470
 8006870:	40020488 	.word	0x40020488
 8006874:	400204a0 	.word	0x400204a0
 8006878:	400204b8 	.word	0x400204b8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	bf14      	ite	ne
 800688a:	2301      	movne	r3, #1
 800688c:	2300      	moveq	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8087 	beq.w	80069a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	2220      	movs	r2, #32
 80068a0:	409a      	lsls	r2, r3
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d139      	bne.n	8006926 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0216 	bic.w	r2, r2, #22
 80068c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695a      	ldr	r2, [r3, #20]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <HAL_DMA_IRQHandler+0x736>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0208 	bic.w	r2, r2, #8
 80068f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	223f      	movs	r2, #63	; 0x3f
 80068fc:	409a      	lsls	r2, r3
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8382 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
          }
          return;
 8006924:	e37c      	b.n	8007020 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d018      	beq.n	8006966 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d108      	bne.n	8006954 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02c      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
 8006952:	e027      	b.n	80069a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d023      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
 8006964:	e01e      	b.n	80069a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10f      	bne.n	8006994 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0210 	bic.w	r2, r2, #16
 8006982:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 833e 	beq.w	800702a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8088 	beq.w	8006acc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2204      	movs	r2, #4
 80069c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a89      	ldr	r2, [pc, #548]	; (8006bf0 <HAL_DMA_IRQHandler+0xa44>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d04a      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a88      	ldr	r2, [pc, #544]	; (8006bf4 <HAL_DMA_IRQHandler+0xa48>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d045      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a86      	ldr	r2, [pc, #536]	; (8006bf8 <HAL_DMA_IRQHandler+0xa4c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d040      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a85      	ldr	r2, [pc, #532]	; (8006bfc <HAL_DMA_IRQHandler+0xa50>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d03b      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a83      	ldr	r2, [pc, #524]	; (8006c00 <HAL_DMA_IRQHandler+0xa54>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d036      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a82      	ldr	r2, [pc, #520]	; (8006c04 <HAL_DMA_IRQHandler+0xa58>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d031      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a80      	ldr	r2, [pc, #512]	; (8006c08 <HAL_DMA_IRQHandler+0xa5c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d02c      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a7f      	ldr	r2, [pc, #508]	; (8006c0c <HAL_DMA_IRQHandler+0xa60>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d027      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a7d      	ldr	r2, [pc, #500]	; (8006c10 <HAL_DMA_IRQHandler+0xa64>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d022      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7c      	ldr	r2, [pc, #496]	; (8006c14 <HAL_DMA_IRQHandler+0xa68>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d01d      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a7a      	ldr	r2, [pc, #488]	; (8006c18 <HAL_DMA_IRQHandler+0xa6c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a79      	ldr	r2, [pc, #484]	; (8006c1c <HAL_DMA_IRQHandler+0xa70>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a77      	ldr	r2, [pc, #476]	; (8006c20 <HAL_DMA_IRQHandler+0xa74>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a76      	ldr	r2, [pc, #472]	; (8006c24 <HAL_DMA_IRQHandler+0xa78>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a74      	ldr	r2, [pc, #464]	; (8006c28 <HAL_DMA_IRQHandler+0xa7c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x8b8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a73      	ldr	r2, [pc, #460]	; (8006c2c <HAL_DMA_IRQHandler+0xa80>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d108      	bne.n	8006a76 <HAL_DMA_IRQHandler+0x8ca>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e007      	b.n	8006a86 <HAL_DMA_IRQHandler+0x8da>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d307      	bcc.n	8006aa2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f2      	bne.n	8006a86 <HAL_DMA_IRQHandler+0x8da>
 8006aa0:	e000      	b.n	8006aa4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006aa2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006aba:	e003      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 82aa 	beq.w	800702a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
 8006ade:	e2a4      	b.n	800702a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a52      	ldr	r2, [pc, #328]	; (8006c30 <HAL_DMA_IRQHandler+0xa84>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d04a      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a51      	ldr	r2, [pc, #324]	; (8006c34 <HAL_DMA_IRQHandler+0xa88>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d045      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a4f      	ldr	r2, [pc, #316]	; (8006c38 <HAL_DMA_IRQHandler+0xa8c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d040      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a4e      	ldr	r2, [pc, #312]	; (8006c3c <HAL_DMA_IRQHandler+0xa90>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d03b      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a4c      	ldr	r2, [pc, #304]	; (8006c40 <HAL_DMA_IRQHandler+0xa94>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d036      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a4b      	ldr	r2, [pc, #300]	; (8006c44 <HAL_DMA_IRQHandler+0xa98>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d031      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a49      	ldr	r2, [pc, #292]	; (8006c48 <HAL_DMA_IRQHandler+0xa9c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02c      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a48      	ldr	r2, [pc, #288]	; (8006c4c <HAL_DMA_IRQHandler+0xaa0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d027      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a46      	ldr	r2, [pc, #280]	; (8006c50 <HAL_DMA_IRQHandler+0xaa4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a45      	ldr	r2, [pc, #276]	; (8006c54 <HAL_DMA_IRQHandler+0xaa8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a43      	ldr	r2, [pc, #268]	; (8006c58 <HAL_DMA_IRQHandler+0xaac>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a42      	ldr	r2, [pc, #264]	; (8006c5c <HAL_DMA_IRQHandler+0xab0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a40      	ldr	r2, [pc, #256]	; (8006c60 <HAL_DMA_IRQHandler+0xab4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3f      	ldr	r2, [pc, #252]	; (8006c64 <HAL_DMA_IRQHandler+0xab8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a3d      	ldr	r2, [pc, #244]	; (8006c68 <HAL_DMA_IRQHandler+0xabc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x9d4>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a3c      	ldr	r2, [pc, #240]	; (8006c6c <HAL_DMA_IRQHandler+0xac0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x9d8>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_DMA_IRQHandler+0x9da>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 824f 	beq.w	800702a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80dd 	beq.w	8006d64 <HAL_DMA_IRQHandler+0xbb8>
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80d7 	beq.w	8006d64 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	409a      	lsls	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d059      	beq.n	8006c84 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d14a      	bne.n	8006c70 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8220 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bec:	e21a      	b.n	8007024 <HAL_DMA_IRQHandler+0xe78>
 8006bee:	bf00      	nop
 8006bf0:	40020010 	.word	0x40020010
 8006bf4:	40020028 	.word	0x40020028
 8006bf8:	40020040 	.word	0x40020040
 8006bfc:	40020058 	.word	0x40020058
 8006c00:	40020070 	.word	0x40020070
 8006c04:	40020088 	.word	0x40020088
 8006c08:	400200a0 	.word	0x400200a0
 8006c0c:	400200b8 	.word	0x400200b8
 8006c10:	40020410 	.word	0x40020410
 8006c14:	40020428 	.word	0x40020428
 8006c18:	40020440 	.word	0x40020440
 8006c1c:	40020458 	.word	0x40020458
 8006c20:	40020470 	.word	0x40020470
 8006c24:	40020488 	.word	0x40020488
 8006c28:	400204a0 	.word	0x400204a0
 8006c2c:	400204b8 	.word	0x400204b8
 8006c30:	48022c08 	.word	0x48022c08
 8006c34:	48022c1c 	.word	0x48022c1c
 8006c38:	48022c30 	.word	0x48022c30
 8006c3c:	48022c44 	.word	0x48022c44
 8006c40:	48022c58 	.word	0x48022c58
 8006c44:	48022c6c 	.word	0x48022c6c
 8006c48:	48022c80 	.word	0x48022c80
 8006c4c:	48022c94 	.word	0x48022c94
 8006c50:	58025408 	.word	0x58025408
 8006c54:	5802541c 	.word	0x5802541c
 8006c58:	58025430 	.word	0x58025430
 8006c5c:	58025444 	.word	0x58025444
 8006c60:	58025458 	.word	0x58025458
 8006c64:	5802546c 	.word	0x5802546c
 8006c68:	58025480 	.word	0x58025480
 8006c6c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 81d5 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c82:	e1cf      	b.n	8007024 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d160      	bne.n	8006d50 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7f      	ldr	r2, [pc, #508]	; (8006e90 <HAL_DMA_IRQHandler+0xce4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a7d      	ldr	r2, [pc, #500]	; (8006e94 <HAL_DMA_IRQHandler+0xce8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a7c      	ldr	r2, [pc, #496]	; (8006e98 <HAL_DMA_IRQHandler+0xcec>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a7a      	ldr	r2, [pc, #488]	; (8006e9c <HAL_DMA_IRQHandler+0xcf0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a79      	ldr	r2, [pc, #484]	; (8006ea0 <HAL_DMA_IRQHandler+0xcf4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a77      	ldr	r2, [pc, #476]	; (8006ea4 <HAL_DMA_IRQHandler+0xcf8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a76      	ldr	r2, [pc, #472]	; (8006ea8 <HAL_DMA_IRQHandler+0xcfc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a74      	ldr	r2, [pc, #464]	; (8006eac <HAL_DMA_IRQHandler+0xd00>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a73      	ldr	r2, [pc, #460]	; (8006eb0 <HAL_DMA_IRQHandler+0xd04>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a71      	ldr	r2, [pc, #452]	; (8006eb4 <HAL_DMA_IRQHandler+0xd08>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a70      	ldr	r2, [pc, #448]	; (8006eb8 <HAL_DMA_IRQHandler+0xd0c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a6e      	ldr	r2, [pc, #440]	; (8006ebc <HAL_DMA_IRQHandler+0xd10>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6d      	ldr	r2, [pc, #436]	; (8006ec0 <HAL_DMA_IRQHandler+0xd14>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6b      	ldr	r2, [pc, #428]	; (8006ec4 <HAL_DMA_IRQHandler+0xd18>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6a      	ldr	r2, [pc, #424]	; (8006ec8 <HAL_DMA_IRQHandler+0xd1c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb82>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a68      	ldr	r2, [pc, #416]	; (8006ecc <HAL_DMA_IRQHandler+0xd20>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d108      	bne.n	8006d40 <HAL_DMA_IRQHandler+0xb94>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0208 	bic.w	r2, r2, #8
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e007      	b.n	8006d50 <HAL_DMA_IRQHandler+0xba4>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8165 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d62:	e15f      	b.n	8007024 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	4013      	ands	r3, r2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80c5 	beq.w	8006f04 <HAL_DMA_IRQHandler+0xd58>
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80bf 	beq.w	8006f04 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	2202      	movs	r2, #2
 8006d90:	409a      	lsls	r2, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d018      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 813a 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dbc:	e134      	b.n	8007028 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 8130 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd0:	e12a      	b.n	8007028 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 8089 	bne.w	8006ef0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2b      	ldr	r2, [pc, #172]	; (8006e90 <HAL_DMA_IRQHandler+0xce4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d04a      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a29      	ldr	r2, [pc, #164]	; (8006e94 <HAL_DMA_IRQHandler+0xce8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d045      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a28      	ldr	r2, [pc, #160]	; (8006e98 <HAL_DMA_IRQHandler+0xcec>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d040      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a26      	ldr	r2, [pc, #152]	; (8006e9c <HAL_DMA_IRQHandler+0xcf0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d03b      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a25      	ldr	r2, [pc, #148]	; (8006ea0 <HAL_DMA_IRQHandler+0xcf4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d036      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <HAL_DMA_IRQHandler+0xcf8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d031      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a22      	ldr	r2, [pc, #136]	; (8006ea8 <HAL_DMA_IRQHandler+0xcfc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d02c      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a20      	ldr	r2, [pc, #128]	; (8006eac <HAL_DMA_IRQHandler+0xd00>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d027      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <HAL_DMA_IRQHandler+0xd04>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d022      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <HAL_DMA_IRQHandler+0xd08>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01d      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <HAL_DMA_IRQHandler+0xd0c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d018      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <HAL_DMA_IRQHandler+0xd10>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a19      	ldr	r2, [pc, #100]	; (8006ec0 <HAL_DMA_IRQHandler+0xd14>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_DMA_IRQHandler+0xd18>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d009      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <HAL_DMA_IRQHandler+0xd1c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xcd2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <HAL_DMA_IRQHandler+0xd20>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d128      	bne.n	8006ed0 <HAL_DMA_IRQHandler+0xd24>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0214 	bic.w	r2, r2, #20
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e027      	b.n	8006ee0 <HAL_DMA_IRQHandler+0xd34>
 8006e90:	40020010 	.word	0x40020010
 8006e94:	40020028 	.word	0x40020028
 8006e98:	40020040 	.word	0x40020040
 8006e9c:	40020058 	.word	0x40020058
 8006ea0:	40020070 	.word	0x40020070
 8006ea4:	40020088 	.word	0x40020088
 8006ea8:	400200a0 	.word	0x400200a0
 8006eac:	400200b8 	.word	0x400200b8
 8006eb0:	40020410 	.word	0x40020410
 8006eb4:	40020428 	.word	0x40020428
 8006eb8:	40020440 	.word	0x40020440
 8006ebc:	40020458 	.word	0x40020458
 8006ec0:	40020470 	.word	0x40020470
 8006ec4:	40020488 	.word	0x40020488
 8006ec8:	400204a0 	.word	0x400204a0
 8006ecc:	400204b8 	.word	0x400204b8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 020a 	bic.w	r2, r2, #10
 8006ede:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8097 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f02:	e091      	b.n	8007028 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8088 	beq.w	800702a <HAL_DMA_IRQHandler+0xe7e>
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8082 	beq.w	800702a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a41      	ldr	r2, [pc, #260]	; (8007030 <HAL_DMA_IRQHandler+0xe84>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d04a      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a3f      	ldr	r2, [pc, #252]	; (8007034 <HAL_DMA_IRQHandler+0xe88>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d045      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a3e      	ldr	r2, [pc, #248]	; (8007038 <HAL_DMA_IRQHandler+0xe8c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d040      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a3c      	ldr	r2, [pc, #240]	; (800703c <HAL_DMA_IRQHandler+0xe90>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d03b      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a3b      	ldr	r2, [pc, #236]	; (8007040 <HAL_DMA_IRQHandler+0xe94>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d036      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a39      	ldr	r2, [pc, #228]	; (8007044 <HAL_DMA_IRQHandler+0xe98>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d031      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a38      	ldr	r2, [pc, #224]	; (8007048 <HAL_DMA_IRQHandler+0xe9c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d02c      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a36      	ldr	r2, [pc, #216]	; (800704c <HAL_DMA_IRQHandler+0xea0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d027      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a35      	ldr	r2, [pc, #212]	; (8007050 <HAL_DMA_IRQHandler+0xea4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a33      	ldr	r2, [pc, #204]	; (8007054 <HAL_DMA_IRQHandler+0xea8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a32      	ldr	r2, [pc, #200]	; (8007058 <HAL_DMA_IRQHandler+0xeac>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a30      	ldr	r2, [pc, #192]	; (800705c <HAL_DMA_IRQHandler+0xeb0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <HAL_DMA_IRQHandler+0xeb4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <HAL_DMA_IRQHandler+0xeb8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2c      	ldr	r2, [pc, #176]	; (8007068 <HAL_DMA_IRQHandler+0xebc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xe1a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <HAL_DMA_IRQHandler+0xec0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d108      	bne.n	8006fd8 <HAL_DMA_IRQHandler+0xe2c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 021c 	bic.w	r2, r2, #28
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e007      	b.n	8006fe8 <HAL_DMA_IRQHandler+0xe3c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 020e 	bic.w	r2, r2, #14
 8006fe6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	409a      	lsls	r2, r3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
 800701e:	e004      	b.n	800702a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007020:	bf00      	nop
 8007022:	e002      	b.n	800702a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007024:	bf00      	nop
 8007026:	e000      	b.n	800702a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007028:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40020010 	.word	0x40020010
 8007034:	40020028 	.word	0x40020028
 8007038:	40020040 	.word	0x40020040
 800703c:	40020058 	.word	0x40020058
 8007040:	40020070 	.word	0x40020070
 8007044:	40020088 	.word	0x40020088
 8007048:	400200a0 	.word	0x400200a0
 800704c:	400200b8 	.word	0x400200b8
 8007050:	40020410 	.word	0x40020410
 8007054:	40020428 	.word	0x40020428
 8007058:	40020440 	.word	0x40020440
 800705c:	40020458 	.word	0x40020458
 8007060:	40020470 	.word	0x40020470
 8007064:	40020488 	.word	0x40020488
 8007068:	400204a0 	.word	0x400204a0
 800706c:	400204b8 	.word	0x400204b8

08007070 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a7f      	ldr	r2, [pc, #508]	; (800728c <DMA_SetConfig+0x21c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d072      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a7d      	ldr	r2, [pc, #500]	; (8007290 <DMA_SetConfig+0x220>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d06d      	beq.n	800717a <DMA_SetConfig+0x10a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a7c      	ldr	r2, [pc, #496]	; (8007294 <DMA_SetConfig+0x224>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d068      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a7a      	ldr	r2, [pc, #488]	; (8007298 <DMA_SetConfig+0x228>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d063      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a79      	ldr	r2, [pc, #484]	; (800729c <DMA_SetConfig+0x22c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d05e      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a77      	ldr	r2, [pc, #476]	; (80072a0 <DMA_SetConfig+0x230>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d059      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a76      	ldr	r2, [pc, #472]	; (80072a4 <DMA_SetConfig+0x234>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d054      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a74      	ldr	r2, [pc, #464]	; (80072a8 <DMA_SetConfig+0x238>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d04f      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a73      	ldr	r2, [pc, #460]	; (80072ac <DMA_SetConfig+0x23c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d04a      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a71      	ldr	r2, [pc, #452]	; (80072b0 <DMA_SetConfig+0x240>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d045      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a70      	ldr	r2, [pc, #448]	; (80072b4 <DMA_SetConfig+0x244>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d040      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a6e      	ldr	r2, [pc, #440]	; (80072b8 <DMA_SetConfig+0x248>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d03b      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a6d      	ldr	r2, [pc, #436]	; (80072bc <DMA_SetConfig+0x24c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d036      	beq.n	800717a <DMA_SetConfig+0x10a>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a6b      	ldr	r2, [pc, #428]	; (80072c0 <DMA_SetConfig+0x250>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d031      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a6a      	ldr	r2, [pc, #424]	; (80072c4 <DMA_SetConfig+0x254>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d02c      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a68      	ldr	r2, [pc, #416]	; (80072c8 <DMA_SetConfig+0x258>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d027      	beq.n	800717a <DMA_SetConfig+0x10a>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a67      	ldr	r2, [pc, #412]	; (80072cc <DMA_SetConfig+0x25c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d022      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a65      	ldr	r2, [pc, #404]	; (80072d0 <DMA_SetConfig+0x260>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01d      	beq.n	800717a <DMA_SetConfig+0x10a>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a64      	ldr	r2, [pc, #400]	; (80072d4 <DMA_SetConfig+0x264>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d018      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a62      	ldr	r2, [pc, #392]	; (80072d8 <DMA_SetConfig+0x268>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a61      	ldr	r2, [pc, #388]	; (80072dc <DMA_SetConfig+0x26c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <DMA_SetConfig+0x10a>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5f      	ldr	r2, [pc, #380]	; (80072e0 <DMA_SetConfig+0x270>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a5e      	ldr	r2, [pc, #376]	; (80072e4 <DMA_SetConfig+0x274>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5c      	ldr	r2, [pc, #368]	; (80072e8 <DMA_SetConfig+0x278>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d101      	bne.n	800717e <DMA_SetConfig+0x10e>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <DMA_SetConfig+0x110>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00d      	beq.n	80071a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800718c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800719e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a39      	ldr	r2, [pc, #228]	; (800728c <DMA_SetConfig+0x21c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d04a      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a38      	ldr	r2, [pc, #224]	; (8007290 <DMA_SetConfig+0x220>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d045      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a36      	ldr	r2, [pc, #216]	; (8007294 <DMA_SetConfig+0x224>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d040      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a35      	ldr	r2, [pc, #212]	; (8007298 <DMA_SetConfig+0x228>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d03b      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a33      	ldr	r2, [pc, #204]	; (800729c <DMA_SetConfig+0x22c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d036      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a32      	ldr	r2, [pc, #200]	; (80072a0 <DMA_SetConfig+0x230>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d031      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a30      	ldr	r2, [pc, #192]	; (80072a4 <DMA_SetConfig+0x234>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d02c      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <DMA_SetConfig+0x238>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d027      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2d      	ldr	r2, [pc, #180]	; (80072ac <DMA_SetConfig+0x23c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d022      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <DMA_SetConfig+0x240>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d01d      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <DMA_SetConfig+0x244>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d018      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <DMA_SetConfig+0x248>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a27      	ldr	r2, [pc, #156]	; (80072bc <DMA_SetConfig+0x24c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00e      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a26      	ldr	r2, [pc, #152]	; (80072c0 <DMA_SetConfig+0x250>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <DMA_SetConfig+0x254>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a23      	ldr	r2, [pc, #140]	; (80072c8 <DMA_SetConfig+0x258>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d101      	bne.n	8007244 <DMA_SetConfig+0x1d4>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <DMA_SetConfig+0x1d6>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d059      	beq.n	80072fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	223f      	movs	r2, #63	; 0x3f
 8007254:	409a      	lsls	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007268:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d138      	bne.n	80072ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800728a:	e0ae      	b.n	80073ea <DMA_SetConfig+0x37a>
 800728c:	40020010 	.word	0x40020010
 8007290:	40020028 	.word	0x40020028
 8007294:	40020040 	.word	0x40020040
 8007298:	40020058 	.word	0x40020058
 800729c:	40020070 	.word	0x40020070
 80072a0:	40020088 	.word	0x40020088
 80072a4:	400200a0 	.word	0x400200a0
 80072a8:	400200b8 	.word	0x400200b8
 80072ac:	40020410 	.word	0x40020410
 80072b0:	40020428 	.word	0x40020428
 80072b4:	40020440 	.word	0x40020440
 80072b8:	40020458 	.word	0x40020458
 80072bc:	40020470 	.word	0x40020470
 80072c0:	40020488 	.word	0x40020488
 80072c4:	400204a0 	.word	0x400204a0
 80072c8:	400204b8 	.word	0x400204b8
 80072cc:	58025408 	.word	0x58025408
 80072d0:	5802541c 	.word	0x5802541c
 80072d4:	58025430 	.word	0x58025430
 80072d8:	58025444 	.word	0x58025444
 80072dc:	58025458 	.word	0x58025458
 80072e0:	5802546c 	.word	0x5802546c
 80072e4:	58025480 	.word	0x58025480
 80072e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	60da      	str	r2, [r3, #12]
}
 80072fc:	e075      	b.n	80073ea <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a3d      	ldr	r2, [pc, #244]	; (80073f8 <DMA_SetConfig+0x388>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d04a      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a3b      	ldr	r2, [pc, #236]	; (80073fc <DMA_SetConfig+0x38c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d045      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a3a      	ldr	r2, [pc, #232]	; (8007400 <DMA_SetConfig+0x390>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d040      	beq.n	800739e <DMA_SetConfig+0x32e>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a38      	ldr	r2, [pc, #224]	; (8007404 <DMA_SetConfig+0x394>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d03b      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a37      	ldr	r2, [pc, #220]	; (8007408 <DMA_SetConfig+0x398>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d036      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a35      	ldr	r2, [pc, #212]	; (800740c <DMA_SetConfig+0x39c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d031      	beq.n	800739e <DMA_SetConfig+0x32e>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a34      	ldr	r2, [pc, #208]	; (8007410 <DMA_SetConfig+0x3a0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d02c      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a32      	ldr	r2, [pc, #200]	; (8007414 <DMA_SetConfig+0x3a4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d027      	beq.n	800739e <DMA_SetConfig+0x32e>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a31      	ldr	r2, [pc, #196]	; (8007418 <DMA_SetConfig+0x3a8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d022      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a2f      	ldr	r2, [pc, #188]	; (800741c <DMA_SetConfig+0x3ac>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d01d      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a2e      	ldr	r2, [pc, #184]	; (8007420 <DMA_SetConfig+0x3b0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d018      	beq.n	800739e <DMA_SetConfig+0x32e>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <DMA_SetConfig+0x3b4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2b      	ldr	r2, [pc, #172]	; (8007428 <DMA_SetConfig+0x3b8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00e      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a29      	ldr	r2, [pc, #164]	; (800742c <DMA_SetConfig+0x3bc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d009      	beq.n	800739e <DMA_SetConfig+0x32e>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a28      	ldr	r2, [pc, #160]	; (8007430 <DMA_SetConfig+0x3c0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d004      	beq.n	800739e <DMA_SetConfig+0x32e>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a26      	ldr	r2, [pc, #152]	; (8007434 <DMA_SetConfig+0x3c4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d101      	bne.n	80073a2 <DMA_SetConfig+0x332>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <DMA_SetConfig+0x334>
 80073a2:	2300      	movs	r3, #0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d020      	beq.n	80073ea <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2201      	movs	r2, #1
 80073b2:	409a      	lsls	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d108      	bne.n	80073da <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	60da      	str	r2, [r3, #12]
}
 80073d8:	e007      	b.n	80073ea <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	60da      	str	r2, [r3, #12]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	48022c08 	.word	0x48022c08
 80073fc:	48022c1c 	.word	0x48022c1c
 8007400:	48022c30 	.word	0x48022c30
 8007404:	48022c44 	.word	0x48022c44
 8007408:	48022c58 	.word	0x48022c58
 800740c:	48022c6c 	.word	0x48022c6c
 8007410:	48022c80 	.word	0x48022c80
 8007414:	48022c94 	.word	0x48022c94
 8007418:	58025408 	.word	0x58025408
 800741c:	5802541c 	.word	0x5802541c
 8007420:	58025430 	.word	0x58025430
 8007424:	58025444 	.word	0x58025444
 8007428:	58025458 	.word	0x58025458
 800742c:	5802546c 	.word	0x5802546c
 8007430:	58025480 	.word	0x58025480
 8007434:	58025494 	.word	0x58025494

08007438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a42      	ldr	r2, [pc, #264]	; (8007550 <DMA_CalcBaseAndBitshift+0x118>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d04a      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a41      	ldr	r2, [pc, #260]	; (8007554 <DMA_CalcBaseAndBitshift+0x11c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d045      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a3f      	ldr	r2, [pc, #252]	; (8007558 <DMA_CalcBaseAndBitshift+0x120>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d040      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a3e      	ldr	r2, [pc, #248]	; (800755c <DMA_CalcBaseAndBitshift+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d03b      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a3c      	ldr	r2, [pc, #240]	; (8007560 <DMA_CalcBaseAndBitshift+0x128>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d036      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a3b      	ldr	r2, [pc, #236]	; (8007564 <DMA_CalcBaseAndBitshift+0x12c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d031      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a39      	ldr	r2, [pc, #228]	; (8007568 <DMA_CalcBaseAndBitshift+0x130>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d02c      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a38      	ldr	r2, [pc, #224]	; (800756c <DMA_CalcBaseAndBitshift+0x134>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d027      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a36      	ldr	r2, [pc, #216]	; (8007570 <DMA_CalcBaseAndBitshift+0x138>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d022      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a35      	ldr	r2, [pc, #212]	; (8007574 <DMA_CalcBaseAndBitshift+0x13c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d01d      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a33      	ldr	r2, [pc, #204]	; (8007578 <DMA_CalcBaseAndBitshift+0x140>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d018      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a32      	ldr	r2, [pc, #200]	; (800757c <DMA_CalcBaseAndBitshift+0x144>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d013      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a30      	ldr	r2, [pc, #192]	; (8007580 <DMA_CalcBaseAndBitshift+0x148>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00e      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a2f      	ldr	r2, [pc, #188]	; (8007584 <DMA_CalcBaseAndBitshift+0x14c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d009      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a2d      	ldr	r2, [pc, #180]	; (8007588 <DMA_CalcBaseAndBitshift+0x150>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d004      	beq.n	80074e0 <DMA_CalcBaseAndBitshift+0xa8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a2c      	ldr	r2, [pc, #176]	; (800758c <DMA_CalcBaseAndBitshift+0x154>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d101      	bne.n	80074e4 <DMA_CalcBaseAndBitshift+0xac>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <DMA_CalcBaseAndBitshift+0xae>
 80074e4:	2300      	movs	r3, #0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d024      	beq.n	8007534 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	3b10      	subs	r3, #16
 80074f2:	4a27      	ldr	r2, [pc, #156]	; (8007590 <DMA_CalcBaseAndBitshift+0x158>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	4a24      	ldr	r2, [pc, #144]	; (8007594 <DMA_CalcBaseAndBitshift+0x15c>)
 8007504:	5cd3      	ldrb	r3, [r2, r3]
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b03      	cmp	r3, #3
 8007510:	d908      	bls.n	8007524 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	4b1f      	ldr	r3, [pc, #124]	; (8007598 <DMA_CalcBaseAndBitshift+0x160>)
 800751a:	4013      	ands	r3, r2
 800751c:	1d1a      	adds	r2, r3, #4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	659a      	str	r2, [r3, #88]	; 0x58
 8007522:	e00d      	b.n	8007540 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <DMA_CalcBaseAndBitshift+0x160>)
 800752c:	4013      	ands	r3, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6593      	str	r3, [r2, #88]	; 0x58
 8007532:	e005      	b.n	8007540 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	40020010 	.word	0x40020010
 8007554:	40020028 	.word	0x40020028
 8007558:	40020040 	.word	0x40020040
 800755c:	40020058 	.word	0x40020058
 8007560:	40020070 	.word	0x40020070
 8007564:	40020088 	.word	0x40020088
 8007568:	400200a0 	.word	0x400200a0
 800756c:	400200b8 	.word	0x400200b8
 8007570:	40020410 	.word	0x40020410
 8007574:	40020428 	.word	0x40020428
 8007578:	40020440 	.word	0x40020440
 800757c:	40020458 	.word	0x40020458
 8007580:	40020470 	.word	0x40020470
 8007584:	40020488 	.word	0x40020488
 8007588:	400204a0 	.word	0x400204a0
 800758c:	400204b8 	.word	0x400204b8
 8007590:	aaaaaaab 	.word	0xaaaaaaab
 8007594:	08010358 	.word	0x08010358
 8007598:	fffffc00 	.word	0xfffffc00

0800759c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d120      	bne.n	80075f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d858      	bhi.n	800766a <DMA_CheckFifoParam+0xce>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <DMA_CheckFifoParam+0x24>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075e3 	.word	0x080075e3
 80075c8:	080075d1 	.word	0x080075d1
 80075cc:	0800766b 	.word	0x0800766b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d048      	beq.n	800766e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075e0:	e045      	b.n	800766e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075ea:	d142      	bne.n	8007672 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075f0:	e03f      	b.n	8007672 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075fa:	d123      	bne.n	8007644 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	2b03      	cmp	r3, #3
 8007602:	d838      	bhi.n	8007676 <DMA_CheckFifoParam+0xda>
 8007604:	a201      	add	r2, pc, #4	; (adr r2, 800760c <DMA_CheckFifoParam+0x70>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	0800761d 	.word	0x0800761d
 8007610:	08007623 	.word	0x08007623
 8007614:	0800761d 	.word	0x0800761d
 8007618:	08007635 	.word	0x08007635
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
        break;
 8007620:	e030      	b.n	8007684 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d025      	beq.n	800767a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007632:	e022      	b.n	800767a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800763c:	d11f      	bne.n	800767e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007642:	e01c      	b.n	800767e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	2b02      	cmp	r3, #2
 800764a:	d902      	bls.n	8007652 <DMA_CheckFifoParam+0xb6>
 800764c:	2b03      	cmp	r3, #3
 800764e:	d003      	beq.n	8007658 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007650:	e018      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
        break;
 8007656:	e015      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00e      	beq.n	8007682 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
    break;
 8007668:	e00b      	b.n	8007682 <DMA_CheckFifoParam+0xe6>
        break;
 800766a:	bf00      	nop
 800766c:	e00a      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
        break;
 800766e:	bf00      	nop
 8007670:	e008      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
        break;
 8007672:	bf00      	nop
 8007674:	e006      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
        break;
 8007676:	bf00      	nop
 8007678:	e004      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
        break;
 800767a:	bf00      	nop
 800767c:	e002      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
        break;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <DMA_CheckFifoParam+0xe8>
    break;
 8007682:	bf00      	nop
    }
  }

  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop

08007694 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a38      	ldr	r2, [pc, #224]	; (8007788 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d022      	beq.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a36      	ldr	r2, [pc, #216]	; (800778c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d01d      	beq.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a35      	ldr	r2, [pc, #212]	; (8007790 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d018      	beq.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a33      	ldr	r2, [pc, #204]	; (8007794 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d013      	beq.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a32      	ldr	r2, [pc, #200]	; (8007798 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00e      	beq.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a30      	ldr	r2, [pc, #192]	; (800779c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d009      	beq.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2f      	ldr	r2, [pc, #188]	; (80077a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d004      	beq.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a2d      	ldr	r2, [pc, #180]	; (80077a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d101      	bne.n	80076f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076f6:	2300      	movs	r3, #0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01a      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	3b08      	subs	r3, #8
 8007704:	4a28      	ldr	r2, [pc, #160]	; (80077a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007706:	fba2 2303 	umull	r2, r3, r2, r3
 800770a:	091b      	lsrs	r3, r3, #4
 800770c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4b26      	ldr	r3, [pc, #152]	; (80077ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a24      	ldr	r2, [pc, #144]	; (80077b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007720:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	2201      	movs	r2, #1
 800772a:	409a      	lsls	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007730:	e024      	b.n	800777c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	3b10      	subs	r3, #16
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	091b      	lsrs	r3, r3, #4
 8007742:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4a1c      	ldr	r2, [pc, #112]	; (80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d806      	bhi.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d902      	bls.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3308      	adds	r3, #8
 8007758:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a16      	ldr	r2, [pc, #88]	; (80077c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800776c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	2201      	movs	r2, #1
 8007776:	409a      	lsls	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800777c:	bf00      	nop
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	58025408 	.word	0x58025408
 800778c:	5802541c 	.word	0x5802541c
 8007790:	58025430 	.word	0x58025430
 8007794:	58025444 	.word	0x58025444
 8007798:	58025458 	.word	0x58025458
 800779c:	5802546c 	.word	0x5802546c
 80077a0:	58025480 	.word	0x58025480
 80077a4:	58025494 	.word	0x58025494
 80077a8:	cccccccd 	.word	0xcccccccd
 80077ac:	16009600 	.word	0x16009600
 80077b0:	58025880 	.word	0x58025880
 80077b4:	aaaaaaab 	.word	0xaaaaaaab
 80077b8:	400204b8 	.word	0x400204b8
 80077bc:	4002040f 	.word	0x4002040f
 80077c0:	10008200 	.word	0x10008200
 80077c4:	40020880 	.word	0x40020880

080077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d04a      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d847      	bhi.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a25      	ldr	r2, [pc, #148]	; (8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d022      	beq.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a24      	ldr	r2, [pc, #144]	; (8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d01d      	beq.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a22      	ldr	r2, [pc, #136]	; (8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d018      	beq.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a21      	ldr	r2, [pc, #132]	; (800788c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d013      	beq.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00e      	beq.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a1e      	ldr	r2, [pc, #120]	; (8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d009      	beq.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1c      	ldr	r2, [pc, #112]	; (8007898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1b      	ldr	r2, [pc, #108]	; (800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d101      	bne.n	8007838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a15      	ldr	r2, [pc, #84]	; (80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007850:	671a      	str	r2, [r3, #112]	; 0x70
 8007852:	e009      	b.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	461a      	mov	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a11      	ldr	r2, [pc, #68]	; (80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007866:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3b01      	subs	r3, #1
 800786c:	2201      	movs	r2, #1
 800786e:	409a      	lsls	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007874:	bf00      	nop
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	58025408 	.word	0x58025408
 8007884:	5802541c 	.word	0x5802541c
 8007888:	58025430 	.word	0x58025430
 800788c:	58025444 	.word	0x58025444
 8007890:	58025458 	.word	0x58025458
 8007894:	5802546c 	.word	0x5802546c
 8007898:	58025480 	.word	0x58025480
 800789c:	58025494 	.word	0x58025494
 80078a0:	1600963f 	.word	0x1600963f
 80078a4:	58025940 	.word	0x58025940
 80078a8:	1000823f 	.word	0x1000823f
 80078ac:	40020940 	.word	0x40020940

080078b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e04f      	b.n	8007962 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7f9 f828 	bl	800092c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b20      	ldr	r3, [pc, #128]	; (800796c <HAL_DMA2D_Init+0xbc>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6851      	ldr	r1, [r2, #4]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	69d2      	ldr	r2, [r2, #28]
 80078f6:	4311      	orrs	r1, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <HAL_DMA2D_Init+0xc0>)
 8007908:	4013      	ands	r3, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6891      	ldr	r1, [r2, #8]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6992      	ldr	r2, [r2, #24]
 8007912:	4311      	orrs	r1, r2
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	430b      	orrs	r3, r1
 800791a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <HAL_DMA2D_Init+0xc4>)
 8007924:	4013      	ands	r3, r2
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	68d1      	ldr	r1, [r2, #12]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6812      	ldr	r2, [r2, #0]
 800792e:	430b      	orrs	r3, r1
 8007930:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007938:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	051a      	lsls	r2, r3, #20
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	055b      	lsls	r3, r3, #21
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	fff8ffbf 	.word	0xfff8ffbf
 8007970:	fffffef8 	.word	0xfffffef8
 8007974:	ffff0000 	.word	0xffff0000

08007978 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af02      	add	r7, sp, #8
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_DMA2D_Start+0x1c>
 8007990:	2302      	movs	r3, #2
 8007992:	e018      	b.n	80079c6 <HAL_DMA2D_Start+0x4e>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	68b9      	ldr	r1, [r7, #8]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 fab4 	bl	8007f1c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b086      	sub	sp, #24
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d056      	beq.n	8007a98 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80079ea:	f7fc fc73 	bl	80042d4 <HAL_GetTick>
 80079ee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80079f0:	e04b      	b.n	8007a8a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d023      	beq.n	8007a4c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a12:	f043 0202 	orr.w	r2, r3, #2
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a28:	f043 0201 	orr.w	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2221      	movs	r2, #33	; 0x21
 8007a36:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0a5      	b.n	8007b98 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a52:	d01a      	beq.n	8007a8a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a54:	f7fc fc3e 	bl	80042d4 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <HAL_DMA2D_PollForTransfer+0x9c>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10f      	bne.n	8007a8a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6e:	f043 0220 	orr.w	r2, r3, #32
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e086      	b.n	8007b98 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0ac      	beq.n	80079f2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d061      	beq.n	8007b7e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007aba:	f7fc fc0b 	bl	80042d4 <HAL_GetTick>
 8007abe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007ac0:	e056      	b.n	8007b70 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d02e      	beq.n	8007b32 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae2:	f043 0204 	orr.w	r2, r3, #4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af8:	f043 0202 	orr.w	r2, r3, #2
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b0e:	f043 0201 	orr.w	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2229      	movs	r2, #41	; 0x29
 8007b1c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2204      	movs	r2, #4
 8007b22:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e032      	b.n	8007b98 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b38:	d01a      	beq.n	8007b70 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b3a:	f7fc fbcb 	bl	80042d4 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d302      	bcc.n	8007b50 <HAL_DMA2D_PollForTransfer+0x182>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10f      	bne.n	8007b70 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b54:	f043 0220 	orr.w	r2, r3, #32
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2203      	movs	r2, #3
 8007b60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e013      	b.n	8007b98 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0a1      	beq.n	8007ac2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2212      	movs	r2, #18
 8007b84:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d026      	beq.n	8007c10 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d021      	beq.n	8007c10 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bda:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be0:	f043 0201 	orr.w	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2201      	movs	r2, #1
 8007bee:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d026      	beq.n	8007c68 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d021      	beq.n	8007c68 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c32:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c40:	f043 0202 	orr.w	r2, r3, #2
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d026      	beq.n	8007cc0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d021      	beq.n	8007cc0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c8a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2208      	movs	r2, #8
 8007c92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c98:	f043 0204 	orr.w	r2, r3, #4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d013      	beq.n	8007cf2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ce2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f853 	bl	8007d98 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d024      	beq.n	8007d46 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01f      	beq.n	8007d46 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d14:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01f      	beq.n	8007d90 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01a      	beq.n	8007d90 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2210      	movs	r2, #16
 8007d70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f80e 	bl	8007dac <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_DMA2D_ConfigLayer+0x24>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e092      	b.n	8007f0a <HAL_DMA2D_ConfigLayer+0x14a>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	4613      	mov	r3, r2
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	1a9b      	subs	r3, r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	3328      	adds	r3, #40	; 0x28
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	4413      	add	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	041b      	lsls	r3, r3, #16
 8007e10:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007e18:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007e24:	4b3c      	ldr	r3, [pc, #240]	; (8007f18 <HAL_DMA2D_ConfigLayer+0x158>)
 8007e26:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2b0a      	cmp	r3, #10
 8007e2e:	d003      	beq.n	8007e38 <HAL_DMA2D_ConfigLayer+0x78>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b09      	cmp	r3, #9
 8007e36:	d107      	bne.n	8007e48 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
 8007e46:	e005      	b.n	8007e54 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	061b      	lsls	r3, r3, #24
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d120      	bne.n	8007e9c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	43db      	mvns	r3, r3
 8007e64:	ea02 0103 	and.w	r1, r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b0a      	cmp	r3, #10
 8007e82:	d003      	beq.n	8007e8c <HAL_DMA2D_ConfigLayer+0xcc>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b09      	cmp	r3, #9
 8007e8a:	d135      	bne.n	8007ef8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007e98:	629a      	str	r2, [r3, #40]	; 0x28
 8007e9a:	e02d      	b.n	8007ef8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2b0b      	cmp	r3, #11
 8007ea2:	d109      	bne.n	8007eb8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	049b      	lsls	r3, r3, #18
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007eb6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69da      	ldr	r2, [r3, #28]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	ea02 0103 	and.w	r1, r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	6812      	ldr	r2, [r2, #0]
 8007ed8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b0a      	cmp	r3, #10
 8007ee0:	d003      	beq.n	8007eea <HAL_DMA2D_ConfigLayer+0x12a>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b09      	cmp	r3, #9
 8007ee8:	d106      	bne.n	8007ef8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ef6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	ff33000f 	.word	0xff33000f

08007f1c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b08b      	sub	sp, #44	; 0x2c
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f30:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	041a      	lsls	r2, r3, #16
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f54:	d174      	bne.n	8008040 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f5c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f64:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f6c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f8c:	e053      	b.n	8008036 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d106      	bne.n	8007fa4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	e048      	b.n	8008036 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d111      	bne.n	8007fd0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	0cdb      	lsrs	r3, r3, #19
 8007fb0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	0a9b      	lsrs	r3, r3, #10
 8007fb6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	08db      	lsrs	r3, r3, #3
 8007fbc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	02db      	lsls	r3, r3, #11
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fce:	e032      	b.n	8008036 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d117      	bne.n	8008008 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	0fdb      	lsrs	r3, r3, #31
 8007fdc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	0cdb      	lsrs	r3, r3, #19
 8007fe2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	0adb      	lsrs	r3, r3, #11
 8007fe8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	08db      	lsrs	r3, r3, #3
 8007fee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	029b      	lsls	r3, r3, #10
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	03db      	lsls	r3, r3, #15
 8007ffe:	4313      	orrs	r3, r2
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
 8008006:	e016      	b.n	8008036 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	0f1b      	lsrs	r3, r3, #28
 800800c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	0d1b      	lsrs	r3, r3, #20
 8008012:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	0b1b      	lsrs	r3, r3, #12
 8008018:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	091b      	lsrs	r3, r3, #4
 800801e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	011a      	lsls	r2, r3, #4
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	431a      	orrs	r2, r3
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	031b      	lsls	r3, r3, #12
 800802e:	4313      	orrs	r3, r2
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800803e:	e00d      	b.n	800805c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008048:	d104      	bne.n	8008054 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	615a      	str	r2, [r3, #20]
}
 8008052:	e003      	b.n	800805c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	60da      	str	r2, [r3, #12]
}
 800805c:	bf00      	nop
 800805e:	372c      	adds	r7, #44	; 0x2c
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b80      	cmp	r3, #128	; 0x80
 8008080:	d105      	bne.n	800808e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e315      	b.n	80086ba <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8008098:	2302      	movs	r3, #2
 800809a:	e30e      	b.n	80086ba <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	f040 82fd 	bne.w	80086ac <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a82      	ldr	r2, [pc, #520]	; (80082d0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d04a      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a81      	ldr	r2, [pc, #516]	; (80082d4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d045      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a7f      	ldr	r2, [pc, #508]	; (80082d8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d040      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a7e      	ldr	r2, [pc, #504]	; (80082dc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d03b      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a7c      	ldr	r2, [pc, #496]	; (80082e0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d036      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a7b      	ldr	r2, [pc, #492]	; (80082e4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d031      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a79      	ldr	r2, [pc, #484]	; (80082e8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d02c      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a78      	ldr	r2, [pc, #480]	; (80082ec <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d027      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a76      	ldr	r2, [pc, #472]	; (80082f0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d022      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a75      	ldr	r2, [pc, #468]	; (80082f4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d01d      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a73      	ldr	r2, [pc, #460]	; (80082f8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d018      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a72      	ldr	r2, [pc, #456]	; (80082fc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d013      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a70      	ldr	r2, [pc, #448]	; (8008300 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00e      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a6f      	ldr	r2, [pc, #444]	; (8008304 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d009      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a6d      	ldr	r2, [pc, #436]	; (8008308 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d004      	beq.n	8008160 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a6c      	ldr	r2, [pc, #432]	; (800830c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d101      	bne.n	8008164 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008164:	2300      	movs	r3, #0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d018      	beq.n	800819c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008178:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	3308      	adds	r3, #8
 8008188:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	223f      	movs	r2, #63	; 0x3f
 8008194:	409a      	lsls	r2, r3
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e018      	b.n	80081ce <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6819      	ldr	r1, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	f248 0320 	movw	r3, #32800	; 0x8020
 80081aa:	430b      	orrs	r3, r1
 80081ac:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ba:	3304      	adds	r3, #4
 80081bc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	2201      	movs	r2, #1
 80081c8:	409a      	lsls	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fb41 	bl	800885c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a3c      	ldr	r2, [pc, #240]	; (80082d0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d072      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a3a      	ldr	r2, [pc, #232]	; (80082d4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d06d      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a39      	ldr	r2, [pc, #228]	; (80082d8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d068      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a37      	ldr	r2, [pc, #220]	; (80082dc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d063      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a36      	ldr	r2, [pc, #216]	; (80082e0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d05e      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a34      	ldr	r2, [pc, #208]	; (80082e4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d059      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a33      	ldr	r2, [pc, #204]	; (80082e8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d054      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a31      	ldr	r2, [pc, #196]	; (80082ec <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d04f      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a30      	ldr	r2, [pc, #192]	; (80082f0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d04a      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a2e      	ldr	r2, [pc, #184]	; (80082f4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d045      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a2d      	ldr	r2, [pc, #180]	; (80082f8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d040      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a2b      	ldr	r2, [pc, #172]	; (80082fc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d03b      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2a      	ldr	r2, [pc, #168]	; (8008300 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d036      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a28      	ldr	r2, [pc, #160]	; (8008304 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d031      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a27      	ldr	r2, [pc, #156]	; (8008308 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d02c      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a25      	ldr	r2, [pc, #148]	; (800830c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d027      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a24      	ldr	r2, [pc, #144]	; (8008310 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d022      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a22      	ldr	r2, [pc, #136]	; (8008314 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01d      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a21      	ldr	r2, [pc, #132]	; (8008318 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d018      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a1f      	ldr	r2, [pc, #124]	; (800831c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00e      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a1c      	ldr	r2, [pc, #112]	; (8008324 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d009      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a1b      	ldr	r2, [pc, #108]	; (8008328 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a19      	ldr	r2, [pc, #100]	; (800832c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d132      	bne.n	8008330 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e031      	b.n	8008332 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80082ce:	bf00      	nop
 80082d0:	40020010 	.word	0x40020010
 80082d4:	40020028 	.word	0x40020028
 80082d8:	40020040 	.word	0x40020040
 80082dc:	40020058 	.word	0x40020058
 80082e0:	40020070 	.word	0x40020070
 80082e4:	40020088 	.word	0x40020088
 80082e8:	400200a0 	.word	0x400200a0
 80082ec:	400200b8 	.word	0x400200b8
 80082f0:	40020410 	.word	0x40020410
 80082f4:	40020428 	.word	0x40020428
 80082f8:	40020440 	.word	0x40020440
 80082fc:	40020458 	.word	0x40020458
 8008300:	40020470 	.word	0x40020470
 8008304:	40020488 	.word	0x40020488
 8008308:	400204a0 	.word	0x400204a0
 800830c:	400204b8 	.word	0x400204b8
 8008310:	58025408 	.word	0x58025408
 8008314:	5802541c 	.word	0x5802541c
 8008318:	58025430 	.word	0x58025430
 800831c:	58025444 	.word	0x58025444
 8008320:	58025458 	.word	0x58025458
 8008324:	5802546c 	.word	0x5802546c
 8008328:	58025480 	.word	0x58025480
 800832c:	58025494 	.word	0x58025494
 8008330:	2300      	movs	r3, #0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00d      	beq.n	8008352 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800833e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008350:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a3b      	ldr	r2, [pc, #236]	; (8008444 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d04a      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a39      	ldr	r2, [pc, #228]	; (8008448 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d045      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a38      	ldr	r2, [pc, #224]	; (800844c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d040      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a36      	ldr	r2, [pc, #216]	; (8008450 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d03b      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a35      	ldr	r2, [pc, #212]	; (8008454 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d036      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a33      	ldr	r2, [pc, #204]	; (8008458 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d031      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a32      	ldr	r2, [pc, #200]	; (800845c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d02c      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a30      	ldr	r2, [pc, #192]	; (8008460 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d027      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2f      	ldr	r2, [pc, #188]	; (8008464 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d022      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2d      	ldr	r2, [pc, #180]	; (8008468 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d01d      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a2c      	ldr	r2, [pc, #176]	; (800846c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d018      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a2a      	ldr	r2, [pc, #168]	; (8008470 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a29      	ldr	r2, [pc, #164]	; (8008474 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00e      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a27      	ldr	r2, [pc, #156]	; (8008478 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d009      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a26      	ldr	r2, [pc, #152]	; (800847c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d004      	beq.n	80083f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a24      	ldr	r2, [pc, #144]	; (8008480 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d101      	bne.n	80083f6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80083f6:	2300      	movs	r3, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d043      	beq.n	8008484 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f023 021e 	bic.w	r2, r3, #30
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0216 	orr.w	r2, r2, #22
 800840e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695a      	ldr	r2, [r3, #20]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800841e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842c:	2b00      	cmp	r3, #0
 800842e:	d043      	beq.n	80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0208 	orr.w	r2, r2, #8
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e03a      	b.n	80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008442:	bf00      	nop
 8008444:	40020010 	.word	0x40020010
 8008448:	40020028 	.word	0x40020028
 800844c:	40020040 	.word	0x40020040
 8008450:	40020058 	.word	0x40020058
 8008454:	40020070 	.word	0x40020070
 8008458:	40020088 	.word	0x40020088
 800845c:	400200a0 	.word	0x400200a0
 8008460:	400200b8 	.word	0x400200b8
 8008464:	40020410 	.word	0x40020410
 8008468:	40020428 	.word	0x40020428
 800846c:	40020440 	.word	0x40020440
 8008470:	40020458 	.word	0x40020458
 8008474:	40020470 	.word	0x40020470
 8008478:	40020488 	.word	0x40020488
 800847c:	400204a0 	.word	0x400204a0
 8008480:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f023 020e 	bic.w	r2, r3, #14
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 020a 	orr.w	r2, r2, #10
 8008496:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d007      	beq.n	80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0204 	orr.w	r2, r2, #4
 80084b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a81      	ldr	r2, [pc, #516]	; (80086c4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d072      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a80      	ldr	r2, [pc, #512]	; (80086c8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d06d      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a7e      	ldr	r2, [pc, #504]	; (80086cc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d068      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a7d      	ldr	r2, [pc, #500]	; (80086d0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d063      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a7b      	ldr	r2, [pc, #492]	; (80086d4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d05e      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a7a      	ldr	r2, [pc, #488]	; (80086d8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d059      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a78      	ldr	r2, [pc, #480]	; (80086dc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d054      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a77      	ldr	r2, [pc, #476]	; (80086e0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d04f      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a75      	ldr	r2, [pc, #468]	; (80086e4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d04a      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a74      	ldr	r2, [pc, #464]	; (80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d045      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a72      	ldr	r2, [pc, #456]	; (80086ec <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d040      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a71      	ldr	r2, [pc, #452]	; (80086f0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d03b      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a6f      	ldr	r2, [pc, #444]	; (80086f4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d036      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a6e      	ldr	r2, [pc, #440]	; (80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d031      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a6c      	ldr	r2, [pc, #432]	; (80086fc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d02c      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a6b      	ldr	r2, [pc, #428]	; (8008700 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d027      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a69      	ldr	r2, [pc, #420]	; (8008704 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d022      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a68      	ldr	r2, [pc, #416]	; (8008708 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d01d      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a66      	ldr	r2, [pc, #408]	; (800870c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d018      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a65      	ldr	r2, [pc, #404]	; (8008710 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a63      	ldr	r2, [pc, #396]	; (8008714 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00e      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a62      	ldr	r2, [pc, #392]	; (8008718 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d009      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a60      	ldr	r2, [pc, #384]	; (800871c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d004      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a5f      	ldr	r2, [pc, #380]	; (8008720 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d101      	bne.n	80085ac <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01a      	beq.n	80085e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d007      	beq.n	80085e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a35      	ldr	r2, [pc, #212]	; (80086c4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d04a      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a34      	ldr	r2, [pc, #208]	; (80086c8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d045      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a32      	ldr	r2, [pc, #200]	; (80086cc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d040      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a31      	ldr	r2, [pc, #196]	; (80086d0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d03b      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a2f      	ldr	r2, [pc, #188]	; (80086d4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d036      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a2e      	ldr	r2, [pc, #184]	; (80086d8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d031      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a2c      	ldr	r2, [pc, #176]	; (80086dc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d02c      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a2b      	ldr	r2, [pc, #172]	; (80086e0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d027      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a29      	ldr	r2, [pc, #164]	; (80086e4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d022      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a28      	ldr	r2, [pc, #160]	; (80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d01d      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a26      	ldr	r2, [pc, #152]	; (80086ec <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d018      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a25      	ldr	r2, [pc, #148]	; (80086f0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d013      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a23      	ldr	r2, [pc, #140]	; (80086f4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00e      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a22      	ldr	r2, [pc, #136]	; (80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1f      	ldr	r2, [pc, #124]	; (8008700 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d108      	bne.n	800869a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0201 	orr.w	r2, r2, #1
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e00e      	b.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	e005      	b.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40020010 	.word	0x40020010
 80086c8:	40020028 	.word	0x40020028
 80086cc:	40020040 	.word	0x40020040
 80086d0:	40020058 	.word	0x40020058
 80086d4:	40020070 	.word	0x40020070
 80086d8:	40020088 	.word	0x40020088
 80086dc:	400200a0 	.word	0x400200a0
 80086e0:	400200b8 	.word	0x400200b8
 80086e4:	40020410 	.word	0x40020410
 80086e8:	40020428 	.word	0x40020428
 80086ec:	40020440 	.word	0x40020440
 80086f0:	40020458 	.word	0x40020458
 80086f4:	40020470 	.word	0x40020470
 80086f8:	40020488 	.word	0x40020488
 80086fc:	400204a0 	.word	0x400204a0
 8008700:	400204b8 	.word	0x400204b8
 8008704:	58025408 	.word	0x58025408
 8008708:	5802541c 	.word	0x5802541c
 800870c:	58025430 	.word	0x58025430
 8008710:	58025444 	.word	0x58025444
 8008714:	58025458 	.word	0x58025458
 8008718:	5802546c 	.word	0x5802546c
 800871c:	58025480 	.word	0x58025480
 8008720:	58025494 	.word	0x58025494

08008724 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a39      	ldr	r2, [pc, #228]	; (800881c <HAL_DMAEx_ChangeMemory+0xf8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d04a      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a37      	ldr	r2, [pc, #220]	; (8008820 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d045      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a36      	ldr	r2, [pc, #216]	; (8008824 <HAL_DMAEx_ChangeMemory+0x100>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d040      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a34      	ldr	r2, [pc, #208]	; (8008828 <HAL_DMAEx_ChangeMemory+0x104>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d03b      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a33      	ldr	r2, [pc, #204]	; (800882c <HAL_DMAEx_ChangeMemory+0x108>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d036      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a31      	ldr	r2, [pc, #196]	; (8008830 <HAL_DMAEx_ChangeMemory+0x10c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d031      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a30      	ldr	r2, [pc, #192]	; (8008834 <HAL_DMAEx_ChangeMemory+0x110>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d02c      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a2e      	ldr	r2, [pc, #184]	; (8008838 <HAL_DMAEx_ChangeMemory+0x114>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d027      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a2d      	ldr	r2, [pc, #180]	; (800883c <HAL_DMAEx_ChangeMemory+0x118>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d022      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a2b      	ldr	r2, [pc, #172]	; (8008840 <HAL_DMAEx_ChangeMemory+0x11c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d01d      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a2a      	ldr	r2, [pc, #168]	; (8008844 <HAL_DMAEx_ChangeMemory+0x120>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d018      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a28      	ldr	r2, [pc, #160]	; (8008848 <HAL_DMAEx_ChangeMemory+0x124>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d013      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a27      	ldr	r2, [pc, #156]	; (800884c <HAL_DMAEx_ChangeMemory+0x128>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00e      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a25      	ldr	r2, [pc, #148]	; (8008850 <HAL_DMAEx_ChangeMemory+0x12c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d009      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a24      	ldr	r2, [pc, #144]	; (8008854 <HAL_DMAEx_ChangeMemory+0x130>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d004      	beq.n	80087d2 <HAL_DMAEx_ChangeMemory+0xae>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a22      	ldr	r2, [pc, #136]	; (8008858 <HAL_DMAEx_ChangeMemory+0x134>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d101      	bne.n	80087d6 <HAL_DMAEx_ChangeMemory+0xb2>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <HAL_DMAEx_ChangeMemory+0xb4>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00c      	beq.n	80087f6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	60da      	str	r2, [r3, #12]
 80087ea:	e010      	b.n	800880e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	611a      	str	r2, [r3, #16]
 80087f4:	e00b      	b.n	800880e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d104      	bne.n	8008806 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	60da      	str	r2, [r3, #12]
 8008804:	e003      	b.n	800880e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	40020010 	.word	0x40020010
 8008820:	40020028 	.word	0x40020028
 8008824:	40020040 	.word	0x40020040
 8008828:	40020058 	.word	0x40020058
 800882c:	40020070 	.word	0x40020070
 8008830:	40020088 	.word	0x40020088
 8008834:	400200a0 	.word	0x400200a0
 8008838:	400200b8 	.word	0x400200b8
 800883c:	40020410 	.word	0x40020410
 8008840:	40020428 	.word	0x40020428
 8008844:	40020440 	.word	0x40020440
 8008848:	40020458 	.word	0x40020458
 800884c:	40020470 	.word	0x40020470
 8008850:	40020488 	.word	0x40020488
 8008854:	400204a0 	.word	0x400204a0
 8008858:	400204b8 	.word	0x400204b8

0800885c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a46      	ldr	r2, [pc, #280]	; (8008988 <DMA_MultiBufferSetConfig+0x12c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d04a      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a44      	ldr	r2, [pc, #272]	; (800898c <DMA_MultiBufferSetConfig+0x130>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d045      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a43      	ldr	r2, [pc, #268]	; (8008990 <DMA_MultiBufferSetConfig+0x134>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d040      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a41      	ldr	r2, [pc, #260]	; (8008994 <DMA_MultiBufferSetConfig+0x138>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d03b      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a40      	ldr	r2, [pc, #256]	; (8008998 <DMA_MultiBufferSetConfig+0x13c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d036      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a3e      	ldr	r2, [pc, #248]	; (800899c <DMA_MultiBufferSetConfig+0x140>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d031      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a3d      	ldr	r2, [pc, #244]	; (80089a0 <DMA_MultiBufferSetConfig+0x144>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d02c      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a3b      	ldr	r2, [pc, #236]	; (80089a4 <DMA_MultiBufferSetConfig+0x148>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d027      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a3a      	ldr	r2, [pc, #232]	; (80089a8 <DMA_MultiBufferSetConfig+0x14c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d022      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a38      	ldr	r2, [pc, #224]	; (80089ac <DMA_MultiBufferSetConfig+0x150>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d01d      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <DMA_MultiBufferSetConfig+0x154>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d018      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a35      	ldr	r2, [pc, #212]	; (80089b4 <DMA_MultiBufferSetConfig+0x158>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d013      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a34      	ldr	r2, [pc, #208]	; (80089b8 <DMA_MultiBufferSetConfig+0x15c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00e      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a32      	ldr	r2, [pc, #200]	; (80089bc <DMA_MultiBufferSetConfig+0x160>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d009      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a31      	ldr	r2, [pc, #196]	; (80089c0 <DMA_MultiBufferSetConfig+0x164>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d004      	beq.n	800890a <DMA_MultiBufferSetConfig+0xae>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a2f      	ldr	r2, [pc, #188]	; (80089c4 <DMA_MultiBufferSetConfig+0x168>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d101      	bne.n	800890e <DMA_MultiBufferSetConfig+0xb2>
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <DMA_MultiBufferSetConfig+0xb4>
 800890e:	2300      	movs	r3, #0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d019      	beq.n	8008948 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b40      	cmp	r3, #64	; 0x40
 8008922:	d108      	bne.n	8008936 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008934:	e021      	b.n	800897a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	60da      	str	r2, [r3, #12]
}
 8008946:	e018      	b.n	800897a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	d108      	bne.n	800896a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	60da      	str	r2, [r3, #12]
}
 8008968:	e007      	b.n	800897a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	60da      	str	r2, [r3, #12]
}
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40020010 	.word	0x40020010
 800898c:	40020028 	.word	0x40020028
 8008990:	40020040 	.word	0x40020040
 8008994:	40020058 	.word	0x40020058
 8008998:	40020070 	.word	0x40020070
 800899c:	40020088 	.word	0x40020088
 80089a0:	400200a0 	.word	0x400200a0
 80089a4:	400200b8 	.word	0x400200b8
 80089a8:	40020410 	.word	0x40020410
 80089ac:	40020428 	.word	0x40020428
 80089b0:	40020440 	.word	0x40020440
 80089b4:	40020458 	.word	0x40020458
 80089b8:	40020470 	.word	0x40020470
 80089bc:	40020488 	.word	0x40020488
 80089c0:	400204a0 	.word	0x400204a0
 80089c4:	400204b8 	.word	0x400204b8

080089c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b089      	sub	sp, #36	; 0x24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089d6:	4b89      	ldr	r3, [pc, #548]	; (8008bfc <HAL_GPIO_Init+0x234>)
 80089d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089da:	e194      	b.n	8008d06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	2101      	movs	r1, #1
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	fa01 f303 	lsl.w	r3, r1, r3
 80089e8:	4013      	ands	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 8186 	beq.w	8008d00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d005      	beq.n	8008a0c <HAL_GPIO_Init+0x44>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d130      	bne.n	8008a6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	2203      	movs	r2, #3
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1c:	43db      	mvns	r3, r3
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	4013      	ands	r3, r2
 8008a22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a42:	2201      	movs	r2, #1
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	091b      	lsrs	r3, r3, #4
 8008a58:	f003 0201 	and.w	r2, r3, #1
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d017      	beq.n	8008aaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	2203      	movs	r2, #3
 8008a86:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8a:	43db      	mvns	r3, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689a      	ldr	r2, [r3, #8]
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d123      	bne.n	8008afe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	08da      	lsrs	r2, r3, #3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3208      	adds	r2, #8
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	220f      	movs	r2, #15
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	08da      	lsrs	r2, r3, #3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3208      	adds	r2, #8
 8008af8:	69b9      	ldr	r1, [r7, #24]
 8008afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	2203      	movs	r2, #3
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	43db      	mvns	r3, r3
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	4013      	ands	r3, r2
 8008b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f003 0203 	and.w	r2, r3, #3
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80e0 	beq.w	8008d00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b40:	4b2f      	ldr	r3, [pc, #188]	; (8008c00 <HAL_GPIO_Init+0x238>)
 8008b42:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008b46:	4a2e      	ldr	r2, [pc, #184]	; (8008c00 <HAL_GPIO_Init+0x238>)
 8008b48:	f043 0302 	orr.w	r3, r3, #2
 8008b4c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008b50:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <HAL_GPIO_Init+0x238>)
 8008b52:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b5e:	4a29      	ldr	r2, [pc, #164]	; (8008c04 <HAL_GPIO_Init+0x23c>)
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	089b      	lsrs	r3, r3, #2
 8008b64:	3302      	adds	r3, #2
 8008b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f003 0303 	and.w	r3, r3, #3
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	220f      	movs	r2, #15
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	43db      	mvns	r3, r3
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a20      	ldr	r2, [pc, #128]	; (8008c08 <HAL_GPIO_Init+0x240>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d052      	beq.n	8008c30 <HAL_GPIO_Init+0x268>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1f      	ldr	r2, [pc, #124]	; (8008c0c <HAL_GPIO_Init+0x244>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d031      	beq.n	8008bf6 <HAL_GPIO_Init+0x22e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1e      	ldr	r2, [pc, #120]	; (8008c10 <HAL_GPIO_Init+0x248>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d02b      	beq.n	8008bf2 <HAL_GPIO_Init+0x22a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <HAL_GPIO_Init+0x24c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d025      	beq.n	8008bee <HAL_GPIO_Init+0x226>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	; (8008c18 <HAL_GPIO_Init+0x250>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d01f      	beq.n	8008bea <HAL_GPIO_Init+0x222>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a1b      	ldr	r2, [pc, #108]	; (8008c1c <HAL_GPIO_Init+0x254>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d019      	beq.n	8008be6 <HAL_GPIO_Init+0x21e>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1a      	ldr	r2, [pc, #104]	; (8008c20 <HAL_GPIO_Init+0x258>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d013      	beq.n	8008be2 <HAL_GPIO_Init+0x21a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a19      	ldr	r2, [pc, #100]	; (8008c24 <HAL_GPIO_Init+0x25c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00d      	beq.n	8008bde <HAL_GPIO_Init+0x216>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a18      	ldr	r2, [pc, #96]	; (8008c28 <HAL_GPIO_Init+0x260>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <HAL_GPIO_Init+0x212>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a17      	ldr	r2, [pc, #92]	; (8008c2c <HAL_GPIO_Init+0x264>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d101      	bne.n	8008bd6 <HAL_GPIO_Init+0x20e>
 8008bd2:	2309      	movs	r3, #9
 8008bd4:	e02d      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	e02b      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bda:	2308      	movs	r3, #8
 8008bdc:	e029      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bde:	2307      	movs	r3, #7
 8008be0:	e027      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008be2:	2306      	movs	r3, #6
 8008be4:	e025      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008be6:	2305      	movs	r3, #5
 8008be8:	e023      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bea:	2304      	movs	r3, #4
 8008bec:	e021      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e01f      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e01d      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e01b      	b.n	8008c32 <HAL_GPIO_Init+0x26a>
 8008bfa:	bf00      	nop
 8008bfc:	58000080 	.word	0x58000080
 8008c00:	58024400 	.word	0x58024400
 8008c04:	58000400 	.word	0x58000400
 8008c08:	58020000 	.word	0x58020000
 8008c0c:	58020400 	.word	0x58020400
 8008c10:	58020800 	.word	0x58020800
 8008c14:	58020c00 	.word	0x58020c00
 8008c18:	58021000 	.word	0x58021000
 8008c1c:	58021400 	.word	0x58021400
 8008c20:	58021800 	.word	0x58021800
 8008c24:	58021c00 	.word	0x58021c00
 8008c28:	58022000 	.word	0x58022000
 8008c2c:	58022400 	.word	0x58022400
 8008c30:	2300      	movs	r3, #0
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	f002 0203 	and.w	r2, r2, #3
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	4093      	lsls	r3, r2
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c42:	4938      	ldr	r1, [pc, #224]	; (8008d24 <HAL_GPIO_Init+0x35c>)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	3302      	adds	r3, #2
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	43db      	mvns	r3, r3
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	43db      	mvns	r3, r3
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	3301      	adds	r3, #1
 8008d04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f47f ae63 	bne.w	80089dc <HAL_GPIO_Init+0x14>
  }
}
 8008d16:	bf00      	nop
 8008d18:	bf00      	nop
 8008d1a:	3724      	adds	r7, #36	; 0x24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	58000400 	.word	0x58000400

08008d28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d36:	4b75      	ldr	r3, [pc, #468]	; (8008f0c <HAL_GPIO_DeInit+0x1e4>)
 8008d38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008d3a:	e0d9      	b.n	8008ef0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	fa02 f303 	lsl.w	r3, r2, r3
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	4013      	ands	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80cc 	beq.w	8008eea <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008d52:	4a6f      	ldr	r2, [pc, #444]	; (8008f10 <HAL_GPIO_DeInit+0x1e8>)
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	3302      	adds	r3, #2
 8008d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d5e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	220f      	movs	r2, #15
 8008d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	4013      	ands	r3, r2
 8008d72:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a67      	ldr	r2, [pc, #412]	; (8008f14 <HAL_GPIO_DeInit+0x1ec>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d037      	beq.n	8008dec <HAL_GPIO_DeInit+0xc4>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a66      	ldr	r2, [pc, #408]	; (8008f18 <HAL_GPIO_DeInit+0x1f0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d031      	beq.n	8008de8 <HAL_GPIO_DeInit+0xc0>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a65      	ldr	r2, [pc, #404]	; (8008f1c <HAL_GPIO_DeInit+0x1f4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d02b      	beq.n	8008de4 <HAL_GPIO_DeInit+0xbc>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a64      	ldr	r2, [pc, #400]	; (8008f20 <HAL_GPIO_DeInit+0x1f8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d025      	beq.n	8008de0 <HAL_GPIO_DeInit+0xb8>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a63      	ldr	r2, [pc, #396]	; (8008f24 <HAL_GPIO_DeInit+0x1fc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d01f      	beq.n	8008ddc <HAL_GPIO_DeInit+0xb4>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a62      	ldr	r2, [pc, #392]	; (8008f28 <HAL_GPIO_DeInit+0x200>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d019      	beq.n	8008dd8 <HAL_GPIO_DeInit+0xb0>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a61      	ldr	r2, [pc, #388]	; (8008f2c <HAL_GPIO_DeInit+0x204>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d013      	beq.n	8008dd4 <HAL_GPIO_DeInit+0xac>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a60      	ldr	r2, [pc, #384]	; (8008f30 <HAL_GPIO_DeInit+0x208>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00d      	beq.n	8008dd0 <HAL_GPIO_DeInit+0xa8>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a5f      	ldr	r2, [pc, #380]	; (8008f34 <HAL_GPIO_DeInit+0x20c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d007      	beq.n	8008dcc <HAL_GPIO_DeInit+0xa4>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a5e      	ldr	r2, [pc, #376]	; (8008f38 <HAL_GPIO_DeInit+0x210>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d101      	bne.n	8008dc8 <HAL_GPIO_DeInit+0xa0>
 8008dc4:	2309      	movs	r3, #9
 8008dc6:	e012      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008dc8:	230a      	movs	r3, #10
 8008dca:	e010      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008dcc:	2308      	movs	r3, #8
 8008dce:	e00e      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008dd0:	2307      	movs	r3, #7
 8008dd2:	e00c      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008dd4:	2306      	movs	r3, #6
 8008dd6:	e00a      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008dd8:	2305      	movs	r3, #5
 8008dda:	e008      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	e006      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008de0:	2303      	movs	r3, #3
 8008de2:	e004      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e002      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e000      	b.n	8008dee <HAL_GPIO_DeInit+0xc6>
 8008dec:	2300      	movs	r3, #0
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	f002 0203 	and.w	r2, r2, #3
 8008df4:	0092      	lsls	r2, r2, #2
 8008df6:	4093      	lsls	r3, r2
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d136      	bne.n	8008e6c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	43db      	mvns	r3, r3
 8008e06:	401a      	ands	r2, r3
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	43db      	mvns	r3, r3
 8008e14:	401a      	ands	r2, r3
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	43db      	mvns	r3, r3
 8008e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e28:	4013      	ands	r3, r2
 8008e2a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	43db      	mvns	r3, r3
 8008e36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	220f      	movs	r2, #15
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e4e:	4a30      	ldr	r2, [pc, #192]	; (8008f10 <HAL_GPIO_DeInit+0x1e8>)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	089b      	lsrs	r3, r3, #2
 8008e54:	3302      	adds	r3, #2
 8008e56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	43da      	mvns	r2, r3
 8008e5e:	482c      	ldr	r0, [pc, #176]	; (8008f10 <HAL_GPIO_DeInit+0x1e8>)
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	089b      	lsrs	r3, r3, #2
 8008e64:	400a      	ands	r2, r1
 8008e66:	3302      	adds	r3, #2
 8008e68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	2103      	movs	r1, #3
 8008e76:	fa01 f303 	lsl.w	r3, r1, r3
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	08da      	lsrs	r2, r3, #3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3208      	adds	r2, #8
 8008e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	220f      	movs	r2, #15
 8008e96:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	08d2      	lsrs	r2, r2, #3
 8008ea0:	4019      	ands	r1, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3208      	adds	r2, #8
 8008ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	2103      	movs	r1, #3
 8008eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	401a      	ands	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	401a      	ands	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	2103      	movs	r1, #3
 8008ede:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee2:	43db      	mvns	r3, r3
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	3301      	adds	r3, #1
 8008eee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f47f af1f 	bne.w	8008d3c <HAL_GPIO_DeInit+0x14>
  }
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	58000080 	.word	0x58000080
 8008f10:	58000400 	.word	0x58000400
 8008f14:	58020000 	.word	0x58020000
 8008f18:	58020400 	.word	0x58020400
 8008f1c:	58020800 	.word	0x58020800
 8008f20:	58020c00 	.word	0x58020c00
 8008f24:	58021000 	.word	0x58021000
 8008f28:	58021400 	.word	0x58021400
 8008f2c:	58021800 	.word	0x58021800
 8008f30:	58021c00 	.word	0x58021c00
 8008f34:	58022000 	.word	0x58022000
 8008f38:	58022400 	.word	0x58022400

08008f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	807b      	strh	r3, [r7, #2]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f4c:	787b      	ldrb	r3, [r7, #1]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f52:	887a      	ldrh	r2, [r7, #2]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f58:	e003      	b.n	8008f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f5a:	887b      	ldrh	r3, [r7, #2]
 8008f5c:	041a      	lsls	r2, r3, #16
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	619a      	str	r2, [r3, #24]
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f80:	887a      	ldrh	r2, [r7, #2]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4013      	ands	r3, r2
 8008f86:	041a      	lsls	r2, r3, #16
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	43d9      	mvns	r1, r3
 8008f8c:	887b      	ldrh	r3, [r7, #2]
 8008f8e:	400b      	ands	r3, r1
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	619a      	str	r2, [r3, #24]
}
 8008f96:	bf00      	nop
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
	...

08008fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e07f      	b.n	80090b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f8a9 	bl	8009122 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2224      	movs	r2, #36	; 0x24
 8008fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0201 	bic.w	r2, r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d107      	bne.n	800901e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800901a:	609a      	str	r2, [r3, #8]
 800901c:	e006      	b.n	800902c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800902a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	2b02      	cmp	r3, #2
 8009032:	d104      	bne.n	800903e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800903c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6859      	ldr	r1, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <HAL_I2C_Init+0x11c>)
 800904a:	430b      	orrs	r3, r1
 800904c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800905c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1a      	ldr	r2, [r3, #32]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0201 	orr.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	02008000 	.word	0x02008000

080090c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e021      	b.n	800911a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2224      	movs	r2, #36	; 0x24
 80090da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0201 	bic.w	r2, r2, #1
 80090ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f821 	bl	8009136 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af02      	add	r7, sp, #8
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	4608      	mov	r0, r1
 8009156:	4611      	mov	r1, r2
 8009158:	461a      	mov	r2, r3
 800915a:	4603      	mov	r3, r0
 800915c:	817b      	strh	r3, [r7, #10]
 800915e:	460b      	mov	r3, r1
 8009160:	813b      	strh	r3, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b20      	cmp	r3, #32
 8009170:	f040 80f9 	bne.w	8009366 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_I2C_Mem_Write+0x34>
 800917a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d105      	bne.n	800918c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009186:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0ed      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009192:	2b01      	cmp	r3, #1
 8009194:	d101      	bne.n	800919a <HAL_I2C_Mem_Write+0x4e>
 8009196:	2302      	movs	r3, #2
 8009198:	e0e6      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091a2:	f7fb f897 	bl	80042d4 <HAL_GetTick>
 80091a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	2319      	movs	r3, #25
 80091ae:	2201      	movs	r2, #1
 80091b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fadd 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e0d1      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2221      	movs	r2, #33	; 0x21
 80091c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2240      	movs	r2, #64	; 0x40
 80091d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a3a      	ldr	r2, [r7, #32]
 80091de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091ec:	88f8      	ldrh	r0, [r7, #6]
 80091ee:	893a      	ldrh	r2, [r7, #8]
 80091f0:	8979      	ldrh	r1, [r7, #10]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	4603      	mov	r3, r0
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f9ed 	bl	80095dc <I2C_RequestMemoryWrite>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e0a9      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009218:	b29b      	uxth	r3, r3
 800921a:	2bff      	cmp	r3, #255	; 0xff
 800921c:	d90e      	bls.n	800923c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	22ff      	movs	r2, #255	; 0xff
 8009222:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009228:	b2da      	uxtb	r2, r3
 800922a:	8979      	ldrh	r1, [r7, #10]
 800922c:	2300      	movs	r3, #0
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fc57 	bl	8009ae8 <I2C_TransferConfig>
 800923a:	e00f      	b.n	800925c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924a:	b2da      	uxtb	r2, r3
 800924c:	8979      	ldrh	r1, [r7, #10]
 800924e:	2300      	movs	r3, #0
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 fc46 	bl	8009ae8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 fad6 	bl	8009812 <I2C_WaitOnTXISFlagUntilTimeout>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e07b      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d034      	beq.n	8009314 <HAL_I2C_Mem_Write+0x1c8>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d130      	bne.n	8009314 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	2200      	movs	r2, #0
 80092ba:	2180      	movs	r1, #128	; 0x80
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 fa59 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e04d      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2bff      	cmp	r3, #255	; 0xff
 80092d4:	d90e      	bls.n	80092f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	22ff      	movs	r2, #255	; 0xff
 80092da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	8979      	ldrh	r1, [r7, #10]
 80092e4:	2300      	movs	r3, #0
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fbfb 	bl	8009ae8 <I2C_TransferConfig>
 80092f2:	e00f      	b.n	8009314 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009302:	b2da      	uxtb	r2, r3
 8009304:	8979      	ldrh	r1, [r7, #10]
 8009306:	2300      	movs	r3, #0
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 fbea 	bl	8009ae8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009318:	b29b      	uxth	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d19e      	bne.n	800925c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fabc 	bl	80098a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e01a      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2220      	movs	r2, #32
 8009338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6859      	ldr	r1, [r3, #4]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <HAL_I2C_Mem_Write+0x224>)
 8009346:	400b      	ands	r3, r1
 8009348:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2220      	movs	r2, #32
 800934e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	e000      	b.n	8009368 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009366:	2302      	movs	r3, #2
  }
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	fe00e800 	.word	0xfe00e800

08009374 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af02      	add	r7, sp, #8
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	4608      	mov	r0, r1
 800937e:	4611      	mov	r1, r2
 8009380:	461a      	mov	r2, r3
 8009382:	4603      	mov	r3, r0
 8009384:	817b      	strh	r3, [r7, #10]
 8009386:	460b      	mov	r3, r1
 8009388:	813b      	strh	r3, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b20      	cmp	r3, #32
 8009398:	f040 80fd 	bne.w	8009596 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <HAL_I2C_Mem_Read+0x34>
 80093a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d105      	bne.n	80093b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e0f1      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_I2C_Mem_Read+0x4e>
 80093be:	2302      	movs	r3, #2
 80093c0:	e0ea      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093ca:	f7fa ff83 	bl	80042d4 <HAL_GetTick>
 80093ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	2319      	movs	r3, #25
 80093d6:	2201      	movs	r2, #1
 80093d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 f9c9 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e0d5      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2222      	movs	r2, #34	; 0x22
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2240      	movs	r2, #64	; 0x40
 80093f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a3a      	ldr	r2, [r7, #32]
 8009406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800940c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009414:	88f8      	ldrh	r0, [r7, #6]
 8009416:	893a      	ldrh	r2, [r7, #8]
 8009418:	8979      	ldrh	r1, [r7, #10]
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	4603      	mov	r3, r0
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 f92d 	bl	8009684 <I2C_RequestMemoryRead>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e0ad      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009440:	b29b      	uxth	r3, r3
 8009442:	2bff      	cmp	r3, #255	; 0xff
 8009444:	d90e      	bls.n	8009464 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	22ff      	movs	r2, #255	; 0xff
 800944a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009450:	b2da      	uxtb	r2, r3
 8009452:	8979      	ldrh	r1, [r7, #10]
 8009454:	4b52      	ldr	r3, [pc, #328]	; (80095a0 <HAL_I2C_Mem_Read+0x22c>)
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 fb43 	bl	8009ae8 <I2C_TransferConfig>
 8009462:	e00f      	b.n	8009484 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009472:	b2da      	uxtb	r2, r3
 8009474:	8979      	ldrh	r1, [r7, #10]
 8009476:	4b4a      	ldr	r3, [pc, #296]	; (80095a0 <HAL_I2C_Mem_Read+0x22c>)
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fb32 	bl	8009ae8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	2200      	movs	r2, #0
 800948c:	2104      	movs	r1, #4
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 f970 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e07c      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d034      	beq.n	8009544 <HAL_I2C_Mem_Read+0x1d0>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d130      	bne.n	8009544 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e8:	2200      	movs	r2, #0
 80094ea:	2180      	movs	r1, #128	; 0x80
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f941 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e04d      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009500:	b29b      	uxth	r3, r3
 8009502:	2bff      	cmp	r3, #255	; 0xff
 8009504:	d90e      	bls.n	8009524 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	22ff      	movs	r2, #255	; 0xff
 800950a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009510:	b2da      	uxtb	r2, r3
 8009512:	8979      	ldrh	r1, [r7, #10]
 8009514:	2300      	movs	r3, #0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 fae3 	bl	8009ae8 <I2C_TransferConfig>
 8009522:	e00f      	b.n	8009544 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009532:	b2da      	uxtb	r2, r3
 8009534:	8979      	ldrh	r1, [r7, #10]
 8009536:	2300      	movs	r3, #0
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fad2 	bl	8009ae8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d19a      	bne.n	8009484 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f9a4 	bl	80098a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e01a      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2220      	movs	r2, #32
 8009568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6859      	ldr	r1, [r3, #4]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <HAL_I2C_Mem_Read+0x230>)
 8009576:	400b      	ands	r3, r1
 8009578:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2220      	movs	r2, #32
 800957e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	e000      	b.n	8009598 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009596:	2302      	movs	r3, #2
  }
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	80002400 	.word	0x80002400
 80095a4:	fe00e800 	.word	0xfe00e800

080095a8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095b6:	b2db      	uxtb	r3, r3
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	4608      	mov	r0, r1
 80095e6:	4611      	mov	r1, r2
 80095e8:	461a      	mov	r2, r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	817b      	strh	r3, [r7, #10]
 80095ee:	460b      	mov	r3, r1
 80095f0:	813b      	strh	r3, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	8979      	ldrh	r1, [r7, #10]
 80095fc:	4b20      	ldr	r3, [pc, #128]	; (8009680 <I2C_RequestMemoryWrite+0xa4>)
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fa6f 	bl	8009ae8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	69b9      	ldr	r1, [r7, #24]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f8ff 	bl	8009812 <I2C_WaitOnTXISFlagUntilTimeout>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e02c      	b.n	8009678 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d105      	bne.n	8009630 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009624:	893b      	ldrh	r3, [r7, #8]
 8009626:	b2da      	uxtb	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	629a      	str	r2, [r3, #40]	; 0x28
 800962e:	e015      	b.n	800965c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009630:	893b      	ldrh	r3, [r7, #8]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	b29b      	uxth	r3, r3
 8009636:	b2da      	uxtb	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	69b9      	ldr	r1, [r7, #24]
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f8e5 	bl	8009812 <I2C_WaitOnTXISFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e012      	b.n	8009678 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009652:	893b      	ldrh	r3, [r7, #8]
 8009654:	b2da      	uxtb	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	2200      	movs	r2, #0
 8009664:	2180      	movs	r1, #128	; 0x80
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 f884 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	80002000 	.word	0x80002000

08009684 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af02      	add	r7, sp, #8
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	461a      	mov	r2, r3
 8009692:	4603      	mov	r3, r0
 8009694:	817b      	strh	r3, [r7, #10]
 8009696:	460b      	mov	r3, r1
 8009698:	813b      	strh	r3, [r7, #8]
 800969a:	4613      	mov	r3, r2
 800969c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	8979      	ldrh	r1, [r7, #10]
 80096a4:	4b20      	ldr	r3, [pc, #128]	; (8009728 <I2C_RequestMemoryRead+0xa4>)
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	2300      	movs	r3, #0
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 fa1c 	bl	8009ae8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	69b9      	ldr	r1, [r7, #24]
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 f8ac 	bl	8009812 <I2C_WaitOnTXISFlagUntilTimeout>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e02c      	b.n	800971e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096c4:	88fb      	ldrh	r3, [r7, #6]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d105      	bne.n	80096d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096ca:	893b      	ldrh	r3, [r7, #8]
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	629a      	str	r2, [r3, #40]	; 0x28
 80096d4:	e015      	b.n	8009702 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80096d6:	893b      	ldrh	r3, [r7, #8]
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	b29b      	uxth	r3, r3
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	69b9      	ldr	r1, [r7, #24]
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f892 	bl	8009812 <I2C_WaitOnTXISFlagUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e012      	b.n	800971e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096f8:	893b      	ldrh	r3, [r7, #8]
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	2200      	movs	r2, #0
 800970a:	2140      	movs	r1, #64	; 0x40
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f831 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	80002000 	.word	0x80002000

0800972c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b02      	cmp	r3, #2
 8009740:	d103      	bne.n	800974a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2200      	movs	r2, #0
 8009748:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b01      	cmp	r3, #1
 8009756:	d007      	beq.n	8009768 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	619a      	str	r2, [r3, #24]
  }
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009784:	e031      	b.n	80097ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800978c:	d02d      	beq.n	80097ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800978e:	f7fa fda1 	bl	80042d4 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d302      	bcc.n	80097a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d122      	bne.n	80097ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699a      	ldr	r2, [r3, #24]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4013      	ands	r3, r2
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	bf0c      	ite	eq
 80097b4:	2301      	moveq	r3, #1
 80097b6:	2300      	movne	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	461a      	mov	r2, r3
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d113      	bne.n	80097ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c6:	f043 0220 	orr.w	r2, r3, #32
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2220      	movs	r2, #32
 80097d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e00f      	b.n	800980a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	699a      	ldr	r2, [r3, #24]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4013      	ands	r3, r2
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	bf0c      	ite	eq
 80097fa:	2301      	moveq	r3, #1
 80097fc:	2300      	movne	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	429a      	cmp	r2, r3
 8009806:	d0be      	beq.n	8009786 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800981e:	e033      	b.n	8009888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f87f 	bl	8009928 <I2C_IsErrorOccurred>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e031      	b.n	8009898 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800983a:	d025      	beq.n	8009888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800983c:	f7fa fd4a 	bl	80042d4 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	429a      	cmp	r2, r3
 800984a:	d302      	bcc.n	8009852 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d11a      	bne.n	8009888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d013      	beq.n	8009888 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e007      	b.n	8009898 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b02      	cmp	r3, #2
 8009894:	d1c4      	bne.n	8009820 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098ac:	e02f      	b.n	800990e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	68b9      	ldr	r1, [r7, #8]
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 f838 	bl	8009928 <I2C_IsErrorOccurred>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e02d      	b.n	800991e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c2:	f7fa fd07 	bl	80042d4 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d302      	bcc.n	80098d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11a      	bne.n	800990e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d013      	beq.n	800990e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ea:	f043 0220 	orr.w	r2, r3, #32
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e007      	b.n	800991e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b20      	cmp	r3, #32
 800991a:	d1c8      	bne.n	80098ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b00      	cmp	r3, #0
 8009952:	d068      	beq.n	8009a26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2210      	movs	r2, #16
 800995a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800995c:	e049      	b.n	80099f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009964:	d045      	beq.n	80099f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009966:	f7fa fcb5 	bl	80042d4 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	429a      	cmp	r2, r3
 8009974:	d302      	bcc.n	800997c <I2C_IsErrorOccurred+0x54>
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d13a      	bne.n	80099f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009986:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800998e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800999a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800999e:	d121      	bne.n	80099e4 <I2C_IsErrorOccurred+0xbc>
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a6:	d01d      	beq.n	80099e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099a8:	7cfb      	ldrb	r3, [r7, #19]
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d01a      	beq.n	80099e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099be:	f7fa fc89 	bl	80042d4 <HAL_GetTick>
 80099c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099c4:	e00e      	b.n	80099e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80099c6:	f7fa fc85 	bl	80042d4 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	2b19      	cmp	r3, #25
 80099d2:	d907      	bls.n	80099e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	f043 0320 	orr.w	r3, r3, #32
 80099da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80099e2:	e006      	b.n	80099f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	d1e9      	bne.n	80099c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	d003      	beq.n	8009a08 <I2C_IsErrorOccurred+0xe0>
 8009a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0aa      	beq.n	800995e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2220      	movs	r2, #32
 8009a16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	f043 0304 	orr.w	r3, r3, #4
 8009a1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	f043 0301 	orr.w	r3, r3, #1
 8009a3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00b      	beq.n	8009a72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	f043 0308 	orr.w	r3, r3, #8
 8009a60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	f043 0302 	orr.w	r3, r3, #2
 8009a82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01c      	beq.n	8009ad6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f7ff fe45 	bl	800972c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6859      	ldr	r1, [r3, #4]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <I2C_IsErrorOccurred+0x1bc>)
 8009aae:	400b      	ands	r3, r1
 8009ab0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3728      	adds	r7, #40	; 0x28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	fe00e800 	.word	0xfe00e800

08009ae8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	607b      	str	r3, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	817b      	strh	r3, [r7, #10]
 8009af6:	4613      	mov	r3, r2
 8009af8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009afa:	897b      	ldrh	r3, [r7, #10]
 8009afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b00:	7a7b      	ldrb	r3, [r7, #9]
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	0d5b      	lsrs	r3, r3, #21
 8009b22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b26:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <I2C_TransferConfig+0x60>)
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	43db      	mvns	r3, r3
 8009b2c:	ea02 0103 	and.w	r1, r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	03ff63ff 	.word	0x03ff63ff

08009b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b20      	cmp	r3, #32
 8009b60:	d138      	bne.n	8009bd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d101      	bne.n	8009b70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e032      	b.n	8009bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2224      	movs	r2, #36	; 0x24
 8009b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0201 	bic.w	r2, r2, #1
 8009b8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6819      	ldr	r1, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f042 0201 	orr.w	r2, r2, #1
 8009bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e000      	b.n	8009bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bd4:	2302      	movs	r3, #2
  }
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b085      	sub	sp, #20
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	d139      	bne.n	8009c6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e033      	b.n	8009c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2224      	movs	r2, #36	; 0x24
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 0201 	bic.w	r2, r2, #1
 8009c24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	021b      	lsls	r3, r3, #8
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0201 	orr.w	r2, r2, #1
 8009c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e000      	b.n	8009c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c6c:	2302      	movs	r3, #2
  }
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
	...

08009c7c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e0bf      	b.n	8009e0e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7f7 faa0 	bl	80011e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009cbe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6999      	ldr	r1, [r3, #24]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009cd4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6899      	ldr	r1, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b4a      	ldr	r3, [pc, #296]	; (8009e18 <HAL_LTDC_Init+0x19c>)
 8009cf0:	400b      	ands	r3, r1
 8009cf2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	041b      	lsls	r3, r3, #16
 8009cfa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6899      	ldr	r1, [r3, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68d9      	ldr	r1, [r3, #12]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	4b3e      	ldr	r3, [pc, #248]	; (8009e18 <HAL_LTDC_Init+0x19c>)
 8009d1e:	400b      	ands	r3, r1
 8009d20:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68d9      	ldr	r1, [r3, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1a      	ldr	r2, [r3, #32]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	431a      	orrs	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6919      	ldr	r1, [r3, #16]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b33      	ldr	r3, [pc, #204]	; (8009e18 <HAL_LTDC_Init+0x19c>)
 8009d4c:	400b      	ands	r3, r1
 8009d4e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	041b      	lsls	r3, r3, #16
 8009d56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6919      	ldr	r1, [r3, #16]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6959      	ldr	r1, [r3, #20]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	4b27      	ldr	r3, [pc, #156]	; (8009e18 <HAL_LTDC_Init+0x19c>)
 8009d7a:	400b      	ands	r3, r1
 8009d7c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6959      	ldr	r1, [r3, #20]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	431a      	orrs	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009dac:	041b      	lsls	r3, r3, #16
 8009dae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0206 	orr.w	r2, r2, #6
 8009dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0201 	orr.w	r2, r2, #1
 8009dfa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	f000f800 	.word	0xf000f800

08009e1c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f003 0304 	and.w	r3, r3, #4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d023      	beq.n	8009e86 <HAL_LTDC_IRQHandler+0x6a>
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d01e      	beq.n	8009e86 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 0204 	bic.w	r2, r2, #4
 8009e56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2204      	movs	r2, #4
 8009e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e66:	f043 0201 	orr.w	r2, r3, #1
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2204      	movs	r2, #4
 8009e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f86f 	bl	8009f64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d023      	beq.n	8009ed8 <HAL_LTDC_IRQHandler+0xbc>
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01e      	beq.n	8009ed8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0202 	bic.w	r2, r2, #2
 8009ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009eb8:	f043 0202 	orr.w	r2, r3, #2
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f846 	bl	8009f64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d01b      	beq.n	8009f1a <HAL_LTDC_IRQHandler+0xfe>
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d016      	beq.n	8009f1a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f022 0201 	bic.w	r2, r2, #1
 8009efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2201      	movs	r2, #1
 8009f02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f82f 	bl	8009f78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f003 0308 	and.w	r3, r3, #8
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01b      	beq.n	8009f5c <HAL_LTDC_IRQHandler+0x140>
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f003 0308 	and.w	r3, r3, #8
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d016      	beq.n	8009f5c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0208 	bic.w	r2, r2, #8
 8009f3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2208      	movs	r2, #8
 8009f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f818 	bl	8009f8c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009f5c:	bf00      	nop
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009fa0:	b5b0      	push	{r4, r5, r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d101      	bne.n	8009fba <HAL_LTDC_ConfigLayer+0x1a>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	e02c      	b.n	800a014 <HAL_LTDC_ConfigLayer+0x74>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2134      	movs	r1, #52	; 0x34
 8009fd0:	fb01 f303 	mul.w	r3, r1, r3
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4614      	mov	r4, r2
 8009fde:	461d      	mov	r5, r3
 8009fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f811 	bl	800a01c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2201      	movs	r2, #1
 800a000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bdb0      	pop	{r4, r5, r7, pc}

0800a01c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b089      	sub	sp, #36	; 0x24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	0c1b      	lsrs	r3, r3, #16
 800a034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a038:	4413      	add	r3, r2
 800a03a:	041b      	lsls	r3, r3, #16
 800a03c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	01db      	lsls	r3, r3, #7
 800a048:	4413      	add	r3, r2
 800a04a:	3384      	adds	r3, #132	; 0x84
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	4611      	mov	r1, r2
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	01d2      	lsls	r2, r2, #7
 800a058:	440a      	add	r2, r1
 800a05a:	3284      	adds	r2, #132	; 0x84
 800a05c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a060:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	0c1b      	lsrs	r3, r3, #16
 800a06e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a072:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a074:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4619      	mov	r1, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	01db      	lsls	r3, r3, #7
 800a080:	440b      	add	r3, r1
 800a082:	3384      	adds	r3, #132	; 0x84
 800a084:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a08a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a09a:	4413      	add	r3, r2
 800a09c:	041b      	lsls	r3, r3, #16
 800a09e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	01db      	lsls	r3, r3, #7
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3384      	adds	r3, #132	; 0x84
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	6812      	ldr	r2, [r2, #0]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	01d2      	lsls	r2, r2, #7
 800a0ba:	440a      	add	r2, r1
 800a0bc:	3284      	adds	r2, #132	; 0x84
 800a0be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a0c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	689a      	ldr	r2, [r3, #8]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0d2:	4413      	add	r3, r2
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	01db      	lsls	r3, r3, #7
 800a0e0:	440b      	add	r3, r1
 800a0e2:	3384      	adds	r3, #132	; 0x84
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	01db      	lsls	r3, r3, #7
 800a0f6:	4413      	add	r3, r2
 800a0f8:	3384      	adds	r3, #132	; 0x84
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	6812      	ldr	r2, [r2, #0]
 800a100:	4611      	mov	r1, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	01d2      	lsls	r2, r2, #7
 800a106:	440a      	add	r2, r1
 800a108:	3284      	adds	r2, #132	; 0x84
 800a10a:	f023 0307 	bic.w	r3, r3, #7
 800a10e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	461a      	mov	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	01db      	lsls	r3, r3, #7
 800a11a:	4413      	add	r3, r2
 800a11c:	3384      	adds	r3, #132	; 0x84
 800a11e:	461a      	mov	r2, r3
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a136:	041b      	lsls	r3, r3, #16
 800a138:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	061b      	lsls	r3, r3, #24
 800a140:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	01db      	lsls	r3, r3, #7
 800a14c:	4413      	add	r3, r2
 800a14e:	3384      	adds	r3, #132	; 0x84
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	01db      	lsls	r3, r3, #7
 800a15c:	4413      	add	r3, r2
 800a15e:	3384      	adds	r3, #132	; 0x84
 800a160:	461a      	mov	r2, r3
 800a162:	2300      	movs	r3, #0
 800a164:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a16c:	461a      	mov	r2, r3
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	431a      	orrs	r2, r3
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	431a      	orrs	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4619      	mov	r1, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	01db      	lsls	r3, r3, #7
 800a180:	440b      	add	r3, r1
 800a182:	3384      	adds	r3, #132	; 0x84
 800a184:	4619      	mov	r1, r3
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	4313      	orrs	r3, r2
 800a18a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	461a      	mov	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	01db      	lsls	r3, r3, #7
 800a196:	4413      	add	r3, r2
 800a198:	3384      	adds	r3, #132	; 0x84
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	6812      	ldr	r2, [r2, #0]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	01d2      	lsls	r2, r2, #7
 800a1a6:	440a      	add	r2, r1
 800a1a8:	3284      	adds	r2, #132	; 0x84
 800a1aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	01db      	lsls	r3, r3, #7
 800a1ba:	4413      	add	r3, r2
 800a1bc:	3384      	adds	r3, #132	; 0x84
 800a1be:	461a      	mov	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	01db      	lsls	r3, r3, #7
 800a1d0:	4413      	add	r3, r2
 800a1d2:	3384      	adds	r3, #132	; 0x84
 800a1d4:	69da      	ldr	r2, [r3, #28]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	01db      	lsls	r3, r3, #7
 800a1e0:	440b      	add	r3, r1
 800a1e2:	3384      	adds	r3, #132	; 0x84
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4b58      	ldr	r3, [pc, #352]	; (800a348 <LTDC_SetConfig+0x32c>)
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	69da      	ldr	r2, [r3, #28]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	68f9      	ldr	r1, [r7, #12]
 800a1f6:	6809      	ldr	r1, [r1, #0]
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	01c9      	lsls	r1, r1, #7
 800a1fe:	4401      	add	r1, r0
 800a200:	3184      	adds	r1, #132	; 0x84
 800a202:	4313      	orrs	r3, r2
 800a204:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	01db      	lsls	r3, r3, #7
 800a210:	4413      	add	r3, r2
 800a212:	3384      	adds	r3, #132	; 0x84
 800a214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	01db      	lsls	r3, r3, #7
 800a220:	4413      	add	r3, r2
 800a222:	3384      	adds	r3, #132	; 0x84
 800a224:	461a      	mov	r2, r3
 800a226:	2300      	movs	r3, #0
 800a228:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	01db      	lsls	r3, r3, #7
 800a234:	4413      	add	r3, r2
 800a236:	3384      	adds	r3, #132	; 0x84
 800a238:	461a      	mov	r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a248:	2304      	movs	r3, #4
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	e01b      	b.n	800a286 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d102      	bne.n	800a25c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a256:	2303      	movs	r3, #3
 800a258:	61fb      	str	r3, [r7, #28]
 800a25a:	e014      	b.n	800a286 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b04      	cmp	r3, #4
 800a262:	d00b      	beq.n	800a27c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d007      	beq.n	800a27c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a270:	2b03      	cmp	r3, #3
 800a272:	d003      	beq.n	800a27c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a278:	2b07      	cmp	r3, #7
 800a27a:	d102      	bne.n	800a282 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a27c:	2302      	movs	r3, #2
 800a27e:	61fb      	str	r3, [r7, #28]
 800a280:	e001      	b.n	800a286 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a282:	2301      	movs	r3, #1
 800a284:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	01db      	lsls	r3, r3, #7
 800a290:	4413      	add	r3, r2
 800a292:	3384      	adds	r3, #132	; 0x84
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	4611      	mov	r1, r2
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	01d2      	lsls	r2, r2, #7
 800a2a0:	440a      	add	r2, r1
 800a2a2:	3284      	adds	r2, #132	; 0x84
 800a2a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	fb02 f303 	mul.w	r3, r2, r3
 800a2b4:	041a      	lsls	r2, r3, #16
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6859      	ldr	r1, [r3, #4]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	1acb      	subs	r3, r1, r3
 800a2c0:	69f9      	ldr	r1, [r7, #28]
 800a2c2:	fb01 f303 	mul.w	r3, r1, r3
 800a2c6:	3307      	adds	r3, #7
 800a2c8:	68f9      	ldr	r1, [r7, #12]
 800a2ca:	6809      	ldr	r1, [r1, #0]
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	01c9      	lsls	r1, r1, #7
 800a2d2:	4401      	add	r1, r0
 800a2d4:	3184      	adds	r1, #132	; 0x84
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	01db      	lsls	r3, r3, #7
 800a2e4:	4413      	add	r3, r2
 800a2e6:	3384      	adds	r3, #132	; 0x84
 800a2e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	01db      	lsls	r3, r3, #7
 800a2f4:	440b      	add	r3, r1
 800a2f6:	3384      	adds	r3, #132	; 0x84
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4b14      	ldr	r3, [pc, #80]	; (800a34c <LTDC_SetConfig+0x330>)
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	01db      	lsls	r3, r3, #7
 800a30a:	4413      	add	r3, r2
 800a30c:	3384      	adds	r3, #132	; 0x84
 800a30e:	461a      	mov	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	01db      	lsls	r3, r3, #7
 800a320:	4413      	add	r3, r2
 800a322:	3384      	adds	r3, #132	; 0x84
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	4611      	mov	r1, r2
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	01d2      	lsls	r2, r2, #7
 800a330:	440a      	add	r2, r1
 800a332:	3284      	adds	r2, #132	; 0x84
 800a334:	f043 0301 	orr.w	r3, r3, #1
 800a338:	6013      	str	r3, [r2, #0]
}
 800a33a:	bf00      	nop
 800a33c:	3724      	adds	r7, #36	; 0x24
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	fffff8f8 	.word	0xfffff8f8
 800a34c:	fffff800 	.word	0xfffff800

0800a350 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a04      	ldr	r2, [pc, #16]	; (800a36c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a35a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a35e:	6013      	str	r3, [r2, #0]
}
 800a360:	bf00      	nop
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	58024800 	.word	0x58024800

0800a370 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a378:	4b29      	ldr	r3, [pc, #164]	; (800a420 <HAL_PWREx_ConfigSupply+0xb0>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0307 	and.w	r3, r3, #7
 800a380:	2b06      	cmp	r3, #6
 800a382:	d00a      	beq.n	800a39a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a384:	4b26      	ldr	r3, [pc, #152]	; (800a420 <HAL_PWREx_ConfigSupply+0xb0>)
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d001      	beq.n	800a396 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e040      	b.n	800a418 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	e03e      	b.n	800a418 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a39a:	4b21      	ldr	r3, [pc, #132]	; (800a420 <HAL_PWREx_ConfigSupply+0xb0>)
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a3a2:	491f      	ldr	r1, [pc, #124]	; (800a420 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a3aa:	f7f9 ff93 	bl	80042d4 <HAL_GetTick>
 800a3ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3b0:	e009      	b.n	800a3c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a3b2:	f7f9 ff8f 	bl	80042d4 <HAL_GetTick>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3c0:	d901      	bls.n	800a3c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e028      	b.n	800a418 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3c6:	4b16      	ldr	r3, [pc, #88]	; (800a420 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3d2:	d1ee      	bne.n	800a3b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b1e      	cmp	r3, #30
 800a3d8:	d008      	beq.n	800a3ec <HAL_PWREx_ConfigSupply+0x7c>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a3de:	d005      	beq.n	800a3ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b1d      	cmp	r3, #29
 800a3e4:	d002      	beq.n	800a3ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b2d      	cmp	r3, #45	; 0x2d
 800a3ea:	d114      	bne.n	800a416 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a3ec:	f7f9 ff72 	bl	80042d4 <HAL_GetTick>
 800a3f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a3f2:	e009      	b.n	800a408 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a3f4:	f7f9 ff6e 	bl	80042d4 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a402:	d901      	bls.n	800a408 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e007      	b.n	800a418 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <HAL_PWREx_ConfigSupply+0xb0>)
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a414:	d1ee      	bne.n	800a3f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	58024800 	.word	0x58024800

0800a424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08c      	sub	sp, #48	; 0x30
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d102      	bne.n	800a438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	f000 bc1f 	b.w	800ac76 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80b3 	beq.w	800a5ac <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a446:	4b95      	ldr	r3, [pc, #596]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a44e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a450:	4b92      	ldr	r3, [pc, #584]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a454:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	2b10      	cmp	r3, #16
 800a45a:	d007      	beq.n	800a46c <HAL_RCC_OscConfig+0x48>
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	2b18      	cmp	r3, #24
 800a460:	d112      	bne.n	800a488 <HAL_RCC_OscConfig+0x64>
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d10d      	bne.n	800a488 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a46c:	4b8b      	ldr	r3, [pc, #556]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8098 	beq.w	800a5aa <HAL_RCC_OscConfig+0x186>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f040 8093 	bne.w	800a5aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e3f6      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a490:	d106      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x7c>
 800a492:	4b82      	ldr	r3, [pc, #520]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a81      	ldr	r2, [pc, #516]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	e058      	b.n	800a552 <HAL_RCC_OscConfig+0x12e>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d112      	bne.n	800a4ce <HAL_RCC_OscConfig+0xaa>
 800a4a8:	4b7c      	ldr	r3, [pc, #496]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a7b      	ldr	r2, [pc, #492]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	4b79      	ldr	r3, [pc, #484]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a78      	ldr	r2, [pc, #480]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	4b76      	ldr	r3, [pc, #472]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a75      	ldr	r2, [pc, #468]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	e041      	b.n	800a552 <HAL_RCC_OscConfig+0x12e>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4d6:	d112      	bne.n	800a4fe <HAL_RCC_OscConfig+0xda>
 800a4d8:	4b70      	ldr	r3, [pc, #448]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a6f      	ldr	r2, [pc, #444]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	4b6d      	ldr	r3, [pc, #436]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a6c      	ldr	r2, [pc, #432]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	4b6a      	ldr	r3, [pc, #424]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a69      	ldr	r2, [pc, #420]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a4f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	e029      	b.n	800a552 <HAL_RCC_OscConfig+0x12e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a506:	d112      	bne.n	800a52e <HAL_RCC_OscConfig+0x10a>
 800a508:	4b64      	ldr	r3, [pc, #400]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a63      	ldr	r2, [pc, #396]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a50e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	4b61      	ldr	r3, [pc, #388]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a60      	ldr	r2, [pc, #384]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a51a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	4b5e      	ldr	r3, [pc, #376]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a5d      	ldr	r2, [pc, #372]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a52a:	6013      	str	r3, [r2, #0]
 800a52c:	e011      	b.n	800a552 <HAL_RCC_OscConfig+0x12e>
 800a52e:	4b5b      	ldr	r3, [pc, #364]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a5a      	ldr	r2, [pc, #360]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	4b58      	ldr	r3, [pc, #352]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a57      	ldr	r2, [pc, #348]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	4b55      	ldr	r3, [pc, #340]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a54      	ldr	r2, [pc, #336]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a54c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d013      	beq.n	800a582 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a55a:	f7f9 febb 	bl	80042d4 <HAL_GetTick>
 800a55e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a560:	e008      	b.n	800a574 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a562:	f7f9 feb7 	bl	80042d4 <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	2b64      	cmp	r3, #100	; 0x64
 800a56e:	d901      	bls.n	800a574 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e380      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a574:	4b49      	ldr	r3, [pc, #292]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0f0      	beq.n	800a562 <HAL_RCC_OscConfig+0x13e>
 800a580:	e014      	b.n	800a5ac <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a582:	f7f9 fea7 	bl	80042d4 <HAL_GetTick>
 800a586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a588:	e008      	b.n	800a59c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a58a:	f7f9 fea3 	bl	80042d4 <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	2b64      	cmp	r3, #100	; 0x64
 800a596:	d901      	bls.n	800a59c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	e36c      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a59c:	4b3f      	ldr	r3, [pc, #252]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1f0      	bne.n	800a58a <HAL_RCC_OscConfig+0x166>
 800a5a8:	e000      	b.n	800a5ac <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 808c 	beq.w	800a6d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5ba:	4b38      	ldr	r3, [pc, #224]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5c4:	4b35      	ldr	r3, [pc, #212]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d007      	beq.n	800a5e0 <HAL_RCC_OscConfig+0x1bc>
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	2b18      	cmp	r3, #24
 800a5d4:	d137      	bne.n	800a646 <HAL_RCC_OscConfig+0x222>
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	f003 0303 	and.w	r3, r3, #3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d132      	bne.n	800a646 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5e0:	4b2e      	ldr	r3, [pc, #184]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x1d4>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e33e      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a5f8:	4b28      	ldr	r3, [pc, #160]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f023 0219 	bic.w	r2, r3, #25
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	4925      	ldr	r1, [pc, #148]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a606:	4313      	orrs	r3, r2
 800a608:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a60a:	f7f9 fe63 	bl	80042d4 <HAL_GetTick>
 800a60e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a610:	e008      	b.n	800a624 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a612:	f7f9 fe5f 	bl	80042d4 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d901      	bls.n	800a624 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e328      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a624:	4b1d      	ldr	r3, [pc, #116]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0304 	and.w	r3, r3, #4
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0f0      	beq.n	800a612 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a630:	4b1a      	ldr	r3, [pc, #104]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	061b      	lsls	r3, r3, #24
 800a63e:	4917      	ldr	r1, [pc, #92]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a640:	4313      	orrs	r3, r2
 800a642:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a644:	e045      	b.n	800a6d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d028      	beq.n	800a6a0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a64e:	4b13      	ldr	r3, [pc, #76]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f023 0219 	bic.w	r2, r3, #25
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	4910      	ldr	r1, [pc, #64]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a65c:	4313      	orrs	r3, r2
 800a65e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a660:	f7f9 fe38 	bl	80042d4 <HAL_GetTick>
 800a664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a666:	e008      	b.n	800a67a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a668:	f7f9 fe34 	bl	80042d4 <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	2b02      	cmp	r3, #2
 800a674:	d901      	bls.n	800a67a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e2fd      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a67a:	4b08      	ldr	r3, [pc, #32]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0f0      	beq.n	800a668 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	061b      	lsls	r3, r3, #24
 800a694:	4901      	ldr	r1, [pc, #4]	; (800a69c <HAL_RCC_OscConfig+0x278>)
 800a696:	4313      	orrs	r3, r2
 800a698:	604b      	str	r3, [r1, #4]
 800a69a:	e01a      	b.n	800a6d2 <HAL_RCC_OscConfig+0x2ae>
 800a69c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6a0:	4b97      	ldr	r3, [pc, #604]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a96      	ldr	r2, [pc, #600]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a6a6:	f023 0301 	bic.w	r3, r3, #1
 800a6aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ac:	f7f9 fe12 	bl	80042d4 <HAL_GetTick>
 800a6b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6b2:	e008      	b.n	800a6c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6b4:	f7f9 fe0e 	bl	80042d4 <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d901      	bls.n	800a6c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e2d7      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6c6:	4b8e      	ldr	r3, [pc, #568]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0304 	and.w	r3, r3, #4
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1f0      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0310 	and.w	r3, r3, #16
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d06a      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6de:	4b88      	ldr	r3, [pc, #544]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6e8:	4b85      	ldr	r3, [pc, #532]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	2b08      	cmp	r3, #8
 800a6f2:	d007      	beq.n	800a704 <HAL_RCC_OscConfig+0x2e0>
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	2b18      	cmp	r3, #24
 800a6f8:	d11b      	bne.n	800a732 <HAL_RCC_OscConfig+0x30e>
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	2b01      	cmp	r3, #1
 800a702:	d116      	bne.n	800a732 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a704:	4b7e      	ldr	r3, [pc, #504]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <HAL_RCC_OscConfig+0x2f8>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	2b80      	cmp	r3, #128	; 0x80
 800a716:	d001      	beq.n	800a71c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e2ac      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a71c:	4b78      	ldr	r3, [pc, #480]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	061b      	lsls	r3, r3, #24
 800a72a:	4975      	ldr	r1, [pc, #468]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a730:	e040      	b.n	800a7b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d023      	beq.n	800a782 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a73a:	4b71      	ldr	r3, [pc, #452]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a70      	ldr	r2, [pc, #448]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a746:	f7f9 fdc5 	bl	80042d4 <HAL_GetTick>
 800a74a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a74c:	e008      	b.n	800a760 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a74e:	f7f9 fdc1 	bl	80042d4 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d901      	bls.n	800a760 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e28a      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a760:	4b67      	ldr	r3, [pc, #412]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0f0      	beq.n	800a74e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a76c:	4b64      	ldr	r3, [pc, #400]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	061b      	lsls	r3, r3, #24
 800a77a:	4961      	ldr	r1, [pc, #388]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60cb      	str	r3, [r1, #12]
 800a780:	e018      	b.n	800a7b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a782:	4b5f      	ldr	r3, [pc, #380]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a5e      	ldr	r2, [pc, #376]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a78c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a78e:	f7f9 fda1 	bl	80042d4 <HAL_GetTick>
 800a792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a794:	e008      	b.n	800a7a8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a796:	f7f9 fd9d 	bl	80042d4 <HAL_GetTick>
 800a79a:	4602      	mov	r2, r0
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d901      	bls.n	800a7a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e266      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7a8:	4b55      	ldr	r3, [pc, #340]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1f0      	bne.n	800a796 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0308 	and.w	r3, r3, #8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d036      	beq.n	800a82e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d019      	beq.n	800a7fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7c8:	4b4d      	ldr	r3, [pc, #308]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a7ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7cc:	4a4c      	ldr	r2, [pc, #304]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d4:	f7f9 fd7e 	bl	80042d4 <HAL_GetTick>
 800a7d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a7da:	e008      	b.n	800a7ee <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7dc:	f7f9 fd7a 	bl	80042d4 <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d901      	bls.n	800a7ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e243      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a7ee:	4b44      	ldr	r3, [pc, #272]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a7f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0f0      	beq.n	800a7dc <HAL_RCC_OscConfig+0x3b8>
 800a7fa:	e018      	b.n	800a82e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7fc:	4b40      	ldr	r3, [pc, #256]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a7fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a800:	4a3f      	ldr	r2, [pc, #252]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a802:	f023 0301 	bic.w	r3, r3, #1
 800a806:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a808:	f7f9 fd64 	bl	80042d4 <HAL_GetTick>
 800a80c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a80e:	e008      	b.n	800a822 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a810:	f7f9 fd60 	bl	80042d4 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d901      	bls.n	800a822 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e229      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a822:	4b37      	ldr	r3, [pc, #220]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1f0      	bne.n	800a810 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d036      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d019      	beq.n	800a876 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a842:	4b2f      	ldr	r3, [pc, #188]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a2e      	ldr	r2, [pc, #184]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a84c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a84e:	f7f9 fd41 	bl	80042d4 <HAL_GetTick>
 800a852:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a854:	e008      	b.n	800a868 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a856:	f7f9 fd3d 	bl	80042d4 <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	2b02      	cmp	r3, #2
 800a862:	d901      	bls.n	800a868 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e206      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a868:	4b25      	ldr	r3, [pc, #148]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a870:	2b00      	cmp	r3, #0
 800a872:	d0f0      	beq.n	800a856 <HAL_RCC_OscConfig+0x432>
 800a874:	e018      	b.n	800a8a8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a876:	4b22      	ldr	r3, [pc, #136]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a21      	ldr	r2, [pc, #132]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a87c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a880:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a882:	f7f9 fd27 	bl	80042d4 <HAL_GetTick>
 800a886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a888:	e008      	b.n	800a89c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a88a:	f7f9 fd23 	bl	80042d4 <HAL_GetTick>
 800a88e:	4602      	mov	r2, r0
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	2b02      	cmp	r3, #2
 800a896:	d901      	bls.n	800a89c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e1ec      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a89c:	4b18      	ldr	r3, [pc, #96]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1f0      	bne.n	800a88a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 80af 	beq.w	800aa14 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8b6:	4b13      	ldr	r3, [pc, #76]	; (800a904 <HAL_RCC_OscConfig+0x4e0>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a12      	ldr	r2, [pc, #72]	; (800a904 <HAL_RCC_OscConfig+0x4e0>)
 800a8bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8c2:	f7f9 fd07 	bl	80042d4 <HAL_GetTick>
 800a8c6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8c8:	e008      	b.n	800a8dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8ca:	f7f9 fd03 	bl	80042d4 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	2b64      	cmp	r3, #100	; 0x64
 800a8d6:	d901      	bls.n	800a8dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e1cc      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8dc:	4b09      	ldr	r3, [pc, #36]	; (800a904 <HAL_RCC_OscConfig+0x4e0>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d0f0      	beq.n	800a8ca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d10b      	bne.n	800a908 <HAL_RCC_OscConfig+0x4e4>
 800a8f0:	4b03      	ldr	r3, [pc, #12]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f4:	4a02      	ldr	r2, [pc, #8]	; (800a900 <HAL_RCC_OscConfig+0x4dc>)
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	6713      	str	r3, [r2, #112]	; 0x70
 800a8fc:	e05b      	b.n	800a9b6 <HAL_RCC_OscConfig+0x592>
 800a8fe:	bf00      	nop
 800a900:	58024400 	.word	0x58024400
 800a904:	58024800 	.word	0x58024800
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d112      	bne.n	800a936 <HAL_RCC_OscConfig+0x512>
 800a910:	4b9d      	ldr	r3, [pc, #628]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a914:	4a9c      	ldr	r2, [pc, #624]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a916:	f023 0301 	bic.w	r3, r3, #1
 800a91a:	6713      	str	r3, [r2, #112]	; 0x70
 800a91c:	4b9a      	ldr	r3, [pc, #616]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a920:	4a99      	ldr	r2, [pc, #612]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a926:	6713      	str	r3, [r2, #112]	; 0x70
 800a928:	4b97      	ldr	r3, [pc, #604]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92c:	4a96      	ldr	r2, [pc, #600]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a92e:	f023 0304 	bic.w	r3, r3, #4
 800a932:	6713      	str	r3, [r2, #112]	; 0x70
 800a934:	e03f      	b.n	800a9b6 <HAL_RCC_OscConfig+0x592>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	d112      	bne.n	800a964 <HAL_RCC_OscConfig+0x540>
 800a93e:	4b92      	ldr	r3, [pc, #584]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a942:	4a91      	ldr	r2, [pc, #580]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a944:	f043 0304 	orr.w	r3, r3, #4
 800a948:	6713      	str	r3, [r2, #112]	; 0x70
 800a94a:	4b8f      	ldr	r3, [pc, #572]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94e:	4a8e      	ldr	r2, [pc, #568]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a954:	6713      	str	r3, [r2, #112]	; 0x70
 800a956:	4b8c      	ldr	r3, [pc, #560]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95a:	4a8b      	ldr	r2, [pc, #556]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a95c:	f043 0301 	orr.w	r3, r3, #1
 800a960:	6713      	str	r3, [r2, #112]	; 0x70
 800a962:	e028      	b.n	800a9b6 <HAL_RCC_OscConfig+0x592>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	2b85      	cmp	r3, #133	; 0x85
 800a96a:	d112      	bne.n	800a992 <HAL_RCC_OscConfig+0x56e>
 800a96c:	4b86      	ldr	r3, [pc, #536]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a970:	4a85      	ldr	r2, [pc, #532]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a972:	f043 0304 	orr.w	r3, r3, #4
 800a976:	6713      	str	r3, [r2, #112]	; 0x70
 800a978:	4b83      	ldr	r3, [pc, #524]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97c:	4a82      	ldr	r2, [pc, #520]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a97e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a982:	6713      	str	r3, [r2, #112]	; 0x70
 800a984:	4b80      	ldr	r3, [pc, #512]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a988:	4a7f      	ldr	r2, [pc, #508]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	6713      	str	r3, [r2, #112]	; 0x70
 800a990:	e011      	b.n	800a9b6 <HAL_RCC_OscConfig+0x592>
 800a992:	4b7d      	ldr	r3, [pc, #500]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a996:	4a7c      	ldr	r2, [pc, #496]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a998:	f023 0301 	bic.w	r3, r3, #1
 800a99c:	6713      	str	r3, [r2, #112]	; 0x70
 800a99e:	4b7a      	ldr	r3, [pc, #488]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a2:	4a79      	ldr	r2, [pc, #484]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a9a4:	f023 0304 	bic.w	r3, r3, #4
 800a9a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a9aa:	4b77      	ldr	r3, [pc, #476]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ae:	4a76      	ldr	r2, [pc, #472]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a9b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d015      	beq.n	800a9ea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9be:	f7f9 fc89 	bl	80042d4 <HAL_GetTick>
 800a9c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9c4:	e00a      	b.n	800a9dc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9c6:	f7f9 fc85 	bl	80042d4 <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d901      	bls.n	800a9dc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e14c      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9dc:	4b6a      	ldr	r3, [pc, #424]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800a9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e0:	f003 0302 	and.w	r3, r3, #2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0ee      	beq.n	800a9c6 <HAL_RCC_OscConfig+0x5a2>
 800a9e8:	e014      	b.n	800aa14 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9ea:	f7f9 fc73 	bl	80042d4 <HAL_GetTick>
 800a9ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9f0:	e00a      	b.n	800aa08 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9f2:	f7f9 fc6f 	bl	80042d4 <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e136      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa08:	4b5f      	ldr	r3, [pc, #380]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aa0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1ee      	bne.n	800a9f2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 812b 	beq.w	800ac74 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa1e:	4b5a      	ldr	r3, [pc, #360]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa26:	2b18      	cmp	r3, #24
 800aa28:	f000 80bb 	beq.w	800aba2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	f040 8095 	bne.w	800ab60 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa36:	4b54      	ldr	r3, [pc, #336]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a53      	ldr	r2, [pc, #332]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aa3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa42:	f7f9 fc47 	bl	80042d4 <HAL_GetTick>
 800aa46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa48:	e008      	b.n	800aa5c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa4a:	f7f9 fc43 	bl	80042d4 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d901      	bls.n	800aa5c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e10c      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa5c:	4b4a      	ldr	r3, [pc, #296]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1f0      	bne.n	800aa4a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa68:	4b47      	ldr	r3, [pc, #284]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aa6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa6c:	4b47      	ldr	r3, [pc, #284]	; (800ab8c <HAL_RCC_OscConfig+0x768>)
 800aa6e:	4013      	ands	r3, r2
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aa78:	0112      	lsls	r2, r2, #4
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	4942      	ldr	r1, [pc, #264]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	628b      	str	r3, [r1, #40]	; 0x28
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	3b01      	subs	r3, #1
 800aa88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa90:	3b01      	subs	r3, #1
 800aa92:	025b      	lsls	r3, r3, #9
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	431a      	orrs	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	041b      	lsls	r3, r3, #16
 800aaa0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	061b      	lsls	r3, r3, #24
 800aaae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aab2:	4935      	ldr	r1, [pc, #212]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aab8:	4b33      	ldr	r3, [pc, #204]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	4a32      	ldr	r2, [pc, #200]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aac4:	4b30      	ldr	r3, [pc, #192]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aac8:	4b31      	ldr	r3, [pc, #196]	; (800ab90 <HAL_RCC_OscConfig+0x76c>)
 800aaca:	4013      	ands	r3, r2
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aad0:	00d2      	lsls	r2, r2, #3
 800aad2:	492d      	ldr	r1, [pc, #180]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aad8:	4b2b      	ldr	r3, [pc, #172]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	f023 020c 	bic.w	r2, r3, #12
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	4928      	ldr	r1, [pc, #160]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aaea:	4b27      	ldr	r3, [pc, #156]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaee:	f023 0202 	bic.w	r2, r3, #2
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf6:	4924      	ldr	r1, [pc, #144]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aafc:	4b22      	ldr	r3, [pc, #136]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	4a21      	ldr	r2, [pc, #132]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab08:	4b1f      	ldr	r3, [pc, #124]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	4a1e      	ldr	r2, [pc, #120]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ab14:	4b1c      	ldr	r3, [pc, #112]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	4a1b      	ldr	r2, [pc, #108]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ab20:	4b19      	ldr	r3, [pc, #100]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab24:	4a18      	ldr	r2, [pc, #96]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab2c:	4b16      	ldr	r3, [pc, #88]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a15      	ldr	r2, [pc, #84]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab38:	f7f9 fbcc 	bl	80042d4 <HAL_GetTick>
 800ab3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab3e:	e008      	b.n	800ab52 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab40:	f7f9 fbc8 	bl	80042d4 <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e091      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab52:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0f0      	beq.n	800ab40 <HAL_RCC_OscConfig+0x71c>
 800ab5e:	e089      	b.n	800ac74 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab60:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <HAL_RCC_OscConfig+0x764>)
 800ab66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab6c:	f7f9 fbb2 	bl	80042d4 <HAL_GetTick>
 800ab70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab72:	e00f      	b.n	800ab94 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab74:	f7f9 fbae 	bl	80042d4 <HAL_GetTick>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d908      	bls.n	800ab94 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e077      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
 800ab86:	bf00      	nop
 800ab88:	58024400 	.word	0x58024400
 800ab8c:	fffffc0c 	.word	0xfffffc0c
 800ab90:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab94:	4b3a      	ldr	r3, [pc, #232]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e9      	bne.n	800ab74 <HAL_RCC_OscConfig+0x750>
 800aba0:	e068      	b.n	800ac74 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aba2:	4b37      	ldr	r3, [pc, #220]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800aba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aba8:	4b35      	ldr	r3, [pc, #212]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800abaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abac:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d031      	beq.n	800ac1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f003 0203 	and.w	r2, r3, #3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d12a      	bne.n	800ac1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	091b      	lsrs	r3, r3, #4
 800abc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d122      	bne.n	800ac1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abde:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d11a      	bne.n	800ac1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	0a5b      	lsrs	r3, r3, #9
 800abe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d111      	bne.n	800ac1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d108      	bne.n	800ac1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	0e1b      	lsrs	r3, r3, #24
 800ac0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d001      	beq.n	800ac1e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e02b      	b.n	800ac76 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ac1e:	4b18      	ldr	r3, [pc, #96]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ac20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac22:	08db      	lsrs	r3, r3, #3
 800ac24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac28:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d01f      	beq.n	800ac74 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ac34:	4b12      	ldr	r3, [pc, #72]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	4a11      	ldr	r2, [pc, #68]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ac3a:	f023 0301 	bic.w	r3, r3, #1
 800ac3e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac40:	f7f9 fb48 	bl	80042d4 <HAL_GetTick>
 800ac44:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ac46:	bf00      	nop
 800ac48:	f7f9 fb44 	bl	80042d4 <HAL_GetTick>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d0f9      	beq.n	800ac48 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac54:	4b0a      	ldr	r3, [pc, #40]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ac56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac58:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <HAL_RCC_OscConfig+0x860>)
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac60:	00d2      	lsls	r2, r2, #3
 800ac62:	4907      	ldr	r1, [pc, #28]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	4a04      	ldr	r2, [pc, #16]	; (800ac80 <HAL_RCC_OscConfig+0x85c>)
 800ac6e:	f043 0301 	orr.w	r3, r3, #1
 800ac72:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3730      	adds	r7, #48	; 0x30
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	58024400 	.word	0x58024400
 800ac84:	ffff0007 	.word	0xffff0007

0800ac88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e19c      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac9c:	4b8a      	ldr	r3, [pc, #552]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 030f 	and.w	r3, r3, #15
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d910      	bls.n	800accc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acaa:	4b87      	ldr	r3, [pc, #540]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f023 020f 	bic.w	r2, r3, #15
 800acb2:	4985      	ldr	r1, [pc, #532]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acba:	4b83      	ldr	r3, [pc, #524]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d001      	beq.n	800accc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e184      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d010      	beq.n	800acfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	4b7b      	ldr	r3, [pc, #492]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d908      	bls.n	800acfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ace8:	4b78      	ldr	r3, [pc, #480]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	4975      	ldr	r1, [pc, #468]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0308 	and.w	r3, r3, #8
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d010      	beq.n	800ad28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	695a      	ldr	r2, [r3, #20]
 800ad0a:	4b70      	ldr	r3, [pc, #448]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d908      	bls.n	800ad28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad16:	4b6d      	ldr	r3, [pc, #436]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	695b      	ldr	r3, [r3, #20]
 800ad22:	496a      	ldr	r1, [pc, #424]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0310 	and.w	r3, r3, #16
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d010      	beq.n	800ad56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	699a      	ldr	r2, [r3, #24]
 800ad38:	4b64      	ldr	r3, [pc, #400]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d908      	bls.n	800ad56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad44:	4b61      	ldr	r3, [pc, #388]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	495e      	ldr	r1, [pc, #376]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0320 	and.w	r3, r3, #32
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d010      	beq.n	800ad84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	69da      	ldr	r2, [r3, #28]
 800ad66:	4b59      	ldr	r3, [pc, #356]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d908      	bls.n	800ad84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad72:	4b56      	ldr	r3, [pc, #344]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	4953      	ldr	r1, [pc, #332]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad80:	4313      	orrs	r3, r2
 800ad82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d010      	beq.n	800adb2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	4b4d      	ldr	r3, [pc, #308]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f003 030f 	and.w	r3, r3, #15
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d908      	bls.n	800adb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ada0:	4b4a      	ldr	r3, [pc, #296]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	f023 020f 	bic.w	r2, r3, #15
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	4947      	ldr	r1, [pc, #284]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d055      	beq.n	800ae6a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800adbe:	4b43      	ldr	r3, [pc, #268]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	4940      	ldr	r1, [pc, #256]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d107      	bne.n	800ade8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800add8:	4b3c      	ldr	r3, [pc, #240]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d121      	bne.n	800ae28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e0f6      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	2b03      	cmp	r3, #3
 800adee:	d107      	bne.n	800ae00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adf0:	4b36      	ldr	r3, [pc, #216]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d115      	bne.n	800ae28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e0ea      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d107      	bne.n	800ae18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae08:	4b30      	ldr	r3, [pc, #192]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d109      	bne.n	800ae28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e0de      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae18:	4b2c      	ldr	r3, [pc, #176]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0304 	and.w	r3, r3, #4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e0d6      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae28:	4b28      	ldr	r3, [pc, #160]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f023 0207 	bic.w	r2, r3, #7
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	4925      	ldr	r1, [pc, #148]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae3a:	f7f9 fa4b 	bl	80042d4 <HAL_GetTick>
 800ae3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae40:	e00a      	b.n	800ae58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae42:	f7f9 fa47 	bl	80042d4 <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d901      	bls.n	800ae58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e0be      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae58:	4b1c      	ldr	r3, [pc, #112]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d1eb      	bne.n	800ae42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d010      	beq.n	800ae98 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68da      	ldr	r2, [r3, #12]
 800ae7a:	4b14      	ldr	r3, [pc, #80]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	f003 030f 	and.w	r3, r3, #15
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d208      	bcs.n	800ae98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae86:	4b11      	ldr	r3, [pc, #68]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	f023 020f 	bic.w	r2, r3, #15
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	490e      	ldr	r1, [pc, #56]	; (800aecc <HAL_RCC_ClockConfig+0x244>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 030f 	and.w	r3, r3, #15
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d214      	bcs.n	800aed0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aea6:	4b08      	ldr	r3, [pc, #32]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f023 020f 	bic.w	r2, r3, #15
 800aeae:	4906      	ldr	r1, [pc, #24]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeb6:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <HAL_RCC_ClockConfig+0x240>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 030f 	and.w	r3, r3, #15
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d005      	beq.n	800aed0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e086      	b.n	800afd6 <HAL_RCC_ClockConfig+0x34e>
 800aec8:	52002000 	.word	0x52002000
 800aecc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0304 	and.w	r3, r3, #4
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d010      	beq.n	800aefe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	691a      	ldr	r2, [r3, #16]
 800aee0:	4b3f      	ldr	r3, [pc, #252]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d208      	bcs.n	800aefe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aeec:	4b3c      	ldr	r3, [pc, #240]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	4939      	ldr	r1, [pc, #228]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0308 	and.w	r3, r3, #8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d010      	beq.n	800af2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	695a      	ldr	r2, [r3, #20]
 800af0e:	4b34      	ldr	r3, [pc, #208]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af16:	429a      	cmp	r2, r3
 800af18:	d208      	bcs.n	800af2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af1a:	4b31      	ldr	r3, [pc, #196]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	492e      	ldr	r1, [pc, #184]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af28:	4313      	orrs	r3, r2
 800af2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0310 	and.w	r3, r3, #16
 800af34:	2b00      	cmp	r3, #0
 800af36:	d010      	beq.n	800af5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	4b28      	ldr	r3, [pc, #160]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af44:	429a      	cmp	r2, r3
 800af46:	d208      	bcs.n	800af5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af48:	4b25      	ldr	r3, [pc, #148]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af4a:	69db      	ldr	r3, [r3, #28]
 800af4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	4922      	ldr	r1, [pc, #136]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af56:	4313      	orrs	r3, r2
 800af58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	d010      	beq.n	800af88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	69da      	ldr	r2, [r3, #28]
 800af6a:	4b1d      	ldr	r3, [pc, #116]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af72:	429a      	cmp	r2, r3
 800af74:	d208      	bcs.n	800af88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af76:	4b1a      	ldr	r3, [pc, #104]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	4917      	ldr	r1, [pc, #92]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af84:	4313      	orrs	r3, r2
 800af86:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800af88:	f000 f89e 	bl	800b0c8 <HAL_RCC_GetSysClockFreq>
 800af8c:	4602      	mov	r2, r0
 800af8e:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	0a1b      	lsrs	r3, r3, #8
 800af94:	f003 030f 	and.w	r3, r3, #15
 800af98:	4912      	ldr	r1, [pc, #72]	; (800afe4 <HAL_RCC_ClockConfig+0x35c>)
 800af9a:	5ccb      	ldrb	r3, [r1, r3]
 800af9c:	f003 031f 	and.w	r3, r3, #31
 800afa0:	fa22 f303 	lsr.w	r3, r2, r3
 800afa4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800afa6:	4b0e      	ldr	r3, [pc, #56]	; (800afe0 <HAL_RCC_ClockConfig+0x358>)
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <HAL_RCC_ClockConfig+0x35c>)
 800afb0:	5cd3      	ldrb	r3, [r2, r3]
 800afb2:	f003 031f 	and.w	r3, r3, #31
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	fa22 f303 	lsr.w	r3, r2, r3
 800afbc:	4a0a      	ldr	r2, [pc, #40]	; (800afe8 <HAL_RCC_ClockConfig+0x360>)
 800afbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afc0:	4a0a      	ldr	r2, [pc, #40]	; (800afec <HAL_RCC_ClockConfig+0x364>)
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800afc6:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <HAL_RCC_ClockConfig+0x368>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f9 f938 	bl	8004240 <HAL_InitTick>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	58024400 	.word	0x58024400
 800afe4:	08010348 	.word	0x08010348
 800afe8:	24000048 	.word	0x24000048
 800afec:	24000044 	.word	0x24000044
 800aff0:	2400004c 	.word	0x2400004c

0800aff4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08c      	sub	sp, #48	; 0x30
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d12a      	bne.n	800b05c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b006:	4b2d      	ldr	r3, [pc, #180]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b008:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b00c:	4a2b      	ldr	r2, [pc, #172]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b00e:	f043 0301 	orr.w	r3, r3, #1
 800b012:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b016:	4b29      	ldr	r3, [pc, #164]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b018:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	61bb      	str	r3, [r7, #24]
 800b022:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b02a:	2302      	movs	r3, #2
 800b02c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b02e:	2303      	movs	r3, #3
 800b030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b032:	2300      	movs	r3, #0
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b036:	2300      	movs	r3, #0
 800b038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b03a:	f107 031c 	add.w	r3, r7, #28
 800b03e:	4619      	mov	r1, r3
 800b040:	481f      	ldr	r0, [pc, #124]	; (800b0c0 <HAL_RCC_MCOConfig+0xcc>)
 800b042:	f7fd fcc1 	bl	80089c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b046:	4b1d      	ldr	r3, [pc, #116]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	430b      	orrs	r3, r1
 800b054:	4919      	ldr	r1, [pc, #100]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b056:	4313      	orrs	r3, r2
 800b058:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b05a:	e02a      	b.n	800b0b2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b05c:	4b17      	ldr	r3, [pc, #92]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b05e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b062:	4a16      	ldr	r2, [pc, #88]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b064:	f043 0304 	orr.w	r3, r3, #4
 800b068:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b06c:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b06e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b072:	f003 0304 	and.w	r3, r3, #4
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b07a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b07e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b080:	2302      	movs	r3, #2
 800b082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b084:	2303      	movs	r3, #3
 800b086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b088:	2300      	movs	r3, #0
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b08c:	2300      	movs	r3, #0
 800b08e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b090:	f107 031c 	add.w	r3, r7, #28
 800b094:	4619      	mov	r1, r3
 800b096:	480b      	ldr	r0, [pc, #44]	; (800b0c4 <HAL_RCC_MCOConfig+0xd0>)
 800b098:	f7fd fc96 	bl	80089c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	01d9      	lsls	r1, r3, #7
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	4903      	ldr	r1, [pc, #12]	; (800b0bc <HAL_RCC_MCOConfig+0xc8>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	610b      	str	r3, [r1, #16]
}
 800b0b2:	bf00      	nop
 800b0b4:	3730      	adds	r7, #48	; 0x30
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	58024400 	.word	0x58024400
 800b0c0:	58020000 	.word	0x58020000
 800b0c4:	58020800 	.word	0x58020800

0800b0c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b089      	sub	sp, #36	; 0x24
 800b0cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0ce:	4bb3      	ldr	r3, [pc, #716]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0d6:	2b18      	cmp	r3, #24
 800b0d8:	f200 8155 	bhi.w	800b386 <HAL_RCC_GetSysClockFreq+0x2be>
 800b0dc:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e2:	bf00      	nop
 800b0e4:	0800b149 	.word	0x0800b149
 800b0e8:	0800b387 	.word	0x0800b387
 800b0ec:	0800b387 	.word	0x0800b387
 800b0f0:	0800b387 	.word	0x0800b387
 800b0f4:	0800b387 	.word	0x0800b387
 800b0f8:	0800b387 	.word	0x0800b387
 800b0fc:	0800b387 	.word	0x0800b387
 800b100:	0800b387 	.word	0x0800b387
 800b104:	0800b16f 	.word	0x0800b16f
 800b108:	0800b387 	.word	0x0800b387
 800b10c:	0800b387 	.word	0x0800b387
 800b110:	0800b387 	.word	0x0800b387
 800b114:	0800b387 	.word	0x0800b387
 800b118:	0800b387 	.word	0x0800b387
 800b11c:	0800b387 	.word	0x0800b387
 800b120:	0800b387 	.word	0x0800b387
 800b124:	0800b175 	.word	0x0800b175
 800b128:	0800b387 	.word	0x0800b387
 800b12c:	0800b387 	.word	0x0800b387
 800b130:	0800b387 	.word	0x0800b387
 800b134:	0800b387 	.word	0x0800b387
 800b138:	0800b387 	.word	0x0800b387
 800b13c:	0800b387 	.word	0x0800b387
 800b140:	0800b387 	.word	0x0800b387
 800b144:	0800b17b 	.word	0x0800b17b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b148:	4b94      	ldr	r3, [pc, #592]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b00      	cmp	r3, #0
 800b152:	d009      	beq.n	800b168 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b154:	4b91      	ldr	r3, [pc, #580]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	08db      	lsrs	r3, r3, #3
 800b15a:	f003 0303 	and.w	r3, r3, #3
 800b15e:	4a90      	ldr	r2, [pc, #576]	; (800b3a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b160:	fa22 f303 	lsr.w	r3, r2, r3
 800b164:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b166:	e111      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b168:	4b8d      	ldr	r3, [pc, #564]	; (800b3a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b16a:	61bb      	str	r3, [r7, #24]
      break;
 800b16c:	e10e      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b16e:	4b8d      	ldr	r3, [pc, #564]	; (800b3a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b170:	61bb      	str	r3, [r7, #24]
      break;
 800b172:	e10b      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b174:	4b8c      	ldr	r3, [pc, #560]	; (800b3a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b176:	61bb      	str	r3, [r7, #24]
      break;
 800b178:	e108      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b17a:	4b88      	ldr	r3, [pc, #544]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17e:	f003 0303 	and.w	r3, r3, #3
 800b182:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b184:	4b85      	ldr	r3, [pc, #532]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b188:	091b      	lsrs	r3, r3, #4
 800b18a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b18e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b190:	4b82      	ldr	r3, [pc, #520]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b19a:	4b80      	ldr	r3, [pc, #512]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19e:	08db      	lsrs	r3, r3, #3
 800b1a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	fb02 f303 	mul.w	r3, r2, r3
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 80e1 	beq.w	800b380 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	f000 8083 	beq.w	800b2cc <HAL_RCC_GetSysClockFreq+0x204>
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	f200 80a1 	bhi.w	800b310 <HAL_RCC_GetSysClockFreq+0x248>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <HAL_RCC_GetSysClockFreq+0x114>
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d056      	beq.n	800b288 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b1da:	e099      	b.n	800b310 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1dc:	4b6f      	ldr	r3, [pc, #444]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 0320 	and.w	r3, r3, #32
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d02d      	beq.n	800b244 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1e8:	4b6c      	ldr	r3, [pc, #432]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	08db      	lsrs	r3, r3, #3
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	4a6b      	ldr	r2, [pc, #428]	; (800b3a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b1f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	ee07 3a90 	vmov	s15, r3
 800b200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b212:	4b62      	ldr	r3, [pc, #392]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21a:	ee07 3a90 	vmov	s15, r3
 800b21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b222:	ed97 6a02 	vldr	s12, [r7, #8]
 800b226:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800b22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b242:	e087      	b.n	800b354 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b3b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b256:	4b51      	ldr	r3, [pc, #324]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b266:	ed97 6a02 	vldr	s12, [r7, #8]
 800b26a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800b26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b286:	e065      	b.n	800b354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b292:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b3b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b29a:	4b40      	ldr	r3, [pc, #256]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a2:	ee07 3a90 	vmov	s15, r3
 800b2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2ca:	e043      	b.n	800b354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b3b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2de:	4b2f      	ldr	r3, [pc, #188]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b30a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b30e:	e021      	b.n	800b354 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b3b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b322:	4b1e      	ldr	r3, [pc, #120]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b332:	ed97 6a02 	vldr	s12, [r7, #8]
 800b336:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b3ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800b33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b352:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b354:	4b11      	ldr	r3, [pc, #68]	; (800b39c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b358:	0a5b      	lsrs	r3, r3, #9
 800b35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b35e:	3301      	adds	r3, #1
 800b360:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	ee07 3a90 	vmov	s15, r3
 800b368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b36c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b378:	ee17 3a90 	vmov	r3, s15
 800b37c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b37e:	e005      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	61bb      	str	r3, [r7, #24]
      break;
 800b384:	e002      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b386:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b388:	61bb      	str	r3, [r7, #24]
      break;
 800b38a:	bf00      	nop
  }

  return sysclockfreq;
 800b38c:	69bb      	ldr	r3, [r7, #24]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3724      	adds	r7, #36	; 0x24
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	03d09000 	.word	0x03d09000
 800b3a4:	003d0900 	.word	0x003d0900
 800b3a8:	016e3600 	.word	0x016e3600
 800b3ac:	46000000 	.word	0x46000000
 800b3b0:	4c742400 	.word	0x4c742400
 800b3b4:	4a742400 	.word	0x4a742400
 800b3b8:	4bb71b00 	.word	0x4bb71b00

0800b3bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b3c2:	f7ff fe81 	bl	800b0c8 <HAL_RCC_GetSysClockFreq>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4b10      	ldr	r3, [pc, #64]	; (800b40c <HAL_RCC_GetHCLKFreq+0x50>)
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	0a1b      	lsrs	r3, r3, #8
 800b3ce:	f003 030f 	and.w	r3, r3, #15
 800b3d2:	490f      	ldr	r1, [pc, #60]	; (800b410 <HAL_RCC_GetHCLKFreq+0x54>)
 800b3d4:	5ccb      	ldrb	r3, [r1, r3]
 800b3d6:	f003 031f 	and.w	r3, r3, #31
 800b3da:	fa22 f303 	lsr.w	r3, r2, r3
 800b3de:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <HAL_RCC_GetHCLKFreq+0x50>)
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	f003 030f 	and.w	r3, r3, #15
 800b3e8:	4a09      	ldr	r2, [pc, #36]	; (800b410 <HAL_RCC_GetHCLKFreq+0x54>)
 800b3ea:	5cd3      	ldrb	r3, [r2, r3]
 800b3ec:	f003 031f 	and.w	r3, r3, #31
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3f6:	4a07      	ldr	r2, [pc, #28]	; (800b414 <HAL_RCC_GetHCLKFreq+0x58>)
 800b3f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b3fa:	4a07      	ldr	r2, [pc, #28]	; (800b418 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b400:	4b04      	ldr	r3, [pc, #16]	; (800b414 <HAL_RCC_GetHCLKFreq+0x58>)
 800b402:	681b      	ldr	r3, [r3, #0]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	58024400 	.word	0x58024400
 800b410:	08010348 	.word	0x08010348
 800b414:	24000048 	.word	0x24000048
 800b418:	24000044 	.word	0x24000044

0800b41c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b420:	f7ff ffcc 	bl	800b3bc <HAL_RCC_GetHCLKFreq>
 800b424:	4602      	mov	r2, r0
 800b426:	4b06      	ldr	r3, [pc, #24]	; (800b440 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	091b      	lsrs	r3, r3, #4
 800b42c:	f003 0307 	and.w	r3, r3, #7
 800b430:	4904      	ldr	r1, [pc, #16]	; (800b444 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b432:	5ccb      	ldrb	r3, [r1, r3]
 800b434:	f003 031f 	and.w	r3, r3, #31
 800b438:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	58024400 	.word	0x58024400
 800b444:	08010348 	.word	0x08010348

0800b448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b44c:	f7ff ffb6 	bl	800b3bc <HAL_RCC_GetHCLKFreq>
 800b450:	4602      	mov	r2, r0
 800b452:	4b06      	ldr	r3, [pc, #24]	; (800b46c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b454:	69db      	ldr	r3, [r3, #28]
 800b456:	0a1b      	lsrs	r3, r3, #8
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	4904      	ldr	r1, [pc, #16]	; (800b470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b45e:	5ccb      	ldrb	r3, [r1, r3]
 800b460:	f003 031f 	and.w	r3, r3, #31
 800b464:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b468:	4618      	mov	r0, r3
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	58024400 	.word	0x58024400
 800b470:	08010348 	.word	0x08010348

0800b474 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b478:	b0c8      	sub	sp, #288	; 0x120
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b480:	2300      	movs	r3, #0
 800b482:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b486:	2300      	movs	r3, #0
 800b488:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b498:	2500      	movs	r5, #0
 800b49a:	ea54 0305 	orrs.w	r3, r4, r5
 800b49e:	d049      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b4a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4aa:	d02f      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b4ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4b0:	d828      	bhi.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4b6:	d01a      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b4b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4bc:	d822      	bhi.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b4c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4c6:	d007      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b4c8:	e01c      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ca:	4ba7      	ldr	r3, [pc, #668]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ce:	4aa6      	ldr	r2, [pc, #664]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4d6:	e01a      	b.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4dc:	3308      	adds	r3, #8
 800b4de:	2102      	movs	r1, #2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 fc43 	bl	800cd6c <RCCEx_PLL2_Config>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4ec:	e00f      	b.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4f2:	3328      	adds	r3, #40	; 0x28
 800b4f4:	2102      	movs	r1, #2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f001 fcea 	bl	800ced0 <RCCEx_PLL3_Config>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b502:	e004      	b.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b50a:	e000      	b.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b50c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b50e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10a      	bne.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b516:	4b94      	ldr	r3, [pc, #592]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b51a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b524:	4a90      	ldr	r2, [pc, #576]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b526:	430b      	orrs	r3, r1
 800b528:	6513      	str	r3, [r2, #80]	; 0x50
 800b52a:	e003      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b52c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b530:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b540:	f04f 0900 	mov.w	r9, #0
 800b544:	ea58 0309 	orrs.w	r3, r8, r9
 800b548:	d047      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b550:	2b04      	cmp	r3, #4
 800b552:	d82a      	bhi.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b554:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55a:	bf00      	nop
 800b55c:	0800b571 	.word	0x0800b571
 800b560:	0800b57f 	.word	0x0800b57f
 800b564:	0800b595 	.word	0x0800b595
 800b568:	0800b5b3 	.word	0x0800b5b3
 800b56c:	0800b5b3 	.word	0x0800b5b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b570:	4b7d      	ldr	r3, [pc, #500]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	4a7c      	ldr	r2, [pc, #496]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b57a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b57c:	e01a      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b582:	3308      	adds	r3, #8
 800b584:	2100      	movs	r1, #0
 800b586:	4618      	mov	r0, r3
 800b588:	f001 fbf0 	bl	800cd6c <RCCEx_PLL2_Config>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b592:	e00f      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b598:	3328      	adds	r3, #40	; 0x28
 800b59a:	2100      	movs	r1, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 fc97 	bl	800ced0 <RCCEx_PLL3_Config>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5a8:	e004      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b5b0:	e000      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b5b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10a      	bne.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5bc:	4b6a      	ldr	r3, [pc, #424]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c0:	f023 0107 	bic.w	r1, r3, #7
 800b5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ca:	4a67      	ldr	r2, [pc, #412]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5cc:	430b      	orrs	r3, r1
 800b5ce:	6513      	str	r3, [r2, #80]	; 0x50
 800b5d0:	e003      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b5d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b5da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b5e6:	f04f 0b00 	mov.w	fp, #0
 800b5ea:	ea5a 030b 	orrs.w	r3, sl, fp
 800b5ee:	d054      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b5fa:	d036      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b5fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b600:	d82f      	bhi.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b606:	d032      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60c:	d829      	bhi.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b60e:	2bc0      	cmp	r3, #192	; 0xc0
 800b610:	d02f      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b612:	2bc0      	cmp	r3, #192	; 0xc0
 800b614:	d825      	bhi.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b616:	2b80      	cmp	r3, #128	; 0x80
 800b618:	d018      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b61a:	2b80      	cmp	r3, #128	; 0x80
 800b61c:	d821      	bhi.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b622:	2b40      	cmp	r3, #64	; 0x40
 800b624:	d007      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b626:	e01c      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b628:	4b4f      	ldr	r3, [pc, #316]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62c:	4a4e      	ldr	r2, [pc, #312]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b62e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b634:	e01e      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b63a:	3308      	adds	r3, #8
 800b63c:	2100      	movs	r1, #0
 800b63e:	4618      	mov	r0, r3
 800b640:	f001 fb94 	bl	800cd6c <RCCEx_PLL2_Config>
 800b644:	4603      	mov	r3, r0
 800b646:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b64a:	e013      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b650:	3328      	adds	r3, #40	; 0x28
 800b652:	2100      	movs	r1, #0
 800b654:	4618      	mov	r0, r3
 800b656:	f001 fc3b 	bl	800ced0 <RCCEx_PLL3_Config>
 800b65a:	4603      	mov	r3, r0
 800b65c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b660:	e008      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b668:	e004      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b66a:	bf00      	nop
 800b66c:	e002      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b66e:	bf00      	nop
 800b670:	e000      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b67c:	4b3a      	ldr	r3, [pc, #232]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b680:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b68a:	4a37      	ldr	r2, [pc, #220]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b68c:	430b      	orrs	r3, r1
 800b68e:	6513      	str	r3, [r2, #80]	; 0x50
 800b690:	e003      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b692:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b696:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b6a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b6b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	d05c      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b6ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b6c4:	d03b      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b6c6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b6ca:	d834      	bhi.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b6cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d0:	d037      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b6d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d6:	d82e      	bhi.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b6d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b6dc:	d033      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b6de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b6e2:	d828      	bhi.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e8:	d01a      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b6ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6ee:	d822      	bhi.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f8:	d007      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b6fa:	e01c      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6fc:	4b1a      	ldr	r3, [pc, #104]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	4a19      	ldr	r2, [pc, #100]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b708:	e01e      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b70a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b70e:	3308      	adds	r3, #8
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f001 fb2a 	bl	800cd6c <RCCEx_PLL2_Config>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b71e:	e013      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b724:	3328      	adds	r3, #40	; 0x28
 800b726:	2100      	movs	r1, #0
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 fbd1 	bl	800ced0 <RCCEx_PLL3_Config>
 800b72e:	4603      	mov	r3, r0
 800b730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b734:	e008      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b73c:	e004      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b73e:	bf00      	nop
 800b740:	e002      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b742:	bf00      	nop
 800b744:	e000      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b746:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b748:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10d      	bne.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b750:	4b05      	ldr	r3, [pc, #20]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b754:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b75c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b75e:	4a02      	ldr	r2, [pc, #8]	; (800b768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b760:	430b      	orrs	r3, r1
 800b762:	6513      	str	r3, [r2, #80]	; 0x50
 800b764:	e006      	b.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b766:	bf00      	nop
 800b768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b76c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b770:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b780:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b784:	2300      	movs	r3, #0
 800b786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b78a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b78e:	460b      	mov	r3, r1
 800b790:	4313      	orrs	r3, r2
 800b792:	d03a      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b79a:	2b30      	cmp	r3, #48	; 0x30
 800b79c:	d01f      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b79e:	2b30      	cmp	r3, #48	; 0x30
 800b7a0:	d819      	bhi.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b7a2:	2b20      	cmp	r3, #32
 800b7a4:	d00c      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b7a6:	2b20      	cmp	r3, #32
 800b7a8:	d815      	bhi.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d019      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b7ae:	2b10      	cmp	r3, #16
 800b7b0:	d111      	bne.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b2:	4bae      	ldr	r3, [pc, #696]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b6:	4aad      	ldr	r2, [pc, #692]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b7be:	e011      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	2102      	movs	r1, #2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f001 facf 	bl	800cd6c <RCCEx_PLL2_Config>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b7d4:	e006      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b7dc:	e002      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b7de:	bf00      	nop
 800b7e0:	e000      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b7ec:	4b9f      	ldr	r3, [pc, #636]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7fa:	4a9c      	ldr	r2, [pc, #624]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b800:	e003      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b802:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b806:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b816:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b81a:	2300      	movs	r3, #0
 800b81c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b820:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b824:	460b      	mov	r3, r1
 800b826:	4313      	orrs	r3, r2
 800b828:	d051      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b834:	d035      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b83a:	d82e      	bhi.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b83c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b840:	d031      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b846:	d828      	bhi.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b84c:	d01a      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b84e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b852:	d822      	bhi.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b854:	2b00      	cmp	r3, #0
 800b856:	d003      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b85c:	d007      	beq.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b85e:	e01c      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b860:	4b82      	ldr	r3, [pc, #520]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	4a81      	ldr	r2, [pc, #516]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b86a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b86c:	e01c      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b86e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b872:	3308      	adds	r3, #8
 800b874:	2100      	movs	r1, #0
 800b876:	4618      	mov	r0, r3
 800b878:	f001 fa78 	bl	800cd6c <RCCEx_PLL2_Config>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b882:	e011      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b888:	3328      	adds	r3, #40	; 0x28
 800b88a:	2100      	movs	r1, #0
 800b88c:	4618      	mov	r0, r3
 800b88e:	f001 fb1f 	bl	800ced0 <RCCEx_PLL3_Config>
 800b892:	4603      	mov	r3, r0
 800b894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b898:	e006      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b8a0:	e002      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b8a2:	bf00      	nop
 800b8a4:	e000      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b8a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b8b0:	4b6e      	ldr	r3, [pc, #440]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b8b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8be:	4a6b      	ldr	r2, [pc, #428]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	6513      	str	r3, [r2, #80]	; 0x50
 800b8c4:	e003      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b8da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b8e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d053      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8f8:	d033      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b8fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8fe:	d82c      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b900:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b904:	d02f      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b90a:	d826      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b90c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b910:	d02b      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b916:	d820      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b91c:	d012      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b91e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b922:	d81a      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b924:	2b00      	cmp	r3, #0
 800b926:	d022      	beq.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b92c:	d115      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b92e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b932:	3308      	adds	r3, #8
 800b934:	2101      	movs	r1, #1
 800b936:	4618      	mov	r0, r3
 800b938:	f001 fa18 	bl	800cd6c <RCCEx_PLL2_Config>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b942:	e015      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b948:	3328      	adds	r3, #40	; 0x28
 800b94a:	2101      	movs	r1, #1
 800b94c:	4618      	mov	r0, r3
 800b94e:	f001 fabf 	bl	800ced0 <RCCEx_PLL3_Config>
 800b952:	4603      	mov	r3, r0
 800b954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b958:	e00a      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b960:	e006      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b962:	bf00      	nop
 800b964:	e004      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b966:	bf00      	nop
 800b968:	e002      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b96a:	bf00      	nop
 800b96c:	e000      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10a      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b978:	4b3c      	ldr	r3, [pc, #240]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b986:	4a39      	ldr	r2, [pc, #228]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b988:	430b      	orrs	r3, r1
 800b98a:	6513      	str	r3, [r2, #80]	; 0x50
 800b98c:	e003      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b992:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b9a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b9ac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	d060      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9be:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b9c2:	d039      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b9c4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b9c8:	d832      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b9ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9ce:	d035      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b9d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9d4:	d82c      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9da:	d031      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e0:	d826      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b9e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9e6:	d02d      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b9e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9ec:	d820      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b9ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9f2:	d012      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9f8:	d81a      	bhi.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d024      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b9fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba02:	d115      	bne.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba08:	3308      	adds	r3, #8
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f001 f9ad 	bl	800cd6c <RCCEx_PLL2_Config>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba18:	e017      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba1e:	3328      	adds	r3, #40	; 0x28
 800ba20:	2101      	movs	r1, #1
 800ba22:	4618      	mov	r0, r3
 800ba24:	f001 fa54 	bl	800ced0 <RCCEx_PLL3_Config>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba2e:	e00c      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba36:	e008      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba38:	bf00      	nop
 800ba3a:	e006      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba3c:	bf00      	nop
 800ba3e:	e004      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba40:	bf00      	nop
 800ba42:	e002      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba44:	bf00      	nop
 800ba46:	e000      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10e      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba52:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba62:	4a02      	ldr	r2, [pc, #8]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba64:	430b      	orrs	r3, r1
 800ba66:	6593      	str	r3, [r2, #88]	; 0x58
 800ba68:	e006      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ba6a:	bf00      	nop
 800ba6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ba78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ba84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ba8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba92:	460b      	mov	r3, r1
 800ba94:	4313      	orrs	r3, r2
 800ba96:	d037      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ba98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa2:	d00e      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800baa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa8:	d816      	bhi.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d018      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800baae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bab2:	d111      	bne.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab4:	4bc4      	ldr	r3, [pc, #784]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab8:	4ac3      	ldr	r2, [pc, #780]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800babe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bac0:	e00f      	b.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bac6:	3308      	adds	r3, #8
 800bac8:	2101      	movs	r1, #1
 800baca:	4618      	mov	r0, r3
 800bacc:	f001 f94e 	bl	800cd6c <RCCEx_PLL2_Config>
 800bad0:	4603      	mov	r3, r0
 800bad2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bad6:	e004      	b.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bade:	e000      	b.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bae2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800baea:	4bb7      	ldr	r3, [pc, #732]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800baf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baf8:	4ab3      	ldr	r2, [pc, #716]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bafa:	430b      	orrs	r3, r1
 800bafc:	6513      	str	r3, [r2, #80]	; 0x50
 800bafe:	e003      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bb14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bb1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4313      	orrs	r3, r2
 800bb26:	d039      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bb28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d81c      	bhi.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bb32:	a201      	add	r2, pc, #4	; (adr r2, 800bb38 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb75 	.word	0x0800bb75
 800bb3c:	0800bb49 	.word	0x0800bb49
 800bb40:	0800bb57 	.word	0x0800bb57
 800bb44:	0800bb75 	.word	0x0800bb75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb48:	4b9f      	ldr	r3, [pc, #636]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	4a9e      	ldr	r2, [pc, #632]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb54:	e00f      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	2102      	movs	r1, #2
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f001 f904 	bl	800cd6c <RCCEx_PLL2_Config>
 800bb64:	4603      	mov	r3, r0
 800bb66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb6a:	e004      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb72:	e000      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bb74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bb7e:	4b92      	ldr	r3, [pc, #584]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb82:	f023 0103 	bic.w	r1, r3, #3
 800bb86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb8c:	4a8e      	ldr	r2, [pc, #568]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb8e:	430b      	orrs	r3, r1
 800bb90:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb92:	e003      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bba8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbac:	2300      	movs	r3, #0
 800bbae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	f000 8099 	beq.w	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbbe:	4b83      	ldr	r3, [pc, #524]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a82      	ldr	r2, [pc, #520]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbca:	f7f8 fb83 	bl	80042d4 <HAL_GetTick>
 800bbce:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbd2:	e00b      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbd4:	f7f8 fb7e 	bl	80042d4 <HAL_GetTick>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	2b64      	cmp	r3, #100	; 0x64
 800bbe2:	d903      	bls.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bbea:	e005      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbec:	4b77      	ldr	r3, [pc, #476]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0ed      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bbf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d173      	bne.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc00:	4b71      	ldr	r3, [pc, #452]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc0c:	4053      	eors	r3, r2
 800bc0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d015      	beq.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc16:	4b6c      	ldr	r3, [pc, #432]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc22:	4b69      	ldr	r3, [pc, #420]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc26:	4a68      	ldr	r2, [pc, #416]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc2e:	4b66      	ldr	r3, [pc, #408]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc32:	4a65      	ldr	r2, [pc, #404]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc3a:	4a63      	ldr	r2, [pc, #396]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc4e:	d118      	bne.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc50:	f7f8 fb40 	bl	80042d4 <HAL_GetTick>
 800bc54:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc58:	e00d      	b.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc5a:	f7f8 fb3b 	bl	80042d4 <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc64:	1ad2      	subs	r2, r2, r3
 800bc66:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d903      	bls.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bc74:	e005      	b.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc76:	4b54      	ldr	r3, [pc, #336]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0eb      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bc82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d129      	bne.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc9a:	d10e      	bne.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bc9c:	4b4a      	ldr	r3, [pc, #296]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcac:	091a      	lsrs	r2, r3, #4
 800bcae:	4b48      	ldr	r3, [pc, #288]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	4a45      	ldr	r2, [pc, #276]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	6113      	str	r3, [r2, #16]
 800bcb8:	e005      	b.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bcba:	4b43      	ldr	r3, [pc, #268]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	4a42      	ldr	r2, [pc, #264]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bcc4:	6113      	str	r3, [r2, #16]
 800bcc6:	4b40      	ldr	r3, [pc, #256]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bcca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcd6:	4a3c      	ldr	r2, [pc, #240]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	6713      	str	r3, [r2, #112]	; 0x70
 800bcdc:	e008      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bcde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bce2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bce6:	e003      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bcf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f002 0301 	and.w	r3, r2, #1
 800bcfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd00:	2300      	movs	r3, #0
 800bd02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f000 8090 	beq.w	800be32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd1a:	2b28      	cmp	r3, #40	; 0x28
 800bd1c:	d870      	bhi.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800be09 	.word	0x0800be09
 800bd28:	0800be01 	.word	0x0800be01
 800bd2c:	0800be01 	.word	0x0800be01
 800bd30:	0800be01 	.word	0x0800be01
 800bd34:	0800be01 	.word	0x0800be01
 800bd38:	0800be01 	.word	0x0800be01
 800bd3c:	0800be01 	.word	0x0800be01
 800bd40:	0800be01 	.word	0x0800be01
 800bd44:	0800bdd5 	.word	0x0800bdd5
 800bd48:	0800be01 	.word	0x0800be01
 800bd4c:	0800be01 	.word	0x0800be01
 800bd50:	0800be01 	.word	0x0800be01
 800bd54:	0800be01 	.word	0x0800be01
 800bd58:	0800be01 	.word	0x0800be01
 800bd5c:	0800be01 	.word	0x0800be01
 800bd60:	0800be01 	.word	0x0800be01
 800bd64:	0800bdeb 	.word	0x0800bdeb
 800bd68:	0800be01 	.word	0x0800be01
 800bd6c:	0800be01 	.word	0x0800be01
 800bd70:	0800be01 	.word	0x0800be01
 800bd74:	0800be01 	.word	0x0800be01
 800bd78:	0800be01 	.word	0x0800be01
 800bd7c:	0800be01 	.word	0x0800be01
 800bd80:	0800be01 	.word	0x0800be01
 800bd84:	0800be09 	.word	0x0800be09
 800bd88:	0800be01 	.word	0x0800be01
 800bd8c:	0800be01 	.word	0x0800be01
 800bd90:	0800be01 	.word	0x0800be01
 800bd94:	0800be01 	.word	0x0800be01
 800bd98:	0800be01 	.word	0x0800be01
 800bd9c:	0800be01 	.word	0x0800be01
 800bda0:	0800be01 	.word	0x0800be01
 800bda4:	0800be09 	.word	0x0800be09
 800bda8:	0800be01 	.word	0x0800be01
 800bdac:	0800be01 	.word	0x0800be01
 800bdb0:	0800be01 	.word	0x0800be01
 800bdb4:	0800be01 	.word	0x0800be01
 800bdb8:	0800be01 	.word	0x0800be01
 800bdbc:	0800be01 	.word	0x0800be01
 800bdc0:	0800be01 	.word	0x0800be01
 800bdc4:	0800be09 	.word	0x0800be09
 800bdc8:	58024400 	.word	0x58024400
 800bdcc:	58024800 	.word	0x58024800
 800bdd0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdd8:	3308      	adds	r3, #8
 800bdda:	2101      	movs	r1, #1
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 ffc5 	bl	800cd6c <RCCEx_PLL2_Config>
 800bde2:	4603      	mov	r3, r0
 800bde4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bde8:	e00f      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdee:	3328      	adds	r3, #40	; 0x28
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 f86c 	bl	800ced0 <RCCEx_PLL3_Config>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bdfe:	e004      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be06:	e000      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800be08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10b      	bne.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800be12:	4bc0      	ldr	r3, [pc, #768]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be16:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800be1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be22:	4abc      	ldr	r2, [pc, #752]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be24:	430b      	orrs	r3, r1
 800be26:	6553      	str	r3, [r2, #84]	; 0x54
 800be28:	e003      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3a:	f002 0302 	and.w	r3, r2, #2
 800be3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be42:	2300      	movs	r3, #0
 800be44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be48:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800be4c:	460b      	mov	r3, r1
 800be4e:	4313      	orrs	r3, r2
 800be50:	d043      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be5a:	2b05      	cmp	r3, #5
 800be5c:	d824      	bhi.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800be5e:	a201      	add	r2, pc, #4	; (adr r2, 800be64 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800be60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be64:	0800beb1 	.word	0x0800beb1
 800be68:	0800be7d 	.word	0x0800be7d
 800be6c:	0800be93 	.word	0x0800be93
 800be70:	0800beb1 	.word	0x0800beb1
 800be74:	0800beb1 	.word	0x0800beb1
 800be78:	0800beb1 	.word	0x0800beb1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be80:	3308      	adds	r3, #8
 800be82:	2101      	movs	r1, #1
 800be84:	4618      	mov	r0, r3
 800be86:	f000 ff71 	bl	800cd6c <RCCEx_PLL2_Config>
 800be8a:	4603      	mov	r3, r0
 800be8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800be90:	e00f      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be96:	3328      	adds	r3, #40	; 0x28
 800be98:	2101      	movs	r1, #1
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 f818 	bl	800ced0 <RCCEx_PLL3_Config>
 800bea0:	4603      	mov	r3, r0
 800bea2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bea6:	e004      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800beae:	e000      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800beb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800beba:	4b96      	ldr	r3, [pc, #600]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bebe:	f023 0107 	bic.w	r1, r3, #7
 800bec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beca:	4a92      	ldr	r2, [pc, #584]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800becc:	430b      	orrs	r3, r1
 800bece:	6553      	str	r3, [r2, #84]	; 0x54
 800bed0:	e003      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bed6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800beda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f002 0304 	and.w	r3, r2, #4
 800bee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800beea:	2300      	movs	r3, #0
 800beec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bef0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4313      	orrs	r3, r2
 800bef8:	d043      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800befa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800befe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d824      	bhi.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf59 	.word	0x0800bf59
 800bf10:	0800bf25 	.word	0x0800bf25
 800bf14:	0800bf3b 	.word	0x0800bf3b
 800bf18:	0800bf59 	.word	0x0800bf59
 800bf1c:	0800bf59 	.word	0x0800bf59
 800bf20:	0800bf59 	.word	0x0800bf59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf28:	3308      	adds	r3, #8
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 ff1d 	bl	800cd6c <RCCEx_PLL2_Config>
 800bf32:	4603      	mov	r3, r0
 800bf34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf38:	e00f      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf3e:	3328      	adds	r3, #40	; 0x28
 800bf40:	2101      	movs	r1, #1
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 ffc4 	bl	800ced0 <RCCEx_PLL3_Config>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf4e:	e004      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf56:	e000      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800bf58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10b      	bne.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf62:	4b6c      	ldr	r3, [pc, #432]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf66:	f023 0107 	bic.w	r1, r3, #7
 800bf6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf72:	4a68      	ldr	r2, [pc, #416]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf74:	430b      	orrs	r3, r1
 800bf76:	6593      	str	r3, [r2, #88]	; 0x58
 800bf78:	e003      	b.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	f002 0320 	and.w	r3, r2, #32
 800bf8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf92:	2300      	movs	r3, #0
 800bf94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	d055      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bfa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfae:	d033      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bfb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfb4:	d82c      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bfb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfba:	d02f      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bfbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfc0:	d826      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bfc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bfc6:	d02b      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bfc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bfcc:	d820      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bfce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfd2:	d012      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800bfd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfd8:	d81a      	bhi.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d022      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800bfde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfe2:	d115      	bne.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfe8:	3308      	adds	r3, #8
 800bfea:	2100      	movs	r1, #0
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 febd 	bl	800cd6c <RCCEx_PLL2_Config>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bff8:	e015      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bffe:	3328      	adds	r3, #40	; 0x28
 800c000:	2102      	movs	r1, #2
 800c002:	4618      	mov	r0, r3
 800c004:	f000 ff64 	bl	800ced0 <RCCEx_PLL3_Config>
 800c008:	4603      	mov	r3, r0
 800c00a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c00e:	e00a      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c016:	e006      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c018:	bf00      	nop
 800c01a:	e004      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c01c:	bf00      	nop
 800c01e:	e002      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c020:	bf00      	nop
 800c022:	e000      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c024:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c026:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10b      	bne.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c02e:	4b39      	ldr	r3, [pc, #228]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c032:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c03a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c03e:	4a35      	ldr	r2, [pc, #212]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c040:	430b      	orrs	r3, r1
 800c042:	6553      	str	r3, [r2, #84]	; 0x54
 800c044:	e003      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c046:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c04a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c05a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c05e:	2300      	movs	r3, #0
 800c060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c064:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c068:	460b      	mov	r3, r1
 800c06a:	4313      	orrs	r3, r2
 800c06c:	d058      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c06e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c076:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c07a:	d033      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c07c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c080:	d82c      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c086:	d02f      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c08c:	d826      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c08e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c092:	d02b      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c098:	d820      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c09e:	d012      	beq.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c0a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0a4:	d81a      	bhi.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d022      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ae:	d115      	bne.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0b4:	3308      	adds	r3, #8
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 fe57 	bl	800cd6c <RCCEx_PLL2_Config>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c0c4:	e015      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0ca:	3328      	adds	r3, #40	; 0x28
 800c0cc:	2102      	movs	r1, #2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 fefe 	bl	800ced0 <RCCEx_PLL3_Config>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c0da:	e00a      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0e2:	e006      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c0e4:	bf00      	nop
 800c0e6:	e004      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c0e8:	bf00      	nop
 800c0ea:	e002      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c0ec:	bf00      	nop
 800c0ee:	e000      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10e      	bne.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c0fa:	4b06      	ldr	r3, [pc, #24]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c10a:	4a02      	ldr	r2, [pc, #8]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c10c:	430b      	orrs	r3, r1
 800c10e:	6593      	str	r3, [r2, #88]	; 0x58
 800c110:	e006      	b.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c112:	bf00      	nop
 800c114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c118:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c11c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c12c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c130:	2300      	movs	r3, #0
 800c132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c136:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c13a:	460b      	mov	r3, r1
 800c13c:	4313      	orrs	r3, r2
 800c13e:	d055      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c144:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c148:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c14c:	d033      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c14e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c152:	d82c      	bhi.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c158:	d02f      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c15a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c15e:	d826      	bhi.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c160:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c164:	d02b      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c166:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c16a:	d820      	bhi.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c16c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c170:	d012      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c176:	d81a      	bhi.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d022      	beq.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c17c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c180:	d115      	bne.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c186:	3308      	adds	r3, #8
 800c188:	2100      	movs	r1, #0
 800c18a:	4618      	mov	r0, r3
 800c18c:	f000 fdee 	bl	800cd6c <RCCEx_PLL2_Config>
 800c190:	4603      	mov	r3, r0
 800c192:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c196:	e015      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c19c:	3328      	adds	r3, #40	; 0x28
 800c19e:	2102      	movs	r1, #2
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f000 fe95 	bl	800ced0 <RCCEx_PLL3_Config>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1ac:	e00a      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c1b4:	e006      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1b6:	bf00      	nop
 800c1b8:	e004      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1ba:	bf00      	nop
 800c1bc:	e002      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1be:	bf00      	nop
 800c1c0:	e000      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10b      	bne.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c1cc:	4ba1      	ldr	r3, [pc, #644]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c1d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c1dc:	4a9d      	ldr	r2, [pc, #628]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1de:	430b      	orrs	r3, r1
 800c1e0:	6593      	str	r3, [r2, #88]	; 0x58
 800c1e2:	e003      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c1ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	f002 0308 	and.w	r3, r2, #8
 800c1f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c202:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c206:	460b      	mov	r3, r1
 800c208:	4313      	orrs	r3, r2
 800c20a:	d01e      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c20c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c218:	d10c      	bne.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c21e:	3328      	adds	r3, #40	; 0x28
 800c220:	2102      	movs	r1, #2
 800c222:	4618      	mov	r0, r3
 800c224:	f000 fe54 	bl	800ced0 <RCCEx_PLL3_Config>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c234:	4b87      	ldr	r3, [pc, #540]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c238:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c244:	4a83      	ldr	r2, [pc, #524]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c246:	430b      	orrs	r3, r1
 800c248:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c24a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	f002 0310 	and.w	r3, r2, #16
 800c256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c25a:	2300      	movs	r3, #0
 800c25c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c260:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c264:	460b      	mov	r3, r1
 800c266:	4313      	orrs	r3, r2
 800c268:	d01e      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c26a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c26e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c276:	d10c      	bne.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c27c:	3328      	adds	r3, #40	; 0x28
 800c27e:	2102      	movs	r1, #2
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fe25 	bl	800ced0 <RCCEx_PLL3_Config>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c292:	4b70      	ldr	r3, [pc, #448]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c296:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2a2:	4a6c      	ldr	r2, [pc, #432]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2a4:	430b      	orrs	r3, r1
 800c2a6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c2a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c2b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	d03e      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c2d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2d4:	d022      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2da:	d81b      	bhi.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e4:	d00b      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c2e6:	e015      	b.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 fd3b 	bl	800cd6c <RCCEx_PLL2_Config>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c2fc:	e00f      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c302:	3328      	adds	r3, #40	; 0x28
 800c304:	2102      	movs	r1, #2
 800c306:	4618      	mov	r0, r3
 800c308:	f000 fde2 	bl	800ced0 <RCCEx_PLL3_Config>
 800c30c:	4603      	mov	r3, r0
 800c30e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c312:	e004      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c31a:	e000      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c31e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10b      	bne.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c326:	4b4b      	ldr	r3, [pc, #300]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c336:	4a47      	ldr	r2, [pc, #284]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c338:	430b      	orrs	r3, r1
 800c33a:	6593      	str	r3, [r2, #88]	; 0x58
 800c33c:	e003      	b.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c33e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c342:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c352:	67bb      	str	r3, [r7, #120]	; 0x78
 800c354:	2300      	movs	r3, #0
 800c356:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c358:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c35c:	460b      	mov	r3, r1
 800c35e:	4313      	orrs	r3, r2
 800c360:	d03b      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c36a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c36e:	d01f      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c374:	d818      	bhi.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c37a:	d003      	beq.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c37c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c380:	d007      	beq.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c382:	e011      	b.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c384:	4b33      	ldr	r3, [pc, #204]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	4a32      	ldr	r2, [pc, #200]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c38a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c38e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c390:	e00f      	b.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c396:	3328      	adds	r3, #40	; 0x28
 800c398:	2101      	movs	r1, #1
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 fd98 	bl	800ced0 <RCCEx_PLL3_Config>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3a6:	e004      	b.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3ae:	e000      	b.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c3b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10b      	bne.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3ba:	4b26      	ldr	r3, [pc, #152]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3ca:	4a22      	ldr	r2, [pc, #136]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3cc:	430b      	orrs	r3, r1
 800c3ce:	6553      	str	r3, [r2, #84]	; 0x54
 800c3d0:	e003      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c3e6:	673b      	str	r3, [r7, #112]	; 0x70
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	677b      	str	r3, [r7, #116]	; 0x74
 800c3ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	d034      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c3f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d003      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c404:	d007      	beq.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c406:	e011      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c408:	4b12      	ldr	r3, [pc, #72]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40c:	4a11      	ldr	r2, [pc, #68]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c40e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c414:	e00e      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c41a:	3308      	adds	r3, #8
 800c41c:	2102      	movs	r1, #2
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fca4 	bl	800cd6c <RCCEx_PLL2_Config>
 800c424:	4603      	mov	r3, r0
 800c426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c42a:	e003      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c432:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10d      	bne.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c43c:	4b05      	ldr	r3, [pc, #20]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c43e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c44a:	4a02      	ldr	r2, [pc, #8]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c44c:	430b      	orrs	r3, r1
 800c44e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c450:	e006      	b.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c452:	bf00      	nop
 800c454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c458:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c45c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c46c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c46e:	2300      	movs	r3, #0
 800c470:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c472:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c476:	460b      	mov	r3, r1
 800c478:	4313      	orrs	r3, r2
 800c47a:	d00c      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c480:	3328      	adds	r3, #40	; 0x28
 800c482:	2102      	movs	r1, #2
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fd23 	bl	800ced0 <RCCEx_PLL3_Config>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c4a2:	663b      	str	r3, [r7, #96]	; 0x60
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	667b      	str	r3, [r7, #100]	; 0x64
 800c4a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	d038      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4be:	d018      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c4c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4c4:	d811      	bhi.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ca:	d014      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c4cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4d0:	d80b      	bhi.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d011      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c4d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4da:	d106      	bne.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4dc:	4bc3      	ldr	r3, [pc, #780]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	4ac2      	ldr	r2, [pc, #776]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c4e8:	e008      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c4f0:	e004      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c4f2:	bf00      	nop
 800c4f4:	e002      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c4f6:	bf00      	nop
 800c4f8:	e000      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c4fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10b      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c504:	4bb9      	ldr	r3, [pc, #740]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c508:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c50c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c514:	4ab5      	ldr	r2, [pc, #724]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c516:	430b      	orrs	r3, r1
 800c518:	6553      	str	r3, [r2, #84]	; 0x54
 800c51a:	e003      	b.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c51c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c520:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c530:	65bb      	str	r3, [r7, #88]	; 0x58
 800c532:	2300      	movs	r3, #0
 800c534:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c536:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c53a:	460b      	mov	r3, r1
 800c53c:	4313      	orrs	r3, r2
 800c53e:	d009      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c540:	4baa      	ldr	r3, [pc, #680]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c544:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c54e:	4aa7      	ldr	r2, [pc, #668]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c550:	430b      	orrs	r3, r1
 800c552:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c560:	653b      	str	r3, [r7, #80]	; 0x50
 800c562:	2300      	movs	r3, #0
 800c564:	657b      	str	r3, [r7, #84]	; 0x54
 800c566:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c56a:	460b      	mov	r3, r1
 800c56c:	4313      	orrs	r3, r2
 800c56e:	d009      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c570:	4b9e      	ldr	r3, [pc, #632]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c574:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c57e:	4a9b      	ldr	r2, [pc, #620]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c580:	430b      	orrs	r3, r1
 800c582:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c590:	64bb      	str	r3, [r7, #72]	; 0x48
 800c592:	2300      	movs	r3, #0
 800c594:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c596:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c59a:	460b      	mov	r3, r1
 800c59c:	4313      	orrs	r3, r2
 800c59e:	d009      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c5a0:	4b92      	ldr	r3, [pc, #584]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ae:	4a8f      	ldr	r2, [pc, #572]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c5b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c5c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c5c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	d00e      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c5d0:	4b86      	ldr	r3, [pc, #536]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	4a85      	ldr	r2, [pc, #532]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5da:	6113      	str	r3, [r2, #16]
 800c5dc:	4b83      	ldr	r3, [pc, #524]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5de:	6919      	ldr	r1, [r3, #16]
 800c5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c5e8:	4a80      	ldr	r2, [pc, #512]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5ea:	430b      	orrs	r3, r1
 800c5ec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c5ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c5fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c600:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c604:	460b      	mov	r3, r1
 800c606:	4313      	orrs	r3, r2
 800c608:	d009      	beq.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c60a:	4b78      	ldr	r3, [pc, #480]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c60e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c618:	4a74      	ldr	r2, [pc, #464]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c61a:	430b      	orrs	r3, r1
 800c61c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c61e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30
 800c62c:	2300      	movs	r3, #0
 800c62e:	637b      	str	r3, [r7, #52]	; 0x34
 800c630:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c634:	460b      	mov	r3, r1
 800c636:	4313      	orrs	r3, r2
 800c638:	d00a      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c63a:	4b6c      	ldr	r3, [pc, #432]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c63e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c64a:	4a68      	ldr	r2, [pc, #416]	; (800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c64c:	430b      	orrs	r3, r1
 800c64e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	2100      	movs	r1, #0
 800c65a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c662:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c666:	460b      	mov	r3, r1
 800c668:	4313      	orrs	r3, r2
 800c66a:	d011      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c670:	3308      	adds	r3, #8
 800c672:	2100      	movs	r1, #0
 800c674:	4618      	mov	r0, r3
 800c676:	f000 fb79 	bl	800cd6c <RCCEx_PLL2_Config>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c680:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c684:	2b00      	cmp	r3, #0
 800c686:	d003      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c68c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c698:	2100      	movs	r1, #0
 800c69a:	6239      	str	r1, [r7, #32]
 800c69c:	f003 0302 	and.w	r3, r3, #2
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	d011      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6b0:	3308      	adds	r3, #8
 800c6b2:	2101      	movs	r1, #1
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fb59 	bl	800cd6c <RCCEx_PLL2_Config>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c6c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d003      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	2100      	movs	r1, #0
 800c6da:	61b9      	str	r1, [r7, #24]
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	61fb      	str	r3, [r7, #28]
 800c6e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	d011      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6f0:	3308      	adds	r3, #8
 800c6f2:	2102      	movs	r1, #2
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 fb39 	bl	800cd6c <RCCEx_PLL2_Config>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c704:	2b00      	cmp	r3, #0
 800c706:	d003      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c70c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	2100      	movs	r1, #0
 800c71a:	6139      	str	r1, [r7, #16]
 800c71c:	f003 0308 	and.w	r3, r3, #8
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c726:	460b      	mov	r3, r1
 800c728:	4313      	orrs	r3, r2
 800c72a:	d011      	beq.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c730:	3328      	adds	r3, #40	; 0x28
 800c732:	2100      	movs	r1, #0
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fbcb 	bl	800ced0 <RCCEx_PLL3_Config>
 800c73a:	4603      	mov	r3, r0
 800c73c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c740:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c744:	2b00      	cmp	r3, #0
 800c746:	d003      	beq.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c748:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c74c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	2100      	movs	r1, #0
 800c75a:	60b9      	str	r1, [r7, #8]
 800c75c:	f003 0310 	and.w	r3, r3, #16
 800c760:	60fb      	str	r3, [r7, #12]
 800c762:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c766:	460b      	mov	r3, r1
 800c768:	4313      	orrs	r3, r2
 800c76a:	d011      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c770:	3328      	adds	r3, #40	; 0x28
 800c772:	2101      	movs	r1, #1
 800c774:	4618      	mov	r0, r3
 800c776:	f000 fbab 	bl	800ced0 <RCCEx_PLL3_Config>
 800c77a:	4603      	mov	r3, r0
 800c77c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c780:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c784:	2b00      	cmp	r3, #0
 800c786:	d003      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c788:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c78c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	2100      	movs	r1, #0
 800c79a:	6039      	str	r1, [r7, #0]
 800c79c:	f003 0320 	and.w	r3, r3, #32
 800c7a0:	607b      	str	r3, [r7, #4]
 800c7a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	d011      	beq.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7b0:	3328      	adds	r3, #40	; 0x28
 800c7b2:	2102      	movs	r1, #2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fb8b 	bl	800ced0 <RCCEx_PLL3_Config>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d003      	beq.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c7d0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e000      	b.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7ea:	bf00      	nop
 800c7ec:	58024400 	.word	0x58024400

0800c7f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c7f4:	f7fe fde2 	bl	800b3bc <HAL_RCC_GetHCLKFreq>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	4b06      	ldr	r3, [pc, #24]	; (800c814 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	091b      	lsrs	r3, r3, #4
 800c800:	f003 0307 	and.w	r3, r3, #7
 800c804:	4904      	ldr	r1, [pc, #16]	; (800c818 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c806:	5ccb      	ldrb	r3, [r1, r3]
 800c808:	f003 031f 	and.w	r3, r3, #31
 800c80c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c810:	4618      	mov	r0, r3
 800c812:	bd80      	pop	{r7, pc}
 800c814:	58024400 	.word	0x58024400
 800c818:	08010348 	.word	0x08010348

0800c81c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b089      	sub	sp, #36	; 0x24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c824:	4ba1      	ldr	r3, [pc, #644]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	f003 0303 	and.w	r3, r3, #3
 800c82c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c82e:	4b9f      	ldr	r3, [pc, #636]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	0b1b      	lsrs	r3, r3, #12
 800c834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c838:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c83a:	4b9c      	ldr	r3, [pc, #624]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83e:	091b      	lsrs	r3, r3, #4
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c846:	4b99      	ldr	r3, [pc, #612]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	fb02 f303 	mul.w	r3, r2, r3
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 8111 	beq.w	800ca8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	f000 8083 	beq.w	800c978 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	2b02      	cmp	r3, #2
 800c876:	f200 80a1 	bhi.w	800c9bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d056      	beq.n	800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c886:	e099      	b.n	800c9bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c888:	4b88      	ldr	r3, [pc, #544]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0320 	and.w	r3, r3, #32
 800c890:	2b00      	cmp	r3, #0
 800c892:	d02d      	beq.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c894:	4b85      	ldr	r3, [pc, #532]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	08db      	lsrs	r3, r3, #3
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	4a84      	ldr	r2, [pc, #528]	; (800cab0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c8a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	ee07 3a90 	vmov	s15, r3
 800c8ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8be:	4b7b      	ldr	r3, [pc, #492]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8ee:	e087      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	ee07 3a90 	vmov	s15, r3
 800c8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c902:	4b6a      	ldr	r3, [pc, #424]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c912:	ed97 6a03 	vldr	s12, [r7, #12]
 800c916:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c92e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c932:	e065      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cabc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c946:	4b59      	ldr	r3, [pc, #356]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c956:	ed97 6a03 	vldr	s12, [r7, #12]
 800c95a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c976:	e043      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c98a:	4b48      	ldr	r3, [pc, #288]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ba:	e021      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cabc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ce:	4b37      	ldr	r3, [pc, #220]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ca00:	4b2a      	ldr	r3, [pc, #168]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca04:	0a5b      	lsrs	r3, r3, #9
 800ca06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca26:	ee17 2a90 	vmov	r2, s15
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca2e:	4b1f      	ldr	r3, [pc, #124]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca32:	0c1b      	lsrs	r3, r3, #16
 800ca34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca38:	ee07 3a90 	vmov	s15, r3
 800ca3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca54:	ee17 2a90 	vmov	r2, s15
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca5c:	4b13      	ldr	r3, [pc, #76]	; (800caac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca60:	0e1b      	lsrs	r3, r3, #24
 800ca62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca82:	ee17 2a90 	vmov	r2, s15
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca8a:	e008      	b.n	800ca9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	609a      	str	r2, [r3, #8]
}
 800ca9e:	bf00      	nop
 800caa0:	3724      	adds	r7, #36	; 0x24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	58024400 	.word	0x58024400
 800cab0:	03d09000 	.word	0x03d09000
 800cab4:	46000000 	.word	0x46000000
 800cab8:	4c742400 	.word	0x4c742400
 800cabc:	4a742400 	.word	0x4a742400
 800cac0:	4bb71b00 	.word	0x4bb71b00

0800cac4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b089      	sub	sp, #36	; 0x24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cacc:	4ba1      	ldr	r3, [pc, #644]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cad6:	4b9f      	ldr	r3, [pc, #636]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cada:	0d1b      	lsrs	r3, r3, #20
 800cadc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cae0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cae2:	4b9c      	ldr	r3, [pc, #624]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	0a1b      	lsrs	r3, r3, #8
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800caee:	4b99      	ldr	r3, [pc, #612]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf2:	08db      	lsrs	r3, r3, #3
 800caf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	fb02 f303 	mul.w	r3, r2, r3
 800cafe:	ee07 3a90 	vmov	s15, r3
 800cb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f000 8111 	beq.w	800cd34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	f000 8083 	beq.w	800cc20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	f200 80a1 	bhi.w	800cc64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d003      	beq.n	800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d056      	beq.n	800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb2e:	e099      	b.n	800cc64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb30:	4b88      	ldr	r3, [pc, #544]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 0320 	and.w	r3, r3, #32
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d02d      	beq.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb3c:	4b85      	ldr	r3, [pc, #532]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	08db      	lsrs	r3, r3, #3
 800cb42:	f003 0303 	and.w	r3, r3, #3
 800cb46:	4a84      	ldr	r2, [pc, #528]	; (800cd58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb48:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb66:	4b7b      	ldr	r3, [pc, #492]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6e:	ee07 3a90 	vmov	s15, r3
 800cb72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb96:	e087      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	ee07 3a90 	vmov	s15, r3
 800cb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbaa:	4b6a      	ldr	r3, [pc, #424]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb2:	ee07 3a90 	vmov	s15, r3
 800cbb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbba:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbda:	e065      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	ee07 3a90 	vmov	s15, r3
 800cbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbee:	4b59      	ldr	r3, [pc, #356]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc1e:	e043      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	ee07 3a90 	vmov	s15, r3
 800cc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc32:	4b48      	ldr	r3, [pc, #288]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc62:	e021      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	ee07 3a90 	vmov	s15, r3
 800cc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc76:	4b37      	ldr	r3, [pc, #220]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cca6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cca8:	4b2a      	ldr	r3, [pc, #168]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccac:	0a5b      	lsrs	r3, r3, #9
 800ccae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccce:	ee17 2a90 	vmov	r2, s15
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ccd6:	4b1f      	ldr	r3, [pc, #124]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccda:	0c1b      	lsrs	r3, r3, #16
 800ccdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce0:	ee07 3a90 	vmov	s15, r3
 800cce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccfc:	ee17 2a90 	vmov	r2, s15
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cd04:	4b13      	ldr	r3, [pc, #76]	; (800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd08:	0e1b      	lsrs	r3, r3, #24
 800cd0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd0e:	ee07 3a90 	vmov	s15, r3
 800cd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd2a:	ee17 2a90 	vmov	r2, s15
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd32:	e008      	b.n	800cd46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	609a      	str	r2, [r3, #8]
}
 800cd46:	bf00      	nop
 800cd48:	3724      	adds	r7, #36	; 0x24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	58024400 	.word	0x58024400
 800cd58:	03d09000 	.word	0x03d09000
 800cd5c:	46000000 	.word	0x46000000
 800cd60:	4c742400 	.word	0x4c742400
 800cd64:	4a742400 	.word	0x4a742400
 800cd68:	4bb71b00 	.word	0x4bb71b00

0800cd6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd76:	2300      	movs	r3, #0
 800cd78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd7a:	4b53      	ldr	r3, [pc, #332]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7e:	f003 0303 	and.w	r3, r3, #3
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d101      	bne.n	800cd8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e099      	b.n	800cebe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd8a:	4b4f      	ldr	r3, [pc, #316]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a4e      	ldr	r2, [pc, #312]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cd90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd96:	f7f7 fa9d 	bl	80042d4 <HAL_GetTick>
 800cd9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd9c:	e008      	b.n	800cdb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd9e:	f7f7 fa99 	bl	80042d4 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d901      	bls.n	800cdb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e086      	b.n	800cebe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cdb0:	4b45      	ldr	r3, [pc, #276]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1f0      	bne.n	800cd9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cdbc:	4b42      	ldr	r3, [pc, #264]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	031b      	lsls	r3, r3, #12
 800cdca:	493f      	ldr	r1, [pc, #252]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	628b      	str	r3, [r1, #40]	; 0x28
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	025b      	lsls	r3, r3, #9
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	431a      	orrs	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	041b      	lsls	r3, r3, #16
 800cdee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	061b      	lsls	r3, r3, #24
 800cdfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce00:	4931      	ldr	r1, [pc, #196]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce02:	4313      	orrs	r3, r2
 800ce04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce06:	4b30      	ldr	r3, [pc, #192]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	695b      	ldr	r3, [r3, #20]
 800ce12:	492d      	ldr	r1, [pc, #180]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce14:	4313      	orrs	r3, r2
 800ce16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce18:	4b2b      	ldr	r3, [pc, #172]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	f023 0220 	bic.w	r2, r3, #32
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	4928      	ldr	r1, [pc, #160]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce2a:	4b27      	ldr	r3, [pc, #156]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	4a26      	ldr	r2, [pc, #152]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce30:	f023 0310 	bic.w	r3, r3, #16
 800ce34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce36:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce3a:	4b24      	ldr	r3, [pc, #144]	; (800cecc <RCCEx_PLL2_Config+0x160>)
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	69d2      	ldr	r2, [r2, #28]
 800ce42:	00d2      	lsls	r2, r2, #3
 800ce44:	4920      	ldr	r1, [pc, #128]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce46:	4313      	orrs	r3, r2
 800ce48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce4a:	4b1f      	ldr	r3, [pc, #124]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4e:	4a1e      	ldr	r2, [pc, #120]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce50:	f043 0310 	orr.w	r3, r3, #16
 800ce54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d106      	bne.n	800ce6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce5c:	4b1a      	ldr	r3, [pc, #104]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce60:	4a19      	ldr	r2, [pc, #100]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce68:	e00f      	b.n	800ce8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d106      	bne.n	800ce7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce70:	4b15      	ldr	r3, [pc, #84]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce74:	4a14      	ldr	r2, [pc, #80]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce7c:	e005      	b.n	800ce8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce7e:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce82:	4a11      	ldr	r2, [pc, #68]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce8a:	4b0f      	ldr	r3, [pc, #60]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a0e      	ldr	r2, [pc, #56]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ce90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce96:	f7f7 fa1d 	bl	80042d4 <HAL_GetTick>
 800ce9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce9c:	e008      	b.n	800ceb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce9e:	f7f7 fa19 	bl	80042d4 <HAL_GetTick>
 800cea2:	4602      	mov	r2, r0
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d901      	bls.n	800ceb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ceac:	2303      	movs	r3, #3
 800ceae:	e006      	b.n	800cebe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ceb0:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <RCCEx_PLL2_Config+0x15c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d0f0      	beq.n	800ce9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	58024400 	.word	0x58024400
 800cecc:	ffff0007 	.word	0xffff0007

0800ced0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cede:	4b53      	ldr	r3, [pc, #332]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee2:	f003 0303 	and.w	r3, r3, #3
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d101      	bne.n	800ceee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e099      	b.n	800d022 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ceee:	4b4f      	ldr	r3, [pc, #316]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a4e      	ldr	r2, [pc, #312]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cefa:	f7f7 f9eb 	bl	80042d4 <HAL_GetTick>
 800cefe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf00:	e008      	b.n	800cf14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf02:	f7f7 f9e7 	bl	80042d4 <HAL_GetTick>
 800cf06:	4602      	mov	r2, r0
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d901      	bls.n	800cf14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e086      	b.n	800d022 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf14:	4b45      	ldr	r3, [pc, #276]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1f0      	bne.n	800cf02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf20:	4b42      	ldr	r3, [pc, #264]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	051b      	lsls	r3, r3, #20
 800cf2e:	493f      	ldr	r1, [pc, #252]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf30:	4313      	orrs	r3, r2
 800cf32:	628b      	str	r3, [r1, #40]	; 0x28
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	025b      	lsls	r3, r3, #9
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	041b      	lsls	r3, r3, #16
 800cf52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf56:	431a      	orrs	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	061b      	lsls	r3, r3, #24
 800cf60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf64:	4931      	ldr	r1, [pc, #196]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf66:	4313      	orrs	r3, r2
 800cf68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf6a:	4b30      	ldr	r3, [pc, #192]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	492d      	ldr	r1, [pc, #180]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf7c:	4b2b      	ldr	r3, [pc, #172]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	4928      	ldr	r1, [pc, #160]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf8e:	4b27      	ldr	r3, [pc, #156]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf92:	4a26      	ldr	r2, [pc, #152]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf9a:	4b24      	ldr	r3, [pc, #144]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cf9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf9e:	4b24      	ldr	r3, [pc, #144]	; (800d030 <RCCEx_PLL3_Config+0x160>)
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	69d2      	ldr	r2, [r2, #28]
 800cfa6:	00d2      	lsls	r2, r2, #3
 800cfa8:	4920      	ldr	r1, [pc, #128]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cfae:	4b1f      	ldr	r3, [pc, #124]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb2:	4a1e      	ldr	r2, [pc, #120]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cfc0:	4b1a      	ldr	r3, [pc, #104]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	4a19      	ldr	r2, [pc, #100]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cfca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfcc:	e00f      	b.n	800cfee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d106      	bne.n	800cfe2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cfd4:	4b15      	ldr	r3, [pc, #84]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	4a14      	ldr	r2, [pc, #80]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfe0:	e005      	b.n	800cfee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cfe2:	4b12      	ldr	r3, [pc, #72]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe6:	4a11      	ldr	r2, [pc, #68]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cfe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfee:	4b0f      	ldr	r3, [pc, #60]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a0e      	ldr	r2, [pc, #56]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800cff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cffa:	f7f7 f96b 	bl	80042d4 <HAL_GetTick>
 800cffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d000:	e008      	b.n	800d014 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d002:	f7f7 f967 	bl	80042d4 <HAL_GetTick>
 800d006:	4602      	mov	r2, r0
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d901      	bls.n	800d014 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e006      	b.n	800d022 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d014:	4b05      	ldr	r3, [pc, #20]	; (800d02c <RCCEx_PLL3_Config+0x15c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d0f0      	beq.n	800d002 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	58024400 	.word	0x58024400
 800d030:	ffff0007 	.word	0xffff0007

0800d034 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d074      	beq.n	800d130 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d106      	bne.n	800d060 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7f6 f834 	bl	80030c8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2202      	movs	r2, #2
 800d064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	f003 0310 	and.w	r3, r3, #16
 800d072:	2b10      	cmp	r3, #16
 800d074:	d053      	beq.n	800d11e <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	22ca      	movs	r2, #202	; 0xca
 800d07c:	625a      	str	r2, [r3, #36]	; 0x24
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2253      	movs	r2, #83	; 0x53
 800d084:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f87e 	bl	800d188 <RTC_EnterInitMode>
 800d08c:	4603      	mov	r3, r0
 800d08e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d124      	bne.n	800d0e0 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6999      	ldr	r1, [r3, #24]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	4b26      	ldr	r3, [pc, #152]	; (800d13c <HAL_RTC_Init+0x108>)
 800d0a2:	400b      	ands	r3, r1
 800d0a4:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	6999      	ldr	r1, [r3, #24]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	431a      	orrs	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	0419      	lsls	r1, r3, #16
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68da      	ldr	r2, [r3, #12]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	430a      	orrs	r2, r1
 800d0d4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f88c 	bl	800d1f4 <RTC_ExitInitMode>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d116      	bne.n	800d114 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	699a      	ldr	r2, [r3, #24]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d0f4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6999      	ldr	r1, [r3, #24]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a1a      	ldr	r2, [r3, #32]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	69db      	ldr	r3, [r3, #28]
 800d104:	431a      	orrs	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	431a      	orrs	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	430a      	orrs	r2, r1
 800d112:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	22ff      	movs	r2, #255	; 0xff
 800d11a:	625a      	str	r2, [r3, #36]	; 0x24
 800d11c:	e001      	b.n	800d122 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d103      	bne.n	800d130 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d130:	7bfb      	ldrb	r3, [r7, #15]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	fb8fffbf 	.word	0xfb8fffbf

0800d140 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a0d      	ldr	r2, [pc, #52]	; (800d184 <HAL_RTC_WaitForSynchro+0x44>)
 800d14e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d150:	f7f7 f8c0 	bl	80042d4 <HAL_GetTick>
 800d154:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d156:	e009      	b.n	800d16c <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d158:	f7f7 f8bc 	bl	80042d4 <HAL_GetTick>
 800d15c:	4602      	mov	r2, r0
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d166:	d901      	bls.n	800d16c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d168:	2303      	movs	r3, #3
 800d16a:	e007      	b.n	800d17c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0ee      	beq.n	800d158 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	0001005f 	.word	0x0001005f

0800d188 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d123      	bne.n	800d1ea <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68da      	ldr	r2, [r3, #12]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d1b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d1b2:	f7f7 f88f 	bl	80042d4 <HAL_GetTick>
 800d1b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d1b8:	e00d      	b.n	800d1d6 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d1ba:	f7f7 f88b 	bl	80042d4 <HAL_GetTick>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1c8:	d905      	bls.n	800d1d6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2203      	movs	r2, #3
 800d1d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d102      	bne.n	800d1ea <RTC_EnterInitMode+0x62>
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d1e7      	bne.n	800d1ba <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d200:	4b1a      	ldr	r3, [pc, #104]	; (800d26c <RTC_ExitInitMode+0x78>)
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	4a19      	ldr	r2, [pc, #100]	; (800d26c <RTC_ExitInitMode+0x78>)
 800d206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d20a:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d20c:	4b17      	ldr	r3, [pc, #92]	; (800d26c <RTC_ExitInitMode+0x78>)
 800d20e:	699b      	ldr	r3, [r3, #24]
 800d210:	f003 0320 	and.w	r3, r3, #32
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10c      	bne.n	800d232 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7ff ff91 	bl	800d140 <HAL_RTC_WaitForSynchro>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d01e      	beq.n	800d262 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2203      	movs	r2, #3
 800d228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d22c:	2303      	movs	r3, #3
 800d22e:	73fb      	strb	r3, [r7, #15]
 800d230:	e017      	b.n	800d262 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d232:	4b0e      	ldr	r3, [pc, #56]	; (800d26c <RTC_ExitInitMode+0x78>)
 800d234:	699b      	ldr	r3, [r3, #24]
 800d236:	4a0d      	ldr	r2, [pc, #52]	; (800d26c <RTC_ExitInitMode+0x78>)
 800d238:	f023 0320 	bic.w	r3, r3, #32
 800d23c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff ff7e 	bl	800d140 <HAL_RTC_WaitForSynchro>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d005      	beq.n	800d256 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2203      	movs	r2, #3
 800d24e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d252:	2303      	movs	r3, #3
 800d254:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d256:	4b05      	ldr	r3, [pc, #20]	; (800d26c <RTC_ExitInitMode+0x78>)
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	4a04      	ldr	r2, [pc, #16]	; (800d26c <RTC_ExitInitMode+0x78>)
 800d25c:	f043 0320 	orr.w	r3, r3, #32
 800d260:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	58004000 	.word	0x58004000

0800d270 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e02b      	b.n	800d2dc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d106      	bne.n	800d29e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7f3 fceb 	bl	8000c74 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f001 ffdf 	bl	800f274 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6818      	ldr	r0, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6839      	ldr	r1, [r7, #0]
 800d2c2:	f002 f833 	bl	800f32c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d2c6:	4b07      	ldr	r3, [pc, #28]	; (800d2e4 <HAL_SDRAM_Init+0x74>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a06      	ldr	r2, [pc, #24]	; (800d2e4 <HAL_SDRAM_Init+0x74>)
 800d2cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2d0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	52004000 	.word	0x52004000

0800d2e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d2fc:	7dfb      	ldrb	r3, [r7, #23]
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d101      	bne.n	800d306 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d302:	2302      	movs	r3, #2
 800d304:	e021      	b.n	800d34a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d306:	7dfb      	ldrb	r3, [r7, #23]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d002      	beq.n	800d312 <HAL_SDRAM_SendCommand+0x2a>
 800d30c:	7dfb      	ldrb	r3, [r7, #23]
 800d30e:	2b05      	cmp	r3, #5
 800d310:	d118      	bne.n	800d344 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2202      	movs	r2, #2
 800d316:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	4618      	mov	r0, r3
 800d324:	f002 f86c 	bl	800f400 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d104      	bne.n	800d33a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2205      	movs	r2, #5
 800d334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d338:	e006      	b.n	800d348 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2201      	movs	r2, #1
 800d33e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d342:	e001      	b.n	800d348 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	e000      	b.n	800d34a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b082      	sub	sp, #8
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b02      	cmp	r3, #2
 800d366:	d101      	bne.n	800d36c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d368:	2302      	movs	r3, #2
 800d36a:	e016      	b.n	800d39a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b01      	cmp	r3, #1
 800d376:	d10f      	bne.n	800d398 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2202      	movs	r2, #2
 800d37c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	4618      	mov	r0, r3
 800d388:	f002 f85e 	bl	800f448 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	e000      	b.n	800d39a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b082      	sub	sp, #8
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e042      	b.n	800d43a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7f6 fe62 	bl	8004090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2224      	movs	r2, #36	; 0x24
 800d3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f022 0201 	bic.w	r2, r2, #1
 800d3e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 fd5d 	bl	800dea4 <UART_SetConfig>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d101      	bne.n	800d3f4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e022      	b.n	800d43a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f001 fbbd 	bl	800eb7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	685a      	ldr	r2, [r3, #4]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d410:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	689a      	ldr	r2, [r3, #8]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d420:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f042 0201 	orr.w	r2, r2, #1
 800d430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f001 fc44 	bl	800ecc0 <UART_CheckIdleState>
 800d438:	4603      	mov	r3, r0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b08a      	sub	sp, #40	; 0x28
 800d446:	af02      	add	r7, sp, #8
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	603b      	str	r3, [r7, #0]
 800d44e:	4613      	mov	r3, r2
 800d450:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d458:	2b20      	cmp	r3, #32
 800d45a:	d17b      	bne.n	800d554 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d002      	beq.n	800d468 <HAL_UART_Transmit+0x26>
 800d462:	88fb      	ldrh	r3, [r7, #6]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e074      	b.n	800d556 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2200      	movs	r2, #0
 800d470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2221      	movs	r2, #33	; 0x21
 800d478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d47c:	f7f6 ff2a 	bl	80042d4 <HAL_GetTick>
 800d480:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	88fa      	ldrh	r2, [r7, #6]
 800d486:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	88fa      	ldrh	r2, [r7, #6]
 800d48e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d49a:	d108      	bne.n	800d4ae <HAL_UART_Transmit+0x6c>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d104      	bne.n	800d4ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	61bb      	str	r3, [r7, #24]
 800d4ac:	e003      	b.n	800d4b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d4b6:	e030      	b.n	800d51a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2180      	movs	r1, #128	; 0x80
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f001 fca6 	bl	800ee14 <UART_WaitOnFlagUntilTimeout>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d005      	beq.n	800d4da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2220      	movs	r2, #32
 800d4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	e03d      	b.n	800d556 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10b      	bne.n	800d4f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	3302      	adds	r3, #2
 800d4f4:	61bb      	str	r3, [r7, #24]
 800d4f6:	e007      	b.n	800d508 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	781a      	ldrb	r2, [r3, #0]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	3301      	adds	r3, #1
 800d506:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d50e:	b29b      	uxth	r3, r3
 800d510:	3b01      	subs	r3, #1
 800d512:	b29a      	uxth	r2, r3
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d520:	b29b      	uxth	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1c8      	bne.n	800d4b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2200      	movs	r2, #0
 800d52e:	2140      	movs	r1, #64	; 0x40
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f001 fc6f 	bl	800ee14 <UART_WaitOnFlagUntilTimeout>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d005      	beq.n	800d548 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2220      	movs	r2, #32
 800d540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d544:	2303      	movs	r3, #3
 800d546:	e006      	b.n	800d556 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2220      	movs	r2, #32
 800d54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	e000      	b.n	800d556 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d554:	2302      	movs	r3, #2
  }
}
 800d556:	4618      	mov	r0, r3
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b08a      	sub	sp, #40	; 0x28
 800d562:	af02      	add	r7, sp, #8
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	603b      	str	r3, [r7, #0]
 800d56a:	4613      	mov	r3, r2
 800d56c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d574:	2b20      	cmp	r3, #32
 800d576:	f040 80b5 	bne.w	800d6e4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <HAL_UART_Receive+0x28>
 800d580:	88fb      	ldrh	r3, [r7, #6]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e0ad      	b.n	800d6e6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2222      	movs	r2, #34	; 0x22
 800d596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5a0:	f7f6 fe98 	bl	80042d4 <HAL_GetTick>
 800d5a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	88fa      	ldrh	r2, [r7, #6]
 800d5aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	88fa      	ldrh	r2, [r7, #6]
 800d5b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5be:	d10e      	bne.n	800d5de <HAL_UART_Receive+0x80>
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d105      	bne.n	800d5d4 <HAL_UART_Receive+0x76>
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d5ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5d2:	e02d      	b.n	800d630 <HAL_UART_Receive+0xd2>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	22ff      	movs	r2, #255	; 0xff
 800d5d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5dc:	e028      	b.n	800d630 <HAL_UART_Receive+0xd2>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d10d      	bne.n	800d602 <HAL_UART_Receive+0xa4>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d104      	bne.n	800d5f8 <HAL_UART_Receive+0x9a>
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	22ff      	movs	r2, #255	; 0xff
 800d5f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5f6:	e01b      	b.n	800d630 <HAL_UART_Receive+0xd2>
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	227f      	movs	r2, #127	; 0x7f
 800d5fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d600:	e016      	b.n	800d630 <HAL_UART_Receive+0xd2>
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d60a:	d10d      	bne.n	800d628 <HAL_UART_Receive+0xca>
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d104      	bne.n	800d61e <HAL_UART_Receive+0xc0>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	227f      	movs	r2, #127	; 0x7f
 800d618:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d61c:	e008      	b.n	800d630 <HAL_UART_Receive+0xd2>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	223f      	movs	r2, #63	; 0x3f
 800d622:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d626:	e003      	b.n	800d630 <HAL_UART_Receive+0xd2>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d636:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d640:	d108      	bne.n	800d654 <HAL_UART_Receive+0xf6>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d104      	bne.n	800d654 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d64a:	2300      	movs	r3, #0
 800d64c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	61bb      	str	r3, [r7, #24]
 800d652:	e003      	b.n	800d65c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d658:	2300      	movs	r3, #0
 800d65a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d65c:	e036      	b.n	800d6cc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2200      	movs	r2, #0
 800d666:	2120      	movs	r1, #32
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f001 fbd3 	bl	800ee14 <UART_WaitOnFlagUntilTimeout>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d005      	beq.n	800d680 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2220      	movs	r2, #32
 800d678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d67c:	2303      	movs	r3, #3
 800d67e:	e032      	b.n	800d6e6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10c      	bne.n	800d6a0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	8a7b      	ldrh	r3, [r7, #18]
 800d690:	4013      	ands	r3, r2
 800d692:	b29a      	uxth	r2, r3
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	3302      	adds	r3, #2
 800d69c:	61bb      	str	r3, [r7, #24]
 800d69e:	e00c      	b.n	800d6ba <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a6:	b2da      	uxtb	r2, r3
 800d6a8:	8a7b      	ldrh	r3, [r7, #18]
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	b2da      	uxtb	r2, r3
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1c2      	bne.n	800d65e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	e000      	b.n	800d6e6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d6e4:	2302      	movs	r3, #2
  }
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3720      	adds	r7, #32
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
	...

0800d6f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b0ba      	sub	sp, #232	; 0xe8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d71a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d71e:	4013      	ands	r3, r2
 800d720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d11b      	bne.n	800d764 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d730:	f003 0320 	and.w	r3, r3, #32
 800d734:	2b00      	cmp	r3, #0
 800d736:	d015      	beq.n	800d764 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d73c:	f003 0320 	and.w	r3, r3, #32
 800d740:	2b00      	cmp	r3, #0
 800d742:	d105      	bne.n	800d750 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d009      	beq.n	800d764 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 8377 	beq.w	800de48 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	4798      	blx	r3
      }
      return;
 800d762:	e371      	b.n	800de48 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 8123 	beq.w	800d9b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d76e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d772:	4b8d      	ldr	r3, [pc, #564]	; (800d9a8 <HAL_UART_IRQHandler+0x2b8>)
 800d774:	4013      	ands	r3, r2
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d77a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d77e:	4b8b      	ldr	r3, [pc, #556]	; (800d9ac <HAL_UART_IRQHandler+0x2bc>)
 800d780:	4013      	ands	r3, r2
 800d782:	2b00      	cmp	r3, #0
 800d784:	f000 8116 	beq.w	800d9b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	d011      	beq.n	800d7b8 <HAL_UART_IRQHandler+0xc8>
 800d794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00b      	beq.n	800d7b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ae:	f043 0201 	orr.w	r2, r3, #1
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7bc:	f003 0302 	and.w	r3, r3, #2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d011      	beq.n	800d7e8 <HAL_UART_IRQHandler+0xf8>
 800d7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7c8:	f003 0301 	and.w	r3, r3, #1
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00b      	beq.n	800d7e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2202      	movs	r2, #2
 800d7d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7de:	f043 0204 	orr.w	r2, r3, #4
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ec:	f003 0304 	and.w	r3, r3, #4
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d011      	beq.n	800d818 <HAL_UART_IRQHandler+0x128>
 800d7f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7f8:	f003 0301 	and.w	r3, r3, #1
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00b      	beq.n	800d818 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2204      	movs	r2, #4
 800d806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80e:	f043 0202 	orr.w	r2, r3, #2
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d81c:	f003 0308 	and.w	r3, r3, #8
 800d820:	2b00      	cmp	r3, #0
 800d822:	d017      	beq.n	800d854 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d828:	f003 0320 	and.w	r3, r3, #32
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d105      	bne.n	800d83c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d830:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d834:	4b5c      	ldr	r3, [pc, #368]	; (800d9a8 <HAL_UART_IRQHandler+0x2b8>)
 800d836:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00b      	beq.n	800d854 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2208      	movs	r2, #8
 800d842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d84a:	f043 0208 	orr.w	r2, r3, #8
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d012      	beq.n	800d886 <HAL_UART_IRQHandler+0x196>
 800d860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00c      	beq.n	800d886 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d87c:	f043 0220 	orr.w	r2, r3, #32
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 82dd 	beq.w	800de4c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d896:	f003 0320 	and.w	r3, r3, #32
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d013      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d89e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8a2:	f003 0320 	and.w	r3, r3, #32
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d105      	bne.n	800d8b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d007      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d003      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8da:	2b40      	cmp	r3, #64	; 0x40
 800d8dc:	d005      	beq.n	800d8ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d054      	beq.n	800d994 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f001 fafa 	bl	800eee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fa:	2b40      	cmp	r3, #64	; 0x40
 800d8fc:	d146      	bne.n	800d98c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3308      	adds	r3, #8
 800d904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d90c:	e853 3f00 	ldrex	r3, [r3]
 800d910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d91c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3308      	adds	r3, #8
 800d926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d92a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d92e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d93a:	e841 2300 	strex	r3, r2, [r1]
 800d93e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1d9      	bne.n	800d8fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d950:	2b00      	cmp	r3, #0
 800d952:	d017      	beq.n	800d984 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d95a:	4a15      	ldr	r2, [pc, #84]	; (800d9b0 <HAL_UART_IRQHandler+0x2c0>)
 800d95c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d964:	4618      	mov	r0, r3
 800d966:	f7f8 f9db 	bl	8005d20 <HAL_DMA_Abort_IT>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d019      	beq.n	800d9a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d97e:	4610      	mov	r0, r2
 800d980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d982:	e00f      	b.n	800d9a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 fa77 	bl	800de78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d98a:	e00b      	b.n	800d9a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fa73 	bl	800de78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d992:	e007      	b.n	800d9a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 fa6f 	bl	800de78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d9a2:	e253      	b.n	800de4c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9a4:	bf00      	nop
    return;
 800d9a6:	e251      	b.n	800de4c <HAL_UART_IRQHandler+0x75c>
 800d9a8:	10000001 	.word	0x10000001
 800d9ac:	04000120 	.word	0x04000120
 800d9b0:	0800efb1 	.word	0x0800efb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	f040 81e7 	bne.w	800dd8c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d9be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9c2:	f003 0310 	and.w	r3, r3, #16
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 81e0 	beq.w	800dd8c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d0:	f003 0310 	and.w	r3, r3, #16
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 81d9 	beq.w	800dd8c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2210      	movs	r2, #16
 800d9e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ec:	2b40      	cmp	r3, #64	; 0x40
 800d9ee:	f040 8151 	bne.w	800dc94 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a96      	ldr	r2, [pc, #600]	; (800dc54 <HAL_UART_IRQHandler+0x564>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d068      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a93      	ldr	r2, [pc, #588]	; (800dc58 <HAL_UART_IRQHandler+0x568>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d061      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a91      	ldr	r2, [pc, #580]	; (800dc5c <HAL_UART_IRQHandler+0x56c>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d05a      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a8e      	ldr	r2, [pc, #568]	; (800dc60 <HAL_UART_IRQHandler+0x570>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d053      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a8c      	ldr	r2, [pc, #560]	; (800dc64 <HAL_UART_IRQHandler+0x574>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d04c      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a89      	ldr	r2, [pc, #548]	; (800dc68 <HAL_UART_IRQHandler+0x578>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d045      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a87      	ldr	r2, [pc, #540]	; (800dc6c <HAL_UART_IRQHandler+0x57c>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d03e      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a84      	ldr	r2, [pc, #528]	; (800dc70 <HAL_UART_IRQHandler+0x580>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d037      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a82      	ldr	r2, [pc, #520]	; (800dc74 <HAL_UART_IRQHandler+0x584>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d030      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a7f      	ldr	r2, [pc, #508]	; (800dc78 <HAL_UART_IRQHandler+0x588>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d029      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a7d      	ldr	r2, [pc, #500]	; (800dc7c <HAL_UART_IRQHandler+0x58c>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d022      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a7a      	ldr	r2, [pc, #488]	; (800dc80 <HAL_UART_IRQHandler+0x590>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d01b      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a78      	ldr	r2, [pc, #480]	; (800dc84 <HAL_UART_IRQHandler+0x594>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d014      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a75      	ldr	r2, [pc, #468]	; (800dc88 <HAL_UART_IRQHandler+0x598>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d00d      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a73      	ldr	r2, [pc, #460]	; (800dc8c <HAL_UART_IRQHandler+0x59c>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d006      	beq.n	800dad2 <HAL_UART_IRQHandler+0x3e2>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a70      	ldr	r2, [pc, #448]	; (800dc90 <HAL_UART_IRQHandler+0x5a0>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d106      	bne.n	800dae0 <HAL_UART_IRQHandler+0x3f0>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	e005      	b.n	800daec <HAL_UART_IRQHandler+0x3fc>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	b29b      	uxth	r3, r3
 800daec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800daf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f000 81ab 	beq.w	800de50 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db04:	429a      	cmp	r2, r3
 800db06:	f080 81a3 	bcs.w	800de50 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db1a:	69db      	ldr	r3, [r3, #28]
 800db1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db20:	f000 8087 	beq.w	800dc32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db30:	e853 3f00 	ldrex	r3, [r3]
 800db34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800db38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	461a      	mov	r2, r3
 800db4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800db4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db5e:	e841 2300 	strex	r3, r2, [r1]
 800db62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800db66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1da      	bne.n	800db24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	3308      	adds	r3, #8
 800db74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db78:	e853 3f00 	ldrex	r3, [r3]
 800db7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800db7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db80:	f023 0301 	bic.w	r3, r3, #1
 800db84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	3308      	adds	r3, #8
 800db8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800db92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800db96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800db9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800db9e:	e841 2300 	strex	r3, r2, [r1]
 800dba2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1e1      	bne.n	800db6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3308      	adds	r3, #8
 800dbb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbb4:	e853 3f00 	ldrex	r3, [r3]
 800dbb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dbba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3308      	adds	r3, #8
 800dbca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dbce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dbd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dbd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbd6:	e841 2300 	strex	r3, r2, [r1]
 800dbda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dbdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1e3      	bne.n	800dbaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2220      	movs	r2, #32
 800dbe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbf8:	e853 3f00 	ldrex	r3, [r3]
 800dbfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc00:	f023 0310 	bic.w	r3, r3, #16
 800dc04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc12:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc1a:	e841 2300 	strex	r3, r2, [r1]
 800dc1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1e4      	bne.n	800dbf0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7f7 fd59 	bl	80056e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2202      	movs	r2, #2
 800dc36:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f91d 	bl	800de8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc52:	e0fd      	b.n	800de50 <HAL_UART_IRQHandler+0x760>
 800dc54:	40020010 	.word	0x40020010
 800dc58:	40020028 	.word	0x40020028
 800dc5c:	40020040 	.word	0x40020040
 800dc60:	40020058 	.word	0x40020058
 800dc64:	40020070 	.word	0x40020070
 800dc68:	40020088 	.word	0x40020088
 800dc6c:	400200a0 	.word	0x400200a0
 800dc70:	400200b8 	.word	0x400200b8
 800dc74:	40020410 	.word	0x40020410
 800dc78:	40020428 	.word	0x40020428
 800dc7c:	40020440 	.word	0x40020440
 800dc80:	40020458 	.word	0x40020458
 800dc84:	40020470 	.word	0x40020470
 800dc88:	40020488 	.word	0x40020488
 800dc8c:	400204a0 	.word	0x400204a0
 800dc90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f000 80cf 	beq.w	800de54 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dcb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 80ca 	beq.w	800de54 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc8:	e853 3f00 	ldrex	r3, [r3]
 800dccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dce2:	647b      	str	r3, [r7, #68]	; 0x44
 800dce4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcea:	e841 2300 	strex	r3, r2, [r1]
 800dcee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1e4      	bne.n	800dcc0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	e853 3f00 	ldrex	r3, [r3]
 800dd04:	623b      	str	r3, [r7, #32]
   return(result);
 800dd06:	6a3a      	ldr	r2, [r7, #32]
 800dd08:	4b55      	ldr	r3, [pc, #340]	; (800de60 <HAL_UART_IRQHandler+0x770>)
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	3308      	adds	r3, #8
 800dd16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd1a:	633a      	str	r2, [r7, #48]	; 0x30
 800dd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd22:	e841 2300 	strex	r3, r2, [r1]
 800dd26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1e3      	bne.n	800dcf6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2220      	movs	r2, #32
 800dd32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	e853 3f00 	ldrex	r3, [r3]
 800dd4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f023 0310 	bic.w	r3, r3, #16
 800dd56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd64:	61fb      	str	r3, [r7, #28]
 800dd66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd68:	69b9      	ldr	r1, [r7, #24]
 800dd6a:	69fa      	ldr	r2, [r7, #28]
 800dd6c:	e841 2300 	strex	r3, r2, [r1]
 800dd70:	617b      	str	r3, [r7, #20]
   return(result);
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e4      	bne.n	800dd42 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd82:	4619      	mov	r1, r3
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f881 	bl	800de8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd8a:	e063      	b.n	800de54 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00e      	beq.n	800ddb6 <HAL_UART_IRQHandler+0x6c6>
 800dd98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d008      	beq.n	800ddb6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ddac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f001 f93f 	bl	800f032 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddb4:	e051      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ddb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d014      	beq.n	800ddec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ddc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d105      	bne.n	800ddda <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ddce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d008      	beq.n	800ddec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d03a      	beq.n	800de58 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	4798      	blx	r3
    }
    return;
 800ddea:	e035      	b.n	800de58 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ddec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d009      	beq.n	800de0c <HAL_UART_IRQHandler+0x71c>
 800ddf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f001 f8e9 	bl	800efdc <UART_EndTransmit_IT>
    return;
 800de0a:	e026      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d009      	beq.n	800de2c <HAL_UART_IRQHandler+0x73c>
 800de18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d003      	beq.n	800de2c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f001 f918 	bl	800f05a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de2a:	e016      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d010      	beq.n	800de5a <HAL_UART_IRQHandler+0x76a>
 800de38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	da0c      	bge.n	800de5a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f001 f900 	bl	800f046 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de46:	e008      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
      return;
 800de48:	bf00      	nop
 800de4a:	e006      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
    return;
 800de4c:	bf00      	nop
 800de4e:	e004      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
      return;
 800de50:	bf00      	nop
 800de52:	e002      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
      return;
 800de54:	bf00      	nop
 800de56:	e000      	b.n	800de5a <HAL_UART_IRQHandler+0x76a>
    return;
 800de58:	bf00      	nop
  }
}
 800de5a:	37e8      	adds	r7, #232	; 0xe8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	effffffe 	.word	0xeffffffe

0800de64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800de6c:	bf00      	nop
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800de98:	bf00      	nop
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dea8:	b092      	sub	sp, #72	; 0x48
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	689a      	ldr	r2, [r3, #8]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	431a      	orrs	r2, r3
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	431a      	orrs	r2, r3
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	69db      	ldr	r3, [r3, #28]
 800dec8:	4313      	orrs	r3, r2
 800deca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4bbe      	ldr	r3, [pc, #760]	; (800e1cc <UART_SetConfig+0x328>)
 800ded4:	4013      	ands	r3, r2
 800ded6:	697a      	ldr	r2, [r7, #20]
 800ded8:	6812      	ldr	r2, [r2, #0]
 800deda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dedc:	430b      	orrs	r3, r1
 800dede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	68da      	ldr	r2, [r3, #12]
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	430a      	orrs	r2, r1
 800def4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	699b      	ldr	r3, [r3, #24]
 800defa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4ab3      	ldr	r2, [pc, #716]	; (800e1d0 <UART_SetConfig+0x32c>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d004      	beq.n	800df10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	6a1b      	ldr	r3, [r3, #32]
 800df0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df0c:	4313      	orrs	r3, r2
 800df0e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689a      	ldr	r2, [r3, #8]
 800df16:	4baf      	ldr	r3, [pc, #700]	; (800e1d4 <UART_SetConfig+0x330>)
 800df18:	4013      	ands	r3, r2
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	6812      	ldr	r2, [r2, #0]
 800df1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df20:	430b      	orrs	r3, r1
 800df22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2a:	f023 010f 	bic.w	r1, r3, #15
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	430a      	orrs	r2, r1
 800df38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4aa6      	ldr	r2, [pc, #664]	; (800e1d8 <UART_SetConfig+0x334>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d177      	bne.n	800e034 <UART_SetConfig+0x190>
 800df44:	4ba5      	ldr	r3, [pc, #660]	; (800e1dc <UART_SetConfig+0x338>)
 800df46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df4c:	2b28      	cmp	r3, #40	; 0x28
 800df4e:	d86d      	bhi.n	800e02c <UART_SetConfig+0x188>
 800df50:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <UART_SetConfig+0xb4>)
 800df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df56:	bf00      	nop
 800df58:	0800dffd 	.word	0x0800dffd
 800df5c:	0800e02d 	.word	0x0800e02d
 800df60:	0800e02d 	.word	0x0800e02d
 800df64:	0800e02d 	.word	0x0800e02d
 800df68:	0800e02d 	.word	0x0800e02d
 800df6c:	0800e02d 	.word	0x0800e02d
 800df70:	0800e02d 	.word	0x0800e02d
 800df74:	0800e02d 	.word	0x0800e02d
 800df78:	0800e005 	.word	0x0800e005
 800df7c:	0800e02d 	.word	0x0800e02d
 800df80:	0800e02d 	.word	0x0800e02d
 800df84:	0800e02d 	.word	0x0800e02d
 800df88:	0800e02d 	.word	0x0800e02d
 800df8c:	0800e02d 	.word	0x0800e02d
 800df90:	0800e02d 	.word	0x0800e02d
 800df94:	0800e02d 	.word	0x0800e02d
 800df98:	0800e00d 	.word	0x0800e00d
 800df9c:	0800e02d 	.word	0x0800e02d
 800dfa0:	0800e02d 	.word	0x0800e02d
 800dfa4:	0800e02d 	.word	0x0800e02d
 800dfa8:	0800e02d 	.word	0x0800e02d
 800dfac:	0800e02d 	.word	0x0800e02d
 800dfb0:	0800e02d 	.word	0x0800e02d
 800dfb4:	0800e02d 	.word	0x0800e02d
 800dfb8:	0800e015 	.word	0x0800e015
 800dfbc:	0800e02d 	.word	0x0800e02d
 800dfc0:	0800e02d 	.word	0x0800e02d
 800dfc4:	0800e02d 	.word	0x0800e02d
 800dfc8:	0800e02d 	.word	0x0800e02d
 800dfcc:	0800e02d 	.word	0x0800e02d
 800dfd0:	0800e02d 	.word	0x0800e02d
 800dfd4:	0800e02d 	.word	0x0800e02d
 800dfd8:	0800e01d 	.word	0x0800e01d
 800dfdc:	0800e02d 	.word	0x0800e02d
 800dfe0:	0800e02d 	.word	0x0800e02d
 800dfe4:	0800e02d 	.word	0x0800e02d
 800dfe8:	0800e02d 	.word	0x0800e02d
 800dfec:	0800e02d 	.word	0x0800e02d
 800dff0:	0800e02d 	.word	0x0800e02d
 800dff4:	0800e02d 	.word	0x0800e02d
 800dff8:	0800e025 	.word	0x0800e025
 800dffc:	2301      	movs	r3, #1
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e002:	e326      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e004:	2304      	movs	r3, #4
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00a:	e322      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e00c:	2308      	movs	r3, #8
 800e00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e012:	e31e      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e014:	2310      	movs	r3, #16
 800e016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01a:	e31a      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e01c:	2320      	movs	r3, #32
 800e01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e022:	e316      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e024:	2340      	movs	r3, #64	; 0x40
 800e026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02a:	e312      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e02c:	2380      	movs	r3, #128	; 0x80
 800e02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e032:	e30e      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a69      	ldr	r2, [pc, #420]	; (800e1e0 <UART_SetConfig+0x33c>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d130      	bne.n	800e0a0 <UART_SetConfig+0x1fc>
 800e03e:	4b67      	ldr	r3, [pc, #412]	; (800e1dc <UART_SetConfig+0x338>)
 800e040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e042:	f003 0307 	and.w	r3, r3, #7
 800e046:	2b05      	cmp	r3, #5
 800e048:	d826      	bhi.n	800e098 <UART_SetConfig+0x1f4>
 800e04a:	a201      	add	r2, pc, #4	; (adr r2, 800e050 <UART_SetConfig+0x1ac>)
 800e04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e050:	0800e069 	.word	0x0800e069
 800e054:	0800e071 	.word	0x0800e071
 800e058:	0800e079 	.word	0x0800e079
 800e05c:	0800e081 	.word	0x0800e081
 800e060:	0800e089 	.word	0x0800e089
 800e064:	0800e091 	.word	0x0800e091
 800e068:	2300      	movs	r3, #0
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06e:	e2f0      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e070:	2304      	movs	r3, #4
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e076:	e2ec      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e078:	2308      	movs	r3, #8
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07e:	e2e8      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e080:	2310      	movs	r3, #16
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e086:	e2e4      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e088:	2320      	movs	r3, #32
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08e:	e2e0      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e090:	2340      	movs	r3, #64	; 0x40
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e2dc      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e098:	2380      	movs	r3, #128	; 0x80
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e2d8      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a4f      	ldr	r2, [pc, #316]	; (800e1e4 <UART_SetConfig+0x340>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d130      	bne.n	800e10c <UART_SetConfig+0x268>
 800e0aa:	4b4c      	ldr	r3, [pc, #304]	; (800e1dc <UART_SetConfig+0x338>)
 800e0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ae:	f003 0307 	and.w	r3, r3, #7
 800e0b2:	2b05      	cmp	r3, #5
 800e0b4:	d826      	bhi.n	800e104 <UART_SetConfig+0x260>
 800e0b6:	a201      	add	r2, pc, #4	; (adr r2, 800e0bc <UART_SetConfig+0x218>)
 800e0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0bc:	0800e0d5 	.word	0x0800e0d5
 800e0c0:	0800e0dd 	.word	0x0800e0dd
 800e0c4:	0800e0e5 	.word	0x0800e0e5
 800e0c8:	0800e0ed 	.word	0x0800e0ed
 800e0cc:	0800e0f5 	.word	0x0800e0f5
 800e0d0:	0800e0fd 	.word	0x0800e0fd
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0da:	e2ba      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e0dc:	2304      	movs	r3, #4
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e2:	e2b6      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e0e4:	2308      	movs	r3, #8
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ea:	e2b2      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e0ec:	2310      	movs	r3, #16
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f2:	e2ae      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e0f4:	2320      	movs	r3, #32
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fa:	e2aa      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e0fc:	2340      	movs	r3, #64	; 0x40
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e2a6      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e104:	2380      	movs	r3, #128	; 0x80
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e2a2      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a35      	ldr	r2, [pc, #212]	; (800e1e8 <UART_SetConfig+0x344>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d130      	bne.n	800e178 <UART_SetConfig+0x2d4>
 800e116:	4b31      	ldr	r3, [pc, #196]	; (800e1dc <UART_SetConfig+0x338>)
 800e118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e11a:	f003 0307 	and.w	r3, r3, #7
 800e11e:	2b05      	cmp	r3, #5
 800e120:	d826      	bhi.n	800e170 <UART_SetConfig+0x2cc>
 800e122:	a201      	add	r2, pc, #4	; (adr r2, 800e128 <UART_SetConfig+0x284>)
 800e124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e128:	0800e141 	.word	0x0800e141
 800e12c:	0800e149 	.word	0x0800e149
 800e130:	0800e151 	.word	0x0800e151
 800e134:	0800e159 	.word	0x0800e159
 800e138:	0800e161 	.word	0x0800e161
 800e13c:	0800e169 	.word	0x0800e169
 800e140:	2300      	movs	r3, #0
 800e142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e146:	e284      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e148:	2304      	movs	r3, #4
 800e14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14e:	e280      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e150:	2308      	movs	r3, #8
 800e152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e156:	e27c      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e158:	2310      	movs	r3, #16
 800e15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15e:	e278      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e160:	2320      	movs	r3, #32
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e166:	e274      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e168:	2340      	movs	r3, #64	; 0x40
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e270      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e170:	2380      	movs	r3, #128	; 0x80
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e26c      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a1b      	ldr	r2, [pc, #108]	; (800e1ec <UART_SetConfig+0x348>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d142      	bne.n	800e208 <UART_SetConfig+0x364>
 800e182:	4b16      	ldr	r3, [pc, #88]	; (800e1dc <UART_SetConfig+0x338>)
 800e184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	2b05      	cmp	r3, #5
 800e18c:	d838      	bhi.n	800e200 <UART_SetConfig+0x35c>
 800e18e:	a201      	add	r2, pc, #4	; (adr r2, 800e194 <UART_SetConfig+0x2f0>)
 800e190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e194:	0800e1ad 	.word	0x0800e1ad
 800e198:	0800e1b5 	.word	0x0800e1b5
 800e19c:	0800e1bd 	.word	0x0800e1bd
 800e1a0:	0800e1c5 	.word	0x0800e1c5
 800e1a4:	0800e1f1 	.word	0x0800e1f1
 800e1a8:	0800e1f9 	.word	0x0800e1f9
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b2:	e24e      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e1b4:	2304      	movs	r3, #4
 800e1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ba:	e24a      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e1bc:	2308      	movs	r3, #8
 800e1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c2:	e246      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e1c4:	2310      	movs	r3, #16
 800e1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ca:	e242      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e1cc:	cfff69f3 	.word	0xcfff69f3
 800e1d0:	58000c00 	.word	0x58000c00
 800e1d4:	11fff4ff 	.word	0x11fff4ff
 800e1d8:	40011000 	.word	0x40011000
 800e1dc:	58024400 	.word	0x58024400
 800e1e0:	40004400 	.word	0x40004400
 800e1e4:	40004800 	.word	0x40004800
 800e1e8:	40004c00 	.word	0x40004c00
 800e1ec:	40005000 	.word	0x40005000
 800e1f0:	2320      	movs	r3, #32
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e22c      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e1f8:	2340      	movs	r3, #64	; 0x40
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e228      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e200:	2380      	movs	r3, #128	; 0x80
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e224      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4ab1      	ldr	r2, [pc, #708]	; (800e4d4 <UART_SetConfig+0x630>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d176      	bne.n	800e300 <UART_SetConfig+0x45c>
 800e212:	4bb1      	ldr	r3, [pc, #708]	; (800e4d8 <UART_SetConfig+0x634>)
 800e214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e21a:	2b28      	cmp	r3, #40	; 0x28
 800e21c:	d86c      	bhi.n	800e2f8 <UART_SetConfig+0x454>
 800e21e:	a201      	add	r2, pc, #4	; (adr r2, 800e224 <UART_SetConfig+0x380>)
 800e220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e224:	0800e2c9 	.word	0x0800e2c9
 800e228:	0800e2f9 	.word	0x0800e2f9
 800e22c:	0800e2f9 	.word	0x0800e2f9
 800e230:	0800e2f9 	.word	0x0800e2f9
 800e234:	0800e2f9 	.word	0x0800e2f9
 800e238:	0800e2f9 	.word	0x0800e2f9
 800e23c:	0800e2f9 	.word	0x0800e2f9
 800e240:	0800e2f9 	.word	0x0800e2f9
 800e244:	0800e2d1 	.word	0x0800e2d1
 800e248:	0800e2f9 	.word	0x0800e2f9
 800e24c:	0800e2f9 	.word	0x0800e2f9
 800e250:	0800e2f9 	.word	0x0800e2f9
 800e254:	0800e2f9 	.word	0x0800e2f9
 800e258:	0800e2f9 	.word	0x0800e2f9
 800e25c:	0800e2f9 	.word	0x0800e2f9
 800e260:	0800e2f9 	.word	0x0800e2f9
 800e264:	0800e2d9 	.word	0x0800e2d9
 800e268:	0800e2f9 	.word	0x0800e2f9
 800e26c:	0800e2f9 	.word	0x0800e2f9
 800e270:	0800e2f9 	.word	0x0800e2f9
 800e274:	0800e2f9 	.word	0x0800e2f9
 800e278:	0800e2f9 	.word	0x0800e2f9
 800e27c:	0800e2f9 	.word	0x0800e2f9
 800e280:	0800e2f9 	.word	0x0800e2f9
 800e284:	0800e2e1 	.word	0x0800e2e1
 800e288:	0800e2f9 	.word	0x0800e2f9
 800e28c:	0800e2f9 	.word	0x0800e2f9
 800e290:	0800e2f9 	.word	0x0800e2f9
 800e294:	0800e2f9 	.word	0x0800e2f9
 800e298:	0800e2f9 	.word	0x0800e2f9
 800e29c:	0800e2f9 	.word	0x0800e2f9
 800e2a0:	0800e2f9 	.word	0x0800e2f9
 800e2a4:	0800e2e9 	.word	0x0800e2e9
 800e2a8:	0800e2f9 	.word	0x0800e2f9
 800e2ac:	0800e2f9 	.word	0x0800e2f9
 800e2b0:	0800e2f9 	.word	0x0800e2f9
 800e2b4:	0800e2f9 	.word	0x0800e2f9
 800e2b8:	0800e2f9 	.word	0x0800e2f9
 800e2bc:	0800e2f9 	.word	0x0800e2f9
 800e2c0:	0800e2f9 	.word	0x0800e2f9
 800e2c4:	0800e2f1 	.word	0x0800e2f1
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ce:	e1c0      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e2d0:	2304      	movs	r3, #4
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e1bc      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e2d8:	2308      	movs	r3, #8
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2de:	e1b8      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e2e0:	2310      	movs	r3, #16
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e1b4      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e2e8:	2320      	movs	r3, #32
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e1b0      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e2f0:	2340      	movs	r3, #64	; 0x40
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e1ac      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e2f8:	2380      	movs	r3, #128	; 0x80
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e1a8      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a75      	ldr	r2, [pc, #468]	; (800e4dc <UART_SetConfig+0x638>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d130      	bne.n	800e36c <UART_SetConfig+0x4c8>
 800e30a:	4b73      	ldr	r3, [pc, #460]	; (800e4d8 <UART_SetConfig+0x634>)
 800e30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30e:	f003 0307 	and.w	r3, r3, #7
 800e312:	2b05      	cmp	r3, #5
 800e314:	d826      	bhi.n	800e364 <UART_SetConfig+0x4c0>
 800e316:	a201      	add	r2, pc, #4	; (adr r2, 800e31c <UART_SetConfig+0x478>)
 800e318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31c:	0800e335 	.word	0x0800e335
 800e320:	0800e33d 	.word	0x0800e33d
 800e324:	0800e345 	.word	0x0800e345
 800e328:	0800e34d 	.word	0x0800e34d
 800e32c:	0800e355 	.word	0x0800e355
 800e330:	0800e35d 	.word	0x0800e35d
 800e334:	2300      	movs	r3, #0
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e18a      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e33c:	2304      	movs	r3, #4
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e186      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e344:	2308      	movs	r3, #8
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e182      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e34c:	2310      	movs	r3, #16
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e17e      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e354:	2320      	movs	r3, #32
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e17a      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e35c:	2340      	movs	r3, #64	; 0x40
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e176      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e364:	2380      	movs	r3, #128	; 0x80
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36a:	e172      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a5b      	ldr	r2, [pc, #364]	; (800e4e0 <UART_SetConfig+0x63c>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d130      	bne.n	800e3d8 <UART_SetConfig+0x534>
 800e376:	4b58      	ldr	r3, [pc, #352]	; (800e4d8 <UART_SetConfig+0x634>)
 800e378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e37a:	f003 0307 	and.w	r3, r3, #7
 800e37e:	2b05      	cmp	r3, #5
 800e380:	d826      	bhi.n	800e3d0 <UART_SetConfig+0x52c>
 800e382:	a201      	add	r2, pc, #4	; (adr r2, 800e388 <UART_SetConfig+0x4e4>)
 800e384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e388:	0800e3a1 	.word	0x0800e3a1
 800e38c:	0800e3a9 	.word	0x0800e3a9
 800e390:	0800e3b1 	.word	0x0800e3b1
 800e394:	0800e3b9 	.word	0x0800e3b9
 800e398:	0800e3c1 	.word	0x0800e3c1
 800e39c:	0800e3c9 	.word	0x0800e3c9
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e154      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e3a8:	2304      	movs	r3, #4
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e150      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e3b0:	2308      	movs	r3, #8
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e14c      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e3b8:	2310      	movs	r3, #16
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3be:	e148      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e3c0:	2320      	movs	r3, #32
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c6:	e144      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e3c8:	2340      	movs	r3, #64	; 0x40
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e140      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e3d0:	2380      	movs	r3, #128	; 0x80
 800e3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d6:	e13c      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a41      	ldr	r2, [pc, #260]	; (800e4e4 <UART_SetConfig+0x640>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	f040 8082 	bne.w	800e4e8 <UART_SetConfig+0x644>
 800e3e4:	4b3c      	ldr	r3, [pc, #240]	; (800e4d8 <UART_SetConfig+0x634>)
 800e3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3ec:	2b28      	cmp	r3, #40	; 0x28
 800e3ee:	d86d      	bhi.n	800e4cc <UART_SetConfig+0x628>
 800e3f0:	a201      	add	r2, pc, #4	; (adr r2, 800e3f8 <UART_SetConfig+0x554>)
 800e3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f6:	bf00      	nop
 800e3f8:	0800e49d 	.word	0x0800e49d
 800e3fc:	0800e4cd 	.word	0x0800e4cd
 800e400:	0800e4cd 	.word	0x0800e4cd
 800e404:	0800e4cd 	.word	0x0800e4cd
 800e408:	0800e4cd 	.word	0x0800e4cd
 800e40c:	0800e4cd 	.word	0x0800e4cd
 800e410:	0800e4cd 	.word	0x0800e4cd
 800e414:	0800e4cd 	.word	0x0800e4cd
 800e418:	0800e4a5 	.word	0x0800e4a5
 800e41c:	0800e4cd 	.word	0x0800e4cd
 800e420:	0800e4cd 	.word	0x0800e4cd
 800e424:	0800e4cd 	.word	0x0800e4cd
 800e428:	0800e4cd 	.word	0x0800e4cd
 800e42c:	0800e4cd 	.word	0x0800e4cd
 800e430:	0800e4cd 	.word	0x0800e4cd
 800e434:	0800e4cd 	.word	0x0800e4cd
 800e438:	0800e4ad 	.word	0x0800e4ad
 800e43c:	0800e4cd 	.word	0x0800e4cd
 800e440:	0800e4cd 	.word	0x0800e4cd
 800e444:	0800e4cd 	.word	0x0800e4cd
 800e448:	0800e4cd 	.word	0x0800e4cd
 800e44c:	0800e4cd 	.word	0x0800e4cd
 800e450:	0800e4cd 	.word	0x0800e4cd
 800e454:	0800e4cd 	.word	0x0800e4cd
 800e458:	0800e4b5 	.word	0x0800e4b5
 800e45c:	0800e4cd 	.word	0x0800e4cd
 800e460:	0800e4cd 	.word	0x0800e4cd
 800e464:	0800e4cd 	.word	0x0800e4cd
 800e468:	0800e4cd 	.word	0x0800e4cd
 800e46c:	0800e4cd 	.word	0x0800e4cd
 800e470:	0800e4cd 	.word	0x0800e4cd
 800e474:	0800e4cd 	.word	0x0800e4cd
 800e478:	0800e4bd 	.word	0x0800e4bd
 800e47c:	0800e4cd 	.word	0x0800e4cd
 800e480:	0800e4cd 	.word	0x0800e4cd
 800e484:	0800e4cd 	.word	0x0800e4cd
 800e488:	0800e4cd 	.word	0x0800e4cd
 800e48c:	0800e4cd 	.word	0x0800e4cd
 800e490:	0800e4cd 	.word	0x0800e4cd
 800e494:	0800e4cd 	.word	0x0800e4cd
 800e498:	0800e4c5 	.word	0x0800e4c5
 800e49c:	2301      	movs	r3, #1
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e0d6      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e4a4:	2304      	movs	r3, #4
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e0d2      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e4ac:	2308      	movs	r3, #8
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e0ce      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e4b4:	2310      	movs	r3, #16
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e0ca      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e4bc:	2320      	movs	r3, #32
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c2:	e0c6      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e4c4:	2340      	movs	r3, #64	; 0x40
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ca:	e0c2      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e4cc:	2380      	movs	r3, #128	; 0x80
 800e4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d2:	e0be      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e4d4:	40011400 	.word	0x40011400
 800e4d8:	58024400 	.word	0x58024400
 800e4dc:	40007800 	.word	0x40007800
 800e4e0:	40007c00 	.word	0x40007c00
 800e4e4:	40011800 	.word	0x40011800
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4aad      	ldr	r2, [pc, #692]	; (800e7a4 <UART_SetConfig+0x900>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d176      	bne.n	800e5e0 <UART_SetConfig+0x73c>
 800e4f2:	4bad      	ldr	r3, [pc, #692]	; (800e7a8 <UART_SetConfig+0x904>)
 800e4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4fa:	2b28      	cmp	r3, #40	; 0x28
 800e4fc:	d86c      	bhi.n	800e5d8 <UART_SetConfig+0x734>
 800e4fe:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <UART_SetConfig+0x660>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e5a9 	.word	0x0800e5a9
 800e508:	0800e5d9 	.word	0x0800e5d9
 800e50c:	0800e5d9 	.word	0x0800e5d9
 800e510:	0800e5d9 	.word	0x0800e5d9
 800e514:	0800e5d9 	.word	0x0800e5d9
 800e518:	0800e5d9 	.word	0x0800e5d9
 800e51c:	0800e5d9 	.word	0x0800e5d9
 800e520:	0800e5d9 	.word	0x0800e5d9
 800e524:	0800e5b1 	.word	0x0800e5b1
 800e528:	0800e5d9 	.word	0x0800e5d9
 800e52c:	0800e5d9 	.word	0x0800e5d9
 800e530:	0800e5d9 	.word	0x0800e5d9
 800e534:	0800e5d9 	.word	0x0800e5d9
 800e538:	0800e5d9 	.word	0x0800e5d9
 800e53c:	0800e5d9 	.word	0x0800e5d9
 800e540:	0800e5d9 	.word	0x0800e5d9
 800e544:	0800e5b9 	.word	0x0800e5b9
 800e548:	0800e5d9 	.word	0x0800e5d9
 800e54c:	0800e5d9 	.word	0x0800e5d9
 800e550:	0800e5d9 	.word	0x0800e5d9
 800e554:	0800e5d9 	.word	0x0800e5d9
 800e558:	0800e5d9 	.word	0x0800e5d9
 800e55c:	0800e5d9 	.word	0x0800e5d9
 800e560:	0800e5d9 	.word	0x0800e5d9
 800e564:	0800e5c1 	.word	0x0800e5c1
 800e568:	0800e5d9 	.word	0x0800e5d9
 800e56c:	0800e5d9 	.word	0x0800e5d9
 800e570:	0800e5d9 	.word	0x0800e5d9
 800e574:	0800e5d9 	.word	0x0800e5d9
 800e578:	0800e5d9 	.word	0x0800e5d9
 800e57c:	0800e5d9 	.word	0x0800e5d9
 800e580:	0800e5d9 	.word	0x0800e5d9
 800e584:	0800e5c9 	.word	0x0800e5c9
 800e588:	0800e5d9 	.word	0x0800e5d9
 800e58c:	0800e5d9 	.word	0x0800e5d9
 800e590:	0800e5d9 	.word	0x0800e5d9
 800e594:	0800e5d9 	.word	0x0800e5d9
 800e598:	0800e5d9 	.word	0x0800e5d9
 800e59c:	0800e5d9 	.word	0x0800e5d9
 800e5a0:	0800e5d9 	.word	0x0800e5d9
 800e5a4:	0800e5d1 	.word	0x0800e5d1
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ae:	e050      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e5b0:	2304      	movs	r3, #4
 800e5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b6:	e04c      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e5b8:	2308      	movs	r3, #8
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5be:	e048      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e5c0:	2310      	movs	r3, #16
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e044      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e5c8:	2320      	movs	r3, #32
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e040      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e5d0:	2340      	movs	r3, #64	; 0x40
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e03c      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e5d8:	2380      	movs	r3, #128	; 0x80
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e038      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a71      	ldr	r2, [pc, #452]	; (800e7ac <UART_SetConfig+0x908>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d130      	bne.n	800e64c <UART_SetConfig+0x7a8>
 800e5ea:	4b6f      	ldr	r3, [pc, #444]	; (800e7a8 <UART_SetConfig+0x904>)
 800e5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ee:	f003 0307 	and.w	r3, r3, #7
 800e5f2:	2b05      	cmp	r3, #5
 800e5f4:	d826      	bhi.n	800e644 <UART_SetConfig+0x7a0>
 800e5f6:	a201      	add	r2, pc, #4	; (adr r2, 800e5fc <UART_SetConfig+0x758>)
 800e5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5fc:	0800e615 	.word	0x0800e615
 800e600:	0800e61d 	.word	0x0800e61d
 800e604:	0800e625 	.word	0x0800e625
 800e608:	0800e62d 	.word	0x0800e62d
 800e60c:	0800e635 	.word	0x0800e635
 800e610:	0800e63d 	.word	0x0800e63d
 800e614:	2302      	movs	r3, #2
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e01a      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e61c:	2304      	movs	r3, #4
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e622:	e016      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e624:	2308      	movs	r3, #8
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e012      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e62c:	2310      	movs	r3, #16
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e00e      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e634:	2320      	movs	r3, #32
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e00a      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e63c:	2340      	movs	r3, #64	; 0x40
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e006      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e644:	2380      	movs	r3, #128	; 0x80
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e002      	b.n	800e652 <UART_SetConfig+0x7ae>
 800e64c:	2380      	movs	r3, #128	; 0x80
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4a55      	ldr	r2, [pc, #340]	; (800e7ac <UART_SetConfig+0x908>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	f040 80f8 	bne.w	800e84e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e65e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e662:	2b20      	cmp	r3, #32
 800e664:	dc46      	bgt.n	800e6f4 <UART_SetConfig+0x850>
 800e666:	2b02      	cmp	r3, #2
 800e668:	db75      	blt.n	800e756 <UART_SetConfig+0x8b2>
 800e66a:	3b02      	subs	r3, #2
 800e66c:	2b1e      	cmp	r3, #30
 800e66e:	d872      	bhi.n	800e756 <UART_SetConfig+0x8b2>
 800e670:	a201      	add	r2, pc, #4	; (adr r2, 800e678 <UART_SetConfig+0x7d4>)
 800e672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e676:	bf00      	nop
 800e678:	0800e6fb 	.word	0x0800e6fb
 800e67c:	0800e757 	.word	0x0800e757
 800e680:	0800e703 	.word	0x0800e703
 800e684:	0800e757 	.word	0x0800e757
 800e688:	0800e757 	.word	0x0800e757
 800e68c:	0800e757 	.word	0x0800e757
 800e690:	0800e713 	.word	0x0800e713
 800e694:	0800e757 	.word	0x0800e757
 800e698:	0800e757 	.word	0x0800e757
 800e69c:	0800e757 	.word	0x0800e757
 800e6a0:	0800e757 	.word	0x0800e757
 800e6a4:	0800e757 	.word	0x0800e757
 800e6a8:	0800e757 	.word	0x0800e757
 800e6ac:	0800e757 	.word	0x0800e757
 800e6b0:	0800e723 	.word	0x0800e723
 800e6b4:	0800e757 	.word	0x0800e757
 800e6b8:	0800e757 	.word	0x0800e757
 800e6bc:	0800e757 	.word	0x0800e757
 800e6c0:	0800e757 	.word	0x0800e757
 800e6c4:	0800e757 	.word	0x0800e757
 800e6c8:	0800e757 	.word	0x0800e757
 800e6cc:	0800e757 	.word	0x0800e757
 800e6d0:	0800e757 	.word	0x0800e757
 800e6d4:	0800e757 	.word	0x0800e757
 800e6d8:	0800e757 	.word	0x0800e757
 800e6dc:	0800e757 	.word	0x0800e757
 800e6e0:	0800e757 	.word	0x0800e757
 800e6e4:	0800e757 	.word	0x0800e757
 800e6e8:	0800e757 	.word	0x0800e757
 800e6ec:	0800e757 	.word	0x0800e757
 800e6f0:	0800e749 	.word	0x0800e749
 800e6f4:	2b40      	cmp	r3, #64	; 0x40
 800e6f6:	d02a      	beq.n	800e74e <UART_SetConfig+0x8aa>
 800e6f8:	e02d      	b.n	800e756 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e6fa:	f7fe f879 	bl	800c7f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e6fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e700:	e02f      	b.n	800e762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e706:	4618      	mov	r0, r3
 800e708:	f7fe f888 	bl	800c81c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e710:	e027      	b.n	800e762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e712:	f107 0318 	add.w	r3, r7, #24
 800e716:	4618      	mov	r0, r3
 800e718:	f7fe f9d4 	bl	800cac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e720:	e01f      	b.n	800e762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e722:	4b21      	ldr	r3, [pc, #132]	; (800e7a8 <UART_SetConfig+0x904>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f003 0320 	and.w	r3, r3, #32
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d009      	beq.n	800e742 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e72e:	4b1e      	ldr	r3, [pc, #120]	; (800e7a8 <UART_SetConfig+0x904>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	08db      	lsrs	r3, r3, #3
 800e734:	f003 0303 	and.w	r3, r3, #3
 800e738:	4a1d      	ldr	r2, [pc, #116]	; (800e7b0 <UART_SetConfig+0x90c>)
 800e73a:	fa22 f303 	lsr.w	r3, r2, r3
 800e73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e740:	e00f      	b.n	800e762 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e742:	4b1b      	ldr	r3, [pc, #108]	; (800e7b0 <UART_SetConfig+0x90c>)
 800e744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e746:	e00c      	b.n	800e762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e748:	4b1a      	ldr	r3, [pc, #104]	; (800e7b4 <UART_SetConfig+0x910>)
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e74c:	e009      	b.n	800e762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e74e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e754:	e005      	b.n	800e762 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e756:	2300      	movs	r3, #0
 800e758:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e764:	2b00      	cmp	r3, #0
 800e766:	f000 81ee 	beq.w	800eb46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	4a12      	ldr	r2, [pc, #72]	; (800e7b8 <UART_SetConfig+0x914>)
 800e770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e774:	461a      	mov	r2, r3
 800e776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e778:	fbb3 f3f2 	udiv	r3, r3, r2
 800e77c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	4613      	mov	r3, r2
 800e784:	005b      	lsls	r3, r3, #1
 800e786:	4413      	add	r3, r2
 800e788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d305      	bcc.n	800e79a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e796:	429a      	cmp	r2, r3
 800e798:	d910      	bls.n	800e7bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7a0:	e1d1      	b.n	800eb46 <UART_SetConfig+0xca2>
 800e7a2:	bf00      	nop
 800e7a4:	40011c00 	.word	0x40011c00
 800e7a8:	58024400 	.word	0x58024400
 800e7ac:	58000c00 	.word	0x58000c00
 800e7b0:	03d09000 	.word	0x03d09000
 800e7b4:	003d0900 	.word	0x003d0900
 800e7b8:	08010360 	.word	0x08010360
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7be:	2200      	movs	r2, #0
 800e7c0:	60bb      	str	r3, [r7, #8]
 800e7c2:	60fa      	str	r2, [r7, #12]
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c8:	4ac0      	ldr	r2, [pc, #768]	; (800eacc <UART_SetConfig+0xc28>)
 800e7ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	603b      	str	r3, [r7, #0]
 800e7d4:	607a      	str	r2, [r7, #4]
 800e7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e7de:	f7f1 fd85 	bl	80002ec <__aeabi_uldivmod>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	f04f 0200 	mov.w	r2, #0
 800e7ee:	f04f 0300 	mov.w	r3, #0
 800e7f2:	020b      	lsls	r3, r1, #8
 800e7f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e7f8:	0202      	lsls	r2, r0, #8
 800e7fa:	6979      	ldr	r1, [r7, #20]
 800e7fc:	6849      	ldr	r1, [r1, #4]
 800e7fe:	0849      	lsrs	r1, r1, #1
 800e800:	2000      	movs	r0, #0
 800e802:	460c      	mov	r4, r1
 800e804:	4605      	mov	r5, r0
 800e806:	eb12 0804 	adds.w	r8, r2, r4
 800e80a:	eb43 0905 	adc.w	r9, r3, r5
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	469a      	mov	sl, r3
 800e816:	4693      	mov	fp, r2
 800e818:	4652      	mov	r2, sl
 800e81a:	465b      	mov	r3, fp
 800e81c:	4640      	mov	r0, r8
 800e81e:	4649      	mov	r1, r9
 800e820:	f7f1 fd64 	bl	80002ec <__aeabi_uldivmod>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4613      	mov	r3, r2
 800e82a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e832:	d308      	bcc.n	800e846 <UART_SetConfig+0x9a2>
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e83a:	d204      	bcs.n	800e846 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e842:	60da      	str	r2, [r3, #12]
 800e844:	e17f      	b.n	800eb46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e84c:	e17b      	b.n	800eb46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	69db      	ldr	r3, [r3, #28]
 800e852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e856:	f040 80bd 	bne.w	800e9d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e85a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e85e:	2b20      	cmp	r3, #32
 800e860:	dc48      	bgt.n	800e8f4 <UART_SetConfig+0xa50>
 800e862:	2b00      	cmp	r3, #0
 800e864:	db7b      	blt.n	800e95e <UART_SetConfig+0xaba>
 800e866:	2b20      	cmp	r3, #32
 800e868:	d879      	bhi.n	800e95e <UART_SetConfig+0xaba>
 800e86a:	a201      	add	r2, pc, #4	; (adr r2, 800e870 <UART_SetConfig+0x9cc>)
 800e86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e870:	0800e8fb 	.word	0x0800e8fb
 800e874:	0800e903 	.word	0x0800e903
 800e878:	0800e95f 	.word	0x0800e95f
 800e87c:	0800e95f 	.word	0x0800e95f
 800e880:	0800e90b 	.word	0x0800e90b
 800e884:	0800e95f 	.word	0x0800e95f
 800e888:	0800e95f 	.word	0x0800e95f
 800e88c:	0800e95f 	.word	0x0800e95f
 800e890:	0800e91b 	.word	0x0800e91b
 800e894:	0800e95f 	.word	0x0800e95f
 800e898:	0800e95f 	.word	0x0800e95f
 800e89c:	0800e95f 	.word	0x0800e95f
 800e8a0:	0800e95f 	.word	0x0800e95f
 800e8a4:	0800e95f 	.word	0x0800e95f
 800e8a8:	0800e95f 	.word	0x0800e95f
 800e8ac:	0800e95f 	.word	0x0800e95f
 800e8b0:	0800e92b 	.word	0x0800e92b
 800e8b4:	0800e95f 	.word	0x0800e95f
 800e8b8:	0800e95f 	.word	0x0800e95f
 800e8bc:	0800e95f 	.word	0x0800e95f
 800e8c0:	0800e95f 	.word	0x0800e95f
 800e8c4:	0800e95f 	.word	0x0800e95f
 800e8c8:	0800e95f 	.word	0x0800e95f
 800e8cc:	0800e95f 	.word	0x0800e95f
 800e8d0:	0800e95f 	.word	0x0800e95f
 800e8d4:	0800e95f 	.word	0x0800e95f
 800e8d8:	0800e95f 	.word	0x0800e95f
 800e8dc:	0800e95f 	.word	0x0800e95f
 800e8e0:	0800e95f 	.word	0x0800e95f
 800e8e4:	0800e95f 	.word	0x0800e95f
 800e8e8:	0800e95f 	.word	0x0800e95f
 800e8ec:	0800e95f 	.word	0x0800e95f
 800e8f0:	0800e951 	.word	0x0800e951
 800e8f4:	2b40      	cmp	r3, #64	; 0x40
 800e8f6:	d02e      	beq.n	800e956 <UART_SetConfig+0xab2>
 800e8f8:	e031      	b.n	800e95e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8fa:	f7fc fd8f 	bl	800b41c <HAL_RCC_GetPCLK1Freq>
 800e8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e900:	e033      	b.n	800e96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e902:	f7fc fda1 	bl	800b448 <HAL_RCC_GetPCLK2Freq>
 800e906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e908:	e02f      	b.n	800e96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fd ff84 	bl	800c81c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e918:	e027      	b.n	800e96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e91a:	f107 0318 	add.w	r3, r7, #24
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe f8d0 	bl	800cac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e928:	e01f      	b.n	800e96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e92a:	4b69      	ldr	r3, [pc, #420]	; (800ead0 <UART_SetConfig+0xc2c>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 0320 	and.w	r3, r3, #32
 800e932:	2b00      	cmp	r3, #0
 800e934:	d009      	beq.n	800e94a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e936:	4b66      	ldr	r3, [pc, #408]	; (800ead0 <UART_SetConfig+0xc2c>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	08db      	lsrs	r3, r3, #3
 800e93c:	f003 0303 	and.w	r3, r3, #3
 800e940:	4a64      	ldr	r2, [pc, #400]	; (800ead4 <UART_SetConfig+0xc30>)
 800e942:	fa22 f303 	lsr.w	r3, r2, r3
 800e946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e948:	e00f      	b.n	800e96a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e94a:	4b62      	ldr	r3, [pc, #392]	; (800ead4 <UART_SetConfig+0xc30>)
 800e94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e94e:	e00c      	b.n	800e96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e950:	4b61      	ldr	r3, [pc, #388]	; (800ead8 <UART_SetConfig+0xc34>)
 800e952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e954:	e009      	b.n	800e96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e95c:	e005      	b.n	800e96a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e95e:	2300      	movs	r3, #0
 800e960:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 80ea 	beq.w	800eb46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e976:	4a55      	ldr	r2, [pc, #340]	; (800eacc <UART_SetConfig+0xc28>)
 800e978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e97c:	461a      	mov	r2, r3
 800e97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e980:	fbb3 f3f2 	udiv	r3, r3, r2
 800e984:	005a      	lsls	r2, r3, #1
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	085b      	lsrs	r3, r3, #1
 800e98c:	441a      	add	r2, r3
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	fbb2 f3f3 	udiv	r3, r2, r3
 800e996:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99a:	2b0f      	cmp	r3, #15
 800e99c:	d916      	bls.n	800e9cc <UART_SetConfig+0xb28>
 800e99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9a4:	d212      	bcs.n	800e9cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	f023 030f 	bic.w	r3, r3, #15
 800e9ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	085b      	lsrs	r3, r3, #1
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9c8:	60da      	str	r2, [r3, #12]
 800e9ca:	e0bc      	b.n	800eb46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9d2:	e0b8      	b.n	800eb46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e9d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9d8:	2b20      	cmp	r3, #32
 800e9da:	dc4b      	bgt.n	800ea74 <UART_SetConfig+0xbd0>
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f2c0 8087 	blt.w	800eaf0 <UART_SetConfig+0xc4c>
 800e9e2:	2b20      	cmp	r3, #32
 800e9e4:	f200 8084 	bhi.w	800eaf0 <UART_SetConfig+0xc4c>
 800e9e8:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <UART_SetConfig+0xb4c>)
 800e9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ee:	bf00      	nop
 800e9f0:	0800ea7b 	.word	0x0800ea7b
 800e9f4:	0800ea83 	.word	0x0800ea83
 800e9f8:	0800eaf1 	.word	0x0800eaf1
 800e9fc:	0800eaf1 	.word	0x0800eaf1
 800ea00:	0800ea8b 	.word	0x0800ea8b
 800ea04:	0800eaf1 	.word	0x0800eaf1
 800ea08:	0800eaf1 	.word	0x0800eaf1
 800ea0c:	0800eaf1 	.word	0x0800eaf1
 800ea10:	0800ea9b 	.word	0x0800ea9b
 800ea14:	0800eaf1 	.word	0x0800eaf1
 800ea18:	0800eaf1 	.word	0x0800eaf1
 800ea1c:	0800eaf1 	.word	0x0800eaf1
 800ea20:	0800eaf1 	.word	0x0800eaf1
 800ea24:	0800eaf1 	.word	0x0800eaf1
 800ea28:	0800eaf1 	.word	0x0800eaf1
 800ea2c:	0800eaf1 	.word	0x0800eaf1
 800ea30:	0800eaab 	.word	0x0800eaab
 800ea34:	0800eaf1 	.word	0x0800eaf1
 800ea38:	0800eaf1 	.word	0x0800eaf1
 800ea3c:	0800eaf1 	.word	0x0800eaf1
 800ea40:	0800eaf1 	.word	0x0800eaf1
 800ea44:	0800eaf1 	.word	0x0800eaf1
 800ea48:	0800eaf1 	.word	0x0800eaf1
 800ea4c:	0800eaf1 	.word	0x0800eaf1
 800ea50:	0800eaf1 	.word	0x0800eaf1
 800ea54:	0800eaf1 	.word	0x0800eaf1
 800ea58:	0800eaf1 	.word	0x0800eaf1
 800ea5c:	0800eaf1 	.word	0x0800eaf1
 800ea60:	0800eaf1 	.word	0x0800eaf1
 800ea64:	0800eaf1 	.word	0x0800eaf1
 800ea68:	0800eaf1 	.word	0x0800eaf1
 800ea6c:	0800eaf1 	.word	0x0800eaf1
 800ea70:	0800eae3 	.word	0x0800eae3
 800ea74:	2b40      	cmp	r3, #64	; 0x40
 800ea76:	d037      	beq.n	800eae8 <UART_SetConfig+0xc44>
 800ea78:	e03a      	b.n	800eaf0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea7a:	f7fc fccf 	bl	800b41c <HAL_RCC_GetPCLK1Freq>
 800ea7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea80:	e03c      	b.n	800eafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea82:	f7fc fce1 	bl	800b448 <HAL_RCC_GetPCLK2Freq>
 800ea86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea88:	e038      	b.n	800eafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fd fec4 	bl	800c81c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea98:	e030      	b.n	800eafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea9a:	f107 0318 	add.w	r3, r7, #24
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fe f810 	bl	800cac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa8:	e028      	b.n	800eafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaaa:	4b09      	ldr	r3, [pc, #36]	; (800ead0 <UART_SetConfig+0xc2c>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f003 0320 	and.w	r3, r3, #32
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d012      	beq.n	800eadc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eab6:	4b06      	ldr	r3, [pc, #24]	; (800ead0 <UART_SetConfig+0xc2c>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	08db      	lsrs	r3, r3, #3
 800eabc:	f003 0303 	and.w	r3, r3, #3
 800eac0:	4a04      	ldr	r2, [pc, #16]	; (800ead4 <UART_SetConfig+0xc30>)
 800eac2:	fa22 f303 	lsr.w	r3, r2, r3
 800eac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eac8:	e018      	b.n	800eafc <UART_SetConfig+0xc58>
 800eaca:	bf00      	nop
 800eacc:	08010360 	.word	0x08010360
 800ead0:	58024400 	.word	0x58024400
 800ead4:	03d09000 	.word	0x03d09000
 800ead8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800eadc:	4b24      	ldr	r3, [pc, #144]	; (800eb70 <UART_SetConfig+0xccc>)
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae0:	e00c      	b.n	800eafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eae2:	4b24      	ldr	r3, [pc, #144]	; (800eb74 <UART_SetConfig+0xcd0>)
 800eae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae6:	e009      	b.n	800eafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaee:	e005      	b.n	800eafc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eafa:	bf00      	nop
    }

    if (pclk != 0U)
 800eafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d021      	beq.n	800eb46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb06:	4a1c      	ldr	r2, [pc, #112]	; (800eb78 <UART_SetConfig+0xcd4>)
 800eb08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb10:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	085b      	lsrs	r3, r3, #1
 800eb1a:	441a      	add	r2, r3
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb24:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb28:	2b0f      	cmp	r3, #15
 800eb2a:	d909      	bls.n	800eb40 <UART_SetConfig+0xc9c>
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb32:	d205      	bcs.n	800eb40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	60da      	str	r2, [r3, #12]
 800eb3e:	e002      	b.n	800eb46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800eb62:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3748      	adds	r7, #72	; 0x48
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb70:	03d09000 	.word	0x03d09000
 800eb74:	003d0900 	.word	0x003d0900
 800eb78:	08010360 	.word	0x08010360

0800eb7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00a      	beq.n	800eba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	430a      	orrs	r2, r1
 800eba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebaa:	f003 0302 	and.w	r3, r3, #2
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00a      	beq.n	800ebc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	430a      	orrs	r2, r1
 800ebc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebcc:	f003 0304 	and.w	r3, r3, #4
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00a      	beq.n	800ebea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	430a      	orrs	r2, r1
 800ebe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebee:	f003 0308 	and.w	r3, r3, #8
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00a      	beq.n	800ec0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	430a      	orrs	r2, r1
 800ec0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec10:	f003 0310 	and.w	r3, r3, #16
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00a      	beq.n	800ec2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	430a      	orrs	r2, r1
 800ec2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec32:	f003 0320 	and.w	r3, r3, #32
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00a      	beq.n	800ec50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	430a      	orrs	r2, r1
 800ec4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d01a      	beq.n	800ec92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec7a:	d10a      	bne.n	800ec92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	605a      	str	r2, [r3, #4]
  }
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b098      	sub	sp, #96	; 0x60
 800ecc4:	af02      	add	r7, sp, #8
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ecd0:	f7f5 fb00 	bl	80042d4 <HAL_GetTick>
 800ecd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f003 0308 	and.w	r3, r3, #8
 800ece0:	2b08      	cmp	r3, #8
 800ece2:	d12f      	bne.n	800ed44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ece4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ece8:	9300      	str	r3, [sp, #0]
 800ecea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecec:	2200      	movs	r2, #0
 800ecee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 f88e 	bl	800ee14 <UART_WaitOnFlagUntilTimeout>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d022      	beq.n	800ed44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed06:	e853 3f00 	ldrex	r3, [r3]
 800ed0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed12:	653b      	str	r3, [r7, #80]	; 0x50
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ed1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed24:	e841 2300 	strex	r3, r2, [r1]
 800ed28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1e6      	bne.n	800ecfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2220      	movs	r2, #32
 800ed34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed40:	2303      	movs	r3, #3
 800ed42:	e063      	b.n	800ee0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f003 0304 	and.w	r3, r3, #4
 800ed4e:	2b04      	cmp	r3, #4
 800ed50:	d149      	bne.n	800ede6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 f857 	bl	800ee14 <UART_WaitOnFlagUntilTimeout>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d03c      	beq.n	800ede6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	e853 3f00 	ldrex	r3, [r3]
 800ed78:	623b      	str	r3, [r7, #32]
   return(result);
 800ed7a:	6a3b      	ldr	r3, [r7, #32]
 800ed7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed8a:	633b      	str	r3, [r7, #48]	; 0x30
 800ed8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed92:	e841 2300 	strex	r3, r2, [r1]
 800ed96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1e6      	bne.n	800ed6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	3308      	adds	r3, #8
 800eda4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	e853 3f00 	ldrex	r3, [r3]
 800edac:	60fb      	str	r3, [r7, #12]
   return(result);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f023 0301 	bic.w	r3, r3, #1
 800edb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3308      	adds	r3, #8
 800edbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edbe:	61fa      	str	r2, [r7, #28]
 800edc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc2:	69b9      	ldr	r1, [r7, #24]
 800edc4:	69fa      	ldr	r2, [r7, #28]
 800edc6:	e841 2300 	strex	r3, r2, [r1]
 800edca:	617b      	str	r3, [r7, #20]
   return(result);
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1e5      	bne.n	800ed9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2220      	movs	r2, #32
 800edd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ede2:	2303      	movs	r3, #3
 800ede4:	e012      	b.n	800ee0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2220      	movs	r2, #32
 800edea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2220      	movs	r2, #32
 800edf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3758      	adds	r7, #88	; 0x58
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	603b      	str	r3, [r7, #0]
 800ee20:	4613      	mov	r3, r2
 800ee22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee24:	e049      	b.n	800eeba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee2c:	d045      	beq.n	800eeba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee2e:	f7f5 fa51 	bl	80042d4 <HAL_GetTick>
 800ee32:	4602      	mov	r2, r0
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	69ba      	ldr	r2, [r7, #24]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d302      	bcc.n	800ee44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e048      	b.n	800eeda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f003 0304 	and.w	r3, r3, #4
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d031      	beq.n	800eeba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	69db      	ldr	r3, [r3, #28]
 800ee5c:	f003 0308 	and.w	r3, r3, #8
 800ee60:	2b08      	cmp	r3, #8
 800ee62:	d110      	bne.n	800ee86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2208      	movs	r2, #8
 800ee6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f000 f839 	bl	800eee4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2208      	movs	r2, #8
 800ee76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	e029      	b.n	800eeda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	69db      	ldr	r3, [r3, #28]
 800ee8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee94:	d111      	bne.n	800eeba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f000 f81f 	bl	800eee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2220      	movs	r2, #32
 800eeaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eeb6:	2303      	movs	r3, #3
 800eeb8:	e00f      	b.n	800eeda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	69da      	ldr	r2, [r3, #28]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	4013      	ands	r3, r2
 800eec4:	68ba      	ldr	r2, [r7, #8]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	bf0c      	ite	eq
 800eeca:	2301      	moveq	r3, #1
 800eecc:	2300      	movne	r3, #0
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	461a      	mov	r2, r3
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d0a6      	beq.n	800ee26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eed8:	2300      	movs	r3, #0
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
	...

0800eee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b095      	sub	sp, #84	; 0x54
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eef4:	e853 3f00 	ldrex	r3, [r3]
 800eef8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	461a      	mov	r2, r3
 800ef08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef0a:	643b      	str	r3, [r7, #64]	; 0x40
 800ef0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef12:	e841 2300 	strex	r3, r2, [r1]
 800ef16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1e6      	bne.n	800eeec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	3308      	adds	r3, #8
 800ef24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef26:	6a3b      	ldr	r3, [r7, #32]
 800ef28:	e853 3f00 	ldrex	r3, [r3]
 800ef2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef2e:	69fa      	ldr	r2, [r7, #28]
 800ef30:	4b1e      	ldr	r3, [pc, #120]	; (800efac <UART_EndRxTransfer+0xc8>)
 800ef32:	4013      	ands	r3, r2
 800ef34:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3308      	adds	r3, #8
 800ef3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef46:	e841 2300 	strex	r3, r2, [r1]
 800ef4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1e5      	bne.n	800ef1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d118      	bne.n	800ef8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	e853 3f00 	ldrex	r3, [r3]
 800ef66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	f023 0310 	bic.w	r3, r3, #16
 800ef6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef78:	61bb      	str	r3, [r7, #24]
 800ef7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef7c:	6979      	ldr	r1, [r7, #20]
 800ef7e:	69ba      	ldr	r2, [r7, #24]
 800ef80:	e841 2300 	strex	r3, r2, [r1]
 800ef84:	613b      	str	r3, [r7, #16]
   return(result);
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1e6      	bne.n	800ef5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2220      	movs	r2, #32
 800ef90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800efa0:	bf00      	nop
 800efa2:	3754      	adds	r7, #84	; 0x54
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	effffffe 	.word	0xeffffffe

0800efb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2200      	movs	r2, #0
 800efca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7fe ff52 	bl	800de78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b088      	sub	sp, #32
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	e853 3f00 	ldrex	r3, [r3]
 800eff0:	60bb      	str	r3, [r7, #8]
   return(result);
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eff8:	61fb      	str	r3, [r7, #28]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	61bb      	str	r3, [r7, #24]
 800f004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f006:	6979      	ldr	r1, [r7, #20]
 800f008:	69ba      	ldr	r2, [r7, #24]
 800f00a:	e841 2300 	strex	r3, r2, [r1]
 800f00e:	613b      	str	r3, [r7, #16]
   return(result);
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1e6      	bne.n	800efe4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2220      	movs	r2, #32
 800f01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7fe ff1d 	bl	800de64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f02a:	bf00      	nop
 800f02c:	3720      	adds	r7, #32
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f032:	b480      	push	{r7}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f03a:	bf00      	nop
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f046:	b480      	push	{r7}
 800f048:	b083      	sub	sp, #12
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f04e:	bf00      	nop
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f05a:	b480      	push	{r7}
 800f05c:	b083      	sub	sp, #12
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f062:	bf00      	nop
 800f064:	370c      	adds	r7, #12
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f06e:	b480      	push	{r7}
 800f070:	b085      	sub	sp, #20
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d101      	bne.n	800f084 <HAL_UARTEx_DisableFifoMode+0x16>
 800f080:	2302      	movs	r3, #2
 800f082:	e027      	b.n	800f0d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2224      	movs	r2, #36	; 0x24
 800f090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f022 0201 	bic.w	r2, r2, #1
 800f0aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f0b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2220      	movs	r2, #32
 800f0c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr

0800f0e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d101      	bne.n	800f0f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f0f4:	2302      	movs	r3, #2
 800f0f6:	e02d      	b.n	800f154 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2224      	movs	r2, #36	; 0x24
 800f104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f022 0201 	bic.w	r2, r2, #1
 800f11e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	683a      	ldr	r2, [r7, #0]
 800f130:	430a      	orrs	r2, r1
 800f132:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 f84f 	bl	800f1d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	68fa      	ldr	r2, [r7, #12]
 800f140:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2220      	movs	r2, #32
 800f146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f152:	2300      	movs	r3, #0
}
 800f154:	4618      	mov	r0, r3
 800f156:	3710      	adds	r7, #16
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d101      	bne.n	800f174 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f170:	2302      	movs	r3, #2
 800f172:	e02d      	b.n	800f1d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2224      	movs	r2, #36	; 0x24
 800f180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f022 0201 	bic.w	r2, r2, #1
 800f19a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	430a      	orrs	r2, r1
 800f1ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 f811 	bl	800f1d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2220      	movs	r2, #32
 800f1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d108      	bne.n	800f1fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f1f8:	e031      	b.n	800f25e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f1fa:	2310      	movs	r3, #16
 800f1fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f1fe:	2310      	movs	r3, #16
 800f200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	0e5b      	lsrs	r3, r3, #25
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	f003 0307 	and.w	r3, r3, #7
 800f210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	0f5b      	lsrs	r3, r3, #29
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	f003 0307 	and.w	r3, r3, #7
 800f220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f222:	7bbb      	ldrb	r3, [r7, #14]
 800f224:	7b3a      	ldrb	r2, [r7, #12]
 800f226:	4911      	ldr	r1, [pc, #68]	; (800f26c <UARTEx_SetNbDataToProcess+0x94>)
 800f228:	5c8a      	ldrb	r2, [r1, r2]
 800f22a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f22e:	7b3a      	ldrb	r2, [r7, #12]
 800f230:	490f      	ldr	r1, [pc, #60]	; (800f270 <UARTEx_SetNbDataToProcess+0x98>)
 800f232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f234:	fb93 f3f2 	sdiv	r3, r3, r2
 800f238:	b29a      	uxth	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f240:	7bfb      	ldrb	r3, [r7, #15]
 800f242:	7b7a      	ldrb	r2, [r7, #13]
 800f244:	4909      	ldr	r1, [pc, #36]	; (800f26c <UARTEx_SetNbDataToProcess+0x94>)
 800f246:	5c8a      	ldrb	r2, [r1, r2]
 800f248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f24c:	7b7a      	ldrb	r2, [r7, #13]
 800f24e:	4908      	ldr	r1, [pc, #32]	; (800f270 <UARTEx_SetNbDataToProcess+0x98>)
 800f250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f252:	fb93 f3f2 	sdiv	r3, r3, r2
 800f256:	b29a      	uxth	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f25e:	bf00      	nop
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop
 800f26c:	08010378 	.word	0x08010378
 800f270:	08010380 	.word	0x08010380

0800f274 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d121      	bne.n	800f2ca <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	4b27      	ldr	r3, [pc, #156]	; (800f328 <FMC_SDRAM_Init+0xb4>)
 800f28c:	4013      	ands	r3, r2
 800f28e:	683a      	ldr	r2, [r7, #0]
 800f290:	6851      	ldr	r1, [r2, #4]
 800f292:	683a      	ldr	r2, [r7, #0]
 800f294:	6892      	ldr	r2, [r2, #8]
 800f296:	4311      	orrs	r1, r2
 800f298:	683a      	ldr	r2, [r7, #0]
 800f29a:	68d2      	ldr	r2, [r2, #12]
 800f29c:	4311      	orrs	r1, r2
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	6912      	ldr	r2, [r2, #16]
 800f2a2:	4311      	orrs	r1, r2
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	6952      	ldr	r2, [r2, #20]
 800f2a8:	4311      	orrs	r1, r2
 800f2aa:	683a      	ldr	r2, [r7, #0]
 800f2ac:	6992      	ldr	r2, [r2, #24]
 800f2ae:	4311      	orrs	r1, r2
 800f2b0:	683a      	ldr	r2, [r7, #0]
 800f2b2:	69d2      	ldr	r2, [r2, #28]
 800f2b4:	4311      	orrs	r1, r2
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	6a12      	ldr	r2, [r2, #32]
 800f2ba:	4311      	orrs	r1, r2
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f2c0:	430a      	orrs	r2, r1
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	601a      	str	r2, [r3, #0]
 800f2c8:	e026      	b.n	800f318 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	69d9      	ldr	r1, [r3, #28]
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	4319      	orrs	r1, r3
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e0:	430b      	orrs	r3, r1
 800f2e2:	431a      	orrs	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	685a      	ldr	r2, [r3, #4]
 800f2ec:	4b0e      	ldr	r3, [pc, #56]	; (800f328 <FMC_SDRAM_Init+0xb4>)
 800f2ee:	4013      	ands	r3, r2
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	6851      	ldr	r1, [r2, #4]
 800f2f4:	683a      	ldr	r2, [r7, #0]
 800f2f6:	6892      	ldr	r2, [r2, #8]
 800f2f8:	4311      	orrs	r1, r2
 800f2fa:	683a      	ldr	r2, [r7, #0]
 800f2fc:	68d2      	ldr	r2, [r2, #12]
 800f2fe:	4311      	orrs	r1, r2
 800f300:	683a      	ldr	r2, [r7, #0]
 800f302:	6912      	ldr	r2, [r2, #16]
 800f304:	4311      	orrs	r1, r2
 800f306:	683a      	ldr	r2, [r7, #0]
 800f308:	6952      	ldr	r2, [r2, #20]
 800f30a:	4311      	orrs	r1, r2
 800f30c:	683a      	ldr	r2, [r7, #0]
 800f30e:	6992      	ldr	r2, [r2, #24]
 800f310:	430a      	orrs	r2, r1
 800f312:	431a      	orrs	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	370c      	adds	r7, #12
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	ffff8000 	.word	0xffff8000

0800f32c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d128      	bne.n	800f390 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	1e59      	subs	r1, r3, #1
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	3b01      	subs	r3, #1
 800f352:	011b      	lsls	r3, r3, #4
 800f354:	4319      	orrs	r1, r3
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	3b01      	subs	r3, #1
 800f35c:	021b      	lsls	r3, r3, #8
 800f35e:	4319      	orrs	r1, r3
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	3b01      	subs	r3, #1
 800f366:	031b      	lsls	r3, r3, #12
 800f368:	4319      	orrs	r1, r3
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	691b      	ldr	r3, [r3, #16]
 800f36e:	3b01      	subs	r3, #1
 800f370:	041b      	lsls	r3, r3, #16
 800f372:	4319      	orrs	r1, r3
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	695b      	ldr	r3, [r3, #20]
 800f378:	3b01      	subs	r3, #1
 800f37a:	051b      	lsls	r3, r3, #20
 800f37c:	4319      	orrs	r1, r3
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	699b      	ldr	r3, [r3, #24]
 800f382:	3b01      	subs	r3, #1
 800f384:	061b      	lsls	r3, r3, #24
 800f386:	430b      	orrs	r3, r1
 800f388:	431a      	orrs	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	609a      	str	r2, [r3, #8]
 800f38e:	e02d      	b.n	800f3ec <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	689a      	ldr	r2, [r3, #8]
 800f394:	4b19      	ldr	r3, [pc, #100]	; (800f3fc <FMC_SDRAM_Timing_Init+0xd0>)
 800f396:	4013      	ands	r3, r2
 800f398:	68ba      	ldr	r2, [r7, #8]
 800f39a:	68d2      	ldr	r2, [r2, #12]
 800f39c:	3a01      	subs	r2, #1
 800f39e:	0311      	lsls	r1, r2, #12
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	6952      	ldr	r2, [r2, #20]
 800f3a4:	3a01      	subs	r2, #1
 800f3a6:	0512      	lsls	r2, r2, #20
 800f3a8:	430a      	orrs	r2, r1
 800f3aa:	431a      	orrs	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	1e59      	subs	r1, r3, #1
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	011b      	lsls	r3, r3, #4
 800f3c6:	4319      	orrs	r1, r3
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	021b      	lsls	r3, r3, #8
 800f3d0:	4319      	orrs	r1, r3
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	691b      	ldr	r3, [r3, #16]
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	041b      	lsls	r3, r3, #16
 800f3da:	4319      	orrs	r1, r3
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	699b      	ldr	r3, [r3, #24]
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	061b      	lsls	r3, r3, #24
 800f3e4:	430b      	orrs	r3, r1
 800f3e6:	431a      	orrs	r2, r3
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3714      	adds	r7, #20
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	ff0f0fff 	.word	0xff0f0fff

0800f400 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f400:	b480      	push	{r7}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	691a      	ldr	r2, [r3, #16]
 800f410:	4b0c      	ldr	r3, [pc, #48]	; (800f444 <FMC_SDRAM_SendCommand+0x44>)
 800f412:	4013      	ands	r3, r2
 800f414:	68ba      	ldr	r2, [r7, #8]
 800f416:	6811      	ldr	r1, [r2, #0]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	6852      	ldr	r2, [r2, #4]
 800f41c:	4311      	orrs	r1, r2
 800f41e:	68ba      	ldr	r2, [r7, #8]
 800f420:	6892      	ldr	r2, [r2, #8]
 800f422:	3a01      	subs	r2, #1
 800f424:	0152      	lsls	r2, r2, #5
 800f426:	4311      	orrs	r1, r2
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	68d2      	ldr	r2, [r2, #12]
 800f42c:	0252      	lsls	r2, r2, #9
 800f42e:	430a      	orrs	r2, r1
 800f430:	431a      	orrs	r2, r3
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f436:	2300      	movs	r3, #0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3714      	adds	r7, #20
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	ffc00000 	.word	0xffc00000

0800f448 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	695a      	ldr	r2, [r3, #20]
 800f456:	4b07      	ldr	r3, [pc, #28]	; (800f474 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f458:	4013      	ands	r3, r2
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	0052      	lsls	r2, r2, #1
 800f45e:	431a      	orrs	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	ffffc001 	.word	0xffffc001

0800f478 <__errno>:
 800f478:	4b01      	ldr	r3, [pc, #4]	; (800f480 <__errno+0x8>)
 800f47a:	6818      	ldr	r0, [r3, #0]
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	24000054 	.word	0x24000054

0800f484 <__libc_init_array>:
 800f484:	b570      	push	{r4, r5, r6, lr}
 800f486:	4d0d      	ldr	r5, [pc, #52]	; (800f4bc <__libc_init_array+0x38>)
 800f488:	4c0d      	ldr	r4, [pc, #52]	; (800f4c0 <__libc_init_array+0x3c>)
 800f48a:	1b64      	subs	r4, r4, r5
 800f48c:	10a4      	asrs	r4, r4, #2
 800f48e:	2600      	movs	r6, #0
 800f490:	42a6      	cmp	r6, r4
 800f492:	d109      	bne.n	800f4a8 <__libc_init_array+0x24>
 800f494:	4d0b      	ldr	r5, [pc, #44]	; (800f4c4 <__libc_init_array+0x40>)
 800f496:	4c0c      	ldr	r4, [pc, #48]	; (800f4c8 <__libc_init_array+0x44>)
 800f498:	f000 fc66 	bl	800fd68 <_init>
 800f49c:	1b64      	subs	r4, r4, r5
 800f49e:	10a4      	asrs	r4, r4, #2
 800f4a0:	2600      	movs	r6, #0
 800f4a2:	42a6      	cmp	r6, r4
 800f4a4:	d105      	bne.n	800f4b2 <__libc_init_array+0x2e>
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
 800f4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4ac:	4798      	blx	r3
 800f4ae:	3601      	adds	r6, #1
 800f4b0:	e7ee      	b.n	800f490 <__libc_init_array+0xc>
 800f4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4b6:	4798      	blx	r3
 800f4b8:	3601      	adds	r6, #1
 800f4ba:	e7f2      	b.n	800f4a2 <__libc_init_array+0x1e>
 800f4bc:	080103f4 	.word	0x080103f4
 800f4c0:	080103f4 	.word	0x080103f4
 800f4c4:	080103f4 	.word	0x080103f4
 800f4c8:	080103f8 	.word	0x080103f8

0800f4cc <memset>:
 800f4cc:	4402      	add	r2, r0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d100      	bne.n	800f4d6 <memset+0xa>
 800f4d4:	4770      	bx	lr
 800f4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f4da:	e7f9      	b.n	800f4d0 <memset+0x4>

0800f4dc <setvbuf>:
 800f4dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4e0:	461d      	mov	r5, r3
 800f4e2:	4b5d      	ldr	r3, [pc, #372]	; (800f658 <setvbuf+0x17c>)
 800f4e4:	681f      	ldr	r7, [r3, #0]
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	460e      	mov	r6, r1
 800f4ea:	4690      	mov	r8, r2
 800f4ec:	b127      	cbz	r7, 800f4f8 <setvbuf+0x1c>
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	b913      	cbnz	r3, 800f4f8 <setvbuf+0x1c>
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	f000 f9d2 	bl	800f89c <__sinit>
 800f4f8:	4b58      	ldr	r3, [pc, #352]	; (800f65c <setvbuf+0x180>)
 800f4fa:	429c      	cmp	r4, r3
 800f4fc:	d167      	bne.n	800f5ce <setvbuf+0xf2>
 800f4fe:	687c      	ldr	r4, [r7, #4]
 800f500:	f1b8 0f02 	cmp.w	r8, #2
 800f504:	d006      	beq.n	800f514 <setvbuf+0x38>
 800f506:	f1b8 0f01 	cmp.w	r8, #1
 800f50a:	f200 809f 	bhi.w	800f64c <setvbuf+0x170>
 800f50e:	2d00      	cmp	r5, #0
 800f510:	f2c0 809c 	blt.w	800f64c <setvbuf+0x170>
 800f514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f516:	07db      	lsls	r3, r3, #31
 800f518:	d405      	bmi.n	800f526 <setvbuf+0x4a>
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	0598      	lsls	r0, r3, #22
 800f51e:	d402      	bmi.n	800f526 <setvbuf+0x4a>
 800f520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f522:	f000 fa59 	bl	800f9d8 <__retarget_lock_acquire_recursive>
 800f526:	4621      	mov	r1, r4
 800f528:	4638      	mov	r0, r7
 800f52a:	f000 f923 	bl	800f774 <_fflush_r>
 800f52e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f530:	b141      	cbz	r1, 800f544 <setvbuf+0x68>
 800f532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f536:	4299      	cmp	r1, r3
 800f538:	d002      	beq.n	800f540 <setvbuf+0x64>
 800f53a:	4638      	mov	r0, r7
 800f53c:	f000 fa7c 	bl	800fa38 <_free_r>
 800f540:	2300      	movs	r3, #0
 800f542:	6363      	str	r3, [r4, #52]	; 0x34
 800f544:	2300      	movs	r3, #0
 800f546:	61a3      	str	r3, [r4, #24]
 800f548:	6063      	str	r3, [r4, #4]
 800f54a:	89a3      	ldrh	r3, [r4, #12]
 800f54c:	0619      	lsls	r1, r3, #24
 800f54e:	d503      	bpl.n	800f558 <setvbuf+0x7c>
 800f550:	6921      	ldr	r1, [r4, #16]
 800f552:	4638      	mov	r0, r7
 800f554:	f000 fa70 	bl	800fa38 <_free_r>
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f55e:	f023 0303 	bic.w	r3, r3, #3
 800f562:	f1b8 0f02 	cmp.w	r8, #2
 800f566:	81a3      	strh	r3, [r4, #12]
 800f568:	d06c      	beq.n	800f644 <setvbuf+0x168>
 800f56a:	ab01      	add	r3, sp, #4
 800f56c:	466a      	mov	r2, sp
 800f56e:	4621      	mov	r1, r4
 800f570:	4638      	mov	r0, r7
 800f572:	f000 fa33 	bl	800f9dc <__swhatbuf_r>
 800f576:	89a3      	ldrh	r3, [r4, #12]
 800f578:	4318      	orrs	r0, r3
 800f57a:	81a0      	strh	r0, [r4, #12]
 800f57c:	2d00      	cmp	r5, #0
 800f57e:	d130      	bne.n	800f5e2 <setvbuf+0x106>
 800f580:	9d00      	ldr	r5, [sp, #0]
 800f582:	4628      	mov	r0, r5
 800f584:	f000 fa50 	bl	800fa28 <malloc>
 800f588:	4606      	mov	r6, r0
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d155      	bne.n	800f63a <setvbuf+0x15e>
 800f58e:	f8dd 9000 	ldr.w	r9, [sp]
 800f592:	45a9      	cmp	r9, r5
 800f594:	d14a      	bne.n	800f62c <setvbuf+0x150>
 800f596:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f59a:	2200      	movs	r2, #0
 800f59c:	60a2      	str	r2, [r4, #8]
 800f59e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f5a2:	6022      	str	r2, [r4, #0]
 800f5a4:	6122      	str	r2, [r4, #16]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ac:	6162      	str	r2, [r4, #20]
 800f5ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5b0:	f043 0302 	orr.w	r3, r3, #2
 800f5b4:	07d2      	lsls	r2, r2, #31
 800f5b6:	81a3      	strh	r3, [r4, #12]
 800f5b8:	d405      	bmi.n	800f5c6 <setvbuf+0xea>
 800f5ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f5be:	d102      	bne.n	800f5c6 <setvbuf+0xea>
 800f5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c2:	f000 fa0a 	bl	800f9da <__retarget_lock_release_recursive>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	b003      	add	sp, #12
 800f5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5ce:	4b24      	ldr	r3, [pc, #144]	; (800f660 <setvbuf+0x184>)
 800f5d0:	429c      	cmp	r4, r3
 800f5d2:	d101      	bne.n	800f5d8 <setvbuf+0xfc>
 800f5d4:	68bc      	ldr	r4, [r7, #8]
 800f5d6:	e793      	b.n	800f500 <setvbuf+0x24>
 800f5d8:	4b22      	ldr	r3, [pc, #136]	; (800f664 <setvbuf+0x188>)
 800f5da:	429c      	cmp	r4, r3
 800f5dc:	bf08      	it	eq
 800f5de:	68fc      	ldreq	r4, [r7, #12]
 800f5e0:	e78e      	b.n	800f500 <setvbuf+0x24>
 800f5e2:	2e00      	cmp	r6, #0
 800f5e4:	d0cd      	beq.n	800f582 <setvbuf+0xa6>
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	b913      	cbnz	r3, 800f5f0 <setvbuf+0x114>
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	f000 f956 	bl	800f89c <__sinit>
 800f5f0:	f1b8 0f01 	cmp.w	r8, #1
 800f5f4:	bf08      	it	eq
 800f5f6:	89a3      	ldrheq	r3, [r4, #12]
 800f5f8:	6026      	str	r6, [r4, #0]
 800f5fa:	bf04      	itt	eq
 800f5fc:	f043 0301 	orreq.w	r3, r3, #1
 800f600:	81a3      	strheq	r3, [r4, #12]
 800f602:	89a2      	ldrh	r2, [r4, #12]
 800f604:	f012 0308 	ands.w	r3, r2, #8
 800f608:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f60c:	d01c      	beq.n	800f648 <setvbuf+0x16c>
 800f60e:	07d3      	lsls	r3, r2, #31
 800f610:	bf41      	itttt	mi
 800f612:	2300      	movmi	r3, #0
 800f614:	426d      	negmi	r5, r5
 800f616:	60a3      	strmi	r3, [r4, #8]
 800f618:	61a5      	strmi	r5, [r4, #24]
 800f61a:	bf58      	it	pl
 800f61c:	60a5      	strpl	r5, [r4, #8]
 800f61e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f620:	f015 0501 	ands.w	r5, r5, #1
 800f624:	d115      	bne.n	800f652 <setvbuf+0x176>
 800f626:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f62a:	e7c8      	b.n	800f5be <setvbuf+0xe2>
 800f62c:	4648      	mov	r0, r9
 800f62e:	f000 f9fb 	bl	800fa28 <malloc>
 800f632:	4606      	mov	r6, r0
 800f634:	2800      	cmp	r0, #0
 800f636:	d0ae      	beq.n	800f596 <setvbuf+0xba>
 800f638:	464d      	mov	r5, r9
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f640:	81a3      	strh	r3, [r4, #12]
 800f642:	e7d0      	b.n	800f5e6 <setvbuf+0x10a>
 800f644:	2500      	movs	r5, #0
 800f646:	e7a8      	b.n	800f59a <setvbuf+0xbe>
 800f648:	60a3      	str	r3, [r4, #8]
 800f64a:	e7e8      	b.n	800f61e <setvbuf+0x142>
 800f64c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f650:	e7b9      	b.n	800f5c6 <setvbuf+0xea>
 800f652:	2500      	movs	r5, #0
 800f654:	e7b7      	b.n	800f5c6 <setvbuf+0xea>
 800f656:	bf00      	nop
 800f658:	24000054 	.word	0x24000054
 800f65c:	080103ac 	.word	0x080103ac
 800f660:	080103cc 	.word	0x080103cc
 800f664:	0801038c 	.word	0x0801038c

0800f668 <__sflush_r>:
 800f668:	898a      	ldrh	r2, [r1, #12]
 800f66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66e:	4605      	mov	r5, r0
 800f670:	0710      	lsls	r0, r2, #28
 800f672:	460c      	mov	r4, r1
 800f674:	d458      	bmi.n	800f728 <__sflush_r+0xc0>
 800f676:	684b      	ldr	r3, [r1, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	dc05      	bgt.n	800f688 <__sflush_r+0x20>
 800f67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f67e:	2b00      	cmp	r3, #0
 800f680:	dc02      	bgt.n	800f688 <__sflush_r+0x20>
 800f682:	2000      	movs	r0, #0
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f68a:	2e00      	cmp	r6, #0
 800f68c:	d0f9      	beq.n	800f682 <__sflush_r+0x1a>
 800f68e:	2300      	movs	r3, #0
 800f690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f694:	682f      	ldr	r7, [r5, #0]
 800f696:	602b      	str	r3, [r5, #0]
 800f698:	d032      	beq.n	800f700 <__sflush_r+0x98>
 800f69a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	075a      	lsls	r2, r3, #29
 800f6a0:	d505      	bpl.n	800f6ae <__sflush_r+0x46>
 800f6a2:	6863      	ldr	r3, [r4, #4]
 800f6a4:	1ac0      	subs	r0, r0, r3
 800f6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6a8:	b10b      	cbz	r3, 800f6ae <__sflush_r+0x46>
 800f6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6ac:	1ac0      	subs	r0, r0, r3
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6b4:	6a21      	ldr	r1, [r4, #32]
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	47b0      	blx	r6
 800f6ba:	1c43      	adds	r3, r0, #1
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	d106      	bne.n	800f6ce <__sflush_r+0x66>
 800f6c0:	6829      	ldr	r1, [r5, #0]
 800f6c2:	291d      	cmp	r1, #29
 800f6c4:	d82c      	bhi.n	800f720 <__sflush_r+0xb8>
 800f6c6:	4a2a      	ldr	r2, [pc, #168]	; (800f770 <__sflush_r+0x108>)
 800f6c8:	40ca      	lsrs	r2, r1
 800f6ca:	07d6      	lsls	r6, r2, #31
 800f6cc:	d528      	bpl.n	800f720 <__sflush_r+0xb8>
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	6062      	str	r2, [r4, #4]
 800f6d2:	04d9      	lsls	r1, r3, #19
 800f6d4:	6922      	ldr	r2, [r4, #16]
 800f6d6:	6022      	str	r2, [r4, #0]
 800f6d8:	d504      	bpl.n	800f6e4 <__sflush_r+0x7c>
 800f6da:	1c42      	adds	r2, r0, #1
 800f6dc:	d101      	bne.n	800f6e2 <__sflush_r+0x7a>
 800f6de:	682b      	ldr	r3, [r5, #0]
 800f6e0:	b903      	cbnz	r3, 800f6e4 <__sflush_r+0x7c>
 800f6e2:	6560      	str	r0, [r4, #84]	; 0x54
 800f6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6e6:	602f      	str	r7, [r5, #0]
 800f6e8:	2900      	cmp	r1, #0
 800f6ea:	d0ca      	beq.n	800f682 <__sflush_r+0x1a>
 800f6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6f0:	4299      	cmp	r1, r3
 800f6f2:	d002      	beq.n	800f6fa <__sflush_r+0x92>
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f000 f99f 	bl	800fa38 <_free_r>
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	6360      	str	r0, [r4, #52]	; 0x34
 800f6fe:	e7c1      	b.n	800f684 <__sflush_r+0x1c>
 800f700:	6a21      	ldr	r1, [r4, #32]
 800f702:	2301      	movs	r3, #1
 800f704:	4628      	mov	r0, r5
 800f706:	47b0      	blx	r6
 800f708:	1c41      	adds	r1, r0, #1
 800f70a:	d1c7      	bne.n	800f69c <__sflush_r+0x34>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d0c4      	beq.n	800f69c <__sflush_r+0x34>
 800f712:	2b1d      	cmp	r3, #29
 800f714:	d001      	beq.n	800f71a <__sflush_r+0xb2>
 800f716:	2b16      	cmp	r3, #22
 800f718:	d101      	bne.n	800f71e <__sflush_r+0xb6>
 800f71a:	602f      	str	r7, [r5, #0]
 800f71c:	e7b1      	b.n	800f682 <__sflush_r+0x1a>
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f724:	81a3      	strh	r3, [r4, #12]
 800f726:	e7ad      	b.n	800f684 <__sflush_r+0x1c>
 800f728:	690f      	ldr	r7, [r1, #16]
 800f72a:	2f00      	cmp	r7, #0
 800f72c:	d0a9      	beq.n	800f682 <__sflush_r+0x1a>
 800f72e:	0793      	lsls	r3, r2, #30
 800f730:	680e      	ldr	r6, [r1, #0]
 800f732:	bf08      	it	eq
 800f734:	694b      	ldreq	r3, [r1, #20]
 800f736:	600f      	str	r7, [r1, #0]
 800f738:	bf18      	it	ne
 800f73a:	2300      	movne	r3, #0
 800f73c:	eba6 0807 	sub.w	r8, r6, r7
 800f740:	608b      	str	r3, [r1, #8]
 800f742:	f1b8 0f00 	cmp.w	r8, #0
 800f746:	dd9c      	ble.n	800f682 <__sflush_r+0x1a>
 800f748:	6a21      	ldr	r1, [r4, #32]
 800f74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f74c:	4643      	mov	r3, r8
 800f74e:	463a      	mov	r2, r7
 800f750:	4628      	mov	r0, r5
 800f752:	47b0      	blx	r6
 800f754:	2800      	cmp	r0, #0
 800f756:	dc06      	bgt.n	800f766 <__sflush_r+0xfe>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f764:	e78e      	b.n	800f684 <__sflush_r+0x1c>
 800f766:	4407      	add	r7, r0
 800f768:	eba8 0800 	sub.w	r8, r8, r0
 800f76c:	e7e9      	b.n	800f742 <__sflush_r+0xda>
 800f76e:	bf00      	nop
 800f770:	20400001 	.word	0x20400001

0800f774 <_fflush_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	690b      	ldr	r3, [r1, #16]
 800f778:	4605      	mov	r5, r0
 800f77a:	460c      	mov	r4, r1
 800f77c:	b913      	cbnz	r3, 800f784 <_fflush_r+0x10>
 800f77e:	2500      	movs	r5, #0
 800f780:	4628      	mov	r0, r5
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	b118      	cbz	r0, 800f78e <_fflush_r+0x1a>
 800f786:	6983      	ldr	r3, [r0, #24]
 800f788:	b90b      	cbnz	r3, 800f78e <_fflush_r+0x1a>
 800f78a:	f000 f887 	bl	800f89c <__sinit>
 800f78e:	4b14      	ldr	r3, [pc, #80]	; (800f7e0 <_fflush_r+0x6c>)
 800f790:	429c      	cmp	r4, r3
 800f792:	d11b      	bne.n	800f7cc <_fflush_r+0x58>
 800f794:	686c      	ldr	r4, [r5, #4]
 800f796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0ef      	beq.n	800f77e <_fflush_r+0xa>
 800f79e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7a0:	07d0      	lsls	r0, r2, #31
 800f7a2:	d404      	bmi.n	800f7ae <_fflush_r+0x3a>
 800f7a4:	0599      	lsls	r1, r3, #22
 800f7a6:	d402      	bmi.n	800f7ae <_fflush_r+0x3a>
 800f7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7aa:	f000 f915 	bl	800f9d8 <__retarget_lock_acquire_recursive>
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f7ff ff59 	bl	800f668 <__sflush_r>
 800f7b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7b8:	07da      	lsls	r2, r3, #31
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	d4e0      	bmi.n	800f780 <_fflush_r+0xc>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	059b      	lsls	r3, r3, #22
 800f7c2:	d4dd      	bmi.n	800f780 <_fflush_r+0xc>
 800f7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c6:	f000 f908 	bl	800f9da <__retarget_lock_release_recursive>
 800f7ca:	e7d9      	b.n	800f780 <_fflush_r+0xc>
 800f7cc:	4b05      	ldr	r3, [pc, #20]	; (800f7e4 <_fflush_r+0x70>)
 800f7ce:	429c      	cmp	r4, r3
 800f7d0:	d101      	bne.n	800f7d6 <_fflush_r+0x62>
 800f7d2:	68ac      	ldr	r4, [r5, #8]
 800f7d4:	e7df      	b.n	800f796 <_fflush_r+0x22>
 800f7d6:	4b04      	ldr	r3, [pc, #16]	; (800f7e8 <_fflush_r+0x74>)
 800f7d8:	429c      	cmp	r4, r3
 800f7da:	bf08      	it	eq
 800f7dc:	68ec      	ldreq	r4, [r5, #12]
 800f7de:	e7da      	b.n	800f796 <_fflush_r+0x22>
 800f7e0:	080103ac 	.word	0x080103ac
 800f7e4:	080103cc 	.word	0x080103cc
 800f7e8:	0801038c 	.word	0x0801038c

0800f7ec <std>:
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	b510      	push	{r4, lr}
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800f7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7fa:	6083      	str	r3, [r0, #8]
 800f7fc:	8181      	strh	r1, [r0, #12]
 800f7fe:	6643      	str	r3, [r0, #100]	; 0x64
 800f800:	81c2      	strh	r2, [r0, #14]
 800f802:	6183      	str	r3, [r0, #24]
 800f804:	4619      	mov	r1, r3
 800f806:	2208      	movs	r2, #8
 800f808:	305c      	adds	r0, #92	; 0x5c
 800f80a:	f7ff fe5f 	bl	800f4cc <memset>
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <std+0x38>)
 800f810:	6263      	str	r3, [r4, #36]	; 0x24
 800f812:	4b05      	ldr	r3, [pc, #20]	; (800f828 <std+0x3c>)
 800f814:	62a3      	str	r3, [r4, #40]	; 0x28
 800f816:	4b05      	ldr	r3, [pc, #20]	; (800f82c <std+0x40>)
 800f818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <std+0x44>)
 800f81c:	6224      	str	r4, [r4, #32]
 800f81e:	6323      	str	r3, [r4, #48]	; 0x30
 800f820:	bd10      	pop	{r4, pc}
 800f822:	bf00      	nop
 800f824:	0800fc19 	.word	0x0800fc19
 800f828:	0800fc3b 	.word	0x0800fc3b
 800f82c:	0800fc73 	.word	0x0800fc73
 800f830:	0800fc97 	.word	0x0800fc97

0800f834 <_cleanup_r>:
 800f834:	4901      	ldr	r1, [pc, #4]	; (800f83c <_cleanup_r+0x8>)
 800f836:	f000 b8af 	b.w	800f998 <_fwalk_reent>
 800f83a:	bf00      	nop
 800f83c:	0800f775 	.word	0x0800f775

0800f840 <__sfmoreglue>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	2268      	movs	r2, #104	; 0x68
 800f844:	1e4d      	subs	r5, r1, #1
 800f846:	4355      	muls	r5, r2
 800f848:	460e      	mov	r6, r1
 800f84a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f84e:	f000 f95f 	bl	800fb10 <_malloc_r>
 800f852:	4604      	mov	r4, r0
 800f854:	b140      	cbz	r0, 800f868 <__sfmoreglue+0x28>
 800f856:	2100      	movs	r1, #0
 800f858:	e9c0 1600 	strd	r1, r6, [r0]
 800f85c:	300c      	adds	r0, #12
 800f85e:	60a0      	str	r0, [r4, #8]
 800f860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f864:	f7ff fe32 	bl	800f4cc <memset>
 800f868:	4620      	mov	r0, r4
 800f86a:	bd70      	pop	{r4, r5, r6, pc}

0800f86c <__sfp_lock_acquire>:
 800f86c:	4801      	ldr	r0, [pc, #4]	; (800f874 <__sfp_lock_acquire+0x8>)
 800f86e:	f000 b8b3 	b.w	800f9d8 <__retarget_lock_acquire_recursive>
 800f872:	bf00      	nop
 800f874:	24000e71 	.word	0x24000e71

0800f878 <__sfp_lock_release>:
 800f878:	4801      	ldr	r0, [pc, #4]	; (800f880 <__sfp_lock_release+0x8>)
 800f87a:	f000 b8ae 	b.w	800f9da <__retarget_lock_release_recursive>
 800f87e:	bf00      	nop
 800f880:	24000e71 	.word	0x24000e71

0800f884 <__sinit_lock_acquire>:
 800f884:	4801      	ldr	r0, [pc, #4]	; (800f88c <__sinit_lock_acquire+0x8>)
 800f886:	f000 b8a7 	b.w	800f9d8 <__retarget_lock_acquire_recursive>
 800f88a:	bf00      	nop
 800f88c:	24000e72 	.word	0x24000e72

0800f890 <__sinit_lock_release>:
 800f890:	4801      	ldr	r0, [pc, #4]	; (800f898 <__sinit_lock_release+0x8>)
 800f892:	f000 b8a2 	b.w	800f9da <__retarget_lock_release_recursive>
 800f896:	bf00      	nop
 800f898:	24000e72 	.word	0x24000e72

0800f89c <__sinit>:
 800f89c:	b510      	push	{r4, lr}
 800f89e:	4604      	mov	r4, r0
 800f8a0:	f7ff fff0 	bl	800f884 <__sinit_lock_acquire>
 800f8a4:	69a3      	ldr	r3, [r4, #24]
 800f8a6:	b11b      	cbz	r3, 800f8b0 <__sinit+0x14>
 800f8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8ac:	f7ff bff0 	b.w	800f890 <__sinit_lock_release>
 800f8b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f8b4:	6523      	str	r3, [r4, #80]	; 0x50
 800f8b6:	4b13      	ldr	r3, [pc, #76]	; (800f904 <__sinit+0x68>)
 800f8b8:	4a13      	ldr	r2, [pc, #76]	; (800f908 <__sinit+0x6c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f8be:	42a3      	cmp	r3, r4
 800f8c0:	bf04      	itt	eq
 800f8c2:	2301      	moveq	r3, #1
 800f8c4:	61a3      	streq	r3, [r4, #24]
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 f820 	bl	800f90c <__sfp>
 800f8cc:	6060      	str	r0, [r4, #4]
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 f81c 	bl	800f90c <__sfp>
 800f8d4:	60a0      	str	r0, [r4, #8]
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f000 f818 	bl	800f90c <__sfp>
 800f8dc:	2200      	movs	r2, #0
 800f8de:	60e0      	str	r0, [r4, #12]
 800f8e0:	2104      	movs	r1, #4
 800f8e2:	6860      	ldr	r0, [r4, #4]
 800f8e4:	f7ff ff82 	bl	800f7ec <std>
 800f8e8:	68a0      	ldr	r0, [r4, #8]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	2109      	movs	r1, #9
 800f8ee:	f7ff ff7d 	bl	800f7ec <std>
 800f8f2:	68e0      	ldr	r0, [r4, #12]
 800f8f4:	2202      	movs	r2, #2
 800f8f6:	2112      	movs	r1, #18
 800f8f8:	f7ff ff78 	bl	800f7ec <std>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	61a3      	str	r3, [r4, #24]
 800f900:	e7d2      	b.n	800f8a8 <__sinit+0xc>
 800f902:	bf00      	nop
 800f904:	08010388 	.word	0x08010388
 800f908:	0800f835 	.word	0x0800f835

0800f90c <__sfp>:
 800f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90e:	4607      	mov	r7, r0
 800f910:	f7ff ffac 	bl	800f86c <__sfp_lock_acquire>
 800f914:	4b1e      	ldr	r3, [pc, #120]	; (800f990 <__sfp+0x84>)
 800f916:	681e      	ldr	r6, [r3, #0]
 800f918:	69b3      	ldr	r3, [r6, #24]
 800f91a:	b913      	cbnz	r3, 800f922 <__sfp+0x16>
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7ff ffbd 	bl	800f89c <__sinit>
 800f922:	3648      	adds	r6, #72	; 0x48
 800f924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f928:	3b01      	subs	r3, #1
 800f92a:	d503      	bpl.n	800f934 <__sfp+0x28>
 800f92c:	6833      	ldr	r3, [r6, #0]
 800f92e:	b30b      	cbz	r3, 800f974 <__sfp+0x68>
 800f930:	6836      	ldr	r6, [r6, #0]
 800f932:	e7f7      	b.n	800f924 <__sfp+0x18>
 800f934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f938:	b9d5      	cbnz	r5, 800f970 <__sfp+0x64>
 800f93a:	4b16      	ldr	r3, [pc, #88]	; (800f994 <__sfp+0x88>)
 800f93c:	60e3      	str	r3, [r4, #12]
 800f93e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f942:	6665      	str	r5, [r4, #100]	; 0x64
 800f944:	f000 f847 	bl	800f9d6 <__retarget_lock_init_recursive>
 800f948:	f7ff ff96 	bl	800f878 <__sfp_lock_release>
 800f94c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f954:	6025      	str	r5, [r4, #0]
 800f956:	61a5      	str	r5, [r4, #24]
 800f958:	2208      	movs	r2, #8
 800f95a:	4629      	mov	r1, r5
 800f95c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f960:	f7ff fdb4 	bl	800f4cc <memset>
 800f964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f96c:	4620      	mov	r0, r4
 800f96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f970:	3468      	adds	r4, #104	; 0x68
 800f972:	e7d9      	b.n	800f928 <__sfp+0x1c>
 800f974:	2104      	movs	r1, #4
 800f976:	4638      	mov	r0, r7
 800f978:	f7ff ff62 	bl	800f840 <__sfmoreglue>
 800f97c:	4604      	mov	r4, r0
 800f97e:	6030      	str	r0, [r6, #0]
 800f980:	2800      	cmp	r0, #0
 800f982:	d1d5      	bne.n	800f930 <__sfp+0x24>
 800f984:	f7ff ff78 	bl	800f878 <__sfp_lock_release>
 800f988:	230c      	movs	r3, #12
 800f98a:	603b      	str	r3, [r7, #0]
 800f98c:	e7ee      	b.n	800f96c <__sfp+0x60>
 800f98e:	bf00      	nop
 800f990:	08010388 	.word	0x08010388
 800f994:	ffff0001 	.word	0xffff0001

0800f998 <_fwalk_reent>:
 800f998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	4606      	mov	r6, r0
 800f99e:	4688      	mov	r8, r1
 800f9a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f9a4:	2700      	movs	r7, #0
 800f9a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9aa:	f1b9 0901 	subs.w	r9, r9, #1
 800f9ae:	d505      	bpl.n	800f9bc <_fwalk_reent+0x24>
 800f9b0:	6824      	ldr	r4, [r4, #0]
 800f9b2:	2c00      	cmp	r4, #0
 800f9b4:	d1f7      	bne.n	800f9a6 <_fwalk_reent+0xe>
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9bc:	89ab      	ldrh	r3, [r5, #12]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d907      	bls.n	800f9d2 <_fwalk_reent+0x3a>
 800f9c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	d003      	beq.n	800f9d2 <_fwalk_reent+0x3a>
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	47c0      	blx	r8
 800f9d0:	4307      	orrs	r7, r0
 800f9d2:	3568      	adds	r5, #104	; 0x68
 800f9d4:	e7e9      	b.n	800f9aa <_fwalk_reent+0x12>

0800f9d6 <__retarget_lock_init_recursive>:
 800f9d6:	4770      	bx	lr

0800f9d8 <__retarget_lock_acquire_recursive>:
 800f9d8:	4770      	bx	lr

0800f9da <__retarget_lock_release_recursive>:
 800f9da:	4770      	bx	lr

0800f9dc <__swhatbuf_r>:
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	460e      	mov	r6, r1
 800f9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9e4:	2900      	cmp	r1, #0
 800f9e6:	b096      	sub	sp, #88	; 0x58
 800f9e8:	4614      	mov	r4, r2
 800f9ea:	461d      	mov	r5, r3
 800f9ec:	da08      	bge.n	800fa00 <__swhatbuf_r+0x24>
 800f9ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	602a      	str	r2, [r5, #0]
 800f9f6:	061a      	lsls	r2, r3, #24
 800f9f8:	d410      	bmi.n	800fa1c <__swhatbuf_r+0x40>
 800f9fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9fe:	e00e      	b.n	800fa1e <__swhatbuf_r+0x42>
 800fa00:	466a      	mov	r2, sp
 800fa02:	f000 f96f 	bl	800fce4 <_fstat_r>
 800fa06:	2800      	cmp	r0, #0
 800fa08:	dbf1      	blt.n	800f9ee <__swhatbuf_r+0x12>
 800fa0a:	9a01      	ldr	r2, [sp, #4]
 800fa0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa14:	425a      	negs	r2, r3
 800fa16:	415a      	adcs	r2, r3
 800fa18:	602a      	str	r2, [r5, #0]
 800fa1a:	e7ee      	b.n	800f9fa <__swhatbuf_r+0x1e>
 800fa1c:	2340      	movs	r3, #64	; 0x40
 800fa1e:	2000      	movs	r0, #0
 800fa20:	6023      	str	r3, [r4, #0]
 800fa22:	b016      	add	sp, #88	; 0x58
 800fa24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fa28 <malloc>:
 800fa28:	4b02      	ldr	r3, [pc, #8]	; (800fa34 <malloc+0xc>)
 800fa2a:	4601      	mov	r1, r0
 800fa2c:	6818      	ldr	r0, [r3, #0]
 800fa2e:	f000 b86f 	b.w	800fb10 <_malloc_r>
 800fa32:	bf00      	nop
 800fa34:	24000054 	.word	0x24000054

0800fa38 <_free_r>:
 800fa38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa3a:	2900      	cmp	r1, #0
 800fa3c:	d044      	beq.n	800fac8 <_free_r+0x90>
 800fa3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa42:	9001      	str	r0, [sp, #4]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f1a1 0404 	sub.w	r4, r1, #4
 800fa4a:	bfb8      	it	lt
 800fa4c:	18e4      	addlt	r4, r4, r3
 800fa4e:	f000 f96d 	bl	800fd2c <__malloc_lock>
 800fa52:	4a1e      	ldr	r2, [pc, #120]	; (800facc <_free_r+0x94>)
 800fa54:	9801      	ldr	r0, [sp, #4]
 800fa56:	6813      	ldr	r3, [r2, #0]
 800fa58:	b933      	cbnz	r3, 800fa68 <_free_r+0x30>
 800fa5a:	6063      	str	r3, [r4, #4]
 800fa5c:	6014      	str	r4, [r2, #0]
 800fa5e:	b003      	add	sp, #12
 800fa60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa64:	f000 b968 	b.w	800fd38 <__malloc_unlock>
 800fa68:	42a3      	cmp	r3, r4
 800fa6a:	d908      	bls.n	800fa7e <_free_r+0x46>
 800fa6c:	6825      	ldr	r5, [r4, #0]
 800fa6e:	1961      	adds	r1, r4, r5
 800fa70:	428b      	cmp	r3, r1
 800fa72:	bf01      	itttt	eq
 800fa74:	6819      	ldreq	r1, [r3, #0]
 800fa76:	685b      	ldreq	r3, [r3, #4]
 800fa78:	1949      	addeq	r1, r1, r5
 800fa7a:	6021      	streq	r1, [r4, #0]
 800fa7c:	e7ed      	b.n	800fa5a <_free_r+0x22>
 800fa7e:	461a      	mov	r2, r3
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	b10b      	cbz	r3, 800fa88 <_free_r+0x50>
 800fa84:	42a3      	cmp	r3, r4
 800fa86:	d9fa      	bls.n	800fa7e <_free_r+0x46>
 800fa88:	6811      	ldr	r1, [r2, #0]
 800fa8a:	1855      	adds	r5, r2, r1
 800fa8c:	42a5      	cmp	r5, r4
 800fa8e:	d10b      	bne.n	800faa8 <_free_r+0x70>
 800fa90:	6824      	ldr	r4, [r4, #0]
 800fa92:	4421      	add	r1, r4
 800fa94:	1854      	adds	r4, r2, r1
 800fa96:	42a3      	cmp	r3, r4
 800fa98:	6011      	str	r1, [r2, #0]
 800fa9a:	d1e0      	bne.n	800fa5e <_free_r+0x26>
 800fa9c:	681c      	ldr	r4, [r3, #0]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	6053      	str	r3, [r2, #4]
 800faa2:	4421      	add	r1, r4
 800faa4:	6011      	str	r1, [r2, #0]
 800faa6:	e7da      	b.n	800fa5e <_free_r+0x26>
 800faa8:	d902      	bls.n	800fab0 <_free_r+0x78>
 800faaa:	230c      	movs	r3, #12
 800faac:	6003      	str	r3, [r0, #0]
 800faae:	e7d6      	b.n	800fa5e <_free_r+0x26>
 800fab0:	6825      	ldr	r5, [r4, #0]
 800fab2:	1961      	adds	r1, r4, r5
 800fab4:	428b      	cmp	r3, r1
 800fab6:	bf04      	itt	eq
 800fab8:	6819      	ldreq	r1, [r3, #0]
 800faba:	685b      	ldreq	r3, [r3, #4]
 800fabc:	6063      	str	r3, [r4, #4]
 800fabe:	bf04      	itt	eq
 800fac0:	1949      	addeq	r1, r1, r5
 800fac2:	6021      	streq	r1, [r4, #0]
 800fac4:	6054      	str	r4, [r2, #4]
 800fac6:	e7ca      	b.n	800fa5e <_free_r+0x26>
 800fac8:	b003      	add	sp, #12
 800faca:	bd30      	pop	{r4, r5, pc}
 800facc:	24000e74 	.word	0x24000e74

0800fad0 <sbrk_aligned>:
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	4e0e      	ldr	r6, [pc, #56]	; (800fb0c <sbrk_aligned+0x3c>)
 800fad4:	460c      	mov	r4, r1
 800fad6:	6831      	ldr	r1, [r6, #0]
 800fad8:	4605      	mov	r5, r0
 800fada:	b911      	cbnz	r1, 800fae2 <sbrk_aligned+0x12>
 800fadc:	f000 f88c 	bl	800fbf8 <_sbrk_r>
 800fae0:	6030      	str	r0, [r6, #0]
 800fae2:	4621      	mov	r1, r4
 800fae4:	4628      	mov	r0, r5
 800fae6:	f000 f887 	bl	800fbf8 <_sbrk_r>
 800faea:	1c43      	adds	r3, r0, #1
 800faec:	d00a      	beq.n	800fb04 <sbrk_aligned+0x34>
 800faee:	1cc4      	adds	r4, r0, #3
 800faf0:	f024 0403 	bic.w	r4, r4, #3
 800faf4:	42a0      	cmp	r0, r4
 800faf6:	d007      	beq.n	800fb08 <sbrk_aligned+0x38>
 800faf8:	1a21      	subs	r1, r4, r0
 800fafa:	4628      	mov	r0, r5
 800fafc:	f000 f87c 	bl	800fbf8 <_sbrk_r>
 800fb00:	3001      	adds	r0, #1
 800fb02:	d101      	bne.n	800fb08 <sbrk_aligned+0x38>
 800fb04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fb08:	4620      	mov	r0, r4
 800fb0a:	bd70      	pop	{r4, r5, r6, pc}
 800fb0c:	24000e78 	.word	0x24000e78

0800fb10 <_malloc_r>:
 800fb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb14:	1ccd      	adds	r5, r1, #3
 800fb16:	f025 0503 	bic.w	r5, r5, #3
 800fb1a:	3508      	adds	r5, #8
 800fb1c:	2d0c      	cmp	r5, #12
 800fb1e:	bf38      	it	cc
 800fb20:	250c      	movcc	r5, #12
 800fb22:	2d00      	cmp	r5, #0
 800fb24:	4607      	mov	r7, r0
 800fb26:	db01      	blt.n	800fb2c <_malloc_r+0x1c>
 800fb28:	42a9      	cmp	r1, r5
 800fb2a:	d905      	bls.n	800fb38 <_malloc_r+0x28>
 800fb2c:	230c      	movs	r3, #12
 800fb2e:	603b      	str	r3, [r7, #0]
 800fb30:	2600      	movs	r6, #0
 800fb32:	4630      	mov	r0, r6
 800fb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb38:	4e2e      	ldr	r6, [pc, #184]	; (800fbf4 <_malloc_r+0xe4>)
 800fb3a:	f000 f8f7 	bl	800fd2c <__malloc_lock>
 800fb3e:	6833      	ldr	r3, [r6, #0]
 800fb40:	461c      	mov	r4, r3
 800fb42:	bb34      	cbnz	r4, 800fb92 <_malloc_r+0x82>
 800fb44:	4629      	mov	r1, r5
 800fb46:	4638      	mov	r0, r7
 800fb48:	f7ff ffc2 	bl	800fad0 <sbrk_aligned>
 800fb4c:	1c43      	adds	r3, r0, #1
 800fb4e:	4604      	mov	r4, r0
 800fb50:	d14d      	bne.n	800fbee <_malloc_r+0xde>
 800fb52:	6834      	ldr	r4, [r6, #0]
 800fb54:	4626      	mov	r6, r4
 800fb56:	2e00      	cmp	r6, #0
 800fb58:	d140      	bne.n	800fbdc <_malloc_r+0xcc>
 800fb5a:	6823      	ldr	r3, [r4, #0]
 800fb5c:	4631      	mov	r1, r6
 800fb5e:	4638      	mov	r0, r7
 800fb60:	eb04 0803 	add.w	r8, r4, r3
 800fb64:	f000 f848 	bl	800fbf8 <_sbrk_r>
 800fb68:	4580      	cmp	r8, r0
 800fb6a:	d13a      	bne.n	800fbe2 <_malloc_r+0xd2>
 800fb6c:	6821      	ldr	r1, [r4, #0]
 800fb6e:	3503      	adds	r5, #3
 800fb70:	1a6d      	subs	r5, r5, r1
 800fb72:	f025 0503 	bic.w	r5, r5, #3
 800fb76:	3508      	adds	r5, #8
 800fb78:	2d0c      	cmp	r5, #12
 800fb7a:	bf38      	it	cc
 800fb7c:	250c      	movcc	r5, #12
 800fb7e:	4629      	mov	r1, r5
 800fb80:	4638      	mov	r0, r7
 800fb82:	f7ff ffa5 	bl	800fad0 <sbrk_aligned>
 800fb86:	3001      	adds	r0, #1
 800fb88:	d02b      	beq.n	800fbe2 <_malloc_r+0xd2>
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	442b      	add	r3, r5
 800fb8e:	6023      	str	r3, [r4, #0]
 800fb90:	e00e      	b.n	800fbb0 <_malloc_r+0xa0>
 800fb92:	6822      	ldr	r2, [r4, #0]
 800fb94:	1b52      	subs	r2, r2, r5
 800fb96:	d41e      	bmi.n	800fbd6 <_malloc_r+0xc6>
 800fb98:	2a0b      	cmp	r2, #11
 800fb9a:	d916      	bls.n	800fbca <_malloc_r+0xba>
 800fb9c:	1961      	adds	r1, r4, r5
 800fb9e:	42a3      	cmp	r3, r4
 800fba0:	6025      	str	r5, [r4, #0]
 800fba2:	bf18      	it	ne
 800fba4:	6059      	strne	r1, [r3, #4]
 800fba6:	6863      	ldr	r3, [r4, #4]
 800fba8:	bf08      	it	eq
 800fbaa:	6031      	streq	r1, [r6, #0]
 800fbac:	5162      	str	r2, [r4, r5]
 800fbae:	604b      	str	r3, [r1, #4]
 800fbb0:	4638      	mov	r0, r7
 800fbb2:	f104 060b 	add.w	r6, r4, #11
 800fbb6:	f000 f8bf 	bl	800fd38 <__malloc_unlock>
 800fbba:	f026 0607 	bic.w	r6, r6, #7
 800fbbe:	1d23      	adds	r3, r4, #4
 800fbc0:	1af2      	subs	r2, r6, r3
 800fbc2:	d0b6      	beq.n	800fb32 <_malloc_r+0x22>
 800fbc4:	1b9b      	subs	r3, r3, r6
 800fbc6:	50a3      	str	r3, [r4, r2]
 800fbc8:	e7b3      	b.n	800fb32 <_malloc_r+0x22>
 800fbca:	6862      	ldr	r2, [r4, #4]
 800fbcc:	42a3      	cmp	r3, r4
 800fbce:	bf0c      	ite	eq
 800fbd0:	6032      	streq	r2, [r6, #0]
 800fbd2:	605a      	strne	r2, [r3, #4]
 800fbd4:	e7ec      	b.n	800fbb0 <_malloc_r+0xa0>
 800fbd6:	4623      	mov	r3, r4
 800fbd8:	6864      	ldr	r4, [r4, #4]
 800fbda:	e7b2      	b.n	800fb42 <_malloc_r+0x32>
 800fbdc:	4634      	mov	r4, r6
 800fbde:	6876      	ldr	r6, [r6, #4]
 800fbe0:	e7b9      	b.n	800fb56 <_malloc_r+0x46>
 800fbe2:	230c      	movs	r3, #12
 800fbe4:	603b      	str	r3, [r7, #0]
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	f000 f8a6 	bl	800fd38 <__malloc_unlock>
 800fbec:	e7a1      	b.n	800fb32 <_malloc_r+0x22>
 800fbee:	6025      	str	r5, [r4, #0]
 800fbf0:	e7de      	b.n	800fbb0 <_malloc_r+0xa0>
 800fbf2:	bf00      	nop
 800fbf4:	24000e74 	.word	0x24000e74

0800fbf8 <_sbrk_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d06      	ldr	r5, [pc, #24]	; (800fc14 <_sbrk_r+0x1c>)
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	602b      	str	r3, [r5, #0]
 800fc04:	f7f4 f94a 	bl	8003e9c <_sbrk>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_sbrk_r+0x1a>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_sbrk_r+0x1a>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	24000e7c 	.word	0x24000e7c

0800fc18 <__sread>:
 800fc18:	b510      	push	{r4, lr}
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc20:	f000 f890 	bl	800fd44 <_read_r>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	bfab      	itete	ge
 800fc28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc2a:	89a3      	ldrhlt	r3, [r4, #12]
 800fc2c:	181b      	addge	r3, r3, r0
 800fc2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc32:	bfac      	ite	ge
 800fc34:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc36:	81a3      	strhlt	r3, [r4, #12]
 800fc38:	bd10      	pop	{r4, pc}

0800fc3a <__swrite>:
 800fc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc3e:	461f      	mov	r7, r3
 800fc40:	898b      	ldrh	r3, [r1, #12]
 800fc42:	05db      	lsls	r3, r3, #23
 800fc44:	4605      	mov	r5, r0
 800fc46:	460c      	mov	r4, r1
 800fc48:	4616      	mov	r6, r2
 800fc4a:	d505      	bpl.n	800fc58 <__swrite+0x1e>
 800fc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc50:	2302      	movs	r3, #2
 800fc52:	2200      	movs	r2, #0
 800fc54:	f000 f858 	bl	800fd08 <_lseek_r>
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc62:	81a3      	strh	r3, [r4, #12]
 800fc64:	4632      	mov	r2, r6
 800fc66:	463b      	mov	r3, r7
 800fc68:	4628      	mov	r0, r5
 800fc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6e:	f000 b817 	b.w	800fca0 <_write_r>

0800fc72 <__sseek>:
 800fc72:	b510      	push	{r4, lr}
 800fc74:	460c      	mov	r4, r1
 800fc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc7a:	f000 f845 	bl	800fd08 <_lseek_r>
 800fc7e:	1c43      	adds	r3, r0, #1
 800fc80:	89a3      	ldrh	r3, [r4, #12]
 800fc82:	bf15      	itete	ne
 800fc84:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc8e:	81a3      	strheq	r3, [r4, #12]
 800fc90:	bf18      	it	ne
 800fc92:	81a3      	strhne	r3, [r4, #12]
 800fc94:	bd10      	pop	{r4, pc}

0800fc96 <__sclose>:
 800fc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc9a:	f000 b813 	b.w	800fcc4 <_close_r>
	...

0800fca0 <_write_r>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	4d07      	ldr	r5, [pc, #28]	; (800fcc0 <_write_r+0x20>)
 800fca4:	4604      	mov	r4, r0
 800fca6:	4608      	mov	r0, r1
 800fca8:	4611      	mov	r1, r2
 800fcaa:	2200      	movs	r2, #0
 800fcac:	602a      	str	r2, [r5, #0]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	f7f3 f958 	bl	8002f64 <_write>
 800fcb4:	1c43      	adds	r3, r0, #1
 800fcb6:	d102      	bne.n	800fcbe <_write_r+0x1e>
 800fcb8:	682b      	ldr	r3, [r5, #0]
 800fcba:	b103      	cbz	r3, 800fcbe <_write_r+0x1e>
 800fcbc:	6023      	str	r3, [r4, #0]
 800fcbe:	bd38      	pop	{r3, r4, r5, pc}
 800fcc0:	24000e7c 	.word	0x24000e7c

0800fcc4 <_close_r>:
 800fcc4:	b538      	push	{r3, r4, r5, lr}
 800fcc6:	4d06      	ldr	r5, [pc, #24]	; (800fce0 <_close_r+0x1c>)
 800fcc8:	2300      	movs	r3, #0
 800fcca:	4604      	mov	r4, r0
 800fccc:	4608      	mov	r0, r1
 800fcce:	602b      	str	r3, [r5, #0]
 800fcd0:	f7f3 f974 	bl	8002fbc <_close>
 800fcd4:	1c43      	adds	r3, r0, #1
 800fcd6:	d102      	bne.n	800fcde <_close_r+0x1a>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	b103      	cbz	r3, 800fcde <_close_r+0x1a>
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	bd38      	pop	{r3, r4, r5, pc}
 800fce0:	24000e7c 	.word	0x24000e7c

0800fce4 <_fstat_r>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	4d07      	ldr	r5, [pc, #28]	; (800fd04 <_fstat_r+0x20>)
 800fce8:	2300      	movs	r3, #0
 800fcea:	4604      	mov	r4, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	4611      	mov	r1, r2
 800fcf0:	602b      	str	r3, [r5, #0]
 800fcf2:	f7f3 f9a3 	bl	800303c <_fstat>
 800fcf6:	1c43      	adds	r3, r0, #1
 800fcf8:	d102      	bne.n	800fd00 <_fstat_r+0x1c>
 800fcfa:	682b      	ldr	r3, [r5, #0]
 800fcfc:	b103      	cbz	r3, 800fd00 <_fstat_r+0x1c>
 800fcfe:	6023      	str	r3, [r4, #0]
 800fd00:	bd38      	pop	{r3, r4, r5, pc}
 800fd02:	bf00      	nop
 800fd04:	24000e7c 	.word	0x24000e7c

0800fd08 <_lseek_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	4d07      	ldr	r5, [pc, #28]	; (800fd28 <_lseek_r+0x20>)
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	4608      	mov	r0, r1
 800fd10:	4611      	mov	r1, r2
 800fd12:	2200      	movs	r2, #0
 800fd14:	602a      	str	r2, [r5, #0]
 800fd16:	461a      	mov	r2, r3
 800fd18:	f7f4 f8b2 	bl	8003e80 <_lseek>
 800fd1c:	1c43      	adds	r3, r0, #1
 800fd1e:	d102      	bne.n	800fd26 <_lseek_r+0x1e>
 800fd20:	682b      	ldr	r3, [r5, #0]
 800fd22:	b103      	cbz	r3, 800fd26 <_lseek_r+0x1e>
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	bd38      	pop	{r3, r4, r5, pc}
 800fd28:	24000e7c 	.word	0x24000e7c

0800fd2c <__malloc_lock>:
 800fd2c:	4801      	ldr	r0, [pc, #4]	; (800fd34 <__malloc_lock+0x8>)
 800fd2e:	f7ff be53 	b.w	800f9d8 <__retarget_lock_acquire_recursive>
 800fd32:	bf00      	nop
 800fd34:	24000e70 	.word	0x24000e70

0800fd38 <__malloc_unlock>:
 800fd38:	4801      	ldr	r0, [pc, #4]	; (800fd40 <__malloc_unlock+0x8>)
 800fd3a:	f7ff be4e 	b.w	800f9da <__retarget_lock_release_recursive>
 800fd3e:	bf00      	nop
 800fd40:	24000e70 	.word	0x24000e70

0800fd44 <_read_r>:
 800fd44:	b538      	push	{r3, r4, r5, lr}
 800fd46:	4d07      	ldr	r5, [pc, #28]	; (800fd64 <_read_r+0x20>)
 800fd48:	4604      	mov	r4, r0
 800fd4a:	4608      	mov	r0, r1
 800fd4c:	4611      	mov	r1, r2
 800fd4e:	2200      	movs	r2, #0
 800fd50:	602a      	str	r2, [r5, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	f7f3 f94a 	bl	8002fec <_read>
 800fd58:	1c43      	adds	r3, r0, #1
 800fd5a:	d102      	bne.n	800fd62 <_read_r+0x1e>
 800fd5c:	682b      	ldr	r3, [r5, #0]
 800fd5e:	b103      	cbz	r3, 800fd62 <_read_r+0x1e>
 800fd60:	6023      	str	r3, [r4, #0]
 800fd62:	bd38      	pop	{r3, r4, r5, pc}
 800fd64:	24000e7c 	.word	0x24000e7c

0800fd68 <_init>:
 800fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6a:	bf00      	nop
 800fd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd6e:	bc08      	pop	{r3}
 800fd70:	469e      	mov	lr, r3
 800fd72:	4770      	bx	lr

0800fd74 <_fini>:
 800fd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd76:	bf00      	nop
 800fd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd7a:	bc08      	pop	{r3}
 800fd7c:	469e      	mov	lr, r3
 800fd7e:	4770      	bx	lr
